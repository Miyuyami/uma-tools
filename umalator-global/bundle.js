(() => {
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __commonJS = (cb, mod) => function __require() {
    return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
  };
  var __copyProps = (to2, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames(from))
        if (!__hasOwnProp.call(to2, key) && key !== except)
          __defProp(to2, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to2;
  };
  var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
    // If the importer is in node compatibility mode or this is not an ESM
    // file that has been converted to a CommonJS file using a Babel-
    // compatible transform (i.e. "__esModule" has not been set), then set
    // "default" to the CommonJS "module.exports" for node compatibility.
    isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
    mod
  ));

  // ../node_modules/dlv/dist/dlv.umd.js
  var require_dlv_umd = __commonJS({
    "../node_modules/dlv/dist/dlv.umd.js"(exports, module) {
      !function(t4, n4) {
        "object" == typeof exports && "undefined" != typeof module ? module.exports = function(t5, n5, e6, i5, o5) {
          for (n5 = n5.split ? n5.split(".") : n5, i5 = 0; i5 < n5.length; i5++)
            t5 = t5 ? t5[n5[i5]] : o5;
          return t5 === o5 ? e6 : t5;
        } : "function" == typeof define && define.amd ? define(function() {
          return function(t5, n5, e6, i5, o5) {
            for (n5 = n5.split ? n5.split(".") : n5, i5 = 0; i5 < n5.length; i5++)
              t5 = t5 ? t5[n5[i5]] : o5;
            return t5 === o5 ? e6 : t5;
          };
        }) : t4.dlv = function(t5, n5, e6, i5, o5) {
          for (n5 = n5.split ? n5.split(".") : n5, i5 = 0; i5 < n5.length; i5++)
            t5 = t5 ? t5[n5[i5]] : o5;
          return t5 === o5 ? e6 : t5;
        };
      }(exports);
    }
  });

  // mockAssert-ns:assert
  var require_assert = __commonJS({
    "mockAssert-ns:assert"(exports, module) {
      module.exports = { strict: console.assert };
    }
  });

  // ../node_modules/preact/dist/preact.module.js
  var n;
  var l;
  var u;
  var t;
  var i;
  var r;
  var o;
  var e;
  var f;
  var c;
  var s;
  var a;
  var h;
  var p = {};
  var v = [];
  var y = /acit|ex(?:s|g|n|p|$)|rph|grid|ows|mnc|ntw|ine[ch]|zoo|^ord|itera/i;
  var w = Array.isArray;
  function d(n4, l5) {
    for (var u4 in l5)
      n4[u4] = l5[u4];
    return n4;
  }
  function g(n4) {
    n4 && n4.parentNode && n4.parentNode.removeChild(n4);
  }
  function _(l5, u4, t4) {
    var i5, r4, o5, e6 = {};
    for (o5 in u4)
      "key" == o5 ? i5 = u4[o5] : "ref" == o5 ? r4 = u4[o5] : e6[o5] = u4[o5];
    if (arguments.length > 2 && (e6.children = arguments.length > 3 ? n.call(arguments, 2) : t4), "function" == typeof l5 && null != l5.defaultProps)
      for (o5 in l5.defaultProps)
        void 0 === e6[o5] && (e6[o5] = l5.defaultProps[o5]);
    return m(l5, e6, i5, r4, null);
  }
  function m(n4, t4, i5, r4, o5) {
    var e6 = { type: n4, props: t4, key: i5, ref: r4, __k: null, __: null, __b: 0, __e: null, __c: null, constructor: void 0, __v: null == o5 ? ++u : o5, __i: -1, __u: 0 };
    return null == o5 && null != l.vnode && l.vnode(e6), e6;
  }
  function k(n4) {
    return n4.children;
  }
  function x(n4, l5) {
    this.props = n4, this.context = l5;
  }
  function S(n4, l5) {
    if (null == l5)
      return n4.__ ? S(n4.__, n4.__i + 1) : null;
    for (var u4; l5 < n4.__k.length; l5++)
      if (null != (u4 = n4.__k[l5]) && null != u4.__e)
        return u4.__e;
    return "function" == typeof n4.type ? S(n4) : null;
  }
  function C(n4) {
    var l5, u4;
    if (null != (n4 = n4.__) && null != n4.__c) {
      for (n4.__e = n4.__c.base = null, l5 = 0; l5 < n4.__k.length; l5++)
        if (null != (u4 = n4.__k[l5]) && null != u4.__e) {
          n4.__e = n4.__c.base = u4.__e;
          break;
        }
      return C(n4);
    }
  }
  function M(n4) {
    (!n4.__d && (n4.__d = true) && i.push(n4) && !$.__r++ || r != l.debounceRendering) && ((r = l.debounceRendering) || o)($);
  }
  function $() {
    for (var n4, u4, t4, r4, o5, f4, c4, s4 = 1; i.length; )
      i.length > s4 && i.sort(e), n4 = i.shift(), s4 = i.length, n4.__d && (t4 = void 0, o5 = (r4 = (u4 = n4).__v).__e, f4 = [], c4 = [], u4.__P && ((t4 = d({}, r4)).__v = r4.__v + 1, l.vnode && l.vnode(t4), O(u4.__P, t4, r4, u4.__n, u4.__P.namespaceURI, 32 & r4.__u ? [o5] : null, f4, null == o5 ? S(r4) : o5, !!(32 & r4.__u), c4), t4.__v = r4.__v, t4.__.__k[t4.__i] = t4, z(f4, t4, c4), t4.__e != o5 && C(t4)));
    $.__r = 0;
  }
  function I(n4, l5, u4, t4, i5, r4, o5, e6, f4, c4, s4) {
    var a5, h4, y5, w4, d4, g4, _3 = t4 && t4.__k || v, m4 = l5.length;
    for (f4 = P(u4, l5, _3, f4, m4), a5 = 0; a5 < m4; a5++)
      null != (y5 = u4.__k[a5]) && (h4 = -1 == y5.__i ? p : _3[y5.__i] || p, y5.__i = a5, g4 = O(n4, y5, h4, i5, r4, o5, e6, f4, c4, s4), w4 = y5.__e, y5.ref && h4.ref != y5.ref && (h4.ref && q(h4.ref, null, y5), s4.push(y5.ref, y5.__c || w4, y5)), null == d4 && null != w4 && (d4 = w4), 4 & y5.__u || h4.__k === y5.__k ? f4 = A(y5, f4, n4) : "function" == typeof y5.type && void 0 !== g4 ? f4 = g4 : w4 && (f4 = w4.nextSibling), y5.__u &= -7);
    return u4.__e = d4, f4;
  }
  function P(n4, l5, u4, t4, i5) {
    var r4, o5, e6, f4, c4, s4 = u4.length, a5 = s4, h4 = 0;
    for (n4.__k = new Array(i5), r4 = 0; r4 < i5; r4++)
      null != (o5 = l5[r4]) && "boolean" != typeof o5 && "function" != typeof o5 ? (f4 = r4 + h4, (o5 = n4.__k[r4] = "string" == typeof o5 || "number" == typeof o5 || "bigint" == typeof o5 || o5.constructor == String ? m(null, o5, null, null, null) : w(o5) ? m(k, { children: o5 }, null, null, null) : null == o5.constructor && o5.__b > 0 ? m(o5.type, o5.props, o5.key, o5.ref ? o5.ref : null, o5.__v) : o5).__ = n4, o5.__b = n4.__b + 1, e6 = null, -1 != (c4 = o5.__i = L(o5, u4, f4, a5)) && (a5--, (e6 = u4[c4]) && (e6.__u |= 2)), null == e6 || null == e6.__v ? (-1 == c4 && (i5 > s4 ? h4-- : i5 < s4 && h4++), "function" != typeof o5.type && (o5.__u |= 4)) : c4 != f4 && (c4 == f4 - 1 ? h4-- : c4 == f4 + 1 ? h4++ : (c4 > f4 ? h4-- : h4++, o5.__u |= 4))) : n4.__k[r4] = null;
    if (a5)
      for (r4 = 0; r4 < s4; r4++)
        null != (e6 = u4[r4]) && 0 == (2 & e6.__u) && (e6.__e == t4 && (t4 = S(e6)), B(e6, e6));
    return t4;
  }
  function A(n4, l5, u4) {
    var t4, i5;
    if ("function" == typeof n4.type) {
      for (t4 = n4.__k, i5 = 0; t4 && i5 < t4.length; i5++)
        t4[i5] && (t4[i5].__ = n4, l5 = A(t4[i5], l5, u4));
      return l5;
    }
    n4.__e != l5 && (l5 && n4.type && !u4.contains(l5) && (l5 = S(n4)), u4.insertBefore(n4.__e, l5 || null), l5 = n4.__e);
    do {
      l5 = l5 && l5.nextSibling;
    } while (null != l5 && 8 == l5.nodeType);
    return l5;
  }
  function L(n4, l5, u4, t4) {
    var i5, r4, o5 = n4.key, e6 = n4.type, f4 = l5[u4];
    if (null === f4 && null == n4.key || f4 && o5 == f4.key && e6 == f4.type && 0 == (2 & f4.__u))
      return u4;
    if (t4 > (null != f4 && 0 == (2 & f4.__u) ? 1 : 0))
      for (i5 = u4 - 1, r4 = u4 + 1; i5 >= 0 || r4 < l5.length; ) {
        if (i5 >= 0) {
          if ((f4 = l5[i5]) && 0 == (2 & f4.__u) && o5 == f4.key && e6 == f4.type)
            return i5;
          i5--;
        }
        if (r4 < l5.length) {
          if ((f4 = l5[r4]) && 0 == (2 & f4.__u) && o5 == f4.key && e6 == f4.type)
            return r4;
          r4++;
        }
      }
    return -1;
  }
  function T(n4, l5, u4) {
    "-" == l5[0] ? n4.setProperty(l5, null == u4 ? "" : u4) : n4[l5] = null == u4 ? "" : "number" != typeof u4 || y.test(l5) ? u4 : u4 + "px";
  }
  function j(n4, l5, u4, t4, i5) {
    var r4, o5;
    n:
      if ("style" == l5)
        if ("string" == typeof u4)
          n4.style.cssText = u4;
        else {
          if ("string" == typeof t4 && (n4.style.cssText = t4 = ""), t4)
            for (l5 in t4)
              u4 && l5 in u4 || T(n4.style, l5, "");
          if (u4)
            for (l5 in u4)
              t4 && u4[l5] == t4[l5] || T(n4.style, l5, u4[l5]);
        }
      else if ("o" == l5[0] && "n" == l5[1])
        r4 = l5 != (l5 = l5.replace(f, "$1")), o5 = l5.toLowerCase(), l5 = o5 in n4 || "onFocusOut" == l5 || "onFocusIn" == l5 ? o5.slice(2) : l5.slice(2), n4.l || (n4.l = {}), n4.l[l5 + r4] = u4, u4 ? t4 ? u4.u = t4.u : (u4.u = c, n4.addEventListener(l5, r4 ? a : s, r4)) : n4.removeEventListener(l5, r4 ? a : s, r4);
      else {
        if ("http://www.w3.org/2000/svg" == i5)
          l5 = l5.replace(/xlink(H|:h)/, "h").replace(/sName$/, "s");
        else if ("width" != l5 && "height" != l5 && "href" != l5 && "list" != l5 && "form" != l5 && "tabIndex" != l5 && "download" != l5 && "rowSpan" != l5 && "colSpan" != l5 && "role" != l5 && "popover" != l5 && l5 in n4)
          try {
            n4[l5] = null == u4 ? "" : u4;
            break n;
          } catch (n5) {
          }
        "function" == typeof u4 || (null == u4 || false === u4 && "-" != l5[4] ? n4.removeAttribute(l5) : n4.setAttribute(l5, "popover" == l5 && 1 == u4 ? "" : u4));
      }
  }
  function F(n4) {
    return function(u4) {
      if (this.l) {
        var t4 = this.l[u4.type + n4];
        if (null == u4.t)
          u4.t = c++;
        else if (u4.t < t4.u)
          return;
        return t4(l.event ? l.event(u4) : u4);
      }
    };
  }
  function O(n4, u4, t4, i5, r4, o5, e6, f4, c4, s4) {
    var a5, h4, p5, v4, y5, _3, m4, b2, S3, C5, M3, $3, P3, A4, H2, L3, T4, j4 = u4.type;
    if (null != u4.constructor)
      return null;
    128 & t4.__u && (c4 = !!(32 & t4.__u), o5 = [f4 = u4.__e = t4.__e]), (a5 = l.__b) && a5(u4);
    n:
      if ("function" == typeof j4)
        try {
          if (b2 = u4.props, S3 = "prototype" in j4 && j4.prototype.render, C5 = (a5 = j4.contextType) && i5[a5.__c], M3 = a5 ? C5 ? C5.props.value : a5.__ : i5, t4.__c ? m4 = (h4 = u4.__c = t4.__c).__ = h4.__E : (S3 ? u4.__c = h4 = new j4(b2, M3) : (u4.__c = h4 = new x(b2, M3), h4.constructor = j4, h4.render = D), C5 && C5.sub(h4), h4.props = b2, h4.state || (h4.state = {}), h4.context = M3, h4.__n = i5, p5 = h4.__d = true, h4.__h = [], h4._sb = []), S3 && null == h4.__s && (h4.__s = h4.state), S3 && null != j4.getDerivedStateFromProps && (h4.__s == h4.state && (h4.__s = d({}, h4.__s)), d(h4.__s, j4.getDerivedStateFromProps(b2, h4.__s))), v4 = h4.props, y5 = h4.state, h4.__v = u4, p5)
            S3 && null == j4.getDerivedStateFromProps && null != h4.componentWillMount && h4.componentWillMount(), S3 && null != h4.componentDidMount && h4.__h.push(h4.componentDidMount);
          else {
            if (S3 && null == j4.getDerivedStateFromProps && b2 !== v4 && null != h4.componentWillReceiveProps && h4.componentWillReceiveProps(b2, M3), !h4.__e && null != h4.shouldComponentUpdate && false === h4.shouldComponentUpdate(b2, h4.__s, M3) || u4.__v == t4.__v) {
              for (u4.__v != t4.__v && (h4.props = b2, h4.state = h4.__s, h4.__d = false), u4.__e = t4.__e, u4.__k = t4.__k, u4.__k.some(function(n5) {
                n5 && (n5.__ = u4);
              }), $3 = 0; $3 < h4._sb.length; $3++)
                h4.__h.push(h4._sb[$3]);
              h4._sb = [], h4.__h.length && e6.push(h4);
              break n;
            }
            null != h4.componentWillUpdate && h4.componentWillUpdate(b2, h4.__s, M3), S3 && null != h4.componentDidUpdate && h4.__h.push(function() {
              h4.componentDidUpdate(v4, y5, _3);
            });
          }
          if (h4.context = M3, h4.props = b2, h4.__P = n4, h4.__e = false, P3 = l.__r, A4 = 0, S3) {
            for (h4.state = h4.__s, h4.__d = false, P3 && P3(u4), a5 = h4.render(h4.props, h4.state, h4.context), H2 = 0; H2 < h4._sb.length; H2++)
              h4.__h.push(h4._sb[H2]);
            h4._sb = [];
          } else
            do {
              h4.__d = false, P3 && P3(u4), a5 = h4.render(h4.props, h4.state, h4.context), h4.state = h4.__s;
            } while (h4.__d && ++A4 < 25);
          h4.state = h4.__s, null != h4.getChildContext && (i5 = d(d({}, i5), h4.getChildContext())), S3 && !p5 && null != h4.getSnapshotBeforeUpdate && (_3 = h4.getSnapshotBeforeUpdate(v4, y5)), L3 = a5, null != a5 && a5.type === k && null == a5.key && (L3 = N(a5.props.children)), f4 = I(n4, w(L3) ? L3 : [L3], u4, t4, i5, r4, o5, e6, f4, c4, s4), h4.base = u4.__e, u4.__u &= -161, h4.__h.length && e6.push(h4), m4 && (h4.__E = h4.__ = null);
        } catch (n5) {
          if (u4.__v = null, c4 || null != o5)
            if (n5.then) {
              for (u4.__u |= c4 ? 160 : 128; f4 && 8 == f4.nodeType && f4.nextSibling; )
                f4 = f4.nextSibling;
              o5[o5.indexOf(f4)] = null, u4.__e = f4;
            } else
              for (T4 = o5.length; T4--; )
                g(o5[T4]);
          else
            u4.__e = t4.__e, u4.__k = t4.__k;
          l.__e(n5, u4, t4);
        }
      else
        null == o5 && u4.__v == t4.__v ? (u4.__k = t4.__k, u4.__e = t4.__e) : f4 = u4.__e = V(t4.__e, u4, t4, i5, r4, o5, e6, c4, s4);
    return (a5 = l.diffed) && a5(u4), 128 & u4.__u ? void 0 : f4;
  }
  function z(n4, u4, t4) {
    for (var i5 = 0; i5 < t4.length; i5++)
      q(t4[i5], t4[++i5], t4[++i5]);
    l.__c && l.__c(u4, n4), n4.some(function(u5) {
      try {
        n4 = u5.__h, u5.__h = [], n4.some(function(n5) {
          n5.call(u5);
        });
      } catch (n5) {
        l.__e(n5, u5.__v);
      }
    });
  }
  function N(n4) {
    return "object" != typeof n4 || null == n4 || n4.__b && n4.__b > 0 ? n4 : w(n4) ? n4.map(N) : d({}, n4);
  }
  function V(u4, t4, i5, r4, o5, e6, f4, c4, s4) {
    var a5, h4, v4, y5, d4, _3, m4, b2 = i5.props, k4 = t4.props, x5 = t4.type;
    if ("svg" == x5 ? o5 = "http://www.w3.org/2000/svg" : "math" == x5 ? o5 = "http://www.w3.org/1998/Math/MathML" : o5 || (o5 = "http://www.w3.org/1999/xhtml"), null != e6) {
      for (a5 = 0; a5 < e6.length; a5++)
        if ((d4 = e6[a5]) && "setAttribute" in d4 == !!x5 && (x5 ? d4.localName == x5 : 3 == d4.nodeType)) {
          u4 = d4, e6[a5] = null;
          break;
        }
    }
    if (null == u4) {
      if (null == x5)
        return document.createTextNode(k4);
      u4 = document.createElementNS(o5, x5, k4.is && k4), c4 && (l.__m && l.__m(t4, e6), c4 = false), e6 = null;
    }
    if (null == x5)
      b2 === k4 || c4 && u4.data == k4 || (u4.data = k4);
    else {
      if (e6 = e6 && n.call(u4.childNodes), b2 = i5.props || p, !c4 && null != e6)
        for (b2 = {}, a5 = 0; a5 < u4.attributes.length; a5++)
          b2[(d4 = u4.attributes[a5]).name] = d4.value;
      for (a5 in b2)
        if (d4 = b2[a5], "children" == a5)
          ;
        else if ("dangerouslySetInnerHTML" == a5)
          v4 = d4;
        else if (!(a5 in k4)) {
          if ("value" == a5 && "defaultValue" in k4 || "checked" == a5 && "defaultChecked" in k4)
            continue;
          j(u4, a5, null, d4, o5);
        }
      for (a5 in k4)
        d4 = k4[a5], "children" == a5 ? y5 = d4 : "dangerouslySetInnerHTML" == a5 ? h4 = d4 : "value" == a5 ? _3 = d4 : "checked" == a5 ? m4 = d4 : c4 && "function" != typeof d4 || b2[a5] === d4 || j(u4, a5, d4, b2[a5], o5);
      if (h4)
        c4 || v4 && (h4.__html == v4.__html || h4.__html == u4.innerHTML) || (u4.innerHTML = h4.__html), t4.__k = [];
      else if (v4 && (u4.innerHTML = ""), I("template" == t4.type ? u4.content : u4, w(y5) ? y5 : [y5], t4, i5, r4, "foreignObject" == x5 ? "http://www.w3.org/1999/xhtml" : o5, e6, f4, e6 ? e6[0] : i5.__k && S(i5, 0), c4, s4), null != e6)
        for (a5 = e6.length; a5--; )
          g(e6[a5]);
      c4 || (a5 = "value", "progress" == x5 && null == _3 ? u4.removeAttribute("value") : null != _3 && (_3 !== u4[a5] || "progress" == x5 && !_3 || "option" == x5 && _3 != b2[a5]) && j(u4, a5, _3, b2[a5], o5), a5 = "checked", null != m4 && m4 != u4[a5] && j(u4, a5, m4, b2[a5], o5));
    }
    return u4;
  }
  function q(n4, u4, t4) {
    try {
      if ("function" == typeof n4) {
        var i5 = "function" == typeof n4.__u;
        i5 && n4.__u(), i5 && null == u4 || (n4.__u = n4(u4));
      } else
        n4.current = u4;
    } catch (n5) {
      l.__e(n5, t4);
    }
  }
  function B(n4, u4, t4) {
    var i5, r4;
    if (l.unmount && l.unmount(n4), (i5 = n4.ref) && (i5.current && i5.current != n4.__e || q(i5, null, u4)), null != (i5 = n4.__c)) {
      if (i5.componentWillUnmount)
        try {
          i5.componentWillUnmount();
        } catch (n5) {
          l.__e(n5, u4);
        }
      i5.base = i5.__P = null;
    }
    if (i5 = n4.__k)
      for (r4 = 0; r4 < i5.length; r4++)
        i5[r4] && B(i5[r4], u4, t4 || "function" != typeof n4.type);
    t4 || g(n4.__e), n4.__c = n4.__ = n4.__e = void 0;
  }
  function D(n4, l5, u4) {
    return this.constructor(n4, u4);
  }
  function E(u4, t4, i5) {
    var r4, o5, e6, f4;
    t4 == document && (t4 = document.documentElement), l.__ && l.__(u4, t4), o5 = (r4 = "function" == typeof i5) ? null : i5 && i5.__k || t4.__k, e6 = [], f4 = [], O(t4, u4 = (!r4 && i5 || t4).__k = _(k, null, [u4]), o5 || p, p, t4.namespaceURI, !r4 && i5 ? [i5] : o5 ? null : t4.firstChild ? n.call(t4.childNodes) : null, e6, !r4 && i5 ? i5 : o5 ? o5.__e : t4.firstChild, r4, f4), z(e6, u4, f4);
  }
  function J(l5, u4, t4) {
    var i5, r4, o5, e6, f4 = d({}, l5.props);
    for (o5 in l5.type && l5.type.defaultProps && (e6 = l5.type.defaultProps), u4)
      "key" == o5 ? i5 = u4[o5] : "ref" == o5 ? r4 = u4[o5] : f4[o5] = void 0 === u4[o5] && null != e6 ? e6[o5] : u4[o5];
    return arguments.length > 2 && (f4.children = arguments.length > 3 ? n.call(arguments, 2) : t4), m(l5.type, f4, i5 || l5.key, r4 || l5.ref, null);
  }
  function K(n4) {
    function l5(n5) {
      var u4, t4;
      return this.getChildContext || (u4 = /* @__PURE__ */ new Set(), (t4 = {})[l5.__c] = this, this.getChildContext = function() {
        return t4;
      }, this.componentWillUnmount = function() {
        u4 = null;
      }, this.shouldComponentUpdate = function(n6) {
        this.props.value != n6.value && u4.forEach(function(n7) {
          n7.__e = true, M(n7);
        });
      }, this.sub = function(n6) {
        u4.add(n6);
        var l6 = n6.componentWillUnmount;
        n6.componentWillUnmount = function() {
          u4 && u4.delete(n6), l6 && l6.call(n6);
        };
      }), n5.children;
    }
    return l5.__c = "__cC" + h++, l5.__ = n4, l5.Provider = l5.__l = (l5.Consumer = function(n5, l6) {
      return n5.children(l6);
    }).contextType = l5, l5;
  }
  n = v.slice, l = { __e: function(n4, l5, u4, t4) {
    for (var i5, r4, o5; l5 = l5.__; )
      if ((i5 = l5.__c) && !i5.__)
        try {
          if ((r4 = i5.constructor) && null != r4.getDerivedStateFromError && (i5.setState(r4.getDerivedStateFromError(n4)), o5 = i5.__d), null != i5.componentDidCatch && (i5.componentDidCatch(n4, t4 || {}), o5 = i5.__d), o5)
            return i5.__E = i5;
        } catch (l6) {
          n4 = l6;
        }
    throw n4;
  } }, u = 0, t = function(n4) {
    return null != n4 && null == n4.constructor;
  }, x.prototype.setState = function(n4, l5) {
    var u4;
    u4 = null != this.__s && this.__s != this.state ? this.__s : this.__s = d({}, this.state), "function" == typeof n4 && (n4 = n4(d({}, u4), this.props)), n4 && d(u4, n4), null != n4 && this.__v && (l5 && this._sb.push(l5), M(this));
  }, x.prototype.forceUpdate = function(n4) {
    this.__v && (this.__e = true, n4 && this.__h.push(n4), M(this));
  }, x.prototype.render = k, i = [], o = "function" == typeof Promise ? Promise.prototype.then.bind(Promise.resolve()) : setTimeout, e = function(n4, l5) {
    return n4.__v.__b - l5.__v.__b;
  }, $.__r = 0, f = /(PointerCapture)$|Capture$/i, c = 0, s = F(false), a = F(true), h = 0;

  // ../node_modules/preact/hooks/dist/hooks.module.js
  var t2;
  var r2;
  var u2;
  var i2;
  var o2 = 0;
  var f2 = [];
  var c2 = l;
  var e2 = c2.__b;
  var a2 = c2.__r;
  var v2 = c2.diffed;
  var l2 = c2.__c;
  var m2 = c2.unmount;
  var s2 = c2.__;
  function p2(n4, t4) {
    c2.__h && c2.__h(r2, n4, o2 || t4), o2 = 0;
    var u4 = r2.__H || (r2.__H = { __: [], __h: [] });
    return n4 >= u4.__.length && u4.__.push({}), u4.__[n4];
  }
  function d2(n4) {
    return o2 = 1, h2(D2, n4);
  }
  function h2(n4, u4, i5) {
    var o5 = p2(t2++, 2);
    if (o5.t = n4, !o5.__c && (o5.__ = [i5 ? i5(u4) : D2(void 0, u4), function(n5) {
      var t4 = o5.__N ? o5.__N[0] : o5.__[0], r4 = o5.t(t4, n5);
      t4 !== r4 && (o5.__N = [r4, o5.__[1]], o5.__c.setState({}));
    }], o5.__c = r2, !r2.__f)) {
      var f4 = function(n5, t4, r4) {
        if (!o5.__c.__H)
          return true;
        var u5 = o5.__c.__H.__.filter(function(n6) {
          return !!n6.__c;
        });
        if (u5.every(function(n6) {
          return !n6.__N;
        }))
          return !c4 || c4.call(this, n5, t4, r4);
        var i6 = o5.__c.props !== n5;
        return u5.forEach(function(n6) {
          if (n6.__N) {
            var t5 = n6.__[0];
            n6.__ = n6.__N, n6.__N = void 0, t5 !== n6.__[0] && (i6 = true);
          }
        }), c4 && c4.call(this, n5, t4, r4) || i6;
      };
      r2.__f = true;
      var c4 = r2.shouldComponentUpdate, e6 = r2.componentWillUpdate;
      r2.componentWillUpdate = function(n5, t4, r4) {
        if (this.__e) {
          var u5 = c4;
          c4 = void 0, f4(n5, t4, r4), c4 = u5;
        }
        e6 && e6.call(this, n5, t4, r4);
      }, r2.shouldComponentUpdate = f4;
    }
    return o5.__N || o5.__;
  }
  function y2(n4, u4) {
    var i5 = p2(t2++, 3);
    !c2.__s && C2(i5.__H, u4) && (i5.__ = n4, i5.u = u4, r2.__H.__h.push(i5));
  }
  function A2(n4) {
    return o2 = 5, T2(function() {
      return { current: n4 };
    }, []);
  }
  function T2(n4, r4) {
    var u4 = p2(t2++, 7);
    return C2(u4.__H, r4) && (u4.__ = n4(), u4.__H = r4, u4.__h = n4), u4.__;
  }
  function q2(n4, t4) {
    return o2 = 8, T2(function() {
      return n4;
    }, t4);
  }
  function x2(n4) {
    var u4 = r2.context[n4.__c], i5 = p2(t2++, 9);
    return i5.c = n4, u4 ? (null == i5.__ && (i5.__ = true, u4.sub(r2)), u4.props.value) : n4.__;
  }
  function g2() {
    var n4 = p2(t2++, 11);
    if (!n4.__) {
      for (var u4 = r2.__v; null !== u4 && !u4.__m && null !== u4.__; )
        u4 = u4.__;
      var i5 = u4.__m || (u4.__m = [0, 0]);
      n4.__ = "P" + i5[0] + "-" + i5[1]++;
    }
    return n4.__;
  }
  function j2() {
    for (var n4; n4 = f2.shift(); )
      if (n4.__P && n4.__H)
        try {
          n4.__H.__h.forEach(z2), n4.__H.__h.forEach(B2), n4.__H.__h = [];
        } catch (t4) {
          n4.__H.__h = [], c2.__e(t4, n4.__v);
        }
  }
  c2.__b = function(n4) {
    r2 = null, e2 && e2(n4);
  }, c2.__ = function(n4, t4) {
    n4 && t4.__k && t4.__k.__m && (n4.__m = t4.__k.__m), s2 && s2(n4, t4);
  }, c2.__r = function(n4) {
    a2 && a2(n4), t2 = 0;
    var i5 = (r2 = n4.__c).__H;
    i5 && (u2 === r2 ? (i5.__h = [], r2.__h = [], i5.__.forEach(function(n5) {
      n5.__N && (n5.__ = n5.__N), n5.u = n5.__N = void 0;
    })) : (i5.__h.forEach(z2), i5.__h.forEach(B2), i5.__h = [], t2 = 0)), u2 = r2;
  }, c2.diffed = function(n4) {
    v2 && v2(n4);
    var t4 = n4.__c;
    t4 && t4.__H && (t4.__H.__h.length && (1 !== f2.push(t4) && i2 === c2.requestAnimationFrame || ((i2 = c2.requestAnimationFrame) || w2)(j2)), t4.__H.__.forEach(function(n5) {
      n5.u && (n5.__H = n5.u), n5.u = void 0;
    })), u2 = r2 = null;
  }, c2.__c = function(n4, t4) {
    t4.some(function(n5) {
      try {
        n5.__h.forEach(z2), n5.__h = n5.__h.filter(function(n6) {
          return !n6.__ || B2(n6);
        });
      } catch (r4) {
        t4.some(function(n6) {
          n6.__h && (n6.__h = []);
        }), t4 = [], c2.__e(r4, n5.__v);
      }
    }), l2 && l2(n4, t4);
  }, c2.unmount = function(n4) {
    m2 && m2(n4);
    var t4, r4 = n4.__c;
    r4 && r4.__H && (r4.__H.__.forEach(function(n5) {
      try {
        z2(n5);
      } catch (n6) {
        t4 = n6;
      }
    }), r4.__H = void 0, t4 && c2.__e(t4, r4.__v));
  };
  var k2 = "function" == typeof requestAnimationFrame;
  function w2(n4) {
    var t4, r4 = function() {
      clearTimeout(u4), k2 && cancelAnimationFrame(t4), setTimeout(n4);
    }, u4 = setTimeout(r4, 35);
    k2 && (t4 = requestAnimationFrame(r4));
  }
  function z2(n4) {
    var t4 = r2, u4 = n4.__c;
    "function" == typeof u4 && (n4.__c = void 0, u4()), r2 = t4;
  }
  function B2(n4) {
    var t4 = r2;
    n4.__c = n4.__(), r2 = t4;
  }
  function C2(n4, t4) {
    return !n4 || n4.length !== t4.length || t4.some(function(t5, r4) {
      return t5 !== n4[r4];
    });
  }
  function D2(n4, t4) {
    return "function" == typeof t4 ? t4(n4) : t4;
  }

  // ../node_modules/preact-i18n/dist/preact-i18n.esm.js
  var import_dlv = __toESM(require_dlv_umd());

  // ../node_modules/preact-markup/dist/preact-markup.module.js
  var e3;
  var o3 = {};
  function n2(r4, t4, e6) {
    if (3 === r4.nodeType) {
      var o5 = "textContent" in r4 ? r4.textContent : r4.nodeValue || "";
      if (false !== n2.options.trim) {
        var a5 = 0 === t4 || t4 === e6.length - 1;
        if ((!(o5 = o5.match(/^[\s\n]+$/g) && "all" !== n2.options.trim ? " " : o5.replace(/(^[\s\n]+|[\s\n]+$)/g, "all" === n2.options.trim || a5 ? "" : " ")) || " " === o5) && e6.length > 1 && a5)
          return null;
      }
      return o5;
    }
    if (1 !== r4.nodeType)
      return null;
    var p5 = String(r4.nodeName).toLowerCase();
    if ("script" === p5 && !n2.options.allowScripts)
      return null;
    var l5, s4, u4 = n2.h(p5, function(r5) {
      var t5 = r5 && r5.length;
      if (!t5)
        return null;
      for (var e7 = {}, o6 = 0; o6 < t5; o6++) {
        var a6 = r5[o6], i5 = a6.name, p6 = a6.value;
        "on" === i5.substring(0, 2) && n2.options.allowEvents && (p6 = new Function(p6)), e7[i5] = p6;
      }
      return e7;
    }(r4.attributes), (s4 = (l5 = r4.childNodes) && Array.prototype.map.call(l5, n2).filter(i3)) && s4.length ? s4 : null);
    return n2.visitor && n2.visitor(u4), u4;
  }
  var a3;
  var i3 = function(r4) {
    return r4;
  };
  var p3 = {};
  function l3(r4) {
    var t4 = (r4.type || "").toLowerCase(), e6 = l3.map;
    e6 && e6.hasOwnProperty(t4) ? (r4.type = e6[t4], r4.props = Object.keys(r4.props || {}).reduce(function(t5, e7) {
      var o5;
      return t5[o5 = e7, o5.replace(/-(.)/g, function(r5, t6) {
        return t6.toUpperCase();
      })] = r4.props[e7], t5;
    }, {})) : r4.type = t4.replace(/[^a-z0-9-]/i, "");
  }
  var preact_markup_module_default = function(t4) {
    function i5() {
      t4.apply(this, arguments);
    }
    return t4 && (i5.__proto__ = t4), (i5.prototype = Object.create(t4 && t4.prototype)).constructor = i5, i5.setReviver = function(r4) {
      a3 = r4;
    }, i5.prototype.shouldComponentUpdate = function(r4) {
      var t5 = this.props;
      return r4.wrap !== t5.wrap || r4.type !== t5.type || r4.markup !== t5.markup;
    }, i5.prototype.setComponents = function(r4) {
      if (this.map = {}, r4) {
        for (var t5 in r4)
          if (r4.hasOwnProperty(t5)) {
            var e6 = t5.replace(/([A-Z]+)([A-Z][a-z0-9])|([a-z0-9]+)([A-Z])/g, "$1$3-$2$4").toLowerCase();
            this.map[e6] = r4[t5];
          }
      }
    }, i5.prototype.render = function(t5) {
      var i6 = t5.wrap;
      void 0 === i6 && (i6 = true);
      var s4, u4 = t5.type, c4 = t5.markup, m4 = t5.components, v4 = t5.reviver, f4 = t5.onError, d4 = t5["allow-scripts"], h4 = t5["allow-events"], y5 = t5.trim, w4 = function(r4, t6) {
        var e6 = {};
        for (var o5 in r4)
          Object.prototype.hasOwnProperty.call(r4, o5) && -1 === t6.indexOf(o5) && (e6[o5] = r4[o5]);
        return e6;
      }(t5, ["wrap", "type", "markup", "components", "reviver", "onError", "allow-scripts", "allow-events", "trim"]), C5 = v4 || this.reviver || this.constructor.prototype.reviver || a3 || _;
      this.setComponents(m4);
      var g4 = { allowScripts: d4, allowEvents: h4, trim: y5 };
      try {
        s4 = function(r4, t6, a5, i7, s5) {
          var u5 = function(r5, t7) {
            var o5, n4, a6, i8, p5 = "html" === t7 ? "text/html" : "application/xml";
            "html" === t7 ? (i8 = "body", a6 = "<!DOCTYPE html>\n<html><body>" + r5 + "</body></html>") : (i8 = "xml", a6 = '<?xml version="1.0" encoding="UTF-8"?>\n<xml>' + r5 + "</xml>");
            try {
              o5 = new DOMParser().parseFromString(a6, p5);
            } catch (r6) {
              n4 = r6;
            }
            if (o5 || "html" !== t7 || ((o5 = e3 || (e3 = function() {
              if (document.implementation && document.implementation.createHTMLDocument)
                return document.implementation.createHTMLDocument("");
              var r6 = document.createElement("iframe");
              return r6.style.cssText = "position:absolute; left:0; top:-999em; width:1px; height:1px; overflow:hidden;", r6.setAttribute("sandbox", "allow-forms"), document.body.appendChild(r6), r6.contentWindow.document;
            }())).open(), o5.write(a6), o5.close()), o5) {
              var l5 = o5.getElementsByTagName(i8)[0], s6 = l5.firstChild;
              return r5 && !s6 && (l5.error = "Document parse failed."), s6 && "parsererror" === String(s6.nodeName).toLowerCase() && (s6.removeChild(s6.firstChild), s6.removeChild(s6.lastChild), l5.error = s6.textContent || s6.nodeValue || n4 || "Unknown error", l5.removeChild(s6)), l5;
            }
          }(r4, t6);
          if (u5 && u5.error)
            throw new Error(u5.error);
          var c5 = u5 && u5.body || u5;
          l3.map = i7 || p3;
          var m5 = c5 && function(r5, t7, e6, a6) {
            return n2.visitor = t7, n2.h = e6, n2.options = a6 || o3, n2(r5);
          }(c5, l3, a5, s5);
          return l3.map = null, m5 && m5.props && m5.props.children || null;
        }(c4, u4, C5, this.map, g4);
      } catch (r4) {
        f4 ? f4({ error: r4 }) : "undefined" != typeof console && console.error && console.error("preact-markup: " + r4);
      }
      if (false === i6)
        return s4 || null;
      var x5 = w4.hasOwnProperty("className") ? "className" : "class", b2 = w4[x5];
      return b2 ? b2.splice ? b2.splice(0, 0, "markup") : "string" == typeof b2 ? w4[x5] += " markup" : "object" == typeof b2 && (b2.markup = true) : w4[x5] = "markup", C5("div", w4, s4 || null);
    }, i5;
  }(x);

  // ../node_modules/preact-i18n/dist/preact-i18n.esm.js
  var IntlContext = K({ intl: {} });
  function defined(obj) {
    return obj !== null && obj !== void 0;
  }
  function assign(obj, props) {
    for (var i5 in props) {
      obj[i5] = props[i5];
    }
    return obj;
  }
  function deepAssign(target, source) {
    var out = assign({}, target);
    for (var i5 in source) {
      if (source.hasOwnProperty(i5)) {
        if (target[i5] && source[i5] && typeof target[i5] === "object" && typeof source[i5] === "object") {
          out[i5] = deepAssign(target[i5], source[i5]);
        } else {
          out[i5] = target[i5] || source[i5];
        }
      }
    }
    return out;
  }
  function select(properties) {
    properties = properties || {};
    if (typeof properties === "string") {
      properties = properties.split(",");
    }
    if ("join" in properties) {
      var selected = {};
      for (var i5 = 0; i5 < properties.length; i5++) {
        var val = properties[i5].trim();
        if (val) {
          selected[val.split(".").pop()] = val;
        }
      }
      return selected;
    }
    return properties;
  }
  function objectWithoutProperties(obj, exclude) {
    var target = {};
    for (var k4 in obj)
      if (Object.prototype.hasOwnProperty.call(obj, k4) && exclude.indexOf(k4) === -1)
        target[k4] = obj[k4];
    return target;
  }
  var URL_FLAG = /[?&#]intl=show/;
  function IntlProvider(ref) {
    var scope = ref.scope;
    var mark = ref.mark;
    var definition = ref.definition;
    var rest3 = objectWithoutProperties(ref, ["scope", "mark", "definition"]);
    var props = rest3;
    var ref$1 = x2(IntlContext);
    var parentIntl = ref$1.intl;
    var intl2 = assign({}, parentIntl || {});
    if (scope) {
      intl2.scope = scope;
    }
    if (definition) {
      intl2.dictionary = deepAssign(intl2.dictionary || {}, definition);
    }
    if (mark || typeof location !== "undefined" && String(location).match(URL_FLAG)) {
      intl2.mark = true;
    }
    return _(
      IntlContext.Provider,
      { value: { intl: intl2 } },
      props.children
    );
  }
  function intl(Child, options) {
    if (arguments.length < 2) {
      options = Child;
      return function(Child2) {
        return intl(Child2, options);
      };
    }
    function IntlProviderWrapper(props) {
      return _(
        IntlProvider,
        options || {},
        _(Child, props)
      );
    }
    IntlProviderWrapper.getWrappedComponent = Child && Child.getWrappedComponent || function() {
      return Child;
    };
    return IntlProviderWrapper;
  }
  var EMPTY = {};
  function template(template2, fields, scope, dictionary) {
    return template2 && template2.replace(/\{\{([\w.-]+)\}\}/g, replacer.bind(null, fields || EMPTY, scope, dictionary));
  }
  function replacer(currentFields, scope, dictionary, s4, field) {
    var parts = field.split("."), v4 = currentFields;
    for (var i5 = 0; i5 < parts.length; i5++) {
      v4 = v4[parts[i5]];
      if (v4 == null) {
        return "";
      }
      if (v4 && v4.type === Text) {
        return translate(v4.props.id, scope, dictionary, v4.props.fields, v4.props.plural, v4.props.fallback);
      }
    }
    if (typeof v4 === "string" && v4.match(/\{\{/)) {
      v4 = template(v4, currentFields);
    }
    return v4;
  }
  function translate(id3, scope, dictionary, fields, plural, fallback) {
    if (scope) {
      id3 = scope + "." + id3;
    }
    var value = dictionary && (0, import_dlv.default)(dictionary, id3);
    if ((plural || plural === 0) && value && typeof value === "object") {
      if (value.splice) {
        value = value[plural] || value[0];
      } else if (plural === 0 && defined(value.none || value.zero)) {
        value = value.none || value.zero;
      } else if (plural === 1 && defined(value.one || value.singular)) {
        value = value.one || value.singular;
      } else {
        value = value.some || value.many || value.plural || value.other || value;
      }
    }
    return value && template(value, fields, scope, dictionary) || fallback || null;
  }
  function HighlightI18N(ref) {
    var value = ref.value;
    var id3 = ref.id;
    var ref$1 = x2(IntlContext);
    var intl2 = ref$1.intl;
    if (intl2 && intl2.mark) {
      var dictionaryKey = "dictionary" + (intl2 && intl2.scope ? "." + intl2.scope : "") + "." + id3;
      return _(
        "mark",
        {
          style: {
            background: value ? (0, import_dlv.default)(intl2, dictionaryKey) ? "rgba(119,231,117,.5)" : "rgba(229,226,41,.5)" : "rgba(228,147,51,.5)"
          },
          title: id3
        },
        value
      );
    }
    return value;
  }
  function Text(ref) {
    var id3 = ref.id;
    var fallback = ref.children;
    var plural = ref.plural;
    var fields = ref.fields;
    var ref$1 = x2(IntlContext);
    var intl2 = ref$1.intl;
    var value = translate(
      id3,
      intl2 && intl2.scope,
      intl2 && intl2.dictionary,
      fields,
      plural,
      fallback
    );
    return _(HighlightI18N, { id: id3, value });
  }
  function translateMapping(props, intl2, onlyTextNodes) {
    var out = {};
    intl2 = intl2 || {};
    props = select(props);
    for (var name in props) {
      if (props.hasOwnProperty(name) && props[name]) {
        var def = props[name];
        if (!onlyTextNodes && typeof def === "string") {
          out[name] = translate(def, intl2.scope, intl2.dictionary);
        } else if (def.type === Text) {
          def = assign({
            // use children as fallback content
            fallback: def.props.children
          }, def.props);
          out[name] = translate(def.id, intl2.scope, intl2.dictionary, def.fields, def.plural, def.fallback);
        }
      }
    }
    return out;
  }
  function Localizer(ref) {
    var children2 = ref.children;
    var ref$1 = x2(IntlContext);
    var intl2 = ref$1.intl;
    return children2 && children2.length ? children2.map(function(child) {
      return J(child, translateMapping(child.props, intl2, true));
    }) : children2 && J(children2, translateMapping(children2.props, intl2, true));
  }
  function objectWithoutProperties$1(obj, exclude) {
    var target = {};
    for (var k4 in obj)
      if (Object.prototype.hasOwnProperty.call(obj, k4) && exclude.indexOf(k4) === -1)
        target[k4] = obj[k4];
    return target;
  }
  function MarkupText(ref) {
    var id3 = ref.id;
    var fields = ref.fields;
    var plural = ref.plural;
    var children2 = ref.children;
    var rest3 = objectWithoutProperties$1(ref, ["id", "fields", "plural", "children"]);
    var props = rest3;
    return _(
      Localizer,
      null,
      _(Html, Object.assign({}, { html: _(Text, { id: id3, fields, plural, children: children2 }), id: id3 }, props))
    );
  }
  function Html(ref) {
    var html = ref.html;
    var id3 = ref.id;
    var rest3 = objectWithoutProperties$1(ref, ["html", "id"]);
    var props = rest3;
    return _(HighlightI18N, {
      id: id3,
      value: !html ? html : typeof html === "string" ? _(preact_markup_module_default, Object.assign({}, { type: "html", trim: false }, props, { markup: html })) : _("span", null, html)
    });
  }
  function withText(mapping) {
    return function withTextWrapper(Child) {
      function WithTextWrapper(props, context) {
        var ref = x2(IntlContext);
        var intl2 = ref.intl;
        var map5 = typeof mapping === "function" ? mapping(props, { intl: intl2 }) : mapping;
        var translations = translateMapping(map5, intl2);
        return _(Child, assign(assign({}, props), translations));
      }
      WithTextWrapper.getWrappedComponent = Child && Child.getWrappedComponent || function() {
        return Child;
      };
      return WithTextWrapper;
    };
  }
  function useText(mapping) {
    var ref = x2(IntlContext);
    var intl2 = ref.intl;
    return translateMapping(
      typeof mapping === "function" ? mapping({ intl: intl2 }) : mapping,
      intl2
    );
  }
  intl.intl = intl;
  intl.IntlContext = IntlContext;
  intl.IntlProvider = IntlProvider;
  intl.Text = Text;
  intl.MarkupText = MarkupText;
  intl.Localizer = Localizer;
  intl.withText = withText;
  intl.useText = useText;
  intl.translate = translate;

  // ../node_modules/immutable/dist/immutable.es.js
  var DELETE = "delete";
  var SHIFT = 5;
  var SIZE = 1 << SHIFT;
  var MASK = SIZE - 1;
  var NOT_SET = {};
  function MakeRef() {
    return { value: false };
  }
  function SetRef(ref) {
    if (ref) {
      ref.value = true;
    }
  }
  function OwnerID() {
  }
  function ensureSize(iter) {
    if (iter.size === void 0) {
      iter.size = iter.__iterate(returnTrue);
    }
    return iter.size;
  }
  function wrapIndex(iter, index) {
    if (typeof index !== "number") {
      var uint32Index = index >>> 0;
      if ("" + uint32Index !== index || uint32Index === 4294967295) {
        return NaN;
      }
      index = uint32Index;
    }
    return index < 0 ? ensureSize(iter) + index : index;
  }
  function returnTrue() {
    return true;
  }
  function wholeSlice(begin, end, size2) {
    return (begin === 0 && !isNeg(begin) || size2 !== void 0 && begin <= -size2) && (end === void 0 || size2 !== void 0 && end >= size2);
  }
  function resolveBegin(begin, size2) {
    return resolveIndex(begin, size2, 0);
  }
  function resolveEnd(end, size2) {
    return resolveIndex(end, size2, size2);
  }
  function resolveIndex(index, size2, defaultIndex) {
    return index === void 0 ? defaultIndex : isNeg(index) ? size2 === Infinity ? size2 : Math.max(0, size2 + index) | 0 : size2 === void 0 || size2 === index ? index : Math.min(size2, index) | 0;
  }
  function isNeg(value) {
    return value < 0 || value === 0 && 1 / value === -Infinity;
  }
  var IS_COLLECTION_SYMBOL = "@@__IMMUTABLE_ITERABLE__@@";
  function isCollection(maybeCollection) {
    return Boolean(maybeCollection && maybeCollection[IS_COLLECTION_SYMBOL]);
  }
  var IS_KEYED_SYMBOL = "@@__IMMUTABLE_KEYED__@@";
  function isKeyed(maybeKeyed) {
    return Boolean(maybeKeyed && maybeKeyed[IS_KEYED_SYMBOL]);
  }
  var IS_INDEXED_SYMBOL = "@@__IMMUTABLE_INDEXED__@@";
  function isIndexed(maybeIndexed) {
    return Boolean(maybeIndexed && maybeIndexed[IS_INDEXED_SYMBOL]);
  }
  function isAssociative(maybeAssociative) {
    return isKeyed(maybeAssociative) || isIndexed(maybeAssociative);
  }
  var Collection = function Collection2(value) {
    return isCollection(value) ? value : Seq(value);
  };
  var KeyedCollection = /* @__PURE__ */ function(Collection5) {
    function KeyedCollection3(value) {
      return isKeyed(value) ? value : KeyedSeq(value);
    }
    if (Collection5)
      KeyedCollection3.__proto__ = Collection5;
    KeyedCollection3.prototype = Object.create(Collection5 && Collection5.prototype);
    KeyedCollection3.prototype.constructor = KeyedCollection3;
    return KeyedCollection3;
  }(Collection);
  var IndexedCollection = /* @__PURE__ */ function(Collection5) {
    function IndexedCollection3(value) {
      return isIndexed(value) ? value : IndexedSeq(value);
    }
    if (Collection5)
      IndexedCollection3.__proto__ = Collection5;
    IndexedCollection3.prototype = Object.create(Collection5 && Collection5.prototype);
    IndexedCollection3.prototype.constructor = IndexedCollection3;
    return IndexedCollection3;
  }(Collection);
  var SetCollection = /* @__PURE__ */ function(Collection5) {
    function SetCollection3(value) {
      return isCollection(value) && !isAssociative(value) ? value : SetSeq(value);
    }
    if (Collection5)
      SetCollection3.__proto__ = Collection5;
    SetCollection3.prototype = Object.create(Collection5 && Collection5.prototype);
    SetCollection3.prototype.constructor = SetCollection3;
    return SetCollection3;
  }(Collection);
  Collection.Keyed = KeyedCollection;
  Collection.Indexed = IndexedCollection;
  Collection.Set = SetCollection;
  var IS_SEQ_SYMBOL = "@@__IMMUTABLE_SEQ__@@";
  function isSeq(maybeSeq) {
    return Boolean(maybeSeq && maybeSeq[IS_SEQ_SYMBOL]);
  }
  var IS_RECORD_SYMBOL = "@@__IMMUTABLE_RECORD__@@";
  function isRecord(maybeRecord) {
    return Boolean(maybeRecord && maybeRecord[IS_RECORD_SYMBOL]);
  }
  function isImmutable(maybeImmutable) {
    return isCollection(maybeImmutable) || isRecord(maybeImmutable);
  }
  var IS_ORDERED_SYMBOL = "@@__IMMUTABLE_ORDERED__@@";
  function isOrdered(maybeOrdered) {
    return Boolean(maybeOrdered && maybeOrdered[IS_ORDERED_SYMBOL]);
  }
  var ITERATE_KEYS = 0;
  var ITERATE_VALUES = 1;
  var ITERATE_ENTRIES = 2;
  var REAL_ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
  var FAUX_ITERATOR_SYMBOL = "@@iterator";
  var ITERATOR_SYMBOL = REAL_ITERATOR_SYMBOL || FAUX_ITERATOR_SYMBOL;
  var Iterator = function Iterator2(next) {
    this.next = next;
  };
  Iterator.prototype.toString = function toString() {
    return "[Iterator]";
  };
  Iterator.KEYS = ITERATE_KEYS;
  Iterator.VALUES = ITERATE_VALUES;
  Iterator.ENTRIES = ITERATE_ENTRIES;
  Iterator.prototype.inspect = Iterator.prototype.toSource = function() {
    return this.toString();
  };
  Iterator.prototype[ITERATOR_SYMBOL] = function() {
    return this;
  };
  function iteratorValue(type2, k4, v4, iteratorResult) {
    var value = type2 === 0 ? k4 : type2 === 1 ? v4 : [k4, v4];
    iteratorResult ? iteratorResult.value = value : iteratorResult = {
      value,
      done: false
    };
    return iteratorResult;
  }
  function iteratorDone() {
    return { value: void 0, done: true };
  }
  function hasIterator(maybeIterable) {
    if (Array.isArray(maybeIterable)) {
      return true;
    }
    return !!getIteratorFn(maybeIterable);
  }
  function isIterator(maybeIterator) {
    return maybeIterator && typeof maybeIterator.next === "function";
  }
  function getIterator(iterable) {
    var iteratorFn = getIteratorFn(iterable);
    return iteratorFn && iteratorFn.call(iterable);
  }
  function getIteratorFn(iterable) {
    var iteratorFn = iterable && (REAL_ITERATOR_SYMBOL && iterable[REAL_ITERATOR_SYMBOL] || iterable[FAUX_ITERATOR_SYMBOL]);
    if (typeof iteratorFn === "function") {
      return iteratorFn;
    }
  }
  function isEntriesIterable(maybeIterable) {
    var iteratorFn = getIteratorFn(maybeIterable);
    return iteratorFn && iteratorFn === maybeIterable.entries;
  }
  function isKeysIterable(maybeIterable) {
    var iteratorFn = getIteratorFn(maybeIterable);
    return iteratorFn && iteratorFn === maybeIterable.keys;
  }
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  function isArrayLike(value) {
    if (Array.isArray(value) || typeof value === "string") {
      return true;
    }
    return value && typeof value === "object" && Number.isInteger(value.length) && value.length >= 0 && (value.length === 0 ? (
      // Only {length: 0} is considered Array-like.
      Object.keys(value).length === 1
    ) : (
      // An object is only Array-like if it has a property where the last value
      // in the array-like may be found (which could be undefined).
      value.hasOwnProperty(value.length - 1)
    ));
  }
  var Seq = /* @__PURE__ */ function(Collection5) {
    function Seq3(value) {
      return value === void 0 || value === null ? emptySequence() : isImmutable(value) ? value.toSeq() : seqFromValue(value);
    }
    if (Collection5)
      Seq3.__proto__ = Collection5;
    Seq3.prototype = Object.create(Collection5 && Collection5.prototype);
    Seq3.prototype.constructor = Seq3;
    Seq3.prototype.toSeq = function toSeq5() {
      return this;
    };
    Seq3.prototype.toString = function toString9() {
      return this.__toString("Seq {", "}");
    };
    Seq3.prototype.cacheResult = function cacheResult() {
      if (!this._cache && this.__iterateUncached) {
        this._cache = this.entrySeq().toArray();
        this.size = this._cache.length;
      }
      return this;
    };
    Seq3.prototype.__iterate = function __iterate3(fn2, reverse5) {
      var cache = this._cache;
      if (cache) {
        var size2 = cache.length;
        var i5 = 0;
        while (i5 !== size2) {
          var entry = cache[reverse5 ? size2 - ++i5 : i5++];
          if (fn2(entry[1], entry[0], this) === false) {
            break;
          }
        }
        return i5;
      }
      return this.__iterateUncached(fn2, reverse5);
    };
    Seq3.prototype.__iterator = function __iterator3(type2, reverse5) {
      var cache = this._cache;
      if (cache) {
        var size2 = cache.length;
        var i5 = 0;
        return new Iterator(function() {
          if (i5 === size2) {
            return iteratorDone();
          }
          var entry = cache[reverse5 ? size2 - ++i5 : i5++];
          return iteratorValue(type2, entry[0], entry[1]);
        });
      }
      return this.__iteratorUncached(type2, reverse5);
    };
    return Seq3;
  }(Collection);
  var KeyedSeq = /* @__PURE__ */ function(Seq3) {
    function KeyedSeq3(value) {
      return value === void 0 || value === null ? emptySequence().toKeyedSeq() : isCollection(value) ? isKeyed(value) ? value.toSeq() : value.fromEntrySeq() : isRecord(value) ? value.toSeq() : keyedSeqFromValue(value);
    }
    if (Seq3)
      KeyedSeq3.__proto__ = Seq3;
    KeyedSeq3.prototype = Object.create(Seq3 && Seq3.prototype);
    KeyedSeq3.prototype.constructor = KeyedSeq3;
    KeyedSeq3.prototype.toKeyedSeq = function toKeyedSeq5() {
      return this;
    };
    return KeyedSeq3;
  }(Seq);
  var IndexedSeq = /* @__PURE__ */ function(Seq3) {
    function IndexedSeq3(value) {
      return value === void 0 || value === null ? emptySequence() : isCollection(value) ? isKeyed(value) ? value.entrySeq() : value.toIndexedSeq() : isRecord(value) ? value.toSeq().entrySeq() : indexedSeqFromValue(value);
    }
    if (Seq3)
      IndexedSeq3.__proto__ = Seq3;
    IndexedSeq3.prototype = Object.create(Seq3 && Seq3.prototype);
    IndexedSeq3.prototype.constructor = IndexedSeq3;
    IndexedSeq3.of = function of() {
      return IndexedSeq3(arguments);
    };
    IndexedSeq3.prototype.toIndexedSeq = function toIndexedSeq3() {
      return this;
    };
    IndexedSeq3.prototype.toString = function toString9() {
      return this.__toString("Seq [", "]");
    };
    return IndexedSeq3;
  }(Seq);
  var SetSeq = /* @__PURE__ */ function(Seq3) {
    function SetSeq3(value) {
      return (isCollection(value) && !isAssociative(value) ? value : IndexedSeq(value)).toSetSeq();
    }
    if (Seq3)
      SetSeq3.__proto__ = Seq3;
    SetSeq3.prototype = Object.create(Seq3 && Seq3.prototype);
    SetSeq3.prototype.constructor = SetSeq3;
    SetSeq3.of = function of() {
      return SetSeq3(arguments);
    };
    SetSeq3.prototype.toSetSeq = function toSetSeq3() {
      return this;
    };
    return SetSeq3;
  }(Seq);
  Seq.isSeq = isSeq;
  Seq.Keyed = KeyedSeq;
  Seq.Set = SetSeq;
  Seq.Indexed = IndexedSeq;
  Seq.prototype[IS_SEQ_SYMBOL] = true;
  var ArraySeq = /* @__PURE__ */ function(IndexedSeq3) {
    function ArraySeq3(array3) {
      this._array = array3;
      this.size = array3.length;
    }
    if (IndexedSeq3)
      ArraySeq3.__proto__ = IndexedSeq3;
    ArraySeq3.prototype = Object.create(IndexedSeq3 && IndexedSeq3.prototype);
    ArraySeq3.prototype.constructor = ArraySeq3;
    ArraySeq3.prototype.get = function get24(index, notSetValue) {
      return this.has(index) ? this._array[wrapIndex(this, index)] : notSetValue;
    };
    ArraySeq3.prototype.__iterate = function __iterate3(fn2, reverse5) {
      var array3 = this._array;
      var size2 = array3.length;
      var i5 = 0;
      while (i5 !== size2) {
        var ii2 = reverse5 ? size2 - ++i5 : i5++;
        if (fn2(array3[ii2], ii2, this) === false) {
          break;
        }
      }
      return i5;
    };
    ArraySeq3.prototype.__iterator = function __iterator3(type2, reverse5) {
      var array3 = this._array;
      var size2 = array3.length;
      var i5 = 0;
      return new Iterator(function() {
        if (i5 === size2) {
          return iteratorDone();
        }
        var ii2 = reverse5 ? size2 - ++i5 : i5++;
        return iteratorValue(type2, ii2, array3[ii2]);
      });
    };
    return ArraySeq3;
  }(IndexedSeq);
  var ObjectSeq = /* @__PURE__ */ function(KeyedSeq3) {
    function ObjectSeq3(object) {
      var keys3 = Object.keys(object).concat(
        Object.getOwnPropertySymbols ? Object.getOwnPropertySymbols(object) : []
      );
      this._object = object;
      this._keys = keys3;
      this.size = keys3.length;
    }
    if (KeyedSeq3)
      ObjectSeq3.__proto__ = KeyedSeq3;
    ObjectSeq3.prototype = Object.create(KeyedSeq3 && KeyedSeq3.prototype);
    ObjectSeq3.prototype.constructor = ObjectSeq3;
    ObjectSeq3.prototype.get = function get24(key, notSetValue) {
      if (notSetValue !== void 0 && !this.has(key)) {
        return notSetValue;
      }
      return this._object[key];
    };
    ObjectSeq3.prototype.has = function has9(key) {
      return hasOwnProperty.call(this._object, key);
    };
    ObjectSeq3.prototype.__iterate = function __iterate3(fn2, reverse5) {
      var object = this._object;
      var keys3 = this._keys;
      var size2 = keys3.length;
      var i5 = 0;
      while (i5 !== size2) {
        var key = keys3[reverse5 ? size2 - ++i5 : i5++];
        if (fn2(object[key], key, this) === false) {
          break;
        }
      }
      return i5;
    };
    ObjectSeq3.prototype.__iterator = function __iterator3(type2, reverse5) {
      var object = this._object;
      var keys3 = this._keys;
      var size2 = keys3.length;
      var i5 = 0;
      return new Iterator(function() {
        if (i5 === size2) {
          return iteratorDone();
        }
        var key = keys3[reverse5 ? size2 - ++i5 : i5++];
        return iteratorValue(type2, key, object[key]);
      });
    };
    return ObjectSeq3;
  }(KeyedSeq);
  ObjectSeq.prototype[IS_ORDERED_SYMBOL] = true;
  var CollectionSeq = /* @__PURE__ */ function(IndexedSeq3) {
    function CollectionSeq3(collection) {
      this._collection = collection;
      this.size = collection.length || collection.size;
    }
    if (IndexedSeq3)
      CollectionSeq3.__proto__ = IndexedSeq3;
    CollectionSeq3.prototype = Object.create(IndexedSeq3 && IndexedSeq3.prototype);
    CollectionSeq3.prototype.constructor = CollectionSeq3;
    CollectionSeq3.prototype.__iterateUncached = function __iterateUncached(fn2, reverse5) {
      if (reverse5) {
        return this.cacheResult().__iterate(fn2, reverse5);
      }
      var collection = this._collection;
      var iterator = getIterator(collection);
      var iterations = 0;
      if (isIterator(iterator)) {
        var step;
        while (!(step = iterator.next()).done) {
          if (fn2(step.value, iterations++, this) === false) {
            break;
          }
        }
      }
      return iterations;
    };
    CollectionSeq3.prototype.__iteratorUncached = function __iteratorUncached(type2, reverse5) {
      if (reverse5) {
        return this.cacheResult().__iterator(type2, reverse5);
      }
      var collection = this._collection;
      var iterator = getIterator(collection);
      if (!isIterator(iterator)) {
        return new Iterator(iteratorDone);
      }
      var iterations = 0;
      return new Iterator(function() {
        var step = iterator.next();
        return step.done ? step : iteratorValue(type2, iterations++, step.value);
      });
    };
    return CollectionSeq3;
  }(IndexedSeq);
  var EMPTY_SEQ;
  function emptySequence() {
    return EMPTY_SEQ || (EMPTY_SEQ = new ArraySeq([]));
  }
  function keyedSeqFromValue(value) {
    var seq = maybeIndexedSeqFromValue(value);
    if (seq) {
      return seq.fromEntrySeq();
    }
    if (typeof value === "object") {
      return new ObjectSeq(value);
    }
    throw new TypeError(
      "Expected Array or collection object of [k, v] entries, or keyed object: " + value
    );
  }
  function indexedSeqFromValue(value) {
    var seq = maybeIndexedSeqFromValue(value);
    if (seq) {
      return seq;
    }
    throw new TypeError(
      "Expected Array or collection object of values: " + value
    );
  }
  function seqFromValue(value) {
    var seq = maybeIndexedSeqFromValue(value);
    if (seq) {
      return isEntriesIterable(value) ? seq.fromEntrySeq() : isKeysIterable(value) ? seq.toSetSeq() : seq;
    }
    if (typeof value === "object") {
      return new ObjectSeq(value);
    }
    throw new TypeError(
      "Expected Array or collection object of values, or keyed object: " + value
    );
  }
  function maybeIndexedSeqFromValue(value) {
    return isArrayLike(value) ? new ArraySeq(value) : hasIterator(value) ? new CollectionSeq(value) : void 0;
  }
  var IS_MAP_SYMBOL = "@@__IMMUTABLE_MAP__@@";
  function isMap(maybeMap) {
    return Boolean(maybeMap && maybeMap[IS_MAP_SYMBOL]);
  }
  function isOrderedMap(maybeOrderedMap) {
    return isMap(maybeOrderedMap) && isOrdered(maybeOrderedMap);
  }
  function isValueObject(maybeValue) {
    return Boolean(
      maybeValue && typeof maybeValue.equals === "function" && typeof maybeValue.hashCode === "function"
    );
  }
  function is(valueA, valueB) {
    if (valueA === valueB || valueA !== valueA && valueB !== valueB) {
      return true;
    }
    if (!valueA || !valueB) {
      return false;
    }
    if (typeof valueA.valueOf === "function" && typeof valueB.valueOf === "function") {
      valueA = valueA.valueOf();
      valueB = valueB.valueOf();
      if (valueA === valueB || valueA !== valueA && valueB !== valueB) {
        return true;
      }
      if (!valueA || !valueB) {
        return false;
      }
    }
    return !!(isValueObject(valueA) && isValueObject(valueB) && valueA.equals(valueB));
  }
  var imul = typeof Math.imul === "function" && Math.imul(4294967295, 2) === -2 ? Math.imul : function imul2(a5, b2) {
    a5 |= 0;
    b2 |= 0;
    var c4 = a5 & 65535;
    var d4 = b2 & 65535;
    return c4 * d4 + ((a5 >>> 16) * d4 + c4 * (b2 >>> 16) << 16 >>> 0) | 0;
  };
  function smi(i32) {
    return i32 >>> 1 & 1073741824 | i32 & 3221225471;
  }
  var defaultValueOf = Object.prototype.valueOf;
  function hash(o5) {
    if (o5 == null) {
      return hashNullish(o5);
    }
    if (typeof o5.hashCode === "function") {
      return smi(o5.hashCode(o5));
    }
    var v4 = valueOf(o5);
    if (v4 == null) {
      return hashNullish(v4);
    }
    switch (typeof v4) {
      case "boolean":
        return v4 ? 1108378657 : 1108378656;
      case "number":
        return hashNumber(v4);
      case "string":
        return v4.length > STRING_HASH_CACHE_MIN_STRLEN ? cachedHashString(v4) : hashString(v4);
      case "object":
      case "function":
        return hashJSObj(v4);
      case "symbol":
        return hashSymbol(v4);
      default:
        if (typeof v4.toString === "function") {
          return hashString(v4.toString());
        }
        throw new Error("Value type " + typeof v4 + " cannot be hashed.");
    }
  }
  function hashNullish(nullish) {
    return nullish === null ? 1108378658 : (
      /* undefined */
      1108378659
    );
  }
  function hashNumber(n4) {
    if (n4 !== n4 || n4 === Infinity) {
      return 0;
    }
    var hash3 = n4 | 0;
    if (hash3 !== n4) {
      hash3 ^= n4 * 4294967295;
    }
    while (n4 > 4294967295) {
      n4 /= 4294967295;
      hash3 ^= n4;
    }
    return smi(hash3);
  }
  function cachedHashString(string) {
    var hashed = stringHashCache[string];
    if (hashed === void 0) {
      hashed = hashString(string);
      if (STRING_HASH_CACHE_SIZE === STRING_HASH_CACHE_MAX_SIZE) {
        STRING_HASH_CACHE_SIZE = 0;
        stringHashCache = {};
      }
      STRING_HASH_CACHE_SIZE++;
      stringHashCache[string] = hashed;
    }
    return hashed;
  }
  function hashString(string) {
    var hashed = 0;
    for (var ii2 = 0; ii2 < string.length; ii2++) {
      hashed = 31 * hashed + string.charCodeAt(ii2) | 0;
    }
    return smi(hashed);
  }
  function hashSymbol(sym) {
    var hashed = symbolMap[sym];
    if (hashed !== void 0) {
      return hashed;
    }
    hashed = nextHash();
    symbolMap[sym] = hashed;
    return hashed;
  }
  function hashJSObj(obj) {
    var hashed;
    if (usingWeakMap) {
      hashed = weakMap.get(obj);
      if (hashed !== void 0) {
        return hashed;
      }
    }
    hashed = obj[UID_HASH_KEY];
    if (hashed !== void 0) {
      return hashed;
    }
    if (!canDefineProperty) {
      hashed = obj.propertyIsEnumerable && obj.propertyIsEnumerable[UID_HASH_KEY];
      if (hashed !== void 0) {
        return hashed;
      }
      hashed = getIENodeHash(obj);
      if (hashed !== void 0) {
        return hashed;
      }
    }
    hashed = nextHash();
    if (usingWeakMap) {
      weakMap.set(obj, hashed);
    } else if (isExtensible !== void 0 && isExtensible(obj) === false) {
      throw new Error("Non-extensible objects are not allowed as keys.");
    } else if (canDefineProperty) {
      Object.defineProperty(obj, UID_HASH_KEY, {
        enumerable: false,
        configurable: false,
        writable: false,
        value: hashed
      });
    } else if (obj.propertyIsEnumerable !== void 0 && obj.propertyIsEnumerable === obj.constructor.prototype.propertyIsEnumerable) {
      obj.propertyIsEnumerable = function() {
        return this.constructor.prototype.propertyIsEnumerable.apply(
          this,
          arguments
        );
      };
      obj.propertyIsEnumerable[UID_HASH_KEY] = hashed;
    } else if (obj.nodeType !== void 0) {
      obj[UID_HASH_KEY] = hashed;
    } else {
      throw new Error("Unable to set a non-enumerable property on object.");
    }
    return hashed;
  }
  var isExtensible = Object.isExtensible;
  var canDefineProperty = function() {
    try {
      Object.defineProperty({}, "@", {});
      return true;
    } catch (e6) {
      return false;
    }
  }();
  function getIENodeHash(node) {
    if (node && node.nodeType > 0) {
      switch (node.nodeType) {
        case 1:
          return node.uniqueID;
        case 9:
          return node.documentElement && node.documentElement.uniqueID;
      }
    }
  }
  function valueOf(obj) {
    return obj.valueOf !== defaultValueOf && typeof obj.valueOf === "function" ? obj.valueOf(obj) : obj;
  }
  function nextHash() {
    var nextHash2 = ++_objHashUID;
    if (_objHashUID & 1073741824) {
      _objHashUID = 0;
    }
    return nextHash2;
  }
  var usingWeakMap = typeof WeakMap === "function";
  var weakMap;
  if (usingWeakMap) {
    weakMap = /* @__PURE__ */ new WeakMap();
  }
  var symbolMap = /* @__PURE__ */ Object.create(null);
  var _objHashUID = 0;
  var UID_HASH_KEY = "__immutablehash__";
  if (typeof Symbol === "function") {
    UID_HASH_KEY = Symbol(UID_HASH_KEY);
  }
  var STRING_HASH_CACHE_MIN_STRLEN = 16;
  var STRING_HASH_CACHE_MAX_SIZE = 255;
  var STRING_HASH_CACHE_SIZE = 0;
  var stringHashCache = {};
  var ToKeyedSequence = /* @__PURE__ */ function(KeyedSeq3) {
    function ToKeyedSequence3(indexed, useKeys) {
      this._iter = indexed;
      this._useKeys = useKeys;
      this.size = indexed.size;
    }
    if (KeyedSeq3)
      ToKeyedSequence3.__proto__ = KeyedSeq3;
    ToKeyedSequence3.prototype = Object.create(KeyedSeq3 && KeyedSeq3.prototype);
    ToKeyedSequence3.prototype.constructor = ToKeyedSequence3;
    ToKeyedSequence3.prototype.get = function get24(key, notSetValue) {
      return this._iter.get(key, notSetValue);
    };
    ToKeyedSequence3.prototype.has = function has9(key) {
      return this._iter.has(key);
    };
    ToKeyedSequence3.prototype.valueSeq = function valueSeq3() {
      return this._iter.valueSeq();
    };
    ToKeyedSequence3.prototype.reverse = function reverse5() {
      var this$1$1 = this;
      var reversedSequence = reverseFactory(this, true);
      if (!this._useKeys) {
        reversedSequence.valueSeq = function() {
          return this$1$1._iter.toSeq().reverse();
        };
      }
      return reversedSequence;
    };
    ToKeyedSequence3.prototype.map = function map5(mapper, context) {
      var this$1$1 = this;
      var mappedSequence = mapFactory(this, mapper, context);
      if (!this._useKeys) {
        mappedSequence.valueSeq = function() {
          return this$1$1._iter.toSeq().map(mapper, context);
        };
      }
      return mappedSequence;
    };
    ToKeyedSequence3.prototype.__iterate = function __iterate3(fn2, reverse5) {
      var this$1$1 = this;
      return this._iter.__iterate(function(v4, k4) {
        return fn2(v4, k4, this$1$1);
      }, reverse5);
    };
    ToKeyedSequence3.prototype.__iterator = function __iterator3(type2, reverse5) {
      return this._iter.__iterator(type2, reverse5);
    };
    return ToKeyedSequence3;
  }(KeyedSeq);
  ToKeyedSequence.prototype[IS_ORDERED_SYMBOL] = true;
  var ToIndexedSequence = /* @__PURE__ */ function(IndexedSeq3) {
    function ToIndexedSequence3(iter) {
      this._iter = iter;
      this.size = iter.size;
    }
    if (IndexedSeq3)
      ToIndexedSequence3.__proto__ = IndexedSeq3;
    ToIndexedSequence3.prototype = Object.create(IndexedSeq3 && IndexedSeq3.prototype);
    ToIndexedSequence3.prototype.constructor = ToIndexedSequence3;
    ToIndexedSequence3.prototype.includes = function includes5(value) {
      return this._iter.includes(value);
    };
    ToIndexedSequence3.prototype.__iterate = function __iterate3(fn2, reverse5) {
      var this$1$1 = this;
      var i5 = 0;
      reverse5 && ensureSize(this);
      return this._iter.__iterate(
        function(v4) {
          return fn2(v4, reverse5 ? this$1$1.size - ++i5 : i5++, this$1$1);
        },
        reverse5
      );
    };
    ToIndexedSequence3.prototype.__iterator = function __iterator3(type2, reverse5) {
      var this$1$1 = this;
      var iterator = this._iter.__iterator(ITERATE_VALUES, reverse5);
      var i5 = 0;
      reverse5 && ensureSize(this);
      return new Iterator(function() {
        var step = iterator.next();
        return step.done ? step : iteratorValue(
          type2,
          reverse5 ? this$1$1.size - ++i5 : i5++,
          step.value,
          step
        );
      });
    };
    return ToIndexedSequence3;
  }(IndexedSeq);
  var ToSetSequence = /* @__PURE__ */ function(SetSeq3) {
    function ToSetSequence3(iter) {
      this._iter = iter;
      this.size = iter.size;
    }
    if (SetSeq3)
      ToSetSequence3.__proto__ = SetSeq3;
    ToSetSequence3.prototype = Object.create(SetSeq3 && SetSeq3.prototype);
    ToSetSequence3.prototype.constructor = ToSetSequence3;
    ToSetSequence3.prototype.has = function has9(key) {
      return this._iter.includes(key);
    };
    ToSetSequence3.prototype.__iterate = function __iterate3(fn2, reverse5) {
      var this$1$1 = this;
      return this._iter.__iterate(function(v4) {
        return fn2(v4, v4, this$1$1);
      }, reverse5);
    };
    ToSetSequence3.prototype.__iterator = function __iterator3(type2, reverse5) {
      var iterator = this._iter.__iterator(ITERATE_VALUES, reverse5);
      return new Iterator(function() {
        var step = iterator.next();
        return step.done ? step : iteratorValue(type2, step.value, step.value, step);
      });
    };
    return ToSetSequence3;
  }(SetSeq);
  var FromEntriesSequence = /* @__PURE__ */ function(KeyedSeq3) {
    function FromEntriesSequence3(entries5) {
      this._iter = entries5;
      this.size = entries5.size;
    }
    if (KeyedSeq3)
      FromEntriesSequence3.__proto__ = KeyedSeq3;
    FromEntriesSequence3.prototype = Object.create(KeyedSeq3 && KeyedSeq3.prototype);
    FromEntriesSequence3.prototype.constructor = FromEntriesSequence3;
    FromEntriesSequence3.prototype.entrySeq = function entrySeq3() {
      return this._iter.toSeq();
    };
    FromEntriesSequence3.prototype.__iterate = function __iterate3(fn2, reverse5) {
      var this$1$1 = this;
      return this._iter.__iterate(function(entry) {
        if (entry) {
          validateEntry(entry);
          var indexedCollection = isCollection(entry);
          return fn2(
            indexedCollection ? entry.get(1) : entry[1],
            indexedCollection ? entry.get(0) : entry[0],
            this$1$1
          );
        }
      }, reverse5);
    };
    FromEntriesSequence3.prototype.__iterator = function __iterator3(type2, reverse5) {
      var iterator = this._iter.__iterator(ITERATE_VALUES, reverse5);
      return new Iterator(function() {
        while (true) {
          var step = iterator.next();
          if (step.done) {
            return step;
          }
          var entry = step.value;
          if (entry) {
            validateEntry(entry);
            var indexedCollection = isCollection(entry);
            return iteratorValue(
              type2,
              indexedCollection ? entry.get(0) : entry[0],
              indexedCollection ? entry.get(1) : entry[1],
              step
            );
          }
        }
      });
    };
    return FromEntriesSequence3;
  }(KeyedSeq);
  ToIndexedSequence.prototype.cacheResult = ToKeyedSequence.prototype.cacheResult = ToSetSequence.prototype.cacheResult = FromEntriesSequence.prototype.cacheResult = cacheResultThrough;
  function flipFactory(collection) {
    var flipSequence = makeSequence(collection);
    flipSequence._iter = collection;
    flipSequence.size = collection.size;
    flipSequence.flip = function() {
      return collection;
    };
    flipSequence.reverse = function() {
      var reversedSequence = collection.reverse.apply(this);
      reversedSequence.flip = function() {
        return collection.reverse();
      };
      return reversedSequence;
    };
    flipSequence.has = function(key) {
      return collection.includes(key);
    };
    flipSequence.includes = function(key) {
      return collection.has(key);
    };
    flipSequence.cacheResult = cacheResultThrough;
    flipSequence.__iterateUncached = function(fn2, reverse5) {
      var this$1$1 = this;
      return collection.__iterate(function(v4, k4) {
        return fn2(k4, v4, this$1$1) !== false;
      }, reverse5);
    };
    flipSequence.__iteratorUncached = function(type2, reverse5) {
      if (type2 === ITERATE_ENTRIES) {
        var iterator = collection.__iterator(type2, reverse5);
        return new Iterator(function() {
          var step = iterator.next();
          if (!step.done) {
            var k4 = step.value[0];
            step.value[0] = step.value[1];
            step.value[1] = k4;
          }
          return step;
        });
      }
      return collection.__iterator(
        type2 === ITERATE_VALUES ? ITERATE_KEYS : ITERATE_VALUES,
        reverse5
      );
    };
    return flipSequence;
  }
  function mapFactory(collection, mapper, context) {
    var mappedSequence = makeSequence(collection);
    mappedSequence.size = collection.size;
    mappedSequence.has = function(key) {
      return collection.has(key);
    };
    mappedSequence.get = function(key, notSetValue) {
      var v4 = collection.get(key, NOT_SET);
      return v4 === NOT_SET ? notSetValue : mapper.call(context, v4, key, collection);
    };
    mappedSequence.__iterateUncached = function(fn2, reverse5) {
      var this$1$1 = this;
      return collection.__iterate(
        function(v4, k4, c4) {
          return fn2(mapper.call(context, v4, k4, c4), k4, this$1$1) !== false;
        },
        reverse5
      );
    };
    mappedSequence.__iteratorUncached = function(type2, reverse5) {
      var iterator = collection.__iterator(ITERATE_ENTRIES, reverse5);
      return new Iterator(function() {
        var step = iterator.next();
        if (step.done) {
          return step;
        }
        var entry = step.value;
        var key = entry[0];
        return iteratorValue(
          type2,
          key,
          mapper.call(context, entry[1], key, collection),
          step
        );
      });
    };
    return mappedSequence;
  }
  function reverseFactory(collection, useKeys) {
    var this$1$1 = this;
    var reversedSequence = makeSequence(collection);
    reversedSequence._iter = collection;
    reversedSequence.size = collection.size;
    reversedSequence.reverse = function() {
      return collection;
    };
    if (collection.flip) {
      reversedSequence.flip = function() {
        var flipSequence = flipFactory(collection);
        flipSequence.reverse = function() {
          return collection.flip();
        };
        return flipSequence;
      };
    }
    reversedSequence.get = function(key, notSetValue) {
      return collection.get(useKeys ? key : -1 - key, notSetValue);
    };
    reversedSequence.has = function(key) {
      return collection.has(useKeys ? key : -1 - key);
    };
    reversedSequence.includes = function(value) {
      return collection.includes(value);
    };
    reversedSequence.cacheResult = cacheResultThrough;
    reversedSequence.__iterate = function(fn2, reverse5) {
      var this$1$12 = this;
      var i5 = 0;
      reverse5 && ensureSize(collection);
      return collection.__iterate(
        function(v4, k4) {
          return fn2(v4, useKeys ? k4 : reverse5 ? this$1$12.size - ++i5 : i5++, this$1$12);
        },
        !reverse5
      );
    };
    reversedSequence.__iterator = function(type2, reverse5) {
      var i5 = 0;
      reverse5 && ensureSize(collection);
      var iterator = collection.__iterator(ITERATE_ENTRIES, !reverse5);
      return new Iterator(function() {
        var step = iterator.next();
        if (step.done) {
          return step;
        }
        var entry = step.value;
        return iteratorValue(
          type2,
          useKeys ? entry[0] : reverse5 ? this$1$1.size - ++i5 : i5++,
          entry[1],
          step
        );
      });
    };
    return reversedSequence;
  }
  function filterFactory(collection, predicate, context, useKeys) {
    var filterSequence = makeSequence(collection);
    if (useKeys) {
      filterSequence.has = function(key) {
        var v4 = collection.get(key, NOT_SET);
        return v4 !== NOT_SET && !!predicate.call(context, v4, key, collection);
      };
      filterSequence.get = function(key, notSetValue) {
        var v4 = collection.get(key, NOT_SET);
        return v4 !== NOT_SET && predicate.call(context, v4, key, collection) ? v4 : notSetValue;
      };
    }
    filterSequence.__iterateUncached = function(fn2, reverse5) {
      var this$1$1 = this;
      var iterations = 0;
      collection.__iterate(function(v4, k4, c4) {
        if (predicate.call(context, v4, k4, c4)) {
          iterations++;
          return fn2(v4, useKeys ? k4 : iterations - 1, this$1$1);
        }
      }, reverse5);
      return iterations;
    };
    filterSequence.__iteratorUncached = function(type2, reverse5) {
      var iterator = collection.__iterator(ITERATE_ENTRIES, reverse5);
      var iterations = 0;
      return new Iterator(function() {
        while (true) {
          var step = iterator.next();
          if (step.done) {
            return step;
          }
          var entry = step.value;
          var key = entry[0];
          var value = entry[1];
          if (predicate.call(context, value, key, collection)) {
            return iteratorValue(type2, useKeys ? key : iterations++, value, step);
          }
        }
      });
    };
    return filterSequence;
  }
  function countByFactory(collection, grouper, context) {
    var groups = Map2().asMutable();
    collection.__iterate(function(v4, k4) {
      groups.update(grouper.call(context, v4, k4, collection), 0, function(a5) {
        return a5 + 1;
      });
    });
    return groups.asImmutable();
  }
  function groupByFactory(collection, grouper, context) {
    var isKeyedIter = isKeyed(collection);
    var groups = (isOrdered(collection) ? OrderedMap() : Map2()).asMutable();
    collection.__iterate(function(v4, k4) {
      groups.update(
        grouper.call(context, v4, k4, collection),
        function(a5) {
          return a5 = a5 || [], a5.push(isKeyedIter ? [k4, v4] : v4), a5;
        }
      );
    });
    var coerce = collectionClass(collection);
    return groups.map(function(arr) {
      return reify(collection, coerce(arr));
    }).asImmutable();
  }
  function partitionFactory(collection, predicate, context) {
    var isKeyedIter = isKeyed(collection);
    var groups = [[], []];
    collection.__iterate(function(v4, k4) {
      groups[predicate.call(context, v4, k4, collection) ? 1 : 0].push(
        isKeyedIter ? [k4, v4] : v4
      );
    });
    var coerce = collectionClass(collection);
    return groups.map(function(arr) {
      return reify(collection, coerce(arr));
    });
  }
  function sliceFactory(collection, begin, end, useKeys) {
    var originalSize = collection.size;
    if (wholeSlice(begin, end, originalSize)) {
      return collection;
    }
    if (typeof originalSize === "undefined" && (begin < 0 || end < 0)) {
      return sliceFactory(collection.toSeq().cacheResult(), begin, end, useKeys);
    }
    var resolvedBegin = resolveBegin(begin, originalSize);
    var resolvedEnd = resolveEnd(end, originalSize);
    var resolvedSize = resolvedEnd - resolvedBegin;
    var sliceSize;
    if (resolvedSize === resolvedSize) {
      sliceSize = resolvedSize < 0 ? 0 : resolvedSize;
    }
    var sliceSeq = makeSequence(collection);
    sliceSeq.size = sliceSize === 0 ? sliceSize : collection.size && sliceSize || void 0;
    if (!useKeys && isSeq(collection) && sliceSize >= 0) {
      sliceSeq.get = function(index, notSetValue) {
        index = wrapIndex(this, index);
        return index >= 0 && index < sliceSize ? collection.get(index + resolvedBegin, notSetValue) : notSetValue;
      };
    }
    sliceSeq.__iterateUncached = function(fn2, reverse5) {
      var this$1$1 = this;
      if (sliceSize === 0) {
        return 0;
      }
      if (reverse5) {
        return this.cacheResult().__iterate(fn2, reverse5);
      }
      var skipped = 0;
      var isSkipping = true;
      var iterations = 0;
      collection.__iterate(function(v4, k4) {
        if (!(isSkipping && (isSkipping = skipped++ < resolvedBegin))) {
          iterations++;
          return fn2(v4, useKeys ? k4 : iterations - 1, this$1$1) !== false && iterations !== sliceSize;
        }
      });
      return iterations;
    };
    sliceSeq.__iteratorUncached = function(type2, reverse5) {
      if (sliceSize !== 0 && reverse5) {
        return this.cacheResult().__iterator(type2, reverse5);
      }
      if (sliceSize === 0) {
        return new Iterator(iteratorDone);
      }
      var iterator = collection.__iterator(type2, reverse5);
      var skipped = 0;
      var iterations = 0;
      return new Iterator(function() {
        while (skipped++ < resolvedBegin) {
          iterator.next();
        }
        if (++iterations > sliceSize) {
          return iteratorDone();
        }
        var step = iterator.next();
        if (useKeys || type2 === ITERATE_VALUES || step.done) {
          return step;
        }
        if (type2 === ITERATE_KEYS) {
          return iteratorValue(type2, iterations - 1, void 0, step);
        }
        return iteratorValue(type2, iterations - 1, step.value[1], step);
      });
    };
    return sliceSeq;
  }
  function takeWhileFactory(collection, predicate, context) {
    var takeSequence = makeSequence(collection);
    takeSequence.__iterateUncached = function(fn2, reverse5) {
      var this$1$1 = this;
      if (reverse5) {
        return this.cacheResult().__iterate(fn2, reverse5);
      }
      var iterations = 0;
      collection.__iterate(
        function(v4, k4, c4) {
          return predicate.call(context, v4, k4, c4) && ++iterations && fn2(v4, k4, this$1$1);
        }
      );
      return iterations;
    };
    takeSequence.__iteratorUncached = function(type2, reverse5) {
      var this$1$1 = this;
      if (reverse5) {
        return this.cacheResult().__iterator(type2, reverse5);
      }
      var iterator = collection.__iterator(ITERATE_ENTRIES, reverse5);
      var iterating = true;
      return new Iterator(function() {
        if (!iterating) {
          return iteratorDone();
        }
        var step = iterator.next();
        if (step.done) {
          return step;
        }
        var entry = step.value;
        var k4 = entry[0];
        var v4 = entry[1];
        if (!predicate.call(context, v4, k4, this$1$1)) {
          iterating = false;
          return iteratorDone();
        }
        return type2 === ITERATE_ENTRIES ? step : iteratorValue(type2, k4, v4, step);
      });
    };
    return takeSequence;
  }
  function skipWhileFactory(collection, predicate, context, useKeys) {
    var skipSequence = makeSequence(collection);
    skipSequence.__iterateUncached = function(fn2, reverse5) {
      var this$1$1 = this;
      if (reverse5) {
        return this.cacheResult().__iterate(fn2, reverse5);
      }
      var isSkipping = true;
      var iterations = 0;
      collection.__iterate(function(v4, k4, c4) {
        if (!(isSkipping && (isSkipping = predicate.call(context, v4, k4, c4)))) {
          iterations++;
          return fn2(v4, useKeys ? k4 : iterations - 1, this$1$1);
        }
      });
      return iterations;
    };
    skipSequence.__iteratorUncached = function(type2, reverse5) {
      var this$1$1 = this;
      if (reverse5) {
        return this.cacheResult().__iterator(type2, reverse5);
      }
      var iterator = collection.__iterator(ITERATE_ENTRIES, reverse5);
      var skipping = true;
      var iterations = 0;
      return new Iterator(function() {
        var step;
        var k4;
        var v4;
        do {
          step = iterator.next();
          if (step.done) {
            if (useKeys || type2 === ITERATE_VALUES) {
              return step;
            }
            if (type2 === ITERATE_KEYS) {
              return iteratorValue(type2, iterations++, void 0, step);
            }
            return iteratorValue(type2, iterations++, step.value[1], step);
          }
          var entry = step.value;
          k4 = entry[0];
          v4 = entry[1];
          skipping && (skipping = predicate.call(context, v4, k4, this$1$1));
        } while (skipping);
        return type2 === ITERATE_ENTRIES ? step : iteratorValue(type2, k4, v4, step);
      });
    };
    return skipSequence;
  }
  function concatFactory(collection, values3) {
    var isKeyedCollection = isKeyed(collection);
    var iters = [collection].concat(values3).map(function(v4) {
      if (!isCollection(v4)) {
        v4 = isKeyedCollection ? keyedSeqFromValue(v4) : indexedSeqFromValue(Array.isArray(v4) ? v4 : [v4]);
      } else if (isKeyedCollection) {
        v4 = KeyedCollection(v4);
      }
      return v4;
    }).filter(function(v4) {
      return v4.size !== 0;
    });
    if (iters.length === 0) {
      return collection;
    }
    if (iters.length === 1) {
      var singleton = iters[0];
      if (singleton === collection || isKeyedCollection && isKeyed(singleton) || isIndexed(collection) && isIndexed(singleton)) {
        return singleton;
      }
    }
    var concatSeq = new ArraySeq(iters);
    if (isKeyedCollection) {
      concatSeq = concatSeq.toKeyedSeq();
    } else if (!isIndexed(collection)) {
      concatSeq = concatSeq.toSetSeq();
    }
    concatSeq = concatSeq.flatten(true);
    concatSeq.size = iters.reduce(function(sum, seq) {
      if (sum !== void 0) {
        var size2 = seq.size;
        if (size2 !== void 0) {
          return sum + size2;
        }
      }
    }, 0);
    return concatSeq;
  }
  function flattenFactory(collection, depth, useKeys) {
    var flatSequence = makeSequence(collection);
    flatSequence.__iterateUncached = function(fn2, reverse5) {
      if (reverse5) {
        return this.cacheResult().__iterate(fn2, reverse5);
      }
      var iterations = 0;
      var stopped = false;
      function flatDeep(iter, currentDepth) {
        iter.__iterate(function(v4, k4) {
          if ((!depth || currentDepth < depth) && isCollection(v4)) {
            flatDeep(v4, currentDepth + 1);
          } else {
            iterations++;
            if (fn2(v4, useKeys ? k4 : iterations - 1, flatSequence) === false) {
              stopped = true;
            }
          }
          return !stopped;
        }, reverse5);
      }
      flatDeep(collection, 0);
      return iterations;
    };
    flatSequence.__iteratorUncached = function(type2, reverse5) {
      if (reverse5) {
        return this.cacheResult().__iterator(type2, reverse5);
      }
      var iterator = collection.__iterator(type2, reverse5);
      var stack = [];
      var iterations = 0;
      return new Iterator(function() {
        while (iterator) {
          var step = iterator.next();
          if (step.done !== false) {
            iterator = stack.pop();
            continue;
          }
          var v4 = step.value;
          if (type2 === ITERATE_ENTRIES) {
            v4 = v4[1];
          }
          if ((!depth || stack.length < depth) && isCollection(v4)) {
            stack.push(iterator);
            iterator = v4.__iterator(type2, reverse5);
          } else {
            return useKeys ? step : iteratorValue(type2, iterations++, v4, step);
          }
        }
        return iteratorDone();
      });
    };
    return flatSequence;
  }
  function flatMapFactory(collection, mapper, context) {
    var coerce = collectionClass(collection);
    return collection.toSeq().map(function(v4, k4) {
      return coerce(mapper.call(context, v4, k4, collection));
    }).flatten(true);
  }
  function interposeFactory(collection, separator) {
    var interposedSequence = makeSequence(collection);
    interposedSequence.size = collection.size && collection.size * 2 - 1;
    interposedSequence.__iterateUncached = function(fn2, reverse5) {
      var this$1$1 = this;
      var iterations = 0;
      collection.__iterate(
        function(v4) {
          return (!iterations || fn2(separator, iterations++, this$1$1) !== false) && fn2(v4, iterations++, this$1$1) !== false;
        },
        reverse5
      );
      return iterations;
    };
    interposedSequence.__iteratorUncached = function(type2, reverse5) {
      var iterator = collection.__iterator(ITERATE_VALUES, reverse5);
      var iterations = 0;
      var step;
      return new Iterator(function() {
        if (!step || iterations % 2) {
          step = iterator.next();
          if (step.done) {
            return step;
          }
        }
        return iterations % 2 ? iteratorValue(type2, iterations++, separator) : iteratorValue(type2, iterations++, step.value, step);
      });
    };
    return interposedSequence;
  }
  function sortFactory(collection, comparator, mapper) {
    if (!comparator) {
      comparator = defaultComparator;
    }
    var isKeyedCollection = isKeyed(collection);
    var index = 0;
    var entries5 = collection.toSeq().map(function(v4, k4) {
      return [k4, v4, index++, mapper ? mapper(v4, k4, collection) : v4];
    }).valueSeq().toArray();
    entries5.sort(function(a5, b2) {
      return comparator(a5[3], b2[3]) || a5[2] - b2[2];
    }).forEach(
      isKeyedCollection ? function(v4, i5) {
        entries5[i5].length = 2;
      } : function(v4, i5) {
        entries5[i5] = v4[1];
      }
    );
    return isKeyedCollection ? KeyedSeq(entries5) : isIndexed(collection) ? IndexedSeq(entries5) : SetSeq(entries5);
  }
  function maxFactory(collection, comparator, mapper) {
    if (!comparator) {
      comparator = defaultComparator;
    }
    if (mapper) {
      var entry = collection.toSeq().map(function(v4, k4) {
        return [v4, mapper(v4, k4, collection)];
      }).reduce(function(a5, b2) {
        return maxCompare(comparator, a5[1], b2[1]) ? b2 : a5;
      });
      return entry && entry[0];
    }
    return collection.reduce(function(a5, b2) {
      return maxCompare(comparator, a5, b2) ? b2 : a5;
    });
  }
  function maxCompare(comparator, a5, b2) {
    var comp = comparator(b2, a5);
    return comp === 0 && b2 !== a5 && (b2 === void 0 || b2 === null || b2 !== b2) || comp > 0;
  }
  function zipWithFactory(keyIter, zipper, iters, zipAll3) {
    var zipSequence = makeSequence(keyIter);
    var sizes = new ArraySeq(iters).map(function(i5) {
      return i5.size;
    });
    zipSequence.size = zipAll3 ? sizes.max() : sizes.min();
    zipSequence.__iterate = function(fn2, reverse5) {
      var iterator = this.__iterator(ITERATE_VALUES, reverse5);
      var step;
      var iterations = 0;
      while (!(step = iterator.next()).done) {
        if (fn2(step.value, iterations++, this) === false) {
          break;
        }
      }
      return iterations;
    };
    zipSequence.__iteratorUncached = function(type2, reverse5) {
      var iterators = iters.map(
        function(i5) {
          return i5 = Collection(i5), getIterator(reverse5 ? i5.reverse() : i5);
        }
      );
      var iterations = 0;
      var isDone = false;
      return new Iterator(function() {
        var steps;
        if (!isDone) {
          steps = iterators.map(function(i5) {
            return i5.next();
          });
          isDone = zipAll3 ? steps.every(function(s4) {
            return s4.done;
          }) : steps.some(function(s4) {
            return s4.done;
          });
        }
        if (isDone) {
          return iteratorDone();
        }
        return iteratorValue(
          type2,
          iterations++,
          zipper.apply(
            null,
            steps.map(function(s4) {
              return s4.value;
            })
          )
        );
      });
    };
    return zipSequence;
  }
  function reify(iter, seq) {
    return iter === seq ? iter : isSeq(iter) ? seq : iter.constructor(seq);
  }
  function validateEntry(entry) {
    if (entry !== Object(entry)) {
      throw new TypeError("Expected [K, V] tuple: " + entry);
    }
  }
  function collectionClass(collection) {
    return isKeyed(collection) ? KeyedCollection : isIndexed(collection) ? IndexedCollection : SetCollection;
  }
  function makeSequence(collection) {
    return Object.create(
      (isKeyed(collection) ? KeyedSeq : isIndexed(collection) ? IndexedSeq : SetSeq).prototype
    );
  }
  function cacheResultThrough() {
    if (this._iter.cacheResult) {
      this._iter.cacheResult();
      this.size = this._iter.size;
      return this;
    }
    return Seq.prototype.cacheResult.call(this);
  }
  function defaultComparator(a5, b2) {
    if (a5 === void 0 && b2 === void 0) {
      return 0;
    }
    if (a5 === void 0) {
      return 1;
    }
    if (b2 === void 0) {
      return -1;
    }
    return a5 > b2 ? 1 : a5 < b2 ? -1 : 0;
  }
  function arrCopy(arr, offset2) {
    offset2 = offset2 || 0;
    var len = Math.max(0, arr.length - offset2);
    var newArr = new Array(len);
    for (var ii2 = 0; ii2 < len; ii2++) {
      newArr[ii2] = arr[ii2 + offset2];
    }
    return newArr;
  }
  function invariant(condition, error) {
    if (!condition) {
      throw new Error(error);
    }
  }
  function assertNotInfinite(size2) {
    invariant(
      size2 !== Infinity,
      "Cannot perform this action with an infinite size."
    );
  }
  function coerceKeyPath(keyPath) {
    if (isArrayLike(keyPath) && typeof keyPath !== "string") {
      return keyPath;
    }
    if (isOrdered(keyPath)) {
      return keyPath.toArray();
    }
    throw new TypeError(
      "Invalid keyPath: expected Ordered Collection or Array: " + keyPath
    );
  }
  var toString2 = Object.prototype.toString;
  function isPlainObject(value) {
    if (!value || typeof value !== "object" || toString2.call(value) !== "[object Object]") {
      return false;
    }
    var proto = Object.getPrototypeOf(value);
    if (proto === null) {
      return true;
    }
    var parentProto = proto;
    var nextProto = Object.getPrototypeOf(proto);
    while (nextProto !== null) {
      parentProto = nextProto;
      nextProto = Object.getPrototypeOf(parentProto);
    }
    return parentProto === proto;
  }
  function isDataStructure(value) {
    return typeof value === "object" && (isImmutable(value) || Array.isArray(value) || isPlainObject(value));
  }
  function quoteString(value) {
    try {
      return typeof value === "string" ? JSON.stringify(value) : String(value);
    } catch (_ignoreError) {
      return JSON.stringify(value);
    }
  }
  function has(collection, key) {
    return isImmutable(collection) ? collection.has(key) : isDataStructure(collection) && hasOwnProperty.call(collection, key);
  }
  function get(collection, key, notSetValue) {
    return isImmutable(collection) ? collection.get(key, notSetValue) : !has(collection, key) ? notSetValue : typeof collection.get === "function" ? collection.get(key) : collection[key];
  }
  function shallowCopy(from) {
    if (Array.isArray(from)) {
      return arrCopy(from);
    }
    var to2 = {};
    for (var key in from) {
      if (hasOwnProperty.call(from, key)) {
        to2[key] = from[key];
      }
    }
    return to2;
  }
  function remove(collection, key) {
    if (!isDataStructure(collection)) {
      throw new TypeError(
        "Cannot update non-data-structure value: " + collection
      );
    }
    if (isImmutable(collection)) {
      if (!collection.remove) {
        throw new TypeError(
          "Cannot update immutable value without .remove() method: " + collection
        );
      }
      return collection.remove(key);
    }
    if (!hasOwnProperty.call(collection, key)) {
      return collection;
    }
    var collectionCopy = shallowCopy(collection);
    if (Array.isArray(collectionCopy)) {
      collectionCopy.splice(key, 1);
    } else {
      delete collectionCopy[key];
    }
    return collectionCopy;
  }
  function set(collection, key, value) {
    if (!isDataStructure(collection)) {
      throw new TypeError(
        "Cannot update non-data-structure value: " + collection
      );
    }
    if (isImmutable(collection)) {
      if (!collection.set) {
        throw new TypeError(
          "Cannot update immutable value without .set() method: " + collection
        );
      }
      return collection.set(key, value);
    }
    if (hasOwnProperty.call(collection, key) && value === collection[key]) {
      return collection;
    }
    var collectionCopy = shallowCopy(collection);
    collectionCopy[key] = value;
    return collectionCopy;
  }
  function updateIn$1(collection, keyPath, notSetValue, updater) {
    if (!updater) {
      updater = notSetValue;
      notSetValue = void 0;
    }
    var updatedValue = updateInDeeply(
      isImmutable(collection),
      collection,
      coerceKeyPath(keyPath),
      0,
      notSetValue,
      updater
    );
    return updatedValue === NOT_SET ? notSetValue : updatedValue;
  }
  function updateInDeeply(inImmutable, existing, keyPath, i5, notSetValue, updater) {
    var wasNotSet = existing === NOT_SET;
    if (i5 === keyPath.length) {
      var existingValue = wasNotSet ? notSetValue : existing;
      var newValue = updater(existingValue);
      return newValue === existingValue ? existing : newValue;
    }
    if (!wasNotSet && !isDataStructure(existing)) {
      throw new TypeError(
        "Cannot update within non-data-structure value in path [" + keyPath.slice(0, i5).map(quoteString) + "]: " + existing
      );
    }
    var key = keyPath[i5];
    var nextExisting = wasNotSet ? NOT_SET : get(existing, key, NOT_SET);
    var nextUpdated = updateInDeeply(
      nextExisting === NOT_SET ? inImmutable : isImmutable(nextExisting),
      nextExisting,
      keyPath,
      i5 + 1,
      notSetValue,
      updater
    );
    return nextUpdated === nextExisting ? existing : nextUpdated === NOT_SET ? remove(existing, key) : set(
      wasNotSet ? inImmutable ? emptyMap() : {} : existing,
      key,
      nextUpdated
    );
  }
  function setIn$1(collection, keyPath, value) {
    return updateIn$1(collection, keyPath, NOT_SET, function() {
      return value;
    });
  }
  function setIn(keyPath, v4) {
    return setIn$1(this, keyPath, v4);
  }
  function removeIn(collection, keyPath) {
    return updateIn$1(collection, keyPath, function() {
      return NOT_SET;
    });
  }
  function deleteIn(keyPath) {
    return removeIn(this, keyPath);
  }
  function update$1(collection, key, notSetValue, updater) {
    return updateIn$1(collection, [key], notSetValue, updater);
  }
  function update(key, notSetValue, updater) {
    return arguments.length === 1 ? key(this) : update$1(this, key, notSetValue, updater);
  }
  function updateIn(keyPath, notSetValue, updater) {
    return updateIn$1(this, keyPath, notSetValue, updater);
  }
  function merge$1() {
    var iters = [], len = arguments.length;
    while (len--)
      iters[len] = arguments[len];
    return mergeIntoKeyedWith(this, iters);
  }
  function mergeWith$1(merger) {
    var iters = [], len = arguments.length - 1;
    while (len-- > 0)
      iters[len] = arguments[len + 1];
    if (typeof merger !== "function") {
      throw new TypeError("Invalid merger function: " + merger);
    }
    return mergeIntoKeyedWith(this, iters, merger);
  }
  function mergeIntoKeyedWith(collection, collections, merger) {
    var iters = [];
    for (var ii2 = 0; ii2 < collections.length; ii2++) {
      var collection$1 = KeyedCollection(collections[ii2]);
      if (collection$1.size !== 0) {
        iters.push(collection$1);
      }
    }
    if (iters.length === 0) {
      return collection;
    }
    if (collection.toSeq().size === 0 && !collection.__ownerID && iters.length === 1) {
      return collection.constructor(iters[0]);
    }
    return collection.withMutations(function(collection2) {
      var mergeIntoCollection = merger ? function(value, key) {
        update$1(
          collection2,
          key,
          NOT_SET,
          function(oldVal) {
            return oldVal === NOT_SET ? value : merger(oldVal, value, key);
          }
        );
      } : function(value, key) {
        collection2.set(key, value);
      };
      for (var ii3 = 0; ii3 < iters.length; ii3++) {
        iters[ii3].forEach(mergeIntoCollection);
      }
    });
  }
  function mergeDeepWithSources(collection, sources, merger) {
    return mergeWithSources(collection, sources, deepMergerWith(merger));
  }
  function mergeWithSources(collection, sources, merger) {
    if (!isDataStructure(collection)) {
      throw new TypeError(
        "Cannot merge into non-data-structure value: " + collection
      );
    }
    if (isImmutable(collection)) {
      return typeof merger === "function" && collection.mergeWith ? collection.mergeWith.apply(collection, [merger].concat(sources)) : collection.merge ? collection.merge.apply(collection, sources) : collection.concat.apply(collection, sources);
    }
    var isArray = Array.isArray(collection);
    var merged = collection;
    var Collection5 = isArray ? IndexedCollection : KeyedCollection;
    var mergeItem = isArray ? function(value) {
      if (merged === collection) {
        merged = shallowCopy(merged);
      }
      merged.push(value);
    } : function(value, key) {
      var hasVal = hasOwnProperty.call(merged, key);
      var nextVal = hasVal && merger ? merger(merged[key], value, key) : value;
      if (!hasVal || nextVal !== merged[key]) {
        if (merged === collection) {
          merged = shallowCopy(merged);
        }
        merged[key] = nextVal;
      }
    };
    for (var i5 = 0; i5 < sources.length; i5++) {
      Collection5(sources[i5]).forEach(mergeItem);
    }
    return merged;
  }
  function deepMergerWith(merger) {
    function deepMerger(oldValue, newValue, key) {
      return isDataStructure(oldValue) && isDataStructure(newValue) && areMergeable(oldValue, newValue) ? mergeWithSources(oldValue, [newValue], deepMerger) : merger ? merger(oldValue, newValue, key) : newValue;
    }
    return deepMerger;
  }
  function areMergeable(oldDataStructure, newDataStructure) {
    var oldSeq = Seq(oldDataStructure);
    var newSeq = Seq(newDataStructure);
    return isIndexed(oldSeq) === isIndexed(newSeq) && isKeyed(oldSeq) === isKeyed(newSeq);
  }
  function mergeDeep() {
    var iters = [], len = arguments.length;
    while (len--)
      iters[len] = arguments[len];
    return mergeDeepWithSources(this, iters);
  }
  function mergeDeepWith(merger) {
    var iters = [], len = arguments.length - 1;
    while (len-- > 0)
      iters[len] = arguments[len + 1];
    return mergeDeepWithSources(this, iters, merger);
  }
  function mergeIn(keyPath) {
    var iters = [], len = arguments.length - 1;
    while (len-- > 0)
      iters[len] = arguments[len + 1];
    return updateIn$1(this, keyPath, emptyMap(), function(m4) {
      return mergeWithSources(m4, iters);
    });
  }
  function mergeDeepIn(keyPath) {
    var iters = [], len = arguments.length - 1;
    while (len-- > 0)
      iters[len] = arguments[len + 1];
    return updateIn$1(
      this,
      keyPath,
      emptyMap(),
      function(m4) {
        return mergeDeepWithSources(m4, iters);
      }
    );
  }
  function withMutations(fn2) {
    var mutable = this.asMutable();
    fn2(mutable);
    return mutable.wasAltered() ? mutable.__ensureOwner(this.__ownerID) : this;
  }
  function asMutable() {
    return this.__ownerID ? this : this.__ensureOwner(new OwnerID());
  }
  function asImmutable() {
    return this.__ensureOwner();
  }
  function wasAltered() {
    return this.__altered;
  }
  var Map2 = /* @__PURE__ */ function(KeyedCollection3) {
    function Map4(value) {
      return value === void 0 || value === null ? emptyMap() : isMap(value) && !isOrdered(value) ? value : emptyMap().withMutations(function(map5) {
        var iter = KeyedCollection3(value);
        assertNotInfinite(iter.size);
        iter.forEach(function(v4, k4) {
          return map5.set(k4, v4);
        });
      });
    }
    if (KeyedCollection3)
      Map4.__proto__ = KeyedCollection3;
    Map4.prototype = Object.create(KeyedCollection3 && KeyedCollection3.prototype);
    Map4.prototype.constructor = Map4;
    Map4.prototype.toString = function toString9() {
      return this.__toString("Map {", "}");
    };
    Map4.prototype.get = function get24(k4, notSetValue) {
      return this._root ? this._root.get(0, void 0, k4, notSetValue) : notSetValue;
    };
    Map4.prototype.set = function set7(k4, v4) {
      return updateMap(this, k4, v4);
    };
    Map4.prototype.remove = function remove7(k4) {
      return updateMap(this, k4, NOT_SET);
    };
    Map4.prototype.deleteAll = function deleteAll(keys3) {
      var collection = Collection(keys3);
      if (collection.size === 0) {
        return this;
      }
      return this.withMutations(function(map5) {
        collection.forEach(function(key) {
          return map5.remove(key);
        });
      });
    };
    Map4.prototype.clear = function clear3() {
      if (this.size === 0) {
        return this;
      }
      if (this.__ownerID) {
        this.size = 0;
        this._root = null;
        this.__hash = void 0;
        this.__altered = true;
        return this;
      }
      return emptyMap();
    };
    Map4.prototype.sort = function sort3(comparator) {
      return OrderedMap(sortFactory(this, comparator));
    };
    Map4.prototype.sortBy = function sortBy3(mapper, comparator) {
      return OrderedMap(sortFactory(this, comparator, mapper));
    };
    Map4.prototype.map = function map5(mapper, context) {
      var this$1$1 = this;
      return this.withMutations(function(map6) {
        map6.forEach(function(value, key) {
          map6.set(key, mapper.call(context, value, key, this$1$1));
        });
      });
    };
    Map4.prototype.__iterator = function __iterator3(type2, reverse5) {
      return new MapIterator(this, type2, reverse5);
    };
    Map4.prototype.__iterate = function __iterate3(fn2, reverse5) {
      var this$1$1 = this;
      var iterations = 0;
      this._root && this._root.iterate(function(entry) {
        iterations++;
        return fn2(entry[1], entry[0], this$1$1);
      }, reverse5);
      return iterations;
    };
    Map4.prototype.__ensureOwner = function __ensureOwner3(ownerID) {
      if (ownerID === this.__ownerID) {
        return this;
      }
      if (!ownerID) {
        if (this.size === 0) {
          return emptyMap();
        }
        this.__ownerID = ownerID;
        this.__altered = false;
        return this;
      }
      return makeMap(this.size, this._root, ownerID, this.__hash);
    };
    return Map4;
  }(KeyedCollection);
  Map2.isMap = isMap;
  var MapPrototype = Map2.prototype;
  MapPrototype[IS_MAP_SYMBOL] = true;
  MapPrototype[DELETE] = MapPrototype.remove;
  MapPrototype.removeAll = MapPrototype.deleteAll;
  MapPrototype.setIn = setIn;
  MapPrototype.removeIn = MapPrototype.deleteIn = deleteIn;
  MapPrototype.update = update;
  MapPrototype.updateIn = updateIn;
  MapPrototype.merge = MapPrototype.concat = merge$1;
  MapPrototype.mergeWith = mergeWith$1;
  MapPrototype.mergeDeep = mergeDeep;
  MapPrototype.mergeDeepWith = mergeDeepWith;
  MapPrototype.mergeIn = mergeIn;
  MapPrototype.mergeDeepIn = mergeDeepIn;
  MapPrototype.withMutations = withMutations;
  MapPrototype.wasAltered = wasAltered;
  MapPrototype.asImmutable = asImmutable;
  MapPrototype["@@transducer/init"] = MapPrototype.asMutable = asMutable;
  MapPrototype["@@transducer/step"] = function(result, arr) {
    return result.set(arr[0], arr[1]);
  };
  MapPrototype["@@transducer/result"] = function(obj) {
    return obj.asImmutable();
  };
  var ArrayMapNode = function ArrayMapNode2(ownerID, entries5) {
    this.ownerID = ownerID;
    this.entries = entries5;
  };
  ArrayMapNode.prototype.get = function get2(shift2, keyHash, key, notSetValue) {
    var entries5 = this.entries;
    for (var ii2 = 0, len = entries5.length; ii2 < len; ii2++) {
      if (is(key, entries5[ii2][0])) {
        return entries5[ii2][1];
      }
    }
    return notSetValue;
  };
  ArrayMapNode.prototype.update = function update2(ownerID, shift2, keyHash, key, value, didChangeSize, didAlter) {
    var removed = value === NOT_SET;
    var entries5 = this.entries;
    var idx = 0;
    var len = entries5.length;
    for (; idx < len; idx++) {
      if (is(key, entries5[idx][0])) {
        break;
      }
    }
    var exists = idx < len;
    if (exists ? entries5[idx][1] === value : removed) {
      return this;
    }
    SetRef(didAlter);
    (removed || !exists) && SetRef(didChangeSize);
    if (removed && entries5.length === 1) {
      return;
    }
    if (!exists && !removed && entries5.length >= MAX_ARRAY_MAP_SIZE) {
      return createNodes(ownerID, entries5, key, value);
    }
    var isEditable = ownerID && ownerID === this.ownerID;
    var newEntries = isEditable ? entries5 : arrCopy(entries5);
    if (exists) {
      if (removed) {
        idx === len - 1 ? newEntries.pop() : newEntries[idx] = newEntries.pop();
      } else {
        newEntries[idx] = [key, value];
      }
    } else {
      newEntries.push([key, value]);
    }
    if (isEditable) {
      this.entries = newEntries;
      return this;
    }
    return new ArrayMapNode(ownerID, newEntries);
  };
  var BitmapIndexedNode = function BitmapIndexedNode2(ownerID, bitmap, nodes) {
    this.ownerID = ownerID;
    this.bitmap = bitmap;
    this.nodes = nodes;
  };
  BitmapIndexedNode.prototype.get = function get3(shift2, keyHash, key, notSetValue) {
    if (keyHash === void 0) {
      keyHash = hash(key);
    }
    var bit = 1 << ((shift2 === 0 ? keyHash : keyHash >>> shift2) & MASK);
    var bitmap = this.bitmap;
    return (bitmap & bit) === 0 ? notSetValue : this.nodes[popCount(bitmap & bit - 1)].get(
      shift2 + SHIFT,
      keyHash,
      key,
      notSetValue
    );
  };
  BitmapIndexedNode.prototype.update = function update3(ownerID, shift2, keyHash, key, value, didChangeSize, didAlter) {
    if (keyHash === void 0) {
      keyHash = hash(key);
    }
    var keyHashFrag = (shift2 === 0 ? keyHash : keyHash >>> shift2) & MASK;
    var bit = 1 << keyHashFrag;
    var bitmap = this.bitmap;
    var exists = (bitmap & bit) !== 0;
    if (!exists && value === NOT_SET) {
      return this;
    }
    var idx = popCount(bitmap & bit - 1);
    var nodes = this.nodes;
    var node = exists ? nodes[idx] : void 0;
    var newNode = updateNode(
      node,
      ownerID,
      shift2 + SHIFT,
      keyHash,
      key,
      value,
      didChangeSize,
      didAlter
    );
    if (newNode === node) {
      return this;
    }
    if (!exists && newNode && nodes.length >= MAX_BITMAP_INDEXED_SIZE) {
      return expandNodes(ownerID, nodes, bitmap, keyHashFrag, newNode);
    }
    if (exists && !newNode && nodes.length === 2 && isLeafNode(nodes[idx ^ 1])) {
      return nodes[idx ^ 1];
    }
    if (exists && newNode && nodes.length === 1 && isLeafNode(newNode)) {
      return newNode;
    }
    var isEditable = ownerID && ownerID === this.ownerID;
    var newBitmap = exists ? newNode ? bitmap : bitmap ^ bit : bitmap | bit;
    var newNodes = exists ? newNode ? setAt(nodes, idx, newNode, isEditable) : spliceOut(nodes, idx, isEditable) : spliceIn(nodes, idx, newNode, isEditable);
    if (isEditable) {
      this.bitmap = newBitmap;
      this.nodes = newNodes;
      return this;
    }
    return new BitmapIndexedNode(ownerID, newBitmap, newNodes);
  };
  var HashArrayMapNode = function HashArrayMapNode2(ownerID, count4, nodes) {
    this.ownerID = ownerID;
    this.count = count4;
    this.nodes = nodes;
  };
  HashArrayMapNode.prototype.get = function get4(shift2, keyHash, key, notSetValue) {
    if (keyHash === void 0) {
      keyHash = hash(key);
    }
    var idx = (shift2 === 0 ? keyHash : keyHash >>> shift2) & MASK;
    var node = this.nodes[idx];
    return node ? node.get(shift2 + SHIFT, keyHash, key, notSetValue) : notSetValue;
  };
  HashArrayMapNode.prototype.update = function update4(ownerID, shift2, keyHash, key, value, didChangeSize, didAlter) {
    if (keyHash === void 0) {
      keyHash = hash(key);
    }
    var idx = (shift2 === 0 ? keyHash : keyHash >>> shift2) & MASK;
    var removed = value === NOT_SET;
    var nodes = this.nodes;
    var node = nodes[idx];
    if (removed && !node) {
      return this;
    }
    var newNode = updateNode(
      node,
      ownerID,
      shift2 + SHIFT,
      keyHash,
      key,
      value,
      didChangeSize,
      didAlter
    );
    if (newNode === node) {
      return this;
    }
    var newCount = this.count;
    if (!node) {
      newCount++;
    } else if (!newNode) {
      newCount--;
      if (newCount < MIN_HASH_ARRAY_MAP_SIZE) {
        return packNodes(ownerID, nodes, newCount, idx);
      }
    }
    var isEditable = ownerID && ownerID === this.ownerID;
    var newNodes = setAt(nodes, idx, newNode, isEditable);
    if (isEditable) {
      this.count = newCount;
      this.nodes = newNodes;
      return this;
    }
    return new HashArrayMapNode(ownerID, newCount, newNodes);
  };
  var HashCollisionNode = function HashCollisionNode2(ownerID, keyHash, entries5) {
    this.ownerID = ownerID;
    this.keyHash = keyHash;
    this.entries = entries5;
  };
  HashCollisionNode.prototype.get = function get5(shift2, keyHash, key, notSetValue) {
    var entries5 = this.entries;
    for (var ii2 = 0, len = entries5.length; ii2 < len; ii2++) {
      if (is(key, entries5[ii2][0])) {
        return entries5[ii2][1];
      }
    }
    return notSetValue;
  };
  HashCollisionNode.prototype.update = function update5(ownerID, shift2, keyHash, key, value, didChangeSize, didAlter) {
    if (keyHash === void 0) {
      keyHash = hash(key);
    }
    var removed = value === NOT_SET;
    if (keyHash !== this.keyHash) {
      if (removed) {
        return this;
      }
      SetRef(didAlter);
      SetRef(didChangeSize);
      return mergeIntoNode(this, ownerID, shift2, keyHash, [key, value]);
    }
    var entries5 = this.entries;
    var idx = 0;
    var len = entries5.length;
    for (; idx < len; idx++) {
      if (is(key, entries5[idx][0])) {
        break;
      }
    }
    var exists = idx < len;
    if (exists ? entries5[idx][1] === value : removed) {
      return this;
    }
    SetRef(didAlter);
    (removed || !exists) && SetRef(didChangeSize);
    if (removed && len === 2) {
      return new ValueNode(ownerID, this.keyHash, entries5[idx ^ 1]);
    }
    var isEditable = ownerID && ownerID === this.ownerID;
    var newEntries = isEditable ? entries5 : arrCopy(entries5);
    if (exists) {
      if (removed) {
        idx === len - 1 ? newEntries.pop() : newEntries[idx] = newEntries.pop();
      } else {
        newEntries[idx] = [key, value];
      }
    } else {
      newEntries.push([key, value]);
    }
    if (isEditable) {
      this.entries = newEntries;
      return this;
    }
    return new HashCollisionNode(ownerID, this.keyHash, newEntries);
  };
  var ValueNode = function ValueNode2(ownerID, keyHash, entry) {
    this.ownerID = ownerID;
    this.keyHash = keyHash;
    this.entry = entry;
  };
  ValueNode.prototype.get = function get6(shift2, keyHash, key, notSetValue) {
    return is(key, this.entry[0]) ? this.entry[1] : notSetValue;
  };
  ValueNode.prototype.update = function update6(ownerID, shift2, keyHash, key, value, didChangeSize, didAlter) {
    var removed = value === NOT_SET;
    var keyMatch = is(key, this.entry[0]);
    if (keyMatch ? value === this.entry[1] : removed) {
      return this;
    }
    SetRef(didAlter);
    if (removed) {
      SetRef(didChangeSize);
      return;
    }
    if (keyMatch) {
      if (ownerID && ownerID === this.ownerID) {
        this.entry[1] = value;
        return this;
      }
      return new ValueNode(ownerID, this.keyHash, [key, value]);
    }
    SetRef(didChangeSize);
    return mergeIntoNode(this, ownerID, shift2, hash(key), [key, value]);
  };
  ArrayMapNode.prototype.iterate = HashCollisionNode.prototype.iterate = function(fn2, reverse5) {
    var entries5 = this.entries;
    for (var ii2 = 0, maxIndex = entries5.length - 1; ii2 <= maxIndex; ii2++) {
      if (fn2(entries5[reverse5 ? maxIndex - ii2 : ii2]) === false) {
        return false;
      }
    }
  };
  BitmapIndexedNode.prototype.iterate = HashArrayMapNode.prototype.iterate = function(fn2, reverse5) {
    var nodes = this.nodes;
    for (var ii2 = 0, maxIndex = nodes.length - 1; ii2 <= maxIndex; ii2++) {
      var node = nodes[reverse5 ? maxIndex - ii2 : ii2];
      if (node && node.iterate(fn2, reverse5) === false) {
        return false;
      }
    }
  };
  ValueNode.prototype.iterate = function(fn2, reverse5) {
    return fn2(this.entry);
  };
  var MapIterator = /* @__PURE__ */ function(Iterator5) {
    function MapIterator3(map5, type2, reverse5) {
      this._type = type2;
      this._reverse = reverse5;
      this._stack = map5._root && mapIteratorFrame(map5._root);
    }
    if (Iterator5)
      MapIterator3.__proto__ = Iterator5;
    MapIterator3.prototype = Object.create(Iterator5 && Iterator5.prototype);
    MapIterator3.prototype.constructor = MapIterator3;
    MapIterator3.prototype.next = function next() {
      var type2 = this._type;
      var stack = this._stack;
      while (stack) {
        var node = stack.node;
        var index = stack.index++;
        var maxIndex = void 0;
        if (node.entry) {
          if (index === 0) {
            return mapIteratorValue(type2, node.entry);
          }
        } else if (node.entries) {
          maxIndex = node.entries.length - 1;
          if (index <= maxIndex) {
            return mapIteratorValue(
              type2,
              node.entries[this._reverse ? maxIndex - index : index]
            );
          }
        } else {
          maxIndex = node.nodes.length - 1;
          if (index <= maxIndex) {
            var subNode = node.nodes[this._reverse ? maxIndex - index : index];
            if (subNode) {
              if (subNode.entry) {
                return mapIteratorValue(type2, subNode.entry);
              }
              stack = this._stack = mapIteratorFrame(subNode, stack);
            }
            continue;
          }
        }
        stack = this._stack = this._stack.__prev;
      }
      return iteratorDone();
    };
    return MapIterator3;
  }(Iterator);
  function mapIteratorValue(type2, entry) {
    return iteratorValue(type2, entry[0], entry[1]);
  }
  function mapIteratorFrame(node, prev) {
    return {
      node,
      index: 0,
      __prev: prev
    };
  }
  function makeMap(size2, root2, ownerID, hash3) {
    var map5 = Object.create(MapPrototype);
    map5.size = size2;
    map5._root = root2;
    map5.__ownerID = ownerID;
    map5.__hash = hash3;
    map5.__altered = false;
    return map5;
  }
  var EMPTY_MAP;
  function emptyMap() {
    return EMPTY_MAP || (EMPTY_MAP = makeMap(0));
  }
  function updateMap(map5, k4, v4) {
    var newRoot;
    var newSize;
    if (!map5._root) {
      if (v4 === NOT_SET) {
        return map5;
      }
      newSize = 1;
      newRoot = new ArrayMapNode(map5.__ownerID, [[k4, v4]]);
    } else {
      var didChangeSize = MakeRef();
      var didAlter = MakeRef();
      newRoot = updateNode(
        map5._root,
        map5.__ownerID,
        0,
        void 0,
        k4,
        v4,
        didChangeSize,
        didAlter
      );
      if (!didAlter.value) {
        return map5;
      }
      newSize = map5.size + (didChangeSize.value ? v4 === NOT_SET ? -1 : 1 : 0);
    }
    if (map5.__ownerID) {
      map5.size = newSize;
      map5._root = newRoot;
      map5.__hash = void 0;
      map5.__altered = true;
      return map5;
    }
    return newRoot ? makeMap(newSize, newRoot) : emptyMap();
  }
  function updateNode(node, ownerID, shift2, keyHash, key, value, didChangeSize, didAlter) {
    if (!node) {
      if (value === NOT_SET) {
        return node;
      }
      SetRef(didAlter);
      SetRef(didChangeSize);
      return new ValueNode(ownerID, keyHash, [key, value]);
    }
    return node.update(
      ownerID,
      shift2,
      keyHash,
      key,
      value,
      didChangeSize,
      didAlter
    );
  }
  function isLeafNode(node) {
    return node.constructor === ValueNode || node.constructor === HashCollisionNode;
  }
  function mergeIntoNode(node, ownerID, shift2, keyHash, entry) {
    if (node.keyHash === keyHash) {
      return new HashCollisionNode(ownerID, keyHash, [node.entry, entry]);
    }
    var idx1 = (shift2 === 0 ? node.keyHash : node.keyHash >>> shift2) & MASK;
    var idx2 = (shift2 === 0 ? keyHash : keyHash >>> shift2) & MASK;
    var newNode;
    var nodes = idx1 === idx2 ? [mergeIntoNode(node, ownerID, shift2 + SHIFT, keyHash, entry)] : (newNode = new ValueNode(ownerID, keyHash, entry), idx1 < idx2 ? [node, newNode] : [newNode, node]);
    return new BitmapIndexedNode(ownerID, 1 << idx1 | 1 << idx2, nodes);
  }
  function createNodes(ownerID, entries5, key, value) {
    if (!ownerID) {
      ownerID = new OwnerID();
    }
    var node = new ValueNode(ownerID, hash(key), [key, value]);
    for (var ii2 = 0; ii2 < entries5.length; ii2++) {
      var entry = entries5[ii2];
      node = node.update(ownerID, 0, void 0, entry[0], entry[1]);
    }
    return node;
  }
  function packNodes(ownerID, nodes, count4, excluding) {
    var bitmap = 0;
    var packedII = 0;
    var packedNodes = new Array(count4);
    for (var ii2 = 0, bit = 1, len = nodes.length; ii2 < len; ii2++, bit <<= 1) {
      var node = nodes[ii2];
      if (node !== void 0 && ii2 !== excluding) {
        bitmap |= bit;
        packedNodes[packedII++] = node;
      }
    }
    return new BitmapIndexedNode(ownerID, bitmap, packedNodes);
  }
  function expandNodes(ownerID, nodes, bitmap, including, node) {
    var count4 = 0;
    var expandedNodes = new Array(SIZE);
    for (var ii2 = 0; bitmap !== 0; ii2++, bitmap >>>= 1) {
      expandedNodes[ii2] = bitmap & 1 ? nodes[count4++] : void 0;
    }
    expandedNodes[including] = node;
    return new HashArrayMapNode(ownerID, count4 + 1, expandedNodes);
  }
  function popCount(x5) {
    x5 -= x5 >> 1 & 1431655765;
    x5 = (x5 & 858993459) + (x5 >> 2 & 858993459);
    x5 = x5 + (x5 >> 4) & 252645135;
    x5 += x5 >> 8;
    x5 += x5 >> 16;
    return x5 & 127;
  }
  function setAt(array3, idx, val, canEdit) {
    var newArray = canEdit ? array3 : arrCopy(array3);
    newArray[idx] = val;
    return newArray;
  }
  function spliceIn(array3, idx, val, canEdit) {
    var newLen = array3.length + 1;
    if (canEdit && idx + 1 === newLen) {
      array3[idx] = val;
      return array3;
    }
    var newArray = new Array(newLen);
    var after = 0;
    for (var ii2 = 0; ii2 < newLen; ii2++) {
      if (ii2 === idx) {
        newArray[ii2] = val;
        after = -1;
      } else {
        newArray[ii2] = array3[ii2 + after];
      }
    }
    return newArray;
  }
  function spliceOut(array3, idx, canEdit) {
    var newLen = array3.length - 1;
    if (canEdit && idx === newLen) {
      array3.pop();
      return array3;
    }
    var newArray = new Array(newLen);
    var after = 0;
    for (var ii2 = 0; ii2 < newLen; ii2++) {
      if (ii2 === idx) {
        after = 1;
      }
      newArray[ii2] = array3[ii2 + after];
    }
    return newArray;
  }
  var MAX_ARRAY_MAP_SIZE = SIZE / 4;
  var MAX_BITMAP_INDEXED_SIZE = SIZE / 2;
  var MIN_HASH_ARRAY_MAP_SIZE = SIZE / 4;
  var IS_LIST_SYMBOL = "@@__IMMUTABLE_LIST__@@";
  function isList(maybeList) {
    return Boolean(maybeList && maybeList[IS_LIST_SYMBOL]);
  }
  var List = /* @__PURE__ */ function(IndexedCollection3) {
    function List3(value) {
      var empty2 = emptyList();
      if (value === void 0 || value === null) {
        return empty2;
      }
      if (isList(value)) {
        return value;
      }
      var iter = IndexedCollection3(value);
      var size2 = iter.size;
      if (size2 === 0) {
        return empty2;
      }
      assertNotInfinite(size2);
      if (size2 > 0 && size2 < SIZE) {
        return makeList(0, size2, SHIFT, null, new VNode(iter.toArray()));
      }
      return empty2.withMutations(function(list) {
        list.setSize(size2);
        iter.forEach(function(v4, i5) {
          return list.set(i5, v4);
        });
      });
    }
    if (IndexedCollection3)
      List3.__proto__ = IndexedCollection3;
    List3.prototype = Object.create(IndexedCollection3 && IndexedCollection3.prototype);
    List3.prototype.constructor = List3;
    List3.of = function of() {
      return this(arguments);
    };
    List3.prototype.toString = function toString9() {
      return this.__toString("List [", "]");
    };
    List3.prototype.get = function get24(index, notSetValue) {
      index = wrapIndex(this, index);
      if (index >= 0 && index < this.size) {
        index += this._origin;
        var node = listNodeFor(this, index);
        return node && node.array[index & MASK];
      }
      return notSetValue;
    };
    List3.prototype.set = function set7(index, value) {
      return updateList(this, index, value);
    };
    List3.prototype.remove = function remove7(index) {
      return !this.has(index) ? this : index === 0 ? this.shift() : index === this.size - 1 ? this.pop() : this.splice(index, 1);
    };
    List3.prototype.insert = function insert(index, value) {
      return this.splice(index, 0, value);
    };
    List3.prototype.clear = function clear3() {
      if (this.size === 0) {
        return this;
      }
      if (this.__ownerID) {
        this.size = this._origin = this._capacity = 0;
        this._level = SHIFT;
        this._root = this._tail = this.__hash = void 0;
        this.__altered = true;
        return this;
      }
      return emptyList();
    };
    List3.prototype.push = function push() {
      var values3 = arguments;
      var oldSize = this.size;
      return this.withMutations(function(list) {
        setListBounds(list, 0, oldSize + values3.length);
        for (var ii2 = 0; ii2 < values3.length; ii2++) {
          list.set(oldSize + ii2, values3[ii2]);
        }
      });
    };
    List3.prototype.pop = function pop() {
      return setListBounds(this, 0, -1);
    };
    List3.prototype.unshift = function unshift() {
      var values3 = arguments;
      return this.withMutations(function(list) {
        setListBounds(list, -values3.length);
        for (var ii2 = 0; ii2 < values3.length; ii2++) {
          list.set(ii2, values3[ii2]);
        }
      });
    };
    List3.prototype.shift = function shift2() {
      return setListBounds(this, 1);
    };
    List3.prototype.concat = function concat3() {
      var arguments$1 = arguments;
      var seqs = [];
      for (var i5 = 0; i5 < arguments.length; i5++) {
        var argument = arguments$1[i5];
        var seq = IndexedCollection3(
          typeof argument !== "string" && hasIterator(argument) ? argument : [argument]
        );
        if (seq.size !== 0) {
          seqs.push(seq);
        }
      }
      if (seqs.length === 0) {
        return this;
      }
      if (this.size === 0 && !this.__ownerID && seqs.length === 1) {
        return this.constructor(seqs[0]);
      }
      return this.withMutations(function(list) {
        seqs.forEach(function(seq2) {
          return seq2.forEach(function(value) {
            return list.push(value);
          });
        });
      });
    };
    List3.prototype.setSize = function setSize(size2) {
      return setListBounds(this, 0, size2);
    };
    List3.prototype.map = function map5(mapper, context) {
      var this$1$1 = this;
      return this.withMutations(function(list) {
        for (var i5 = 0; i5 < this$1$1.size; i5++) {
          list.set(i5, mapper.call(context, list.get(i5), i5, this$1$1));
        }
      });
    };
    List3.prototype.slice = function slice7(begin, end) {
      var size2 = this.size;
      if (wholeSlice(begin, end, size2)) {
        return this;
      }
      return setListBounds(
        this,
        resolveBegin(begin, size2),
        resolveEnd(end, size2)
      );
    };
    List3.prototype.__iterator = function __iterator3(type2, reverse5) {
      var index = reverse5 ? this.size : 0;
      var values3 = iterateList(this, reverse5);
      return new Iterator(function() {
        var value = values3();
        return value === DONE ? iteratorDone() : iteratorValue(type2, reverse5 ? --index : index++, value);
      });
    };
    List3.prototype.__iterate = function __iterate3(fn2, reverse5) {
      var index = reverse5 ? this.size : 0;
      var values3 = iterateList(this, reverse5);
      var value;
      while ((value = values3()) !== DONE) {
        if (fn2(value, reverse5 ? --index : index++, this) === false) {
          break;
        }
      }
      return index;
    };
    List3.prototype.__ensureOwner = function __ensureOwner3(ownerID) {
      if (ownerID === this.__ownerID) {
        return this;
      }
      if (!ownerID) {
        if (this.size === 0) {
          return emptyList();
        }
        this.__ownerID = ownerID;
        this.__altered = false;
        return this;
      }
      return makeList(
        this._origin,
        this._capacity,
        this._level,
        this._root,
        this._tail,
        ownerID,
        this.__hash
      );
    };
    return List3;
  }(IndexedCollection);
  List.isList = isList;
  var ListPrototype = List.prototype;
  ListPrototype[IS_LIST_SYMBOL] = true;
  ListPrototype[DELETE] = ListPrototype.remove;
  ListPrototype.merge = ListPrototype.concat;
  ListPrototype.setIn = setIn;
  ListPrototype.deleteIn = ListPrototype.removeIn = deleteIn;
  ListPrototype.update = update;
  ListPrototype.updateIn = updateIn;
  ListPrototype.mergeIn = mergeIn;
  ListPrototype.mergeDeepIn = mergeDeepIn;
  ListPrototype.withMutations = withMutations;
  ListPrototype.wasAltered = wasAltered;
  ListPrototype.asImmutable = asImmutable;
  ListPrototype["@@transducer/init"] = ListPrototype.asMutable = asMutable;
  ListPrototype["@@transducer/step"] = function(result, arr) {
    return result.push(arr);
  };
  ListPrototype["@@transducer/result"] = function(obj) {
    return obj.asImmutable();
  };
  var VNode = function VNode2(array3, ownerID) {
    this.array = array3;
    this.ownerID = ownerID;
  };
  VNode.prototype.removeBefore = function removeBefore(ownerID, level, index) {
    if ((index & (1 << level + SHIFT) - 1) === 0 || this.array.length === 0) {
      return this;
    }
    var originIndex = index >>> level & MASK;
    if (originIndex >= this.array.length) {
      return new VNode([], ownerID);
    }
    var removingFirst = originIndex === 0;
    var newChild;
    if (level > 0) {
      var oldChild = this.array[originIndex];
      newChild = oldChild && oldChild.removeBefore(ownerID, level - SHIFT, index);
      if (newChild === oldChild && removingFirst) {
        return this;
      }
    }
    if (removingFirst && !newChild) {
      return this;
    }
    var editable = editableVNode(this, ownerID);
    if (!removingFirst) {
      for (var ii2 = 0; ii2 < originIndex; ii2++) {
        editable.array[ii2] = void 0;
      }
    }
    if (newChild) {
      editable.array[originIndex] = newChild;
    }
    return editable;
  };
  VNode.prototype.removeAfter = function removeAfter(ownerID, level, index) {
    if (index === (level ? 1 << level + SHIFT : SIZE) || this.array.length === 0) {
      return this;
    }
    var sizeIndex = index - 1 >>> level & MASK;
    if (sizeIndex >= this.array.length) {
      return this;
    }
    var newChild;
    if (level > 0) {
      var oldChild = this.array[sizeIndex];
      newChild = oldChild && oldChild.removeAfter(ownerID, level - SHIFT, index);
      if (newChild === oldChild && sizeIndex === this.array.length - 1) {
        return this;
      }
    }
    var editable = editableVNode(this, ownerID);
    editable.array.splice(sizeIndex + 1);
    if (newChild) {
      editable.array[sizeIndex] = newChild;
    }
    return editable;
  };
  var DONE = {};
  function iterateList(list, reverse5) {
    var left2 = list._origin;
    var right2 = list._capacity;
    var tailPos = getTailOffset(right2);
    var tail = list._tail;
    return iterateNodeOrLeaf(list._root, list._level, 0);
    function iterateNodeOrLeaf(node, level, offset2) {
      return level === 0 ? iterateLeaf(node, offset2) : iterateNode(node, level, offset2);
    }
    function iterateLeaf(node, offset2) {
      var array3 = offset2 === tailPos ? tail && tail.array : node && node.array;
      var from = offset2 > left2 ? 0 : left2 - offset2;
      var to2 = right2 - offset2;
      if (to2 > SIZE) {
        to2 = SIZE;
      }
      return function() {
        if (from === to2) {
          return DONE;
        }
        var idx = reverse5 ? --to2 : from++;
        return array3 && array3[idx];
      };
    }
    function iterateNode(node, level, offset2) {
      var values3;
      var array3 = node && node.array;
      var from = offset2 > left2 ? 0 : left2 - offset2 >> level;
      var to2 = (right2 - offset2 >> level) + 1;
      if (to2 > SIZE) {
        to2 = SIZE;
      }
      return function() {
        while (true) {
          if (values3) {
            var value = values3();
            if (value !== DONE) {
              return value;
            }
            values3 = null;
          }
          if (from === to2) {
            return DONE;
          }
          var idx = reverse5 ? --to2 : from++;
          values3 = iterateNodeOrLeaf(
            array3 && array3[idx],
            level - SHIFT,
            offset2 + (idx << level)
          );
        }
      };
    }
  }
  function makeList(origin, capacity, level, root2, tail, ownerID, hash3) {
    var list = Object.create(ListPrototype);
    list.size = capacity - origin;
    list._origin = origin;
    list._capacity = capacity;
    list._level = level;
    list._root = root2;
    list._tail = tail;
    list.__ownerID = ownerID;
    list.__hash = hash3;
    list.__altered = false;
    return list;
  }
  function emptyList() {
    return makeList(0, 0, SHIFT);
  }
  function updateList(list, index, value) {
    index = wrapIndex(list, index);
    if (index !== index) {
      return list;
    }
    if (index >= list.size || index < 0) {
      return list.withMutations(function(list2) {
        index < 0 ? setListBounds(list2, index).set(0, value) : setListBounds(list2, 0, index + 1).set(index, value);
      });
    }
    index += list._origin;
    var newTail = list._tail;
    var newRoot = list._root;
    var didAlter = MakeRef();
    if (index >= getTailOffset(list._capacity)) {
      newTail = updateVNode(newTail, list.__ownerID, 0, index, value, didAlter);
    } else {
      newRoot = updateVNode(
        newRoot,
        list.__ownerID,
        list._level,
        index,
        value,
        didAlter
      );
    }
    if (!didAlter.value) {
      return list;
    }
    if (list.__ownerID) {
      list._root = newRoot;
      list._tail = newTail;
      list.__hash = void 0;
      list.__altered = true;
      return list;
    }
    return makeList(list._origin, list._capacity, list._level, newRoot, newTail);
  }
  function updateVNode(node, ownerID, level, index, value, didAlter) {
    var idx = index >>> level & MASK;
    var nodeHas = node && idx < node.array.length;
    if (!nodeHas && value === void 0) {
      return node;
    }
    var newNode;
    if (level > 0) {
      var lowerNode = node && node.array[idx];
      var newLowerNode = updateVNode(
        lowerNode,
        ownerID,
        level - SHIFT,
        index,
        value,
        didAlter
      );
      if (newLowerNode === lowerNode) {
        return node;
      }
      newNode = editableVNode(node, ownerID);
      newNode.array[idx] = newLowerNode;
      return newNode;
    }
    if (nodeHas && node.array[idx] === value) {
      return node;
    }
    if (didAlter) {
      SetRef(didAlter);
    }
    newNode = editableVNode(node, ownerID);
    if (value === void 0 && idx === newNode.array.length - 1) {
      newNode.array.pop();
    } else {
      newNode.array[idx] = value;
    }
    return newNode;
  }
  function editableVNode(node, ownerID) {
    if (ownerID && node && ownerID === node.ownerID) {
      return node;
    }
    return new VNode(node ? node.array.slice() : [], ownerID);
  }
  function listNodeFor(list, rawIndex) {
    if (rawIndex >= getTailOffset(list._capacity)) {
      return list._tail;
    }
    if (rawIndex < 1 << list._level + SHIFT) {
      var node = list._root;
      var level = list._level;
      while (node && level > 0) {
        node = node.array[rawIndex >>> level & MASK];
        level -= SHIFT;
      }
      return node;
    }
  }
  function setListBounds(list, begin, end) {
    if (begin !== void 0) {
      begin |= 0;
    }
    if (end !== void 0) {
      end |= 0;
    }
    var owner = list.__ownerID || new OwnerID();
    var oldOrigin = list._origin;
    var oldCapacity = list._capacity;
    var newOrigin = oldOrigin + begin;
    var newCapacity = end === void 0 ? oldCapacity : end < 0 ? oldCapacity + end : oldOrigin + end;
    if (newOrigin === oldOrigin && newCapacity === oldCapacity) {
      return list;
    }
    if (newOrigin >= newCapacity) {
      return list.clear();
    }
    var newLevel = list._level;
    var newRoot = list._root;
    var offsetShift = 0;
    while (newOrigin + offsetShift < 0) {
      newRoot = new VNode(
        newRoot && newRoot.array.length ? [void 0, newRoot] : [],
        owner
      );
      newLevel += SHIFT;
      offsetShift += 1 << newLevel;
    }
    if (offsetShift) {
      newOrigin += offsetShift;
      oldOrigin += offsetShift;
      newCapacity += offsetShift;
      oldCapacity += offsetShift;
    }
    var oldTailOffset = getTailOffset(oldCapacity);
    var newTailOffset = getTailOffset(newCapacity);
    while (newTailOffset >= 1 << newLevel + SHIFT) {
      newRoot = new VNode(
        newRoot && newRoot.array.length ? [newRoot] : [],
        owner
      );
      newLevel += SHIFT;
    }
    var oldTail = list._tail;
    var newTail = newTailOffset < oldTailOffset ? listNodeFor(list, newCapacity - 1) : newTailOffset > oldTailOffset ? new VNode([], owner) : oldTail;
    if (oldTail && newTailOffset > oldTailOffset && newOrigin < oldCapacity && oldTail.array.length) {
      newRoot = editableVNode(newRoot, owner);
      var node = newRoot;
      for (var level = newLevel; level > SHIFT; level -= SHIFT) {
        var idx = oldTailOffset >>> level & MASK;
        node = node.array[idx] = editableVNode(node.array[idx], owner);
      }
      node.array[oldTailOffset >>> SHIFT & MASK] = oldTail;
    }
    if (newCapacity < oldCapacity) {
      newTail = newTail && newTail.removeAfter(owner, 0, newCapacity);
    }
    if (newOrigin >= newTailOffset) {
      newOrigin -= newTailOffset;
      newCapacity -= newTailOffset;
      newLevel = SHIFT;
      newRoot = null;
      newTail = newTail && newTail.removeBefore(owner, 0, newOrigin);
    } else if (newOrigin > oldOrigin || newTailOffset < oldTailOffset) {
      offsetShift = 0;
      while (newRoot) {
        var beginIndex = newOrigin >>> newLevel & MASK;
        if (beginIndex !== newTailOffset >>> newLevel & MASK) {
          break;
        }
        if (beginIndex) {
          offsetShift += (1 << newLevel) * beginIndex;
        }
        newLevel -= SHIFT;
        newRoot = newRoot.array[beginIndex];
      }
      if (newRoot && newOrigin > oldOrigin) {
        newRoot = newRoot.removeBefore(owner, newLevel, newOrigin - offsetShift);
      }
      if (newRoot && newTailOffset < oldTailOffset) {
        newRoot = newRoot.removeAfter(
          owner,
          newLevel,
          newTailOffset - offsetShift
        );
      }
      if (offsetShift) {
        newOrigin -= offsetShift;
        newCapacity -= offsetShift;
      }
    }
    if (list.__ownerID) {
      list.size = newCapacity - newOrigin;
      list._origin = newOrigin;
      list._capacity = newCapacity;
      list._level = newLevel;
      list._root = newRoot;
      list._tail = newTail;
      list.__hash = void 0;
      list.__altered = true;
      return list;
    }
    return makeList(newOrigin, newCapacity, newLevel, newRoot, newTail);
  }
  function getTailOffset(size2) {
    return size2 < SIZE ? 0 : size2 - 1 >>> SHIFT << SHIFT;
  }
  var OrderedMap = /* @__PURE__ */ function(Map4) {
    function OrderedMap3(value) {
      return value === void 0 || value === null ? emptyOrderedMap() : isOrderedMap(value) ? value : emptyOrderedMap().withMutations(function(map5) {
        var iter = KeyedCollection(value);
        assertNotInfinite(iter.size);
        iter.forEach(function(v4, k4) {
          return map5.set(k4, v4);
        });
      });
    }
    if (Map4)
      OrderedMap3.__proto__ = Map4;
    OrderedMap3.prototype = Object.create(Map4 && Map4.prototype);
    OrderedMap3.prototype.constructor = OrderedMap3;
    OrderedMap3.of = function of() {
      return this(arguments);
    };
    OrderedMap3.prototype.toString = function toString9() {
      return this.__toString("OrderedMap {", "}");
    };
    OrderedMap3.prototype.get = function get24(k4, notSetValue) {
      var index = this._map.get(k4);
      return index !== void 0 ? this._list.get(index)[1] : notSetValue;
    };
    OrderedMap3.prototype.clear = function clear3() {
      if (this.size === 0) {
        return this;
      }
      if (this.__ownerID) {
        this.size = 0;
        this._map.clear();
        this._list.clear();
        this.__altered = true;
        return this;
      }
      return emptyOrderedMap();
    };
    OrderedMap3.prototype.set = function set7(k4, v4) {
      return updateOrderedMap(this, k4, v4);
    };
    OrderedMap3.prototype.remove = function remove7(k4) {
      return updateOrderedMap(this, k4, NOT_SET);
    };
    OrderedMap3.prototype.__iterate = function __iterate3(fn2, reverse5) {
      var this$1$1 = this;
      return this._list.__iterate(
        function(entry) {
          return entry && fn2(entry[1], entry[0], this$1$1);
        },
        reverse5
      );
    };
    OrderedMap3.prototype.__iterator = function __iterator3(type2, reverse5) {
      return this._list.fromEntrySeq().__iterator(type2, reverse5);
    };
    OrderedMap3.prototype.__ensureOwner = function __ensureOwner3(ownerID) {
      if (ownerID === this.__ownerID) {
        return this;
      }
      var newMap = this._map.__ensureOwner(ownerID);
      var newList = this._list.__ensureOwner(ownerID);
      if (!ownerID) {
        if (this.size === 0) {
          return emptyOrderedMap();
        }
        this.__ownerID = ownerID;
        this.__altered = false;
        this._map = newMap;
        this._list = newList;
        return this;
      }
      return makeOrderedMap(newMap, newList, ownerID, this.__hash);
    };
    return OrderedMap3;
  }(Map2);
  OrderedMap.isOrderedMap = isOrderedMap;
  OrderedMap.prototype[IS_ORDERED_SYMBOL] = true;
  OrderedMap.prototype[DELETE] = OrderedMap.prototype.remove;
  function makeOrderedMap(map5, list, ownerID, hash3) {
    var omap = Object.create(OrderedMap.prototype);
    omap.size = map5 ? map5.size : 0;
    omap._map = map5;
    omap._list = list;
    omap.__ownerID = ownerID;
    omap.__hash = hash3;
    omap.__altered = false;
    return omap;
  }
  var EMPTY_ORDERED_MAP;
  function emptyOrderedMap() {
    return EMPTY_ORDERED_MAP || (EMPTY_ORDERED_MAP = makeOrderedMap(emptyMap(), emptyList()));
  }
  function updateOrderedMap(omap, k4, v4) {
    var map5 = omap._map;
    var list = omap._list;
    var i5 = map5.get(k4);
    var has9 = i5 !== void 0;
    var newMap;
    var newList;
    if (v4 === NOT_SET) {
      if (!has9) {
        return omap;
      }
      if (list.size >= SIZE && list.size >= map5.size * 2) {
        newList = list.filter(function(entry, idx) {
          return entry !== void 0 && i5 !== idx;
        });
        newMap = newList.toKeyedSeq().map(function(entry) {
          return entry[0];
        }).flip().toMap();
        if (omap.__ownerID) {
          newMap.__ownerID = newList.__ownerID = omap.__ownerID;
        }
      } else {
        newMap = map5.remove(k4);
        newList = i5 === list.size - 1 ? list.pop() : list.set(i5, void 0);
      }
    } else if (has9) {
      if (v4 === list.get(i5)[1]) {
        return omap;
      }
      newMap = map5;
      newList = list.set(i5, [k4, v4]);
    } else {
      newMap = map5.set(k4, list.size);
      newList = list.set(list.size, [k4, v4]);
    }
    if (omap.__ownerID) {
      omap.size = newMap.size;
      omap._map = newMap;
      omap._list = newList;
      omap.__hash = void 0;
      omap.__altered = true;
      return omap;
    }
    return makeOrderedMap(newMap, newList);
  }
  var IS_STACK_SYMBOL = "@@__IMMUTABLE_STACK__@@";
  function isStack(maybeStack) {
    return Boolean(maybeStack && maybeStack[IS_STACK_SYMBOL]);
  }
  var Stack = /* @__PURE__ */ function(IndexedCollection3) {
    function Stack3(value) {
      return value === void 0 || value === null ? emptyStack() : isStack(value) ? value : emptyStack().pushAll(value);
    }
    if (IndexedCollection3)
      Stack3.__proto__ = IndexedCollection3;
    Stack3.prototype = Object.create(IndexedCollection3 && IndexedCollection3.prototype);
    Stack3.prototype.constructor = Stack3;
    Stack3.of = function of() {
      return this(arguments);
    };
    Stack3.prototype.toString = function toString9() {
      return this.__toString("Stack [", "]");
    };
    Stack3.prototype.get = function get24(index, notSetValue) {
      var head = this._head;
      index = wrapIndex(this, index);
      while (head && index--) {
        head = head.next;
      }
      return head ? head.value : notSetValue;
    };
    Stack3.prototype.peek = function peek() {
      return this._head && this._head.value;
    };
    Stack3.prototype.push = function push() {
      var arguments$1 = arguments;
      if (arguments.length === 0) {
        return this;
      }
      var newSize = this.size + arguments.length;
      var head = this._head;
      for (var ii2 = arguments.length - 1; ii2 >= 0; ii2--) {
        head = {
          value: arguments$1[ii2],
          next: head
        };
      }
      if (this.__ownerID) {
        this.size = newSize;
        this._head = head;
        this.__hash = void 0;
        this.__altered = true;
        return this;
      }
      return makeStack(newSize, head);
    };
    Stack3.prototype.pushAll = function pushAll(iter) {
      iter = IndexedCollection3(iter);
      if (iter.size === 0) {
        return this;
      }
      if (this.size === 0 && isStack(iter)) {
        return iter;
      }
      assertNotInfinite(iter.size);
      var newSize = this.size;
      var head = this._head;
      iter.__iterate(
        function(value) {
          newSize++;
          head = {
            value,
            next: head
          };
        },
        /* reverse */
        true
      );
      if (this.__ownerID) {
        this.size = newSize;
        this._head = head;
        this.__hash = void 0;
        this.__altered = true;
        return this;
      }
      return makeStack(newSize, head);
    };
    Stack3.prototype.pop = function pop() {
      return this.slice(1);
    };
    Stack3.prototype.clear = function clear3() {
      if (this.size === 0) {
        return this;
      }
      if (this.__ownerID) {
        this.size = 0;
        this._head = void 0;
        this.__hash = void 0;
        this.__altered = true;
        return this;
      }
      return emptyStack();
    };
    Stack3.prototype.slice = function slice7(begin, end) {
      if (wholeSlice(begin, end, this.size)) {
        return this;
      }
      var resolvedBegin = resolveBegin(begin, this.size);
      var resolvedEnd = resolveEnd(end, this.size);
      if (resolvedEnd !== this.size) {
        return IndexedCollection3.prototype.slice.call(this, begin, end);
      }
      var newSize = this.size - resolvedBegin;
      var head = this._head;
      while (resolvedBegin--) {
        head = head.next;
      }
      if (this.__ownerID) {
        this.size = newSize;
        this._head = head;
        this.__hash = void 0;
        this.__altered = true;
        return this;
      }
      return makeStack(newSize, head);
    };
    Stack3.prototype.__ensureOwner = function __ensureOwner3(ownerID) {
      if (ownerID === this.__ownerID) {
        return this;
      }
      if (!ownerID) {
        if (this.size === 0) {
          return emptyStack();
        }
        this.__ownerID = ownerID;
        this.__altered = false;
        return this;
      }
      return makeStack(this.size, this._head, ownerID, this.__hash);
    };
    Stack3.prototype.__iterate = function __iterate3(fn2, reverse5) {
      var this$1$1 = this;
      if (reverse5) {
        return new ArraySeq(this.toArray()).__iterate(
          function(v4, k4) {
            return fn2(v4, k4, this$1$1);
          },
          reverse5
        );
      }
      var iterations = 0;
      var node = this._head;
      while (node) {
        if (fn2(node.value, iterations++, this) === false) {
          break;
        }
        node = node.next;
      }
      return iterations;
    };
    Stack3.prototype.__iterator = function __iterator3(type2, reverse5) {
      if (reverse5) {
        return new ArraySeq(this.toArray()).__iterator(type2, reverse5);
      }
      var iterations = 0;
      var node = this._head;
      return new Iterator(function() {
        if (node) {
          var value = node.value;
          node = node.next;
          return iteratorValue(type2, iterations++, value);
        }
        return iteratorDone();
      });
    };
    return Stack3;
  }(IndexedCollection);
  Stack.isStack = isStack;
  var StackPrototype = Stack.prototype;
  StackPrototype[IS_STACK_SYMBOL] = true;
  StackPrototype.shift = StackPrototype.pop;
  StackPrototype.unshift = StackPrototype.push;
  StackPrototype.unshiftAll = StackPrototype.pushAll;
  StackPrototype.withMutations = withMutations;
  StackPrototype.wasAltered = wasAltered;
  StackPrototype.asImmutable = asImmutable;
  StackPrototype["@@transducer/init"] = StackPrototype.asMutable = asMutable;
  StackPrototype["@@transducer/step"] = function(result, arr) {
    return result.unshift(arr);
  };
  StackPrototype["@@transducer/result"] = function(obj) {
    return obj.asImmutable();
  };
  function makeStack(size2, head, ownerID, hash3) {
    var map5 = Object.create(StackPrototype);
    map5.size = size2;
    map5._head = head;
    map5.__ownerID = ownerID;
    map5.__hash = hash3;
    map5.__altered = false;
    return map5;
  }
  var EMPTY_STACK;
  function emptyStack() {
    return EMPTY_STACK || (EMPTY_STACK = makeStack(0));
  }
  var IS_SET_SYMBOL = "@@__IMMUTABLE_SET__@@";
  function isSet(maybeSet) {
    return Boolean(maybeSet && maybeSet[IS_SET_SYMBOL]);
  }
  function isOrderedSet(maybeOrderedSet) {
    return isSet(maybeOrderedSet) && isOrdered(maybeOrderedSet);
  }
  function deepEqual(a5, b2) {
    if (a5 === b2) {
      return true;
    }
    if (!isCollection(b2) || a5.size !== void 0 && b2.size !== void 0 && a5.size !== b2.size || a5.__hash !== void 0 && b2.__hash !== void 0 && a5.__hash !== b2.__hash || isKeyed(a5) !== isKeyed(b2) || isIndexed(a5) !== isIndexed(b2) || isOrdered(a5) !== isOrdered(b2)) {
      return false;
    }
    if (a5.size === 0 && b2.size === 0) {
      return true;
    }
    var notAssociative = !isAssociative(a5);
    if (isOrdered(a5)) {
      var entries5 = a5.entries();
      return b2.every(function(v4, k4) {
        var entry = entries5.next().value;
        return entry && is(entry[1], v4) && (notAssociative || is(entry[0], k4));
      }) && entries5.next().done;
    }
    var flipped = false;
    if (a5.size === void 0) {
      if (b2.size === void 0) {
        if (typeof a5.cacheResult === "function") {
          a5.cacheResult();
        }
      } else {
        flipped = true;
        var _3 = a5;
        a5 = b2;
        b2 = _3;
      }
    }
    var allEqual = true;
    var bSize = b2.__iterate(function(v4, k4) {
      if (notAssociative ? !a5.has(v4) : flipped ? !is(v4, a5.get(k4, NOT_SET)) : !is(a5.get(k4, NOT_SET), v4)) {
        allEqual = false;
        return false;
      }
    });
    return allEqual && a5.size === bSize;
  }
  function mixin(ctor, methods) {
    var keyCopier = function(key) {
      ctor.prototype[key] = methods[key];
    };
    Object.keys(methods).forEach(keyCopier);
    Object.getOwnPropertySymbols && Object.getOwnPropertySymbols(methods).forEach(keyCopier);
    return ctor;
  }
  function toJS(value) {
    if (!value || typeof value !== "object") {
      return value;
    }
    if (!isCollection(value)) {
      if (!isDataStructure(value)) {
        return value;
      }
      value = Seq(value);
    }
    if (isKeyed(value)) {
      var result$1 = {};
      value.__iterate(function(v4, k4) {
        result$1[k4] = toJS(v4);
      });
      return result$1;
    }
    var result = [];
    value.__iterate(function(v4) {
      result.push(toJS(v4));
    });
    return result;
  }
  var Set2 = /* @__PURE__ */ function(SetCollection3) {
    function Set4(value) {
      return value === void 0 || value === null ? emptySet() : isSet(value) && !isOrdered(value) ? value : emptySet().withMutations(function(set7) {
        var iter = SetCollection3(value);
        assertNotInfinite(iter.size);
        iter.forEach(function(v4) {
          return set7.add(v4);
        });
      });
    }
    if (SetCollection3)
      Set4.__proto__ = SetCollection3;
    Set4.prototype = Object.create(SetCollection3 && SetCollection3.prototype);
    Set4.prototype.constructor = Set4;
    Set4.of = function of() {
      return this(arguments);
    };
    Set4.fromKeys = function fromKeys(value) {
      return this(KeyedCollection(value).keySeq());
    };
    Set4.intersect = function intersect(sets) {
      sets = Collection(sets).toArray();
      return sets.length ? SetPrototype.intersect.apply(Set4(sets.pop()), sets) : emptySet();
    };
    Set4.union = function union(sets) {
      sets = Collection(sets).toArray();
      return sets.length ? SetPrototype.union.apply(Set4(sets.pop()), sets) : emptySet();
    };
    Set4.prototype.toString = function toString9() {
      return this.__toString("Set {", "}");
    };
    Set4.prototype.has = function has9(value) {
      return this._map.has(value);
    };
    Set4.prototype.add = function add(value) {
      return updateSet(this, this._map.set(value, value));
    };
    Set4.prototype.remove = function remove7(value) {
      return updateSet(this, this._map.remove(value));
    };
    Set4.prototype.clear = function clear3() {
      return updateSet(this, this._map.clear());
    };
    Set4.prototype.map = function map5(mapper, context) {
      var this$1$1 = this;
      var didChanges = false;
      var newMap = updateSet(
        this,
        this._map.mapEntries(function(ref) {
          var v4 = ref[1];
          var mapped = mapper.call(context, v4, v4, this$1$1);
          if (mapped !== v4) {
            didChanges = true;
          }
          return [mapped, mapped];
        }, context)
      );
      return didChanges ? newMap : this;
    };
    Set4.prototype.union = function union() {
      var iters = [], len = arguments.length;
      while (len--)
        iters[len] = arguments[len];
      iters = iters.filter(function(x5) {
        return x5.size !== 0;
      });
      if (iters.length === 0) {
        return this;
      }
      if (this.size === 0 && !this.__ownerID && iters.length === 1) {
        return this.constructor(iters[0]);
      }
      return this.withMutations(function(set7) {
        for (var ii2 = 0; ii2 < iters.length; ii2++) {
          if (typeof iters[ii2] === "string") {
            set7.add(iters[ii2]);
          } else {
            SetCollection3(iters[ii2]).forEach(function(value) {
              return set7.add(value);
            });
          }
        }
      });
    };
    Set4.prototype.intersect = function intersect() {
      var iters = [], len = arguments.length;
      while (len--)
        iters[len] = arguments[len];
      if (iters.length === 0) {
        return this;
      }
      iters = iters.map(function(iter) {
        return SetCollection3(iter);
      });
      var toRemove = [];
      this.forEach(function(value) {
        if (!iters.every(function(iter) {
          return iter.includes(value);
        })) {
          toRemove.push(value);
        }
      });
      return this.withMutations(function(set7) {
        toRemove.forEach(function(value) {
          set7.remove(value);
        });
      });
    };
    Set4.prototype.subtract = function subtract() {
      var iters = [], len = arguments.length;
      while (len--)
        iters[len] = arguments[len];
      if (iters.length === 0) {
        return this;
      }
      iters = iters.map(function(iter) {
        return SetCollection3(iter);
      });
      var toRemove = [];
      this.forEach(function(value) {
        if (iters.some(function(iter) {
          return iter.includes(value);
        })) {
          toRemove.push(value);
        }
      });
      return this.withMutations(function(set7) {
        toRemove.forEach(function(value) {
          set7.remove(value);
        });
      });
    };
    Set4.prototype.sort = function sort3(comparator) {
      return OrderedSet(sortFactory(this, comparator));
    };
    Set4.prototype.sortBy = function sortBy3(mapper, comparator) {
      return OrderedSet(sortFactory(this, comparator, mapper));
    };
    Set4.prototype.wasAltered = function wasAltered5() {
      return this._map.wasAltered();
    };
    Set4.prototype.__iterate = function __iterate3(fn2, reverse5) {
      var this$1$1 = this;
      return this._map.__iterate(function(k4) {
        return fn2(k4, k4, this$1$1);
      }, reverse5);
    };
    Set4.prototype.__iterator = function __iterator3(type2, reverse5) {
      return this._map.__iterator(type2, reverse5);
    };
    Set4.prototype.__ensureOwner = function __ensureOwner3(ownerID) {
      if (ownerID === this.__ownerID) {
        return this;
      }
      var newMap = this._map.__ensureOwner(ownerID);
      if (!ownerID) {
        if (this.size === 0) {
          return this.__empty();
        }
        this.__ownerID = ownerID;
        this._map = newMap;
        return this;
      }
      return this.__make(newMap, ownerID);
    };
    return Set4;
  }(SetCollection);
  Set2.isSet = isSet;
  var SetPrototype = Set2.prototype;
  SetPrototype[IS_SET_SYMBOL] = true;
  SetPrototype[DELETE] = SetPrototype.remove;
  SetPrototype.merge = SetPrototype.concat = SetPrototype.union;
  SetPrototype.withMutations = withMutations;
  SetPrototype.asImmutable = asImmutable;
  SetPrototype["@@transducer/init"] = SetPrototype.asMutable = asMutable;
  SetPrototype["@@transducer/step"] = function(result, arr) {
    return result.add(arr);
  };
  SetPrototype["@@transducer/result"] = function(obj) {
    return obj.asImmutable();
  };
  SetPrototype.__empty = emptySet;
  SetPrototype.__make = makeSet;
  function updateSet(set7, newMap) {
    if (set7.__ownerID) {
      set7.size = newMap.size;
      set7._map = newMap;
      return set7;
    }
    return newMap === set7._map ? set7 : newMap.size === 0 ? set7.__empty() : set7.__make(newMap);
  }
  function makeSet(map5, ownerID) {
    var set7 = Object.create(SetPrototype);
    set7.size = map5 ? map5.size : 0;
    set7._map = map5;
    set7.__ownerID = ownerID;
    return set7;
  }
  var EMPTY_SET;
  function emptySet() {
    return EMPTY_SET || (EMPTY_SET = makeSet(emptyMap()));
  }
  var Range = /* @__PURE__ */ function(IndexedSeq3) {
    function Range3(start2, end, step) {
      if (step === void 0)
        step = 1;
      if (!(this instanceof Range3)) {
        return new Range3(start2, end, step);
      }
      invariant(step !== 0, "Cannot step a Range by 0");
      invariant(
        start2 !== void 0,
        "You must define a start value when using Range"
      );
      invariant(
        end !== void 0,
        "You must define an end value when using Range"
      );
      step = Math.abs(step);
      if (end < start2) {
        step = -step;
      }
      this._start = start2;
      this._end = end;
      this._step = step;
      this.size = Math.max(0, Math.ceil((end - start2) / step - 1) + 1);
      if (this.size === 0) {
        if (EMPTY_RANGE) {
          return EMPTY_RANGE;
        }
        EMPTY_RANGE = this;
      }
    }
    if (IndexedSeq3)
      Range3.__proto__ = IndexedSeq3;
    Range3.prototype = Object.create(IndexedSeq3 && IndexedSeq3.prototype);
    Range3.prototype.constructor = Range3;
    Range3.prototype.toString = function toString9() {
      if (this.size === 0) {
        return "Range []";
      }
      return "Range [ " + this._start + "..." + this._end + (this._step !== 1 ? " by " + this._step : "") + " ]";
    };
    Range3.prototype.get = function get24(index, notSetValue) {
      return this.has(index) ? this._start + wrapIndex(this, index) * this._step : notSetValue;
    };
    Range3.prototype.includes = function includes5(searchValue) {
      var possibleIndex = (searchValue - this._start) / this._step;
      return possibleIndex >= 0 && possibleIndex < this.size && possibleIndex === Math.floor(possibleIndex);
    };
    Range3.prototype.slice = function slice7(begin, end) {
      if (wholeSlice(begin, end, this.size)) {
        return this;
      }
      begin = resolveBegin(begin, this.size);
      end = resolveEnd(end, this.size);
      if (end <= begin) {
        return new Range3(0, 0);
      }
      return new Range3(
        this.get(begin, this._end),
        this.get(end, this._end),
        this._step
      );
    };
    Range3.prototype.indexOf = function indexOf3(searchValue) {
      var offsetValue = searchValue - this._start;
      if (offsetValue % this._step === 0) {
        var index = offsetValue / this._step;
        if (index >= 0 && index < this.size) {
          return index;
        }
      }
      return -1;
    };
    Range3.prototype.lastIndexOf = function lastIndexOf3(searchValue) {
      return this.indexOf(searchValue);
    };
    Range3.prototype.__iterate = function __iterate3(fn2, reverse5) {
      var size2 = this.size;
      var step = this._step;
      var value = reverse5 ? this._start + (size2 - 1) * step : this._start;
      var i5 = 0;
      while (i5 !== size2) {
        if (fn2(value, reverse5 ? size2 - ++i5 : i5++, this) === false) {
          break;
        }
        value += reverse5 ? -step : step;
      }
      return i5;
    };
    Range3.prototype.__iterator = function __iterator3(type2, reverse5) {
      var size2 = this.size;
      var step = this._step;
      var value = reverse5 ? this._start + (size2 - 1) * step : this._start;
      var i5 = 0;
      return new Iterator(function() {
        if (i5 === size2) {
          return iteratorDone();
        }
        var v4 = value;
        value += reverse5 ? -step : step;
        return iteratorValue(type2, reverse5 ? size2 - ++i5 : i5++, v4);
      });
    };
    Range3.prototype.equals = function equals5(other) {
      return other instanceof Range3 ? this._start === other._start && this._end === other._end && this._step === other._step : deepEqual(this, other);
    };
    return Range3;
  }(IndexedSeq);
  var EMPTY_RANGE;
  function getIn$1(collection, searchKeyPath, notSetValue) {
    var keyPath = coerceKeyPath(searchKeyPath);
    var i5 = 0;
    while (i5 !== keyPath.length) {
      collection = get(collection, keyPath[i5++], NOT_SET);
      if (collection === NOT_SET) {
        return notSetValue;
      }
    }
    return collection;
  }
  function getIn(searchKeyPath, notSetValue) {
    return getIn$1(this, searchKeyPath, notSetValue);
  }
  function hasIn$1(collection, keyPath) {
    return getIn$1(collection, keyPath, NOT_SET) !== NOT_SET;
  }
  function hasIn(searchKeyPath) {
    return hasIn$1(this, searchKeyPath);
  }
  function toObject() {
    assertNotInfinite(this.size);
    var object = {};
    this.__iterate(function(v4, k4) {
      object[k4] = v4;
    });
    return object;
  }
  Collection.Iterator = Iterator;
  mixin(Collection, {
    // ### Conversion to other types
    toArray: function toArray() {
      assertNotInfinite(this.size);
      var array3 = new Array(this.size || 0);
      var useTuples = isKeyed(this);
      var i5 = 0;
      this.__iterate(function(v4, k4) {
        array3[i5++] = useTuples ? [k4, v4] : v4;
      });
      return array3;
    },
    toIndexedSeq: function toIndexedSeq() {
      return new ToIndexedSequence(this);
    },
    toJS: function toJS$1() {
      return toJS(this);
    },
    toKeyedSeq: function toKeyedSeq() {
      return new ToKeyedSequence(this, true);
    },
    toMap: function toMap() {
      return Map2(this.toKeyedSeq());
    },
    toObject,
    toOrderedMap: function toOrderedMap() {
      return OrderedMap(this.toKeyedSeq());
    },
    toOrderedSet: function toOrderedSet() {
      return OrderedSet(isKeyed(this) ? this.valueSeq() : this);
    },
    toSet: function toSet() {
      return Set2(isKeyed(this) ? this.valueSeq() : this);
    },
    toSetSeq: function toSetSeq() {
      return new ToSetSequence(this);
    },
    toSeq: function toSeq() {
      return isIndexed(this) ? this.toIndexedSeq() : isKeyed(this) ? this.toKeyedSeq() : this.toSetSeq();
    },
    toStack: function toStack() {
      return Stack(isKeyed(this) ? this.valueSeq() : this);
    },
    toList: function toList() {
      return List(isKeyed(this) ? this.valueSeq() : this);
    },
    // ### Common JavaScript methods and properties
    toString: function toString3() {
      return "[Collection]";
    },
    __toString: function __toString(head, tail) {
      if (this.size === 0) {
        return head + tail;
      }
      return head + " " + this.toSeq().map(this.__toStringMapper).join(", ") + " " + tail;
    },
    // ### ES6 Collection methods (ES6 Array and Map)
    concat: function concat() {
      var values3 = [], len = arguments.length;
      while (len--)
        values3[len] = arguments[len];
      return reify(this, concatFactory(this, values3));
    },
    includes: function includes(searchValue) {
      return this.some(function(value) {
        return is(value, searchValue);
      });
    },
    entries: function entries() {
      return this.__iterator(ITERATE_ENTRIES);
    },
    every: function every(predicate, context) {
      assertNotInfinite(this.size);
      var returnValue = true;
      this.__iterate(function(v4, k4, c4) {
        if (!predicate.call(context, v4, k4, c4)) {
          returnValue = false;
          return false;
        }
      });
      return returnValue;
    },
    filter: function filter(predicate, context) {
      return reify(this, filterFactory(this, predicate, context, true));
    },
    partition: function partition(predicate, context) {
      return partitionFactory(this, predicate, context);
    },
    find: function find(predicate, context, notSetValue) {
      var entry = this.findEntry(predicate, context);
      return entry ? entry[1] : notSetValue;
    },
    forEach: function forEach(sideEffect, context) {
      assertNotInfinite(this.size);
      return this.__iterate(context ? sideEffect.bind(context) : sideEffect);
    },
    join: function join(separator) {
      assertNotInfinite(this.size);
      separator = separator !== void 0 ? "" + separator : ",";
      var joined = "";
      var isFirst = true;
      this.__iterate(function(v4) {
        isFirst ? isFirst = false : joined += separator;
        joined += v4 !== null && v4 !== void 0 ? v4.toString() : "";
      });
      return joined;
    },
    keys: function keys() {
      return this.__iterator(ITERATE_KEYS);
    },
    map: function map(mapper, context) {
      return reify(this, mapFactory(this, mapper, context));
    },
    reduce: function reduce$1(reducer, initialReduction, context) {
      return reduce(
        this,
        reducer,
        initialReduction,
        context,
        arguments.length < 2,
        false
      );
    },
    reduceRight: function reduceRight(reducer, initialReduction, context) {
      return reduce(
        this,
        reducer,
        initialReduction,
        context,
        arguments.length < 2,
        true
      );
    },
    reverse: function reverse() {
      return reify(this, reverseFactory(this, true));
    },
    slice: function slice(begin, end) {
      return reify(this, sliceFactory(this, begin, end, true));
    },
    some: function some(predicate, context) {
      assertNotInfinite(this.size);
      var returnValue = false;
      this.__iterate(function(v4, k4, c4) {
        if (predicate.call(context, v4, k4, c4)) {
          returnValue = true;
          return false;
        }
      });
      return returnValue;
    },
    sort: function sort(comparator) {
      return reify(this, sortFactory(this, comparator));
    },
    values: function values() {
      return this.__iterator(ITERATE_VALUES);
    },
    // ### More sequential methods
    butLast: function butLast() {
      return this.slice(0, -1);
    },
    isEmpty: function isEmpty() {
      return this.size !== void 0 ? this.size === 0 : !this.some(function() {
        return true;
      });
    },
    count: function count(predicate, context) {
      return ensureSize(
        predicate ? this.toSeq().filter(predicate, context) : this
      );
    },
    countBy: function countBy(grouper, context) {
      return countByFactory(this, grouper, context);
    },
    equals: function equals(other) {
      return deepEqual(this, other);
    },
    entrySeq: function entrySeq() {
      var collection = this;
      if (collection._cache) {
        return new ArraySeq(collection._cache);
      }
      var entriesSequence = collection.toSeq().map(entryMapper).toIndexedSeq();
      entriesSequence.fromEntrySeq = function() {
        return collection.toSeq();
      };
      return entriesSequence;
    },
    filterNot: function filterNot(predicate, context) {
      return this.filter(not(predicate), context);
    },
    findEntry: function findEntry(predicate, context, notSetValue) {
      var found = notSetValue;
      this.__iterate(function(v4, k4, c4) {
        if (predicate.call(context, v4, k4, c4)) {
          found = [k4, v4];
          return false;
        }
      });
      return found;
    },
    findKey: function findKey(predicate, context) {
      var entry = this.findEntry(predicate, context);
      return entry && entry[0];
    },
    findLast: function findLast(predicate, context, notSetValue) {
      return this.toKeyedSeq().reverse().find(predicate, context, notSetValue);
    },
    findLastEntry: function findLastEntry(predicate, context, notSetValue) {
      return this.toKeyedSeq().reverse().findEntry(predicate, context, notSetValue);
    },
    findLastKey: function findLastKey(predicate, context) {
      return this.toKeyedSeq().reverse().findKey(predicate, context);
    },
    first: function first(notSetValue) {
      return this.find(returnTrue, null, notSetValue);
    },
    flatMap: function flatMap(mapper, context) {
      return reify(this, flatMapFactory(this, mapper, context));
    },
    flatten: function flatten(depth) {
      return reify(this, flattenFactory(this, depth, true));
    },
    fromEntrySeq: function fromEntrySeq() {
      return new FromEntriesSequence(this);
    },
    get: function get7(searchKey, notSetValue) {
      return this.find(function(_3, key) {
        return is(key, searchKey);
      }, void 0, notSetValue);
    },
    getIn,
    groupBy: function groupBy(grouper, context) {
      return groupByFactory(this, grouper, context);
    },
    has: function has2(searchKey) {
      return this.get(searchKey, NOT_SET) !== NOT_SET;
    },
    hasIn,
    isSubset: function isSubset(iter) {
      iter = typeof iter.includes === "function" ? iter : Collection(iter);
      return this.every(function(value) {
        return iter.includes(value);
      });
    },
    isSuperset: function isSuperset(iter) {
      iter = typeof iter.isSubset === "function" ? iter : Collection(iter);
      return iter.isSubset(this);
    },
    keyOf: function keyOf(searchValue) {
      return this.findKey(function(value) {
        return is(value, searchValue);
      });
    },
    keySeq: function keySeq() {
      return this.toSeq().map(keyMapper).toIndexedSeq();
    },
    last: function last(notSetValue) {
      return this.toSeq().reverse().first(notSetValue);
    },
    lastKeyOf: function lastKeyOf(searchValue) {
      return this.toKeyedSeq().reverse().keyOf(searchValue);
    },
    max: function max(comparator) {
      return maxFactory(this, comparator);
    },
    maxBy: function maxBy(mapper, comparator) {
      return maxFactory(this, comparator, mapper);
    },
    min: function min(comparator) {
      return maxFactory(
        this,
        comparator ? neg(comparator) : defaultNegComparator
      );
    },
    minBy: function minBy(mapper, comparator) {
      return maxFactory(
        this,
        comparator ? neg(comparator) : defaultNegComparator,
        mapper
      );
    },
    rest: function rest() {
      return this.slice(1);
    },
    skip: function skip(amount) {
      return amount === 0 ? this : this.slice(Math.max(0, amount));
    },
    skipLast: function skipLast(amount) {
      return amount === 0 ? this : this.slice(0, -Math.max(0, amount));
    },
    skipWhile: function skipWhile(predicate, context) {
      return reify(this, skipWhileFactory(this, predicate, context, true));
    },
    skipUntil: function skipUntil(predicate, context) {
      return this.skipWhile(not(predicate), context);
    },
    sortBy: function sortBy(mapper, comparator) {
      return reify(this, sortFactory(this, comparator, mapper));
    },
    take: function take(amount) {
      return this.slice(0, Math.max(0, amount));
    },
    takeLast: function takeLast(amount) {
      return this.slice(-Math.max(0, amount));
    },
    takeWhile: function takeWhile(predicate, context) {
      return reify(this, takeWhileFactory(this, predicate, context));
    },
    takeUntil: function takeUntil(predicate, context) {
      return this.takeWhile(not(predicate), context);
    },
    update: function update7(fn2) {
      return fn2(this);
    },
    valueSeq: function valueSeq() {
      return this.toIndexedSeq();
    },
    // ### Hashable Object
    hashCode: function hashCode() {
      return this.__hash || (this.__hash = hashCollection(this));
    }
    // ### Internal
    // abstract __iterate(fn, reverse)
    // abstract __iterator(type, reverse)
  });
  var CollectionPrototype = Collection.prototype;
  CollectionPrototype[IS_COLLECTION_SYMBOL] = true;
  CollectionPrototype[ITERATOR_SYMBOL] = CollectionPrototype.values;
  CollectionPrototype.toJSON = CollectionPrototype.toArray;
  CollectionPrototype.__toStringMapper = quoteString;
  CollectionPrototype.inspect = CollectionPrototype.toSource = function() {
    return this.toString();
  };
  CollectionPrototype.chain = CollectionPrototype.flatMap;
  CollectionPrototype.contains = CollectionPrototype.includes;
  mixin(KeyedCollection, {
    // ### More sequential methods
    flip: function flip() {
      return reify(this, flipFactory(this));
    },
    mapEntries: function mapEntries(mapper, context) {
      var this$1$1 = this;
      var iterations = 0;
      return reify(
        this,
        this.toSeq().map(function(v4, k4) {
          return mapper.call(context, [k4, v4], iterations++, this$1$1);
        }).fromEntrySeq()
      );
    },
    mapKeys: function mapKeys(mapper, context) {
      var this$1$1 = this;
      return reify(
        this,
        this.toSeq().flip().map(function(k4, v4) {
          return mapper.call(context, k4, v4, this$1$1);
        }).flip()
      );
    }
  });
  var KeyedCollectionPrototype = KeyedCollection.prototype;
  KeyedCollectionPrototype[IS_KEYED_SYMBOL] = true;
  KeyedCollectionPrototype[ITERATOR_SYMBOL] = CollectionPrototype.entries;
  KeyedCollectionPrototype.toJSON = toObject;
  KeyedCollectionPrototype.__toStringMapper = function(v4, k4) {
    return quoteString(k4) + ": " + quoteString(v4);
  };
  mixin(IndexedCollection, {
    // ### Conversion to other types
    toKeyedSeq: function toKeyedSeq2() {
      return new ToKeyedSequence(this, false);
    },
    // ### ES6 Collection methods (ES6 Array and Map)
    filter: function filter2(predicate, context) {
      return reify(this, filterFactory(this, predicate, context, false));
    },
    findIndex: function findIndex(predicate, context) {
      var entry = this.findEntry(predicate, context);
      return entry ? entry[0] : -1;
    },
    indexOf: function indexOf(searchValue) {
      var key = this.keyOf(searchValue);
      return key === void 0 ? -1 : key;
    },
    lastIndexOf: function lastIndexOf(searchValue) {
      var key = this.lastKeyOf(searchValue);
      return key === void 0 ? -1 : key;
    },
    reverse: function reverse2() {
      return reify(this, reverseFactory(this, false));
    },
    slice: function slice2(begin, end) {
      return reify(this, sliceFactory(this, begin, end, false));
    },
    splice: function splice(index, removeNum) {
      var numArgs = arguments.length;
      removeNum = Math.max(removeNum || 0, 0);
      if (numArgs === 0 || numArgs === 2 && !removeNum) {
        return this;
      }
      index = resolveBegin(index, index < 0 ? this.count() : this.size);
      var spliced = this.slice(0, index);
      return reify(
        this,
        numArgs === 1 ? spliced : spliced.concat(arrCopy(arguments, 2), this.slice(index + removeNum))
      );
    },
    // ### More collection methods
    findLastIndex: function findLastIndex(predicate, context) {
      var entry = this.findLastEntry(predicate, context);
      return entry ? entry[0] : -1;
    },
    first: function first2(notSetValue) {
      return this.get(0, notSetValue);
    },
    flatten: function flatten2(depth) {
      return reify(this, flattenFactory(this, depth, false));
    },
    get: function get8(index, notSetValue) {
      index = wrapIndex(this, index);
      return index < 0 || this.size === Infinity || this.size !== void 0 && index > this.size ? notSetValue : this.find(function(_3, key) {
        return key === index;
      }, void 0, notSetValue);
    },
    has: function has3(index) {
      index = wrapIndex(this, index);
      return index >= 0 && (this.size !== void 0 ? this.size === Infinity || index < this.size : this.indexOf(index) !== -1);
    },
    interpose: function interpose(separator) {
      return reify(this, interposeFactory(this, separator));
    },
    interleave: function interleave() {
      var collections = [this].concat(arrCopy(arguments));
      var zipped = zipWithFactory(this.toSeq(), IndexedSeq.of, collections);
      var interleaved = zipped.flatten(true);
      if (zipped.size) {
        interleaved.size = zipped.size * collections.length;
      }
      return reify(this, interleaved);
    },
    keySeq: function keySeq2() {
      return Range(0, this.size);
    },
    last: function last2(notSetValue) {
      return this.get(-1, notSetValue);
    },
    skipWhile: function skipWhile2(predicate, context) {
      return reify(this, skipWhileFactory(this, predicate, context, false));
    },
    zip: function zip() {
      var collections = [this].concat(arrCopy(arguments));
      return reify(this, zipWithFactory(this, defaultZipper, collections));
    },
    zipAll: function zipAll() {
      var collections = [this].concat(arrCopy(arguments));
      return reify(this, zipWithFactory(this, defaultZipper, collections, true));
    },
    zipWith: function zipWith(zipper) {
      var collections = arrCopy(arguments);
      collections[0] = this;
      return reify(this, zipWithFactory(this, zipper, collections));
    }
  });
  var IndexedCollectionPrototype = IndexedCollection.prototype;
  IndexedCollectionPrototype[IS_INDEXED_SYMBOL] = true;
  IndexedCollectionPrototype[IS_ORDERED_SYMBOL] = true;
  mixin(SetCollection, {
    // ### ES6 Collection methods (ES6 Array and Map)
    get: function get9(value, notSetValue) {
      return this.has(value) ? value : notSetValue;
    },
    includes: function includes2(value) {
      return this.has(value);
    },
    // ### More sequential methods
    keySeq: function keySeq3() {
      return this.valueSeq();
    }
  });
  var SetCollectionPrototype = SetCollection.prototype;
  SetCollectionPrototype.has = CollectionPrototype.includes;
  SetCollectionPrototype.contains = SetCollectionPrototype.includes;
  SetCollectionPrototype.keys = SetCollectionPrototype.values;
  mixin(KeyedSeq, KeyedCollectionPrototype);
  mixin(IndexedSeq, IndexedCollectionPrototype);
  mixin(SetSeq, SetCollectionPrototype);
  function reduce(collection, reducer, reduction, context, useFirst, reverse5) {
    assertNotInfinite(collection.size);
    collection.__iterate(function(v4, k4, c4) {
      if (useFirst) {
        useFirst = false;
        reduction = v4;
      } else {
        reduction = reducer.call(context, reduction, v4, k4, c4);
      }
    }, reverse5);
    return reduction;
  }
  function keyMapper(v4, k4) {
    return k4;
  }
  function entryMapper(v4, k4) {
    return [k4, v4];
  }
  function not(predicate) {
    return function() {
      return !predicate.apply(this, arguments);
    };
  }
  function neg(predicate) {
    return function() {
      return -predicate.apply(this, arguments);
    };
  }
  function defaultZipper() {
    return arrCopy(arguments);
  }
  function defaultNegComparator(a5, b2) {
    return a5 < b2 ? 1 : a5 > b2 ? -1 : 0;
  }
  function hashCollection(collection) {
    if (collection.size === Infinity) {
      return 0;
    }
    var ordered = isOrdered(collection);
    var keyed = isKeyed(collection);
    var h4 = ordered ? 1 : 0;
    collection.__iterate(
      keyed ? ordered ? function(v4, k4) {
        h4 = 31 * h4 + hashMerge(hash(v4), hash(k4)) | 0;
      } : function(v4, k4) {
        h4 = h4 + hashMerge(hash(v4), hash(k4)) | 0;
      } : ordered ? function(v4) {
        h4 = 31 * h4 + hash(v4) | 0;
      } : function(v4) {
        h4 = h4 + hash(v4) | 0;
      }
    );
    return murmurHashOfSize(collection.size, h4);
  }
  function murmurHashOfSize(size2, h4) {
    h4 = imul(h4, 3432918353);
    h4 = imul(h4 << 15 | h4 >>> -15, 461845907);
    h4 = imul(h4 << 13 | h4 >>> -13, 5);
    h4 = (h4 + 3864292196 | 0) ^ size2;
    h4 = imul(h4 ^ h4 >>> 16, 2246822507);
    h4 = imul(h4 ^ h4 >>> 13, 3266489909);
    h4 = smi(h4 ^ h4 >>> 16);
    return h4;
  }
  function hashMerge(a5, b2) {
    return a5 ^ b2 + 2654435769 + (a5 << 6) + (a5 >> 2) | 0;
  }
  var OrderedSet = /* @__PURE__ */ function(Set4) {
    function OrderedSet3(value) {
      return value === void 0 || value === null ? emptyOrderedSet() : isOrderedSet(value) ? value : emptyOrderedSet().withMutations(function(set7) {
        var iter = SetCollection(value);
        assertNotInfinite(iter.size);
        iter.forEach(function(v4) {
          return set7.add(v4);
        });
      });
    }
    if (Set4)
      OrderedSet3.__proto__ = Set4;
    OrderedSet3.prototype = Object.create(Set4 && Set4.prototype);
    OrderedSet3.prototype.constructor = OrderedSet3;
    OrderedSet3.of = function of() {
      return this(arguments);
    };
    OrderedSet3.fromKeys = function fromKeys(value) {
      return this(KeyedCollection(value).keySeq());
    };
    OrderedSet3.prototype.toString = function toString9() {
      return this.__toString("OrderedSet {", "}");
    };
    return OrderedSet3;
  }(Set2);
  OrderedSet.isOrderedSet = isOrderedSet;
  var OrderedSetPrototype = OrderedSet.prototype;
  OrderedSetPrototype[IS_ORDERED_SYMBOL] = true;
  OrderedSetPrototype.zip = IndexedCollectionPrototype.zip;
  OrderedSetPrototype.zipWith = IndexedCollectionPrototype.zipWith;
  OrderedSetPrototype.zipAll = IndexedCollectionPrototype.zipAll;
  OrderedSetPrototype.__empty = emptyOrderedSet;
  OrderedSetPrototype.__make = makeOrderedSet;
  function makeOrderedSet(map5, ownerID) {
    var set7 = Object.create(OrderedSetPrototype);
    set7.size = map5 ? map5.size : 0;
    set7._map = map5;
    set7.__ownerID = ownerID;
    return set7;
  }
  var EMPTY_ORDERED_SET;
  function emptyOrderedSet() {
    return EMPTY_ORDERED_SET || (EMPTY_ORDERED_SET = makeOrderedSet(emptyOrderedMap()));
  }
  function throwOnInvalidDefaultValues(defaultValues) {
    if (isRecord(defaultValues)) {
      throw new Error(
        "Can not call `Record` with an immutable Record as default values. Use a plain javascript object instead."
      );
    }
    if (isImmutable(defaultValues)) {
      throw new Error(
        "Can not call `Record` with an immutable Collection as default values. Use a plain javascript object instead."
      );
    }
    if (defaultValues === null || typeof defaultValues !== "object") {
      throw new Error(
        "Can not call `Record` with a non-object as default values. Use a plain javascript object instead."
      );
    }
  }
  var Record = function Record2(defaultValues, name) {
    var hasInitialized;
    throwOnInvalidDefaultValues(defaultValues);
    var RecordType = function Record5(values3) {
      var this$1$1 = this;
      if (values3 instanceof RecordType) {
        return values3;
      }
      if (!(this instanceof RecordType)) {
        return new RecordType(values3);
      }
      if (!hasInitialized) {
        hasInitialized = true;
        var keys3 = Object.keys(defaultValues);
        var indices = RecordTypePrototype._indices = {};
        RecordTypePrototype._name = name;
        RecordTypePrototype._keys = keys3;
        RecordTypePrototype._defaultValues = defaultValues;
        for (var i5 = 0; i5 < keys3.length; i5++) {
          var propName = keys3[i5];
          indices[propName] = i5;
          if (RecordTypePrototype[propName]) {
            typeof console === "object" && console.warn && console.warn(
              "Cannot define " + recordName(this) + ' with property "' + propName + '" since that property name is part of the Record API.'
            );
          } else {
            setProp(RecordTypePrototype, propName);
          }
        }
      }
      this.__ownerID = void 0;
      this._values = List().withMutations(function(l5) {
        l5.setSize(this$1$1._keys.length);
        KeyedCollection(values3).forEach(function(v4, k4) {
          l5.set(this$1$1._indices[k4], v4 === this$1$1._defaultValues[k4] ? void 0 : v4);
        });
      });
      return this;
    };
    var RecordTypePrototype = RecordType.prototype = Object.create(RecordPrototype);
    RecordTypePrototype.constructor = RecordType;
    if (name) {
      RecordType.displayName = name;
    }
    return RecordType;
  };
  Record.prototype.toString = function toString4() {
    var str = recordName(this) + " { ";
    var keys3 = this._keys;
    var k4;
    for (var i5 = 0, l5 = keys3.length; i5 !== l5; i5++) {
      k4 = keys3[i5];
      str += (i5 ? ", " : "") + k4 + ": " + quoteString(this.get(k4));
    }
    return str + " }";
  };
  Record.prototype.equals = function equals2(other) {
    return this === other || isRecord(other) && recordSeq(this).equals(recordSeq(other));
  };
  Record.prototype.hashCode = function hashCode2() {
    return recordSeq(this).hashCode();
  };
  Record.prototype.has = function has4(k4) {
    return this._indices.hasOwnProperty(k4);
  };
  Record.prototype.get = function get10(k4, notSetValue) {
    if (!this.has(k4)) {
      return notSetValue;
    }
    var index = this._indices[k4];
    var value = this._values.get(index);
    return value === void 0 ? this._defaultValues[k4] : value;
  };
  Record.prototype.set = function set2(k4, v4) {
    if (this.has(k4)) {
      var newValues = this._values.set(
        this._indices[k4],
        v4 === this._defaultValues[k4] ? void 0 : v4
      );
      if (newValues !== this._values && !this.__ownerID) {
        return makeRecord(this, newValues);
      }
    }
    return this;
  };
  Record.prototype.remove = function remove2(k4) {
    return this.set(k4);
  };
  Record.prototype.clear = function clear() {
    var newValues = this._values.clear().setSize(this._keys.length);
    return this.__ownerID ? this : makeRecord(this, newValues);
  };
  Record.prototype.wasAltered = function wasAltered2() {
    return this._values.wasAltered();
  };
  Record.prototype.toSeq = function toSeq2() {
    return recordSeq(this);
  };
  Record.prototype.toJS = function toJS$12() {
    return toJS(this);
  };
  Record.prototype.entries = function entries2() {
    return this.__iterator(ITERATE_ENTRIES);
  };
  Record.prototype.__iterator = function __iterator(type2, reverse5) {
    return recordSeq(this).__iterator(type2, reverse5);
  };
  Record.prototype.__iterate = function __iterate(fn2, reverse5) {
    return recordSeq(this).__iterate(fn2, reverse5);
  };
  Record.prototype.__ensureOwner = function __ensureOwner(ownerID) {
    if (ownerID === this.__ownerID) {
      return this;
    }
    var newValues = this._values.__ensureOwner(ownerID);
    if (!ownerID) {
      this.__ownerID = ownerID;
      this._values = newValues;
      return this;
    }
    return makeRecord(this, newValues, ownerID);
  };
  Record.isRecord = isRecord;
  Record.getDescriptiveName = recordName;
  var RecordPrototype = Record.prototype;
  RecordPrototype[IS_RECORD_SYMBOL] = true;
  RecordPrototype[DELETE] = RecordPrototype.remove;
  RecordPrototype.deleteIn = RecordPrototype.removeIn = deleteIn;
  RecordPrototype.getIn = getIn;
  RecordPrototype.hasIn = CollectionPrototype.hasIn;
  RecordPrototype.merge = merge$1;
  RecordPrototype.mergeWith = mergeWith$1;
  RecordPrototype.mergeIn = mergeIn;
  RecordPrototype.mergeDeep = mergeDeep;
  RecordPrototype.mergeDeepWith = mergeDeepWith;
  RecordPrototype.mergeDeepIn = mergeDeepIn;
  RecordPrototype.setIn = setIn;
  RecordPrototype.update = update;
  RecordPrototype.updateIn = updateIn;
  RecordPrototype.withMutations = withMutations;
  RecordPrototype.asMutable = asMutable;
  RecordPrototype.asImmutable = asImmutable;
  RecordPrototype[ITERATOR_SYMBOL] = RecordPrototype.entries;
  RecordPrototype.toJSON = RecordPrototype.toObject = CollectionPrototype.toObject;
  RecordPrototype.inspect = RecordPrototype.toSource = function() {
    return this.toString();
  };
  function makeRecord(likeRecord, values3, ownerID) {
    var record = Object.create(Object.getPrototypeOf(likeRecord));
    record._values = values3;
    record.__ownerID = ownerID;
    return record;
  }
  function recordName(record) {
    return record.constructor.displayName || record.constructor.name || "Record";
  }
  function recordSeq(record) {
    return keyedSeqFromValue(record._keys.map(function(k4) {
      return [k4, record.get(k4)];
    }));
  }
  function setProp(prototype, name) {
    try {
      Object.defineProperty(prototype, name, {
        get: function() {
          return this.get(name);
        },
        set: function(value) {
          invariant(this.__ownerID, "Cannot set on an immutable record.");
          this.set(name, value);
        }
      });
    } catch (error) {
    }
  }

  // ../node_modules/d3-array/src/ascending.js
  function ascending(a5, b2) {
    return a5 == null || b2 == null ? NaN : a5 < b2 ? -1 : a5 > b2 ? 1 : a5 >= b2 ? 0 : NaN;
  }

  // ../node_modules/d3-array/src/descending.js
  function descending(a5, b2) {
    return a5 == null || b2 == null ? NaN : b2 < a5 ? -1 : b2 > a5 ? 1 : b2 >= a5 ? 0 : NaN;
  }

  // ../node_modules/d3-array/src/bisector.js
  function bisector(f4) {
    let compare1, compare2, delta;
    if (f4.length !== 2) {
      compare1 = ascending;
      compare2 = (d4, x5) => ascending(f4(d4), x5);
      delta = (d4, x5) => f4(d4) - x5;
    } else {
      compare1 = f4 === ascending || f4 === descending ? f4 : zero;
      compare2 = f4;
      delta = f4;
    }
    function left2(a5, x5, lo2 = 0, hi2 = a5.length) {
      if (lo2 < hi2) {
        if (compare1(x5, x5) !== 0)
          return hi2;
        do {
          const mid = lo2 + hi2 >>> 1;
          if (compare2(a5[mid], x5) < 0)
            lo2 = mid + 1;
          else
            hi2 = mid;
        } while (lo2 < hi2);
      }
      return lo2;
    }
    function right2(a5, x5, lo2 = 0, hi2 = a5.length) {
      if (lo2 < hi2) {
        if (compare1(x5, x5) !== 0)
          return hi2;
        do {
          const mid = lo2 + hi2 >>> 1;
          if (compare2(a5[mid], x5) <= 0)
            lo2 = mid + 1;
          else
            hi2 = mid;
        } while (lo2 < hi2);
      }
      return lo2;
    }
    function center2(a5, x5, lo2 = 0, hi2 = a5.length) {
      const i5 = left2(a5, x5, lo2, hi2 - 1);
      return i5 > lo2 && delta(a5[i5 - 1], x5) > -delta(a5[i5], x5) ? i5 - 1 : i5;
    }
    return { left: left2, center: center2, right: right2 };
  }
  function zero() {
    return 0;
  }

  // ../node_modules/d3-array/src/number.js
  function number(x5) {
    return x5 === null ? NaN : +x5;
  }

  // ../node_modules/d3-array/src/bisect.js
  var ascendingBisect = bisector(ascending);
  var bisectRight = ascendingBisect.right;
  var bisectLeft = ascendingBisect.left;
  var bisectCenter = bisector(number).center;
  var bisect_default = bisectRight;

  // ../node_modules/d3-array/src/count.js
  function count2(values3, valueof) {
    let count4 = 0;
    if (valueof === void 0) {
      for (let value of values3) {
        if (value != null && (value = +value) >= value) {
          ++count4;
        }
      }
    } else {
      let index = -1;
      for (let value of values3) {
        if ((value = valueof(value, ++index, values3)) != null && (value = +value) >= value) {
          ++count4;
        }
      }
    }
    return count4;
  }

  // ../node_modules/d3-array/src/extent.js
  function extent(values3, valueof) {
    let min5;
    let max6;
    if (valueof === void 0) {
      for (const value of values3) {
        if (value != null) {
          if (min5 === void 0) {
            if (value >= value)
              min5 = max6 = value;
          } else {
            if (min5 > value)
              min5 = value;
            if (max6 < value)
              max6 = value;
          }
        }
      }
    } else {
      let index = -1;
      for (let value of values3) {
        if ((value = valueof(value, ++index, values3)) != null) {
          if (min5 === void 0) {
            if (value >= value)
              min5 = max6 = value;
          } else {
            if (min5 > value)
              min5 = value;
            if (max6 < value)
              max6 = value;
          }
        }
      }
    }
    return [min5, max6];
  }

  // ../node_modules/d3-array/src/identity.js
  function identity(x5) {
    return x5;
  }

  // ../node_modules/d3-array/src/array.js
  var array = Array.prototype;
  var slice3 = array.slice;
  var map2 = array.map;

  // ../node_modules/d3-array/src/constant.js
  function constant(x5) {
    return () => x5;
  }

  // ../node_modules/d3-array/src/ticks.js
  var e10 = Math.sqrt(50);
  var e5 = Math.sqrt(10);
  var e22 = Math.sqrt(2);
  function tickSpec(start2, stop, count4) {
    const step = (stop - start2) / Math.max(0, count4), power = Math.floor(Math.log10(step)), error = step / Math.pow(10, power), factor = error >= e10 ? 10 : error >= e5 ? 5 : error >= e22 ? 2 : 1;
    let i1, i22, inc;
    if (power < 0) {
      inc = Math.pow(10, -power) / factor;
      i1 = Math.round(start2 * inc);
      i22 = Math.round(stop * inc);
      if (i1 / inc < start2)
        ++i1;
      if (i22 / inc > stop)
        --i22;
      inc = -inc;
    } else {
      inc = Math.pow(10, power) * factor;
      i1 = Math.round(start2 / inc);
      i22 = Math.round(stop / inc);
      if (i1 * inc < start2)
        ++i1;
      if (i22 * inc > stop)
        --i22;
    }
    if (i22 < i1 && 0.5 <= count4 && count4 < 2)
      return tickSpec(start2, stop, count4 * 2);
    return [i1, i22, inc];
  }
  function ticks(start2, stop, count4) {
    stop = +stop, start2 = +start2, count4 = +count4;
    if (!(count4 > 0))
      return [];
    if (start2 === stop)
      return [start2];
    const reverse5 = stop < start2, [i1, i22, inc] = reverse5 ? tickSpec(stop, start2, count4) : tickSpec(start2, stop, count4);
    if (!(i22 >= i1))
      return [];
    const n4 = i22 - i1 + 1, ticks2 = new Array(n4);
    if (reverse5) {
      if (inc < 0)
        for (let i5 = 0; i5 < n4; ++i5)
          ticks2[i5] = (i22 - i5) / -inc;
      else
        for (let i5 = 0; i5 < n4; ++i5)
          ticks2[i5] = (i22 - i5) * inc;
    } else {
      if (inc < 0)
        for (let i5 = 0; i5 < n4; ++i5)
          ticks2[i5] = (i1 + i5) / -inc;
      else
        for (let i5 = 0; i5 < n4; ++i5)
          ticks2[i5] = (i1 + i5) * inc;
    }
    return ticks2;
  }
  function tickIncrement(start2, stop, count4) {
    stop = +stop, start2 = +start2, count4 = +count4;
    return tickSpec(start2, stop, count4)[2];
  }
  function tickStep(start2, stop, count4) {
    stop = +stop, start2 = +start2, count4 = +count4;
    const reverse5 = stop < start2, inc = reverse5 ? tickIncrement(stop, start2, count4) : tickIncrement(start2, stop, count4);
    return (reverse5 ? -1 : 1) * (inc < 0 ? 1 / -inc : inc);
  }

  // ../node_modules/d3-array/src/nice.js
  function nice(start2, stop, count4) {
    let prestep;
    while (true) {
      const step = tickIncrement(start2, stop, count4);
      if (step === prestep || step === 0 || !isFinite(step)) {
        return [start2, stop];
      } else if (step > 0) {
        start2 = Math.floor(start2 / step) * step;
        stop = Math.ceil(stop / step) * step;
      } else if (step < 0) {
        start2 = Math.ceil(start2 * step) / step;
        stop = Math.floor(stop * step) / step;
      }
      prestep = step;
    }
  }

  // ../node_modules/d3-array/src/threshold/sturges.js
  function thresholdSturges(values3) {
    return Math.max(1, Math.ceil(Math.log(count2(values3)) / Math.LN2) + 1);
  }

  // ../node_modules/d3-array/src/bin.js
  function bin() {
    var value = identity, domain = extent, threshold = thresholdSturges;
    function histogram(data) {
      if (!Array.isArray(data))
        data = Array.from(data);
      var i5, n4 = data.length, x5, step, values3 = new Array(n4);
      for (i5 = 0; i5 < n4; ++i5) {
        values3[i5] = value(data[i5], i5, data);
      }
      var xz = domain(values3), x0 = xz[0], x1 = xz[1], tz = threshold(values3, x0, x1);
      if (!Array.isArray(tz)) {
        const max6 = x1, tn2 = +tz;
        if (domain === extent)
          [x0, x1] = nice(x0, x1, tn2);
        tz = ticks(x0, x1, tn2);
        if (tz[0] <= x0)
          step = tickIncrement(x0, x1, tn2);
        if (tz[tz.length - 1] >= x1) {
          if (max6 >= x1 && domain === extent) {
            const step2 = tickIncrement(x0, x1, tn2);
            if (isFinite(step2)) {
              if (step2 > 0) {
                x1 = (Math.floor(x1 / step2) + 1) * step2;
              } else if (step2 < 0) {
                x1 = (Math.ceil(x1 * -step2) + 1) / -step2;
              }
            }
          } else {
            tz.pop();
          }
        }
      }
      var m4 = tz.length, a5 = 0, b2 = m4;
      while (tz[a5] <= x0)
        ++a5;
      while (tz[b2 - 1] > x1)
        --b2;
      if (a5 || b2 < m4)
        tz = tz.slice(a5, b2), m4 = b2 - a5;
      var bins = new Array(m4 + 1), bin2;
      for (i5 = 0; i5 <= m4; ++i5) {
        bin2 = bins[i5] = [];
        bin2.x0 = i5 > 0 ? tz[i5 - 1] : x0;
        bin2.x1 = i5 < m4 ? tz[i5] : x1;
      }
      if (isFinite(step)) {
        if (step > 0) {
          for (i5 = 0; i5 < n4; ++i5) {
            if ((x5 = values3[i5]) != null && x0 <= x5 && x5 <= x1) {
              bins[Math.min(m4, Math.floor((x5 - x0) / step))].push(data[i5]);
            }
          }
        } else if (step < 0) {
          for (i5 = 0; i5 < n4; ++i5) {
            if ((x5 = values3[i5]) != null && x0 <= x5 && x5 <= x1) {
              const j4 = Math.floor((x0 - x5) * step);
              bins[Math.min(m4, j4 + (tz[j4] <= x5))].push(data[i5]);
            }
          }
        }
      } else {
        for (i5 = 0; i5 < n4; ++i5) {
          if ((x5 = values3[i5]) != null && x0 <= x5 && x5 <= x1) {
            bins[bisect_default(tz, x5, 0, m4)].push(data[i5]);
          }
        }
      }
      return bins;
    }
    histogram.value = function(_3) {
      return arguments.length ? (value = typeof _3 === "function" ? _3 : constant(_3), histogram) : value;
    };
    histogram.domain = function(_3) {
      return arguments.length ? (domain = typeof _3 === "function" ? _3 : constant([_3[0], _3[1]]), histogram) : domain;
    };
    histogram.thresholds = function(_3) {
      return arguments.length ? (threshold = typeof _3 === "function" ? _3 : constant(Array.isArray(_3) ? slice3.call(_3) : _3), histogram) : threshold;
    };
    return histogram;
  }

  // ../node_modules/d3-array/src/max.js
  function max2(values3, valueof) {
    let max6;
    if (valueof === void 0) {
      for (const value of values3) {
        if (value != null && (max6 < value || max6 === void 0 && value >= value)) {
          max6 = value;
        }
      }
    } else {
      let index = -1;
      for (let value of values3) {
        if ((value = valueof(value, ++index, values3)) != null && (max6 < value || max6 === void 0 && value >= value)) {
          max6 = value;
        }
      }
    }
    return max6;
  }

  // ../node_modules/d3-axis/src/identity.js
  function identity_default(x5) {
    return x5;
  }

  // ../node_modules/d3-axis/src/axis.js
  var top = 1;
  var right = 2;
  var bottom = 3;
  var left = 4;
  var epsilon = 1e-6;
  function translateX(x5) {
    return "translate(" + x5 + ",0)";
  }
  function translateY(y5) {
    return "translate(0," + y5 + ")";
  }
  function number2(scale) {
    return (d4) => +scale(d4);
  }
  function center(scale, offset2) {
    offset2 = Math.max(0, scale.bandwidth() - offset2 * 2) / 2;
    if (scale.round())
      offset2 = Math.round(offset2);
    return (d4) => +scale(d4) + offset2;
  }
  function entering() {
    return !this.__axis;
  }
  function axis(orient, scale) {
    var tickArguments = [], tickValues = null, tickFormat2 = null, tickSizeInner = 6, tickSizeOuter = 6, tickPadding = 3, offset2 = typeof window !== "undefined" && window.devicePixelRatio > 1 ? 0 : 0.5, k4 = orient === top || orient === left ? -1 : 1, x5 = orient === left || orient === right ? "x" : "y", transform2 = orient === top || orient === bottom ? translateX : translateY;
    function axis2(context) {
      var values3 = tickValues == null ? scale.ticks ? scale.ticks.apply(scale, tickArguments) : scale.domain() : tickValues, format2 = tickFormat2 == null ? scale.tickFormat ? scale.tickFormat.apply(scale, tickArguments) : identity_default : tickFormat2, spacing = Math.max(tickSizeInner, 0) + tickPadding, range = scale.range(), range0 = +range[0] + offset2, range1 = +range[range.length - 1] + offset2, position = (scale.bandwidth ? center : number2)(scale.copy(), offset2), selection2 = context.selection ? context.selection() : context, path2 = selection2.selectAll(".domain").data([null]), tick = selection2.selectAll(".tick").data(values3, scale).order(), tickExit = tick.exit(), tickEnter = tick.enter().append("g").attr("class", "tick"), line = tick.select("line"), text = tick.select("text");
      path2 = path2.merge(path2.enter().insert("path", ".tick").attr("class", "domain").attr("stroke", "currentColor"));
      tick = tick.merge(tickEnter);
      line = line.merge(tickEnter.append("line").attr("stroke", "currentColor").attr(x5 + "2", k4 * tickSizeInner));
      text = text.merge(tickEnter.append("text").attr("fill", "currentColor").attr(x5, k4 * spacing).attr("dy", orient === top ? "0em" : orient === bottom ? "0.71em" : "0.32em"));
      if (context !== selection2) {
        path2 = path2.transition(context);
        tick = tick.transition(context);
        line = line.transition(context);
        text = text.transition(context);
        tickExit = tickExit.transition(context).attr("opacity", epsilon).attr("transform", function(d4) {
          return isFinite(d4 = position(d4)) ? transform2(d4 + offset2) : this.getAttribute("transform");
        });
        tickEnter.attr("opacity", epsilon).attr("transform", function(d4) {
          var p5 = this.parentNode.__axis;
          return transform2((p5 && isFinite(p5 = p5(d4)) ? p5 : position(d4)) + offset2);
        });
      }
      tickExit.remove();
      path2.attr("d", orient === left || orient === right ? tickSizeOuter ? "M" + k4 * tickSizeOuter + "," + range0 + "H" + offset2 + "V" + range1 + "H" + k4 * tickSizeOuter : "M" + offset2 + "," + range0 + "V" + range1 : tickSizeOuter ? "M" + range0 + "," + k4 * tickSizeOuter + "V" + offset2 + "H" + range1 + "V" + k4 * tickSizeOuter : "M" + range0 + "," + offset2 + "H" + range1);
      tick.attr("opacity", 1).attr("transform", function(d4) {
        return transform2(position(d4) + offset2);
      });
      line.attr(x5 + "2", k4 * tickSizeInner);
      text.attr(x5, k4 * spacing).text(format2);
      selection2.filter(entering).attr("fill", "none").attr("font-size", 10).attr("font-family", "sans-serif").attr("text-anchor", orient === right ? "start" : orient === left ? "end" : "middle");
      selection2.each(function() {
        this.__axis = position;
      });
    }
    axis2.scale = function(_3) {
      return arguments.length ? (scale = _3, axis2) : scale;
    };
    axis2.ticks = function() {
      return tickArguments = Array.from(arguments), axis2;
    };
    axis2.tickArguments = function(_3) {
      return arguments.length ? (tickArguments = _3 == null ? [] : Array.from(_3), axis2) : tickArguments.slice();
    };
    axis2.tickValues = function(_3) {
      return arguments.length ? (tickValues = _3 == null ? null : Array.from(_3), axis2) : tickValues && tickValues.slice();
    };
    axis2.tickFormat = function(_3) {
      return arguments.length ? (tickFormat2 = _3, axis2) : tickFormat2;
    };
    axis2.tickSize = function(_3) {
      return arguments.length ? (tickSizeInner = tickSizeOuter = +_3, axis2) : tickSizeInner;
    };
    axis2.tickSizeInner = function(_3) {
      return arguments.length ? (tickSizeInner = +_3, axis2) : tickSizeInner;
    };
    axis2.tickSizeOuter = function(_3) {
      return arguments.length ? (tickSizeOuter = +_3, axis2) : tickSizeOuter;
    };
    axis2.tickPadding = function(_3) {
      return arguments.length ? (tickPadding = +_3, axis2) : tickPadding;
    };
    axis2.offset = function(_3) {
      return arguments.length ? (offset2 = +_3, axis2) : offset2;
    };
    return axis2;
  }
  function axisBottom(scale) {
    return axis(bottom, scale);
  }
  function axisLeft(scale) {
    return axis(left, scale);
  }

  // ../node_modules/d3-dispatch/src/dispatch.js
  var noop = { value: () => {
  } };
  function dispatch() {
    for (var i5 = 0, n4 = arguments.length, _3 = {}, t4; i5 < n4; ++i5) {
      if (!(t4 = arguments[i5] + "") || t4 in _3 || /[\s.]/.test(t4))
        throw new Error("illegal type: " + t4);
      _3[t4] = [];
    }
    return new Dispatch(_3);
  }
  function Dispatch(_3) {
    this._ = _3;
  }
  function parseTypenames(typenames, types) {
    return typenames.trim().split(/^|\s+/).map(function(t4) {
      var name = "", i5 = t4.indexOf(".");
      if (i5 >= 0)
        name = t4.slice(i5 + 1), t4 = t4.slice(0, i5);
      if (t4 && !types.hasOwnProperty(t4))
        throw new Error("unknown type: " + t4);
      return { type: t4, name };
    });
  }
  Dispatch.prototype = dispatch.prototype = {
    constructor: Dispatch,
    on: function(typename, callback) {
      var _3 = this._, T4 = parseTypenames(typename + "", _3), t4, i5 = -1, n4 = T4.length;
      if (arguments.length < 2) {
        while (++i5 < n4)
          if ((t4 = (typename = T4[i5]).type) && (t4 = get11(_3[t4], typename.name)))
            return t4;
        return;
      }
      if (callback != null && typeof callback !== "function")
        throw new Error("invalid callback: " + callback);
      while (++i5 < n4) {
        if (t4 = (typename = T4[i5]).type)
          _3[t4] = set3(_3[t4], typename.name, callback);
        else if (callback == null)
          for (t4 in _3)
            _3[t4] = set3(_3[t4], typename.name, null);
      }
      return this;
    },
    copy: function() {
      var copy2 = {}, _3 = this._;
      for (var t4 in _3)
        copy2[t4] = _3[t4].slice();
      return new Dispatch(copy2);
    },
    call: function(type2, that) {
      if ((n4 = arguments.length - 2) > 0)
        for (var args = new Array(n4), i5 = 0, n4, t4; i5 < n4; ++i5)
          args[i5] = arguments[i5 + 2];
      if (!this._.hasOwnProperty(type2))
        throw new Error("unknown type: " + type2);
      for (t4 = this._[type2], i5 = 0, n4 = t4.length; i5 < n4; ++i5)
        t4[i5].value.apply(that, args);
    },
    apply: function(type2, that, args) {
      if (!this._.hasOwnProperty(type2))
        throw new Error("unknown type: " + type2);
      for (var t4 = this._[type2], i5 = 0, n4 = t4.length; i5 < n4; ++i5)
        t4[i5].value.apply(that, args);
    }
  };
  function get11(type2, name) {
    for (var i5 = 0, n4 = type2.length, c4; i5 < n4; ++i5) {
      if ((c4 = type2[i5]).name === name) {
        return c4.value;
      }
    }
  }
  function set3(type2, name, callback) {
    for (var i5 = 0, n4 = type2.length; i5 < n4; ++i5) {
      if (type2[i5].name === name) {
        type2[i5] = noop, type2 = type2.slice(0, i5).concat(type2.slice(i5 + 1));
        break;
      }
    }
    if (callback != null)
      type2.push({ name, value: callback });
    return type2;
  }
  var dispatch_default = dispatch;

  // ../node_modules/d3-selection/src/namespaces.js
  var xhtml = "http://www.w3.org/1999/xhtml";
  var namespaces_default = {
    svg: "http://www.w3.org/2000/svg",
    xhtml,
    xlink: "http://www.w3.org/1999/xlink",
    xml: "http://www.w3.org/XML/1998/namespace",
    xmlns: "http://www.w3.org/2000/xmlns/"
  };

  // ../node_modules/d3-selection/src/namespace.js
  function namespace_default(name) {
    var prefix = name += "", i5 = prefix.indexOf(":");
    if (i5 >= 0 && (prefix = name.slice(0, i5)) !== "xmlns")
      name = name.slice(i5 + 1);
    return namespaces_default.hasOwnProperty(prefix) ? { space: namespaces_default[prefix], local: name } : name;
  }

  // ../node_modules/d3-selection/src/creator.js
  function creatorInherit(name) {
    return function() {
      var document2 = this.ownerDocument, uri = this.namespaceURI;
      return uri === xhtml && document2.documentElement.namespaceURI === xhtml ? document2.createElement(name) : document2.createElementNS(uri, name);
    };
  }
  function creatorFixed(fullname) {
    return function() {
      return this.ownerDocument.createElementNS(fullname.space, fullname.local);
    };
  }
  function creator_default(name) {
    var fullname = namespace_default(name);
    return (fullname.local ? creatorFixed : creatorInherit)(fullname);
  }

  // ../node_modules/d3-selection/src/selector.js
  function none() {
  }
  function selector_default(selector) {
    return selector == null ? none : function() {
      return this.querySelector(selector);
    };
  }

  // ../node_modules/d3-selection/src/selection/select.js
  function select_default(select2) {
    if (typeof select2 !== "function")
      select2 = selector_default(select2);
    for (var groups = this._groups, m4 = groups.length, subgroups = new Array(m4), j4 = 0; j4 < m4; ++j4) {
      for (var group = groups[j4], n4 = group.length, subgroup = subgroups[j4] = new Array(n4), node, subnode, i5 = 0; i5 < n4; ++i5) {
        if ((node = group[i5]) && (subnode = select2.call(node, node.__data__, i5, group))) {
          if ("__data__" in node)
            subnode.__data__ = node.__data__;
          subgroup[i5] = subnode;
        }
      }
    }
    return new Selection(subgroups, this._parents);
  }

  // ../node_modules/d3-selection/src/array.js
  function array2(x5) {
    return x5 == null ? [] : Array.isArray(x5) ? x5 : Array.from(x5);
  }

  // ../node_modules/d3-selection/src/selectorAll.js
  function empty() {
    return [];
  }
  function selectorAll_default(selector) {
    return selector == null ? empty : function() {
      return this.querySelectorAll(selector);
    };
  }

  // ../node_modules/d3-selection/src/selection/selectAll.js
  function arrayAll(select2) {
    return function() {
      return array2(select2.apply(this, arguments));
    };
  }
  function selectAll_default(select2) {
    if (typeof select2 === "function")
      select2 = arrayAll(select2);
    else
      select2 = selectorAll_default(select2);
    for (var groups = this._groups, m4 = groups.length, subgroups = [], parents = [], j4 = 0; j4 < m4; ++j4) {
      for (var group = groups[j4], n4 = group.length, node, i5 = 0; i5 < n4; ++i5) {
        if (node = group[i5]) {
          subgroups.push(select2.call(node, node.__data__, i5, group));
          parents.push(node);
        }
      }
    }
    return new Selection(subgroups, parents);
  }

  // ../node_modules/d3-selection/src/matcher.js
  function matcher_default(selector) {
    return function() {
      return this.matches(selector);
    };
  }
  function childMatcher(selector) {
    return function(node) {
      return node.matches(selector);
    };
  }

  // ../node_modules/d3-selection/src/selection/selectChild.js
  var find2 = Array.prototype.find;
  function childFind(match) {
    return function() {
      return find2.call(this.children, match);
    };
  }
  function childFirst() {
    return this.firstElementChild;
  }
  function selectChild_default(match) {
    return this.select(match == null ? childFirst : childFind(typeof match === "function" ? match : childMatcher(match)));
  }

  // ../node_modules/d3-selection/src/selection/selectChildren.js
  var filter3 = Array.prototype.filter;
  function children() {
    return Array.from(this.children);
  }
  function childrenFilter(match) {
    return function() {
      return filter3.call(this.children, match);
    };
  }
  function selectChildren_default(match) {
    return this.selectAll(match == null ? children : childrenFilter(typeof match === "function" ? match : childMatcher(match)));
  }

  // ../node_modules/d3-selection/src/selection/filter.js
  function filter_default(match) {
    if (typeof match !== "function")
      match = matcher_default(match);
    for (var groups = this._groups, m4 = groups.length, subgroups = new Array(m4), j4 = 0; j4 < m4; ++j4) {
      for (var group = groups[j4], n4 = group.length, subgroup = subgroups[j4] = [], node, i5 = 0; i5 < n4; ++i5) {
        if ((node = group[i5]) && match.call(node, node.__data__, i5, group)) {
          subgroup.push(node);
        }
      }
    }
    return new Selection(subgroups, this._parents);
  }

  // ../node_modules/d3-selection/src/selection/sparse.js
  function sparse_default(update9) {
    return new Array(update9.length);
  }

  // ../node_modules/d3-selection/src/selection/enter.js
  function enter_default() {
    return new Selection(this._enter || this._groups.map(sparse_default), this._parents);
  }
  function EnterNode(parent, datum2) {
    this.ownerDocument = parent.ownerDocument;
    this.namespaceURI = parent.namespaceURI;
    this._next = null;
    this._parent = parent;
    this.__data__ = datum2;
  }
  EnterNode.prototype = {
    constructor: EnterNode,
    appendChild: function(child) {
      return this._parent.insertBefore(child, this._next);
    },
    insertBefore: function(child, next) {
      return this._parent.insertBefore(child, next);
    },
    querySelector: function(selector) {
      return this._parent.querySelector(selector);
    },
    querySelectorAll: function(selector) {
      return this._parent.querySelectorAll(selector);
    }
  };

  // ../node_modules/d3-selection/src/constant.js
  function constant_default(x5) {
    return function() {
      return x5;
    };
  }

  // ../node_modules/d3-selection/src/selection/data.js
  function bindIndex(parent, group, enter, update9, exit, data) {
    var i5 = 0, node, groupLength = group.length, dataLength = data.length;
    for (; i5 < dataLength; ++i5) {
      if (node = group[i5]) {
        node.__data__ = data[i5];
        update9[i5] = node;
      } else {
        enter[i5] = new EnterNode(parent, data[i5]);
      }
    }
    for (; i5 < groupLength; ++i5) {
      if (node = group[i5]) {
        exit[i5] = node;
      }
    }
  }
  function bindKey(parent, group, enter, update9, exit, data, key) {
    var i5, node, nodeByKeyValue = /* @__PURE__ */ new Map(), groupLength = group.length, dataLength = data.length, keyValues = new Array(groupLength), keyValue;
    for (i5 = 0; i5 < groupLength; ++i5) {
      if (node = group[i5]) {
        keyValues[i5] = keyValue = key.call(node, node.__data__, i5, group) + "";
        if (nodeByKeyValue.has(keyValue)) {
          exit[i5] = node;
        } else {
          nodeByKeyValue.set(keyValue, node);
        }
      }
    }
    for (i5 = 0; i5 < dataLength; ++i5) {
      keyValue = key.call(parent, data[i5], i5, data) + "";
      if (node = nodeByKeyValue.get(keyValue)) {
        update9[i5] = node;
        node.__data__ = data[i5];
        nodeByKeyValue.delete(keyValue);
      } else {
        enter[i5] = new EnterNode(parent, data[i5]);
      }
    }
    for (i5 = 0; i5 < groupLength; ++i5) {
      if ((node = group[i5]) && nodeByKeyValue.get(keyValues[i5]) === node) {
        exit[i5] = node;
      }
    }
  }
  function datum(node) {
    return node.__data__;
  }
  function data_default(value, key) {
    if (!arguments.length)
      return Array.from(this, datum);
    var bind = key ? bindKey : bindIndex, parents = this._parents, groups = this._groups;
    if (typeof value !== "function")
      value = constant_default(value);
    for (var m4 = groups.length, update9 = new Array(m4), enter = new Array(m4), exit = new Array(m4), j4 = 0; j4 < m4; ++j4) {
      var parent = parents[j4], group = groups[j4], groupLength = group.length, data = arraylike(value.call(parent, parent && parent.__data__, j4, parents)), dataLength = data.length, enterGroup = enter[j4] = new Array(dataLength), updateGroup = update9[j4] = new Array(dataLength), exitGroup = exit[j4] = new Array(groupLength);
      bind(parent, group, enterGroup, updateGroup, exitGroup, data, key);
      for (var i0 = 0, i1 = 0, previous, next; i0 < dataLength; ++i0) {
        if (previous = enterGroup[i0]) {
          if (i0 >= i1)
            i1 = i0 + 1;
          while (!(next = updateGroup[i1]) && ++i1 < dataLength)
            ;
          previous._next = next || null;
        }
      }
    }
    update9 = new Selection(update9, parents);
    update9._enter = enter;
    update9._exit = exit;
    return update9;
  }
  function arraylike(data) {
    return typeof data === "object" && "length" in data ? data : Array.from(data);
  }

  // ../node_modules/d3-selection/src/selection/exit.js
  function exit_default() {
    return new Selection(this._exit || this._groups.map(sparse_default), this._parents);
  }

  // ../node_modules/d3-selection/src/selection/join.js
  function join_default(onenter, onupdate, onexit) {
    var enter = this.enter(), update9 = this, exit = this.exit();
    if (typeof onenter === "function") {
      enter = onenter(enter);
      if (enter)
        enter = enter.selection();
    } else {
      enter = enter.append(onenter + "");
    }
    if (onupdate != null) {
      update9 = onupdate(update9);
      if (update9)
        update9 = update9.selection();
    }
    if (onexit == null)
      exit.remove();
    else
      onexit(exit);
    return enter && update9 ? enter.merge(update9).order() : update9;
  }

  // ../node_modules/d3-selection/src/selection/merge.js
  function merge_default(context) {
    var selection2 = context.selection ? context.selection() : context;
    for (var groups0 = this._groups, groups1 = selection2._groups, m0 = groups0.length, m1 = groups1.length, m4 = Math.min(m0, m1), merges = new Array(m0), j4 = 0; j4 < m4; ++j4) {
      for (var group0 = groups0[j4], group1 = groups1[j4], n4 = group0.length, merge2 = merges[j4] = new Array(n4), node, i5 = 0; i5 < n4; ++i5) {
        if (node = group0[i5] || group1[i5]) {
          merge2[i5] = node;
        }
      }
    }
    for (; j4 < m0; ++j4) {
      merges[j4] = groups0[j4];
    }
    return new Selection(merges, this._parents);
  }

  // ../node_modules/d3-selection/src/selection/order.js
  function order_default() {
    for (var groups = this._groups, j4 = -1, m4 = groups.length; ++j4 < m4; ) {
      for (var group = groups[j4], i5 = group.length - 1, next = group[i5], node; --i5 >= 0; ) {
        if (node = group[i5]) {
          if (next && node.compareDocumentPosition(next) ^ 4)
            next.parentNode.insertBefore(node, next);
          next = node;
        }
      }
    }
    return this;
  }

  // ../node_modules/d3-selection/src/selection/sort.js
  function sort_default(compare) {
    if (!compare)
      compare = ascending2;
    function compareNode(a5, b2) {
      return a5 && b2 ? compare(a5.__data__, b2.__data__) : !a5 - !b2;
    }
    for (var groups = this._groups, m4 = groups.length, sortgroups = new Array(m4), j4 = 0; j4 < m4; ++j4) {
      for (var group = groups[j4], n4 = group.length, sortgroup = sortgroups[j4] = new Array(n4), node, i5 = 0; i5 < n4; ++i5) {
        if (node = group[i5]) {
          sortgroup[i5] = node;
        }
      }
      sortgroup.sort(compareNode);
    }
    return new Selection(sortgroups, this._parents).order();
  }
  function ascending2(a5, b2) {
    return a5 < b2 ? -1 : a5 > b2 ? 1 : a5 >= b2 ? 0 : NaN;
  }

  // ../node_modules/d3-selection/src/selection/call.js
  function call_default() {
    var callback = arguments[0];
    arguments[0] = this;
    callback.apply(null, arguments);
    return this;
  }

  // ../node_modules/d3-selection/src/selection/nodes.js
  function nodes_default() {
    return Array.from(this);
  }

  // ../node_modules/d3-selection/src/selection/node.js
  function node_default() {
    for (var groups = this._groups, j4 = 0, m4 = groups.length; j4 < m4; ++j4) {
      for (var group = groups[j4], i5 = 0, n4 = group.length; i5 < n4; ++i5) {
        var node = group[i5];
        if (node)
          return node;
      }
    }
    return null;
  }

  // ../node_modules/d3-selection/src/selection/size.js
  function size_default() {
    let size2 = 0;
    for (const node of this)
      ++size2;
    return size2;
  }

  // ../node_modules/d3-selection/src/selection/empty.js
  function empty_default() {
    return !this.node();
  }

  // ../node_modules/d3-selection/src/selection/each.js
  function each_default(callback) {
    for (var groups = this._groups, j4 = 0, m4 = groups.length; j4 < m4; ++j4) {
      for (var group = groups[j4], i5 = 0, n4 = group.length, node; i5 < n4; ++i5) {
        if (node = group[i5])
          callback.call(node, node.__data__, i5, group);
      }
    }
    return this;
  }

  // ../node_modules/d3-selection/src/selection/attr.js
  function attrRemove(name) {
    return function() {
      this.removeAttribute(name);
    };
  }
  function attrRemoveNS(fullname) {
    return function() {
      this.removeAttributeNS(fullname.space, fullname.local);
    };
  }
  function attrConstant(name, value) {
    return function() {
      this.setAttribute(name, value);
    };
  }
  function attrConstantNS(fullname, value) {
    return function() {
      this.setAttributeNS(fullname.space, fullname.local, value);
    };
  }
  function attrFunction(name, value) {
    return function() {
      var v4 = value.apply(this, arguments);
      if (v4 == null)
        this.removeAttribute(name);
      else
        this.setAttribute(name, v4);
    };
  }
  function attrFunctionNS(fullname, value) {
    return function() {
      var v4 = value.apply(this, arguments);
      if (v4 == null)
        this.removeAttributeNS(fullname.space, fullname.local);
      else
        this.setAttributeNS(fullname.space, fullname.local, v4);
    };
  }
  function attr_default(name, value) {
    var fullname = namespace_default(name);
    if (arguments.length < 2) {
      var node = this.node();
      return fullname.local ? node.getAttributeNS(fullname.space, fullname.local) : node.getAttribute(fullname);
    }
    return this.each((value == null ? fullname.local ? attrRemoveNS : attrRemove : typeof value === "function" ? fullname.local ? attrFunctionNS : attrFunction : fullname.local ? attrConstantNS : attrConstant)(fullname, value));
  }

  // ../node_modules/d3-selection/src/window.js
  function window_default(node) {
    return node.ownerDocument && node.ownerDocument.defaultView || node.document && node || node.defaultView;
  }

  // ../node_modules/d3-selection/src/selection/style.js
  function styleRemove(name) {
    return function() {
      this.style.removeProperty(name);
    };
  }
  function styleConstant(name, value, priority) {
    return function() {
      this.style.setProperty(name, value, priority);
    };
  }
  function styleFunction(name, value, priority) {
    return function() {
      var v4 = value.apply(this, arguments);
      if (v4 == null)
        this.style.removeProperty(name);
      else
        this.style.setProperty(name, v4, priority);
    };
  }
  function style_default(name, value, priority) {
    return arguments.length > 1 ? this.each((value == null ? styleRemove : typeof value === "function" ? styleFunction : styleConstant)(name, value, priority == null ? "" : priority)) : styleValue(this.node(), name);
  }
  function styleValue(node, name) {
    return node.style.getPropertyValue(name) || window_default(node).getComputedStyle(node, null).getPropertyValue(name);
  }

  // ../node_modules/d3-selection/src/selection/property.js
  function propertyRemove(name) {
    return function() {
      delete this[name];
    };
  }
  function propertyConstant(name, value) {
    return function() {
      this[name] = value;
    };
  }
  function propertyFunction(name, value) {
    return function() {
      var v4 = value.apply(this, arguments);
      if (v4 == null)
        delete this[name];
      else
        this[name] = v4;
    };
  }
  function property_default(name, value) {
    return arguments.length > 1 ? this.each((value == null ? propertyRemove : typeof value === "function" ? propertyFunction : propertyConstant)(name, value)) : this.node()[name];
  }

  // ../node_modules/d3-selection/src/selection/classed.js
  function classArray(string) {
    return string.trim().split(/^|\s+/);
  }
  function classList(node) {
    return node.classList || new ClassList(node);
  }
  function ClassList(node) {
    this._node = node;
    this._names = classArray(node.getAttribute("class") || "");
  }
  ClassList.prototype = {
    add: function(name) {
      var i5 = this._names.indexOf(name);
      if (i5 < 0) {
        this._names.push(name);
        this._node.setAttribute("class", this._names.join(" "));
      }
    },
    remove: function(name) {
      var i5 = this._names.indexOf(name);
      if (i5 >= 0) {
        this._names.splice(i5, 1);
        this._node.setAttribute("class", this._names.join(" "));
      }
    },
    contains: function(name) {
      return this._names.indexOf(name) >= 0;
    }
  };
  function classedAdd(node, names) {
    var list = classList(node), i5 = -1, n4 = names.length;
    while (++i5 < n4)
      list.add(names[i5]);
  }
  function classedRemove(node, names) {
    var list = classList(node), i5 = -1, n4 = names.length;
    while (++i5 < n4)
      list.remove(names[i5]);
  }
  function classedTrue(names) {
    return function() {
      classedAdd(this, names);
    };
  }
  function classedFalse(names) {
    return function() {
      classedRemove(this, names);
    };
  }
  function classedFunction(names, value) {
    return function() {
      (value.apply(this, arguments) ? classedAdd : classedRemove)(this, names);
    };
  }
  function classed_default(name, value) {
    var names = classArray(name + "");
    if (arguments.length < 2) {
      var list = classList(this.node()), i5 = -1, n4 = names.length;
      while (++i5 < n4)
        if (!list.contains(names[i5]))
          return false;
      return true;
    }
    return this.each((typeof value === "function" ? classedFunction : value ? classedTrue : classedFalse)(names, value));
  }

  // ../node_modules/d3-selection/src/selection/text.js
  function textRemove() {
    this.textContent = "";
  }
  function textConstant(value) {
    return function() {
      this.textContent = value;
    };
  }
  function textFunction(value) {
    return function() {
      var v4 = value.apply(this, arguments);
      this.textContent = v4 == null ? "" : v4;
    };
  }
  function text_default(value) {
    return arguments.length ? this.each(value == null ? textRemove : (typeof value === "function" ? textFunction : textConstant)(value)) : this.node().textContent;
  }

  // ../node_modules/d3-selection/src/selection/html.js
  function htmlRemove() {
    this.innerHTML = "";
  }
  function htmlConstant(value) {
    return function() {
      this.innerHTML = value;
    };
  }
  function htmlFunction(value) {
    return function() {
      var v4 = value.apply(this, arguments);
      this.innerHTML = v4 == null ? "" : v4;
    };
  }
  function html_default(value) {
    return arguments.length ? this.each(value == null ? htmlRemove : (typeof value === "function" ? htmlFunction : htmlConstant)(value)) : this.node().innerHTML;
  }

  // ../node_modules/d3-selection/src/selection/raise.js
  function raise() {
    if (this.nextSibling)
      this.parentNode.appendChild(this);
  }
  function raise_default() {
    return this.each(raise);
  }

  // ../node_modules/d3-selection/src/selection/lower.js
  function lower() {
    if (this.previousSibling)
      this.parentNode.insertBefore(this, this.parentNode.firstChild);
  }
  function lower_default() {
    return this.each(lower);
  }

  // ../node_modules/d3-selection/src/selection/append.js
  function append_default(name) {
    var create2 = typeof name === "function" ? name : creator_default(name);
    return this.select(function() {
      return this.appendChild(create2.apply(this, arguments));
    });
  }

  // ../node_modules/d3-selection/src/selection/insert.js
  function constantNull() {
    return null;
  }
  function insert_default(name, before) {
    var create2 = typeof name === "function" ? name : creator_default(name), select2 = before == null ? constantNull : typeof before === "function" ? before : selector_default(before);
    return this.select(function() {
      return this.insertBefore(create2.apply(this, arguments), select2.apply(this, arguments) || null);
    });
  }

  // ../node_modules/d3-selection/src/selection/remove.js
  function remove3() {
    var parent = this.parentNode;
    if (parent)
      parent.removeChild(this);
  }
  function remove_default() {
    return this.each(remove3);
  }

  // ../node_modules/d3-selection/src/selection/clone.js
  function selection_cloneShallow() {
    var clone2 = this.cloneNode(false), parent = this.parentNode;
    return parent ? parent.insertBefore(clone2, this.nextSibling) : clone2;
  }
  function selection_cloneDeep() {
    var clone2 = this.cloneNode(true), parent = this.parentNode;
    return parent ? parent.insertBefore(clone2, this.nextSibling) : clone2;
  }
  function clone_default(deep) {
    return this.select(deep ? selection_cloneDeep : selection_cloneShallow);
  }

  // ../node_modules/d3-selection/src/selection/datum.js
  function datum_default(value) {
    return arguments.length ? this.property("__data__", value) : this.node().__data__;
  }

  // ../node_modules/d3-selection/src/selection/on.js
  function contextListener(listener) {
    return function(event) {
      listener.call(this, event, this.__data__);
    };
  }
  function parseTypenames2(typenames) {
    return typenames.trim().split(/^|\s+/).map(function(t4) {
      var name = "", i5 = t4.indexOf(".");
      if (i5 >= 0)
        name = t4.slice(i5 + 1), t4 = t4.slice(0, i5);
      return { type: t4, name };
    });
  }
  function onRemove(typename) {
    return function() {
      var on2 = this.__on;
      if (!on2)
        return;
      for (var j4 = 0, i5 = -1, m4 = on2.length, o5; j4 < m4; ++j4) {
        if (o5 = on2[j4], (!typename.type || o5.type === typename.type) && o5.name === typename.name) {
          this.removeEventListener(o5.type, o5.listener, o5.options);
        } else {
          on2[++i5] = o5;
        }
      }
      if (++i5)
        on2.length = i5;
      else
        delete this.__on;
    };
  }
  function onAdd(typename, value, options) {
    return function() {
      var on2 = this.__on, o5, listener = contextListener(value);
      if (on2)
        for (var j4 = 0, m4 = on2.length; j4 < m4; ++j4) {
          if ((o5 = on2[j4]).type === typename.type && o5.name === typename.name) {
            this.removeEventListener(o5.type, o5.listener, o5.options);
            this.addEventListener(o5.type, o5.listener = listener, o5.options = options);
            o5.value = value;
            return;
          }
        }
      this.addEventListener(typename.type, listener, options);
      o5 = { type: typename.type, name: typename.name, value, listener, options };
      if (!on2)
        this.__on = [o5];
      else
        on2.push(o5);
    };
  }
  function on_default(typename, value, options) {
    var typenames = parseTypenames2(typename + ""), i5, n4 = typenames.length, t4;
    if (arguments.length < 2) {
      var on2 = this.node().__on;
      if (on2)
        for (var j4 = 0, m4 = on2.length, o5; j4 < m4; ++j4) {
          for (i5 = 0, o5 = on2[j4]; i5 < n4; ++i5) {
            if ((t4 = typenames[i5]).type === o5.type && t4.name === o5.name) {
              return o5.value;
            }
          }
        }
      return;
    }
    on2 = value ? onAdd : onRemove;
    for (i5 = 0; i5 < n4; ++i5)
      this.each(on2(typenames[i5], value, options));
    return this;
  }

  // ../node_modules/d3-selection/src/selection/dispatch.js
  function dispatchEvent(node, type2, params) {
    var window2 = window_default(node), event = window2.CustomEvent;
    if (typeof event === "function") {
      event = new event(type2, params);
    } else {
      event = window2.document.createEvent("Event");
      if (params)
        event.initEvent(type2, params.bubbles, params.cancelable), event.detail = params.detail;
      else
        event.initEvent(type2, false, false);
    }
    node.dispatchEvent(event);
  }
  function dispatchConstant(type2, params) {
    return function() {
      return dispatchEvent(this, type2, params);
    };
  }
  function dispatchFunction(type2, params) {
    return function() {
      return dispatchEvent(this, type2, params.apply(this, arguments));
    };
  }
  function dispatch_default2(type2, params) {
    return this.each((typeof params === "function" ? dispatchFunction : dispatchConstant)(type2, params));
  }

  // ../node_modules/d3-selection/src/selection/iterator.js
  function* iterator_default() {
    for (var groups = this._groups, j4 = 0, m4 = groups.length; j4 < m4; ++j4) {
      for (var group = groups[j4], i5 = 0, n4 = group.length, node; i5 < n4; ++i5) {
        if (node = group[i5])
          yield node;
      }
    }
  }

  // ../node_modules/d3-selection/src/selection/index.js
  var root = [null];
  function Selection(groups, parents) {
    this._groups = groups;
    this._parents = parents;
  }
  function selection() {
    return new Selection([[document.documentElement]], root);
  }
  function selection_selection() {
    return this;
  }
  Selection.prototype = selection.prototype = {
    constructor: Selection,
    select: select_default,
    selectAll: selectAll_default,
    selectChild: selectChild_default,
    selectChildren: selectChildren_default,
    filter: filter_default,
    data: data_default,
    enter: enter_default,
    exit: exit_default,
    join: join_default,
    merge: merge_default,
    selection: selection_selection,
    order: order_default,
    sort: sort_default,
    call: call_default,
    nodes: nodes_default,
    node: node_default,
    size: size_default,
    empty: empty_default,
    each: each_default,
    attr: attr_default,
    style: style_default,
    property: property_default,
    classed: classed_default,
    text: text_default,
    html: html_default,
    raise: raise_default,
    lower: lower_default,
    append: append_default,
    insert: insert_default,
    remove: remove_default,
    clone: clone_default,
    datum: datum_default,
    on: on_default,
    dispatch: dispatch_default2,
    [Symbol.iterator]: iterator_default
  };
  var selection_default = selection;

  // ../node_modules/d3-selection/src/select.js
  function select_default2(selector) {
    return typeof selector === "string" ? new Selection([[document.querySelector(selector)]], [document.documentElement]) : new Selection([[selector]], root);
  }

  // ../node_modules/d3-color/src/define.js
  function define_default(constructor, factory, prototype) {
    constructor.prototype = factory.prototype = prototype;
    prototype.constructor = constructor;
  }
  function extend(parent, definition) {
    var prototype = Object.create(parent.prototype);
    for (var key in definition)
      prototype[key] = definition[key];
    return prototype;
  }

  // ../node_modules/d3-color/src/color.js
  function Color() {
  }
  var darker = 0.7;
  var brighter = 1 / darker;
  var reI = "\\s*([+-]?\\d+)\\s*";
  var reN = "\\s*([+-]?(?:\\d*\\.)?\\d+(?:[eE][+-]?\\d+)?)\\s*";
  var reP = "\\s*([+-]?(?:\\d*\\.)?\\d+(?:[eE][+-]?\\d+)?)%\\s*";
  var reHex = /^#([0-9a-f]{3,8})$/;
  var reRgbInteger = new RegExp(`^rgb\\(${reI},${reI},${reI}\\)$`);
  var reRgbPercent = new RegExp(`^rgb\\(${reP},${reP},${reP}\\)$`);
  var reRgbaInteger = new RegExp(`^rgba\\(${reI},${reI},${reI},${reN}\\)$`);
  var reRgbaPercent = new RegExp(`^rgba\\(${reP},${reP},${reP},${reN}\\)$`);
  var reHslPercent = new RegExp(`^hsl\\(${reN},${reP},${reP}\\)$`);
  var reHslaPercent = new RegExp(`^hsla\\(${reN},${reP},${reP},${reN}\\)$`);
  var named = {
    aliceblue: 15792383,
    antiquewhite: 16444375,
    aqua: 65535,
    aquamarine: 8388564,
    azure: 15794175,
    beige: 16119260,
    bisque: 16770244,
    black: 0,
    blanchedalmond: 16772045,
    blue: 255,
    blueviolet: 9055202,
    brown: 10824234,
    burlywood: 14596231,
    cadetblue: 6266528,
    chartreuse: 8388352,
    chocolate: 13789470,
    coral: 16744272,
    cornflowerblue: 6591981,
    cornsilk: 16775388,
    crimson: 14423100,
    cyan: 65535,
    darkblue: 139,
    darkcyan: 35723,
    darkgoldenrod: 12092939,
    darkgray: 11119017,
    darkgreen: 25600,
    darkgrey: 11119017,
    darkkhaki: 12433259,
    darkmagenta: 9109643,
    darkolivegreen: 5597999,
    darkorange: 16747520,
    darkorchid: 10040012,
    darkred: 9109504,
    darksalmon: 15308410,
    darkseagreen: 9419919,
    darkslateblue: 4734347,
    darkslategray: 3100495,
    darkslategrey: 3100495,
    darkturquoise: 52945,
    darkviolet: 9699539,
    deeppink: 16716947,
    deepskyblue: 49151,
    dimgray: 6908265,
    dimgrey: 6908265,
    dodgerblue: 2003199,
    firebrick: 11674146,
    floralwhite: 16775920,
    forestgreen: 2263842,
    fuchsia: 16711935,
    gainsboro: 14474460,
    ghostwhite: 16316671,
    gold: 16766720,
    goldenrod: 14329120,
    gray: 8421504,
    green: 32768,
    greenyellow: 11403055,
    grey: 8421504,
    honeydew: 15794160,
    hotpink: 16738740,
    indianred: 13458524,
    indigo: 4915330,
    ivory: 16777200,
    khaki: 15787660,
    lavender: 15132410,
    lavenderblush: 16773365,
    lawngreen: 8190976,
    lemonchiffon: 16775885,
    lightblue: 11393254,
    lightcoral: 15761536,
    lightcyan: 14745599,
    lightgoldenrodyellow: 16448210,
    lightgray: 13882323,
    lightgreen: 9498256,
    lightgrey: 13882323,
    lightpink: 16758465,
    lightsalmon: 16752762,
    lightseagreen: 2142890,
    lightskyblue: 8900346,
    lightslategray: 7833753,
    lightslategrey: 7833753,
    lightsteelblue: 11584734,
    lightyellow: 16777184,
    lime: 65280,
    limegreen: 3329330,
    linen: 16445670,
    magenta: 16711935,
    maroon: 8388608,
    mediumaquamarine: 6737322,
    mediumblue: 205,
    mediumorchid: 12211667,
    mediumpurple: 9662683,
    mediumseagreen: 3978097,
    mediumslateblue: 8087790,
    mediumspringgreen: 64154,
    mediumturquoise: 4772300,
    mediumvioletred: 13047173,
    midnightblue: 1644912,
    mintcream: 16121850,
    mistyrose: 16770273,
    moccasin: 16770229,
    navajowhite: 16768685,
    navy: 128,
    oldlace: 16643558,
    olive: 8421376,
    olivedrab: 7048739,
    orange: 16753920,
    orangered: 16729344,
    orchid: 14315734,
    palegoldenrod: 15657130,
    palegreen: 10025880,
    paleturquoise: 11529966,
    palevioletred: 14381203,
    papayawhip: 16773077,
    peachpuff: 16767673,
    peru: 13468991,
    pink: 16761035,
    plum: 14524637,
    powderblue: 11591910,
    purple: 8388736,
    rebeccapurple: 6697881,
    red: 16711680,
    rosybrown: 12357519,
    royalblue: 4286945,
    saddlebrown: 9127187,
    salmon: 16416882,
    sandybrown: 16032864,
    seagreen: 3050327,
    seashell: 16774638,
    sienna: 10506797,
    silver: 12632256,
    skyblue: 8900331,
    slateblue: 6970061,
    slategray: 7372944,
    slategrey: 7372944,
    snow: 16775930,
    springgreen: 65407,
    steelblue: 4620980,
    tan: 13808780,
    teal: 32896,
    thistle: 14204888,
    tomato: 16737095,
    turquoise: 4251856,
    violet: 15631086,
    wheat: 16113331,
    white: 16777215,
    whitesmoke: 16119285,
    yellow: 16776960,
    yellowgreen: 10145074
  };
  define_default(Color, color, {
    copy(channels) {
      return Object.assign(new this.constructor(), this, channels);
    },
    displayable() {
      return this.rgb().displayable();
    },
    hex: color_formatHex,
    // Deprecated! Use color.formatHex.
    formatHex: color_formatHex,
    formatHex8: color_formatHex8,
    formatHsl: color_formatHsl,
    formatRgb: color_formatRgb,
    toString: color_formatRgb
  });
  function color_formatHex() {
    return this.rgb().formatHex();
  }
  function color_formatHex8() {
    return this.rgb().formatHex8();
  }
  function color_formatHsl() {
    return hslConvert(this).formatHsl();
  }
  function color_formatRgb() {
    return this.rgb().formatRgb();
  }
  function color(format2) {
    var m4, l5;
    format2 = (format2 + "").trim().toLowerCase();
    return (m4 = reHex.exec(format2)) ? (l5 = m4[1].length, m4 = parseInt(m4[1], 16), l5 === 6 ? rgbn(m4) : l5 === 3 ? new Rgb(m4 >> 8 & 15 | m4 >> 4 & 240, m4 >> 4 & 15 | m4 & 240, (m4 & 15) << 4 | m4 & 15, 1) : l5 === 8 ? rgba(m4 >> 24 & 255, m4 >> 16 & 255, m4 >> 8 & 255, (m4 & 255) / 255) : l5 === 4 ? rgba(m4 >> 12 & 15 | m4 >> 8 & 240, m4 >> 8 & 15 | m4 >> 4 & 240, m4 >> 4 & 15 | m4 & 240, ((m4 & 15) << 4 | m4 & 15) / 255) : null) : (m4 = reRgbInteger.exec(format2)) ? new Rgb(m4[1], m4[2], m4[3], 1) : (m4 = reRgbPercent.exec(format2)) ? new Rgb(m4[1] * 255 / 100, m4[2] * 255 / 100, m4[3] * 255 / 100, 1) : (m4 = reRgbaInteger.exec(format2)) ? rgba(m4[1], m4[2], m4[3], m4[4]) : (m4 = reRgbaPercent.exec(format2)) ? rgba(m4[1] * 255 / 100, m4[2] * 255 / 100, m4[3] * 255 / 100, m4[4]) : (m4 = reHslPercent.exec(format2)) ? hsla(m4[1], m4[2] / 100, m4[3] / 100, 1) : (m4 = reHslaPercent.exec(format2)) ? hsla(m4[1], m4[2] / 100, m4[3] / 100, m4[4]) : named.hasOwnProperty(format2) ? rgbn(named[format2]) : format2 === "transparent" ? new Rgb(NaN, NaN, NaN, 0) : null;
  }
  function rgbn(n4) {
    return new Rgb(n4 >> 16 & 255, n4 >> 8 & 255, n4 & 255, 1);
  }
  function rgba(r4, g4, b2, a5) {
    if (a5 <= 0)
      r4 = g4 = b2 = NaN;
    return new Rgb(r4, g4, b2, a5);
  }
  function rgbConvert(o5) {
    if (!(o5 instanceof Color))
      o5 = color(o5);
    if (!o5)
      return new Rgb();
    o5 = o5.rgb();
    return new Rgb(o5.r, o5.g, o5.b, o5.opacity);
  }
  function rgb(r4, g4, b2, opacity) {
    return arguments.length === 1 ? rgbConvert(r4) : new Rgb(r4, g4, b2, opacity == null ? 1 : opacity);
  }
  function Rgb(r4, g4, b2, opacity) {
    this.r = +r4;
    this.g = +g4;
    this.b = +b2;
    this.opacity = +opacity;
  }
  define_default(Rgb, rgb, extend(Color, {
    brighter(k4) {
      k4 = k4 == null ? brighter : Math.pow(brighter, k4);
      return new Rgb(this.r * k4, this.g * k4, this.b * k4, this.opacity);
    },
    darker(k4) {
      k4 = k4 == null ? darker : Math.pow(darker, k4);
      return new Rgb(this.r * k4, this.g * k4, this.b * k4, this.opacity);
    },
    rgb() {
      return this;
    },
    clamp() {
      return new Rgb(clampi(this.r), clampi(this.g), clampi(this.b), clampa(this.opacity));
    },
    displayable() {
      return -0.5 <= this.r && this.r < 255.5 && (-0.5 <= this.g && this.g < 255.5) && (-0.5 <= this.b && this.b < 255.5) && (0 <= this.opacity && this.opacity <= 1);
    },
    hex: rgb_formatHex,
    // Deprecated! Use color.formatHex.
    formatHex: rgb_formatHex,
    formatHex8: rgb_formatHex8,
    formatRgb: rgb_formatRgb,
    toString: rgb_formatRgb
  }));
  function rgb_formatHex() {
    return `#${hex(this.r)}${hex(this.g)}${hex(this.b)}`;
  }
  function rgb_formatHex8() {
    return `#${hex(this.r)}${hex(this.g)}${hex(this.b)}${hex((isNaN(this.opacity) ? 1 : this.opacity) * 255)}`;
  }
  function rgb_formatRgb() {
    const a5 = clampa(this.opacity);
    return `${a5 === 1 ? "rgb(" : "rgba("}${clampi(this.r)}, ${clampi(this.g)}, ${clampi(this.b)}${a5 === 1 ? ")" : `, ${a5})`}`;
  }
  function clampa(opacity) {
    return isNaN(opacity) ? 1 : Math.max(0, Math.min(1, opacity));
  }
  function clampi(value) {
    return Math.max(0, Math.min(255, Math.round(value) || 0));
  }
  function hex(value) {
    value = clampi(value);
    return (value < 16 ? "0" : "") + value.toString(16);
  }
  function hsla(h4, s4, l5, a5) {
    if (a5 <= 0)
      h4 = s4 = l5 = NaN;
    else if (l5 <= 0 || l5 >= 1)
      h4 = s4 = NaN;
    else if (s4 <= 0)
      h4 = NaN;
    return new Hsl(h4, s4, l5, a5);
  }
  function hslConvert(o5) {
    if (o5 instanceof Hsl)
      return new Hsl(o5.h, o5.s, o5.l, o5.opacity);
    if (!(o5 instanceof Color))
      o5 = color(o5);
    if (!o5)
      return new Hsl();
    if (o5 instanceof Hsl)
      return o5;
    o5 = o5.rgb();
    var r4 = o5.r / 255, g4 = o5.g / 255, b2 = o5.b / 255, min5 = Math.min(r4, g4, b2), max6 = Math.max(r4, g4, b2), h4 = NaN, s4 = max6 - min5, l5 = (max6 + min5) / 2;
    if (s4) {
      if (r4 === max6)
        h4 = (g4 - b2) / s4 + (g4 < b2) * 6;
      else if (g4 === max6)
        h4 = (b2 - r4) / s4 + 2;
      else
        h4 = (r4 - g4) / s4 + 4;
      s4 /= l5 < 0.5 ? max6 + min5 : 2 - max6 - min5;
      h4 *= 60;
    } else {
      s4 = l5 > 0 && l5 < 1 ? 0 : h4;
    }
    return new Hsl(h4, s4, l5, o5.opacity);
  }
  function hsl(h4, s4, l5, opacity) {
    return arguments.length === 1 ? hslConvert(h4) : new Hsl(h4, s4, l5, opacity == null ? 1 : opacity);
  }
  function Hsl(h4, s4, l5, opacity) {
    this.h = +h4;
    this.s = +s4;
    this.l = +l5;
    this.opacity = +opacity;
  }
  define_default(Hsl, hsl, extend(Color, {
    brighter(k4) {
      k4 = k4 == null ? brighter : Math.pow(brighter, k4);
      return new Hsl(this.h, this.s, this.l * k4, this.opacity);
    },
    darker(k4) {
      k4 = k4 == null ? darker : Math.pow(darker, k4);
      return new Hsl(this.h, this.s, this.l * k4, this.opacity);
    },
    rgb() {
      var h4 = this.h % 360 + (this.h < 0) * 360, s4 = isNaN(h4) || isNaN(this.s) ? 0 : this.s, l5 = this.l, m22 = l5 + (l5 < 0.5 ? l5 : 1 - l5) * s4, m1 = 2 * l5 - m22;
      return new Rgb(
        hsl2rgb(h4 >= 240 ? h4 - 240 : h4 + 120, m1, m22),
        hsl2rgb(h4, m1, m22),
        hsl2rgb(h4 < 120 ? h4 + 240 : h4 - 120, m1, m22),
        this.opacity
      );
    },
    clamp() {
      return new Hsl(clamph(this.h), clampt(this.s), clampt(this.l), clampa(this.opacity));
    },
    displayable() {
      return (0 <= this.s && this.s <= 1 || isNaN(this.s)) && (0 <= this.l && this.l <= 1) && (0 <= this.opacity && this.opacity <= 1);
    },
    formatHsl() {
      const a5 = clampa(this.opacity);
      return `${a5 === 1 ? "hsl(" : "hsla("}${clamph(this.h)}, ${clampt(this.s) * 100}%, ${clampt(this.l) * 100}%${a5 === 1 ? ")" : `, ${a5})`}`;
    }
  }));
  function clamph(value) {
    value = (value || 0) % 360;
    return value < 0 ? value + 360 : value;
  }
  function clampt(value) {
    return Math.max(0, Math.min(1, value || 0));
  }
  function hsl2rgb(h4, m1, m22) {
    return (h4 < 60 ? m1 + (m22 - m1) * h4 / 60 : h4 < 180 ? m22 : h4 < 240 ? m1 + (m22 - m1) * (240 - h4) / 60 : m1) * 255;
  }

  // ../node_modules/d3-interpolate/src/basis.js
  function basis(t1, v0, v1, v22, v32) {
    var t22 = t1 * t1, t32 = t22 * t1;
    return ((1 - 3 * t1 + 3 * t22 - t32) * v0 + (4 - 6 * t22 + 3 * t32) * v1 + (1 + 3 * t1 + 3 * t22 - 3 * t32) * v22 + t32 * v32) / 6;
  }
  function basis_default(values3) {
    var n4 = values3.length - 1;
    return function(t4) {
      var i5 = t4 <= 0 ? t4 = 0 : t4 >= 1 ? (t4 = 1, n4 - 1) : Math.floor(t4 * n4), v1 = values3[i5], v22 = values3[i5 + 1], v0 = i5 > 0 ? values3[i5 - 1] : 2 * v1 - v22, v32 = i5 < n4 - 1 ? values3[i5 + 2] : 2 * v22 - v1;
      return basis((t4 - i5 / n4) * n4, v0, v1, v22, v32);
    };
  }

  // ../node_modules/d3-interpolate/src/basisClosed.js
  function basisClosed_default(values3) {
    var n4 = values3.length;
    return function(t4) {
      var i5 = Math.floor(((t4 %= 1) < 0 ? ++t4 : t4) * n4), v0 = values3[(i5 + n4 - 1) % n4], v1 = values3[i5 % n4], v22 = values3[(i5 + 1) % n4], v32 = values3[(i5 + 2) % n4];
      return basis((t4 - i5 / n4) * n4, v0, v1, v22, v32);
    };
  }

  // ../node_modules/d3-interpolate/src/constant.js
  var constant_default2 = (x5) => () => x5;

  // ../node_modules/d3-interpolate/src/color.js
  function linear(a5, d4) {
    return function(t4) {
      return a5 + t4 * d4;
    };
  }
  function exponential(a5, b2, y5) {
    return a5 = Math.pow(a5, y5), b2 = Math.pow(b2, y5) - a5, y5 = 1 / y5, function(t4) {
      return Math.pow(a5 + t4 * b2, y5);
    };
  }
  function gamma(y5) {
    return (y5 = +y5) === 1 ? nogamma : function(a5, b2) {
      return b2 - a5 ? exponential(a5, b2, y5) : constant_default2(isNaN(a5) ? b2 : a5);
    };
  }
  function nogamma(a5, b2) {
    var d4 = b2 - a5;
    return d4 ? linear(a5, d4) : constant_default2(isNaN(a5) ? b2 : a5);
  }

  // ../node_modules/d3-interpolate/src/rgb.js
  var rgb_default = function rgbGamma(y5) {
    var color2 = gamma(y5);
    function rgb2(start2, end) {
      var r4 = color2((start2 = rgb(start2)).r, (end = rgb(end)).r), g4 = color2(start2.g, end.g), b2 = color2(start2.b, end.b), opacity = nogamma(start2.opacity, end.opacity);
      return function(t4) {
        start2.r = r4(t4);
        start2.g = g4(t4);
        start2.b = b2(t4);
        start2.opacity = opacity(t4);
        return start2 + "";
      };
    }
    rgb2.gamma = rgbGamma;
    return rgb2;
  }(1);
  function rgbSpline(spline) {
    return function(colors) {
      var n4 = colors.length, r4 = new Array(n4), g4 = new Array(n4), b2 = new Array(n4), i5, color2;
      for (i5 = 0; i5 < n4; ++i5) {
        color2 = rgb(colors[i5]);
        r4[i5] = color2.r || 0;
        g4[i5] = color2.g || 0;
        b2[i5] = color2.b || 0;
      }
      r4 = spline(r4);
      g4 = spline(g4);
      b2 = spline(b2);
      color2.opacity = 1;
      return function(t4) {
        color2.r = r4(t4);
        color2.g = g4(t4);
        color2.b = b2(t4);
        return color2 + "";
      };
    };
  }
  var rgbBasis = rgbSpline(basis_default);
  var rgbBasisClosed = rgbSpline(basisClosed_default);

  // ../node_modules/d3-interpolate/src/numberArray.js
  function numberArray_default(a5, b2) {
    if (!b2)
      b2 = [];
    var n4 = a5 ? Math.min(b2.length, a5.length) : 0, c4 = b2.slice(), i5;
    return function(t4) {
      for (i5 = 0; i5 < n4; ++i5)
        c4[i5] = a5[i5] * (1 - t4) + b2[i5] * t4;
      return c4;
    };
  }
  function isNumberArray(x5) {
    return ArrayBuffer.isView(x5) && !(x5 instanceof DataView);
  }

  // ../node_modules/d3-interpolate/src/array.js
  function genericArray(a5, b2) {
    var nb = b2 ? b2.length : 0, na2 = a5 ? Math.min(nb, a5.length) : 0, x5 = new Array(na2), c4 = new Array(nb), i5;
    for (i5 = 0; i5 < na2; ++i5)
      x5[i5] = value_default(a5[i5], b2[i5]);
    for (; i5 < nb; ++i5)
      c4[i5] = b2[i5];
    return function(t4) {
      for (i5 = 0; i5 < na2; ++i5)
        c4[i5] = x5[i5](t4);
      return c4;
    };
  }

  // ../node_modules/d3-interpolate/src/date.js
  function date_default(a5, b2) {
    var d4 = /* @__PURE__ */ new Date();
    return a5 = +a5, b2 = +b2, function(t4) {
      return d4.setTime(a5 * (1 - t4) + b2 * t4), d4;
    };
  }

  // ../node_modules/d3-interpolate/src/number.js
  function number_default(a5, b2) {
    return a5 = +a5, b2 = +b2, function(t4) {
      return a5 * (1 - t4) + b2 * t4;
    };
  }

  // ../node_modules/d3-interpolate/src/object.js
  function object_default(a5, b2) {
    var i5 = {}, c4 = {}, k4;
    if (a5 === null || typeof a5 !== "object")
      a5 = {};
    if (b2 === null || typeof b2 !== "object")
      b2 = {};
    for (k4 in b2) {
      if (k4 in a5) {
        i5[k4] = value_default(a5[k4], b2[k4]);
      } else {
        c4[k4] = b2[k4];
      }
    }
    return function(t4) {
      for (k4 in i5)
        c4[k4] = i5[k4](t4);
      return c4;
    };
  }

  // ../node_modules/d3-interpolate/src/string.js
  var reA = /[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g;
  var reB = new RegExp(reA.source, "g");
  function zero2(b2) {
    return function() {
      return b2;
    };
  }
  function one(b2) {
    return function(t4) {
      return b2(t4) + "";
    };
  }
  function string_default(a5, b2) {
    var bi2 = reA.lastIndex = reB.lastIndex = 0, am, bm, bs2, i5 = -1, s4 = [], q4 = [];
    a5 = a5 + "", b2 = b2 + "";
    while ((am = reA.exec(a5)) && (bm = reB.exec(b2))) {
      if ((bs2 = bm.index) > bi2) {
        bs2 = b2.slice(bi2, bs2);
        if (s4[i5])
          s4[i5] += bs2;
        else
          s4[++i5] = bs2;
      }
      if ((am = am[0]) === (bm = bm[0])) {
        if (s4[i5])
          s4[i5] += bm;
        else
          s4[++i5] = bm;
      } else {
        s4[++i5] = null;
        q4.push({ i: i5, x: number_default(am, bm) });
      }
      bi2 = reB.lastIndex;
    }
    if (bi2 < b2.length) {
      bs2 = b2.slice(bi2);
      if (s4[i5])
        s4[i5] += bs2;
      else
        s4[++i5] = bs2;
    }
    return s4.length < 2 ? q4[0] ? one(q4[0].x) : zero2(b2) : (b2 = q4.length, function(t4) {
      for (var i6 = 0, o5; i6 < b2; ++i6)
        s4[(o5 = q4[i6]).i] = o5.x(t4);
      return s4.join("");
    });
  }

  // ../node_modules/d3-interpolate/src/value.js
  function value_default(a5, b2) {
    var t4 = typeof b2, c4;
    return b2 == null || t4 === "boolean" ? constant_default2(b2) : (t4 === "number" ? number_default : t4 === "string" ? (c4 = color(b2)) ? (b2 = c4, rgb_default) : string_default : b2 instanceof color ? rgb_default : b2 instanceof Date ? date_default : isNumberArray(b2) ? numberArray_default : Array.isArray(b2) ? genericArray : typeof b2.valueOf !== "function" && typeof b2.toString !== "function" || isNaN(b2) ? object_default : number_default)(a5, b2);
  }

  // ../node_modules/d3-interpolate/src/round.js
  function round_default(a5, b2) {
    return a5 = +a5, b2 = +b2, function(t4) {
      return Math.round(a5 * (1 - t4) + b2 * t4);
    };
  }

  // ../node_modules/d3-interpolate/src/transform/decompose.js
  var degrees = 180 / Math.PI;
  var identity2 = {
    translateX: 0,
    translateY: 0,
    rotate: 0,
    skewX: 0,
    scaleX: 1,
    scaleY: 1
  };
  function decompose_default(a5, b2, c4, d4, e6, f4) {
    var scaleX, scaleY, skewX;
    if (scaleX = Math.sqrt(a5 * a5 + b2 * b2))
      a5 /= scaleX, b2 /= scaleX;
    if (skewX = a5 * c4 + b2 * d4)
      c4 -= a5 * skewX, d4 -= b2 * skewX;
    if (scaleY = Math.sqrt(c4 * c4 + d4 * d4))
      c4 /= scaleY, d4 /= scaleY, skewX /= scaleY;
    if (a5 * d4 < b2 * c4)
      a5 = -a5, b2 = -b2, skewX = -skewX, scaleX = -scaleX;
    return {
      translateX: e6,
      translateY: f4,
      rotate: Math.atan2(b2, a5) * degrees,
      skewX: Math.atan(skewX) * degrees,
      scaleX,
      scaleY
    };
  }

  // ../node_modules/d3-interpolate/src/transform/parse.js
  var svgNode;
  function parseCss(value) {
    const m4 = new (typeof DOMMatrix === "function" ? DOMMatrix : WebKitCSSMatrix)(value + "");
    return m4.isIdentity ? identity2 : decompose_default(m4.a, m4.b, m4.c, m4.d, m4.e, m4.f);
  }
  function parseSvg(value) {
    if (value == null)
      return identity2;
    if (!svgNode)
      svgNode = document.createElementNS("http://www.w3.org/2000/svg", "g");
    svgNode.setAttribute("transform", value);
    if (!(value = svgNode.transform.baseVal.consolidate()))
      return identity2;
    value = value.matrix;
    return decompose_default(value.a, value.b, value.c, value.d, value.e, value.f);
  }

  // ../node_modules/d3-interpolate/src/transform/index.js
  function interpolateTransform(parse, pxComma, pxParen, degParen) {
    function pop(s4) {
      return s4.length ? s4.pop() + " " : "";
    }
    function translate2(xa, ya, xb, yb, s4, q4) {
      if (xa !== xb || ya !== yb) {
        var i5 = s4.push("translate(", null, pxComma, null, pxParen);
        q4.push({ i: i5 - 4, x: number_default(xa, xb) }, { i: i5 - 2, x: number_default(ya, yb) });
      } else if (xb || yb) {
        s4.push("translate(" + xb + pxComma + yb + pxParen);
      }
    }
    function rotate(a5, b2, s4, q4) {
      if (a5 !== b2) {
        if (a5 - b2 > 180)
          b2 += 360;
        else if (b2 - a5 > 180)
          a5 += 360;
        q4.push({ i: s4.push(pop(s4) + "rotate(", null, degParen) - 2, x: number_default(a5, b2) });
      } else if (b2) {
        s4.push(pop(s4) + "rotate(" + b2 + degParen);
      }
    }
    function skewX(a5, b2, s4, q4) {
      if (a5 !== b2) {
        q4.push({ i: s4.push(pop(s4) + "skewX(", null, degParen) - 2, x: number_default(a5, b2) });
      } else if (b2) {
        s4.push(pop(s4) + "skewX(" + b2 + degParen);
      }
    }
    function scale(xa, ya, xb, yb, s4, q4) {
      if (xa !== xb || ya !== yb) {
        var i5 = s4.push(pop(s4) + "scale(", null, ",", null, ")");
        q4.push({ i: i5 - 4, x: number_default(xa, xb) }, { i: i5 - 2, x: number_default(ya, yb) });
      } else if (xb !== 1 || yb !== 1) {
        s4.push(pop(s4) + "scale(" + xb + "," + yb + ")");
      }
    }
    return function(a5, b2) {
      var s4 = [], q4 = [];
      a5 = parse(a5), b2 = parse(b2);
      translate2(a5.translateX, a5.translateY, b2.translateX, b2.translateY, s4, q4);
      rotate(a5.rotate, b2.rotate, s4, q4);
      skewX(a5.skewX, b2.skewX, s4, q4);
      scale(a5.scaleX, a5.scaleY, b2.scaleX, b2.scaleY, s4, q4);
      a5 = b2 = null;
      return function(t4) {
        var i5 = -1, n4 = q4.length, o5;
        while (++i5 < n4)
          s4[(o5 = q4[i5]).i] = o5.x(t4);
        return s4.join("");
      };
    };
  }
  var interpolateTransformCss = interpolateTransform(parseCss, "px, ", "px)", "deg)");
  var interpolateTransformSvg = interpolateTransform(parseSvg, ", ", ")", ")");

  // ../node_modules/d3-timer/src/timer.js
  var frame = 0;
  var timeout = 0;
  var interval = 0;
  var pokeDelay = 1e3;
  var taskHead;
  var taskTail;
  var clockLast = 0;
  var clockNow = 0;
  var clockSkew = 0;
  var clock = typeof performance === "object" && performance.now ? performance : Date;
  var setFrame = typeof window === "object" && window.requestAnimationFrame ? window.requestAnimationFrame.bind(window) : function(f4) {
    setTimeout(f4, 17);
  };
  function now() {
    return clockNow || (setFrame(clearNow), clockNow = clock.now() + clockSkew);
  }
  function clearNow() {
    clockNow = 0;
  }
  function Timer() {
    this._call = this._time = this._next = null;
  }
  Timer.prototype = timer.prototype = {
    constructor: Timer,
    restart: function(callback, delay, time) {
      if (typeof callback !== "function")
        throw new TypeError("callback is not a function");
      time = (time == null ? now() : +time) + (delay == null ? 0 : +delay);
      if (!this._next && taskTail !== this) {
        if (taskTail)
          taskTail._next = this;
        else
          taskHead = this;
        taskTail = this;
      }
      this._call = callback;
      this._time = time;
      sleep();
    },
    stop: function() {
      if (this._call) {
        this._call = null;
        this._time = Infinity;
        sleep();
      }
    }
  };
  function timer(callback, delay, time) {
    var t4 = new Timer();
    t4.restart(callback, delay, time);
    return t4;
  }
  function timerFlush() {
    now();
    ++frame;
    var t4 = taskHead, e6;
    while (t4) {
      if ((e6 = clockNow - t4._time) >= 0)
        t4._call.call(void 0, e6);
      t4 = t4._next;
    }
    --frame;
  }
  function wake() {
    clockNow = (clockLast = clock.now()) + clockSkew;
    frame = timeout = 0;
    try {
      timerFlush();
    } finally {
      frame = 0;
      nap();
      clockNow = 0;
    }
  }
  function poke() {
    var now2 = clock.now(), delay = now2 - clockLast;
    if (delay > pokeDelay)
      clockSkew -= delay, clockLast = now2;
  }
  function nap() {
    var t0, t1 = taskHead, t22, time = Infinity;
    while (t1) {
      if (t1._call) {
        if (time > t1._time)
          time = t1._time;
        t0 = t1, t1 = t1._next;
      } else {
        t22 = t1._next, t1._next = null;
        t1 = t0 ? t0._next = t22 : taskHead = t22;
      }
    }
    taskTail = t0;
    sleep(time);
  }
  function sleep(time) {
    if (frame)
      return;
    if (timeout)
      timeout = clearTimeout(timeout);
    var delay = time - clockNow;
    if (delay > 24) {
      if (time < Infinity)
        timeout = setTimeout(wake, time - clock.now() - clockSkew);
      if (interval)
        interval = clearInterval(interval);
    } else {
      if (!interval)
        clockLast = clock.now(), interval = setInterval(poke, pokeDelay);
      frame = 1, setFrame(wake);
    }
  }

  // ../node_modules/d3-timer/src/timeout.js
  function timeout_default(callback, delay, time) {
    var t4 = new Timer();
    delay = delay == null ? 0 : +delay;
    t4.restart((elapsed) => {
      t4.stop();
      callback(elapsed + delay);
    }, delay, time);
    return t4;
  }

  // ../node_modules/d3-transition/src/transition/schedule.js
  var emptyOn = dispatch_default("start", "end", "cancel", "interrupt");
  var emptyTween = [];
  var CREATED = 0;
  var SCHEDULED = 1;
  var STARTING = 2;
  var STARTED = 3;
  var RUNNING = 4;
  var ENDING = 5;
  var ENDED = 6;
  function schedule_default(node, name, id3, index, group, timing) {
    var schedules = node.__transition;
    if (!schedules)
      node.__transition = {};
    else if (id3 in schedules)
      return;
    create(node, id3, {
      name,
      index,
      // For context during callback.
      group,
      // For context during callback.
      on: emptyOn,
      tween: emptyTween,
      time: timing.time,
      delay: timing.delay,
      duration: timing.duration,
      ease: timing.ease,
      timer: null,
      state: CREATED
    });
  }
  function init(node, id3) {
    var schedule = get12(node, id3);
    if (schedule.state > CREATED)
      throw new Error("too late; already scheduled");
    return schedule;
  }
  function set4(node, id3) {
    var schedule = get12(node, id3);
    if (schedule.state > STARTED)
      throw new Error("too late; already running");
    return schedule;
  }
  function get12(node, id3) {
    var schedule = node.__transition;
    if (!schedule || !(schedule = schedule[id3]))
      throw new Error("transition not found");
    return schedule;
  }
  function create(node, id3, self2) {
    var schedules = node.__transition, tween;
    schedules[id3] = self2;
    self2.timer = timer(schedule, 0, self2.time);
    function schedule(elapsed) {
      self2.state = SCHEDULED;
      self2.timer.restart(start2, self2.delay, self2.time);
      if (self2.delay <= elapsed)
        start2(elapsed - self2.delay);
    }
    function start2(elapsed) {
      var i5, j4, n4, o5;
      if (self2.state !== SCHEDULED)
        return stop();
      for (i5 in schedules) {
        o5 = schedules[i5];
        if (o5.name !== self2.name)
          continue;
        if (o5.state === STARTED)
          return timeout_default(start2);
        if (o5.state === RUNNING) {
          o5.state = ENDED;
          o5.timer.stop();
          o5.on.call("interrupt", node, node.__data__, o5.index, o5.group);
          delete schedules[i5];
        } else if (+i5 < id3) {
          o5.state = ENDED;
          o5.timer.stop();
          o5.on.call("cancel", node, node.__data__, o5.index, o5.group);
          delete schedules[i5];
        }
      }
      timeout_default(function() {
        if (self2.state === STARTED) {
          self2.state = RUNNING;
          self2.timer.restart(tick, self2.delay, self2.time);
          tick(elapsed);
        }
      });
      self2.state = STARTING;
      self2.on.call("start", node, node.__data__, self2.index, self2.group);
      if (self2.state !== STARTING)
        return;
      self2.state = STARTED;
      tween = new Array(n4 = self2.tween.length);
      for (i5 = 0, j4 = -1; i5 < n4; ++i5) {
        if (o5 = self2.tween[i5].value.call(node, node.__data__, self2.index, self2.group)) {
          tween[++j4] = o5;
        }
      }
      tween.length = j4 + 1;
    }
    function tick(elapsed) {
      var t4 = elapsed < self2.duration ? self2.ease.call(null, elapsed / self2.duration) : (self2.timer.restart(stop), self2.state = ENDING, 1), i5 = -1, n4 = tween.length;
      while (++i5 < n4) {
        tween[i5].call(node, t4);
      }
      if (self2.state === ENDING) {
        self2.on.call("end", node, node.__data__, self2.index, self2.group);
        stop();
      }
    }
    function stop() {
      self2.state = ENDED;
      self2.timer.stop();
      delete schedules[id3];
      for (var i5 in schedules)
        return;
      delete node.__transition;
    }
  }

  // ../node_modules/d3-transition/src/interrupt.js
  function interrupt_default(node, name) {
    var schedules = node.__transition, schedule, active, empty2 = true, i5;
    if (!schedules)
      return;
    name = name == null ? null : name + "";
    for (i5 in schedules) {
      if ((schedule = schedules[i5]).name !== name) {
        empty2 = false;
        continue;
      }
      active = schedule.state > STARTING && schedule.state < ENDING;
      schedule.state = ENDED;
      schedule.timer.stop();
      schedule.on.call(active ? "interrupt" : "cancel", node, node.__data__, schedule.index, schedule.group);
      delete schedules[i5];
    }
    if (empty2)
      delete node.__transition;
  }

  // ../node_modules/d3-transition/src/selection/interrupt.js
  function interrupt_default2(name) {
    return this.each(function() {
      interrupt_default(this, name);
    });
  }

  // ../node_modules/d3-transition/src/transition/tween.js
  function tweenRemove(id3, name) {
    var tween0, tween1;
    return function() {
      var schedule = set4(this, id3), tween = schedule.tween;
      if (tween !== tween0) {
        tween1 = tween0 = tween;
        for (var i5 = 0, n4 = tween1.length; i5 < n4; ++i5) {
          if (tween1[i5].name === name) {
            tween1 = tween1.slice();
            tween1.splice(i5, 1);
            break;
          }
        }
      }
      schedule.tween = tween1;
    };
  }
  function tweenFunction(id3, name, value) {
    var tween0, tween1;
    if (typeof value !== "function")
      throw new Error();
    return function() {
      var schedule = set4(this, id3), tween = schedule.tween;
      if (tween !== tween0) {
        tween1 = (tween0 = tween).slice();
        for (var t4 = { name, value }, i5 = 0, n4 = tween1.length; i5 < n4; ++i5) {
          if (tween1[i5].name === name) {
            tween1[i5] = t4;
            break;
          }
        }
        if (i5 === n4)
          tween1.push(t4);
      }
      schedule.tween = tween1;
    };
  }
  function tween_default(name, value) {
    var id3 = this._id;
    name += "";
    if (arguments.length < 2) {
      var tween = get12(this.node(), id3).tween;
      for (var i5 = 0, n4 = tween.length, t4; i5 < n4; ++i5) {
        if ((t4 = tween[i5]).name === name) {
          return t4.value;
        }
      }
      return null;
    }
    return this.each((value == null ? tweenRemove : tweenFunction)(id3, name, value));
  }
  function tweenValue(transition2, name, value) {
    var id3 = transition2._id;
    transition2.each(function() {
      var schedule = set4(this, id3);
      (schedule.value || (schedule.value = {}))[name] = value.apply(this, arguments);
    });
    return function(node) {
      return get12(node, id3).value[name];
    };
  }

  // ../node_modules/d3-transition/src/transition/interpolate.js
  function interpolate_default(a5, b2) {
    var c4;
    return (typeof b2 === "number" ? number_default : b2 instanceof color ? rgb_default : (c4 = color(b2)) ? (b2 = c4, rgb_default) : string_default)(a5, b2);
  }

  // ../node_modules/d3-transition/src/transition/attr.js
  function attrRemove2(name) {
    return function() {
      this.removeAttribute(name);
    };
  }
  function attrRemoveNS2(fullname) {
    return function() {
      this.removeAttributeNS(fullname.space, fullname.local);
    };
  }
  function attrConstant2(name, interpolate, value1) {
    var string00, string1 = value1 + "", interpolate0;
    return function() {
      var string0 = this.getAttribute(name);
      return string0 === string1 ? null : string0 === string00 ? interpolate0 : interpolate0 = interpolate(string00 = string0, value1);
    };
  }
  function attrConstantNS2(fullname, interpolate, value1) {
    var string00, string1 = value1 + "", interpolate0;
    return function() {
      var string0 = this.getAttributeNS(fullname.space, fullname.local);
      return string0 === string1 ? null : string0 === string00 ? interpolate0 : interpolate0 = interpolate(string00 = string0, value1);
    };
  }
  function attrFunction2(name, interpolate, value) {
    var string00, string10, interpolate0;
    return function() {
      var string0, value1 = value(this), string1;
      if (value1 == null)
        return void this.removeAttribute(name);
      string0 = this.getAttribute(name);
      string1 = value1 + "";
      return string0 === string1 ? null : string0 === string00 && string1 === string10 ? interpolate0 : (string10 = string1, interpolate0 = interpolate(string00 = string0, value1));
    };
  }
  function attrFunctionNS2(fullname, interpolate, value) {
    var string00, string10, interpolate0;
    return function() {
      var string0, value1 = value(this), string1;
      if (value1 == null)
        return void this.removeAttributeNS(fullname.space, fullname.local);
      string0 = this.getAttributeNS(fullname.space, fullname.local);
      string1 = value1 + "";
      return string0 === string1 ? null : string0 === string00 && string1 === string10 ? interpolate0 : (string10 = string1, interpolate0 = interpolate(string00 = string0, value1));
    };
  }
  function attr_default2(name, value) {
    var fullname = namespace_default(name), i5 = fullname === "transform" ? interpolateTransformSvg : interpolate_default;
    return this.attrTween(name, typeof value === "function" ? (fullname.local ? attrFunctionNS2 : attrFunction2)(fullname, i5, tweenValue(this, "attr." + name, value)) : value == null ? (fullname.local ? attrRemoveNS2 : attrRemove2)(fullname) : (fullname.local ? attrConstantNS2 : attrConstant2)(fullname, i5, value));
  }

  // ../node_modules/d3-transition/src/transition/attrTween.js
  function attrInterpolate(name, i5) {
    return function(t4) {
      this.setAttribute(name, i5.call(this, t4));
    };
  }
  function attrInterpolateNS(fullname, i5) {
    return function(t4) {
      this.setAttributeNS(fullname.space, fullname.local, i5.call(this, t4));
    };
  }
  function attrTweenNS(fullname, value) {
    var t0, i0;
    function tween() {
      var i5 = value.apply(this, arguments);
      if (i5 !== i0)
        t0 = (i0 = i5) && attrInterpolateNS(fullname, i5);
      return t0;
    }
    tween._value = value;
    return tween;
  }
  function attrTween(name, value) {
    var t0, i0;
    function tween() {
      var i5 = value.apply(this, arguments);
      if (i5 !== i0)
        t0 = (i0 = i5) && attrInterpolate(name, i5);
      return t0;
    }
    tween._value = value;
    return tween;
  }
  function attrTween_default(name, value) {
    var key = "attr." + name;
    if (arguments.length < 2)
      return (key = this.tween(key)) && key._value;
    if (value == null)
      return this.tween(key, null);
    if (typeof value !== "function")
      throw new Error();
    var fullname = namespace_default(name);
    return this.tween(key, (fullname.local ? attrTweenNS : attrTween)(fullname, value));
  }

  // ../node_modules/d3-transition/src/transition/delay.js
  function delayFunction(id3, value) {
    return function() {
      init(this, id3).delay = +value.apply(this, arguments);
    };
  }
  function delayConstant(id3, value) {
    return value = +value, function() {
      init(this, id3).delay = value;
    };
  }
  function delay_default(value) {
    var id3 = this._id;
    return arguments.length ? this.each((typeof value === "function" ? delayFunction : delayConstant)(id3, value)) : get12(this.node(), id3).delay;
  }

  // ../node_modules/d3-transition/src/transition/duration.js
  function durationFunction(id3, value) {
    return function() {
      set4(this, id3).duration = +value.apply(this, arguments);
    };
  }
  function durationConstant(id3, value) {
    return value = +value, function() {
      set4(this, id3).duration = value;
    };
  }
  function duration_default(value) {
    var id3 = this._id;
    return arguments.length ? this.each((typeof value === "function" ? durationFunction : durationConstant)(id3, value)) : get12(this.node(), id3).duration;
  }

  // ../node_modules/d3-transition/src/transition/ease.js
  function easeConstant(id3, value) {
    if (typeof value !== "function")
      throw new Error();
    return function() {
      set4(this, id3).ease = value;
    };
  }
  function ease_default(value) {
    var id3 = this._id;
    return arguments.length ? this.each(easeConstant(id3, value)) : get12(this.node(), id3).ease;
  }

  // ../node_modules/d3-transition/src/transition/easeVarying.js
  function easeVarying(id3, value) {
    return function() {
      var v4 = value.apply(this, arguments);
      if (typeof v4 !== "function")
        throw new Error();
      set4(this, id3).ease = v4;
    };
  }
  function easeVarying_default(value) {
    if (typeof value !== "function")
      throw new Error();
    return this.each(easeVarying(this._id, value));
  }

  // ../node_modules/d3-transition/src/transition/filter.js
  function filter_default2(match) {
    if (typeof match !== "function")
      match = matcher_default(match);
    for (var groups = this._groups, m4 = groups.length, subgroups = new Array(m4), j4 = 0; j4 < m4; ++j4) {
      for (var group = groups[j4], n4 = group.length, subgroup = subgroups[j4] = [], node, i5 = 0; i5 < n4; ++i5) {
        if ((node = group[i5]) && match.call(node, node.__data__, i5, group)) {
          subgroup.push(node);
        }
      }
    }
    return new Transition(subgroups, this._parents, this._name, this._id);
  }

  // ../node_modules/d3-transition/src/transition/merge.js
  function merge_default2(transition2) {
    if (transition2._id !== this._id)
      throw new Error();
    for (var groups0 = this._groups, groups1 = transition2._groups, m0 = groups0.length, m1 = groups1.length, m4 = Math.min(m0, m1), merges = new Array(m0), j4 = 0; j4 < m4; ++j4) {
      for (var group0 = groups0[j4], group1 = groups1[j4], n4 = group0.length, merge2 = merges[j4] = new Array(n4), node, i5 = 0; i5 < n4; ++i5) {
        if (node = group0[i5] || group1[i5]) {
          merge2[i5] = node;
        }
      }
    }
    for (; j4 < m0; ++j4) {
      merges[j4] = groups0[j4];
    }
    return new Transition(merges, this._parents, this._name, this._id);
  }

  // ../node_modules/d3-transition/src/transition/on.js
  function start(name) {
    return (name + "").trim().split(/^|\s+/).every(function(t4) {
      var i5 = t4.indexOf(".");
      if (i5 >= 0)
        t4 = t4.slice(0, i5);
      return !t4 || t4 === "start";
    });
  }
  function onFunction(id3, name, listener) {
    var on0, on1, sit = start(name) ? init : set4;
    return function() {
      var schedule = sit(this, id3), on2 = schedule.on;
      if (on2 !== on0)
        (on1 = (on0 = on2).copy()).on(name, listener);
      schedule.on = on1;
    };
  }
  function on_default2(name, listener) {
    var id3 = this._id;
    return arguments.length < 2 ? get12(this.node(), id3).on.on(name) : this.each(onFunction(id3, name, listener));
  }

  // ../node_modules/d3-transition/src/transition/remove.js
  function removeFunction(id3) {
    return function() {
      var parent = this.parentNode;
      for (var i5 in this.__transition)
        if (+i5 !== id3)
          return;
      if (parent)
        parent.removeChild(this);
    };
  }
  function remove_default2() {
    return this.on("end.remove", removeFunction(this._id));
  }

  // ../node_modules/d3-transition/src/transition/select.js
  function select_default3(select2) {
    var name = this._name, id3 = this._id;
    if (typeof select2 !== "function")
      select2 = selector_default(select2);
    for (var groups = this._groups, m4 = groups.length, subgroups = new Array(m4), j4 = 0; j4 < m4; ++j4) {
      for (var group = groups[j4], n4 = group.length, subgroup = subgroups[j4] = new Array(n4), node, subnode, i5 = 0; i5 < n4; ++i5) {
        if ((node = group[i5]) && (subnode = select2.call(node, node.__data__, i5, group))) {
          if ("__data__" in node)
            subnode.__data__ = node.__data__;
          subgroup[i5] = subnode;
          schedule_default(subgroup[i5], name, id3, i5, subgroup, get12(node, id3));
        }
      }
    }
    return new Transition(subgroups, this._parents, name, id3);
  }

  // ../node_modules/d3-transition/src/transition/selectAll.js
  function selectAll_default2(select2) {
    var name = this._name, id3 = this._id;
    if (typeof select2 !== "function")
      select2 = selectorAll_default(select2);
    for (var groups = this._groups, m4 = groups.length, subgroups = [], parents = [], j4 = 0; j4 < m4; ++j4) {
      for (var group = groups[j4], n4 = group.length, node, i5 = 0; i5 < n4; ++i5) {
        if (node = group[i5]) {
          for (var children2 = select2.call(node, node.__data__, i5, group), child, inherit2 = get12(node, id3), k4 = 0, l5 = children2.length; k4 < l5; ++k4) {
            if (child = children2[k4]) {
              schedule_default(child, name, id3, k4, children2, inherit2);
            }
          }
          subgroups.push(children2);
          parents.push(node);
        }
      }
    }
    return new Transition(subgroups, parents, name, id3);
  }

  // ../node_modules/d3-transition/src/transition/selection.js
  var Selection2 = selection_default.prototype.constructor;
  function selection_default2() {
    return new Selection2(this._groups, this._parents);
  }

  // ../node_modules/d3-transition/src/transition/style.js
  function styleNull(name, interpolate) {
    var string00, string10, interpolate0;
    return function() {
      var string0 = styleValue(this, name), string1 = (this.style.removeProperty(name), styleValue(this, name));
      return string0 === string1 ? null : string0 === string00 && string1 === string10 ? interpolate0 : interpolate0 = interpolate(string00 = string0, string10 = string1);
    };
  }
  function styleRemove2(name) {
    return function() {
      this.style.removeProperty(name);
    };
  }
  function styleConstant2(name, interpolate, value1) {
    var string00, string1 = value1 + "", interpolate0;
    return function() {
      var string0 = styleValue(this, name);
      return string0 === string1 ? null : string0 === string00 ? interpolate0 : interpolate0 = interpolate(string00 = string0, value1);
    };
  }
  function styleFunction2(name, interpolate, value) {
    var string00, string10, interpolate0;
    return function() {
      var string0 = styleValue(this, name), value1 = value(this), string1 = value1 + "";
      if (value1 == null)
        string1 = value1 = (this.style.removeProperty(name), styleValue(this, name));
      return string0 === string1 ? null : string0 === string00 && string1 === string10 ? interpolate0 : (string10 = string1, interpolate0 = interpolate(string00 = string0, value1));
    };
  }
  function styleMaybeRemove(id3, name) {
    var on0, on1, listener0, key = "style." + name, event = "end." + key, remove7;
    return function() {
      var schedule = set4(this, id3), on2 = schedule.on, listener = schedule.value[key] == null ? remove7 || (remove7 = styleRemove2(name)) : void 0;
      if (on2 !== on0 || listener0 !== listener)
        (on1 = (on0 = on2).copy()).on(event, listener0 = listener);
      schedule.on = on1;
    };
  }
  function style_default2(name, value, priority) {
    var i5 = (name += "") === "transform" ? interpolateTransformCss : interpolate_default;
    return value == null ? this.styleTween(name, styleNull(name, i5)).on("end.style." + name, styleRemove2(name)) : typeof value === "function" ? this.styleTween(name, styleFunction2(name, i5, tweenValue(this, "style." + name, value))).each(styleMaybeRemove(this._id, name)) : this.styleTween(name, styleConstant2(name, i5, value), priority).on("end.style." + name, null);
  }

  // ../node_modules/d3-transition/src/transition/styleTween.js
  function styleInterpolate(name, i5, priority) {
    return function(t4) {
      this.style.setProperty(name, i5.call(this, t4), priority);
    };
  }
  function styleTween(name, value, priority) {
    var t4, i0;
    function tween() {
      var i5 = value.apply(this, arguments);
      if (i5 !== i0)
        t4 = (i0 = i5) && styleInterpolate(name, i5, priority);
      return t4;
    }
    tween._value = value;
    return tween;
  }
  function styleTween_default(name, value, priority) {
    var key = "style." + (name += "");
    if (arguments.length < 2)
      return (key = this.tween(key)) && key._value;
    if (value == null)
      return this.tween(key, null);
    if (typeof value !== "function")
      throw new Error();
    return this.tween(key, styleTween(name, value, priority == null ? "" : priority));
  }

  // ../node_modules/d3-transition/src/transition/text.js
  function textConstant2(value) {
    return function() {
      this.textContent = value;
    };
  }
  function textFunction2(value) {
    return function() {
      var value1 = value(this);
      this.textContent = value1 == null ? "" : value1;
    };
  }
  function text_default2(value) {
    return this.tween("text", typeof value === "function" ? textFunction2(tweenValue(this, "text", value)) : textConstant2(value == null ? "" : value + ""));
  }

  // ../node_modules/d3-transition/src/transition/textTween.js
  function textInterpolate(i5) {
    return function(t4) {
      this.textContent = i5.call(this, t4);
    };
  }
  function textTween(value) {
    var t0, i0;
    function tween() {
      var i5 = value.apply(this, arguments);
      if (i5 !== i0)
        t0 = (i0 = i5) && textInterpolate(i5);
      return t0;
    }
    tween._value = value;
    return tween;
  }
  function textTween_default(value) {
    var key = "text";
    if (arguments.length < 1)
      return (key = this.tween(key)) && key._value;
    if (value == null)
      return this.tween(key, null);
    if (typeof value !== "function")
      throw new Error();
    return this.tween(key, textTween(value));
  }

  // ../node_modules/d3-transition/src/transition/transition.js
  function transition_default() {
    var name = this._name, id0 = this._id, id1 = newId();
    for (var groups = this._groups, m4 = groups.length, j4 = 0; j4 < m4; ++j4) {
      for (var group = groups[j4], n4 = group.length, node, i5 = 0; i5 < n4; ++i5) {
        if (node = group[i5]) {
          var inherit2 = get12(node, id0);
          schedule_default(node, name, id1, i5, group, {
            time: inherit2.time + inherit2.delay + inherit2.duration,
            delay: 0,
            duration: inherit2.duration,
            ease: inherit2.ease
          });
        }
      }
    }
    return new Transition(groups, this._parents, name, id1);
  }

  // ../node_modules/d3-transition/src/transition/end.js
  function end_default() {
    var on0, on1, that = this, id3 = that._id, size2 = that.size();
    return new Promise(function(resolve, reject) {
      var cancel = { value: reject }, end = { value: function() {
        if (--size2 === 0)
          resolve();
      } };
      that.each(function() {
        var schedule = set4(this, id3), on2 = schedule.on;
        if (on2 !== on0) {
          on1 = (on0 = on2).copy();
          on1._.cancel.push(cancel);
          on1._.interrupt.push(cancel);
          on1._.end.push(end);
        }
        schedule.on = on1;
      });
      if (size2 === 0)
        resolve();
    });
  }

  // ../node_modules/d3-transition/src/transition/index.js
  var id = 0;
  function Transition(groups, parents, name, id3) {
    this._groups = groups;
    this._parents = parents;
    this._name = name;
    this._id = id3;
  }
  function transition(name) {
    return selection_default().transition(name);
  }
  function newId() {
    return ++id;
  }
  var selection_prototype = selection_default.prototype;
  Transition.prototype = transition.prototype = {
    constructor: Transition,
    select: select_default3,
    selectAll: selectAll_default2,
    selectChild: selection_prototype.selectChild,
    selectChildren: selection_prototype.selectChildren,
    filter: filter_default2,
    merge: merge_default2,
    selection: selection_default2,
    transition: transition_default,
    call: selection_prototype.call,
    nodes: selection_prototype.nodes,
    node: selection_prototype.node,
    size: selection_prototype.size,
    empty: selection_prototype.empty,
    each: selection_prototype.each,
    on: on_default2,
    attr: attr_default2,
    attrTween: attrTween_default,
    style: style_default2,
    styleTween: styleTween_default,
    text: text_default2,
    textTween: textTween_default,
    remove: remove_default2,
    tween: tween_default,
    delay: delay_default,
    duration: duration_default,
    ease: ease_default,
    easeVarying: easeVarying_default,
    end: end_default,
    [Symbol.iterator]: selection_prototype[Symbol.iterator]
  };

  // ../node_modules/d3-ease/src/cubic.js
  function cubicInOut(t4) {
    return ((t4 *= 2) <= 1 ? t4 * t4 * t4 : (t4 -= 2) * t4 * t4 + 2) / 2;
  }

  // ../node_modules/d3-transition/src/selection/transition.js
  var defaultTiming = {
    time: null,
    // Set on use.
    delay: 0,
    duration: 250,
    ease: cubicInOut
  };
  function inherit(node, id3) {
    var timing;
    while (!(timing = node.__transition) || !(timing = timing[id3])) {
      if (!(node = node.parentNode)) {
        throw new Error(`transition ${id3} not found`);
      }
    }
    return timing;
  }
  function transition_default2(name) {
    var id3, timing;
    if (name instanceof Transition) {
      id3 = name._id, name = name._name;
    } else {
      id3 = newId(), (timing = defaultTiming).time = now(), name = name == null ? null : name + "";
    }
    for (var groups = this._groups, m4 = groups.length, j4 = 0; j4 < m4; ++j4) {
      for (var group = groups[j4], n4 = group.length, node, i5 = 0; i5 < n4; ++i5) {
        if (node = group[i5]) {
          schedule_default(node, name, id3, i5, group, timing || inherit(node, id3));
        }
      }
    }
    return new Transition(groups, this._parents, name, id3);
  }

  // ../node_modules/d3-transition/src/selection/index.js
  selection_default.prototype.interrupt = interrupt_default2;
  selection_default.prototype.transition = transition_default2;

  // ../node_modules/d3-brush/src/brush.js
  var { abs, max: max3, min: min2 } = Math;
  function number1(e6) {
    return [+e6[0], +e6[1]];
  }
  function number22(e6) {
    return [number1(e6[0]), number1(e6[1])];
  }
  var X = {
    name: "x",
    handles: ["w", "e"].map(type),
    input: function(x5, e6) {
      return x5 == null ? null : [[+x5[0], e6[0][1]], [+x5[1], e6[1][1]]];
    },
    output: function(xy) {
      return xy && [xy[0][0], xy[1][0]];
    }
  };
  var Y = {
    name: "y",
    handles: ["n", "s"].map(type),
    input: function(y5, e6) {
      return y5 == null ? null : [[e6[0][0], +y5[0]], [e6[1][0], +y5[1]]];
    },
    output: function(xy) {
      return xy && [xy[0][1], xy[1][1]];
    }
  };
  var XY = {
    name: "xy",
    handles: ["n", "w", "e", "s", "nw", "ne", "sw", "se"].map(type),
    input: function(xy) {
      return xy == null ? null : number22(xy);
    },
    output: function(xy) {
      return xy;
    }
  };
  function type(t4) {
    return { type: t4 };
  }

  // ../node_modules/d3-path/src/path.js
  var pi = Math.PI;
  var tau = 2 * pi;
  var epsilon2 = 1e-6;
  var tauEpsilon = tau - epsilon2;
  function append(strings) {
    this._ += strings[0];
    for (let i5 = 1, n4 = strings.length; i5 < n4; ++i5) {
      this._ += arguments[i5] + strings[i5];
    }
  }
  function appendRound(digits) {
    let d4 = Math.floor(digits);
    if (!(d4 >= 0))
      throw new Error(`invalid digits: ${digits}`);
    if (d4 > 15)
      return append;
    const k4 = 10 ** d4;
    return function(strings) {
      this._ += strings[0];
      for (let i5 = 1, n4 = strings.length; i5 < n4; ++i5) {
        this._ += Math.round(arguments[i5] * k4) / k4 + strings[i5];
      }
    };
  }
  var Path = class {
    constructor(digits) {
      this._x0 = this._y0 = // start of current subpath
      this._x1 = this._y1 = null;
      this._ = "";
      this._append = digits == null ? append : appendRound(digits);
    }
    moveTo(x5, y5) {
      this._append`M${this._x0 = this._x1 = +x5},${this._y0 = this._y1 = +y5}`;
    }
    closePath() {
      if (this._x1 !== null) {
        this._x1 = this._x0, this._y1 = this._y0;
        this._append`Z`;
      }
    }
    lineTo(x5, y5) {
      this._append`L${this._x1 = +x5},${this._y1 = +y5}`;
    }
    quadraticCurveTo(x1, y1, x5, y5) {
      this._append`Q${+x1},${+y1},${this._x1 = +x5},${this._y1 = +y5}`;
    }
    bezierCurveTo(x1, y1, x22, y22, x5, y5) {
      this._append`C${+x1},${+y1},${+x22},${+y22},${this._x1 = +x5},${this._y1 = +y5}`;
    }
    arcTo(x1, y1, x22, y22, r4) {
      x1 = +x1, y1 = +y1, x22 = +x22, y22 = +y22, r4 = +r4;
      if (r4 < 0)
        throw new Error(`negative radius: ${r4}`);
      let x0 = this._x1, y0 = this._y1, x21 = x22 - x1, y21 = y22 - y1, x01 = x0 - x1, y01 = y0 - y1, l01_2 = x01 * x01 + y01 * y01;
      if (this._x1 === null) {
        this._append`M${this._x1 = x1},${this._y1 = y1}`;
      } else if (!(l01_2 > epsilon2))
        ;
      else if (!(Math.abs(y01 * x21 - y21 * x01) > epsilon2) || !r4) {
        this._append`L${this._x1 = x1},${this._y1 = y1}`;
      } else {
        let x20 = x22 - x0, y20 = y22 - y0, l21_2 = x21 * x21 + y21 * y21, l20_2 = x20 * x20 + y20 * y20, l21 = Math.sqrt(l21_2), l01 = Math.sqrt(l01_2), l5 = r4 * Math.tan((pi - Math.acos((l21_2 + l01_2 - l20_2) / (2 * l21 * l01))) / 2), t01 = l5 / l01, t21 = l5 / l21;
        if (Math.abs(t01 - 1) > epsilon2) {
          this._append`L${x1 + t01 * x01},${y1 + t01 * y01}`;
        }
        this._append`A${r4},${r4},0,0,${+(y01 * x20 > x01 * y20)},${this._x1 = x1 + t21 * x21},${this._y1 = y1 + t21 * y21}`;
      }
    }
    arc(x5, y5, r4, a0, a1, ccw) {
      x5 = +x5, y5 = +y5, r4 = +r4, ccw = !!ccw;
      if (r4 < 0)
        throw new Error(`negative radius: ${r4}`);
      let dx = r4 * Math.cos(a0), dy = r4 * Math.sin(a0), x0 = x5 + dx, y0 = y5 + dy, cw = 1 ^ ccw, da2 = ccw ? a0 - a1 : a1 - a0;
      if (this._x1 === null) {
        this._append`M${x0},${y0}`;
      } else if (Math.abs(this._x1 - x0) > epsilon2 || Math.abs(this._y1 - y0) > epsilon2) {
        this._append`L${x0},${y0}`;
      }
      if (!r4)
        return;
      if (da2 < 0)
        da2 = da2 % tau + tau;
      if (da2 > tauEpsilon) {
        this._append`A${r4},${r4},0,1,${cw},${x5 - dx},${y5 - dy}A${r4},${r4},0,1,${cw},${this._x1 = x0},${this._y1 = y0}`;
      } else if (da2 > epsilon2) {
        this._append`A${r4},${r4},0,${+(da2 >= pi)},${cw},${this._x1 = x5 + r4 * Math.cos(a1)},${this._y1 = y5 + r4 * Math.sin(a1)}`;
      }
    }
    rect(x5, y5, w4, h4) {
      this._append`M${this._x0 = this._x1 = +x5},${this._y0 = this._y1 = +y5}h${w4 = +w4}v${+h4}h${-w4}Z`;
    }
    toString() {
      return this._;
    }
  };
  function path() {
    return new Path();
  }
  path.prototype = Path.prototype;

  // ../node_modules/d3-format/src/formatDecimal.js
  function formatDecimal_default(x5) {
    return Math.abs(x5 = Math.round(x5)) >= 1e21 ? x5.toLocaleString("en").replace(/,/g, "") : x5.toString(10);
  }
  function formatDecimalParts(x5, p5) {
    if ((i5 = (x5 = p5 ? x5.toExponential(p5 - 1) : x5.toExponential()).indexOf("e")) < 0)
      return null;
    var i5, coefficient = x5.slice(0, i5);
    return [
      coefficient.length > 1 ? coefficient[0] + coefficient.slice(2) : coefficient,
      +x5.slice(i5 + 1)
    ];
  }

  // ../node_modules/d3-format/src/exponent.js
  function exponent_default(x5) {
    return x5 = formatDecimalParts(Math.abs(x5)), x5 ? x5[1] : NaN;
  }

  // ../node_modules/d3-format/src/formatGroup.js
  function formatGroup_default(grouping, thousands) {
    return function(value, width) {
      var i5 = value.length, t4 = [], j4 = 0, g4 = grouping[0], length = 0;
      while (i5 > 0 && g4 > 0) {
        if (length + g4 + 1 > width)
          g4 = Math.max(1, width - length);
        t4.push(value.substring(i5 -= g4, i5 + g4));
        if ((length += g4 + 1) > width)
          break;
        g4 = grouping[j4 = (j4 + 1) % grouping.length];
      }
      return t4.reverse().join(thousands);
    };
  }

  // ../node_modules/d3-format/src/formatNumerals.js
  function formatNumerals_default(numerals) {
    return function(value) {
      return value.replace(/[0-9]/g, function(i5) {
        return numerals[+i5];
      });
    };
  }

  // ../node_modules/d3-format/src/formatSpecifier.js
  var re = /^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;
  function formatSpecifier(specifier) {
    if (!(match = re.exec(specifier)))
      throw new Error("invalid format: " + specifier);
    var match;
    return new FormatSpecifier({
      fill: match[1],
      align: match[2],
      sign: match[3],
      symbol: match[4],
      zero: match[5],
      width: match[6],
      comma: match[7],
      precision: match[8] && match[8].slice(1),
      trim: match[9],
      type: match[10]
    });
  }
  formatSpecifier.prototype = FormatSpecifier.prototype;
  function FormatSpecifier(specifier) {
    this.fill = specifier.fill === void 0 ? " " : specifier.fill + "";
    this.align = specifier.align === void 0 ? ">" : specifier.align + "";
    this.sign = specifier.sign === void 0 ? "-" : specifier.sign + "";
    this.symbol = specifier.symbol === void 0 ? "" : specifier.symbol + "";
    this.zero = !!specifier.zero;
    this.width = specifier.width === void 0 ? void 0 : +specifier.width;
    this.comma = !!specifier.comma;
    this.precision = specifier.precision === void 0 ? void 0 : +specifier.precision;
    this.trim = !!specifier.trim;
    this.type = specifier.type === void 0 ? "" : specifier.type + "";
  }
  FormatSpecifier.prototype.toString = function() {
    return this.fill + this.align + this.sign + this.symbol + (this.zero ? "0" : "") + (this.width === void 0 ? "" : Math.max(1, this.width | 0)) + (this.comma ? "," : "") + (this.precision === void 0 ? "" : "." + Math.max(0, this.precision | 0)) + (this.trim ? "~" : "") + this.type;
  };

  // ../node_modules/d3-format/src/formatTrim.js
  function formatTrim_default(s4) {
    out:
      for (var n4 = s4.length, i5 = 1, i0 = -1, i1; i5 < n4; ++i5) {
        switch (s4[i5]) {
          case ".":
            i0 = i1 = i5;
            break;
          case "0":
            if (i0 === 0)
              i0 = i5;
            i1 = i5;
            break;
          default:
            if (!+s4[i5])
              break out;
            if (i0 > 0)
              i0 = 0;
            break;
        }
      }
    return i0 > 0 ? s4.slice(0, i0) + s4.slice(i1 + 1) : s4;
  }

  // ../node_modules/d3-format/src/formatPrefixAuto.js
  var prefixExponent;
  function formatPrefixAuto_default(x5, p5) {
    var d4 = formatDecimalParts(x5, p5);
    if (!d4)
      return x5 + "";
    var coefficient = d4[0], exponent = d4[1], i5 = exponent - (prefixExponent = Math.max(-8, Math.min(8, Math.floor(exponent / 3))) * 3) + 1, n4 = coefficient.length;
    return i5 === n4 ? coefficient : i5 > n4 ? coefficient + new Array(i5 - n4 + 1).join("0") : i5 > 0 ? coefficient.slice(0, i5) + "." + coefficient.slice(i5) : "0." + new Array(1 - i5).join("0") + formatDecimalParts(x5, Math.max(0, p5 + i5 - 1))[0];
  }

  // ../node_modules/d3-format/src/formatRounded.js
  function formatRounded_default(x5, p5) {
    var d4 = formatDecimalParts(x5, p5);
    if (!d4)
      return x5 + "";
    var coefficient = d4[0], exponent = d4[1];
    return exponent < 0 ? "0." + new Array(-exponent).join("0") + coefficient : coefficient.length > exponent + 1 ? coefficient.slice(0, exponent + 1) + "." + coefficient.slice(exponent + 1) : coefficient + new Array(exponent - coefficient.length + 2).join("0");
  }

  // ../node_modules/d3-format/src/formatTypes.js
  var formatTypes_default = {
    "%": (x5, p5) => (x5 * 100).toFixed(p5),
    "b": (x5) => Math.round(x5).toString(2),
    "c": (x5) => x5 + "",
    "d": formatDecimal_default,
    "e": (x5, p5) => x5.toExponential(p5),
    "f": (x5, p5) => x5.toFixed(p5),
    "g": (x5, p5) => x5.toPrecision(p5),
    "o": (x5) => Math.round(x5).toString(8),
    "p": (x5, p5) => formatRounded_default(x5 * 100, p5),
    "r": formatRounded_default,
    "s": formatPrefixAuto_default,
    "X": (x5) => Math.round(x5).toString(16).toUpperCase(),
    "x": (x5) => Math.round(x5).toString(16)
  };

  // ../node_modules/d3-format/src/identity.js
  function identity_default2(x5) {
    return x5;
  }

  // ../node_modules/d3-format/src/locale.js
  var map3 = Array.prototype.map;
  var prefixes = ["y", "z", "a", "f", "p", "n", "\xB5", "m", "", "k", "M", "G", "T", "P", "E", "Z", "Y"];
  function locale_default(locale2) {
    var group = locale2.grouping === void 0 || locale2.thousands === void 0 ? identity_default2 : formatGroup_default(map3.call(locale2.grouping, Number), locale2.thousands + ""), currencyPrefix = locale2.currency === void 0 ? "" : locale2.currency[0] + "", currencySuffix = locale2.currency === void 0 ? "" : locale2.currency[1] + "", decimal = locale2.decimal === void 0 ? "." : locale2.decimal + "", numerals = locale2.numerals === void 0 ? identity_default2 : formatNumerals_default(map3.call(locale2.numerals, String)), percent = locale2.percent === void 0 ? "%" : locale2.percent + "", minus = locale2.minus === void 0 ? "\u2212" : locale2.minus + "", nan = locale2.nan === void 0 ? "NaN" : locale2.nan + "";
    function newFormat(specifier) {
      specifier = formatSpecifier(specifier);
      var fill = specifier.fill, align = specifier.align, sign = specifier.sign, symbol = specifier.symbol, zero3 = specifier.zero, width = specifier.width, comma = specifier.comma, precision = specifier.precision, trim = specifier.trim, type2 = specifier.type;
      if (type2 === "n")
        comma = true, type2 = "g";
      else if (!formatTypes_default[type2])
        precision === void 0 && (precision = 12), trim = true, type2 = "g";
      if (zero3 || fill === "0" && align === "=")
        zero3 = true, fill = "0", align = "=";
      var prefix = symbol === "$" ? currencyPrefix : symbol === "#" && /[boxX]/.test(type2) ? "0" + type2.toLowerCase() : "", suffix = symbol === "$" ? currencySuffix : /[%p]/.test(type2) ? percent : "";
      var formatType = formatTypes_default[type2], maybeSuffix = /[defgprs%]/.test(type2);
      precision = precision === void 0 ? 6 : /[gprs]/.test(type2) ? Math.max(1, Math.min(21, precision)) : Math.max(0, Math.min(20, precision));
      function format2(value) {
        var valuePrefix = prefix, valueSuffix = suffix, i5, n4, c4;
        if (type2 === "c") {
          valueSuffix = formatType(value) + valueSuffix;
          value = "";
        } else {
          value = +value;
          var valueNegative = value < 0 || 1 / value < 0;
          value = isNaN(value) ? nan : formatType(Math.abs(value), precision);
          if (trim)
            value = formatTrim_default(value);
          if (valueNegative && +value === 0 && sign !== "+")
            valueNegative = false;
          valuePrefix = (valueNegative ? sign === "(" ? sign : minus : sign === "-" || sign === "(" ? "" : sign) + valuePrefix;
          valueSuffix = (type2 === "s" ? prefixes[8 + prefixExponent / 3] : "") + valueSuffix + (valueNegative && sign === "(" ? ")" : "");
          if (maybeSuffix) {
            i5 = -1, n4 = value.length;
            while (++i5 < n4) {
              if (c4 = value.charCodeAt(i5), 48 > c4 || c4 > 57) {
                valueSuffix = (c4 === 46 ? decimal + value.slice(i5 + 1) : value.slice(i5)) + valueSuffix;
                value = value.slice(0, i5);
                break;
              }
            }
          }
        }
        if (comma && !zero3)
          value = group(value, Infinity);
        var length = valuePrefix.length + value.length + valueSuffix.length, padding = length < width ? new Array(width - length + 1).join(fill) : "";
        if (comma && zero3)
          value = group(padding + value, padding.length ? width - valueSuffix.length : Infinity), padding = "";
        switch (align) {
          case "<":
            value = valuePrefix + value + valueSuffix + padding;
            break;
          case "=":
            value = valuePrefix + padding + value + valueSuffix;
            break;
          case "^":
            value = padding.slice(0, length = padding.length >> 1) + valuePrefix + value + valueSuffix + padding.slice(length);
            break;
          default:
            value = padding + valuePrefix + value + valueSuffix;
            break;
        }
        return numerals(value);
      }
      format2.toString = function() {
        return specifier + "";
      };
      return format2;
    }
    function formatPrefix2(specifier, value) {
      var f4 = newFormat((specifier = formatSpecifier(specifier), specifier.type = "f", specifier)), e6 = Math.max(-8, Math.min(8, Math.floor(exponent_default(value) / 3))) * 3, k4 = Math.pow(10, -e6), prefix = prefixes[8 + e6 / 3];
      return function(value2) {
        return f4(k4 * value2) + prefix;
      };
    }
    return {
      format: newFormat,
      formatPrefix: formatPrefix2
    };
  }

  // ../node_modules/d3-format/src/defaultLocale.js
  var locale;
  var format;
  var formatPrefix;
  defaultLocale({
    thousands: ",",
    grouping: [3],
    currency: ["$", ""]
  });
  function defaultLocale(definition) {
    locale = locale_default(definition);
    format = locale.format;
    formatPrefix = locale.formatPrefix;
    return locale;
  }

  // ../node_modules/d3-format/src/precisionFixed.js
  function precisionFixed_default(step) {
    return Math.max(0, -exponent_default(Math.abs(step)));
  }

  // ../node_modules/d3-format/src/precisionPrefix.js
  function precisionPrefix_default(step, value) {
    return Math.max(0, Math.max(-8, Math.min(8, Math.floor(exponent_default(value) / 3))) * 3 - exponent_default(Math.abs(step)));
  }

  // ../node_modules/d3-format/src/precisionRound.js
  function precisionRound_default(step, max6) {
    step = Math.abs(step), max6 = Math.abs(max6) - step;
    return Math.max(0, exponent_default(max6) - exponent_default(step)) + 1;
  }

  // ../node_modules/d3-scale/src/init.js
  function initRange(domain, range) {
    switch (arguments.length) {
      case 0:
        break;
      case 1:
        this.range(domain);
        break;
      default:
        this.range(range).domain(domain);
        break;
    }
    return this;
  }

  // ../node_modules/d3-scale/src/constant.js
  function constants(x5) {
    return function() {
      return x5;
    };
  }

  // ../node_modules/d3-scale/src/number.js
  function number3(x5) {
    return +x5;
  }

  // ../node_modules/d3-scale/src/continuous.js
  var unit = [0, 1];
  function identity3(x5) {
    return x5;
  }
  function normalize(a5, b2) {
    return (b2 -= a5 = +a5) ? function(x5) {
      return (x5 - a5) / b2;
    } : constants(isNaN(b2) ? NaN : 0.5);
  }
  function clamper(a5, b2) {
    var t4;
    if (a5 > b2)
      t4 = a5, a5 = b2, b2 = t4;
    return function(x5) {
      return Math.max(a5, Math.min(b2, x5));
    };
  }
  function bimap(domain, range, interpolate) {
    var d0 = domain[0], d1 = domain[1], r0 = range[0], r1 = range[1];
    if (d1 < d0)
      d0 = normalize(d1, d0), r0 = interpolate(r1, r0);
    else
      d0 = normalize(d0, d1), r0 = interpolate(r0, r1);
    return function(x5) {
      return r0(d0(x5));
    };
  }
  function polymap(domain, range, interpolate) {
    var j4 = Math.min(domain.length, range.length) - 1, d4 = new Array(j4), r4 = new Array(j4), i5 = -1;
    if (domain[j4] < domain[0]) {
      domain = domain.slice().reverse();
      range = range.slice().reverse();
    }
    while (++i5 < j4) {
      d4[i5] = normalize(domain[i5], domain[i5 + 1]);
      r4[i5] = interpolate(range[i5], range[i5 + 1]);
    }
    return function(x5) {
      var i6 = bisect_default(domain, x5, 1, j4) - 1;
      return r4[i6](d4[i6](x5));
    };
  }
  function copy(source, target) {
    return target.domain(source.domain()).range(source.range()).interpolate(source.interpolate()).clamp(source.clamp()).unknown(source.unknown());
  }
  function transformer() {
    var domain = unit, range = unit, interpolate = value_default, transform2, untransform, unknown, clamp2 = identity3, piecewise, output, input;
    function rescale() {
      var n4 = Math.min(domain.length, range.length);
      if (clamp2 !== identity3)
        clamp2 = clamper(domain[0], domain[n4 - 1]);
      piecewise = n4 > 2 ? polymap : bimap;
      output = input = null;
      return scale;
    }
    function scale(x5) {
      return x5 == null || isNaN(x5 = +x5) ? unknown : (output || (output = piecewise(domain.map(transform2), range, interpolate)))(transform2(clamp2(x5)));
    }
    scale.invert = function(y5) {
      return clamp2(untransform((input || (input = piecewise(range, domain.map(transform2), number_default)))(y5)));
    };
    scale.domain = function(_3) {
      return arguments.length ? (domain = Array.from(_3, number3), rescale()) : domain.slice();
    };
    scale.range = function(_3) {
      return arguments.length ? (range = Array.from(_3), rescale()) : range.slice();
    };
    scale.rangeRound = function(_3) {
      return range = Array.from(_3), interpolate = round_default, rescale();
    };
    scale.clamp = function(_3) {
      return arguments.length ? (clamp2 = _3 ? true : identity3, rescale()) : clamp2 !== identity3;
    };
    scale.interpolate = function(_3) {
      return arguments.length ? (interpolate = _3, rescale()) : interpolate;
    };
    scale.unknown = function(_3) {
      return arguments.length ? (unknown = _3, scale) : unknown;
    };
    return function(t4, u4) {
      transform2 = t4, untransform = u4;
      return rescale();
    };
  }
  function continuous() {
    return transformer()(identity3, identity3);
  }

  // ../node_modules/d3-scale/src/tickFormat.js
  function tickFormat(start2, stop, count4, specifier) {
    var step = tickStep(start2, stop, count4), precision;
    specifier = formatSpecifier(specifier == null ? ",f" : specifier);
    switch (specifier.type) {
      case "s": {
        var value = Math.max(Math.abs(start2), Math.abs(stop));
        if (specifier.precision == null && !isNaN(precision = precisionPrefix_default(step, value)))
          specifier.precision = precision;
        return formatPrefix(specifier, value);
      }
      case "":
      case "e":
      case "g":
      case "p":
      case "r": {
        if (specifier.precision == null && !isNaN(precision = precisionRound_default(step, Math.max(Math.abs(start2), Math.abs(stop)))))
          specifier.precision = precision - (specifier.type === "e");
        break;
      }
      case "f":
      case "%": {
        if (specifier.precision == null && !isNaN(precision = precisionFixed_default(step)))
          specifier.precision = precision - (specifier.type === "%") * 2;
        break;
      }
    }
    return format(specifier);
  }

  // ../node_modules/d3-scale/src/linear.js
  function linearish(scale) {
    var domain = scale.domain;
    scale.ticks = function(count4) {
      var d4 = domain();
      return ticks(d4[0], d4[d4.length - 1], count4 == null ? 10 : count4);
    };
    scale.tickFormat = function(count4, specifier) {
      var d4 = domain();
      return tickFormat(d4[0], d4[d4.length - 1], count4 == null ? 10 : count4, specifier);
    };
    scale.nice = function(count4) {
      if (count4 == null)
        count4 = 10;
      var d4 = domain();
      var i0 = 0;
      var i1 = d4.length - 1;
      var start2 = d4[i0];
      var stop = d4[i1];
      var prestep;
      var step;
      var maxIter = 10;
      if (stop < start2) {
        step = start2, start2 = stop, stop = step;
        step = i0, i0 = i1, i1 = step;
      }
      while (maxIter-- > 0) {
        step = tickIncrement(start2, stop, count4);
        if (step === prestep) {
          d4[i0] = start2;
          d4[i1] = stop;
          return domain(d4);
        } else if (step > 0) {
          start2 = Math.floor(start2 / step) * step;
          stop = Math.ceil(stop / step) * step;
        } else if (step < 0) {
          start2 = Math.ceil(start2 * step) / step;
          stop = Math.floor(stop * step) / step;
        } else {
          break;
        }
        prestep = step;
      }
      return scale;
    };
    return scale;
  }
  function linear2() {
    var scale = continuous();
    scale.copy = function() {
      return copy(scale, linear2());
    };
    initRange.apply(scale, arguments);
    return linearish(scale);
  }

  // ../node_modules/d3-shape/src/constant.js
  function constant_default4(x5) {
    return function constant2() {
      return x5;
    };
  }

  // ../node_modules/d3-shape/src/path.js
  function withPath(shape) {
    let digits = 3;
    shape.digits = function(_3) {
      if (!arguments.length)
        return digits;
      if (_3 == null) {
        digits = null;
      } else {
        const d4 = Math.floor(_3);
        if (!(d4 >= 0))
          throw new RangeError(`invalid digits: ${_3}`);
        digits = d4;
      }
      return shape;
    };
    return () => new Path(digits);
  }

  // ../node_modules/d3-shape/src/array.js
  var slice4 = Array.prototype.slice;
  function array_default(x5) {
    return typeof x5 === "object" && "length" in x5 ? x5 : Array.from(x5);
  }

  // ../node_modules/d3-shape/src/curve/linear.js
  function Linear(context) {
    this._context = context;
  }
  Linear.prototype = {
    areaStart: function() {
      this._line = 0;
    },
    areaEnd: function() {
      this._line = NaN;
    },
    lineStart: function() {
      this._point = 0;
    },
    lineEnd: function() {
      if (this._line || this._line !== 0 && this._point === 1)
        this._context.closePath();
      this._line = 1 - this._line;
    },
    point: function(x5, y5) {
      x5 = +x5, y5 = +y5;
      switch (this._point) {
        case 0:
          this._point = 1;
          this._line ? this._context.lineTo(x5, y5) : this._context.moveTo(x5, y5);
          break;
        case 1:
          this._point = 2;
        default:
          this._context.lineTo(x5, y5);
          break;
      }
    }
  };
  function linear_default(context) {
    return new Linear(context);
  }

  // ../node_modules/d3-shape/src/point.js
  function x3(p5) {
    return p5[0];
  }
  function y3(p5) {
    return p5[1];
  }

  // ../node_modules/d3-shape/src/line.js
  function line_default(x5, y5) {
    var defined2 = constant_default4(true), context = null, curve = linear_default, output = null, path2 = withPath(line);
    x5 = typeof x5 === "function" ? x5 : x5 === void 0 ? x3 : constant_default4(x5);
    y5 = typeof y5 === "function" ? y5 : y5 === void 0 ? y3 : constant_default4(y5);
    function line(data) {
      var i5, n4 = (data = array_default(data)).length, d4, defined0 = false, buffer;
      if (context == null)
        output = curve(buffer = path2());
      for (i5 = 0; i5 <= n4; ++i5) {
        if (!(i5 < n4 && defined2(d4 = data[i5], i5, data)) === defined0) {
          if (defined0 = !defined0)
            output.lineStart();
          else
            output.lineEnd();
        }
        if (defined0)
          output.point(+x5(d4, i5, data), +y5(d4, i5, data));
      }
      if (buffer)
        return output = null, buffer + "" || null;
    }
    line.x = function(_3) {
      return arguments.length ? (x5 = typeof _3 === "function" ? _3 : constant_default4(+_3), line) : x5;
    };
    line.y = function(_3) {
      return arguments.length ? (y5 = typeof _3 === "function" ? _3 : constant_default4(+_3), line) : y5;
    };
    line.defined = function(_3) {
      return arguments.length ? (defined2 = typeof _3 === "function" ? _3 : constant_default4(!!_3), line) : defined2;
    };
    line.curve = function(_3) {
      return arguments.length ? (curve = _3, context != null && (output = curve(context)), line) : curve;
    };
    line.context = function(_3) {
      return arguments.length ? (_3 == null ? context = output = null : output = curve(context = _3), line) : context;
    };
    return line;
  }

  // ../node_modules/d3-zoom/src/transform.js
  function Transform(k4, x5, y5) {
    this.k = k4;
    this.x = x5;
    this.y = y5;
  }
  Transform.prototype = {
    constructor: Transform,
    scale: function(k4) {
      return k4 === 1 ? this : new Transform(this.k * k4, this.x, this.y);
    },
    translate: function(x5, y5) {
      return x5 === 0 & y5 === 0 ? this : new Transform(this.k, this.x + this.k * x5, this.y + this.k * y5);
    },
    apply: function(point) {
      return [point[0] * this.k + this.x, point[1] * this.k + this.y];
    },
    applyX: function(x5) {
      return x5 * this.k + this.x;
    },
    applyY: function(y5) {
      return y5 * this.k + this.y;
    },
    invert: function(location2) {
      return [(location2[0] - this.x) / this.k, (location2[1] - this.y) / this.k];
    },
    invertX: function(x5) {
      return (x5 - this.x) / this.k;
    },
    invertY: function(y5) {
      return (y5 - this.y) / this.k;
    },
    rescaleX: function(x5) {
      return x5.copy().domain(x5.range().map(this.invertX, this).map(x5.invert, x5));
    },
    rescaleY: function(y5) {
      return y5.copy().domain(y5.range().map(this.invertY, this).map(y5.invert, y5));
    },
    toString: function() {
      return "translate(" + this.x + "," + this.y + ") scale(" + this.k + ")";
    }
  };
  var identity4 = new Transform(1, 0, 0);
  transform.prototype = Transform.prototype;
  function transform(node) {
    while (!node.__zoom)
      if (!(node = node.parentNode))
        return identity4;
    return node.__zoom;
  }

  // ../node_modules/@floating-ui/utils/dist/floating-ui.utils.mjs
  var min3 = Math.min;
  var max4 = Math.max;
  var round = Math.round;
  var createCoords = (v4) => ({
    x: v4,
    y: v4
  });
  var oppositeSideMap = {
    left: "right",
    right: "left",
    bottom: "top",
    top: "bottom"
  };
  var oppositeAlignmentMap = {
    start: "end",
    end: "start"
  };
  function evaluate(value, param) {
    return typeof value === "function" ? value(param) : value;
  }
  function getSide(placement) {
    return placement.split("-")[0];
  }
  function getAlignment(placement) {
    return placement.split("-")[1];
  }
  function getOppositeAxis(axis2) {
    return axis2 === "x" ? "y" : "x";
  }
  function getAxisLength(axis2) {
    return axis2 === "y" ? "height" : "width";
  }
  var yAxisSides = /* @__PURE__ */ new Set(["top", "bottom"]);
  function getSideAxis(placement) {
    return yAxisSides.has(getSide(placement)) ? "y" : "x";
  }
  function getAlignmentAxis(placement) {
    return getOppositeAxis(getSideAxis(placement));
  }
  function getAlignmentSides(placement, rects, rtl) {
    if (rtl === void 0) {
      rtl = false;
    }
    const alignment = getAlignment(placement);
    const alignmentAxis = getAlignmentAxis(placement);
    const length = getAxisLength(alignmentAxis);
    let mainAlignmentSide = alignmentAxis === "x" ? alignment === (rtl ? "end" : "start") ? "right" : "left" : alignment === "start" ? "bottom" : "top";
    if (rects.reference[length] > rects.floating[length]) {
      mainAlignmentSide = getOppositePlacement(mainAlignmentSide);
    }
    return [mainAlignmentSide, getOppositePlacement(mainAlignmentSide)];
  }
  function getExpandedPlacements(placement) {
    const oppositePlacement = getOppositePlacement(placement);
    return [getOppositeAlignmentPlacement(placement), oppositePlacement, getOppositeAlignmentPlacement(oppositePlacement)];
  }
  function getOppositeAlignmentPlacement(placement) {
    return placement.replace(/start|end/g, (alignment) => oppositeAlignmentMap[alignment]);
  }
  var lrPlacement = ["left", "right"];
  var rlPlacement = ["right", "left"];
  var tbPlacement = ["top", "bottom"];
  var btPlacement = ["bottom", "top"];
  function getSideList(side, isStart, rtl) {
    switch (side) {
      case "top":
      case "bottom":
        if (rtl)
          return isStart ? rlPlacement : lrPlacement;
        return isStart ? lrPlacement : rlPlacement;
      case "left":
      case "right":
        return isStart ? tbPlacement : btPlacement;
      default:
        return [];
    }
  }
  function getOppositeAxisPlacements(placement, flipAlignment, direction, rtl) {
    const alignment = getAlignment(placement);
    let list = getSideList(getSide(placement), direction === "start", rtl);
    if (alignment) {
      list = list.map((side) => side + "-" + alignment);
      if (flipAlignment) {
        list = list.concat(list.map(getOppositeAlignmentPlacement));
      }
    }
    return list;
  }
  function getOppositePlacement(placement) {
    return placement.replace(/left|right|bottom|top/g, (side) => oppositeSideMap[side]);
  }
  function expandPaddingObject(padding) {
    return {
      top: 0,
      right: 0,
      bottom: 0,
      left: 0,
      ...padding
    };
  }
  function getPaddingObject(padding) {
    return typeof padding !== "number" ? expandPaddingObject(padding) : {
      top: padding,
      right: padding,
      bottom: padding,
      left: padding
    };
  }
  function rectToClientRect(rect) {
    const {
      x: x5,
      y: y5,
      width,
      height
    } = rect;
    return {
      width,
      height,
      top: y5,
      left: x5,
      right: x5 + width,
      bottom: y5 + height,
      x: x5,
      y: y5
    };
  }

  // ../node_modules/@floating-ui/core/dist/floating-ui.core.mjs
  function computeCoordsFromPlacement(_ref, placement, rtl) {
    let {
      reference,
      floating
    } = _ref;
    const sideAxis = getSideAxis(placement);
    const alignmentAxis = getAlignmentAxis(placement);
    const alignLength = getAxisLength(alignmentAxis);
    const side = getSide(placement);
    const isVertical = sideAxis === "y";
    const commonX = reference.x + reference.width / 2 - floating.width / 2;
    const commonY = reference.y + reference.height / 2 - floating.height / 2;
    const commonAlign = reference[alignLength] / 2 - floating[alignLength] / 2;
    let coords;
    switch (side) {
      case "top":
        coords = {
          x: commonX,
          y: reference.y - floating.height
        };
        break;
      case "bottom":
        coords = {
          x: commonX,
          y: reference.y + reference.height
        };
        break;
      case "right":
        coords = {
          x: reference.x + reference.width,
          y: commonY
        };
        break;
      case "left":
        coords = {
          x: reference.x - floating.width,
          y: commonY
        };
        break;
      default:
        coords = {
          x: reference.x,
          y: reference.y
        };
    }
    switch (getAlignment(placement)) {
      case "start":
        coords[alignmentAxis] -= commonAlign * (rtl && isVertical ? -1 : 1);
        break;
      case "end":
        coords[alignmentAxis] += commonAlign * (rtl && isVertical ? -1 : 1);
        break;
    }
    return coords;
  }
  var computePosition = async (reference, floating, config) => {
    const {
      placement = "bottom",
      strategy = "absolute",
      middleware = [],
      platform: platform2
    } = config;
    const validMiddleware = middleware.filter(Boolean);
    const rtl = await (platform2.isRTL == null ? void 0 : platform2.isRTL(floating));
    let rects = await platform2.getElementRects({
      reference,
      floating,
      strategy
    });
    let {
      x: x5,
      y: y5
    } = computeCoordsFromPlacement(rects, placement, rtl);
    let statefulPlacement = placement;
    let middlewareData = {};
    let resetCount = 0;
    for (let i5 = 0; i5 < validMiddleware.length; i5++) {
      const {
        name,
        fn: fn2
      } = validMiddleware[i5];
      const {
        x: nextX,
        y: nextY,
        data,
        reset
      } = await fn2({
        x: x5,
        y: y5,
        initialPlacement: placement,
        placement: statefulPlacement,
        strategy,
        middlewareData,
        rects,
        platform: platform2,
        elements: {
          reference,
          floating
        }
      });
      x5 = nextX != null ? nextX : x5;
      y5 = nextY != null ? nextY : y5;
      middlewareData = {
        ...middlewareData,
        [name]: {
          ...middlewareData[name],
          ...data
        }
      };
      if (reset && resetCount <= 50) {
        resetCount++;
        if (typeof reset === "object") {
          if (reset.placement) {
            statefulPlacement = reset.placement;
          }
          if (reset.rects) {
            rects = reset.rects === true ? await platform2.getElementRects({
              reference,
              floating,
              strategy
            }) : reset.rects;
          }
          ({
            x: x5,
            y: y5
          } = computeCoordsFromPlacement(rects, statefulPlacement, rtl));
        }
        i5 = -1;
      }
    }
    return {
      x: x5,
      y: y5,
      placement: statefulPlacement,
      strategy,
      middlewareData
    };
  };
  async function detectOverflow(state, options) {
    var _await$platform$isEle;
    if (options === void 0) {
      options = {};
    }
    const {
      x: x5,
      y: y5,
      platform: platform2,
      rects,
      elements,
      strategy
    } = state;
    const {
      boundary = "clippingAncestors",
      rootBoundary = "viewport",
      elementContext = "floating",
      altBoundary = false,
      padding = 0
    } = evaluate(options, state);
    const paddingObject = getPaddingObject(padding);
    const altContext = elementContext === "floating" ? "reference" : "floating";
    const element = elements[altBoundary ? altContext : elementContext];
    const clippingClientRect = rectToClientRect(await platform2.getClippingRect({
      element: ((_await$platform$isEle = await (platform2.isElement == null ? void 0 : platform2.isElement(element))) != null ? _await$platform$isEle : true) ? element : element.contextElement || await (platform2.getDocumentElement == null ? void 0 : platform2.getDocumentElement(elements.floating)),
      boundary,
      rootBoundary,
      strategy
    }));
    const rect = elementContext === "floating" ? {
      x: x5,
      y: y5,
      width: rects.floating.width,
      height: rects.floating.height
    } : rects.reference;
    const offsetParent = await (platform2.getOffsetParent == null ? void 0 : platform2.getOffsetParent(elements.floating));
    const offsetScale = await (platform2.isElement == null ? void 0 : platform2.isElement(offsetParent)) ? await (platform2.getScale == null ? void 0 : platform2.getScale(offsetParent)) || {
      x: 1,
      y: 1
    } : {
      x: 1,
      y: 1
    };
    const elementClientRect = rectToClientRect(platform2.convertOffsetParentRelativeRectToViewportRelativeRect ? await platform2.convertOffsetParentRelativeRectToViewportRelativeRect({
      elements,
      rect,
      offsetParent,
      strategy
    }) : rect);
    return {
      top: (clippingClientRect.top - elementClientRect.top + paddingObject.top) / offsetScale.y,
      bottom: (elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom) / offsetScale.y,
      left: (clippingClientRect.left - elementClientRect.left + paddingObject.left) / offsetScale.x,
      right: (elementClientRect.right - clippingClientRect.right + paddingObject.right) / offsetScale.x
    };
  }
  var flip2 = function(options) {
    if (options === void 0) {
      options = {};
    }
    return {
      name: "flip",
      options,
      async fn(state) {
        var _middlewareData$arrow, _middlewareData$flip;
        const {
          placement,
          middlewareData,
          rects,
          initialPlacement,
          platform: platform2,
          elements
        } = state;
        const {
          mainAxis: checkMainAxis = true,
          crossAxis: checkCrossAxis = true,
          fallbackPlacements: specifiedFallbackPlacements,
          fallbackStrategy = "bestFit",
          fallbackAxisSideDirection = "none",
          flipAlignment = true,
          ...detectOverflowOptions
        } = evaluate(options, state);
        if ((_middlewareData$arrow = middlewareData.arrow) != null && _middlewareData$arrow.alignmentOffset) {
          return {};
        }
        const side = getSide(placement);
        const initialSideAxis = getSideAxis(initialPlacement);
        const isBasePlacement = getSide(initialPlacement) === initialPlacement;
        const rtl = await (platform2.isRTL == null ? void 0 : platform2.isRTL(elements.floating));
        const fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipAlignment ? [getOppositePlacement(initialPlacement)] : getExpandedPlacements(initialPlacement));
        const hasFallbackAxisSideDirection = fallbackAxisSideDirection !== "none";
        if (!specifiedFallbackPlacements && hasFallbackAxisSideDirection) {
          fallbackPlacements.push(...getOppositeAxisPlacements(initialPlacement, flipAlignment, fallbackAxisSideDirection, rtl));
        }
        const placements2 = [initialPlacement, ...fallbackPlacements];
        const overflow = await detectOverflow(state, detectOverflowOptions);
        const overflows = [];
        let overflowsData = ((_middlewareData$flip = middlewareData.flip) == null ? void 0 : _middlewareData$flip.overflows) || [];
        if (checkMainAxis) {
          overflows.push(overflow[side]);
        }
        if (checkCrossAxis) {
          const sides2 = getAlignmentSides(placement, rects, rtl);
          overflows.push(overflow[sides2[0]], overflow[sides2[1]]);
        }
        overflowsData = [...overflowsData, {
          placement,
          overflows
        }];
        if (!overflows.every((side2) => side2 <= 0)) {
          var _middlewareData$flip2, _overflowsData$filter;
          const nextIndex = (((_middlewareData$flip2 = middlewareData.flip) == null ? void 0 : _middlewareData$flip2.index) || 0) + 1;
          const nextPlacement = placements2[nextIndex];
          if (nextPlacement) {
            const ignoreCrossAxisOverflow = checkCrossAxis === "alignment" ? initialSideAxis !== getSideAxis(nextPlacement) : false;
            if (!ignoreCrossAxisOverflow || // We leave the current main axis only if every placement on that axis
            // overflows the main axis.
            overflowsData.every((d4) => d4.overflows[0] > 0 && getSideAxis(d4.placement) === initialSideAxis)) {
              return {
                data: {
                  index: nextIndex,
                  overflows: overflowsData
                },
                reset: {
                  placement: nextPlacement
                }
              };
            }
          }
          let resetPlacement = (_overflowsData$filter = overflowsData.filter((d4) => d4.overflows[0] <= 0).sort((a5, b2) => a5.overflows[1] - b2.overflows[1])[0]) == null ? void 0 : _overflowsData$filter.placement;
          if (!resetPlacement) {
            switch (fallbackStrategy) {
              case "bestFit": {
                var _overflowsData$filter2;
                const placement2 = (_overflowsData$filter2 = overflowsData.filter((d4) => {
                  if (hasFallbackAxisSideDirection) {
                    const currentSideAxis = getSideAxis(d4.placement);
                    return currentSideAxis === initialSideAxis || // Create a bias to the `y` side axis due to horizontal
                    // reading directions favoring greater width.
                    currentSideAxis === "y";
                  }
                  return true;
                }).map((d4) => [d4.placement, d4.overflows.filter((overflow2) => overflow2 > 0).reduce((acc, overflow2) => acc + overflow2, 0)]).sort((a5, b2) => a5[1] - b2[1])[0]) == null ? void 0 : _overflowsData$filter2[0];
                if (placement2) {
                  resetPlacement = placement2;
                }
                break;
              }
              case "initialPlacement":
                resetPlacement = initialPlacement;
                break;
            }
          }
          if (placement !== resetPlacement) {
            return {
              reset: {
                placement: resetPlacement
              }
            };
          }
        }
        return {};
      }
    };
  };

  // ../node_modules/@floating-ui/utils/dist/floating-ui.utils.dom.mjs
  function hasWindow() {
    return typeof window !== "undefined";
  }
  function getNodeName(node) {
    if (isNode(node)) {
      return (node.nodeName || "").toLowerCase();
    }
    return "#document";
  }
  function getWindow(node) {
    var _node$ownerDocument;
    return (node == null || (_node$ownerDocument = node.ownerDocument) == null ? void 0 : _node$ownerDocument.defaultView) || window;
  }
  function getDocumentElement(node) {
    var _ref;
    return (_ref = (isNode(node) ? node.ownerDocument : node.document) || window.document) == null ? void 0 : _ref.documentElement;
  }
  function isNode(value) {
    if (!hasWindow()) {
      return false;
    }
    return value instanceof Node || value instanceof getWindow(value).Node;
  }
  function isElement(value) {
    if (!hasWindow()) {
      return false;
    }
    return value instanceof Element || value instanceof getWindow(value).Element;
  }
  function isHTMLElement(value) {
    if (!hasWindow()) {
      return false;
    }
    return value instanceof HTMLElement || value instanceof getWindow(value).HTMLElement;
  }
  function isShadowRoot(value) {
    if (!hasWindow() || typeof ShadowRoot === "undefined") {
      return false;
    }
    return value instanceof ShadowRoot || value instanceof getWindow(value).ShadowRoot;
  }
  var invalidOverflowDisplayValues = /* @__PURE__ */ new Set(["inline", "contents"]);
  function isOverflowElement(element) {
    const {
      overflow,
      overflowX,
      overflowY,
      display
    } = getComputedStyle(element);
    return /auto|scroll|overlay|hidden|clip/.test(overflow + overflowY + overflowX) && !invalidOverflowDisplayValues.has(display);
  }
  var tableElements = /* @__PURE__ */ new Set(["table", "td", "th"]);
  function isTableElement(element) {
    return tableElements.has(getNodeName(element));
  }
  var topLayerSelectors = [":popover-open", ":modal"];
  function isTopLayer(element) {
    return topLayerSelectors.some((selector) => {
      try {
        return element.matches(selector);
      } catch (_e2) {
        return false;
      }
    });
  }
  var transformProperties = ["transform", "translate", "scale", "rotate", "perspective"];
  var willChangeValues = ["transform", "translate", "scale", "rotate", "perspective", "filter"];
  var containValues = ["paint", "layout", "strict", "content"];
  function isContainingBlock(elementOrCss) {
    const webkit = isWebKit();
    const css = isElement(elementOrCss) ? getComputedStyle(elementOrCss) : elementOrCss;
    return transformProperties.some((value) => css[value] ? css[value] !== "none" : false) || (css.containerType ? css.containerType !== "normal" : false) || !webkit && (css.backdropFilter ? css.backdropFilter !== "none" : false) || !webkit && (css.filter ? css.filter !== "none" : false) || willChangeValues.some((value) => (css.willChange || "").includes(value)) || containValues.some((value) => (css.contain || "").includes(value));
  }
  function getContainingBlock(element) {
    let currentNode = getParentNode(element);
    while (isHTMLElement(currentNode) && !isLastTraversableNode(currentNode)) {
      if (isContainingBlock(currentNode)) {
        return currentNode;
      } else if (isTopLayer(currentNode)) {
        return null;
      }
      currentNode = getParentNode(currentNode);
    }
    return null;
  }
  function isWebKit() {
    if (typeof CSS === "undefined" || !CSS.supports)
      return false;
    return CSS.supports("-webkit-backdrop-filter", "none");
  }
  var lastTraversableNodeNames = /* @__PURE__ */ new Set(["html", "body", "#document"]);
  function isLastTraversableNode(node) {
    return lastTraversableNodeNames.has(getNodeName(node));
  }
  function getComputedStyle(element) {
    return getWindow(element).getComputedStyle(element);
  }
  function getNodeScroll(element) {
    if (isElement(element)) {
      return {
        scrollLeft: element.scrollLeft,
        scrollTop: element.scrollTop
      };
    }
    return {
      scrollLeft: element.scrollX,
      scrollTop: element.scrollY
    };
  }
  function getParentNode(node) {
    if (getNodeName(node) === "html") {
      return node;
    }
    const result = (
      // Step into the shadow DOM of the parent of a slotted node.
      node.assignedSlot || // DOM Element detected.
      node.parentNode || // ShadowRoot detected.
      isShadowRoot(node) && node.host || // Fallback.
      getDocumentElement(node)
    );
    return isShadowRoot(result) ? result.host : result;
  }
  function getNearestOverflowAncestor(node) {
    const parentNode = getParentNode(node);
    if (isLastTraversableNode(parentNode)) {
      return node.ownerDocument ? node.ownerDocument.body : node.body;
    }
    if (isHTMLElement(parentNode) && isOverflowElement(parentNode)) {
      return parentNode;
    }
    return getNearestOverflowAncestor(parentNode);
  }
  function getOverflowAncestors(node, list, traverseIframes) {
    var _node$ownerDocument2;
    if (list === void 0) {
      list = [];
    }
    if (traverseIframes === void 0) {
      traverseIframes = true;
    }
    const scrollableAncestor = getNearestOverflowAncestor(node);
    const isBody = scrollableAncestor === ((_node$ownerDocument2 = node.ownerDocument) == null ? void 0 : _node$ownerDocument2.body);
    const win = getWindow(scrollableAncestor);
    if (isBody) {
      const frameElement = getFrameElement(win);
      return list.concat(win, win.visualViewport || [], isOverflowElement(scrollableAncestor) ? scrollableAncestor : [], frameElement && traverseIframes ? getOverflowAncestors(frameElement) : []);
    }
    return list.concat(scrollableAncestor, getOverflowAncestors(scrollableAncestor, [], traverseIframes));
  }
  function getFrameElement(win) {
    return win.parent && Object.getPrototypeOf(win.parent) ? win.frameElement : null;
  }

  // ../node_modules/@floating-ui/dom/dist/floating-ui.dom.mjs
  function getCssDimensions(element) {
    const css = getComputedStyle(element);
    let width = parseFloat(css.width) || 0;
    let height = parseFloat(css.height) || 0;
    const hasOffset = isHTMLElement(element);
    const offsetWidth = hasOffset ? element.offsetWidth : width;
    const offsetHeight = hasOffset ? element.offsetHeight : height;
    const shouldFallback = round(width) !== offsetWidth || round(height) !== offsetHeight;
    if (shouldFallback) {
      width = offsetWidth;
      height = offsetHeight;
    }
    return {
      width,
      height,
      $: shouldFallback
    };
  }
  function unwrapElement(element) {
    return !isElement(element) ? element.contextElement : element;
  }
  function getScale(element) {
    const domElement = unwrapElement(element);
    if (!isHTMLElement(domElement)) {
      return createCoords(1);
    }
    const rect = domElement.getBoundingClientRect();
    const {
      width,
      height,
      $: $3
    } = getCssDimensions(domElement);
    let x5 = ($3 ? round(rect.width) : rect.width) / width;
    let y5 = ($3 ? round(rect.height) : rect.height) / height;
    if (!x5 || !Number.isFinite(x5)) {
      x5 = 1;
    }
    if (!y5 || !Number.isFinite(y5)) {
      y5 = 1;
    }
    return {
      x: x5,
      y: y5
    };
  }
  var noOffsets = /* @__PURE__ */ createCoords(0);
  function getVisualOffsets(element) {
    const win = getWindow(element);
    if (!isWebKit() || !win.visualViewport) {
      return noOffsets;
    }
    return {
      x: win.visualViewport.offsetLeft,
      y: win.visualViewport.offsetTop
    };
  }
  function shouldAddVisualOffsets(element, isFixed, floatingOffsetParent) {
    if (isFixed === void 0) {
      isFixed = false;
    }
    if (!floatingOffsetParent || isFixed && floatingOffsetParent !== getWindow(element)) {
      return false;
    }
    return isFixed;
  }
  function getBoundingClientRect(element, includeScale, isFixedStrategy, offsetParent) {
    if (includeScale === void 0) {
      includeScale = false;
    }
    if (isFixedStrategy === void 0) {
      isFixedStrategy = false;
    }
    const clientRect = element.getBoundingClientRect();
    const domElement = unwrapElement(element);
    let scale = createCoords(1);
    if (includeScale) {
      if (offsetParent) {
        if (isElement(offsetParent)) {
          scale = getScale(offsetParent);
        }
      } else {
        scale = getScale(element);
      }
    }
    const visualOffsets = shouldAddVisualOffsets(domElement, isFixedStrategy, offsetParent) ? getVisualOffsets(domElement) : createCoords(0);
    let x5 = (clientRect.left + visualOffsets.x) / scale.x;
    let y5 = (clientRect.top + visualOffsets.y) / scale.y;
    let width = clientRect.width / scale.x;
    let height = clientRect.height / scale.y;
    if (domElement) {
      const win = getWindow(domElement);
      const offsetWin = offsetParent && isElement(offsetParent) ? getWindow(offsetParent) : offsetParent;
      let currentWin = win;
      let currentIFrame = getFrameElement(currentWin);
      while (currentIFrame && offsetParent && offsetWin !== currentWin) {
        const iframeScale = getScale(currentIFrame);
        const iframeRect = currentIFrame.getBoundingClientRect();
        const css = getComputedStyle(currentIFrame);
        const left2 = iframeRect.left + (currentIFrame.clientLeft + parseFloat(css.paddingLeft)) * iframeScale.x;
        const top2 = iframeRect.top + (currentIFrame.clientTop + parseFloat(css.paddingTop)) * iframeScale.y;
        x5 *= iframeScale.x;
        y5 *= iframeScale.y;
        width *= iframeScale.x;
        height *= iframeScale.y;
        x5 += left2;
        y5 += top2;
        currentWin = getWindow(currentIFrame);
        currentIFrame = getFrameElement(currentWin);
      }
    }
    return rectToClientRect({
      width,
      height,
      x: x5,
      y: y5
    });
  }
  function getWindowScrollBarX(element, rect) {
    const leftScroll = getNodeScroll(element).scrollLeft;
    if (!rect) {
      return getBoundingClientRect(getDocumentElement(element)).left + leftScroll;
    }
    return rect.left + leftScroll;
  }
  function getHTMLOffset(documentElement, scroll, ignoreScrollbarX) {
    if (ignoreScrollbarX === void 0) {
      ignoreScrollbarX = false;
    }
    const htmlRect = documentElement.getBoundingClientRect();
    const x5 = htmlRect.left + scroll.scrollLeft - (ignoreScrollbarX ? 0 : (
      // RTL <body> scrollbar.
      getWindowScrollBarX(documentElement, htmlRect)
    ));
    const y5 = htmlRect.top + scroll.scrollTop;
    return {
      x: x5,
      y: y5
    };
  }
  function convertOffsetParentRelativeRectToViewportRelativeRect(_ref) {
    let {
      elements,
      rect,
      offsetParent,
      strategy
    } = _ref;
    const isFixed = strategy === "fixed";
    const documentElement = getDocumentElement(offsetParent);
    const topLayer = elements ? isTopLayer(elements.floating) : false;
    if (offsetParent === documentElement || topLayer && isFixed) {
      return rect;
    }
    let scroll = {
      scrollLeft: 0,
      scrollTop: 0
    };
    let scale = createCoords(1);
    const offsets = createCoords(0);
    const isOffsetParentAnElement = isHTMLElement(offsetParent);
    if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
      if (getNodeName(offsetParent) !== "body" || isOverflowElement(documentElement)) {
        scroll = getNodeScroll(offsetParent);
      }
      if (isHTMLElement(offsetParent)) {
        const offsetRect = getBoundingClientRect(offsetParent);
        scale = getScale(offsetParent);
        offsets.x = offsetRect.x + offsetParent.clientLeft;
        offsets.y = offsetRect.y + offsetParent.clientTop;
      }
    }
    const htmlOffset = documentElement && !isOffsetParentAnElement && !isFixed ? getHTMLOffset(documentElement, scroll, true) : createCoords(0);
    return {
      width: rect.width * scale.x,
      height: rect.height * scale.y,
      x: rect.x * scale.x - scroll.scrollLeft * scale.x + offsets.x + htmlOffset.x,
      y: rect.y * scale.y - scroll.scrollTop * scale.y + offsets.y + htmlOffset.y
    };
  }
  function getClientRects(element) {
    return Array.from(element.getClientRects());
  }
  function getDocumentRect(element) {
    const html = getDocumentElement(element);
    const scroll = getNodeScroll(element);
    const body = element.ownerDocument.body;
    const width = max4(html.scrollWidth, html.clientWidth, body.scrollWidth, body.clientWidth);
    const height = max4(html.scrollHeight, html.clientHeight, body.scrollHeight, body.clientHeight);
    let x5 = -scroll.scrollLeft + getWindowScrollBarX(element);
    const y5 = -scroll.scrollTop;
    if (getComputedStyle(body).direction === "rtl") {
      x5 += max4(html.clientWidth, body.clientWidth) - width;
    }
    return {
      width,
      height,
      x: x5,
      y: y5
    };
  }
  function getViewportRect(element, strategy) {
    const win = getWindow(element);
    const html = getDocumentElement(element);
    const visualViewport = win.visualViewport;
    let width = html.clientWidth;
    let height = html.clientHeight;
    let x5 = 0;
    let y5 = 0;
    if (visualViewport) {
      width = visualViewport.width;
      height = visualViewport.height;
      const visualViewportBased = isWebKit();
      if (!visualViewportBased || visualViewportBased && strategy === "fixed") {
        x5 = visualViewport.offsetLeft;
        y5 = visualViewport.offsetTop;
      }
    }
    return {
      width,
      height,
      x: x5,
      y: y5
    };
  }
  var absoluteOrFixed = /* @__PURE__ */ new Set(["absolute", "fixed"]);
  function getInnerBoundingClientRect(element, strategy) {
    const clientRect = getBoundingClientRect(element, true, strategy === "fixed");
    const top2 = clientRect.top + element.clientTop;
    const left2 = clientRect.left + element.clientLeft;
    const scale = isHTMLElement(element) ? getScale(element) : createCoords(1);
    const width = element.clientWidth * scale.x;
    const height = element.clientHeight * scale.y;
    const x5 = left2 * scale.x;
    const y5 = top2 * scale.y;
    return {
      width,
      height,
      x: x5,
      y: y5
    };
  }
  function getClientRectFromClippingAncestor(element, clippingAncestor, strategy) {
    let rect;
    if (clippingAncestor === "viewport") {
      rect = getViewportRect(element, strategy);
    } else if (clippingAncestor === "document") {
      rect = getDocumentRect(getDocumentElement(element));
    } else if (isElement(clippingAncestor)) {
      rect = getInnerBoundingClientRect(clippingAncestor, strategy);
    } else {
      const visualOffsets = getVisualOffsets(element);
      rect = {
        x: clippingAncestor.x - visualOffsets.x,
        y: clippingAncestor.y - visualOffsets.y,
        width: clippingAncestor.width,
        height: clippingAncestor.height
      };
    }
    return rectToClientRect(rect);
  }
  function hasFixedPositionAncestor(element, stopNode) {
    const parentNode = getParentNode(element);
    if (parentNode === stopNode || !isElement(parentNode) || isLastTraversableNode(parentNode)) {
      return false;
    }
    return getComputedStyle(parentNode).position === "fixed" || hasFixedPositionAncestor(parentNode, stopNode);
  }
  function getClippingElementAncestors(element, cache) {
    const cachedResult = cache.get(element);
    if (cachedResult) {
      return cachedResult;
    }
    let result = getOverflowAncestors(element, [], false).filter((el) => isElement(el) && getNodeName(el) !== "body");
    let currentContainingBlockComputedStyle = null;
    const elementIsFixed = getComputedStyle(element).position === "fixed";
    let currentNode = elementIsFixed ? getParentNode(element) : element;
    while (isElement(currentNode) && !isLastTraversableNode(currentNode)) {
      const computedStyle = getComputedStyle(currentNode);
      const currentNodeIsContaining = isContainingBlock(currentNode);
      if (!currentNodeIsContaining && computedStyle.position === "fixed") {
        currentContainingBlockComputedStyle = null;
      }
      const shouldDropCurrentNode = elementIsFixed ? !currentNodeIsContaining && !currentContainingBlockComputedStyle : !currentNodeIsContaining && computedStyle.position === "static" && !!currentContainingBlockComputedStyle && absoluteOrFixed.has(currentContainingBlockComputedStyle.position) || isOverflowElement(currentNode) && !currentNodeIsContaining && hasFixedPositionAncestor(element, currentNode);
      if (shouldDropCurrentNode) {
        result = result.filter((ancestor) => ancestor !== currentNode);
      } else {
        currentContainingBlockComputedStyle = computedStyle;
      }
      currentNode = getParentNode(currentNode);
    }
    cache.set(element, result);
    return result;
  }
  function getClippingRect(_ref) {
    let {
      element,
      boundary,
      rootBoundary,
      strategy
    } = _ref;
    const elementClippingAncestors = boundary === "clippingAncestors" ? isTopLayer(element) ? [] : getClippingElementAncestors(element, this._c) : [].concat(boundary);
    const clippingAncestors = [...elementClippingAncestors, rootBoundary];
    const firstClippingAncestor = clippingAncestors[0];
    const clippingRect = clippingAncestors.reduce((accRect, clippingAncestor) => {
      const rect = getClientRectFromClippingAncestor(element, clippingAncestor, strategy);
      accRect.top = max4(rect.top, accRect.top);
      accRect.right = min3(rect.right, accRect.right);
      accRect.bottom = min3(rect.bottom, accRect.bottom);
      accRect.left = max4(rect.left, accRect.left);
      return accRect;
    }, getClientRectFromClippingAncestor(element, firstClippingAncestor, strategy));
    return {
      width: clippingRect.right - clippingRect.left,
      height: clippingRect.bottom - clippingRect.top,
      x: clippingRect.left,
      y: clippingRect.top
    };
  }
  function getDimensions(element) {
    const {
      width,
      height
    } = getCssDimensions(element);
    return {
      width,
      height
    };
  }
  function getRectRelativeToOffsetParent(element, offsetParent, strategy) {
    const isOffsetParentAnElement = isHTMLElement(offsetParent);
    const documentElement = getDocumentElement(offsetParent);
    const isFixed = strategy === "fixed";
    const rect = getBoundingClientRect(element, true, isFixed, offsetParent);
    let scroll = {
      scrollLeft: 0,
      scrollTop: 0
    };
    const offsets = createCoords(0);
    function setLeftRTLScrollbarOffset() {
      offsets.x = getWindowScrollBarX(documentElement);
    }
    if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
      if (getNodeName(offsetParent) !== "body" || isOverflowElement(documentElement)) {
        scroll = getNodeScroll(offsetParent);
      }
      if (isOffsetParentAnElement) {
        const offsetRect = getBoundingClientRect(offsetParent, true, isFixed, offsetParent);
        offsets.x = offsetRect.x + offsetParent.clientLeft;
        offsets.y = offsetRect.y + offsetParent.clientTop;
      } else if (documentElement) {
        setLeftRTLScrollbarOffset();
      }
    }
    if (isFixed && !isOffsetParentAnElement && documentElement) {
      setLeftRTLScrollbarOffset();
    }
    const htmlOffset = documentElement && !isOffsetParentAnElement && !isFixed ? getHTMLOffset(documentElement, scroll) : createCoords(0);
    const x5 = rect.left + scroll.scrollLeft - offsets.x - htmlOffset.x;
    const y5 = rect.top + scroll.scrollTop - offsets.y - htmlOffset.y;
    return {
      x: x5,
      y: y5,
      width: rect.width,
      height: rect.height
    };
  }
  function isStaticPositioned(element) {
    return getComputedStyle(element).position === "static";
  }
  function getTrueOffsetParent(element, polyfill) {
    if (!isHTMLElement(element) || getComputedStyle(element).position === "fixed") {
      return null;
    }
    if (polyfill) {
      return polyfill(element);
    }
    let rawOffsetParent = element.offsetParent;
    if (getDocumentElement(element) === rawOffsetParent) {
      rawOffsetParent = rawOffsetParent.ownerDocument.body;
    }
    return rawOffsetParent;
  }
  function getOffsetParent(element, polyfill) {
    const win = getWindow(element);
    if (isTopLayer(element)) {
      return win;
    }
    if (!isHTMLElement(element)) {
      let svgOffsetParent = getParentNode(element);
      while (svgOffsetParent && !isLastTraversableNode(svgOffsetParent)) {
        if (isElement(svgOffsetParent) && !isStaticPositioned(svgOffsetParent)) {
          return svgOffsetParent;
        }
        svgOffsetParent = getParentNode(svgOffsetParent);
      }
      return win;
    }
    let offsetParent = getTrueOffsetParent(element, polyfill);
    while (offsetParent && isTableElement(offsetParent) && isStaticPositioned(offsetParent)) {
      offsetParent = getTrueOffsetParent(offsetParent, polyfill);
    }
    if (offsetParent && isLastTraversableNode(offsetParent) && isStaticPositioned(offsetParent) && !isContainingBlock(offsetParent)) {
      return win;
    }
    return offsetParent || getContainingBlock(element) || win;
  }
  var getElementRects = async function(data) {
    const getOffsetParentFn = this.getOffsetParent || getOffsetParent;
    const getDimensionsFn = this.getDimensions;
    const floatingDimensions = await getDimensionsFn(data.floating);
    return {
      reference: getRectRelativeToOffsetParent(data.reference, await getOffsetParentFn(data.floating), data.strategy),
      floating: {
        x: 0,
        y: 0,
        width: floatingDimensions.width,
        height: floatingDimensions.height
      }
    };
  };
  function isRTL(element) {
    return getComputedStyle(element).direction === "rtl";
  }
  var platform = {
    convertOffsetParentRelativeRectToViewportRelativeRect,
    getDocumentElement,
    getClippingRect,
    getOffsetParent,
    getElementRects,
    getClientRects,
    getDimensions,
    getScale,
    isElement,
    isRTL
  };
  var flip3 = flip2;
  var computePosition2 = (reference, floating, options) => {
    const cache = /* @__PURE__ */ new Map();
    const mergedOptions = {
      platform,
      ...options
    };
    const platformWithCache = {
      ...mergedOptions.platform,
      _c: cache
    };
    return computePosition(reference, floating, {
      ...mergedOptions,
      platform: platformWithCache
    });
  };

  // course_data.json
  var course_data_default = { "10101": { corners: [{ length: 275, start: 400 }, { length: 275, start: 675 }], course: 1, courseSetStatus: [], distance: 1200, distanceType: 1, raceTrackId: 10001, slopes: [], straights: [{ end: 400, start: 0 }, { end: 1200, start: 950 }], surface: 1, turn: 1 }, "10102": { corners: [{ length: 275, start: 150 }, { length: 275, start: 700 }, { length: 275, start: 975 }], course: 1, courseSetStatus: [], distance: 1500, distanceType: 2, raceTrackId: 10001, slopes: [], straights: [{ end: 700, start: 425 }, { end: 1500, start: 1250 }], surface: 1, turn: 1 }, "10103": { corners: [{ length: 275, start: 175 }, { length: 275, start: 450 }, { length: 275, start: 1e3 }, { length: 275, start: 1275 }], course: 1, courseSetStatus: [], distance: 1800, distanceType: 2, raceTrackId: 10001, slopes: [], straights: [{ end: 175, start: 0 }, { end: 1e3, start: 725 }, { end: 1800, start: 1550 }], surface: 1, turn: 1 }, "10104": { corners: [{ length: 275, start: 375 }, { length: 275, start: 650 }, { length: 275, start: 1200 }, { length: 275, start: 1475 }], course: 1, courseSetStatus: [3], distance: 2e3, distanceType: 3, raceTrackId: 10001, slopes: [], straights: [{ end: 375, start: 0 }, { end: 1200, start: 925 }, { end: 2e3, start: 1750 }], surface: 1, turn: 1 }, "10105": { corners: [{ length: 275, start: 175 }, { length: 275, start: 450 }, { length: 275, start: 975 }, { length: 275, start: 1250 }, { length: 275, start: 1800 }, { length: 275, start: 2075 }], course: 1, courseSetStatus: [2], distance: 2600, distanceType: 4, raceTrackId: 10001, slopes: [], straights: [{ end: 175, start: 0 }, { end: 975, start: 725 }, { end: 1800, start: 1525 }, { end: 2600, start: 2350 }], surface: 1, turn: 1 }, "10106": { corners: [{ length: 230, start: 280 }, { length: 230, start: 510 }], course: 1, courseSetStatus: [], distance: 1e3, distanceType: 1, raceTrackId: 10001, slopes: [], straights: [{ end: 280, start: 0 }, { end: 1e3, start: 740 }], surface: 2, turn: 1 }, "10107": { corners: [{ length: 230, start: 240 }, { length: 230, start: 470 }, { length: 230, start: 980 }, { length: 230, start: 1210 }], course: 1, courseSetStatus: [1], distance: 1700, distanceType: 2, raceTrackId: 10001, slopes: [], straights: [{ end: 240, start: 0 }, { end: 980, start: 700 }, { end: 1700, start: 1440 }], surface: 2, turn: 1 }, "10108": { corners: [{ length: 230, start: 200 }, { length: 230, start: 430 }, { length: 230, start: 940 }, { length: 230, start: 1170 }, { length: 230, start: 1680 }, { length: 230, start: 1910 }], course: 1, courseSetStatus: [], distance: 2400, distanceType: 3, raceTrackId: 10001, slopes: [], straights: [{ end: 200, start: 0 }, { end: 940, start: 660 }, { end: 1680, start: 1408 }, { end: 2400, start: 2140 }], surface: 2, turn: 1 }, "10201": { corners: [{ length: 220, start: 310 }, { length: 220, start: 530 }], course: 1, courseSetStatus: [], distance: 1e3, distanceType: 1, raceTrackId: 10002, slopes: [{ length: 555, slope: 1e4, start: 0 }], straights: [{ end: 310, start: 0 }, { end: 1e3, start: 750 }], surface: 1, turn: 1 }, "10202": { corners: [{ length: 220, start: 510 }, { length: 220, start: 730 }], course: 1, courseSetStatus: [], distance: 1200, distanceType: 1, raceTrackId: 10002, slopes: [{ length: 755, slope: 1e4, start: 0 }], straights: [{ end: 510, start: 0 }, { end: 1200, start: 950 }], surface: 1, turn: 1 }, "10203": { corners: [{ length: 220, start: 320 }, { length: 220, start: 540 }, { length: 220, start: 1110 }, { length: 220, start: 1330 }], course: 1, courseSetStatus: [3], distance: 1800, distanceType: 2, raceTrackId: 10002, slopes: [{ length: 200, slope: -1e4, start: 220 }, { length: 720, slope: 1e4, start: 665 }], straights: [{ end: 320, start: 0 }, { end: 1110, start: 760 }, { end: 1800, start: 1550 }], surface: 1, turn: 1 }, "10204": { corners: [{ length: 220, start: 520 }, { length: 220, start: 740 }, { length: 220, start: 1310 }, { length: 220, start: 1530 }], course: 1, courseSetStatus: [1], distance: 2e3, distanceType: 3, raceTrackId: 10002, slopes: [{ length: 200, slope: -1e4, start: 420 }, { length: 720, slope: 1e4, start: 865 }], straights: [{ end: 520, start: 0 }, { end: 1310, start: 960 }, { end: 2e3, start: 1750 }], surface: 1, turn: 1 }, "10205": { corners: [{ length: 230, start: 240 }, { length: 230, start: 470 }, { length: 230, start: 1070 }, { length: 230, start: 1300 }, { length: 230, start: 1890 }, { length: 230, start: 2120 }], course: 1, courseSetStatus: [2], distance: 2600, distanceType: 4, raceTrackId: 10002, slopes: [{ length: 495, slope: 1e4, start: 0 }, { length: 200, slope: -1e4, start: 970 }, { length: 720, slope: 1e4, start: 1425 }], straights: [{ end: 240, start: 0 }, { end: 1070, start: 700 }, { end: 1890, start: 1530 }, { end: 2600, start: 2350 }], surface: 1, turn: 1 }, "10206": { corners: [{ length: 190, start: 370 }, { length: 190, start: 560 }], course: 1, courseSetStatus: [], distance: 1e3, distanceType: 1, raceTrackId: 10002, slopes: [], straights: [{ end: 370, start: 0 }, { end: 1e3, start: 750 }], surface: 2, turn: 1 }, "10207": { corners: [{ length: 190, start: 350 }, { length: 190, start: 540 }, { length: 190, start: 1070 }, { length: 190, start: 1260 }], course: 1, courseSetStatus: [], distance: 1700, distanceType: 2, raceTrackId: 10002, slopes: [{ length: 340, slope: -1e4, start: 275 }, { length: 670, slope: 1e4, start: 615 }], straights: [{ end: 350, start: 0 }, { end: 1070, start: 730 }, { end: 1700, start: 1450 }], surface: 2, turn: 1 }, "10208": { corners: [{ length: 190, start: 292 }, { length: 190, start: 482 }, { length: 190, start: 1040 }, { length: 190, start: 1230 }, { length: 190, start: 1770 }, { length: 190, start: 1960 }], course: 1, courseSetStatus: [2], distance: 2400, distanceType: 3, raceTrackId: 10002, slopes: [], straights: [{ end: 292, start: 0 }, { end: 1040, start: 672 }, { end: 1770, start: 1420 }, { end: 2400, start: 2150 }], surface: 2, turn: 1 }, "10301": { corners: [], course: 1, courseSetStatus: [3], distance: 1e3, distanceType: 1, raceTrackId: 10003, slopes: [], straights: [{ end: 649.9, start: 0 }, { end: 1e3, start: 650 }], surface: 1, turn: 4 }, "10302": { corners: [{ length: 200, start: 430 }, { length: 210, start: 640 }], course: 2, courseSetStatus: [], distance: 1200, distanceType: 1, raceTrackId: 10003, slopes: [], straights: [{ end: 430, start: 0 }, { end: 1200, start: 850 }], surface: 1, turn: 2 }, "10303": { corners: [{ length: 200, start: 650 }, { length: 200, start: 850 }], course: 2, courseSetStatus: [], distance: 1400, distanceType: 1, raceTrackId: 10003, slopes: [], straights: [{ end: 650, start: 0 }, { end: 1400, start: 1050 }], surface: 1, turn: 2 }, "10304": { corners: [{ length: 200, start: 550 }, { length: 200, start: 750 }], course: 3, courseSetStatus: [], distance: 1600, distanceType: 2, raceTrackId: 10003, slopes: [{ length: 350, slope: 1e4, start: 250 }, { length: 300, slope: -15e3, start: 600 }], straights: [{ end: 550, start: 0 }, { end: 1600, start: 950 }], surface: 1, turn: 2 }, "10305": { corners: [{ length: 200, start: 750 }, { length: 200, start: 950 }], course: 3, courseSetStatus: [3], distance: 1800, distanceType: 2, raceTrackId: 10003, slopes: [{ length: 350, slope: 1e4, start: 450 }, { length: 300, slope: -15e3, start: 800 }], straights: [{ end: 750, start: 0 }, { end: 1800, start: 1150 }], surface: 1, turn: 2 }, "10306": { corners: [{ length: 200, start: 420 }, { length: 200, start: 620 }, { length: 200, start: 1250 }, { length: 200, start: 1450 }], course: 2, courseSetStatus: [2, 3], distance: 2e3, distanceType: 3, raceTrackId: 10003, slopes: [], straights: [{ end: 420, start: 0 }, { end: 1250, start: 820 }, { end: 2e3, start: 1650 }], surface: 1, turn: 2 }, "10307": { corners: [{ length: 200, start: 950 }, { length: 200, start: 1150 }], course: 3, courseSetStatus: [2, 3], distance: 2e3, distanceType: 3, raceTrackId: 10003, slopes: [{ length: 300, slope: -15e3, start: 1e3 }, { length: 350, slope: 1e4, start: 650 }], straights: [{ end: 950, start: 0 }, { end: 2e3, start: 1350 }], surface: 1, turn: 2 }, "10308": { corners: [{ length: 200, start: 650 }, { length: 200, start: 850 }, { length: 200, start: 1450 }, { length: 200, start: 1650 }], course: 2, courseSetStatus: [1], distance: 2200, distanceType: 3, raceTrackId: 10003, slopes: [], straights: [{ end: 650, start: 0 }, { end: 1450, start: 1050 }, { end: 2200, start: 1850 }], surface: 1, turn: 2 }, "10309": { corners: [{ length: 200, start: 810 }, { length: 200, start: 1010 }, { length: 200, start: 1650 }, { length: 200, start: 1850 }], course: 2, courseSetStatus: [], distance: 2400, distanceType: 3, raceTrackId: 10003, slopes: [], straights: [{ end: 810, start: 0 }, { end: 1650, start: 1210 }, { end: 2400, start: 2050 }], surface: 1, turn: 2 }, "10310": { corners: [{ length: 150, start: 600 }, { length: 150, start: 750 }], course: 1, courseSetStatus: [], distance: 1200, distanceType: 1, raceTrackId: 10003, slopes: [], straights: [{ end: 600, start: 0 }, { end: 1200, start: 900 }], surface: 2, turn: 2 }, "10311": { corners: [{ length: 160, start: 400 }, { length: 160, start: 560 }, { length: 160, start: 1140 }, { length: 160, start: 1300 }], course: 1, courseSetStatus: [5], distance: 1800, distanceType: 2, raceTrackId: 10003, slopes: [], straights: [{ end: 400, start: 0 }, { end: 1140, start: 720 }, { end: 1800, start: 1460 }], surface: 2, turn: 2 }, "10312": { corners: [{ length: 160, start: 380 }, { length: 160, start: 540 }, { length: 160, start: 1120 }, { length: 160, start: 1280 }, { length: 160, start: 1850 }, { length: 160, start: 2010 }], course: 1, courseSetStatus: [], distance: 2500, distanceType: 4, raceTrackId: 10003, slopes: [], straights: [{ end: 380, start: 0 }, { end: 1120, start: 700 }, { end: 1850, start: 1440 }, { end: 2500, start: 2170 }], surface: 2, turn: 2 }, "10401": { corners: [{ length: 300, start: 420 }, { length: 200, start: 720 }], course: 1, courseSetStatus: [], distance: 1200, distanceType: 1, raceTrackId: 10004, slopes: [{ length: 100, slope: 15e3, start: 180 }], straights: [{ end: 420, start: 0 }, { end: 1200, start: 920 }], surface: 1, turn: 1 }, "10402": { corners: [{ length: 200, start: 330 }, { length: 200, start: 530 }, { length: 300, start: 1020 }, { length: 200, start: 1320 }], course: 1, courseSetStatus: [2], distance: 1800, distanceType: 2, raceTrackId: 10004, slopes: [{ length: 100, slope: 15e3, start: 780 }], straights: [{ end: 330, start: 0 }, { end: 1020, start: 730 }, { end: 1800, start: 1520 }], surface: 1, turn: 1 }, "10403": { corners: [{ length: 200, start: 530 }, { length: 200, start: 730 }, { length: 300, start: 1220 }, { length: 200, start: 1520 }], course: 1, courseSetStatus: [2], distance: 2e3, distanceType: 3, raceTrackId: 10004, slopes: [{ length: 100, slope: 15e3, start: 980 }], straights: [{ end: 530, start: 0 }, { end: 1220, start: 930 }, { end: 2e3, start: 1720 }], surface: 1, turn: 1 }, "10404": { corners: [{ length: 300, start: 220 }, { length: 200, start: 520 }, { length: 200, start: 1130 }, { length: 200, start: 1330 }, { length: 300, start: 1820 }, { length: 200, start: 2120 }], course: 1, courseSetStatus: [], distance: 2600, distanceType: 4, raceTrackId: 10004, slopes: [{ length: 80, slope: 15e3, start: 0 }, { length: 100, slope: 15e3, start: 1580 }], straights: [{ end: 220, start: 0 }, { end: 1130, start: 720 }, { end: 1820, start: 1530 }, { end: 2600, start: 2320 }], surface: 1, turn: 1 }, "10405": { corners: [{ length: 210, start: 500 }, { length: 160, start: 710 }], course: 1, courseSetStatus: [], distance: 1150, distanceType: 1, raceTrackId: 10004, slopes: [], straights: [{ end: 500, start: 0 }, { end: 1150, start: 870 }], surface: 2, turn: 1 }, "10406": { corners: [{ length: 170, start: 360 }, { length: 170, start: 530 }, { length: 210, start: 1050 }, { length: 160, start: 1260 }], course: 1, courseSetStatus: [3], distance: 1700, distanceType: 2, raceTrackId: 10004, slopes: [{ length: 320, slope: -1e4, start: 285 }], straights: [{ end: 360, start: 0 }, { end: 1050, start: 700 }, { end: 1700, start: 1420 }], surface: 2, turn: 1 }, "10407": { corners: [{ length: 210, start: 310 }, { length: 160, start: 520 }, { length: 170, start: 1060 }, { length: 170, start: 1230 }, { length: 210, start: 1750 }, { length: 160, start: 1960 }], course: 1, courseSetStatus: [2], distance: 2400, distanceType: 3, raceTrackId: 10004, slopes: [], straights: [{ end: 310, start: 0 }, { end: 1060, start: 680 }, { end: 1750, start: 1400 }, { end: 2400, start: 2120 }], surface: 2, turn: 1 }, "10501": { corners: [{ length: 350, start: 300 }, { length: 250, start: 650 }], course: 3, courseSetStatus: [], distance: 1200, distanceType: 1, raceTrackId: 10005, slopes: [{ length: 200, slope: -15e3, start: 0 }, { length: 110, slope: 2e4, start: 1025 }], straights: [{ end: 1200, start: 900 }], surface: 1, turn: 1 }, "10502": { corners: [{ length: 450, start: 50 }, { length: 350, start: 700 }, { length: 250, start: 1050 }], course: 3, courseSetStatus: [3], distance: 1600, distanceType: 2, raceTrackId: 10005, slopes: [{ length: 300, slope: -15e3, start: 300 }, { length: 110, slope: 2e4, start: 1425 }], straights: [{ end: 1600, start: 1300 }], surface: 1, turn: 1 }, "10503": { corners: [{ length: 250, start: 175 }, { length: 250, start: 425 }, { length: 250, start: 1e3 }, { length: 250, start: 1250 }], course: 2, courseSetStatus: [], distance: 1800, distanceType: 2, raceTrackId: 10005, slopes: [{ length: 35, slope: 2e4, start: 1 }, { length: 200, slope: 15e3, start: 125 }, { length: 400, slope: -15e3, start: 425 }, { length: 110, slope: 2e4, start: 1625 }], straights: [{ end: 175, start: 0 }, { end: 1e3, start: 675 }, { end: 1800, start: 1500 }], surface: 1, turn: 1 }, "10504": { corners: [{ length: 250, start: 375 }, { length: 250, start: 625 }, { length: 250, start: 1200 }, { length: 250, start: 1450 }], course: 2, courseSetStatus: [1], distance: 2e3, distanceType: 3, raceTrackId: 10005, slopes: [{ length: 200, slope: 15e3, start: 325 }, { length: 110, slope: 2e4, start: 125 }, { length: 400, slope: -15e3, start: 625 }, { length: 110, slope: 2e4, start: 1825 }], straights: [{ end: 375, start: 0 }, { end: 1200, start: 875 }, { end: 2e3, start: 1700 }], surface: 1, turn: 1 }, "10505": { corners: [{ length: 247, start: 403 }, { length: 450, start: 650 }, { length: 350, start: 1300 }, { length: 250, start: 1650 }], course: 3, courseSetStatus: [2, 4], distance: 2200, distanceType: 3, raceTrackId: 10005, slopes: [{ length: 110, slope: 2e4, start: 153 }, { length: 200, slope: 15e3, start: 353 }, { length: 300, slope: -15e3, start: 900 }, { length: 110, slope: 2e4, start: 2025 }], straights: [{ end: 403, start: 0 }, { end: 2200, start: 1900 }], surface: 1, turn: 1 }, "10506": { corners: [{ length: 146, start: 100 }, { length: 250, start: 246 }, { length: 250, start: 875 }, { length: 250, start: 1125 }, { length: 250, start: 1700 }, { length: 250, start: 1950 }], course: 2, courseSetStatus: [2, 4], distance: 2500, distanceType: 4, raceTrackId: 10005, slopes: [{ length: 110, slope: 2e4, start: 621 }, { length: 200, slope: 15e3, start: 825 }, { length: 400, slope: -15e3, start: 1125 }, { length: 110, slope: 2e4, start: 2325 }], straights: [{ end: 875, start: 496 }, { end: 1700, start: 1375 }, { end: 2500, start: 2200 }], surface: 1, turn: 1 }, "10507": { corners: [{ length: 250, start: 290 }, { length: 250, start: 540 }, { length: 250, start: 1115 }, { length: 250, start: 1365 }, { length: 250, start: 1975 }, { length: 250, start: 2225 }, { length: 250, start: 2800 }, { length: 250, start: 3050 }], course: 2, courseSetStatus: [2], distance: 3600, distanceType: 4, raceTrackId: 10005, slopes: [{ length: 110, slope: 2e4, start: 40 }, { length: 200, slope: 15e3, start: 240 }, { length: 400, slope: -15e3, start: 540 }, { length: 110, slope: 2e4, start: 1740 }, { length: 200, slope: 15e3, start: 1925 }, { length: 400, slope: -15e3, start: 2225 }, { length: 110, slope: 2e4, start: 3425 }], straights: [{ end: 290, start: 0 }, { end: 1115, start: 790 }, { end: 1975, start: 1615 }, { end: 2800, start: 2475 }, { end: 3600, start: 3300 }], surface: 1, turn: 1 }, "10508": { corners: [{ length: 200, start: 500 }, { length: 200, start: 700 }], course: 1, courseSetStatus: [3], distance: 1200, distanceType: 1, raceTrackId: 10005, slopes: [{ length: 175, slope: -15e3, start: 175 }, { length: 175, slope: 15e3, start: 1e3 }], straights: [{ end: 500, start: 0 }, { end: 1200, start: 900 }], surface: 2, turn: 1 }, "10509": { corners: [{ length: 200, start: 350 }, { length: 200, start: 550 }, { length: 200, start: 1100 }, { length: 200, start: 1300 }], course: 1, courseSetStatus: [3], distance: 1800, distanceType: 2, raceTrackId: 10005, slopes: [{ length: 175, slope: 15e3, start: 100 }, { length: 175, slope: 1e4, start: 350 }, { length: 175, slope: -15e3, start: 775 }, { length: 175, slope: 15e3, start: 1600 }], straights: [{ end: 350, start: 0 }, { end: 1100, start: 750 }, { end: 1800, start: 1500 }], surface: 2, turn: 1 }, "10510": { corners: [{ length: 200, start: 200 }, { length: 200, start: 400 }, { length: 200, start: 950 }, { length: 200, start: 1150 }, { length: 200, start: 1700 }, { length: 200, start: 1900 }], course: 1, courseSetStatus: [2], distance: 2400, distanceType: 3, raceTrackId: 10005, slopes: [], straights: [{ end: 200, start: 0 }, { end: 950, start: 600 }, { end: 1700, start: 1350 }, { end: 2400, start: 2100 }], surface: 2, turn: 1 }, "10511": { corners: [{ length: 200, start: 300 }, { length: 200, start: 500 }, { length: 200, start: 1050 }, { length: 200, start: 1250 }, { length: 200, start: 1800 }, { length: 200, start: 2e3 }], course: 1, courseSetStatus: [], distance: 2500, distanceType: 4, raceTrackId: 10005, slopes: [], straights: [{ end: 300, start: 0 }, { end: 1050, start: 700 }, { end: 1800, start: 1450 }, { end: 2500, start: 2200 }], surface: 2, turn: 1 }, "10601": { corners: [{ length: 275, start: 350 }, { length: 275, start: 625 }], course: 1, courseSetStatus: [2, 3], distance: 1400, distanceType: 1, raceTrackId: 10006, slopes: [{ length: 75, slope: 2e4, start: 125 }, { length: 250, slope: -15e3, start: 250 }, { length: 150, slope: 15e3, start: 950 }], straights: [{ end: 350, start: 0 }, { end: 1400, start: 900 }], surface: 1, turn: 2 }, "10602": { corners: [{ length: 275, start: 550 }, { length: 275, start: 825 }], course: 1, courseSetStatus: [2, 4], distance: 1600, distanceType: 2, raceTrackId: 10006, slopes: [{ length: 250, slope: -15e3, start: 450 }, { length: 75, slope: 2e4, start: 325 }, { length: 150, slope: 15e3, start: 1150 }], straights: [{ end: 550, start: 0 }, { end: 1600, start: 1100 }], surface: 1, turn: 2 }, "10603": { corners: [{ length: 250, start: 75 }, { length: 275, start: 750 }, { length: 275, start: 1025 }], course: 1, courseSetStatus: [1], distance: 1800, distanceType: 2, raceTrackId: 10006, slopes: [{ length: 75, slope: 2e4, start: 525 }, { length: 250, slope: -15e3, start: 650 }, { length: 150, slope: 15e3, start: 1350 }], straights: [{ end: 750, start: 325 }, { end: 1800, start: 1300 }], surface: 1, turn: 2 }, "10604": { corners: [{ length: 200, start: 200 }, { length: 275, start: 950 }, { length: 275, start: 1225 }], course: 1, courseSetStatus: [], distance: 2e3, distanceType: 3, raceTrackId: 10006, slopes: [{ length: 75, slope: 2e4, start: 725 }, { length: 250, slope: -15e3, start: 850 }, { length: 150, slope: 15e3, start: 1550 }], straights: [{ end: 950, start: 400 }, { end: 2e3, start: 1500 }], surface: 1, turn: 2 }, "10605": { corners: [{ length: 250, start: 225 }, { length: 325, start: 475 }, { length: 275, start: 1250 }, { length: 275, start: 1525 }], course: 1, courseSetStatus: [3], distance: 2300, distanceType: 3, raceTrackId: 10006, slopes: [{ length: 75, slope: 2e4, start: 1025 }, { length: 250, slope: -15e3, start: 1150 }, { length: 150, slope: 15e3, start: 1850 }], straights: [{ end: 225, start: 0 }, { end: 1250, start: 800 }, { end: 2300, start: 1800 }], surface: 1, turn: 2 }, "10606": { corners: [{ length: 250, start: 325 }, { length: 325, start: 575 }, { length: 275, start: 1350 }, { length: 275, start: 1625 }], course: 1, courseSetStatus: [], distance: 2400, distanceType: 3, raceTrackId: 10006, slopes: [{ length: 40, slope: 15e3, start: 0 }, { length: 75, slope: 2e4, start: 1125 }, { length: 250, slope: -15e3, start: 1250 }, { length: 150, slope: 15e3, start: 1950 }], straights: [{ end: 325, start: 0 }, { end: 1350, start: 900 }, { end: 2400, start: 1900 }], surface: 1, turn: 2 }, "10607": { corners: [{ length: 250, start: 425 }, { length: 325, start: 675 }, { length: 275, start: 1450 }, { length: 275, start: 1725 }], course: 1, courseSetStatus: [2], distance: 2500, distanceType: 4, raceTrackId: 10006, slopes: [{ length: 140, slope: 15e3, start: 0 }, { length: 75, slope: 2e4, start: 1225 }, { length: 250, slope: -15e3, start: 1350 }, { length: 150, slope: 15e3, start: 2050 }], straights: [{ end: 425, start: 0 }, { end: 1450, start: 1e3 }, { end: 2500, start: 2e3 }], surface: 1, turn: 2 }, "10608": { corners: [{ length: 275, start: 292 }, { length: 275, start: 567 }, { length: 250, start: 1325 }, { length: 325, start: 1575 }, { length: 275, start: 2350 }, { length: 275, start: 2625 }], course: 1, courseSetStatus: [], distance: 3400, distanceType: 4, raceTrackId: 10006, slopes: [{ length: 75, slope: 2e4, start: 67 }, { length: 250, slope: -15e3, start: 192 }, { length: 150, slope: 15e3, start: 892 }, { length: 75, slope: 2e4, start: 2125 }, { length: 250, slope: -15e3, start: 2250 }, { length: 150, slope: 15e3, start: 2950 }], straights: [{ end: 292, start: 0 }, { end: 1325, start: 842 }, { end: 2350, start: 1900 }, { end: 3400, start: 2900 }], surface: 1, turn: 2 }, "10609": { corners: [{ length: 225, start: 350 }, { length: 225, start: 575 }], course: 1, courseSetStatus: [1], distance: 1300, distanceType: 1, raceTrackId: 10006, slopes: [{ length: 200, slope: -1e4, start: 275 }, { length: 250, slope: 15e3, start: 800 }], straights: [{ end: 350, start: 0 }, { end: 1300, start: 800 }], surface: 2, turn: 2 }, "10610": { corners: [{ length: 225, start: 450 }, { length: 225, start: 675 }], course: 1, courseSetStatus: [2], distance: 1400, distanceType: 1, raceTrackId: 10006, slopes: [{ length: 200, slope: -1e4, start: 375 }, { length: 250, slope: 15e3, start: 900 }], straights: [{ end: 450, start: 0 }, { end: 1400, start: 900 }], surface: 2, turn: 2 }, "10611": { corners: [{ length: 225, start: 650 }, { length: 225, start: 875 }], course: 1, courseSetStatus: [1, 2], distance: 1600, distanceType: 2, raceTrackId: 10006, slopes: [{ length: 200, slope: -1e4, start: 575 }, { length: 250, slope: 15e3, start: 1100 }], straights: [{ end: 650, start: 0 }, { end: 1600, start: 1100 }], surface: 2, turn: 2 }, "10612": { corners: [{ length: 250, start: 200 }, { length: 250, start: 450 }, { length: 225, start: 1150 }, { length: 225, start: 1375 }], course: 1, courseSetStatus: [], distance: 2100, distanceType: 3, raceTrackId: 10006, slopes: [{ length: 200, slope: -1e4, start: 1075 }, { length: 250, slope: 15e3, start: 1600 }], straights: [{ end: 200, start: 0 }, { end: 1150, start: 700 }, { end: 2100, start: 1600 }], surface: 2, turn: 2 }, "10613": { corners: [{ length: 250, start: 500 }, { length: 250, start: 750 }, { length: 225, start: 1450 }, { length: 225, start: 1675 }, { length: 500, start: 2348 }], course: 1, courseSetStatus: [2], distance: 2400, distanceType: 3, raceTrackId: 10006, slopes: [], straights: [{ end: 500, start: 0 }, { end: 1450, start: 1e3 }, { end: 2400, start: 1900 }], surface: 2, turn: 2 }, "10701": { corners: [{ length: 250, start: 300 }, { length: 250, start: 550 }], course: 1, courseSetStatus: [], distance: 1200, distanceType: 1, raceTrackId: 10007, slopes: [{ length: 775, slope: -1e4, start: 100 }, { length: 100, slope: 2e4, start: 875 }], straights: [{ end: 300, start: 0 }, { end: 1200, start: 800 }], surface: 1, turn: 2 }, "10702": { corners: [{ length: 250, start: 500 }, { length: 250, start: 750 }], course: 1, courseSetStatus: [], distance: 1400, distanceType: 1, raceTrackId: 10007, slopes: [{ length: 775, slope: -1e4, start: 300 }, { length: 100, slope: 2e4, start: 1075 }], straights: [{ end: 500, start: 0 }, { end: 1400, start: 1e3 }], surface: 1, turn: 2 }, "10703": { corners: [{ length: 150, start: 150 }, { length: 250, start: 700 }, { length: 250, start: 950 }], course: 1, courseSetStatus: [1], distance: 1600, distanceType: 2, raceTrackId: 10007, slopes: [{ length: 775, slope: -1e4, start: 500 }, { length: 100, slope: 2e4, start: 1275 }], straights: [{ end: 700, start: 300 }, { end: 1600, start: 1200 }], surface: 1, turn: 2 }, "10704": { corners: [{ length: 200, start: 300 }, { length: 200, start: 500 }, { length: 250, start: 1100 }, { length: 250, start: 1350 }], course: 1, courseSetStatus: [], distance: 2e3, distanceType: 3, raceTrackId: 10007, slopes: [{ length: 50, slope: 2e4, start: 0 }, { length: 775, slope: -1e4, start: 900 }, { length: 100, slope: 2e4, start: 1675 }], straights: [{ end: 300, start: 0 }, { end: 1100, start: 700 }, { end: 2e3, start: 1600 }], surface: 1, turn: 2 }, "10705": { corners: [{ length: 200, start: 500 }, { length: 200, start: 700 }, { length: 250, start: 1300 }, { length: 250, start: 1550 }], course: 1, courseSetStatus: [2], distance: 2200, distanceType: 3, raceTrackId: 10007, slopes: [{ length: 150, slope: -1e4, start: 0 }, { length: 100, slope: 2e4, start: 150 }, { length: 775, slope: -1e4, start: 1100 }, { length: 100, slope: 2e4, start: 1875 }], straights: [{ end: 500, start: 0 }, { end: 1300, start: 900 }, { end: 2200, start: 1800 }], surface: 1, turn: 2 }, "10706": { corners: [{ length: 200, start: 400 }, { length: 200, start: 600 }], course: 1, courseSetStatus: [], distance: 1200, distanceType: 1, raceTrackId: 10007, slopes: [], straights: [{ end: 400, start: 0 }, { end: 1200, start: 800 }], surface: 2, turn: 2 }, "10707": { corners: [{ length: 200, start: 600 }, { length: 200, start: 800 }], course: 1, courseSetStatus: [], distance: 1400, distanceType: 1, raceTrackId: 10007, slopes: [{ length: 600, slope: -15e3, start: 425 }, { length: 150, slope: 15e3, start: 1025 }], straights: [{ end: 600, start: 0 }, { end: 1400, start: 1e3 }], surface: 2, turn: 2 }, "10708": { corners: [{ length: 165, start: 270 }, { length: 165, start: 435 }, { length: 200, start: 1e3 }, { length: 200, start: 1200 }], course: 1, courseSetStatus: [2], distance: 1800, distanceType: 2, raceTrackId: 10007, slopes: [{ length: 50, slope: 15e3, start: 0 }, { length: 600, slope: -15e3, start: 825 }, { length: 150, slope: 15e3, start: 1425 }], straights: [{ end: 270, start: 0 }, { end: 1e3, start: 600 }, { end: 1800, start: 1400 }], surface: 2, turn: 2 }, "10709": { corners: [{ length: 165, start: 370 }, { length: 165, start: 535 }, { length: 200, start: 1100 }, { length: 200, start: 1300 }], course: 1, courseSetStatus: [], distance: 1900, distanceType: 3, raceTrackId: 10007, slopes: [], straights: [{ end: 370, start: 0 }, { end: 1100, start: 700 }, { end: 1900, start: 1500 }], surface: 2, turn: 2 }, "10801": { corners: [{ length: 275, start: 320 }, { length: 275, start: 595 }], course: 2, courseSetStatus: [], distance: 1200, distanceType: 1, raceTrackId: 10008, slopes: [{ length: 175, slope: 15e3, start: 120 }, { length: 150, slope: -15e3, start: 420 }], straights: [{ end: 320, start: 0 }, { end: 1200, start: 870 }], surface: 1, turn: 1 }, "10802": { corners: [{ length: 275, start: 520 }, { length: 275, start: 795 }], course: 2, courseSetStatus: [], distance: 1400, distanceType: 1, raceTrackId: 10008, slopes: [{ length: 175, slope: 15e3, start: 320 }, { length: 150, slope: -15e3, start: 620 }], straights: [{ end: 520, start: 0 }, { end: 1400, start: 1070 }], surface: 1, turn: 1 }, "10803": { corners: [{ length: 250, start: 500 }, { length: 250, start: 750 }], course: 3, courseSetStatus: [], distance: 1400, distanceType: 1, raceTrackId: 10008, slopes: [{ length: 100, slope: 2e4, start: 250 }, { length: 225, slope: 1e4, start: 350 }, { length: 150, slope: -2e4, start: 575 }], straights: [{ end: 500, start: 0 }, { end: 1400, start: 1e3 }], surface: 1, turn: 1 }, "10804": { corners: [{ length: 275, start: 720 }, { length: 275, start: 995 }], course: 2, courseSetStatus: [1], distance: 1600, distanceType: 2, raceTrackId: 10008, slopes: [{ length: 175, slope: 15e3, start: 520 }, { length: 150, slope: -15e3, start: 820 }], straights: [{ end: 720, start: 200 }, { end: 1600, start: 1270 }], surface: 1, turn: 1 }, "10805": { corners: [{ length: 250, start: 700 }, { length: 250, start: 950 }], course: 3, courseSetStatus: [1], distance: 1600, distanceType: 2, raceTrackId: 10008, slopes: [{ length: 100, slope: 2e4, start: 450 }, { length: 225, slope: 1e4, start: 550 }, { length: 150, slope: -2e4, start: 775 }], straights: [{ end: 700, start: 200 }, { end: 1600, start: 1200 }], surface: 1, turn: 1 }, "10806": { corners: [{ length: 250, start: 900 }, { length: 250, start: 1150 }], course: 3, courseSetStatus: [], distance: 1800, distanceType: 2, raceTrackId: 10008, slopes: [{ length: 100, slope: 2e4, start: 650 }, { length: 225, slope: 1e4, start: 750 }, { length: 150, slope: -2e4, start: 975 }], straights: [{ end: 900, start: 400 }, { end: 1800, start: 1400 }], surface: 1, turn: 1 }, "10807": { corners: [{ length: 185, start: 400 }, { length: 185, start: 585 }, { length: 250, start: 1170 }, { length: 250, start: 1420 }], course: 2, courseSetStatus: [3], distance: 2e3, distanceType: 3, raceTrackId: 10008, slopes: [{ length: 175, slope: 15e3, start: 970 }, { length: 150, slope: -15e3, start: 1270 }], straights: [{ end: 400, start: 0 }, { end: 1170, start: 770 }, { end: 2e3, start: 1670 }], surface: 1, turn: 1 }, "10808": { corners: [{ length: 200, start: 400 }, { length: 200, start: 600 }, { length: 250, start: 1300 }, { length: 250, start: 1550 }], course: 3, courseSetStatus: [1], distance: 2200, distanceType: 3, raceTrackId: 10008, slopes: [{ length: 100, slope: 2e4, start: 1050 }, { length: 225, slope: 1e4, start: 1150 }, { length: 150, slope: -2e4, start: 1375 }], straights: [{ end: 400, start: 0 }, { end: 1300, start: 800 }, { end: 2200, start: 1800 }], surface: 1, turn: 1 }, "10809": { corners: [{ length: 200, start: 600 }, { length: 200, start: 800 }, { length: 250, start: 1500 }, { length: 250, start: 1750 }], course: 3, courseSetStatus: [3], distance: 2400, distanceType: 3, raceTrackId: 10008, slopes: [{ length: 225, slope: 1e4, start: 1350 }, { length: 100, slope: 2e4, start: 1250 }, { length: 150, slope: -2e4, start: 1575 }], straights: [{ end: 600, start: 0 }, { end: 1500, start: 1e3 }, { end: 2400, start: 2e3 }], surface: 1, turn: 1 }, "10810": { corners: [{ length: 250, start: 261 }, { length: 250, start: 511 }, { length: 200, start: 1250 }, { length: 200, start: 1450 }, { length: 250, start: 2100 }, { length: 250, start: 2350 }], course: 3, courseSetStatus: [3, 5], distance: 3e3, distanceType: 4, raceTrackId: 10008, slopes: [{ length: 100, slope: 2e4, start: 11 }, { length: 225, slope: 1e4, start: 111 }, { length: 150, slope: -2e4, start: 336 }, { length: 225, slope: 1e4, start: 1950 }, { length: 100, slope: 2e4, start: 1850 }, { length: 150, slope: -2e4, start: 2175 }], straights: [{ end: 261, start: 0 }, { end: 1250, start: 761 }, { end: 2100, start: 1650 }, { end: 3e3, start: 2600 }], surface: 1, turn: 1 }, "10811": { corners: [{ length: 250, start: 458 }, { length: 250, start: 708 }, { length: 200, start: 1450 }, { length: 200, start: 1650 }, { length: 250, start: 2300 }, { length: 250, start: 2550 }], course: 3, courseSetStatus: [], distance: 3200, distanceType: 4, raceTrackId: 10008, slopes: [{ length: 100, slope: 2e4, start: 208 }, { length: 225, slope: 1e4, start: 308 }, { length: 150, slope: -2e4, start: 533 }, { length: 100, slope: 2e4, start: 2050 }, { length: 150, slope: -2e4, start: 2375 }, { length: 225, slope: 1e4, start: 2150 }], straights: [{ end: 458, start: 0 }, { end: 1450, start: 958 }, { end: 2300, start: 1850 }, { end: 3200, start: 2800 }], surface: 1, turn: 1 }, "10812": { corners: [{ length: 225, start: 400 }, { length: 225, start: 625 }], course: 1, courseSetStatus: [], distance: 1200, distanceType: 1, raceTrackId: 10008, slopes: [{ length: 200, slope: 15e3, start: 175 }, { length: 200, slope: -15e3, start: 475 }], straights: [{ end: 400, start: 0 }, { end: 1200, start: 850 }], surface: 2, turn: 1 }, "10813": { corners: [{ length: 225, start: 600 }, { length: 225, start: 825 }], course: 1, courseSetStatus: [], distance: 1400, distanceType: 1, raceTrackId: 10008, slopes: [{ length: 200, slope: 15e3, start: 375 }, { length: 200, slope: -15e3, start: 675 }], straights: [{ end: 600, start: 100 }, { end: 1400, start: 1050 }], surface: 2, turn: 1 }, "10814": { corners: [{ length: 150, start: 300 }, { length: 150, start: 450 }, { length: 225, start: 1e3 }, { length: 225, start: 1225 }], course: 1, courseSetStatus: [], distance: 1800, distanceType: 2, raceTrackId: 10008, slopes: [{ length: 200, slope: 15e3, start: 775 }, { length: 200, slope: -15e3, start: 1075 }], straights: [{ end: 300, start: 0 }, { end: 1e3, start: 600 }, { end: 1800, start: 1450 }], surface: 2, turn: 1 }, "10815": { corners: [{ length: 150, start: 400 }, { length: 150, start: 550 }, { length: 225, start: 1100 }, { length: 225, start: 1325 }], course: 1, courseSetStatus: [], distance: 1900, distanceType: 3, raceTrackId: 10008, slopes: [{ length: 200, slope: 15e3, start: 875 }, { length: 200, slope: -15e3, start: 1175 }], straights: [{ end: 400, start: 0 }, { end: 1100, start: 700 }, { end: 1900, start: 1550 }], surface: 2, turn: 1 }, "10901": { corners: [{ length: 300, start: 250 }, { length: 300, start: 550 }], course: 2, courseSetStatus: [], distance: 1200, distanceType: 1, raceTrackId: 10009, slopes: [{ length: 595, slope: -1e4, start: 400 }, { length: 125, slope: 2e4, start: 1e3 }], straights: [{ end: 250, start: 0 }, { end: 1200, start: 850 }], surface: 1, turn: 1 }, "10902": { corners: [{ length: 300, start: 450 }, { length: 300, start: 750 }], course: 2, courseSetStatus: [], distance: 1400, distanceType: 1, raceTrackId: 10009, slopes: [{ length: 595, slope: -1e4, start: 600 }, { length: 125, slope: 2e4, start: 1200 }], straights: [{ end: 450, start: 0 }, { end: 1400, start: 1050 }], surface: 1, turn: 1 }, "10903": { corners: [{ length: 350, start: 450 }, { length: 350, start: 800 }], course: 3, courseSetStatus: [3], distance: 1600, distanceType: 2, raceTrackId: 10009, slopes: [{ length: 400, slope: -1e4, start: 950 }, { length: 120, slope: 2e4, start: 1405 }], straights: [{ end: 450, start: 0 }, { end: 1600, start: 1150 }], surface: 1, turn: 1 }, "10904": { corners: [{ length: 350, start: 650 }, { length: 350, start: 1e3 }], course: 3, courseSetStatus: [3], distance: 1800, distanceType: 2, raceTrackId: 10009, slopes: [{ length: 400, slope: -1e4, start: 1150 }, { length: 120, slope: 2e4, start: 1605 }], straights: [{ end: 650, start: 0 }, { end: 1800, start: 1350 }], surface: 1, turn: 1 }, "10905": { corners: [{ length: 190, start: 370 }, { length: 190, start: 560 }, { length: 300, start: 1050 }, { length: 300, start: 1350 }], course: 2, courseSetStatus: [4], distance: 2e3, distanceType: 3, raceTrackId: 10009, slopes: [{ length: 140, slope: -1e4, start: 0 }, { length: 125, slope: 2e4, start: 145 }, { length: 595, slope: -1e4, start: 1200 }, { length: 125, slope: 2e4, start: 1800 }], straights: [{ end: 370, start: 0 }, { end: 1050, start: 750 }, { end: 2e3, start: 1650 }], surface: 1, turn: 1 }, "10906": { corners: [{ length: 190, start: 520 }, { length: 190, start: 710 }, { length: 300, start: 1250 }, { length: 300, start: 1550 }], course: 2, courseSetStatus: [1], distance: 2200, distanceType: 3, raceTrackId: 10009, slopes: [{ length: 290, slope: -1e4, start: 0 }, { length: 125, slope: 2e4, start: 295 }, { length: 595, slope: -1e4, start: 1400 }, { length: 125, slope: 2e4, start: 2e3 }], straights: [{ end: 520, start: 0 }, { end: 1250, start: 900 }, { end: 2200, start: 1850 }], surface: 1, turn: 1 }, "10907": { corners: [{ length: 190, start: 382 }, { length: 190, start: 558 }, { length: 350, start: 1250 }, { length: 350, start: 1600 }], course: 3, courseSetStatus: [3], distance: 2400, distanceType: 3, raceTrackId: 10009, slopes: [{ length: 132, slope: -1e4, start: 0 }, { length: 120, slope: 2e4, start: 187 }, { length: 400, slope: -1e4, start: 1750 }, { length: 120, slope: 2e4, start: 2205 }], straights: [{ end: 1250, start: 750 }, { end: 2400, start: 1950 }], surface: 1, turn: 1 }, "10908": { corners: [{ length: 190, start: 570 }, { length: 190, start: 760 }, { length: 350, start: 1450 }, { length: 350, start: 1800 }], course: 3, courseSetStatus: [], distance: 2600, distanceType: 4, raceTrackId: 10009, slopes: [{ length: 315, slope: -1e4, start: 0 }, { length: 120, slope: 2e4, start: 370 }, { length: 400, slope: -1e4, start: 1950 }, { length: 120, slope: 2e4, start: 2405 }], straights: [{ end: 570, start: 0 }, { end: 1450, start: 950 }, { end: 2600, start: 2150 }], surface: 1, turn: 1 }, "10909": { corners: [{ length: 300, start: 348 }, { length: 300, start: 648 }, { length: 190, start: 1320 }, { length: 190, start: 1510 }, { length: 300, start: 2050 }, { length: 300, start: 2350 }], course: 2, courseSetStatus: [3], distance: 3e3, distanceType: 4, raceTrackId: 10009, slopes: [{ length: 595, slope: -1e4, start: 498 }, { length: 125, slope: 2e4, start: 1095 }, { length: 595, slope: -1e4, start: 2200 }, { length: 125, slope: 2e4, start: 2800 }], straights: [{ end: 348, start: 0 }, { end: 1320, start: 948 }, { end: 2050, start: 1700 }, { end: 3e3, start: 2650 }], surface: 1, turn: 1 }, "10910": { corners: [{ length: 250, start: 350 }, { length: 250, start: 600 }], course: 1, courseSetStatus: [], distance: 1200, distanceType: 1, raceTrackId: 10009, slopes: [], straights: [{ end: 350, start: 0 }, { end: 1200, start: 850 }], surface: 2, turn: 1 }, "10911": { corners: [{ length: 250, start: 550 }, { length: 250, start: 800 }], course: 1, courseSetStatus: [], distance: 1400, distanceType: 1, raceTrackId: 10009, slopes: [{ length: 125, slope: 15e3, start: 1200 }], straights: [{ end: 550, start: 0 }, { end: 1400, start: 1050 }], surface: 2, turn: 1 }, "10912": { corners: [{ length: 150, start: 330 }, { length: 150, start: 480 }, { length: 250, start: 950 }, { length: 250, start: 1200 }], course: 1, courseSetStatus: [], distance: 1800, distanceType: 2, raceTrackId: 10009, slopes: [{ length: 125, slope: 15e3, start: 105 }, { length: 125, slope: 15e3, start: 1599 }], straights: [{ end: 330, start: 0 }, { end: 950, start: 630 }, { end: 1800, start: 1449 }], surface: 2, turn: 1 }, "10913": { corners: [{ length: 150, start: 500 }, { length: 150, start: 650 }, { length: 250, start: 1150 }, { length: 250, start: 1400 }], course: 1, courseSetStatus: [2, 3], distance: 2e3, distanceType: 3, raceTrackId: 10009, slopes: [{ length: 125, slope: 15e3, start: 275 }, { length: 125, slope: 15e3, start: 1800 }], straights: [{ end: 500, start: 0 }, { end: 1150, start: 800 }, { end: 2e3, start: 1650 }], surface: 2, turn: 1 }, "10914": { corners: [{ length: 350, start: 370 }, { length: 350, start: 720 }, { length: 190, start: 1520 }, { length: 190, start: 1710 }, { length: 300, start: 2250 }, { length: 300, start: 2550 }], course: 4, courseSetStatus: [], distance: 3200, distanceType: 4, raceTrackId: 10009, slopes: [{ length: 400, slope: -1e4, start: 870 }, { length: 120, slope: 2e4, start: 1325 }, { length: 595, slope: -1e4, start: 2400 }, { length: 125, slope: 2e4, start: 3e3 }], straights: [{ end: 370, start: 0 }, { end: 1520, start: 1070 }, { end: 2250, start: 1900 }, { end: 3200, start: 2850 }], surface: 1, turn: 1 }, "11001": { corners: [{ length: 205, start: 500 }, { length: 205, start: 705 }], course: 1, courseSetStatus: [1], distance: 1200, distanceType: 1, raceTrackId: 10010, slopes: [{ length: 60, slope: -15e3, start: 0 }], straights: [{ end: 500, start: 0 }, { end: 1200, start: 910 }], surface: 1, turn: 1 }, "11002": { corners: [{ length: 205, start: 290 }, { length: 205, start: 495 }, { length: 205, start: 1100 }, { length: 205, start: 1305 }], course: 1, courseSetStatus: [], distance: 1800, distanceType: 2, raceTrackId: 10010, slopes: [{ length: 255, slope: 15e3, start: 280 }], straights: [{ end: 290, start: 0 }, { end: 1100, start: 700 }, { end: 1800, start: 1510 }], surface: 1, turn: 1 }, "11003": { corners: [{ length: 205, start: 490 }, { length: 205, start: 695 }, { length: 205, start: 1300 }, { length: 205, start: 1505 }], course: 1, courseSetStatus: [3], distance: 2e3, distanceType: 3, raceTrackId: 10010, slopes: [{ length: 255, slope: 15e3, start: 480 }], straights: [{ end: 490, start: 0 }, { end: 1300, start: 900 }, { end: 2e3, start: 1710 }], surface: 1, turn: 1 }, "11004": { corners: [{ length: 205, start: 309 }, { length: 205, start: 514 }, { length: 205, start: 1110 }, { length: 205, start: 1315 }, { length: 205, start: 1900 }, { length: 205, start: 2105 }], course: 1, courseSetStatus: [2], distance: 2600, distanceType: 4, raceTrackId: 10010, slopes: [{ length: 255, slope: 15e3, start: 1100 }], straights: [{ end: 309, start: 0 }, { end: 1110, start: 719 }, { end: 1900, start: 1520 }, { end: 2600, start: 2310 }], surface: 1, turn: 1 }, "11005": { corners: [{ length: 180, start: 360 }, { length: 180, start: 540 }], course: 1, courseSetStatus: [1], distance: 1e3, distanceType: 1, raceTrackId: 10010, slopes: [], straights: [{ end: 360, start: 0 }, { end: 1e3, start: 720 }], surface: 2, turn: 1 }, "11006": { corners: [{ length: 180, start: 340 }, { length: 180, start: 520 }, { length: 180, start: 1060 }, { length: 180, start: 1240 }], course: 1, courseSetStatus: [], distance: 1700, distanceType: 2, raceTrackId: 10010, slopes: [{ length: 150, slope: 15e3, start: 370 }], straights: [{ end: 340, start: 0 }, { end: 1060, start: 700 }, { end: 1700, start: 1420 }], surface: 2, turn: 1 }, "11007": { corners: [{ length: 180, start: 312 }, { length: 180, start: 492 }, { length: 180, start: 1040 }, { length: 180, start: 1220 }, { length: 180, start: 1760 }, { length: 180, start: 1940 }], course: 1, courseSetStatus: [], distance: 2400, distanceType: 3, raceTrackId: 10010, slopes: [], straights: [{ end: 312, start: 0 }, { end: 1040, start: 672 }, { end: 1760, start: 1400 }, { end: 2400, start: 2120 }], surface: 2, turn: 1 }, "11101": { corners: [{ length: 150, start: 500 }, { length: 150, start: 650 }], course: 1, courseSetStatus: [], distance: 1200, distanceType: 1, raceTrackId: 10101, slopes: [], straights: [{ end: 500, start: 0 }, { end: 1200, start: 812 }], surface: 2, turn: 1 }, "11102": { corners: [{ length: 150, start: 300 }, { length: 150, start: 500 }, { length: 150, start: 1100 }, { length: 150, start: 1250 }], course: 1, courseSetStatus: [], distance: 1800, distanceType: 2, raceTrackId: 10101, slopes: [], straights: [{ end: 301, start: 0 }, { end: 1100.23, start: 600 }, { end: 1800, start: 1400 }], surface: 2, turn: 1 }, "11103": { corners: [{ length: 150, start: 500 }, { length: 150, start: 650 }, { length: 150, start: 1300 }, { length: 150, start: 1450 }], course: 1, courseSetStatus: [], distance: 2e3, distanceType: 3, raceTrackId: 10101, slopes: [], straights: [{ end: 500, start: 0 }, { end: 1300, start: 800 }, { end: 2e3, start: 1600 }], surface: 2, turn: 1 } };

  // ../../skilltool/CourseData.ts
  var assert = require_assert().strict;
  var Surface = /* @__PURE__ */ ((Surface2) => {
    Surface2[Surface2["Turf"] = 1] = "Turf";
    Surface2[Surface2["Dirt"] = 2] = "Dirt";
    return Surface2;
  })(Surface || {});
  var DistanceType = /* @__PURE__ */ ((DistanceType3) => {
    DistanceType3[DistanceType3["Short"] = 1] = "Short";
    DistanceType3[DistanceType3["Mile"] = 2] = "Mile";
    DistanceType3[DistanceType3["Mid"] = 3] = "Mid";
    DistanceType3[DistanceType3["Long"] = 4] = "Long";
    return DistanceType3;
  })(DistanceType || {});
  var Orientation = /* @__PURE__ */ ((Orientation3) => {
    Orientation3[Orientation3["Clockwise"] = 1] = "Clockwise";
    Orientation3[Orientation3["Counterclockwise"] = 2] = "Counterclockwise";
    Orientation3[Orientation3["UnusedOrientation"] = 3] = "UnusedOrientation";
    Orientation3[Orientation3["NoTurns"] = 4] = "NoTurns";
    return Orientation3;
  })(Orientation || {});
  var CourseHelpers;
  ((CourseHelpers2) => {
    function assertIsPhase(phase) {
      assert(phase == 0 || phase == 1 || phase == 2 || phase == 3);
    }
    CourseHelpers2.assertIsPhase = assertIsPhase;
    function assertIsSurface(surface) {
      assert(Surface.hasOwnProperty(surface));
    }
    CourseHelpers2.assertIsSurface = assertIsSurface;
    function assertIsDistanceType(distanceType) {
      assert(DistanceType.hasOwnProperty(distanceType));
    }
    CourseHelpers2.assertIsDistanceType = assertIsDistanceType;
    function assertIsOrientation(orientation) {
      assert(Orientation.hasOwnProperty(orientation));
    }
    CourseHelpers2.assertIsOrientation = assertIsOrientation;
    function isSortedByStart(arr) {
      const init2 = [true, -1];
      function isSorted2(a5, b2) {
        return [a5[0] && b2.start > a5[1], b2.start];
      }
      return arr.reduce(isSorted2, init2)[0];
    }
    CourseHelpers2.isSortedByStart = isSortedByStart;
    function phaseStart(distance, phase) {
      switch (phase) {
        case 0:
          return 0;
        case 1:
          return distance * 1 / 6;
        case 2:
          return distance * 2 / 3;
        case 3:
          return distance * 5 / 6;
      }
    }
    CourseHelpers2.phaseStart = phaseStart;
    function phaseEnd(distance, phase) {
      switch (phase) {
        case 0:
          return distance * 1 / 6;
        case 1:
          return distance * 2 / 3;
        case 2:
          return distance * 5 / 6;
        case 3:
          return distance;
      }
    }
    CourseHelpers2.phaseEnd = phaseEnd;
    function courseSpeedModifier(course, stats) {
      const statvalues = [0, stats.speed, stats.stamina, stats.power, stats.guts, stats.wisdom].map((x5) => Math.min(x5, 901));
      return 1 + course.courseSetStatus.map(
        (stat) => (1 + Math.floor(statvalues[stat] / 300.01)) * 0.05
      ).reduce((a5, b2) => a5 + b2, 0) / Math.max(course.courseSetStatus.length, 1);
    }
    CourseHelpers2.courseSpeedModifier = courseSpeedModifier;
    function getCourse(courseId) {
      const course = course_data_default[courseId];
      if (!isSortedByStart(course.slopes))
        course.slopes.sort((a5, b2) => a5.start - b2.start);
      Object.keys(course).forEach((k4) => Object.freeze(course[k4]));
      return Object.freeze(course);
    }
    CourseHelpers2.getCourse = getCourse;
  })(CourseHelpers || (CourseHelpers = {}));

  // ../components/Language.tsx
  var defaultLanguage = localStorage.getItem("language") || (navigator.language.startsWith("ja") ? "ja" : "en-ja");
  var Language = K(defaultLanguage);
  function useLanguage() {
    return x2(Language);
  }

  // ../../skilltool/HorseTypes.ts
  var assert2 = require_assert().strict;
  var Strategy = /* @__PURE__ */ ((Strategy2) => {
    Strategy2[Strategy2["Nige"] = 1] = "Nige";
    Strategy2[Strategy2["Senkou"] = 2] = "Senkou";
    Strategy2[Strategy2["Sasi"] = 3] = "Sasi";
    Strategy2[Strategy2["Oikomi"] = 4] = "Oikomi";
    Strategy2[Strategy2["Oonige"] = 5] = "Oonige";
    return Strategy2;
  })(Strategy || {});
  var StrategyHelpers;
  ((StrategyHelpers2) => {
    function assertIsStrategy(strategy) {
      assert2(Strategy.hasOwnProperty(strategy));
    }
    StrategyHelpers2.assertIsStrategy = assertIsStrategy;
    function strategyMatches(s1, s22) {
      return s1 == s22 || s1 == 1 /* Nige */ && s22 == 5 /* Oonige */ || s1 == 5 /* Oonige */ && s22 == 1 /* Nige */;
    }
    StrategyHelpers2.strategyMatches = strategyMatches;
  })(StrategyHelpers || (StrategyHelpers = {}));

  // ../../skilltool/Region.ts
  var Region = class _Region {
    constructor(start2, end) {
      this.start = start2;
      this.end = end;
    }
    intersect(other) {
      const start2 = Math.max(this.start, other.start);
      const end = Math.min(this.end, other.end);
      if (end <= start2) {
        return new _Region(-1, -1);
      } else {
        return new _Region(start2, end);
      }
    }
    fullyContains(other) {
      return this.start <= other.start && this.end >= other.end;
    }
  };
  var RegionList = class _RegionList extends Array {
    rmap(f4) {
      const out = new _RegionList();
      this.forEach((r4) => {
        const newr = f4(r4);
        if (Array.isArray(newr)) {
          newr.forEach((nr2) => {
            if (nr2.start > -1) {
              out.push(nr2);
            }
          });
        } else if (newr.start > -1) {
          out.push(newr);
        }
      });
      return out;
    }
    union(other) {
      const u4 = [];
      const r4 = new _RegionList();
      u4.push.apply(u4, this);
      u4.push.apply(u4, other);
      if (u4.length == 0) {
        return r4;
      }
      u4.sort((a5, b2) => a5.start - b2.start);
      r4.push(u4.reduce((a5, b2) => {
        if (a5.fullyContains(b2)) {
          return a5;
        } else if (a5.start <= b2.start && b2.start < a5.end) {
          return new Region(a5.start, b2.end);
        } else if (a5.start < b2.end && b2.end <= a5.end) {
          return new Region(b2.start, a5.end);
        } else {
          r4.push(a5);
          return b2;
        }
      }));
      return r4;
    }
  };

  // ../../skilltool/ActivationSamplePolicy.ts
  var ImmediatePolicy = Object.freeze({
    sample(regions, _0, _1) {
      return regions.slice(0, 1);
    },
    reconcile(other) {
      return other.reconcileImmediate(this);
    },
    reconcileImmediate(other) {
      return other;
    },
    reconcileDistributionRandom(other) {
      return other;
    },
    reconcileRandom(other) {
      return other;
    },
    reconcileStraightRandom(other) {
      return other;
    },
    reconcileAllCornerRandom(other) {
      return other;
    }
  });
  var RandomPolicy = Object.freeze({
    sample(regions, nsamples, rng) {
      if (regions.length == 0) {
        return [];
      }
      let acc = 0;
      const weights = regions.map((r4) => acc += r4.end - r4.start);
      const samples = [];
      for (let i5 = 0; i5 < nsamples; ++i5) {
        const threshold = rng.uniform(acc);
        const region = regions.find((_3, i6) => weights[i6] > threshold);
        samples.push(region.start + rng.uniform(region.end - region.start - 10));
      }
      return samples.map((pos) => new Region(pos, pos + 10));
    },
    reconcile(other) {
      return other.reconcileRandom(this);
    },
    reconcileImmediate(_3) {
      return this;
    },
    reconcileDistributionRandom(other) {
      return this;
    },
    reconcileRandom(other) {
      return other;
    },
    reconcileStraightRandom(other) {
      return other;
    },
    reconcileAllCornerRandom(other) {
      return other;
    }
  });
  var DistributionRandomPolicy = class {
    sample(regions, nsamples, rng) {
      if (regions.length == 0) {
        return [];
      }
      const range = regions.reduce((acc, r4) => acc + r4.end - r4.start, 0);
      const rs2 = regions.slice().sort((a5, b2) => a5.start - b2.start);
      const randoms = this.distribution(range, nsamples, rng);
      const samples = [];
      for (let i5 = 0; i5 < nsamples; ++i5) {
        let pos = randoms[i5];
        for (let j4 = 0; ; j4++) {
          pos += rs2[j4].start;
          if (pos > rs2[j4].end) {
            pos -= rs2[j4].end;
          } else {
            samples.push(new Region(pos, rs2[j4].end));
            break;
          }
        }
      }
      return samples;
    }
    reconcile(other) {
      return other.reconcileDistributionRandom(this);
    }
    reconcileImmediate(_3) {
      return this;
    }
    reconcileDistributionRandom(other) {
      return this;
    }
    // this is probably not exactly the right thing to do either, but the true random conditions do need to place a fixed trigger
    // statically ahead of time, uninfluenced by us. this means that the only alternatives are 1) this condition is coincidentally
    // fulfilled during the static random trigger or 2) the skill does not activate at all.
    // since the latter is not particularly interesting, it's safe to just ignore this sample policy and use only the true random one.
    reconcileRandom(other) {
      return other;
    }
    reconcileStraightRandom(other) {
      return other;
    }
    reconcileAllCornerRandom(other) {
      return other;
    }
  };
  var UniformRandomPolicy = class extends DistributionRandomPolicy {
    constructor() {
      super();
    }
    distribution(upper, nsamples, rng) {
      const nums = [];
      for (let i5 = 0; i5 < nsamples; ++i5) {
        nums.push(rng.uniform(upper));
      }
      return nums;
    }
  };
  var LogNormalRandomPolicy = class extends DistributionRandomPolicy {
    constructor(mu, sigma) {
      super();
      this.mu = mu;
      this.sigma = sigma;
    }
    distribution(upper, nsamples, rng) {
      let nums = [], min5 = Infinity, max6 = 0;
      const halfn = Math.ceil(nsamples / 2);
      for (let i5 = 0; i5 < halfn; ++i5) {
        let x5, y5, r22;
        do {
          x5 = rng.random() * 2 - 1;
          y5 = rng.random() * 2 - 1;
          r22 = x5 * x5 + y5 * y5;
        } while (r22 == 0 || r22 >= 1);
        const m4 = Math.sqrt(-2 * Math.log(r22) / r22) * this.sigma;
        const a5 = Math.exp(x5 * m4 + this.mu);
        const b2 = Math.exp(y5 * m4 + this.mu);
        min5 = Math.min(min5, a5, b2);
        max6 = Math.max(max6, a5, b2);
        nums.push(a5, b2);
      }
      const range = max6 - min5;
      return nums.map((n4) => Math.floor(upper * (n4 - min5) / range));
    }
  };
  var ErlangRandomPolicy = class extends DistributionRandomPolicy {
    constructor(k4, lambda) {
      super();
      this.k = k4;
      this.lambda = lambda;
    }
    distribution(upper, nsamples, rng) {
      const nums = [];
      let min5 = Infinity, max6 = 0;
      for (let i5 = 0; i5 < nsamples; ++i5) {
        let u4 = 1;
        for (let j4 = 0; j4 < this.k; ++j4) {
          u4 *= rng.random();
        }
        const n4 = -Math.log(u4) / this.lambda;
        min5 = Math.min(min5, n4);
        max6 = Math.max(max6, n4);
        nums.push(n4);
      }
      const range = nsamples == 1 ? 18 : max6 - min5;
      return nums.map((n4) => Math.floor(upper * (n4 - min5) / range));
    }
  };
  var StraightRandomPolicy = Object.freeze({
    sample(regions, nsamples, rng) {
      if (regions.length == 0) {
        return [];
      }
      const samples = [];
      for (let i5 = 0; i5 < nsamples; ++i5) {
        const r4 = regions[rng.uniform(regions.length)];
        samples.push(r4.start + rng.uniform(r4.end - r4.start - 10));
      }
      return samples.map((pos) => new Region(pos, pos + 10));
    },
    reconcile(other) {
      return other.reconcileStraightRandom(this);
    },
    reconcileImmediate(_3) {
      return this;
    },
    reconcileDistributionRandom(_3) {
      return this;
    },
    reconcileRandom(_3) {
      return this;
    },
    reconcileStraightRandom(other) {
      return other;
    },
    reconcileAllCornerRandom(other) {
      throw new Error("cannot reconcile StraightRandomPolicy with AllCornerRandomPolicy");
    }
  });
  var AllCornerRandomPolicy = Object.freeze({
    placeTriggers(regions, rng) {
      const triggers = [];
      const candidates = regions.slice();
      candidates.sort((a5, b2) => a5.start - b2.start);
      while (triggers.length < 4 && candidates.length > 0) {
        const ci2 = rng.uniform(candidates.length);
        const c4 = candidates[ci2];
        const start2 = c4.start + rng.uniform(c4.end - c4.start - 10);
        if (start2 + 20 <= c4.end) {
          candidates.splice(ci2, 1, new Region(start2 + 10, c4.end));
        } else {
          candidates.splice(ci2, 1);
        }
        candidates.splice(0, ci2);
        triggers.push(start2);
      }
      return new Region(triggers[0], triggers[0] + 10);
    },
    sample(regions, nsamples, rng) {
      const samples = [];
      for (let i5 = 0; i5 < nsamples; ++i5) {
        samples.push(this.placeTriggers(regions, rng));
      }
      return samples;
    },
    reconcile(other) {
      return other.reconcileAllCornerRandom(this);
    },
    reconcileImmediate(_3) {
      return this;
    },
    reconcileDistributionRandom(_3) {
      return this;
    },
    reconcileRandom(_3) {
      return this;
    },
    reconcileStraightRandom(_3) {
      throw new Error("cannot reconcile StraightRandomPolicy with AllCornerRandomPolicy");
    },
    reconcileAllCornerRandom(_3) {
      return this;
    }
  });

  // ../../skilltool/ActivationConditions.ts
  var assert3 = require_assert().strict;
  function kTrue(_3) {
    return true;
  }
  function withDefaultCond(r4) {
    if (r4 instanceof RegionList) {
      return [r4, kTrue];
    }
    return r4;
  }
  var EqOperator = class {
    constructor(condition, argument) {
      this.condition = condition;
      this.argument = argument;
      this.samplePolicy = condition.samplePolicy;
    }
    apply(regions, course, horse, extra) {
      return withDefaultCond(this.condition.filterEq(regions, this.argument, course, horse, extra));
    }
  };
  var NeqOperator = class {
    constructor(condition, argument) {
      this.condition = condition;
      this.argument = argument;
      this.samplePolicy = condition.samplePolicy;
    }
    apply(regions, course, horse, extra) {
      return withDefaultCond(this.condition.filterNeq(regions, this.argument, course, horse, extra));
    }
  };
  var LtOperator = class {
    constructor(condition, argument) {
      this.condition = condition;
      this.argument = argument;
      this.samplePolicy = condition.samplePolicy;
    }
    apply(regions, course, horse, extra) {
      return withDefaultCond(this.condition.filterLt(regions, this.argument, course, horse, extra));
    }
  };
  var LteOperator = class {
    constructor(condition, argument) {
      this.condition = condition;
      this.argument = argument;
      this.samplePolicy = condition.samplePolicy;
    }
    apply(regions, course, horse, extra) {
      return withDefaultCond(this.condition.filterLte(regions, this.argument, course, horse, extra));
    }
  };
  var GtOperator = class {
    constructor(condition, argument) {
      this.condition = condition;
      this.argument = argument;
      this.samplePolicy = condition.samplePolicy;
    }
    apply(regions, course, horse, extra) {
      return withDefaultCond(this.condition.filterGt(regions, this.argument, course, horse, extra));
    }
  };
  var GteOperator = class {
    constructor(condition, argument) {
      this.condition = condition;
      this.argument = argument;
      this.samplePolicy = condition.samplePolicy;
    }
    apply(regions, course, horse, extra) {
      return withDefaultCond(this.condition.filterGte(regions, this.argument, course, horse, extra));
    }
  };
  var AndOperator = class {
    constructor(left2, right2) {
      this.left = left2;
      this.right = right2;
      this.samplePolicy = left2.samplePolicy.reconcile(right2.samplePolicy);
    }
    apply(regions, course, horse, extra) {
      const [leftval, leftcond] = this.left.apply(regions, course, horse, extra);
      const [rightval, rightcond] = this.right.apply(leftval, course, horse, extra);
      if (leftcond === kTrue && rightcond === kTrue) {
        return [rightval, kTrue];
      }
      return [rightval, (s4) => leftcond(s4) && rightcond(s4)];
    }
  };
  var OrOperator = class {
    constructor(left2, right2) {
      this.left = left2;
      this.right = right2;
      this.samplePolicy = left2.samplePolicy.reconcile(right2.samplePolicy);
    }
    apply(regions, course, horse, extra) {
      const [leftval, leftcond] = this.left.apply(regions, course, horse, extra);
      const [rightval, rightcond] = this.right.apply(regions, course, horse, extra);
      return [leftval.union(rightval), (s4) => leftcond(s4) || rightcond(s4)];
    }
  };
  function notSupported(_0, _1, _22, _3, extra) {
    assert3(false, "unsupported comparison");
    throw 0;
  }
  function noop2(regions, _1, _22, _3, extra) {
    return regions;
  }
  var noopAll = Object.freeze({
    filterEq: noop2,
    filterNeq: noop2,
    filterLt: noop2,
    filterLte: noop2,
    filterGt: noop2,
    filterGte: noop2
  });
  var noopImmediate = Object.freeze(Object.assign({ samplePolicy: ImmediatePolicy }, noopAll));
  var noopRandom = Object.freeze(Object.assign({ samplePolicy: RandomPolicy }, noopAll));
  var defaultImmediate = Object.freeze({
    samplePolicy: ImmediatePolicy,
    filterEq: notSupported,
    filterNeq: notSupported,
    filterLt: notSupported,
    filterLte: notSupported,
    filterGt: notSupported,
    filterGte: notSupported
  });
  function immediate(o5) {
    return Object.assign({}, defaultImmediate, o5);
  }
  var defaultRandom = Object.freeze({
    samplePolicy: RandomPolicy,
    filterEq: notSupported,
    filterNeq: notSupported,
    filterLt: notSupported,
    filterLte: notSupported,
    filterGt: notSupported,
    filterGte: notSupported
  });
  function random(o5) {
    return Object.assign({}, defaultRandom, o5);
  }
  function distributionRandomFactory(cls) {
    const cache = /* @__PURE__ */ Object.create(null);
    return function(...args) {
      const o5 = args.pop();
      const key = args.join(",");
      const policy = key in cache ? cache[key] : cache[key] = Object.freeze(new cls(...args));
      return Object.assign({
        samplePolicy: policy,
        filterEq: notSupported,
        filterNeq: notSupported,
        filterLt: notSupported,
        filterLte: notSupported,
        filterGt: notSupported,
        filterGte: notSupported
      }, o5);
    };
  }
  var logNormalRandom = distributionRandomFactory(LogNormalRandomPolicy);
  var erlangRandom = distributionRandomFactory(ErlangRandomPolicy);
  var uniformRandom = distributionRandomFactory(UniformRandomPolicy);
  function noopErlangRandom(k4, lambda) {
    return erlangRandom(k4, lambda, noopAll);
  }
  var noopUniformRandom = uniformRandom(noopAll);
  function noopSectionRandom(start2, end) {
    function sectionRandom(regions, _0, course, _1, extra) {
      const bounds = new Region(start2 * (course.distance / 24), end * (course.distance / 24));
      return regions.rmap((r4) => r4.intersect(bounds));
    }
    return random({
      filterEq: sectionRandom,
      filterNeq: sectionRandom,
      filterLt: sectionRandom,
      filterLte: sectionRandom,
      filterGt: sectionRandom,
      filterGte: sectionRandom
    });
  }
  function valueFilter(getValue) {
    return immediate({
      filterEq(regions, value, course, horse, extra) {
        return getValue(course, horse, extra) == value ? regions : new RegionList();
      },
      filterNeq(regions, value, course, horse, extra) {
        return getValue(course, horse, extra) != value ? regions : new RegionList();
      },
      filterLt(regions, value, course, horse, extra) {
        return getValue(course, horse, extra) < value ? regions : new RegionList();
      },
      filterLte(regions, value, course, horse, extra) {
        return getValue(course, horse, extra) <= value ? regions : new RegionList();
      },
      filterGt(regions, value, course, horse, extra) {
        return getValue(course, horse, extra) > value ? regions : new RegionList();
      },
      filterGte(regions, value, course, horse, extra) {
        return getValue(course, horse, extra) >= value ? regions : new RegionList();
      }
    });
  }
  function orderFilter(getPos) {
    return immediate({
      filterEq(regions, arg, _0, _1, extra) {
        if (extra.orderRange != null) {
          const pos = getPos(arg, extra.numUmas);
          return pos >= extra.orderRange[0] && pos <= extra.orderRange[1] ? regions : new RegionList();
        }
        return regions;
      },
      filterNeq(regions, arg, _0, _1, extra) {
        if (extra.orderRange != null) {
          const pos = getPos(arg, extra.numUmas);
          return pos < extra.orderRange[0] || pos > extra.orderRange[1] ? regions : new RegionList();
        }
        return regions;
      },
      filterLt(regions, arg, course, _3, extra) {
        if (extra.orderRange != null) {
          assert3(1 <= extra.orderRange[0] && extra.orderRange[0] <= extra.orderRange[1]);
          const end = new Region(CourseHelpers.phaseStart(course.distance, 2) + 100, course.distance);
          const pos = getPos(arg, extra.numUmas);
          return extra.orderRange[0] < pos ? regions : regions.rmap((r4) => r4.intersect(end));
        }
        return regions;
      },
      filterLte(regions, arg, course, _3, extra) {
        if (extra.orderRange != null) {
          assert3(1 <= extra.orderRange[0] && extra.orderRange[0] <= extra.orderRange[1]);
          const end = new Region(CourseHelpers.phaseStart(course.distance, 2) + 100, course.distance);
          const pos = getPos(arg, extra.numUmas);
          return extra.orderRange[0] <= pos ? regions : regions.rmap((r4) => r4.intersect(end));
        }
        return regions;
      },
      filterGt(regions, arg, _0, _1, extra) {
        if (extra.orderRange != null) {
          assert3(extra.orderRange[0] <= extra.orderRange[1] && extra.orderRange[1] <= extra.numUmas);
          const pos = getPos(arg, extra.numUmas);
          return pos < extra.orderRange[1] ? regions : new RegionList();
        }
        return regions;
      },
      filterGte(regions, arg, _0, _1, extra) {
        if (extra.orderRange != null) {
          assert3(extra.orderRange[0] <= extra.orderRange[1] && extra.orderRange[1] <= extra.numUmas);
          const pos = getPos(arg, extra.numUmas);
          return pos <= extra.orderRange[1] ? regions : new RegionList();
        }
        return regions;
      }
    });
  }
  function orderInFilter(rate) {
    return immediate({
      filterEq(regions, one2, _0, _1, extra) {
        assert3(one2 == 1, "must be order_rate_inXX_continue==1");
        if (extra.orderRange != null) {
          assert3(1 <= extra.orderRange[0] && extra.orderRange[0] <= extra.orderRange[1]);
          return extra.orderRange[0] <= Math.round(rate * extra.numUmas) ? regions : new RegionList();
        }
        return regions;
      }
    });
  }
  function orderOutFilter(rate) {
    return immediate({
      filterEq(regions, one2, _0, _1, extra) {
        assert3(one2 == 1, "must be order_rate_outXX_continue==1");
        if (extra.orderRange != null) {
          assert3(extra.orderRange[0] <= extra.orderRange[1] && extra.orderRange[1] <= extra.numUmas);
          return Math.round(rate * extra.numUmas) <= extra.orderRange[1] ? regions : new RegionList();
        }
        return regions;
      }
    });
  }
  var Conditions = Object.freeze({
    accumulatetime: immediate({
      filterGte(regions, t4, _0, _1, extra) {
        return [regions, (s4) => s4.accumulatetime.t >= t4];
      }
    }),
    activate_count_all: immediate({
      filterLte(regions, n4, _0, _1, extra) {
        return [regions, (s4) => s4.activateCount.reduce((a5, b2) => a5 + b2) <= n4];
      },
      filterGte(regions, n4, _0, _1, extra) {
        return [regions, (s4) => s4.activateCount.reduce((a5, b2) => a5 + b2) >= n4];
      }
    }),
    activate_count_end_after: immediate({
      filterGte(regions, n4, _0, _1, extra) {
        return [regions, (s4) => s4.activateCount[2] >= n4];
      }
    }),
    activate_count_heal: immediate({
      filterGte(regions, n4, _0, _1, extra) {
        return [regions, (s4) => s4.activateCountHeal >= n4];
      }
    }),
    activate_count_middle: immediate({
      filterGte(regions, n4, _0, _1, extra) {
        return [regions, (s4) => s4.activateCount[1] >= n4];
      }
    }),
    activate_count_start: immediate({
      filterGte(regions, n4, _0, _1, extra) {
        return [regions, (s4) => s4.activateCount[0] >= n4];
      }
    }),
    all_corner_random: {
      samplePolicy: AllCornerRandomPolicy,
      filterEq(regions, one2, course, _3, extra) {
        assert3(one2 == 1, "must be all_corner_random==1");
        const corners = course.corners.map((c4) => new Region(c4.start, c4.start + c4.length));
        return regions.rmap((r4) => corners.map((c4) => r4.intersect(c4)));
      },
      filterNeq: notSupported,
      filterLt: notSupported,
      filterLte: notSupported,
      filterGt: notSupported,
      filterGte: notSupported
    },
    always: noopImmediate,
    // NB. since skill conditions are processed before any skill activations, stats here are base stats (i.e. greens are not included)
    base_power: valueFilter((_3, horse, extra) => horse.power),
    base_speed: valueFilter((_3, horse, extra) => horse.speed),
    base_stamina: valueFilter((_3, horse, extra) => horse.stamina),
    base_guts: valueFilter((_3, horse, extra) => horse.guts),
    base_wiz: valueFilter((_3, horse, extra) => horse.wisdom),
    bashin_diff_behind: noopErlangRandom(3, 2),
    bashin_diff_infront: noopErlangRandom(3, 2),
    behind_near_lane_time: noopErlangRandom(3, 2),
    // NB. at least in theory _set1 should have a slightly more early-biased distribution since it's technically easier to activate, but I don't
    // really think it makes much of a difference. Same with blocked_front vs blocked_front_continuetime I suppose.
    behind_near_lane_time_set1: noopErlangRandom(3, 2),
    blocked_all_continuetime: noopErlangRandom(3, 2),
    blocked_front: noopErlangRandom(3, 2),
    blocked_front_continuetime: noopErlangRandom(3, 2),
    blocked_side_continuetime: noopErlangRandom(3, 2),
    change_order_onetime: noopErlangRandom(3, 2),
    change_order_up_end_after: erlangRandom(3, 2, {
      filterGte(regions, _0, course, _1, extra) {
        const bounds = new Region(CourseHelpers.phaseStart(course.distance, 2), course.distance);
        return regions.rmap((r4) => r4.intersect(bounds));
      }
    }),
    change_order_up_finalcorner_after: erlangRandom(3, 2, {
      filterGte(regions, _0, course, _1, extra) {
        assert3(CourseHelpers.isSortedByStart(course.corners), "course corners must be sorted by start");
        if (course.corners.length == 0) {
          return new RegionList();
        }
        const finalCornerStart = course.corners[course.corners.length - 1].start;
        const bounds = new Region(finalCornerStart, course.distance);
        return regions.rmap((r4) => r4.intersect(bounds));
      }
    }),
    change_order_up_middle: erlangRandom(3, 2, {
      filterGte(regions, _0, course, _1, extra) {
        const bounds = new Region(CourseHelpers.phaseStart(course.distance, 1), CourseHelpers.phaseEnd(course.distance, 1));
        return regions.rmap((r4) => r4.intersect(bounds));
      }
    }),
    compete_fight_count: uniformRandom({
      filterGt(regions, _0, course, _1, extra) {
        assert3(CourseHelpers.isSortedByStart(course.straights), "course straights must be sorted by start");
        const lastStraight = course.straights[course.straights.length - 1];
        return regions.rmap((r4) => r4.intersect(lastStraight));
      }
    }),
    corner: immediate({
      filterEq(regions, cornerNum, course, _3, extra) {
        assert3(CourseHelpers.isSortedByStart(course.corners), "course corners must be sorted by start");
        if (cornerNum == 0) {
          let lastEnd = 0;
          const nonCorners = course.corners.map((c4) => {
            const r4 = new Region(lastEnd, c4.start);
            lastEnd = c4.start + c4.length;
            return r4;
          });
          if (lastEnd != course.distance) {
            nonCorners.push(new Region(lastEnd, course.distance));
          }
          return regions.rmap((r4) => nonCorners.map((s4) => r4.intersect(s4)));
        } else if (course.corners.length + cornerNum >= 5) {
          const corners = [];
          for (let cornerIdx = course.corners.length + cornerNum - 5; cornerIdx >= 0; cornerIdx -= 4) {
            const corner = course.corners[cornerIdx];
            corners.push(new Region(corner.start, corner.start + corner.length));
          }
          corners.reverse();
          return regions.rmap((r4) => corners.map((c4) => r4.intersect(c4)));
        } else {
          return new RegionList();
        }
      },
      filterNeq(regions, cornerNum, course, _3, extra) {
        assert3(cornerNum == 0, "only supports corner!=0");
        const corners = course.corners.map((c4) => new Region(c4.start, c4.start + c4.length));
        return regions.rmap((r4) => corners.map((c4) => r4.intersect(c4)));
      }
    }),
    corner_count: valueFilter((course, _3, extra) => course.corners.length),
    // FIXME this shouldn't actually be random, since in cases like corner_random==1@corner_random==2 it should sample
    // only from the first corner and not from the combined regions, so it needs its own sample policy
    // actually, that's slightly annoying to handle since corners come in back-to-back pairs, so their regions will
    // get merged by the union operation.
    // the real way to fix this is to finally allow placing multiple triggers, then each branch of an @ can simply
    // place its own trigger and the problem goes away.
    corner_random: random({
      filterEq(regions, cornerNum, course, _3, extra) {
        assert3(CourseHelpers.isSortedByStart(course.corners), "course corners must be sorted by start");
        if (course.corners.length + cornerNum >= 5) {
          const corner = course.corners[course.corners.length + cornerNum - 5];
          const cornerBounds = new Region(corner.start, corner.start + corner.length);
          return regions.rmap((r4) => r4.intersect(cornerBounds));
        } else {
          return new RegionList();
        }
      }
    }),
    course_distance: valueFilter((course, _3, extra) => course.distance),
    distance_diff_rate: noopImmediate,
    distance_diff_top: noopImmediate,
    distance_diff_top_float: noopImmediate,
    distance_rate: immediate({
      filterLte(regions, rate, course, _3, extra) {
        const bounds = new Region(0, course.distance * rate / 100);
        return regions.rmap((r4) => r4.intersect(bounds));
      },
      filterGte(regions, rate, course, _3, extra) {
        const bounds = new Region(course.distance * rate / 100, course.distance);
        return regions.rmap((r4) => r4.intersect(bounds));
      }
    }),
    distance_rate_after_random: random({
      filterEq(regions, rate, course, _3, extra) {
        const bounds = new Region(course.distance * rate / 100, course.distance);
        return regions.rmap((r4) => r4.intersect(bounds));
      }
    }),
    distance_type: immediate({
      filterEq(regions, distanceType, course, _3, extra) {
        CourseHelpers.assertIsDistanceType(distanceType);
        if (course.distanceType == distanceType) {
          return regions;
        } else {
          return new RegionList();
        }
      },
      filterNeq(regions, distanceType, course, _3, extra) {
        CourseHelpers.assertIsDistanceType(distanceType);
        if (course.distanceType != distanceType) {
          return regions;
        } else {
          return new RegionList();
        }
      }
    }),
    down_slope_random: random({
      filterEq(regions, one2, course, _3, extra) {
        assert3(one2 == 1, "must be down_slope_random==1");
        const slopes = course.slopes.filter((s4) => s4.slope < 0).map((s4) => new Region(s4.start, s4.start + s4.length));
        return regions.rmap((r4) => slopes.map((s4) => r4.intersect(s4)));
      }
    }),
    grade: valueFilter((_0, _1, extra) => extra.grade),
    ground_condition: valueFilter((_0, _1, extra) => extra.groundCondition),
    ground_type: valueFilter((course, _3, extra) => course.surface),
    hp_per: immediate({
      filterLte(regions, hpPer, _0, _1, extra) {
        hpPer /= 100;
        return [regions, (s4) => s4.hp.hpRatioRemaining() <= hpPer];
      },
      filterGte(regions, hpPer, _0, _1, extra) {
        hpPer /= 100;
        return [regions, (s4) => s4.hp.hpRatioRemaining() >= hpPer];
      }
    }),
    infront_near_lane_time: noopErlangRandom(3, 2),
    is_activate_other_skill_detail: immediate({
      filterEq(regions, one2, _0, _1, extra) {
        assert3(one2 == 1, "must be is_activate_other_skill_detail==1");
        return [regions, (s4) => s4.usedSkills.has(extra.skillId)];
      }
    }),
    is_basis_distance: immediate({
      filterEq(regions, flag, course, _3, extra) {
        assert3(flag == 0 || flag == 1, "must be is_basis_distance==0 or is_basis_distance==1");
        return Math.min(course.distance % 400, 1) != flag ? regions : new RegionList();
      }
    }),
    is_badstart: immediate({
      filterEq(regions, flag, _0, _1, extra) {
        assert3(flag == 0 || flag == 1, "must be is_badstart==0 or is_badstart==1");
        const f4 = flag ? (s4) => s4.startDelay > 0.08 : (s4) => s4.startDelay <= 0.08;
        return [regions, f4];
      }
    }),
    is_behind_in: noopImmediate,
    is_dirtgrade: immediate({
      filterEq(regions, flag, course, _3, extra) {
        assert3(flag == 1, "must be is_dirtgrade==1");
        return [10101, 10103, 10104, 10105].indexOf(course.raceTrackId) > -1 ? regions : new RegionList();
      },
      filterNeq(regions, flag, course, _3, extra) {
        assert3(flag == 1, "must be is_dirtgrade!=1");
        return [10101, 10103, 10104, 10105].indexOf(course.raceTrackId) == -1 ? regions : new RegionList();
      }
    }),
    is_finalcorner: immediate({
      filterEq(regions, flag, course, _3, extra) {
        assert3(flag == 0 || flag == 1, "must be is_finalcorner==0 or is_finalcorner==1");
        assert3(CourseHelpers.isSortedByStart(course.corners), "course corners must be sorted by start");
        if (course.corners.length == 0) {
          return new RegionList();
        }
        const finalCornerStart = course.corners[course.corners.length - 1].start;
        const bounds = flag ? new Region(finalCornerStart, course.distance) : new Region(0, finalCornerStart);
        return regions.rmap((r4) => r4.intersect(bounds));
      }
    }),
    is_finalcorner_laterhalf: immediate({
      filterEq(regions, one2, course, _3, extra) {
        assert3(one2 == 1, "must be is_finalcorner_laterhalf==1");
        assert3(CourseHelpers.isSortedByStart(course.corners), "course corners must be sorted by start");
        if (course.corners.length == 0) {
          return new RegionList();
        }
        const fc = course.corners[course.corners.length - 1];
        const bounds = new Region((fc.start + fc.start + fc.length) / 2, fc.start + fc.length);
        return regions.rmap((r4) => r4.intersect(bounds));
      }
    }),
    is_finalcorner_random: random({
      filterEq(regions, one2, course, _3, extra) {
        assert3(one2 == 1, "must be is_finalcorner_random==1");
        assert3(CourseHelpers.isSortedByStart(course.corners), "course corners must be sorted by start");
        if (course.corners.length == 0) {
          return new RegionList();
        }
        const fc = course.corners[course.corners.length - 1];
        const bounds = new Region(fc.start, fc.start + fc.length);
        return regions.rmap((r4) => r4.intersect(bounds));
      }
    }),
    is_lastspurt: immediate({
      filterEq(regions, one2, course, _3, extra) {
        assert3(one2 == 1, "must be is_lastspurt==1");
        const bounds = new Region(CourseHelpers.phaseStart(course.distance, 2), course.distance);
        return [regions.rmap((r4) => r4.intersect(bounds)), (s4) => s4.isLastSpurt];
      }
    }),
    is_last_straight: immediate({
      filterEq(regions, one2, course, _3, extra) {
        assert3(one2 == 1, "must be is_last_straight_onetime==1");
        assert3(CourseHelpers.isSortedByStart(course.straights), "course straights must be sorted by start");
        const lastStraight = course.straights[course.straights.length - 1];
        return regions.rmap((r4) => r4.intersect(lastStraight));
      }
    }),
    is_last_straight_onetime: immediate({
      filterEq(regions, one2, course, _3, extra) {
        assert3(one2 == 1, "must be is_last_straight_onetime==1");
        assert3(CourseHelpers.isSortedByStart(course.straights), "course straights must be sorted by start");
        const lastStraightStart = course.straights[course.straights.length - 1].start;
        const trigger = new Region(lastStraightStart, lastStraightStart + 10);
        return regions.rmap((r4) => r4.intersect(trigger));
      }
    }),
    is_move_lane: noopErlangRandom(5, 1),
    is_overtake: noopErlangRandom(1, 2),
    is_surrounded: noopErlangRandom(3, 2),
    is_temptation: noopImmediate,
    is_used_skill_id: immediate({
      filterEq(regions, skillId, _0, _1, extra) {
        return [regions, (s4) => s4.usedSkills.has("" + skillId)];
      }
    }),
    lane_type: noopImmediate,
    lastspurt: immediate({
      filterEq(regions, case_, course, _3, extra) {
        let f4;
        switch (case_) {
          case 1:
            f4 = (s4) => s4.isLastSpurt && s4.lastSpurtTransition != -1;
            break;
          case 2:
            f4 = (s4) => s4.isLastSpurt && s4.lastSpurtTransition == -1;
            break;
          case 3:
            f4 = (s4) => !s4.isLastSpurt;
            break;
          default:
            assert3(1 <= case_ && case_ <= 3, "lastspurt case must be 1-3");
        }
        const bounds = new Region(CourseHelpers.phaseStart(course.distance, 2), course.distance);
        return [regions.rmap((r4) => r4.intersect(bounds)), f4];
      }
    }),
    motivation: valueFilter((_0, _1, extra) => extra.mood + 3),
    // go from -2 to 2 to 1-5 scale
    near_count: noopErlangRandom(3, 2),
    order: orderFilter((pos, _3) => pos),
    order_rate: orderFilter((rate, numUmas) => Math.round(numUmas * (rate / 100))),
    order_rate_in20_continue: orderInFilter(0.2),
    order_rate_in40_continue: orderInFilter(0.4),
    order_rate_in80_continue: orderInFilter(0.8),
    order_rate_out20_continue: orderOutFilter(0.2),
    order_rate_out40_continue: orderOutFilter(0.4),
    order_rate_out50_continue: orderOutFilter(0.5),
    order_rate_out70_continue: orderOutFilter(0.7),
    overtake_target_no_order_up_time: noopErlangRandom(3, 2),
    overtake_target_time: noopErlangRandom(3, 2),
    phase: {
      samplePolicy: ImmediatePolicy,
      filterEq(regions, phase, course, _3, extra) {
        CourseHelpers.assertIsPhase(phase);
        const fudge = ["100591", "900591", "110261", "910261", "110191", "910191", "120451", "920451", "101502121"].indexOf(extra.skillId) > -1 ? 10 : 0;
        const bounds = new Region(CourseHelpers.phaseStart(course.distance, phase), CourseHelpers.phaseEnd(course.distance, phase) + fudge);
        return regions.rmap((r4) => r4.intersect(bounds));
      },
      filterNeq: notSupported,
      filterLt(regions, phase, course, _3, extra) {
        CourseHelpers.assertIsPhase(phase);
        assert3(phase > 0, "phase == 0");
        const bounds = new Region(0, CourseHelpers.phaseStart(course.distance, phase));
        return regions.rmap((r4) => r4.intersect(bounds));
      },
      filterLte(regions, phase, course, _3, extra) {
        CourseHelpers.assertIsPhase(phase);
        const bounds = new Region(0, CourseHelpers.phaseEnd(course.distance, phase));
        return regions.rmap((r4) => r4.intersect(bounds));
      },
      filterGt(regions, phase, course, _3, extra) {
        CourseHelpers.assertIsPhase(phase);
        assert3(phase < 3, "phase > 2");
        const bounds = new Region(CourseHelpers.phaseStart(course.distance, phase + 1), course.distance);
        return regions.rmap((r4) => r4.intersect(bounds));
      },
      filterGte(regions, phase, course, _3, extra) {
        CourseHelpers.assertIsPhase(phase);
        const bounds = new Region(CourseHelpers.phaseStart(course.distance, phase), course.distance);
        return regions.rmap((r4) => r4.intersect(bounds));
      }
    },
    phase_corner_random: random({
      filterEq(regions, phase, course, _3, extra) {
        CourseHelpers.assertIsPhase(phase);
        const phaseStart = CourseHelpers.phaseStart(course.distance, phase);
        const phaseEnd = CourseHelpers.phaseEnd(course.distance, phase);
        const corners = course.corners.filter((c4) => c4.start >= phaseStart && c4.start < phaseEnd || c4.start + c4.length >= phaseStart && c4.start + c4.length < phaseEnd).map((c4) => new Region(Math.max(c4.start, phaseStart), Math.min(c4.start + c4.length, phaseEnd)));
        return regions.rmap((r4) => corners.map((c4) => r4.intersect(c4)));
      }
    }),
    phase_firsthalf_random: random({
      filterEq(regions, phase, course, _3, extra) {
        CourseHelpers.assertIsPhase(phase);
        const start2 = CourseHelpers.phaseStart(course.distance, phase);
        const end = CourseHelpers.phaseEnd(course.distance, phase);
        const bounds = new Region(start2, start2 + (end - start2) / 2);
        return regions.rmap((r4) => r4.intersect(bounds));
      }
    }),
    phase_firstquarter: immediate({
      filterEq(regions, phase, course, _3, extra) {
        CourseHelpers.assertIsPhase(phase);
        const start2 = CourseHelpers.phaseStart(course.distance, phase);
        const end = CourseHelpers.phaseEnd(course.distance, phase);
        const bounds = new Region(start2, start2 + (end - start2) / 4);
        return regions.rmap((r4) => r4.intersect(bounds));
      }
    }),
    phase_firstquarter_random: random({
      filterEq(regions, phase, course, _3, extra) {
        CourseHelpers.assertIsPhase(phase);
        const start2 = CourseHelpers.phaseStart(course.distance, phase);
        const end = CourseHelpers.phaseEnd(course.distance, phase);
        const bounds = new Region(start2, start2 + (end - start2) / 4);
        return regions.rmap((r4) => r4.intersect(bounds));
      }
    }),
    phase_laterhalf_random: random({
      filterEq(regions, phase, course, _3, extra) {
        CourseHelpers.assertIsPhase(phase);
        const start2 = CourseHelpers.phaseStart(course.distance, phase);
        const end = CourseHelpers.phaseEnd(course.distance, phase);
        const bounds = new Region((start2 + end) / 2, end);
        return regions.rmap((r4) => r4.intersect(bounds));
      }
    }),
    phase_random: random({
      filterEq(regions, phase, course, _3, extra) {
        CourseHelpers.assertIsPhase(phase);
        const bounds = new Region(CourseHelpers.phaseStart(course.distance, phase), CourseHelpers.phaseEnd(course.distance, phase));
        return regions.rmap((r4) => r4.intersect(bounds));
      }
    }),
    phase_straight_random: {
      samplePolicy: StraightRandomPolicy,
      filterEq(regions, phase, course, _3, extra) {
        CourseHelpers.assertIsPhase(phase);
        const phaseBounds = new Region(CourseHelpers.phaseStart(course.distance, phase), CourseHelpers.phaseEnd(course.distance, phase));
        return regions.rmap((r4) => course.straights.map((s4) => r4.intersect(s4))).rmap((r4) => r4.intersect(phaseBounds));
      },
      filterNeq: notSupported,
      filterLt: notSupported,
      filterLte: notSupported,
      filterGt: notSupported,
      filterGte: notSupported
    },
    popularity: noopImmediate,
    post_number: noopImmediate,
    remain_distance: immediate({
      filterEq(regions, remain, course, _3, extra) {
        const bounds = new Region(course.distance - remain, course.distance - remain + 1);
        return regions.rmap((r4) => r4.intersect(bounds));
      },
      filterLte(regions, remain, course, _3, extra) {
        const bounds = new Region(course.distance - remain, course.distance);
        return regions.rmap((r4) => r4.intersect(bounds));
      },
      filterGte(regions, remain, course, _3, extra) {
        const bounds = new Region(0, course.distance - remain);
        return regions.rmap((r4) => r4.intersect(bounds));
      }
    }),
    rotation: valueFilter((course, _3, extra) => course.turn),
    running_style: immediate({
      filterEq(regions, strategy, _3, horse, extra) {
        StrategyHelpers.assertIsStrategy(strategy);
        if (StrategyHelpers.strategyMatches(horse.strategy, strategy)) {
          return regions;
        } else {
          return new RegionList();
        }
      }
    }),
    running_style_count_same: noopImmediate,
    running_style_count_same_rate: noopImmediate,
    running_style_count_nige_otherself: noopImmediate,
    running_style_count_senko_otherself: noopImmediate,
    running_style_count_sashi_otherself: noopImmediate,
    running_style_count_oikomi_otherself: noopImmediate,
    running_style_equal_popularity_one: noopImmediate,
    running_style_temptation_count_nige: noopSectionRandom(2, 9),
    running_style_temptation_count_senko: noopSectionRandom(2, 9),
    running_style_temptation_count_sashi: noopSectionRandom(2, 9),
    running_style_temptation_count_oikomi: noopSectionRandom(2, 9),
    same_skill_horse_count: noopImmediate,
    season: valueFilter((_0, _1, extra) => extra.season),
    slope: immediate({
      filterEq(regions, slopeType, course, _3, extra) {
        assert3(slopeType == 0 || slopeType == 1 || slopeType == 2, "slopeType");
        assert3(CourseHelpers.isSortedByStart(course.slopes), "course slopes must be sorted by slope start");
        let lastEnd = 0;
        const slopes = course.slopes.filter((s4) => slopeType != 2 && s4.slope > 0 || slopeType != 1 && s4.slope < 0);
        const slopeR = slopeType == 0 ? slopes.map((s4) => {
          const r4 = new Region(lastEnd, s4.start);
          lastEnd = s4.start + s4.length;
          return r4;
        }) : slopes.map((s4) => new Region(s4.start, s4.start + s4.length));
        if (slopeType == 0 && lastEnd != course.distance) {
          slopeR.push(new Region(lastEnd, course.distance));
        }
        return regions.rmap((r4) => slopeR.map((s4) => r4.intersect(s4)));
      }
    }),
    straight_front_type: immediate({
      filterEq(regions, frontType, course, _3, extra) {
        assert3(frontType == 1 || frontType == 2, "frontType");
        const straights = course.straights.filter((s4) => s4.frontType == frontType);
        return regions.rmap((r4) => straights.map((s4) => r4.intersect(s4)));
      }
    }),
    straight_random: {
      samplePolicy: StraightRandomPolicy,
      filterEq(regions, one2, course, _3, extra) {
        assert3(one2 == 1, "must be straight_random==1");
        return regions.rmap((r4) => course.straights.map((s4) => r4.intersect(s4)));
      },
      filterNeq: notSupported,
      filterLt: notSupported,
      filterLte: notSupported,
      filterGt: notSupported,
      filterGte: notSupported
    },
    temptation_count: noopImmediate,
    temptation_count_behind: noopSectionRandom(2, 9),
    temptation_count_infront: noopSectionRandom(2, 9),
    time: valueFilter((_0, _1, extra) => extra.time),
    track_id: valueFilter((course, _3, extra) => course.raceTrackId),
    up_slope_random: random({
      filterEq(regions, one2, course, _3, extra) {
        assert3(one2 == 1, "must be up_slope_random==1");
        const slopes = course.slopes.filter((s4) => s4.slope > 0).map((s4) => new Region(s4.start, s4.start + s4.length));
        return regions.rmap((r4) => slopes.map((s4) => r4.intersect(s4)));
      }
    }),
    visiblehorse: noopImmediate,
    weather: valueFilter((_0, _1, extra) => extra.weather)
  });

  // ../../skilltool/ConditionParser.ts
  var ParseError = class extends Error {
    constructor(msg) {
      super(msg);
    }
  };
  function isId(c4) {
    return "a".charCodeAt(0) <= c4 && c4 <= "z".charCodeAt(0) || "0".charCodeAt(0) <= c4 && c4 <= "9".charCodeAt(0) || c4 == "_".charCodeAt(0);
  }
  var IntValue = class {
    constructor(value) {
      this.lbp = 0;
      this.value = value;
    }
    led(state, left2) {
      throw new ParseError("unexpected integer literal");
    }
    nud(state) {
      return { type: 0 /* Int */, value: this.value };
    }
  };
  function getParser(conditions = Conditions, operators = {
    and: AndOperator,
    // this is really stupid
    or: OrOperator,
    eq: EqOperator,
    neq: NeqOperator,
    lt: LtOperator,
    lte: LteOperator,
    gt: GtOperator,
    gte: GteOperator
  }) {
    const Eof = Object.freeze({
      lbp: 0,
      led: (state, left2) => {
        throw new ParseError("unexpected eof");
      },
      nud: (state) => {
        throw new ParseError("unexpected eof");
      }
    });
    class Identifier {
      constructor(value) {
        this.lbp = 0;
        this.value = value;
      }
      led(state, left2) {
        throw new ParseError("unexpected identifier");
      }
      nud(state) {
        return { type: 1 /* Cond */, cond: conditions[this.value] };
      }
    }
    class CmpOp {
      constructor(lbp, opclass) {
        this.lbp = lbp;
        this.opclass = opclass;
      }
      led(state, left2) {
        if (left2.type != 1 /* Cond */)
          throw new ParseError("expected condition on left hand side of comparison");
        const right2 = expression(state, this.lbp);
        if (right2.type != 0 /* Int */)
          throw new ParseError("expected number on right hand side of comparison");
        return { type: 2 /* Op */, op: new this.opclass(left2.cond, right2.value) };
      }
      nud(state) {
        throw new ParseError("expected expression");
      }
    }
    class LogicalOp {
      constructor(lbp, opclass) {
        this.lbp = lbp;
        this.opclass = opclass;
      }
      led(state, left2) {
        if (left2.type != 2 /* Op */)
          throw new ParseError("expected comparison on left hand side of operator");
        const right2 = expression(state, this.lbp);
        if (right2.type != 2 /* Op */)
          throw new ParseError("expected comparison on right hand side of operator");
        return { type: 2 /* Op */, op: new this.opclass(left2.op, right2.op) };
      }
      nud(state) {
        throw new ParseError("expected expression");
      }
    }
    const OperatorEq = Object.freeze(new CmpOp(30, operators.eq));
    const OperatorNeq = Object.freeze(new CmpOp(30, operators.neq));
    const OperatorLt = Object.freeze(new CmpOp(30, operators.lt));
    const OperatorLte = Object.freeze(new CmpOp(30, operators.lte));
    const OperatorGt = Object.freeze(new CmpOp(30, operators.gt));
    const OperatorGte = Object.freeze(new CmpOp(30, operators.gte));
    const OperatorAnd = Object.freeze(new LogicalOp(20, operators.and));
    const OperatorOr = Object.freeze(new LogicalOp(10, operators.or));
    function* tokenize(s4) {
      var i5 = 0;
      while (i5 < s4.length) {
        var c4 = s4.charCodeAt(i5);
        if ("0".charCodeAt(0) <= c4 && c4 <= "9".charCodeAt(0)) {
          var n4 = 0;
          while ("0".charCodeAt(0) <= c4 && c4 <= "9".charCodeAt(0)) {
            n4 *= 10;
            n4 += c4 - "0".charCodeAt(0);
            c4 = s4.charCodeAt(++i5);
          }
          yield new IntValue(n4);
        } else if (isId(c4)) {
          var idstart = i5;
          while (isId(c4)) {
            c4 = s4.charCodeAt(++i5);
          }
          yield new Identifier(s4.slice(idstart, i5));
        } else
          switch (s4[i5]) {
            case "=":
              if (s4[++i5] != "=")
                throw new ParseError("expected =");
              ++i5;
              yield OperatorEq;
              break;
            case "!":
              if (s4[++i5] != "=")
                throw new ParseError("expected =");
              ++i5;
              yield OperatorNeq;
              break;
            case "<":
              if (s4[++i5] == "=") {
                ++i5;
                yield OperatorLte;
              } else {
                yield OperatorLt;
              }
              break;
            case ">":
              if (s4[++i5] == "=") {
                ++i5;
                yield OperatorGte;
              } else {
                yield OperatorGt;
              }
              break;
            case "@":
              yield OperatorOr;
              ++i5;
              break;
            case "&":
              yield OperatorAnd;
              ++i5;
              break;
            default:
              throw new ParseError("invalid character");
          }
      }
      return Eof;
    }
    function parseAny(tokens) {
      const state = { current: Eof, next: tokens.next().value, tokens };
      return expression(state, 0);
    }
    function parse(tokens) {
      const node = parseAny(tokens);
      if (node.type != 2 /* Op */) {
        throw new ParseError("expected comparison or operator");
      }
      return node.op;
    }
    function expression(state, rbp) {
      state.current = state.next;
      state.next = state.tokens.next().value;
      var left2 = state.current.nud(state);
      while (rbp < state.next.lbp) {
        state.current = state.next;
        state.next = state.tokens.next().value;
        left2 = state.current.led(state, left2);
      }
      return left2;
    }
    return { tokenize, parse, parseAny };
  }

  // ../../skilltool/tools/ConditionMatcher.ts
  var assert4 = require_assert().strict;
  function isCmpOperator(tree) {
    return "condition" in tree;
  }
  function assertIsCmpOperator(tree) {
    assert4(isCmpOperator(tree));
  }
  function assertIsLogicalOp(tree) {
    assert4("left" in tree && "right" in tree);
  }
  function flatten3(node, conds) {
    assertIsCmpOperator(node.right);
    conds.push(node.right);
    if (node.left instanceof AndOperator) {
      return flatten3(node.left, conds);
    }
    assertIsCmpOperator(node.left);
    conds.push(node.left);
    return conds;
  }
  function condMatcher(cond, node) {
    if (isCmpOperator(node)) {
      if ("argument" in cond) {
        return node.condition === cond.condition && node.argument == cond.argument && Object.getPrototypeOf(cond) === Object.getPrototypeOf(node);
      } else {
        return node.condition === cond;
      }
    }
    assertIsLogicalOp(node);
    return condMatcher(cond, node.left) || condMatcher(cond, node.right);
  }
  function andMatcher(conds, node) {
    if (node instanceof OrOperator) {
      const conds2 = conds.slice();
      return andMatcher(conds, node.left) || andMatcher(conds2, node.right);
    } else if (node instanceof AndOperator) {
      assertIsCmpOperator(node.right);
      const idx = conds.findIndex((c4) => condMatcher(c4, node.right));
      if (idx != -1) {
        conds.splice(idx, 1);
      }
      return conds.length == 0 || andMatcher(conds, node.left);
    } else {
      assertIsCmpOperator(node);
      return conds.length == 1 && condMatcher(conds[0], node);
    }
  }
  function treeMatch(match, tree) {
    switch (match.type) {
      case 2 /* Op */:
        if (match.op instanceof AndOperator) {
          return andMatcher(flatten3(match.op, []), tree);
        } else if (isCmpOperator(match.op)) {
          return condMatcher(match.op, tree);
        } else {
          throw new Error("doesn't support @ in search conditions");
        }
      case 1 /* Cond */:
        return condMatcher(match.cond, tree);
        break;
      case 0 /* Int */:
        throw new Error("doesn't support sole integer as search condition");
    }
  }
  var mockSamplePolicy = Object.freeze({
    sample(_0, _1) {
      assert4(false);
    },
    reconcile(_3) {
      return this;
    },
    reconcileAsap(_3) {
      return this;
    },
    reconcileLogNormalRandom(_3) {
      return this;
    },
    reconcileRandom(_3) {
      return this;
    },
    reconcileStraightRandom(_3) {
      return this;
    },
    reconcileAllCornerRandom(_3) {
      return this;
    }
  });
  var mockConditions = new Proxy({}, {
    get(cache, prop) {
      if (cache.hasOwnProperty(prop)) {
        return cache[prop];
      }
      return cache[prop] = { name: prop, samplePolicy: mockSamplePolicy };
    }
  });

  // ../../skilltool/RaceSolver.ts
  var assert5 = require_assert().strict;
  if (false)
    global.CC_GLOBAL = false;
  var Speed;
  ((Speed2) => {
    Speed2.StrategyPhaseCoefficient = Object.freeze([
      [],
      // strategies start numbered at 1
      [1, 0.98, 0.962],
      [0.978, 0.991, 0.975],
      [0.938, 0.998, 0.994],
      [0.931, 1, 1],
      [1.063, 0.962, 0.95]
    ].map((a5) => Object.freeze(a5)));
    Speed2.DistanceProficiencyModifier = Object.freeze([1.05, 1, 0.9, 0.8, 0.6, 0.4, 0.2, 0.1]);
  })(Speed || (Speed = {}));
  var Acceleration;
  ((Acceleration2) => {
    Acceleration2.StrategyPhaseCoefficient = Object.freeze([
      [],
      [1, 1, 0.996],
      [0.985, 1, 0.996],
      [0.975, 1, 1],
      [0.945, 1, 0.997],
      [1.17, 0.94, 0.956]
    ].map((a5) => Object.freeze(a5)));
    Acceleration2.GroundTypeProficiencyModifier = Object.freeze([1.05, 1, 0.9, 0.8, 0.7, 0.5, 0.3, 0.1]);
    Acceleration2.DistanceProficiencyModifier = Object.freeze([1, 1, 1, 1, 1, 0.6, 0.5, 0.4]);
  })(Acceleration || (Acceleration = {}));
  var PositionKeep;
  ((PositionKeep2) => {
    PositionKeep2.BaseMinimumThreshold = Object.freeze([0, 0, 3, 6.5, 7.5]);
    PositionKeep2.BaseMaximumThreshold = Object.freeze([0, 0, 5, 7, 8]);
    function courseFactor(distance) {
      return 8e-4 * (distance - 1e3) + 1;
    }
    PositionKeep2.courseFactor = courseFactor;
    function minThreshold(strategy, distance) {
      return PositionKeep2.BaseMinimumThreshold[strategy] * (strategy == 2 /* Senkou */ ? 1 : courseFactor(distance));
    }
    PositionKeep2.minThreshold = minThreshold;
    function maxThreshold(strategy, distance) {
      return PositionKeep2.BaseMaximumThreshold[strategy] * courseFactor(distance);
    }
    PositionKeep2.maxThreshold = maxThreshold;
  })(PositionKeep || (PositionKeep = {}));
  var SkillType = /* @__PURE__ */ ((SkillType2) => {
    SkillType2[SkillType2["SpeedUp"] = 1] = "SpeedUp";
    SkillType2[SkillType2["StaminaUp"] = 2] = "StaminaUp";
    SkillType2[SkillType2["PowerUp"] = 3] = "PowerUp";
    SkillType2[SkillType2["GutsUp"] = 4] = "GutsUp";
    SkillType2[SkillType2["WisdomUp"] = 5] = "WisdomUp";
    SkillType2[SkillType2["Recovery"] = 9] = "Recovery";
    SkillType2[SkillType2["MultiplyStartDelay"] = 10] = "MultiplyStartDelay";
    SkillType2[SkillType2["SetStartDelay"] = 14] = "SetStartDelay";
    SkillType2[SkillType2["CurrentSpeed"] = 21] = "CurrentSpeed";
    SkillType2[SkillType2["CurrentSpeedWithNaturalDeceleration"] = 22] = "CurrentSpeedWithNaturalDeceleration";
    SkillType2[SkillType2["TargetSpeed"] = 27] = "TargetSpeed";
    SkillType2[SkillType2["Accel"] = 31] = "Accel";
    SkillType2[SkillType2["ActivateRandomGold"] = 37] = "ActivateRandomGold";
    SkillType2[SkillType2["ExtendEvolvedDuration"] = 42] = "ExtendEvolvedDuration";
    return SkillType2;
  })(SkillType || {});

  // ../components/Tooltip.tsx
  function Tooltip(props) {
    return /* @__PURE__ */ _("div", { class: `hasTooltip${props.tall ? " contentIsTall" : ""}` }, props.children, /* @__PURE__ */ _("div", { class: "tooltip" }, props.title, /* @__PURE__ */ _("span", { class: "arrow" })));
  }

  // skill_data.json
  var skill_data_default = { "100011": { alternatives: [{ baseDuration: 5e4, condition: "phase>=2&order>=2&order_rate<=50&change_order_onetime<0", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 5 }, "100021": { alternatives: [{ baseDuration: 5e4, condition: "is_finalcorner==1&corner==0&order==1&bashin_diff_behind>=1", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 5 }, "100031": { alternatives: [{ baseDuration: 5e4, condition: "is_finalcorner==1&corner==0&order<=3&bashin_diff_infront<=1&is_overtake==1", effects: [{ modifier: 4500, type: 27 }], precondition: "" }], rarity: 5 }, "100041": { alternatives: [{ baseDuration: 4e4, condition: "is_finalcorner==1&order<=5&order_rate<=50", effects: [{ modifier: 4e3, type: 31 }], precondition: "" }], rarity: 5 }, "100061": { alternatives: [{ baseDuration: 5e4, condition: "order>=2&order<=5&order_rate<=50&remain_distance<=201&remain_distance>=199", effects: [{ modifier: 4500, type: 27 }], precondition: "" }], rarity: 5 }, "100071": { alternatives: [{ baseDuration: 6e4, condition: "distance_rate>=50&distance_rate<=60&order_rate>50", effects: [{ modifier: 2500, type: 27 }], precondition: "" }], rarity: 4 }, "100081": { alternatives: [{ baseDuration: 5e4, condition: "order>=3&order_rate<=50&remain_distance<=200&bashin_diff_infront<=1@order>=3&order_rate<=50&remain_distance<=200&bashin_diff_behind<=1", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 4 }, "100091": { alternatives: [{ baseDuration: 5e4, condition: "distance_rate>=50&order==1&bashin_diff_behind<=1", effects: [{ modifier: 2500, type: 27 }, { modifier: 3e3, type: 31 }], precondition: "" }], rarity: 4 }, "100101": { alternatives: [{ baseDuration: 4e4, condition: "is_finalcorner==1&corner!=0&order>=3&order_rate<=50", effects: [{ modifier: 4e3, type: 31 }], precondition: "" }], rarity: 5 }, "100111": { alternatives: [{ baseDuration: 5e4, condition: "is_finalcorner==1&corner==0&change_order_onetime<0&order>=4", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 4 }, "100131": { alternatives: [{ baseDuration: 5e4, condition: "is_finalcorner==1&corner!=0&distance_diff_rate<=30", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 5 }, "100141": { alternatives: [{ baseDuration: 5e4, condition: "is_finalcorner==1&corner==0&hp_per>=30&order<=2", effects: [{ modifier: 2500, type: 27 }, { modifier: 3e3, type: 31 }], precondition: "" }], rarity: 4 }, "100151": { alternatives: [{ baseDuration: 5e4, condition: "is_finalcorner==1&corner!=0&bashin_diff_infront<=1&bashin_diff_behind<=1&blocked_side_continuetime>=2&order<=4", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 5 }, "100171": { alternatives: [{ baseDuration: 5e4, condition: "is_finalcorner==1&change_order_up_end_after>=3&corner==0", effects: [{ modifier: 4500, type: 27 }], precondition: "" }], rarity: 5 }, "100181": { alternatives: [{ baseDuration: 5e4, condition: "is_finalcorner==1&corner!=0&order>=4&change_order_onetime<0", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 4 }, "100231": { alternatives: [{ baseDuration: 5e4, condition: "is_finalcorner==1&corner!=0&change_order_onetime<0&order<=4", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 5 }, "100241": { alternatives: [{ baseDuration: 5e4, condition: "is_finalcorner==1&corner!=0&blocked_side_continuetime>=2&order<=3", effects: [{ modifier: 2500, type: 27 }, { modifier: 3e3, type: 31 }], precondition: "" }], rarity: 4 }, "100261": { alternatives: [{ baseDuration: 5e4, condition: "is_badstart==0&temptation_count==0&order<=3&is_finalcorner==1&corner==0", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 5 }, "100271": { alternatives: [{ baseDuration: 4e4, condition: "phase>=2&corner!=0&order_rate>=65&order_rate<=70", effects: [{ modifier: 4e3, type: 31 }], precondition: "" }], rarity: 4 }, "100301": { alternatives: [{ baseDuration: 5e4, condition: "is_finalcorner==1&corner==0&order<=4&change_order_onetime<0", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 5 }, "100321": { alternatives: [{ baseDuration: 0, condition: "distance_rate>=50&corner!=0&order>=3&order_rate<=40", effects: [{ modifier: 550, type: 9 }], precondition: "" }], rarity: 4 }, "100351": { alternatives: [{ baseDuration: 5e4, condition: "is_finalcorner==1&corner==0&order<=5&blocked_side_continuetime>=2", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 4 }, "100411": { alternatives: [{ baseDuration: 5e4, condition: "distance_rate>=50&order<=3&blocked_side_continuetime>=2", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 4 }, "100451": { alternatives: [{ baseDuration: 0, condition: "phase_random==1&order>=2&order_rate<=40", effects: [{ modifier: 550, type: 9 }], precondition: "" }], rarity: 4 }, "100521": { alternatives: [{ baseDuration: 0, condition: "is_finalcorner==1&corner!=0&order_rate>50&near_count>=1", effects: [{ modifier: 550, type: 9 }], precondition: "" }], rarity: 4 }, "100561": { alternatives: [{ baseDuration: 5e4, condition: "phase>=2&order>=3&blocked_front==1", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 4 }, "100601": { alternatives: [{ baseDuration: 5e4, condition: "phase>=2&order==3&bashin_diff_behind<=1", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 4 }, "100611": { alternatives: [{ baseDuration: 5e4, condition: "temptation_count==0&remain_distance<=201&remain_distance>=199&order>=5&order_rate<=60", effects: [{ modifier: 4500, type: 27 }], precondition: "" }], rarity: 4 }, "10071": { alternatives: [{ baseDuration: 6e4, condition: "distance_rate>=50&distance_rate<=60&order_rate>50", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 3 }, "10081": { alternatives: [{ baseDuration: 5e4, condition: "order>=3&order_rate<=50&remain_distance<=200&bashin_diff_infront<=1@order>=3&order_rate<=50&remain_distance<=200&bashin_diff_behind<=1", effects: [{ modifier: 2500, type: 27 }], precondition: "" }], rarity: 3 }, "10091": { alternatives: [{ baseDuration: 5e4, condition: "distance_rate>=50&order==1&bashin_diff_behind<=1", effects: [{ modifier: 1500, type: 27 }, { modifier: 2e3, type: 31 }], precondition: "" }], rarity: 3 }, "10111": { alternatives: [{ baseDuration: 5e4, condition: "is_finalcorner==1&corner==0&change_order_onetime<0&order>=4", effects: [{ modifier: 2500, type: 27 }], precondition: "" }], rarity: 3 }, "10141": { alternatives: [{ baseDuration: 5e4, condition: "is_finalcorner==1&corner==0&hp_per>=30&order<=2", effects: [{ modifier: 1500, type: 27 }, { modifier: 2e3, type: 31 }], precondition: "" }], rarity: 3 }, "10181": { alternatives: [{ baseDuration: 5e4, condition: "is_finalcorner==1&corner!=0&order>=4&change_order_onetime<0", effects: [{ modifier: 2500, type: 27 }], precondition: "" }], rarity: 3 }, "10241": { alternatives: [{ baseDuration: 5e4, condition: "is_finalcorner==1&corner!=0&blocked_side_continuetime>=2&order<=3", effects: [{ modifier: 1500, type: 27 }, { modifier: 2e3, type: 31 }], precondition: "" }], rarity: 3 }, "10271": { alternatives: [{ baseDuration: 4e4, condition: "phase>=2&corner!=0&order_rate>=65&order_rate<=70", effects: [{ modifier: 3e3, type: 31 }], precondition: "" }], rarity: 3 }, "10321": { alternatives: [{ baseDuration: 0, condition: "distance_rate>=50&corner!=0&order>=3&order_rate<=40", effects: [{ modifier: 350, type: 9 }], precondition: "" }], rarity: 3 }, "10351": { alternatives: [{ baseDuration: 5e4, condition: "is_finalcorner==1&corner==0&order<=5&blocked_side_continuetime>=2", effects: [{ modifier: 2500, type: 27 }], precondition: "" }], rarity: 3 }, "10411": { alternatives: [{ baseDuration: 5e4, condition: "distance_rate>=50&order<=3&blocked_side_continuetime>=2", effects: [{ modifier: 2500, type: 27 }], precondition: "" }], rarity: 3 }, "10451": { alternatives: [{ baseDuration: 0, condition: "phase_random==1&order>=2&order_rate<=40", effects: [{ modifier: 350, type: 9 }], precondition: "" }], rarity: 3 }, "10521": { alternatives: [{ baseDuration: 0, condition: "is_finalcorner==1&corner!=0&order_rate>50&near_count>=1", effects: [{ modifier: 350, type: 9 }], precondition: "" }], rarity: 3 }, "10561": { alternatives: [{ baseDuration: 5e4, condition: "phase>=2&order>=3&blocked_front==1", effects: [{ modifier: 2500, type: 27 }], precondition: "" }], rarity: 3 }, "10601": { alternatives: [{ baseDuration: 5e4, condition: "phase>=2&order==3&bashin_diff_behind<=1", effects: [{ modifier: 2500, type: 27 }], precondition: "" }], rarity: 3 }, "10611": { alternatives: [{ baseDuration: 5e4, condition: "temptation_count==0&remain_distance<=201&remain_distance>=199&order>=5&order_rate<=60", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 3 }, "200011": { alternatives: [{ baseDuration: -1, condition: "rotation==1", effects: [{ modifier: 6e5, type: 1 }], precondition: "" }], rarity: 1 }, "200012": { alternatives: [{ baseDuration: -1, condition: "rotation==1", effects: [{ modifier: 4e5, type: 1 }], precondition: "" }], rarity: 1 }, "200013": { alternatives: [{ baseDuration: -1, condition: "rotation==1", effects: [{ modifier: -4e5, type: 1 }], precondition: "" }], rarity: 1 }, "200021": { alternatives: [{ baseDuration: -1, condition: "rotation==2", effects: [{ modifier: 6e5, type: 1 }], precondition: "" }], rarity: 1 }, "200022": { alternatives: [{ baseDuration: -1, condition: "rotation==2", effects: [{ modifier: 4e5, type: 1 }], precondition: "" }], rarity: 1 }, "200023": { alternatives: [{ baseDuration: -1, condition: "rotation==2", effects: [{ modifier: -4e5, type: 1 }], precondition: "" }], rarity: 1 }, "200031": { alternatives: [{ baseDuration: -1, condition: "track_id==10006", effects: [{ modifier: 6e5, type: 2 }], precondition: "" }], rarity: 1 }, "200032": { alternatives: [{ baseDuration: -1, condition: "track_id==10006", effects: [{ modifier: 4e5, type: 2 }], precondition: "" }], rarity: 1 }, "200033": { alternatives: [{ baseDuration: -1, condition: "track_id==10006", effects: [{ modifier: -4e5, type: 2 }], precondition: "" }], rarity: 1 }, "200041": { alternatives: [{ baseDuration: -1, condition: "track_id==10005", effects: [{ modifier: 6e5, type: 2 }], precondition: "" }], rarity: 1 }, "200042": { alternatives: [{ baseDuration: -1, condition: "track_id==10005", effects: [{ modifier: 4e5, type: 2 }], precondition: "" }], rarity: 1 }, "200043": { alternatives: [{ baseDuration: -1, condition: "track_id==10005", effects: [{ modifier: -4e5, type: 2 }], precondition: "" }], rarity: 1 }, "200051": { alternatives: [{ baseDuration: -1, condition: "track_id==10009", effects: [{ modifier: 6e5, type: 2 }], precondition: "" }], rarity: 1 }, "200052": { alternatives: [{ baseDuration: -1, condition: "track_id==10009", effects: [{ modifier: 4e5, type: 2 }], precondition: "" }], rarity: 1 }, "200053": { alternatives: [{ baseDuration: -1, condition: "track_id==10009", effects: [{ modifier: -4e5, type: 2 }], precondition: "" }], rarity: 1 }, "200061": { alternatives: [{ baseDuration: -1, condition: "track_id==10008", effects: [{ modifier: 6e5, type: 2 }], precondition: "" }], rarity: 1 }, "200062": { alternatives: [{ baseDuration: -1, condition: "track_id==10008", effects: [{ modifier: 4e5, type: 2 }], precondition: "" }], rarity: 1 }, "200063": { alternatives: [{ baseDuration: -1, condition: "track_id==10008", effects: [{ modifier: -4e5, type: 2 }], precondition: "" }], rarity: 1 }, "200071": { alternatives: [{ baseDuration: -1, condition: "track_id==10007", effects: [{ modifier: 6e5, type: 2 }], precondition: "" }], rarity: 1 }, "200072": { alternatives: [{ baseDuration: -1, condition: "track_id==10007", effects: [{ modifier: 4e5, type: 2 }], precondition: "" }], rarity: 1 }, "200073": { alternatives: [{ baseDuration: -1, condition: "track_id==10007", effects: [{ modifier: -4e5, type: 2 }], precondition: "" }], rarity: 1 }, "200081": { alternatives: [{ baseDuration: -1, condition: "track_id==10001", effects: [{ modifier: 6e5, type: 2 }], precondition: "" }], rarity: 1 }, "200082": { alternatives: [{ baseDuration: -1, condition: "track_id==10001", effects: [{ modifier: 4e5, type: 2 }], precondition: "" }], rarity: 1 }, "200083": { alternatives: [{ baseDuration: -1, condition: "track_id==10001", effects: [{ modifier: -4e5, type: 2 }], precondition: "" }], rarity: 1 }, "200091": { alternatives: [{ baseDuration: -1, condition: "track_id==10002", effects: [{ modifier: 6e5, type: 2 }], precondition: "" }], rarity: 1 }, "200092": { alternatives: [{ baseDuration: -1, condition: "track_id==10002", effects: [{ modifier: 4e5, type: 2 }], precondition: "" }], rarity: 1 }, "200093": { alternatives: [{ baseDuration: -1, condition: "track_id==10002", effects: [{ modifier: -4e5, type: 2 }], precondition: "" }], rarity: 1 }, "200101": { alternatives: [{ baseDuration: -1, condition: "track_id==10004", effects: [{ modifier: 6e5, type: 2 }], precondition: "" }], rarity: 1 }, "200102": { alternatives: [{ baseDuration: -1, condition: "track_id==10004", effects: [{ modifier: 4e5, type: 2 }], precondition: "" }], rarity: 1 }, "200103": { alternatives: [{ baseDuration: -1, condition: "track_id==10004", effects: [{ modifier: -4e5, type: 2 }], precondition: "" }], rarity: 1 }, "200111": { alternatives: [{ baseDuration: -1, condition: "track_id==10003", effects: [{ modifier: 6e5, type: 2 }], precondition: "" }], rarity: 1 }, "200112": { alternatives: [{ baseDuration: -1, condition: "track_id==10003", effects: [{ modifier: 4e5, type: 2 }], precondition: "" }], rarity: 1 }, "200113": { alternatives: [{ baseDuration: -1, condition: "track_id==10003", effects: [{ modifier: -4e5, type: 2 }], precondition: "" }], rarity: 1 }, "200121": { alternatives: [{ baseDuration: -1, condition: "track_id==10010", effects: [{ modifier: 6e5, type: 2 }], precondition: "" }], rarity: 1 }, "200122": { alternatives: [{ baseDuration: -1, condition: "track_id==10010", effects: [{ modifier: 4e5, type: 2 }], precondition: "" }], rarity: 1 }, "200123": { alternatives: [{ baseDuration: -1, condition: "track_id==10010", effects: [{ modifier: -4e5, type: 2 }], precondition: "" }], rarity: 1 }, "200131": { alternatives: [{ baseDuration: -1, condition: "is_basis_distance==1", effects: [{ modifier: 6e5, type: 2 }], precondition: "" }], rarity: 1 }, "200132": { alternatives: [{ baseDuration: -1, condition: "is_basis_distance==1", effects: [{ modifier: 4e5, type: 2 }], precondition: "" }], rarity: 1 }, "200133": { alternatives: [{ baseDuration: -1, condition: "is_basis_distance==1", effects: [{ modifier: -4e5, type: 2 }], precondition: "" }], rarity: 1 }, "200141": { alternatives: [{ baseDuration: -1, condition: "is_basis_distance==0", effects: [{ modifier: 6e5, type: 2 }], precondition: "" }], rarity: 1 }, "200142": { alternatives: [{ baseDuration: -1, condition: "is_basis_distance==0", effects: [{ modifier: 4e5, type: 2 }], precondition: "" }], rarity: 1 }, "200143": { alternatives: [{ baseDuration: -1, condition: "is_basis_distance==0", effects: [{ modifier: -4e5, type: 2 }], precondition: "" }], rarity: 1 }, "200151": { alternatives: [{ baseDuration: -1, condition: "ground_condition==1", effects: [{ modifier: 6e5, type: 3 }], precondition: "" }], rarity: 1 }, "200152": { alternatives: [{ baseDuration: -1, condition: "ground_condition==1", effects: [{ modifier: 4e5, type: 3 }], precondition: "" }], rarity: 1 }, "200153": { alternatives: [{ baseDuration: -1, condition: "ground_condition==1", effects: [{ modifier: -4e5, type: 3 }], precondition: "" }], rarity: 1 }, "200161": { alternatives: [{ baseDuration: -1, condition: "ground_condition==2@ground_condition==3@ground_condition==4", effects: [{ modifier: 6e5, type: 3 }], precondition: "" }], rarity: 1 }, "200162": { alternatives: [{ baseDuration: -1, condition: "ground_condition==2@ground_condition==3@ground_condition==4", effects: [{ modifier: 4e5, type: 3 }], precondition: "" }], rarity: 1 }, "200163": { alternatives: [{ baseDuration: -1, condition: "ground_condition==2@ground_condition==3@ground_condition==4", effects: [{ modifier: -4e5, type: 3 }], precondition: "" }], rarity: 1 }, "200171": { alternatives: [{ baseDuration: -1, condition: "season==1@season==5", effects: [{ modifier: 6e5, type: 1 }], precondition: "" }], rarity: 1 }, "200172": { alternatives: [{ baseDuration: -1, condition: "season==1@season==5", effects: [{ modifier: 4e5, type: 1 }], precondition: "" }], rarity: 1 }, "200173": { alternatives: [{ baseDuration: -1, condition: "season==1@season==5", effects: [{ modifier: -4e5, type: 1 }], precondition: "" }], rarity: 1 }, "200181": { alternatives: [{ baseDuration: -1, condition: "season==2", effects: [{ modifier: 6e5, type: 1 }], precondition: "" }], rarity: 1 }, "200182": { alternatives: [{ baseDuration: -1, condition: "season==2", effects: [{ modifier: 4e5, type: 1 }], precondition: "" }], rarity: 1 }, "200183": { alternatives: [{ baseDuration: -1, condition: "season==2", effects: [{ modifier: -4e5, type: 1 }], precondition: "" }], rarity: 1 }, "200191": { alternatives: [{ baseDuration: -1, condition: "season==3", effects: [{ modifier: 6e5, type: 1 }], precondition: "" }], rarity: 1 }, "200192": { alternatives: [{ baseDuration: -1, condition: "season==3", effects: [{ modifier: 4e5, type: 1 }], precondition: "" }], rarity: 1 }, "200193": { alternatives: [{ baseDuration: -1, condition: "season==3", effects: [{ modifier: -4e5, type: 1 }], precondition: "" }], rarity: 1 }, "200201": { alternatives: [{ baseDuration: -1, condition: "season==4", effects: [{ modifier: 6e5, type: 1 }], precondition: "" }], rarity: 1 }, "200202": { alternatives: [{ baseDuration: -1, condition: "season==4", effects: [{ modifier: 4e5, type: 1 }], precondition: "" }], rarity: 1 }, "200203": { alternatives: [{ baseDuration: -1, condition: "season==4", effects: [{ modifier: -4e5, type: 1 }], precondition: "" }], rarity: 1 }, "200211": { alternatives: [{ baseDuration: -1, condition: "weather==1", effects: [{ modifier: 6e5, type: 4 }], precondition: "" }], rarity: 1 }, "200212": { alternatives: [{ baseDuration: -1, condition: "weather==1", effects: [{ modifier: 4e5, type: 4 }], precondition: "" }], rarity: 1 }, "200221": { alternatives: [{ baseDuration: -1, condition: "weather==2", effects: [{ modifier: 6e5, type: 4 }], precondition: "" }], rarity: 1 }, "200222": { alternatives: [{ baseDuration: -1, condition: "weather==2", effects: [{ modifier: 4e5, type: 4 }], precondition: "" }], rarity: 1 }, "200231": { alternatives: [{ baseDuration: -1, condition: "weather==3", effects: [{ modifier: 6e5, type: 4 }], precondition: "" }], rarity: 1 }, "200232": { alternatives: [{ baseDuration: -1, condition: "weather==3", effects: [{ modifier: 4e5, type: 4 }], precondition: "" }], rarity: 1 }, "200233": { alternatives: [{ baseDuration: -1, condition: "weather==3", effects: [{ modifier: -4e5, type: 4 }], precondition: "" }], rarity: 1 }, "200241": { alternatives: [{ baseDuration: -1, condition: "weather==4", effects: [{ modifier: 6e5, type: 4 }], precondition: "" }], rarity: 1 }, "200242": { alternatives: [{ baseDuration: -1, condition: "weather==4", effects: [{ modifier: 4e5, type: 4 }], precondition: "" }], rarity: 1 }, "200251": { alternatives: [{ baseDuration: -1, condition: "post_number<=3", effects: [{ modifier: 6e5, type: 5 }], precondition: "" }], rarity: 1 }, "200252": { alternatives: [{ baseDuration: -1, condition: "post_number<=3", effects: [{ modifier: 4e5, type: 5 }], precondition: "" }], rarity: 1 }, "200253": { alternatives: [{ baseDuration: -1, condition: "post_number<=3", effects: [{ modifier: -4e5, type: 5 }], precondition: "" }], rarity: 1 }, "200261": { alternatives: [{ baseDuration: -1, condition: "post_number>=6", effects: [{ modifier: 6e5, type: 1 }], precondition: "" }], rarity: 1 }, "200262": { alternatives: [{ baseDuration: -1, condition: "post_number>=6", effects: [{ modifier: 4e5, type: 1 }], precondition: "" }], rarity: 1 }, "200263": { alternatives: [{ baseDuration: -1, condition: "post_number>=6", effects: [{ modifier: -4e5, type: 1 }], precondition: "" }], rarity: 1 }, "200271": { alternatives: [{ baseDuration: -1, condition: "running_style_count_same<=1", effects: [{ modifier: 6e5, type: 1 }], precondition: "" }], rarity: 1 }, "200272": { alternatives: [{ baseDuration: -1, condition: "running_style_count_same<=1", effects: [{ modifier: 4e5, type: 1 }], precondition: "" }], rarity: 1 }, "200281": { alternatives: [{ baseDuration: -1, condition: "running_style_count_same>=6", effects: [{ modifier: 6e5, type: 3 }], precondition: "" }], rarity: 1 }, "200282": { alternatives: [{ baseDuration: -1, condition: "running_style_count_same>=6", effects: [{ modifier: 4e5, type: 3 }], precondition: "" }], rarity: 1 }, "200283": { alternatives: [{ baseDuration: -1, condition: "running_style_count_same>=6", effects: [{ modifier: -4e5, type: 3 }], precondition: "" }], rarity: 1 }, "200291": { alternatives: [{ baseDuration: -1, condition: "running_style_equal_popularity_one==1", effects: [{ modifier: 6e5, type: 4 }], precondition: "" }], rarity: 1 }, "200292": { alternatives: [{ baseDuration: -1, condition: "running_style_equal_popularity_one==1", effects: [{ modifier: 4e5, type: 4 }], precondition: "" }], rarity: 1 }, "200301": { alternatives: [{ baseDuration: -1, condition: "popularity>=4", effects: [{ modifier: 6e5, type: 1 }], precondition: "" }], rarity: 1 }, "200302": { alternatives: [{ baseDuration: -1, condition: "popularity>=4", effects: [{ modifier: 4e5, type: 1 }], precondition: "" }], rarity: 1 }, "200311": { alternatives: [{ baseDuration: -1, condition: "grade==100", effects: [{ modifier: -4e5, type: 1 }], precondition: "" }], rarity: 1 }, "200321": { alternatives: [{ baseDuration: -1, condition: "popularity==1", effects: [{ modifier: -4e5, type: 2 }], precondition: "" }], rarity: 1 }, "200331": { alternatives: [{ baseDuration: 18e3, condition: "corner_random==1@corner_random==2@corner_random==3@corner_random==4", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 2 }, "200332": { alternatives: [{ baseDuration: 18e3, condition: "corner_random==1@corner_random==2@corner_random==3@corner_random==4", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "200333": { alternatives: [{ baseDuration: 18e3, condition: "corner_random==1@corner_random==2@corner_random==3@corner_random==4", effects: [{ modifier: -2e3, type: 21 }], precondition: "" }], rarity: 1 }, "200341": { alternatives: [{ baseDuration: 18e3, condition: "corner_random==1@corner_random==2@corner_random==3@corner_random==4", effects: [{ modifier: 4e3, type: 31 }], precondition: "" }], rarity: 2 }, "200342": { alternatives: [{ baseDuration: 18e3, condition: "corner_random==1@corner_random==2@corner_random==3@corner_random==4", effects: [{ modifier: 2e3, type: 31 }], precondition: "" }], rarity: 1 }, "200343": { alternatives: [{ baseDuration: 18e3, condition: "corner_random==1@corner_random==2@corner_random==3@corner_random==4", effects: [{ modifier: -2e3, type: 31 }], precondition: "" }], rarity: 1 }, "200351": { alternatives: [{ baseDuration: 0, condition: "corner_random==1@corner_random==2@corner_random==3@corner_random==4", effects: [{ modifier: 550, type: 9 }], precondition: "" }], rarity: 2 }, "200352": { alternatives: [{ baseDuration: 0, condition: "corner_random==1@corner_random==2@corner_random==3@corner_random==4", effects: [{ modifier: 150, type: 9 }], precondition: "" }], rarity: 1 }, "200353": { alternatives: [{ baseDuration: 0, condition: "corner_random==1@corner_random==2@corner_random==3@corner_random==4", effects: [{ modifier: -200, type: 9 }], precondition: "" }], rarity: 1 }, "200361": { alternatives: [{ baseDuration: 9e3, condition: "straight_random==1", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 2 }, "200362": { alternatives: [{ baseDuration: 9e3, condition: "straight_random==1", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "200371": { alternatives: [{ baseDuration: 18e3, condition: "straight_random==1", effects: [{ modifier: 4e3, type: 31 }], precondition: "" }], rarity: 2 }, "200372": { alternatives: [{ baseDuration: 18e3, condition: "straight_random==1", effects: [{ modifier: 2e3, type: 31 }], precondition: "" }], rarity: 1 }, "200381": { alternatives: [{ baseDuration: 0, condition: "straight_random==1", effects: [{ modifier: 550, type: 9 }], precondition: "" }], rarity: 2 }, "200382": { alternatives: [{ baseDuration: 0, condition: "straight_random==1", effects: [{ modifier: 150, type: 9 }], precondition: "" }], rarity: 1 }, "200391": { alternatives: [{ baseDuration: 0, condition: "slope==1", effects: [{ modifier: -200, type: 9 }], precondition: "" }], rarity: 1 }, "200401": { alternatives: [{ baseDuration: 0, condition: "accumulatetime>=2&blocked_all_continuetime>=1", effects: [{ modifier: -200, type: 9 }], precondition: "" }], rarity: 1 }, "200411": { alternatives: [{ baseDuration: 3e4, condition: "is_finalcorner==1&is_lastspurt==1&straight_random==1&corner==0&distance_diff_rate>=75", effects: [{ modifier: -2e3, type: 21 }], precondition: "" }], rarity: 1 }, "200421": { alternatives: [{ baseDuration: 3e4, condition: "remain_distance==200&order==1&bashin_diff_behind>=1", effects: [{ modifier: -2e3, type: 21 }], precondition: "" }], rarity: 1 }, "200431": { alternatives: [{ baseDuration: 0, condition: "always==1", effects: [{ modifier: 4e3, type: 10 }], precondition: "" }], rarity: 2 }, "200432": { alternatives: [{ baseDuration: 0, condition: "always==1", effects: [{ modifier: 9e3, type: 10 }], precondition: "" }], rarity: 1 }, "200433": { alternatives: [{ baseDuration: 0, condition: "always==1", effects: [{ modifier: 15e3, type: 10 }], precondition: "" }], rarity: 1 }, "200441": { alternatives: [{ baseDuration: 0, condition: "phase==0&accumulatetime>=5&blocked_front_continuetime>=1", effects: [{ modifier: 550, type: 9 }], precondition: "" }], rarity: 2 }, "200442": { alternatives: [{ baseDuration: 0, condition: "phase==0&accumulatetime>=5&blocked_front_continuetime>=1", effects: [{ modifier: 150, type: 9 }], precondition: "" }], rarity: 1 }, "200451": { alternatives: [{ baseDuration: 3e4, condition: "phase_random==0", effects: [{ modifier: 350, type: 28 }], precondition: "" }], rarity: 2 }, "200452": { alternatives: [{ baseDuration: 3e4, condition: "phase_random==0", effects: [{ modifier: 250, type: 28 }], precondition: "" }], rarity: 1 }, "200461": { alternatives: [{ baseDuration: 18e3, condition: "phase==1&change_order_onetime<0", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 2 }, "200462": { alternatives: [{ baseDuration: 18e3, condition: "phase==1&change_order_onetime<0", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "200471": { alternatives: [{ baseDuration: 0, condition: "phase==1&change_order_onetime>0", effects: [{ modifier: 550, type: 9 }], precondition: "" }], rarity: 2 }, "200472": { alternatives: [{ baseDuration: 0, condition: "phase==1&change_order_onetime>0", effects: [{ modifier: 150, type: 9 }], precondition: "" }], rarity: 1 }, "200481": { alternatives: [{ baseDuration: 0, condition: "phase==1&blocked_all_continuetime>=1", effects: [{ modifier: 550, type: 9 }], precondition: "" }], rarity: 2 }, "200482": { alternatives: [{ baseDuration: 0, condition: "phase==1&blocked_all_continuetime>=1", effects: [{ modifier: 150, type: 9 }], precondition: "" }], rarity: 1 }, "200491": { alternatives: [{ baseDuration: 3e4, condition: "blocked_front_continuetime>=1&is_lastspurt==1&hp_per>=1", effects: [{ modifier: 4e3, type: 31 }, { modifier: 250, type: 28 }], precondition: "" }], rarity: 2 }, "200492": { alternatives: [{ baseDuration: 3e4, condition: "blocked_front_continuetime>=1&is_lastspurt==1&hp_per>=1", effects: [{ modifier: 2e3, type: 31 }, { modifier: 50, type: 28 }], precondition: "" }], rarity: 1 }, "200501": { alternatives: [{ baseDuration: 3e4, condition: "phase_random==2", effects: [{ modifier: 350, type: 28 }], precondition: "" }], rarity: 2 }, "200502": { alternatives: [{ baseDuration: 3e4, condition: "phase_random==2", effects: [{ modifier: 250, type: 28 }], precondition: "" }], rarity: 1 }, "200511": { alternatives: [{ baseDuration: 18e3, condition: "is_lastspurt==1&phase_random==3", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 2 }, "200512": { alternatives: [{ baseDuration: 18e3, condition: "is_lastspurt==1&phase_random==3", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "200521": { alternatives: [{ baseDuration: 0, condition: "accumulatetime>=2&order==1&bashin_diff_behind>=1", effects: [{ modifier: -200, type: 9 }], precondition: "" }], rarity: 1 }, "200531": { alternatives: [{ baseDuration: 12e3, condition: "running_style==1&phase==0&accumulatetime>=5", effects: [{ modifier: 4e3, type: 31 }], precondition: "" }], rarity: 2 }, "200532": { alternatives: [{ baseDuration: 12e3, condition: "running_style==1&phase==0&accumulatetime>=5", effects: [{ modifier: 2e3, type: 31 }], precondition: "" }], rarity: 1 }, "200541": { alternatives: [{ baseDuration: 3e4, condition: "running_style==1&phase_random==1&order_rate<=50", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 2 }, "200542": { alternatives: [{ baseDuration: 3e4, condition: "running_style==1&phase_random==1&order_rate<=50", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "200551": { alternatives: [{ baseDuration: 3e4, condition: "running_style==1&is_finalcorner_random==1&order==1", effects: [{ modifier: 4e3, type: 31 }], precondition: "" }], rarity: 2 }, "200552": { alternatives: [{ baseDuration: 3e4, condition: "running_style==1&is_finalcorner_random==1&order==1", effects: [{ modifier: 2e3, type: 31 }], precondition: "" }], rarity: 1 }, "200561": { alternatives: [{ baseDuration: 0, condition: "running_style==2&phase_random==0&accumulatetime>=5&order_rate<=50", effects: [{ modifier: 550, type: 9 }], precondition: "" }], rarity: 2 }, "200562": { alternatives: [{ baseDuration: 0, condition: "running_style==2&phase_random==0&accumulatetime>=5&order_rate<=50", effects: [{ modifier: 150, type: 9 }], precondition: "" }], rarity: 1 }, "200571": { alternatives: [{ baseDuration: 0, condition: "running_style==2&phase_random==1&order_rate<=50", effects: [{ modifier: 550, type: 9 }], precondition: "" }], rarity: 2 }, "200572": { alternatives: [{ baseDuration: 0, condition: "running_style==2&phase_random==1&order_rate<=50", effects: [{ modifier: 150, type: 9 }], precondition: "" }], rarity: 1 }, "200581": { alternatives: [{ baseDuration: 12e3, condition: "running_style==2&is_finalcorner_random==1&order_rate<=50", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 2 }, "200582": { alternatives: [{ baseDuration: 12e3, condition: "running_style==2&is_finalcorner_random==1&order_rate<=50", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "200591": { alternatives: [{ baseDuration: 18e3, condition: "running_style==3&phase_random==1&order_rate>50", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 2 }, "200592": { alternatives: [{ baseDuration: 18e3, condition: "running_style==3&phase_random==1&order_rate>50", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "200601": { alternatives: [{ baseDuration: 18e3, condition: "running_style==3&phase_random==2&order_rate>50", effects: [{ modifier: 4e3, type: 31 }], precondition: "" }], rarity: 2 }, "200602": { alternatives: [{ baseDuration: 18e3, condition: "running_style==3&phase_random==2&order_rate>50", effects: [{ modifier: 2e3, type: 31 }], precondition: "" }], rarity: 1 }, "200611": { alternatives: [{ baseDuration: 3e4, condition: "running_style==3&is_finalcorner==1&corner!=0&is_behind_in==1&change_order_onetime<0", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 2 }, "200612": { alternatives: [{ baseDuration: 3e4, condition: "running_style==3&is_finalcorner==1&corner!=0&is_behind_in==1&change_order_onetime<0", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "200621": { alternatives: [{ baseDuration: 0, condition: "running_style==4&phase_random==1&distance_diff_rate>=75", effects: [{ modifier: 550, type: 9 }], precondition: "" }], rarity: 2 }, "200622": { alternatives: [{ baseDuration: 0, condition: "running_style==4&phase_random==1&distance_diff_rate>=75", effects: [{ modifier: 150, type: 9 }], precondition: "" }], rarity: 1 }, "200631": { alternatives: [{ baseDuration: 3e4, condition: "running_style==4&phase_random==2&distance_diff_rate>=75", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 2 }, "200632": { alternatives: [{ baseDuration: 3e4, condition: "running_style==4&phase_random==2&distance_diff_rate>=75", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "200641": { alternatives: [{ baseDuration: 9e3, condition: "running_style==4&is_lastspurt==1&corner==0", effects: [{ modifier: 4e3, type: 31 }], precondition: "" }], rarity: 2 }, "200642": { alternatives: [{ baseDuration: 9e3, condition: "running_style==4&is_lastspurt==1&corner==0", effects: [{ modifier: 2e3, type: 31 }], precondition: "" }], rarity: 1 }, "200651": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==1&straight_random==1", effects: [{ modifier: 4e3, type: 31 }], precondition: "" }], rarity: 2 }, "200652": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==1&straight_random==1", effects: [{ modifier: 2e3, type: 31 }], precondition: "" }], rarity: 1 }, "200662": { alternatives: [{ baseDuration: 0, condition: "distance_type==1&phase_random==1&order_rate>50", effects: [{ modifier: 150, type: 9 }], precondition: "" }], rarity: 1 }, "200671": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==1&phase_random==2&order_rate>50", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 2 }, "200672": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==1&phase_random==2&order_rate>50", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "200681": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==2&phase_random==0&accumulatetime>=5&order==1", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 2 }, "200682": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==2&phase_random==0&accumulatetime>=5&order==1", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "200691": { alternatives: [{ baseDuration: 0, condition: "distance_type==2&phase_random==0&accumulatetime>=5&order_rate>50", effects: [{ modifier: 550, type: 9 }], precondition: "" }], rarity: 2 }, "200692": { alternatives: [{ baseDuration: 0, condition: "distance_type==2&phase_random==0&accumulatetime>=5&order_rate>50", effects: [{ modifier: 150, type: 9 }], precondition: "" }], rarity: 1 }, "200701": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==2&phase_random==2&order_rate>50", effects: [{ modifier: 4e3, type: 31 }], precondition: "" }], rarity: 2 }, "200702": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==2&phase_random==2&order_rate>50", effects: [{ modifier: 2e3, type: 31 }], precondition: "" }], rarity: 1 }, "200711": { alternatives: [{ baseDuration: 0, condition: "distance_type==3&phase_random==1&order==1", effects: [{ modifier: 550, type: 9 }], precondition: "" }], rarity: 2 }, "200712": { alternatives: [{ baseDuration: 0, condition: "distance_type==3&phase_random==1&order==1", effects: [{ modifier: 150, type: 9 }], precondition: "" }], rarity: 1 }, "200721": { alternatives: [{ baseDuration: 9e3, condition: "distance_type==3&phase_random==1&order_rate<=50", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 2 }, "200722": { alternatives: [{ baseDuration: 9e3, condition: "distance_type==3&phase_random==1&order_rate<=50", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "200731": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==3&is_finalcorner==1&corner!=0&change_order_onetime>0", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 2 }, "200732": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==3&is_finalcorner==1&corner!=0&change_order_onetime>0", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "200741": { alternatives: [{ baseDuration: 0, condition: "distance_type==4&straight_random==1", effects: [{ modifier: 550, type: 9 }], precondition: "" }], rarity: 2 }, "200742": { alternatives: [{ baseDuration: 0, condition: "distance_type==4&straight_random==1", effects: [{ modifier: 150, type: 9 }], precondition: "" }], rarity: 1 }, "200751": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==4&is_finalcorner==1&corner!=0&lane_type==0", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 2 }, "200752": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==4&is_finalcorner==1&corner!=0&lane_type==0", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "200761": { alternatives: [{ baseDuration: 0, condition: "distance_type==4&is_hp_empty_onetime==1", effects: [{ modifier: 550, type: 9 }], precondition: "" }], rarity: 2 }, "200762": { alternatives: [{ baseDuration: 0, condition: "distance_type==4&is_hp_empty_onetime==1", effects: [{ modifier: 150, type: 9 }], precondition: "" }], rarity: 1 }, "200771": { alternatives: [{ baseDuration: 0, condition: "phase==1&order_rate<=50&temptation_count_behind>=1", effects: [{ modifier: -100, type: 9 }], precondition: "" }], rarity: 1 }, "200781": { alternatives: [{ baseDuration: 0, condition: "phase==1&order_rate>50&temptation_count_infront>=1", effects: [{ modifier: -100, type: 9 }], precondition: "" }], rarity: 1 }, "200791": { alternatives: [{ baseDuration: 0, condition: "running_style_temptation_count_nige>=1&is_temptation==0", effects: [{ modifier: 5e4, type: 13 }], precondition: "" }], rarity: 1 }, "200801": { alternatives: [{ baseDuration: 0, condition: "running_style_temptation_count_senko>=1&is_temptation==0", effects: [{ modifier: 5e4, type: 13 }], precondition: "" }], rarity: 1 }, "200811": { alternatives: [{ baseDuration: 0, condition: "running_style_temptation_count_sashi>=1&is_temptation==0", effects: [{ modifier: 5e4, type: 13 }], precondition: "" }], rarity: 1 }, "200821": { alternatives: [{ baseDuration: 0, condition: "running_style_temptation_count_oikomi>=1&is_temptation==0", effects: [{ modifier: 5e4, type: 13 }], precondition: "" }], rarity: 1 }, "200831": { alternatives: [{ baseDuration: 0, condition: "running_style_count_nige_otherself>=1&phase_random==0&accumulatetime>=5", effects: [{ modifier: -100, type: 9 }], precondition: "" }], rarity: 1 }, "200841": { alternatives: [{ baseDuration: 0, condition: "running_style_count_nige_otherself>=1&phase_random==1", effects: [{ modifier: -100, type: 9 }], precondition: "" }], rarity: 1 }, "200851": { alternatives: [{ baseDuration: 3e4, condition: "running_style_count_nige_otherself>=1&phase_random==2", effects: [{ modifier: -1500, type: 21 }], precondition: "" }], rarity: 1 }, "200861": { alternatives: [{ baseDuration: 0, condition: "running_style_count_senko_otherself>=1&phase_random==0&accumulatetime>=5", effects: [{ modifier: -100, type: 9 }], precondition: "" }], rarity: 1 }, "200871": { alternatives: [{ baseDuration: 0, condition: "running_style_count_senko_otherself>=1&phase_random==1", effects: [{ modifier: -100, type: 9 }], precondition: "" }], rarity: 1 }, "200881": { alternatives: [{ baseDuration: 3e4, condition: "running_style_count_senko_otherself>=1&phase_random==2", effects: [{ modifier: -1500, type: 21 }], precondition: "" }], rarity: 1 }, "200891": { alternatives: [{ baseDuration: 0, condition: "running_style_count_sashi_otherself>=1&phase_random==0&accumulatetime>=5", effects: [{ modifier: -100, type: 9 }], precondition: "" }], rarity: 1 }, "200901": { alternatives: [{ baseDuration: 0, condition: "running_style_count_sashi_otherself>=1&phase_random==1", effects: [{ modifier: -100, type: 9 }], precondition: "" }], rarity: 1 }, "200911": { alternatives: [{ baseDuration: 3e4, condition: "running_style_count_sashi_otherself>=1&phase_random==2", effects: [{ modifier: -1500, type: 21 }], precondition: "" }], rarity: 1 }, "200921": { alternatives: [{ baseDuration: 0, condition: "running_style_count_oikomi_otherself>=1&phase_random==0&accumulatetime>=5", effects: [{ modifier: -100, type: 9 }], precondition: "" }], rarity: 1 }, "200931": { alternatives: [{ baseDuration: 0, condition: "running_style_count_oikomi_otherself>=1&phase_random==1", effects: [{ modifier: -100, type: 9 }], precondition: "" }], rarity: 1 }, "200941": { alternatives: [{ baseDuration: 3e4, condition: "running_style_count_oikomi_otherself>=1&phase_random==2", effects: [{ modifier: -1500, type: 21 }], precondition: "" }], rarity: 1 }, "200951": { alternatives: [{ baseDuration: -1, condition: "track_id==10101", effects: [{ modifier: 6e5, type: 2 }], precondition: "" }], rarity: 1 }, "200952": { alternatives: [{ baseDuration: -1, condition: "track_id==10101", effects: [{ modifier: 4e5, type: 2 }], precondition: "" }], rarity: 1 }, "200953": { alternatives: [{ baseDuration: -1, condition: "track_id==10101", effects: [{ modifier: -4e5, type: 2 }], precondition: "" }], rarity: 1 }, "200961": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==1&straight_random==1", effects: [{ modifier: 2500, type: 27 }], precondition: "" }], rarity: 1 }, "200962": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==1&straight_random==1", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "200971": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==1&corner_random==1@distance_type==1&corner_random==2@distance_type==1&corner_random==3@distance_type==1&corner_random==4", effects: [{ modifier: 2500, type: 27 }], precondition: "" }], rarity: 1 }, "200972": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==1&corner_random==1@distance_type==1&corner_random==2@distance_type==1&corner_random==3@distance_type==1&corner_random==4", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "200981": { alternatives: [{ baseDuration: 12e3, condition: "distance_type==1&phase==1&bashin_diff_behind>=5&order==1", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 2 }, "200982": { alternatives: [{ baseDuration: 12e3, condition: "distance_type==1&phase==1&bashin_diff_behind>=5&order==1", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "200991": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==1&phase_random==1&order>=2&order_rate<=50", effects: [{ modifier: 4e3, type: 31 }], precondition: "" }], rarity: 2 }, "200992": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==1&phase_random==1&order>=2&order_rate<=50", effects: [{ modifier: 2e3, type: 31 }], precondition: "" }], rarity: 1 }, "201001": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==1&phase_random==1", effects: [{ modifier: 350, type: 28 }, { modifier: 3e3, type: 31 }], precondition: "" }], rarity: 2 }, "201002": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==1&phase_random==1", effects: [{ modifier: 250, type: 28 }, { modifier: 2e3, type: 31 }], precondition: "" }], rarity: 1 }, "201012": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==1&phase_random==0&order<=3&accumulatetime>=5", effects: [{ modifier: -2e3, type: 21 }], precondition: "" }], rarity: 1 }, "201021": { alternatives: [{ baseDuration: 0, condition: "distance_type==1&phase_random==0&order_rate>50&accumulatetime>=5", effects: [{ modifier: -300, type: 9 }], precondition: "" }], rarity: 2 }, "201022": { alternatives: [{ baseDuration: 0, condition: "distance_type==1&phase_random==0&order_rate>50&accumulatetime>=5", effects: [{ modifier: -100, type: 9 }], precondition: "" }], rarity: 1 }, "201031": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==2&straight_random==1", effects: [{ modifier: 2500, type: 27 }], precondition: "" }], rarity: 1 }, "201032": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==2&straight_random==1", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "201041": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==2&corner_random==1@distance_type==2&corner_random==2@distance_type==2&corner_random==3@distance_type==2&corner_random==4", effects: [{ modifier: 2500, type: 27 }], precondition: "" }], rarity: 1 }, "201042": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==2&corner_random==1@distance_type==2&corner_random==2@distance_type==2&corner_random==3@distance_type==2&corner_random==4", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "201051": { alternatives: [{ baseDuration: 12e3, condition: "distance_type==2&phase_random==1&order_rate<=50", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 2 }, "201052": { alternatives: [{ baseDuration: 12e3, condition: "distance_type==2&phase_random==1&order_rate<=50", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "201061": { alternatives: [{ baseDuration: 12e3, condition: "distance_type==2&phase==1&change_order_onetime<0", effects: [{ modifier: 4e3, type: 31 }], precondition: "" }], rarity: 2 }, "201062": { alternatives: [{ baseDuration: 12e3, condition: "distance_type==2&phase==1&change_order_onetime<0", effects: [{ modifier: 2e3, type: 31 }], precondition: "" }], rarity: 1 }, "201071": { alternatives: [{ baseDuration: 18e3, condition: "distance_type==2&is_overtake==1&accumulatetime>=5", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 2 }, "201072": { alternatives: [{ baseDuration: 18e3, condition: "distance_type==2&is_overtake==1&accumulatetime>=5", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "201081": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==2&phase_random==1&order==1", effects: [{ modifier: -2e3, type: 21 }, { modifier: 2500, type: 27 }], precondition: "" }], rarity: 2 }, "201082": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==2&phase_random==1&order==1", effects: [{ modifier: -1500, type: 21 }, { modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "201091": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==2&phase_random==0&order_rate>50&accumulatetime>=5", effects: [{ modifier: -3e3, type: 31 }], precondition: "" }], rarity: 2 }, "201092": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==2&phase_random==0&order_rate>50&accumulatetime>=5", effects: [{ modifier: -1e3, type: 31 }], precondition: "" }], rarity: 1 }, "201101": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==3&straight_random==1", effects: [{ modifier: 2500, type: 27 }], precondition: "" }], rarity: 1 }, "201102": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==3&straight_random==1", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "201111": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==3&corner_random==1@distance_type==3&corner_random==2@distance_type==3&corner_random==3@distance_type==3&corner_random==4", effects: [{ modifier: 2500, type: 27 }], precondition: "" }], rarity: 1 }, "201112": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==3&corner_random==1@distance_type==3&corner_random==2@distance_type==3&corner_random==3@distance_type==3&corner_random==4", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "201121": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==3&phase_random==0", effects: [{ modifier: 15e4, type: 8 }], precondition: "" }], rarity: 2 }, "201122": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==3&phase_random==0", effects: [{ modifier: 1e5, type: 8 }], precondition: "" }], rarity: 1 }, "201131": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==3&phase_random==1&order_rate>50", effects: [{ modifier: 350, type: 28 }, { modifier: 3e3, type: 31 }], precondition: "" }], rarity: 2 }, "201132": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==3&phase_random==1&order_rate>50", effects: [{ modifier: 250, type: 28 }, { modifier: 2e3, type: 31 }], precondition: "" }], rarity: 1 }, "201141": { alternatives: [{ baseDuration: 0, condition: "distance_type==3&is_move_lane==1&accumulatetime>=10@distance_type==3&is_move_lane==2&accumulatetime>=10", effects: [{ modifier: 550, type: 9 }], precondition: "" }], rarity: 2 }, "201142": { alternatives: [{ baseDuration: 0, condition: "distance_type==3&is_move_lane==1&accumulatetime>=10@distance_type==3&is_move_lane==2&accumulatetime>=10", effects: [{ modifier: 150, type: 9 }], precondition: "" }], rarity: 1 }, "201151": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==3&phase_random==2&order_rate>50", effects: [{ modifier: -2500, type: 21 }], precondition: "" }], rarity: 2 }, "201152": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==3&phase_random==2&order_rate>50", effects: [{ modifier: -1500, type: 21 }], precondition: "" }], rarity: 1 }, "201161": { alternatives: [{ baseDuration: 0, condition: "distance_type==3&phase==1&blocked_front_continuetime>=1", effects: [{ modifier: -300, type: 9 }], precondition: "" }], rarity: 2 }, "201162": { alternatives: [{ baseDuration: 0, condition: "distance_type==3&phase==1&blocked_front_continuetime>=1", effects: [{ modifier: -100, type: 9 }], precondition: "" }], rarity: 1 }, "201171": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==4&straight_random==1", effects: [{ modifier: 2500, type: 27 }], precondition: "" }], rarity: 1 }, "201172": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==4&straight_random==1", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "201181": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==4&corner_random==1@distance_type==4&corner_random==2@distance_type==4&corner_random==3@distance_type==4&corner_random==4", effects: [{ modifier: 2500, type: 27 }], precondition: "" }], rarity: 1 }, "201182": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==4&corner_random==1@distance_type==4&corner_random==2@distance_type==4&corner_random==3@distance_type==4&corner_random==4", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "201191": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==4&phase_random==1&bashin_diff_behind>=3&order==1", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 2 }, "201192": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==4&phase_random==1&bashin_diff_behind>=3&order==1", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "201202": { alternatives: [{ baseDuration: 0, condition: "distance_type==4&is_overtake==1&accumulatetime>=5", effects: [{ modifier: 150, type: 9 }], precondition: "" }], rarity: 1 }, "201211": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==4&phase==2&change_order_onetime<0", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 2 }, "201212": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==4&phase==2&change_order_onetime<0", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "201221": { alternatives: [{ baseDuration: 0, condition: "distance_type==4&phase_random==1&order>=5", effects: [{ modifier: -200, type: 9 }, { modifier: 550, type: 9 }], precondition: "" }], rarity: 2 }, "201222": { alternatives: [{ baseDuration: 0, condition: "distance_type==4&phase_random==1&order>=5", effects: [{ modifier: -50, type: 9 }, { modifier: 150, type: 9 }], precondition: "" }], rarity: 1 }, "201231": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==4&phase_random==2", effects: [{ modifier: -1e5, type: 8 }], precondition: "" }], rarity: 2 }, "201232": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==4&phase_random==2", effects: [{ modifier: -5e4, type: 8 }], precondition: "" }], rarity: 1 }, "201241": { alternatives: [{ baseDuration: 3e4, condition: "running_style==1&straight_random==1", effects: [{ modifier: 2500, type: 27 }], precondition: "" }], rarity: 1 }, "201242": { alternatives: [{ baseDuration: 3e4, condition: "running_style==1&straight_random==1", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "201251": { alternatives: [{ baseDuration: 3e4, condition: "running_style==1&corner_random==1@running_style==1&corner_random==2@running_style==1&corner_random==3@running_style==1&corner_random==4", effects: [{ modifier: 2500, type: 27 }], precondition: "" }], rarity: 1 }, "201252": { alternatives: [{ baseDuration: 3e4, condition: "running_style==1&corner_random==1@running_style==1&corner_random==2@running_style==1&corner_random==3@running_style==1&corner_random==4", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "201262": { alternatives: [{ baseDuration: 3e4, condition: "running_style==1&phase==0&blocked_all_continuetime>=1", effects: [{ modifier: 250, type: 28 }], precondition: "" }], rarity: 1 }, "201272": { alternatives: [{ baseDuration: 3e4, condition: "running_style==1&phase==0&change_order_onetime>0&accumulatetime>=5", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "201281": { alternatives: [{ baseDuration: 0, condition: "running_style==1&slope==1&accumulatetime>=10", effects: [{ modifier: 550, type: 9 }], precondition: "" }], rarity: 2 }, "201282": { alternatives: [{ baseDuration: 0, condition: "running_style==1&slope==1&accumulatetime>=10", effects: [{ modifier: 150, type: 9 }], precondition: "" }], rarity: 1 }, "201291": { alternatives: [{ baseDuration: 3e4, condition: "running_style==1&phase_random==1&order_rate>50", effects: [{ modifier: 4e3, type: 31 }], precondition: "" }], rarity: 2 }, "201292": { alternatives: [{ baseDuration: 3e4, condition: "running_style==1&phase_random==1&order_rate>50", effects: [{ modifier: 2e3, type: 31 }], precondition: "" }], rarity: 1 }, "201302": { alternatives: [{ baseDuration: 3e4, condition: "running_style==1&phase_random==0&order_rate>50&accumulatetime>=5", effects: [{ modifier: -1e3, type: 31 }], precondition: "" }], rarity: 1 }, "201311": { alternatives: [{ baseDuration: 3e4, condition: "running_style==2&straight_random==1", effects: [{ modifier: 2500, type: 27 }], precondition: "" }], rarity: 1 }, "201312": { alternatives: [{ baseDuration: 3e4, condition: "running_style==2&straight_random==1", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "201321": { alternatives: [{ baseDuration: 3e4, condition: "running_style==2&corner_random==1@running_style==2&corner_random==2@running_style==2&corner_random==3@running_style==2&corner_random==4", effects: [{ modifier: 2500, type: 27 }], precondition: "" }], rarity: 1 }, "201322": { alternatives: [{ baseDuration: 3e4, condition: "running_style==2&corner_random==1@running_style==2&corner_random==2@running_style==2&corner_random==3@running_style==2&corner_random==4", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "201331": { alternatives: [{ baseDuration: 18e3, condition: "running_style==2&is_move_lane==1@running_style==2&is_move_lane==2", effects: [{ modifier: 3e3, type: 31 }], precondition: "" }], rarity: 2 }, "201332": { alternatives: [{ baseDuration: 18e3, condition: "running_style==2&is_move_lane==1@running_style==2&is_move_lane==2", effects: [{ modifier: 2e3, type: 31 }], precondition: "" }], rarity: 1 }, "201341": { alternatives: [{ baseDuration: 3e4, condition: "running_style==2&slope==2", effects: [{ modifier: 3e3, type: 31 }], precondition: "" }], rarity: 2 }, "201342": { alternatives: [{ baseDuration: 3e4, condition: "running_style==2&slope==2", effects: [{ modifier: 2e3, type: 31 }], precondition: "" }], rarity: 1 }, "201351": { alternatives: [{ baseDuration: 0, condition: "running_style==2&phase_random==1", effects: [{ modifier: 550, type: 9 }], precondition: "" }], rarity: 2 }, "201352": { alternatives: [{ baseDuration: 0, condition: "running_style==2&phase_random==1", effects: [{ modifier: 150, type: 9 }], precondition: "" }], rarity: 1 }, "201361": { alternatives: [{ baseDuration: 3e4, condition: "running_style==2&phase_random==1&order_rate>50", effects: [{ modifier: 3e3, type: 31 }], precondition: "" }], rarity: 2 }, "201362": { alternatives: [{ baseDuration: 3e4, condition: "running_style==2&phase_random==1&order_rate>50", effects: [{ modifier: 2e3, type: 31 }], precondition: "" }], rarity: 1 }, "201371": { alternatives: [{ baseDuration: 3e4, condition: "running_style==2&phase_random==2&order_rate<=50", effects: [{ modifier: -5e4, type: 8 }], precondition: "" }], rarity: 2 }, "201372": { alternatives: [{ baseDuration: 3e4, condition: "running_style==2&phase_random==2&order_rate<=50", effects: [{ modifier: -3e4, type: 8 }], precondition: "" }], rarity: 1 }, "201381": { alternatives: [{ baseDuration: 3e4, condition: "running_style==3&straight_random==1", effects: [{ modifier: 2500, type: 27 }], precondition: "" }], rarity: 1 }, "201382": { alternatives: [{ baseDuration: 3e4, condition: "running_style==3&straight_random==1", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "201391": { alternatives: [{ baseDuration: 3e4, condition: "running_style==3&corner_random==1@running_style==3&corner_random==2@running_style==3&corner_random==3@running_style==3&corner_random==4", effects: [{ modifier: 2500, type: 27 }], precondition: "" }], rarity: 1 }, "201392": { alternatives: [{ baseDuration: 3e4, condition: "running_style==3&corner_random==1@running_style==3&corner_random==2@running_style==3&corner_random==3@running_style==3&corner_random==4", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "201401": { alternatives: [{ baseDuration: 3e4, condition: "running_style==3&is_overtake==1&accumulatetime>=5", effects: [{ modifier: 3e3, type: 31 }], precondition: "" }], rarity: 2 }, "201402": { alternatives: [{ baseDuration: 3e4, condition: "running_style==3&is_overtake==1&accumulatetime>=5", effects: [{ modifier: 2e3, type: 31 }], precondition: "" }], rarity: 1 }, "201411": { alternatives: [{ baseDuration: 18e3, condition: "running_style==3&slope==1", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 2 }, "201412": { alternatives: [{ baseDuration: 18e3, condition: "running_style==3&slope==1", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "201421": { alternatives: [{ baseDuration: 0, condition: "running_style==3&phase_random==2", effects: [{ modifier: 550, type: 9 }], precondition: "" }], rarity: 2 }, "201422": { alternatives: [{ baseDuration: 0, condition: "running_style==3&phase_random==2", effects: [{ modifier: 150, type: 9 }], precondition: "" }], rarity: 1 }, "201431": { alternatives: [{ baseDuration: 3e4, condition: "running_style==3&phase_random==1", effects: [{ modifier: 15e4, type: 8 }], precondition: "" }], rarity: 2 }, "201432": { alternatives: [{ baseDuration: 3e4, condition: "running_style==3&phase_random==1", effects: [{ modifier: 5e4, type: 8 }], precondition: "" }], rarity: 1 }, "201441": { alternatives: [{ baseDuration: 0, condition: "running_style==3&phase_random==2&order_rate>50", effects: [{ modifier: -300, type: 9 }], precondition: "" }], rarity: 2 }, "201442": { alternatives: [{ baseDuration: 0, condition: "running_style==3&phase_random==2&order_rate>50", effects: [{ modifier: -100, type: 9 }], precondition: "" }], rarity: 1 }, "201451": { alternatives: [{ baseDuration: 3e4, condition: "running_style==4&straight_random==1", effects: [{ modifier: 2500, type: 27 }], precondition: "" }], rarity: 1 }, "201452": { alternatives: [{ baseDuration: 3e4, condition: "running_style==4&straight_random==1", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "201461": { alternatives: [{ baseDuration: 3e4, condition: "running_style==4&corner_random==1@running_style==4&corner_random==2@running_style==4&corner_random==3@running_style==4&corner_random==4", effects: [{ modifier: 2500, type: 27 }], precondition: "" }], rarity: 1 }, "201462": { alternatives: [{ baseDuration: 3e4, condition: "running_style==4&corner_random==1@running_style==4&corner_random==2@running_style==4&corner_random==3@running_style==4&corner_random==4", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "201471": { alternatives: [{ baseDuration: 3e4, condition: "running_style==4&is_move_lane==1@running_style==4&is_move_lane==2", effects: [{ modifier: 1e5, type: 8 }], precondition: "" }], rarity: 2 }, "201472": { alternatives: [{ baseDuration: 3e4, condition: "running_style==4&is_move_lane==1@running_style==4&is_move_lane==2", effects: [{ modifier: 5e4, type: 8 }], precondition: "" }], rarity: 1 }, "201481": { alternatives: [{ baseDuration: 0, condition: "running_style==4&slope==2&accumulatetime>=10", effects: [{ modifier: 550, type: 9 }], precondition: "" }], rarity: 2 }, "201482": { alternatives: [{ baseDuration: 0, condition: "running_style==4&slope==2&accumulatetime>=10", effects: [{ modifier: 150, type: 9 }], precondition: "" }], rarity: 1 }, "201491": { alternatives: [{ baseDuration: 0, condition: "running_style==4&blocked_front_continuetime>=1&accumulatetime>=10", effects: [{ modifier: 550, type: 9 }], precondition: "" }], rarity: 2 }, "201492": { alternatives: [{ baseDuration: 0, condition: "running_style==4&blocked_front_continuetime>=1&accumulatetime>=10", effects: [{ modifier: 150, type: 9 }], precondition: "" }], rarity: 1 }, "201501": { alternatives: [{ baseDuration: 3e4, condition: "running_style==4&phase_random==2&order_rate>50", effects: [{ modifier: 15e4, type: 8 }], precondition: "" }], rarity: 2 }, "201502": { alternatives: [{ baseDuration: 3e4, condition: "running_style==4&phase_random==2&order_rate>50", effects: [{ modifier: 5e4, type: 8 }], precondition: "" }], rarity: 1 }, "201511": { alternatives: [{ baseDuration: 3e4, condition: "running_style==4&phase_random==2&order>=2", effects: [{ modifier: -2500, type: 21 }], precondition: "" }], rarity: 2 }, "201512": { alternatives: [{ baseDuration: 3e4, condition: "running_style==4&phase_random==2&order>=2", effects: [{ modifier: -1500, type: 21 }], precondition: "" }], rarity: 1 }, "201521": { alternatives: [{ baseDuration: -1, condition: "running_style==1", effects: [{ modifier: 6e5, type: 5 }, { modifier: 1e5, type: 8 }], precondition: "" }], rarity: 1 }, "201522": { alternatives: [{ baseDuration: -1, condition: "running_style==1", effects: [{ modifier: 4e5, type: 5 }, { modifier: 5e4, type: 8 }], precondition: "" }], rarity: 1 }, "201531": { alternatives: [{ baseDuration: -1, condition: "running_style==2", effects: [{ modifier: 6e5, type: 5 }, { modifier: 1e5, type: 8 }], precondition: "" }], rarity: 1 }, "201532": { alternatives: [{ baseDuration: -1, condition: "running_style==2", effects: [{ modifier: 4e5, type: 5 }, { modifier: 5e4, type: 8 }], precondition: "" }], rarity: 1 }, "201541": { alternatives: [{ baseDuration: -1, condition: "running_style==3", effects: [{ modifier: 6e5, type: 5 }, { modifier: 1e5, type: 8 }], precondition: "" }], rarity: 1 }, "201542": { alternatives: [{ baseDuration: -1, condition: "running_style==3", effects: [{ modifier: 4e5, type: 5 }, { modifier: 5e4, type: 8 }], precondition: "" }], rarity: 1 }, "201551": { alternatives: [{ baseDuration: -1, condition: "running_style==4", effects: [{ modifier: 6e5, type: 5 }, { modifier: 1e5, type: 8 }], precondition: "" }], rarity: 1 }, "201552": { alternatives: [{ baseDuration: -1, condition: "running_style==4", effects: [{ modifier: 4e5, type: 5 }, { modifier: 5e4, type: 8 }], precondition: "" }], rarity: 1 }, "201561": { alternatives: [{ baseDuration: -1, condition: "random_lot==50&post_number==7", effects: [{ modifier: 6e5, type: 1 }, { modifier: 6e5, type: 2 }, { modifier: 6e5, type: 3 }], precondition: "" }], rarity: 2 }, "201562": { alternatives: [{ baseDuration: -1, condition: "random_lot==50&post_number==7", effects: [{ modifier: 4e5, type: 1 }, { modifier: 4e5, type: 2 }, { modifier: 4e5, type: 3 }], precondition: "" }], rarity: 1 }, "201571": { alternatives: [{ baseDuration: 0, condition: "remain_distance<=778&remain_distance>=776", effects: [{ modifier: 150, type: 9 }], precondition: "" }], rarity: 1 }, "201581": { alternatives: [{ baseDuration: 3e4, condition: "slope==1", effects: [{ modifier: 2e3, type: 31 }], precondition: "" }], rarity: 1 }, "201591": { alternatives: [{ baseDuration: 3e4, condition: "near_count==4@near_count==5@near_count==6@near_count==7", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "201601": { alternatives: [{ baseDuration: 3e4, condition: "activate_count_start>=3", effects: [{ modifier: 2e3, type: 31 }], precondition: "" }], rarity: 1 }, "201611": { alternatives: [{ baseDuration: 3e4, condition: "activate_count_middle>=3", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "201621": { alternatives: [{ baseDuration: 0, condition: "activate_count_end_after>=3", effects: [{ modifier: 150, type: 9 }], precondition: "" }], rarity: 1 }, "201631": { alternatives: [{ baseDuration: -1, condition: "same_skill_horse_count>=5", effects: [{ modifier: 4e5, type: 1 }], precondition: "" }], rarity: 1 }, "201641": { alternatives: [{ baseDuration: -1, condition: "same_skill_horse_count==1", effects: [{ modifier: 4e5, type: 1 }], precondition: "" }], rarity: 1 }, "201651": { alternatives: [{ baseDuration: 3e4, condition: "infront_near_lane_time>=3&accumulatetime>=10", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "201661": { alternatives: [{ baseDuration: 3e4, condition: "behind_near_lane_time>=3&accumulatetime>=10", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "900011": { alternatives: [{ baseDuration: 3e4, condition: "phase>=2&order>=2&order_rate<=50&change_order_onetime<0", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "900021": { alternatives: [{ baseDuration: 3e4, condition: "is_finalcorner==1&corner==0&order==1&bashin_diff_behind>=1", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "900031": { alternatives: [{ baseDuration: 3e4, condition: "is_finalcorner==1&corner==0&order<=3&bashin_diff_infront<=1&is_overtake==1", effects: [{ modifier: 2500, type: 27 }], precondition: "" }], rarity: 1 }, "900041": { alternatives: [{ baseDuration: 24e3, condition: "is_finalcorner==1&order<=5&order_rate<=50", effects: [{ modifier: 2e3, type: 31 }], precondition: "" }], rarity: 1 }, "900061": { alternatives: [{ baseDuration: 3e4, condition: "order>=2&order<=5&order_rate<=50&remain_distance<=201&remain_distance>=199", effects: [{ modifier: 2500, type: 27 }], precondition: "" }], rarity: 1 }, "900071": { alternatives: [{ baseDuration: 36e3, condition: "distance_rate>=50&distance_rate<=60&order_rate>50", effects: [{ modifier: 500, type: 27 }], precondition: "" }], rarity: 1 }, "900081": { alternatives: [{ baseDuration: 3e4, condition: "order>=3&order_rate<=50&remain_distance<=200&bashin_diff_infront<=1@order>=3&order_rate<=50&remain_distance<=200&bashin_diff_behind<=1", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "900091": { alternatives: [{ baseDuration: 3e4, condition: "distance_rate>=50&order==1&bashin_diff_behind<=1", effects: [{ modifier: 500, type: 27 }, { modifier: 1e3, type: 31 }], precondition: "" }], rarity: 1 }, "900101": { alternatives: [{ baseDuration: 24e3, condition: "is_finalcorner==1&corner!=0&order>=3&order_rate<=50", effects: [{ modifier: 2e3, type: 31 }], precondition: "" }], rarity: 1 }, "900111": { alternatives: [{ baseDuration: 3e4, condition: "is_finalcorner==1&corner==0&change_order_onetime<0&order>=4", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "900131": { alternatives: [{ baseDuration: 3e4, condition: "is_finalcorner==1&corner!=0&distance_diff_rate<=30", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "900141": { alternatives: [{ baseDuration: 3e4, condition: "is_finalcorner==1&corner==0&hp_per>=30&order<=2", effects: [{ modifier: 500, type: 27 }, { modifier: 1e3, type: 31 }], precondition: "" }], rarity: 1 }, "900151": { alternatives: [{ baseDuration: 3e4, condition: "is_finalcorner==1&corner!=0&bashin_diff_infront<=1&bashin_diff_behind<=1&blocked_side_continuetime>=2&order<=4", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "900171": { alternatives: [{ baseDuration: 3e4, condition: "is_finalcorner==1&change_order_up_end_after>=3&corner==0", effects: [{ modifier: 2500, type: 27 }], precondition: "" }], rarity: 1 }, "900181": { alternatives: [{ baseDuration: 3e4, condition: "is_finalcorner==1&corner!=0&order>=4&change_order_onetime<0", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "900231": { alternatives: [{ baseDuration: 3e4, condition: "is_finalcorner==1&corner!=0&change_order_onetime<0&order<=4", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "900241": { alternatives: [{ baseDuration: 3e4, condition: "is_finalcorner==1&corner!=0&blocked_side_continuetime>=2&order<=3", effects: [{ modifier: 500, type: 27 }, { modifier: 1e3, type: 31 }], precondition: "" }], rarity: 1 }, "900261": { alternatives: [{ baseDuration: 3e4, condition: "is_badstart==0&temptation_count==0&order<=3&is_finalcorner==1&corner==0", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "900271": { alternatives: [{ baseDuration: 24e3, condition: "phase>=2&corner!=0&order_rate>=65&order_rate<=70", effects: [{ modifier: 2e3, type: 31 }], precondition: "" }], rarity: 1 }, "900301": { alternatives: [{ baseDuration: 3e4, condition: "is_finalcorner==1&corner==0&order<=4&change_order_onetime<0", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "900321": { alternatives: [{ baseDuration: 0, condition: "distance_rate>=50&corner!=0&order>=3&order_rate<=40", effects: [{ modifier: 150, type: 9 }], precondition: "" }], rarity: 1 }, "900351": { alternatives: [{ baseDuration: 3e4, condition: "is_finalcorner==1&corner==0&order<=5&blocked_side_continuetime>=2", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "900411": { alternatives: [{ baseDuration: 3e4, condition: "distance_rate>=50&order<=3&blocked_side_continuetime>=2", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "900451": { alternatives: [{ baseDuration: 0, condition: "phase_random==1&order>=2&order_rate<=40", effects: [{ modifier: 150, type: 9 }], precondition: "" }], rarity: 1 }, "900521": { alternatives: [{ baseDuration: 0, condition: "is_finalcorner==1&corner!=0&order_rate>50&near_count>=1", effects: [{ modifier: 150, type: 9 }], precondition: "" }], rarity: 1 }, "900561": { alternatives: [{ baseDuration: 3e4, condition: "phase>=2&order>=3&blocked_front==1", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "900601": { alternatives: [{ baseDuration: 3e4, condition: "phase>=2&order==3&bashin_diff_behind<=1", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "900611": { alternatives: [{ baseDuration: 3e4, condition: "temptation_count==0&remain_distance<=201&remain_distance>=199&order>=5&order_rate<=60", effects: [{ modifier: 2500, type: 27 }], precondition: "" }], rarity: 1 } };

  // skillnames.json
  var skillnames_default = { "100011": ["Shooting Star"], "100021": ["The View from the Lead Is Mine!"], "100031": ["Sky-High Teio Step"], "100041": ["Red Shift/LP1211-M"], "100051": ["Lights of Vaudeville"], "100061": ["Triumphant Pulse"], "100071": ["Anchors Aweigh!"], "100081": ["Cut and Drive!"], "100091": ["Resplendent Red Ace"], "100101": ["Shooting for Victory!"], "100111": ["Where There's a Will, There's a Way"], "100121": ["You and Me! One-on-One!"], "100131": ["The Duty of Dignity Calls"], "100141": ["Victoria por plancha \u2606"], "100151": ["This Dance Is for Vittoria!"], "100161": ["Shadow Break"], "100171": ["Behold Thine Emperor's Divine Might"], "100181": ["Blazing Pride"], "100201": ["Angling and Scheming"], "100231": ["\u2234win Q.E.D."], "100241": ["Flashy\u2606Landing"], "100261": ["G00 1st. F\u221E;"], "100271": ["Let's Pump Some Iron!"], "100301": ["Blue Rose Closer"], "100321": ["U=ma2"], "100351": ["Our Ticket to Win!"], "100371": ["Schwarzes Schwert"], "100381": ["#LookatCurren"], "100401": ["KEEP IT REAL."], "100411": ["Genius x Bakushin = Victory"], "100451": ["Pure Heart"], "100461": ["SPARKLY\u2606STARDOM"], "100501": ["Nemesis"], "100521": ["Super-Duper Climax"], "100561": ["I See Victory in My Future!"], "100581": ["I Never Goof Up!"], "100601": ["Just a Little Farther!"], "100611": ["Prideful King"], "10071": ["Warning Shot!"], "10081": ["Xceleration"], "10091": ["Red Ace"], "10111": ["Focused Mind"], "10141": ["Coraz\xF3n \u2606 Ardiente"], "10181": ["Empress's Pride"], "10241": ["1st Place Kiss\u2606"], "10271": ["Feel the Burn!"], "10321": ["Introduction to Physiology"], "10351": ["V Is for Victory!"], "10411": ["Class Rep + Speed = Bakushin"], "10451": ["Clear Heart"], "10521": ["Super-Duper Stoked"], "10561": ["Luck Be with Me!"], "10601": ["I Can Win Sometimes, Right?"], "10611": ["Call Me King"], "110011": ["Dazzl'n \u266A Diver"], "110031": ["Certain Victory"], "110041": ["A Kiss for Courage"], "110111": ["Superior Heal"], "110131": ["Legacy of the Strong"], "110141": ["Condor's Fury"], "110181": ["Eternal Moments"], "110241": ["Flowery\u2606Maneuver"], "110561": ["Bountiful Harvest"], "200011": ["Right-Handed \u25CE"], "200012": ["Right-Handed \u25CB"], "200013": ["Right-Handed \xD7"], "200021": ["Left-Handed \u25CE"], "200022": ["Left-Handed \u25CB"], "200023": ["Left-Handed \xD7"], "200031": ["Tokyo Racecourse \u25CE"], "200032": ["Tokyo Racecourse \u25CB"], "200033": ["Tokyo Racecourse \xD7"], "200041": ["Nakayama Racecourse \u25CE"], "200042": ["Nakayama Racecourse \u25CB"], "200043": ["Nakayama Racecourse \xD7"], "200051": ["Hanshin Racecourse \u25CE"], "200052": ["Hanshin Racecourse \u25CB"], "200053": ["Hanshin Racecourse \xD7"], "200061": ["Kyoto Racecourse \u25CE"], "200062": ["Kyoto Racecourse \u25CB"], "200063": ["Kyoto Racecourse \xD7"], "200071": ["Chukyo Racecourse \u25CE"], "200072": ["Chukyo Racecourse \u25CB"], "200073": ["Chukyo Racecourse \xD7"], "200081": ["Sapporo Racecourse \u25CE"], "200082": ["Sapporo Racecourse \u25CB"], "200083": ["Sapporo Racecourse \xD7"], "200091": ["Hakodate Racecourse \u25CE"], "200092": ["Hakodate Racecourse \u25CB"], "200093": ["Hakodate Racecourse \xD7"], "200101": ["Fukushima Racecourse \u25CE"], "200102": ["Fukushima Racecourse \u25CB"], "200103": ["Fukushima Racecourse \xD7"], "200111": ["Niigata Racecourse \u25CE"], "200112": ["Niigata Racecourse \u25CB"], "200113": ["Niigata Racecourse \xD7"], "200121": ["Kokura Racecourse \u25CE"], "200122": ["Kokura Racecourse \u25CB"], "200123": ["Kokura Racecourse \xD7"], "200131": ["Standard Distance \u25CE"], "200132": ["Standard Distance \u25CB"], "200133": ["Standard Distance \xD7"], "200141": ["Non-Standard Distance \u25CE"], "200142": ["Non-Standard Distance \u25CB"], "200143": ["Non-Standard Distance \xD7"], "200151": ["Firm Conditions \u25CE"], "200152": ["Firm Conditions \u25CB"], "200153": ["Firm Conditions \xD7"], "200161": ["Wet Conditions \u25CE"], "200162": ["Wet Conditions \u25CB"], "200163": ["Wet Conditions \xD7"], "200171": ["Spring Runner \u25CE"], "200172": ["Spring Runner \u25CB"], "200173": ["Spring Runner \xD7"], "200181": ["Summer Runner \u25CE"], "200182": ["Summer Runner \u25CB"], "200183": ["Summer Runner \xD7"], "200191": ["Fall Runner \u25CE"], "200192": ["Fall Runner \u25CB"], "200193": ["Fall Runner \xD7"], "200201": ["Winter Runner \u25CE"], "200202": ["Winter Runner \u25CB"], "200203": ["Winter Runner \xD7"], "200211": ["Sunny Days \u25CE"], "200212": ["Sunny Days \u25CB"], "200221": ["Cloudy Days \u25CE"], "200222": ["Cloudy Days \u25CB"], "200231": ["Rainy Days \u25CE"], "200232": ["Rainy Days \u25CB"], "200233": ["Rainy Days \xD7"], "200241": ["Snowy Days \u25CE"], "200242": ["Snowy Days \u25CB"], "200251": ["Inner Post Proficiency \u25CE"], "200252": ["Inner Post Proficiency \u25CB"], "200253": ["Inner Post Averseness"], "200261": ["Outer Post Proficiency \u25CE"], "200262": ["Outer Post Proficiency \u25CB"], "200263": ["Outer Post Averseness"], "200271": ["Maverick \u25CE"], "200272": ["Maverick \u25CB"], "200281": ["Competitive Spirit \u25CE"], "200282": ["Competitive Spirit \u25CB"], "200283": ["Wallflower"], "200291": ["Target in Sight \u25CE"], "200292": ["Target in Sight \u25CB"], "200301": ["Long Shot \u25CE"], "200302": ["Long Shot \u25CB"], "200311": ["G1 Averseness"], "200321": ["Paddock Fright"], "200331": ["Professor of Curvature"], "200332": ["Corner Adept \u25CB"], "200333": ["Corner Adept \xD7"], "200341": ["Corner Connoisseur"], "200342": ["Corner Acceleration \u25CB"], "200343": ["Corner Acceleration \xD7"], "200351": ["Swinging Maestro"], "200352": ["Corner Recovery \u25CB"], "200353": ["Corner Recovery \xD7"], "200361": ["Beeline Burst"], "200362": ["Straightaway Adept"], "200371": ["Rushing Gale!"], "200372": ["Straightaway Acceleration"], "200381": ["Breath of Fresh Air"], "200382": ["Straightaway Recovery"], "200391": ["Ramp Revulsion"], "200401": ["Packphobia"], "200411": ["Defeatist"], "200421": ["Reckless"], "200431": ["Concentration"], "200432": ["Focus"], "200433": ["Gatekept"], "200441": ["Iron Will"], "200442": ["Lay Low"], "200451": ["Center Stage"], "200452": ["Prudent Positioning"], "200461": ["It's On!"], "200462": ["Ramp Up"], "200471": ["Indomitable"], "200472": ["Pace Strategy"], "200481": ["Unruffled"], "200482": ["Calm in a Crowd"], "200491": ["No Stopping Me!"], "200492": ["Nimble Navigator"], "200501": ["Lane Legerdemain"], "200502": ["Go with the Flow"], "200511": ["In Body and Mind"], "200512": ["Homestretch Haste"], "200521": ["Running Idle"], "200531": ["Taking the Lead"], "200532": ["Early Lead"], "200541": ["Escape Artist"], "200542": ["Fast-Paced"], "200551": ["Unrestrained"], "200552": ["Final Push"], "200561": ["Calm and Collected"], "200562": ["Stamina to Spare"], "200571": ["Race Planner"], "200572": ["Preferred Position"], "200581": ["Speed Star"], "200582": ["Prepared to Pass"], "200591": ["Fast & Furious"], "200592": ["Position Pilfer"], "200601": ["On Your Left!"], "200602": ["Slick Surge"], "200611": ["Rising Dragon"], "200612": ["Outer Swell"], "200621": ["Sleeping Lion"], "200622": ["Standing By"], "200631": ["Sturm und Drang"], "200632": ["Masterful Gambit"], "200641": ["Encroaching Shadow"], "200642": ["Straightaway Spurt"], "200651": ["Turbo Sprint"], "200652": ["Sprinting Gear"], "200662": ["Wait-and-See"], "200671": ["Blinding Flash"], "200672": ["Gap Closer"], "200681": ["Mile Maven"], "200682": ["Productive Plan"], "200691": ["Keen Eye"], "200692": ["Watchful Eye"], "200701": ["Furious Feat"], "200702": ["Updrafters"], "200711": ["Trackblazer"], "200712": ["Rosy Outlook"], "200721": ["Killer Tunes"], "200722": ["Up-Tempo"], "200731": ["Unyielding"], "200732": ["Steadfast"], "200741": ["Cooldown"], "200742": ["Deep Breaths"], "200751": ["Innate Experience"], "200752": ["Inside Scoop"], "200761": ["Adrenaline Rush"], "200762": ["Extra Tank"], "200771": ["Trick (Front)"], "200781": ["Trick (Rear)"], "200791": ["Frenzied Front Runners"], "200801": ["Frenzied Pace Chasers"], "200811": ["Frenzied Late Surgers"], "200821": ["Frenzied End Closers"], "200831": ["Subdued Front Runners"], "200841": ["Flustered Front Runners"], "200851": ["Hesitant Front Runners"], "200861": ["Subdued Pace Chasers"], "200871": ["Flustered Pace Chasers"], "200881": ["Hesitant Pace Chasers"], "200891": ["Subdued Late Surgers"], "200901": ["Flustered Late Surgers"], "200911": ["Hesitant Late Surgers"], "200921": ["Subdued End Closers"], "200931": ["Flustered End Closers"], "200941": ["Hesitant End Closers"], "200951": ["Oi Racecourse \u25CE"], "200952": ["Oi Racecourse \u25CB"], "200953": ["Oi Racecourse \xD7"], "200961": ["Sprint Straightaways \u25CE"], "200962": ["Sprint Straightaways \u25CB"], "200971": ["Sprint Corners \u25CE"], "200972": ["Sprint Corners \u25CB"], "200981": ["Staggering Lead"], "200982": ["Huge Lead"], "200991": ["Plan X"], "200992": ["Countermeasure"], "201001": ["Perfect Prep!"], "201002": ["Meticulous Measures"], "201011": ["Adored by All"], "201012": ["Intimidate"], "201021": ["You've Got No Shot"], "201022": ["Stop Right There!"], "201031": ["Mile Straightaways \u25CE"], "201032": ["Mile Straightaways \u25CB"], "201041": ["Mile Corners \u25CE"], "201042": ["Mile Corners \u25CB"], "201051": ["Changing Gears"], "201052": ["Shifting Gears"], "201061": ["Step on the Gas!"], "201062": ["Acceleration"], "201071": ["Big-Sisterly"], "201072": ["Unyielding Spirit"], "201081": ["Greed for Speed"], "201082": ["Speed Eater"], "201091": ["Battle Formation"], "201092": ["Opening Gambit"], "201101": ["Medium Straightaways \u25CE"], "201102": ["Medium Straightaways \u25CB"], "201111": ["Medium Corners \u25CE"], "201112": ["Medium Corners \u25CB"], "201121": ["Clairvoyance"], "201122": ["Hawkeye"], "201131": ["Lightning Step"], "201132": ["Thunderbolt Step"], "201141": ["Miraculous Step"], "201142": ["Soft Step"], "201151": ["Dominator"], "201152": ["Tether"], "201161": ["Mystifying Murmur"], "201162": ["Murmur"], "201171": ["Long Straightaways \u25CE"], "201172": ["Long Straightaways \u25CB"], "201181": ["Long Corners \u25CE"], "201182": ["Long Corners \u25CB"], "201191": ["Vanguard Spirit"], "201192": ["Keeping the Lead"], "201202": ["Passing Pro"], "201211": ["Overwhelming Pressure"], "201212": ["Pressure"], "201221": ["Stamina Siphon"], "201222": ["Stamina Eater"], "201231": ["Illusionist"], "201232": ["Smoke Screen"], "201241": ["Front Runner Straightaways \u25CE"], "201242": ["Front Runner Straightaways \u25CB"], "201251": ["Front Runner Corners \u25CE"], "201252": ["Front Runner Corners \u25CB"], "201261": ["Sixth Sense"], "201262": ["Dodging Danger"], "201272": ["Leader's Pride"], "201281": ["Restless"], "201282": ["Moxie"], "201291": ["Reignition"], "201292": ["Second Wind"], "201302": ["Restart"], "201311": ["Pace Chaser Straightaways \u25CE"], "201312": ["Pace Chaser Straightaways \u25CB"], "201321": ["Pace Chaser Corners \u25CE"], "201322": ["Pace Chaser Corners \u25CB"], "201331": ["Technician"], "201332": ["Shrewd Step"], "201341": ["Determined Descent"], "201342": ["Straight Descent"], "201351": ["Gourmand"], "201352": ["Hydrate"], "201361": ["Shatterproof"], "201362": ["Tactical Tweak"], "201371": ["Dazzling Disorientation"], "201372": ["Disorient"], "201381": ["Late Surger Straightaways \u25CE"], "201382": ["Late Surger Straightaways \u25CB"], "201391": ["Later Surger Corners \u25CE"], "201392": ["Late Surger Corners \u25CB"], "201401": ["Hard Worker"], "201402": ["Fighter"], "201411": ["15,000,000 CC"], "201412": ["1,500,000 CC"], "201421": ["Relax"], "201422": ["A Small Breather"], "201431": ["The Bigger Picture"], "201432": ["Studious"], "201441": ["All-Seeing Eyes"], "201442": ["Sharp Gaze"], "201451": ["End Closer Straightaways \u25CE"], "201452": ["End Closer Straightaways \u25CB"], "201461": ["End Closer Corners \u25CE"], "201462": ["End Closer Corners \u25CB"], "201471": ["The Coast Is Clear!"], "201472": ["I Can See Right Through You"], "201481": ["Go-Home Specialist"], "201482": ["After-School Stroll"], "201491": ["Serenity"], "201492": ["Levelheaded"], "201501": ["Crusader"], "201502": ["Strategist"], "201511": ["Petrifying Gaze"], "201512": ["Intense Gaze"], "201521": ["Front Runner Savvy \u25CE"], "201522": ["Front Runner Savvy \u25CB"], "201531": ["Pace Chaser Savvy \u25CE"], "201532": ["Pace Chaser Savvy \u25CB"], "201541": ["Late Surger Savvy \u25CE"], "201542": ["Late Surger Savvy \u25CB"], "201551": ["End Closer Savvy \u25CE"], "201552": ["End Closer Savvy \u25CB"], "201561": ["Super Lucky Seven"], "201562": ["Lucky Seven"], "201571": ["Triple 7s"], "201581": ["Highlander"], "201591": ["Uma Stan"], "201601": ["Groundwork"], "201611": ["Tail Held High"], "201621": ["Shake It Out"], "201631": ["Sympathy"], "201641": ["Lone Wolf"], "201651": ["Slipstream"], "201661": ["Playtime's Over!"], "201671": ["Trending in the Charts!"], "201672": ["Top Pick"], "210011": ["Burning Spirit SPD"], "210012": ["Ignited Spirit SPD"], "210021": ["Burning Spirit STA"], "210022": ["Ignited Spirit STA"], "210031": ["Burning Spirit PWR"], "210032": ["Ignited Spirit PWR"], "210041": ["Burning Spirit GUTS"], "210042": ["Ignited Spirit GUTS"], "210051": ["Burning Spirit WIT"], "210052": ["Ignited Spirit WIT"], "300011": ["Unquenched Thirst"], "300021": ["Unchanging"], "900011": ["Shooting Star"], "900021": ["The View from the Lead Is Mine!"], "900031": ["Sky-High Teio Step"], "900041": ["Red Shift/LP1211-M"], "900051": ["Lights of Vaudeville"], "900061": ["Triumphant Pulse"], "900071": ["Anchors Aweigh!"], "900081": ["Cut and Drive!"], "900091": ["Resplendent Red Ace"], "900101": ["Shooting for Victory!"], "900111": ["Where There's a Will, There's a Way"], "900121": ["You and Me! One-on-One!"], "900131": ["The Duty of Dignity Calls"], "900141": ["Victoria por plancha \u2606"], "900151": ["This Dance Is for Vittoria!"], "900161": ["Shadow Break"], "900171": ["Behold Thine Emperor's Divine Might"], "900181": ["Blazing Pride"], "900201": ["Angling and Scheming"], "900231": ["\u2234win Q.E.D."], "900241": ["Flashy\u2606Landing"], "900261": ["G00 1st. F\u221E;"], "900271": ["Let's Pump Some Iron!"], "900301": ["Blue Rose Closer"], "900321": ["U=ma2"], "900351": ["Our Ticket to Win!"], "900371": ["Schwarzes Schwert"], "900381": ["#LookatCurren"], "900401": ["KEEP IT REAL."], "900411": ["Genius x Bakushin = Victory"], "900451": ["Pure Heart"], "900461": ["SPARKLY\u2606STARDOM"], "900501": ["Nemesis"], "900521": ["Super-Duper Climax"], "900561": ["I See Victory in My Future!"], "900581": ["I Never Goof Up!"], "900601": ["Just a Little Farther!"], "900611": ["Prideful King"], "90071": ["Warning Shot! (inherited)"], "90081": ["Xceleration (inherited)"], "90091": ["Red Ace (inherited)"], "90111": ["Focused Mind (inherited)"], "90141": ["Coraz\xF3n \u2606 Ardiente (inherited)"], "90181": ["Empress's Pride (inherited)"], "90241": ["1st Place Kiss\u2606 (inherited)"], "90271": ["Feel the Burn! (inherited)"], "90321": ["Introduction to Physiology (inherited)"], "90351": ["V Is for Victory! (inherited)"], "90411": ["Class Rep + Speed = Bakushin (inherited)"], "90451": ["Clear Heart (inherited)"], "90521": ["Super-Duper Stoked (inherited)"], "90561": ["Luck Be with Me! (inherited)"], "90601": ["I Can Win Sometimes, Right? (inherited)"], "90611": ["Call Me King (inherited)"], "910011": ["Dazzl'n \u266A Diver"], "910031": ["Certain Victory"], "910041": ["A Kiss for Courage"], "910111": ["Superior Heal"], "910131": ["Legacy of the Strong"], "910141": ["Condor's Fury"], "910181": ["Eternal Moments"], "910241": ["Flowery\u2606Maneuver"], "910561": ["Bountiful Harvest"] };

  // skill_meta.json
  var skill_meta_default = { "100011": { baseCost: 0, groupId: 10001, iconId: "20013", order: 10 }, "100021": { baseCost: 0, groupId: 10002, iconId: "20013", order: 10 }, "100031": { baseCost: 0, groupId: 10003, iconId: "20013", order: 10 }, "100041": { baseCost: 0, groupId: 10004, iconId: "20043", order: 10 }, "100061": { baseCost: 0, groupId: 10006, iconId: "20013", order: 10 }, "100071": { baseCost: 0, groupId: 10007, iconId: "20013", order: 10 }, "100081": { baseCost: 0, groupId: 10008, iconId: "20013", order: 10 }, "100091": { baseCost: 0, groupId: 10009, iconId: "20013", order: 10 }, "100101": { baseCost: 0, groupId: 10010, iconId: "20043", order: 10 }, "100111": { baseCost: 0, groupId: 10011, iconId: "20013", order: 10 }, "100131": { baseCost: 0, groupId: 10013, iconId: "20013", order: 10 }, "100141": { baseCost: 0, groupId: 10014, iconId: "20013", order: 10 }, "100151": { baseCost: 0, groupId: 10015, iconId: "20013", order: 10 }, "100171": { baseCost: 0, groupId: 10017, iconId: "20013", order: 10 }, "100181": { baseCost: 0, groupId: 10018, iconId: "20013", order: 10 }, "100231": { baseCost: 0, groupId: 10023, iconId: "20013", order: 10 }, "100241": { baseCost: 0, groupId: 10024, iconId: "20013", order: 10 }, "100261": { baseCost: 0, groupId: 10026, iconId: "20013", order: 10 }, "100271": { baseCost: 0, groupId: 10027, iconId: "20043", order: 10 }, "100301": { baseCost: 0, groupId: 10030, iconId: "20013", order: 10 }, "100321": { baseCost: 0, groupId: 10032, iconId: "20023", order: 10 }, "100351": { baseCost: 0, groupId: 10035, iconId: "20013", order: 10 }, "100411": { baseCost: 0, groupId: 10041, iconId: "20013", order: 10 }, "100451": { baseCost: 0, groupId: 10045, iconId: "20023", order: 10 }, "100521": { baseCost: 0, groupId: 10052, iconId: "20023", order: 10 }, "100561": { baseCost: 0, groupId: 10056, iconId: "20013", order: 10 }, "100601": { baseCost: 0, groupId: 10060, iconId: "20013", order: 10 }, "100611": { baseCost: 0, groupId: 10061, iconId: "20013", order: 10 }, "10071": { baseCost: 0, groupId: 1007, iconId: "20013", order: 10 }, "10081": { baseCost: 0, groupId: 1008, iconId: "20013", order: 10 }, "10091": { baseCost: 0, groupId: 1009, iconId: "20013", order: 10 }, "10111": { baseCost: 0, groupId: 1011, iconId: "20013", order: 10 }, "10141": { baseCost: 0, groupId: 1014, iconId: "20013", order: 10 }, "10181": { baseCost: 0, groupId: 1018, iconId: "20013", order: 10 }, "10241": { baseCost: 0, groupId: 1024, iconId: "20013", order: 10 }, "10271": { baseCost: 0, groupId: 1027, iconId: "20043", order: 10 }, "10321": { baseCost: 0, groupId: 1032, iconId: "20023", order: 10 }, "10351": { baseCost: 0, groupId: 1035, iconId: "20013", order: 10 }, "10411": { baseCost: 0, groupId: 1041, iconId: "20013", order: 10 }, "10451": { baseCost: 0, groupId: 1045, iconId: "20023", order: 10 }, "10521": { baseCost: 0, groupId: 1052, iconId: "20023", order: 10 }, "10561": { baseCost: 0, groupId: 1056, iconId: "20013", order: 10 }, "10601": { baseCost: 0, groupId: 1060, iconId: "20013", order: 10 }, "10611": { baseCost: 0, groupId: 1061, iconId: "20013", order: 10 }, "200011": { baseCost: 110, groupId: 20001, iconId: "10011", order: 1e3 }, "200012": { baseCost: 90, groupId: 20001, iconId: "10011", order: 1010 }, "200013": { baseCost: 50, groupId: 20001, iconId: "10014", order: 1020 }, "200021": { baseCost: 110, groupId: 20002, iconId: "10011", order: 1030 }, "200022": { baseCost: 90, groupId: 20002, iconId: "10011", order: 1040 }, "200023": { baseCost: 50, groupId: 20002, iconId: "10014", order: 1050 }, "200031": { baseCost: 110, groupId: 20003, iconId: "10021", order: 1060 }, "200032": { baseCost: 90, groupId: 20003, iconId: "10021", order: 1070 }, "200033": { baseCost: 50, groupId: 20003, iconId: "10024", order: 1080 }, "200041": { baseCost: 110, groupId: 20004, iconId: "10021", order: 1090 }, "200042": { baseCost: 90, groupId: 20004, iconId: "10021", order: 1100 }, "200043": { baseCost: 50, groupId: 20004, iconId: "10024", order: 1110 }, "200051": { baseCost: 110, groupId: 20005, iconId: "10021", order: 1120 }, "200052": { baseCost: 90, groupId: 20005, iconId: "10021", order: 1130 }, "200053": { baseCost: 50, groupId: 20005, iconId: "10024", order: 1140 }, "200061": { baseCost: 110, groupId: 20006, iconId: "10021", order: 1150 }, "200062": { baseCost: 90, groupId: 20006, iconId: "10021", order: 1160 }, "200063": { baseCost: 50, groupId: 20006, iconId: "10024", order: 1170 }, "200071": { baseCost: 110, groupId: 20007, iconId: "10021", order: 1180 }, "200072": { baseCost: 90, groupId: 20007, iconId: "10021", order: 1190 }, "200073": { baseCost: 50, groupId: 20007, iconId: "10024", order: 1200 }, "200081": { baseCost: 90, groupId: 20008, iconId: "10021", order: 1210 }, "200082": { baseCost: 70, groupId: 20008, iconId: "10021", order: 1220 }, "200083": { baseCost: 40, groupId: 20008, iconId: "10024", order: 1230 }, "200091": { baseCost: 90, groupId: 20009, iconId: "10021", order: 1240 }, "200092": { baseCost: 70, groupId: 20009, iconId: "10021", order: 1250 }, "200093": { baseCost: 40, groupId: 20009, iconId: "10024", order: 1260 }, "200101": { baseCost: 90, groupId: 20010, iconId: "10021", order: 1270 }, "200102": { baseCost: 70, groupId: 20010, iconId: "10021", order: 1280 }, "200103": { baseCost: 40, groupId: 20010, iconId: "10024", order: 1290 }, "200111": { baseCost: 90, groupId: 20011, iconId: "10021", order: 1300 }, "200112": { baseCost: 70, groupId: 20011, iconId: "10021", order: 1310 }, "200113": { baseCost: 40, groupId: 20011, iconId: "10024", order: 1320 }, "200121": { baseCost: 90, groupId: 20012, iconId: "10021", order: 1330 }, "200122": { baseCost: 70, groupId: 20012, iconId: "10021", order: 1340 }, "200123": { baseCost: 40, groupId: 20012, iconId: "10024", order: 1350 }, "200131": { baseCost: 110, groupId: 20013, iconId: "10021", order: 1390 }, "200132": { baseCost: 90, groupId: 20013, iconId: "10021", order: 1400 }, "200133": { baseCost: 50, groupId: 20013, iconId: "10024", order: 1410 }, "200141": { baseCost: 110, groupId: 20014, iconId: "10021", order: 1420 }, "200142": { baseCost: 90, groupId: 20014, iconId: "10021", order: 1430 }, "200143": { baseCost: 50, groupId: 20014, iconId: "10024", order: 1440 }, "200151": { baseCost: 110, groupId: 20015, iconId: "10031", order: 1450 }, "200152": { baseCost: 90, groupId: 20015, iconId: "10031", order: 1460 }, "200153": { baseCost: 50, groupId: 20015, iconId: "10034", order: 1470 }, "200161": { baseCost: 110, groupId: 20016, iconId: "10031", order: 1480 }, "200162": { baseCost: 90, groupId: 20016, iconId: "10031", order: 1490 }, "200163": { baseCost: 50, groupId: 20016, iconId: "10034", order: 1500 }, "200171": { baseCost: 110, groupId: 20017, iconId: "10011", order: 1510 }, "200172": { baseCost: 90, groupId: 20017, iconId: "10011", order: 1520 }, "200173": { baseCost: 50, groupId: 20017, iconId: "10014", order: 1530 }, "200181": { baseCost: 110, groupId: 20018, iconId: "10011", order: 1540 }, "200182": { baseCost: 90, groupId: 20018, iconId: "10011", order: 1550 }, "200183": { baseCost: 50, groupId: 20018, iconId: "10014", order: 1560 }, "200191": { baseCost: 110, groupId: 20019, iconId: "10011", order: 1570 }, "200192": { baseCost: 90, groupId: 20019, iconId: "10011", order: 1580 }, "200193": { baseCost: 50, groupId: 20019, iconId: "10014", order: 1590 }, "200201": { baseCost: 110, groupId: 20020, iconId: "10011", order: 1600 }, "200202": { baseCost: 90, groupId: 20020, iconId: "10011", order: 1610 }, "200203": { baseCost: 50, groupId: 20020, iconId: "10014", order: 1620 }, "200211": { baseCost: 110, groupId: 20021, iconId: "10041", order: 1630 }, "200212": { baseCost: 90, groupId: 20021, iconId: "10041", order: 1640 }, "200221": { baseCost: 110, groupId: 20022, iconId: "10041", order: 1650 }, "200222": { baseCost: 90, groupId: 20022, iconId: "10041", order: 1660 }, "200231": { baseCost: 110, groupId: 20023, iconId: "10041", order: 1670 }, "200232": { baseCost: 90, groupId: 20023, iconId: "10041", order: 1680 }, "200233": { baseCost: 50, groupId: 20023, iconId: "10044", order: 1690 }, "200241": { baseCost: 110, groupId: 20024, iconId: "10041", order: 1700 }, "200242": { baseCost: 90, groupId: 20024, iconId: "10041", order: 1710 }, "200251": { baseCost: 110, groupId: 20025, iconId: "10051", order: 1720 }, "200252": { baseCost: 90, groupId: 20025, iconId: "10051", order: 1730 }, "200253": { baseCost: 50, groupId: 20025, iconId: "10054", order: 1740 }, "200261": { baseCost: 110, groupId: 20026, iconId: "10011", order: 1750 }, "200262": { baseCost: 90, groupId: 20026, iconId: "10011", order: 1760 }, "200263": { baseCost: 50, groupId: 20026, iconId: "10014", order: 1770 }, "200271": { baseCost: 110, groupId: 20027, iconId: "10011", order: 1780 }, "200272": { baseCost: 90, groupId: 20027, iconId: "10011", order: 1790 }, "200281": { baseCost: 110, groupId: 20028, iconId: "10031", order: 1800 }, "200282": { baseCost: 90, groupId: 20028, iconId: "10031", order: 1810 }, "200283": { baseCost: 50, groupId: 20028, iconId: "10034", order: 1820 }, "200291": { baseCost: 110, groupId: 20029, iconId: "10041", order: 1830 }, "200292": { baseCost: 90, groupId: 20029, iconId: "10041", order: 1840 }, "200301": { baseCost: 110, groupId: 20030, iconId: "10011", order: 1850 }, "200302": { baseCost: 90, groupId: 20030, iconId: "10011", order: 1860 }, "200311": { baseCost: 50, groupId: 20031, iconId: "10014", order: 1870 }, "200321": { baseCost: 50, groupId: 20032, iconId: "10024", order: 1880 }, "200331": { baseCost: 180, groupId: 20033, iconId: "20012", order: 1890 }, "200332": { baseCost: 180, groupId: 20033, iconId: "20011", order: 1900 }, "200333": { baseCost: 100, groupId: 20033, iconId: "20014", order: 1910 }, "200341": { baseCost: 180, groupId: 20034, iconId: "20042", order: 1920 }, "200342": { baseCost: 180, groupId: 20034, iconId: "20041", order: 1930 }, "200343": { baseCost: 100, groupId: 20034, iconId: "20044", order: 1940 }, "200351": { baseCost: 170, groupId: 20035, iconId: "20022", order: 1950 }, "200352": { baseCost: 170, groupId: 20035, iconId: "20021", order: 1960 }, "200353": { baseCost: 100, groupId: 20035, iconId: "20024", order: 1970 }, "200361": { baseCost: 170, groupId: 20036, iconId: "20012", order: 1980 }, "200362": { baseCost: 170, groupId: 20036, iconId: "20011", order: 1990 }, "200371": { baseCost: 170, groupId: 20037, iconId: "20042", order: 2e3 }, "200372": { baseCost: 170, groupId: 20037, iconId: "20041", order: 2010 }, "200381": { baseCost: 170, groupId: 20038, iconId: "20022", order: 2020 }, "200382": { baseCost: 170, groupId: 20038, iconId: "20021", order: 2030 }, "200391": { baseCost: 100, groupId: 20039, iconId: "20024", order: 2040 }, "200401": { baseCost: 100, groupId: 20040, iconId: "20024", order: 2050 }, "200411": { baseCost: 100, groupId: 20041, iconId: "20014", order: 2060 }, "200421": { baseCost: 100, groupId: 20042, iconId: "20014", order: 2070 }, "200431": { baseCost: 140, groupId: 20043, iconId: "20062", order: 2080 }, "200432": { baseCost: 140, groupId: 20043, iconId: "20061", order: 2090 }, "200433": { baseCost: 70, groupId: 20043, iconId: "20064", order: 2100 }, "200441": { baseCost: 160, groupId: 20044, iconId: "20022", order: 2110 }, "200442": { baseCost: 160, groupId: 20044, iconId: "20021", order: 2120 }, "200451": { baseCost: 120, groupId: 20045, iconId: "20052", order: 2130 }, "200452": { baseCost: 120, groupId: 20045, iconId: "20051", order: 2140 }, "200461": { baseCost: 170, groupId: 20046, iconId: "20012", order: 2150 }, "200462": { baseCost: 170, groupId: 20046, iconId: "20011", order: 2160 }, "200471": { baseCost: 170, groupId: 20047, iconId: "20022", order: 2170 }, "200472": { baseCost: 170, groupId: 20047, iconId: "20021", order: 2180 }, "200481": { baseCost: 170, groupId: 20048, iconId: "20022", order: 2190 }, "200482": { baseCost: 170, groupId: 20048, iconId: "20021", order: 2200 }, "200491": { baseCost: 150, groupId: 20049, iconId: "20042", order: 2210 }, "200492": { baseCost: 150, groupId: 20049, iconId: "20041", order: 2220 }, "200501": { baseCost: 120, groupId: 20050, iconId: "20052", order: 2230 }, "200502": { baseCost: 120, groupId: 20050, iconId: "20051", order: 2240 }, "200511": { baseCost: 170, groupId: 20051, iconId: "20012", order: 2250 }, "200512": { baseCost: 170, groupId: 20051, iconId: "20011", order: 2260 }, "200521": { baseCost: 100, groupId: 20052, iconId: "20024", order: 2270 }, "200531": { baseCost: 120, groupId: 20053, iconId: "20042", order: 2280 }, "200532": { baseCost: 120, groupId: 20053, iconId: "20041", order: 2290 }, "200541": { baseCost: 180, groupId: 20054, iconId: "20012", order: 2300 }, "200542": { baseCost: 180, groupId: 20054, iconId: "20011", order: 2310 }, "200551": { baseCost: 180, groupId: 20055, iconId: "20042", order: 2320 }, "200552": { baseCost: 180, groupId: 20055, iconId: "20041", order: 2330 }, "200561": { baseCost: 180, groupId: 20056, iconId: "20022", order: 2340 }, "200562": { baseCost: 180, groupId: 20056, iconId: "20021", order: 2350 }, "200571": { baseCost: 180, groupId: 20057, iconId: "20022", order: 2360 }, "200572": { baseCost: 180, groupId: 20057, iconId: "20021", order: 2370 }, "200581": { baseCost: 180, groupId: 20058, iconId: "20012", order: 2380 }, "200582": { baseCost: 180, groupId: 20058, iconId: "20011", order: 2390 }, "200591": { baseCost: 180, groupId: 20059, iconId: "20012", order: 2400 }, "200592": { baseCost: 180, groupId: 20059, iconId: "20011", order: 2410 }, "200601": { baseCost: 180, groupId: 20060, iconId: "20042", order: 2420 }, "200602": { baseCost: 180, groupId: 20060, iconId: "20041", order: 2430 }, "200611": { baseCost: 180, groupId: 20061, iconId: "20012", order: 2440 }, "200612": { baseCost: 180, groupId: 20061, iconId: "20011", order: 2450 }, "200621": { baseCost: 180, groupId: 20062, iconId: "20022", order: 2460 }, "200622": { baseCost: 180, groupId: 20062, iconId: "20021", order: 2470 }, "200631": { baseCost: 180, groupId: 20063, iconId: "20012", order: 2480 }, "200632": { baseCost: 180, groupId: 20063, iconId: "20011", order: 2490 }, "200641": { baseCost: 180, groupId: 20064, iconId: "20042", order: 2500 }, "200642": { baseCost: 180, groupId: 20064, iconId: "20041", order: 2510 }, "200651": { baseCost: 160, groupId: 20065, iconId: "20042", order: 2520 }, "200652": { baseCost: 160, groupId: 20065, iconId: "20041", order: 2530 }, "200662": { baseCost: 160, groupId: 20066, iconId: "20021", order: 2550 }, "200671": { baseCost: 160, groupId: 20067, iconId: "20012", order: 2560 }, "200672": { baseCost: 160, groupId: 20067, iconId: "20011", order: 2570 }, "200681": { baseCost: 160, groupId: 20068, iconId: "20012", order: 2580 }, "200682": { baseCost: 160, groupId: 20068, iconId: "20011", order: 2590 }, "200691": { baseCost: 160, groupId: 20069, iconId: "20022", order: 2600 }, "200692": { baseCost: 160, groupId: 20069, iconId: "20021", order: 2610 }, "200701": { baseCost: 160, groupId: 20070, iconId: "20042", order: 2620 }, "200702": { baseCost: 160, groupId: 20070, iconId: "20041", order: 2630 }, "200711": { baseCost: 160, groupId: 20071, iconId: "20022", order: 2640 }, "200712": { baseCost: 160, groupId: 20071, iconId: "20021", order: 2650 }, "200721": { baseCost: 160, groupId: 20072, iconId: "20012", order: 2660 }, "200722": { baseCost: 160, groupId: 20072, iconId: "20011", order: 2670 }, "200731": { baseCost: 160, groupId: 20073, iconId: "20012", order: 2680 }, "200732": { baseCost: 160, groupId: 20073, iconId: "20011", order: 2690 }, "200741": { baseCost: 160, groupId: 20074, iconId: "20022", order: 2700 }, "200742": { baseCost: 160, groupId: 20074, iconId: "20021", order: 2710 }, "200751": { baseCost: 160, groupId: 20075, iconId: "20012", order: 2720 }, "200752": { baseCost: 160, groupId: 20075, iconId: "20011", order: 2730 }, "200761": { baseCost: 160, groupId: 20076, iconId: "20022", order: 2740 }, "200762": { baseCost: 160, groupId: 20076, iconId: "20021", order: 2750 }, "200771": { baseCost: 140, groupId: 20077, iconId: "30051", order: 2760 }, "200781": { baseCost: 140, groupId: 20078, iconId: "30051", order: 2770 }, "200791": { baseCost: 130, groupId: 20079, iconId: "30041", order: 2780 }, "200801": { baseCost: 130, groupId: 20080, iconId: "30041", order: 2790 }, "200811": { baseCost: 130, groupId: 20081, iconId: "30041", order: 2800 }, "200821": { baseCost: 130, groupId: 20082, iconId: "30041", order: 2810 }, "200831": { baseCost: 130, groupId: 20083, iconId: "30051", order: 2820 }, "200841": { baseCost: 130, groupId: 20084, iconId: "30051", order: 2830 }, "200851": { baseCost: 130, groupId: 20085, iconId: "30011", order: 2840 }, "200861": { baseCost: 130, groupId: 20086, iconId: "30051", order: 2850 }, "200871": { baseCost: 130, groupId: 20087, iconId: "30051", order: 2860 }, "200881": { baseCost: 130, groupId: 20088, iconId: "30011", order: 2870 }, "200891": { baseCost: 130, groupId: 20089, iconId: "30051", order: 2880 }, "200901": { baseCost: 130, groupId: 20090, iconId: "30051", order: 2890 }, "200911": { baseCost: 130, groupId: 20091, iconId: "30011", order: 2900 }, "200921": { baseCost: 130, groupId: 20092, iconId: "30051", order: 2910 }, "200931": { baseCost: 130, groupId: 20093, iconId: "30051", order: 2920 }, "200941": { baseCost: 130, groupId: 20094, iconId: "30011", order: 2930 }, "200951": { baseCost: 110, groupId: 20095, iconId: "10021", order: 1360 }, "200952": { baseCost: 90, groupId: 20095, iconId: "10021", order: 1370 }, "200953": { baseCost: 50, groupId: 20095, iconId: "10024", order: 1380 }, "200961": { baseCost: 110, groupId: 20096, iconId: "20011", order: 3e4 }, "200962": { baseCost: 100, groupId: 20096, iconId: "20011", order: 30001 }, "200971": { baseCost: 110, groupId: 20097, iconId: "20011", order: 30002 }, "200972": { baseCost: 100, groupId: 20097, iconId: "20011", order: 30003 }, "200981": { baseCost: 170, groupId: 20098, iconId: "20012", order: 30004 }, "200982": { baseCost: 170, groupId: 20098, iconId: "20011", order: 30005 }, "200991": { baseCost: 160, groupId: 20099, iconId: "20042", order: 30006 }, "200992": { baseCost: 160, groupId: 20099, iconId: "20041", order: 30007 }, "201001": { baseCost: 140, groupId: 20100, iconId: "20052", order: 30008 }, "201002": { baseCost: 140, groupId: 20100, iconId: "20051", order: 30009 }, "201012": { baseCost: 170, groupId: 20101, iconId: "30011", order: 30011 }, "201021": { baseCost: 170, groupId: 20102, iconId: "30052", order: 30012 }, "201022": { baseCost: 170, groupId: 20102, iconId: "30051", order: 30013 }, "201031": { baseCost: 110, groupId: 20103, iconId: "20011", order: 30014 }, "201032": { baseCost: 100, groupId: 20103, iconId: "20011", order: 30015 }, "201041": { baseCost: 110, groupId: 20104, iconId: "20011", order: 30016 }, "201042": { baseCost: 100, groupId: 20104, iconId: "20011", order: 30017 }, "201051": { baseCost: 160, groupId: 20105, iconId: "20012", order: 30018 }, "201052": { baseCost: 160, groupId: 20105, iconId: "20011", order: 30019 }, "201061": { baseCost: 160, groupId: 20106, iconId: "20042", order: 30020 }, "201062": { baseCost: 160, groupId: 20106, iconId: "20041", order: 30021 }, "201071": { baseCost: 120, groupId: 20107, iconId: "20012", order: 30022 }, "201072": { baseCost: 120, groupId: 20107, iconId: "20011", order: 30023 }, "201081": { baseCost: 160, groupId: 20108, iconId: "30012", order: 30024 }, "201082": { baseCost: 160, groupId: 20108, iconId: "30011", order: 30025 }, "201091": { baseCost: 160, groupId: 20109, iconId: "30022", order: 30026 }, "201092": { baseCost: 160, groupId: 20109, iconId: "30021", order: 30027 }, "201101": { baseCost: 110, groupId: 20110, iconId: "20011", order: 30028 }, "201102": { baseCost: 100, groupId: 20110, iconId: "20011", order: 30029 }, "201111": { baseCost: 110, groupId: 20111, iconId: "20011", order: 30030 }, "201112": { baseCost: 100, groupId: 20111, iconId: "20011", order: 30031 }, "201121": { baseCost: 110, groupId: 20112, iconId: "20092", order: 30032 }, "201122": { baseCost: 110, groupId: 20112, iconId: "20091", order: 30033 }, "201131": { baseCost: 140, groupId: 20113, iconId: "20052", order: 30034 }, "201132": { baseCost: 140, groupId: 20113, iconId: "20051", order: 30035 }, "201141": { baseCost: 160, groupId: 20114, iconId: "20022", order: 30036 }, "201142": { baseCost: 160, groupId: 20114, iconId: "20021", order: 30037 }, "201151": { baseCost: 160, groupId: 20115, iconId: "30012", order: 30038 }, "201152": { baseCost: 160, groupId: 20115, iconId: "30011", order: 30039 }, "201161": { baseCost: 160, groupId: 20116, iconId: "30052", order: 30040 }, "201162": { baseCost: 160, groupId: 20116, iconId: "30051", order: 30041 }, "201171": { baseCost: 110, groupId: 20117, iconId: "20011", order: 30042 }, "201172": { baseCost: 100, groupId: 20117, iconId: "20011", order: 30043 }, "201181": { baseCost: 110, groupId: 20118, iconId: "20011", order: 30044 }, "201182": { baseCost: 100, groupId: 20118, iconId: "20011", order: 30045 }, "201191": { baseCost: 160, groupId: 20119, iconId: "20012", order: 30046 }, "201192": { baseCost: 160, groupId: 20119, iconId: "20011", order: 30047 }, "201202": { baseCost: 160, groupId: 20120, iconId: "20021", order: 30049 }, "201211": { baseCost: 160, groupId: 20121, iconId: "20012", order: 30050 }, "201212": { baseCost: 160, groupId: 20121, iconId: "20011", order: 30051 }, "201221": { baseCost: 160, groupId: 20122, iconId: "30052", order: 30052 }, "201222": { baseCost: 160, groupId: 20122, iconId: "30051", order: 30053 }, "201231": { baseCost: 110, groupId: 20123, iconId: "30072", order: 30054 }, "201232": { baseCost: 110, groupId: 20123, iconId: "30071", order: 30055 }, "201241": { baseCost: 140, groupId: 20124, iconId: "20011", order: 30056 }, "201242": { baseCost: 130, groupId: 20124, iconId: "20011", order: 30057 }, "201251": { baseCost: 140, groupId: 20125, iconId: "20011", order: 30058 }, "201252": { baseCost: 130, groupId: 20125, iconId: "20011", order: 30059 }, "201262": { baseCost: 110, groupId: 20126, iconId: "20051", order: 30061 }, "201272": { baseCost: 180, groupId: 20127, iconId: "20011", order: 30063 }, "201281": { baseCost: 180, groupId: 20128, iconId: "20022", order: 30064 }, "201282": { baseCost: 180, groupId: 20128, iconId: "20021", order: 30065 }, "201291": { baseCost: 180, groupId: 20129, iconId: "20042", order: 30066 }, "201292": { baseCost: 180, groupId: 20129, iconId: "20041", order: 30067 }, "201302": { baseCost: 130, groupId: 20130, iconId: "30021", order: 30069 }, "201311": { baseCost: 140, groupId: 20131, iconId: "20011", order: 30070 }, "201312": { baseCost: 130, groupId: 20131, iconId: "20011", order: 30071 }, "201321": { baseCost: 140, groupId: 20132, iconId: "20011", order: 30072 }, "201322": { baseCost: 130, groupId: 20132, iconId: "20011", order: 30073 }, "201331": { baseCost: 120, groupId: 20133, iconId: "20042", order: 30074 }, "201332": { baseCost: 120, groupId: 20133, iconId: "20041", order: 30075 }, "201341": { baseCost: 120, groupId: 20134, iconId: "20042", order: 30076 }, "201342": { baseCost: 120, groupId: 20134, iconId: "20041", order: 30077 }, "201351": { baseCost: 180, groupId: 20135, iconId: "20022", order: 30078 }, "201352": { baseCost: 180, groupId: 20135, iconId: "20021", order: 30079 }, "201361": { baseCost: 120, groupId: 20136, iconId: "20042", order: 30080 }, "201362": { baseCost: 120, groupId: 20136, iconId: "20041", order: 30081 }, "201371": { baseCost: 110, groupId: 20137, iconId: "30072", order: 30082 }, "201372": { baseCost: 110, groupId: 20137, iconId: "30071", order: 30083 }, "201381": { baseCost: 140, groupId: 20138, iconId: "20011", order: 30084 }, "201382": { baseCost: 130, groupId: 20138, iconId: "20011", order: 30085 }, "201391": { baseCost: 140, groupId: 20139, iconId: "20011", order: 30086 }, "201392": { baseCost: 130, groupId: 20139, iconId: "20011", order: 30087 }, "201401": { baseCost: 120, groupId: 20140, iconId: "20042", order: 30088 }, "201402": { baseCost: 120, groupId: 20140, iconId: "20041", order: 30089 }, "201411": { baseCost: 120, groupId: 20141, iconId: "20012", order: 30090 }, "201412": { baseCost: 120, groupId: 20141, iconId: "20011", order: 30091 }, "201421": { baseCost: 180, groupId: 20142, iconId: "20022", order: 30092 }, "201422": { baseCost: 180, groupId: 20142, iconId: "20021", order: 30093 }, "201431": { baseCost: 120, groupId: 20143, iconId: "20092", order: 30094 }, "201432": { baseCost: 120, groupId: 20143, iconId: "20091", order: 30095 }, "201441": { baseCost: 180, groupId: 20144, iconId: "30052", order: 30096 }, "201442": { baseCost: 180, groupId: 20144, iconId: "30051", order: 30097 }, "201451": { baseCost: 140, groupId: 20145, iconId: "20011", order: 30098 }, "201452": { baseCost: 130, groupId: 20145, iconId: "20011", order: 30099 }, "201461": { baseCost: 140, groupId: 20146, iconId: "20011", order: 30100 }, "201462": { baseCost: 130, groupId: 20146, iconId: "20011", order: 30101 }, "201471": { baseCost: 110, groupId: 20147, iconId: "20092", order: 30102 }, "201472": { baseCost: 110, groupId: 20147, iconId: "20091", order: 30103 }, "201481": { baseCost: 170, groupId: 20148, iconId: "20022", order: 30104 }, "201482": { baseCost: 170, groupId: 20148, iconId: "20021", order: 30105 }, "201491": { baseCost: 180, groupId: 20149, iconId: "20022", order: 30106 }, "201492": { baseCost: 180, groupId: 20149, iconId: "20021", order: 30107 }, "201501": { baseCost: 110, groupId: 20150, iconId: "20092", order: 30108 }, "201502": { baseCost: 110, groupId: 20150, iconId: "20091", order: 30109 }, "201511": { baseCost: 180, groupId: 20151, iconId: "30012", order: 30110 }, "201512": { baseCost: 180, groupId: 20151, iconId: "30011", order: 30111 }, "201521": { baseCost: 130, groupId: 20152, iconId: "10051", order: 30112 }, "201522": { baseCost: 110, groupId: 20152, iconId: "10051", order: 30113 }, "201531": { baseCost: 130, groupId: 20153, iconId: "10051", order: 30114 }, "201532": { baseCost: 110, groupId: 20153, iconId: "10051", order: 30115 }, "201541": { baseCost: 130, groupId: 20154, iconId: "10051", order: 30116 }, "201542": { baseCost: 110, groupId: 20154, iconId: "10051", order: 30117 }, "201551": { baseCost: 130, groupId: 20155, iconId: "10051", order: 30118 }, "201552": { baseCost: 110, groupId: 20155, iconId: "10051", order: 30119 }, "201561": { baseCost: 110, groupId: 20156, iconId: "10062", order: 30120 }, "201562": { baseCost: 110, groupId: 20156, iconId: "10061", order: 30121 }, "201571": { baseCost: 160, groupId: 20157, iconId: "20021", order: 30122 }, "201581": { baseCost: 160, groupId: 20158, iconId: "20041", order: 30123 }, "201591": { baseCost: 160, groupId: 20159, iconId: "20011", order: 30124 }, "201601": { baseCost: 100, groupId: 20160, iconId: "20041", order: 30125 }, "201611": { baseCost: 100, groupId: 20161, iconId: "20011", order: 30126 }, "201621": { baseCost: 100, groupId: 20162, iconId: "20021", order: 30127 }, "201631": { baseCost: 70, groupId: 20163, iconId: "10011", order: 30128 }, "201641": { baseCost: 70, groupId: 20164, iconId: "10011", order: 30129 }, "201651": { baseCost: 160, groupId: 20165, iconId: "20011", order: 30130 }, "201661": { baseCost: 160, groupId: 20166, iconId: "20011", order: 30131 }, "900011": { baseCost: 200, groupId: 90001, iconId: "20011", order: 30 }, "900021": { baseCost: 200, groupId: 90002, iconId: "20011", order: 30 }, "900031": { baseCost: 200, groupId: 90003, iconId: "20011", order: 30 }, "900041": { baseCost: 200, groupId: 90004, iconId: "20041", order: 30 }, "900061": { baseCost: 200, groupId: 90006, iconId: "20011", order: 30 }, "900071": { baseCost: 200, groupId: 90007, iconId: "20011", order: 30 }, "900081": { baseCost: 200, groupId: 90008, iconId: "20011", order: 30 }, "900091": { baseCost: 200, groupId: 90009, iconId: "20011", order: 30 }, "900101": { baseCost: 200, groupId: 90010, iconId: "20041", order: 30 }, "900111": { baseCost: 200, groupId: 90011, iconId: "20011", order: 30 }, "900131": { baseCost: 200, groupId: 90013, iconId: "20011", order: 30 }, "900141": { baseCost: 200, groupId: 90014, iconId: "20011", order: 30 }, "900151": { baseCost: 200, groupId: 90015, iconId: "20011", order: 30 }, "900171": { baseCost: 200, groupId: 90017, iconId: "20011", order: 30 }, "900181": { baseCost: 200, groupId: 90018, iconId: "20011", order: 30 }, "900231": { baseCost: 200, groupId: 90023, iconId: "20011", order: 30 }, "900241": { baseCost: 200, groupId: 90024, iconId: "20011", order: 30 }, "900261": { baseCost: 200, groupId: 90026, iconId: "20011", order: 30 }, "900271": { baseCost: 200, groupId: 90027, iconId: "20041", order: 30 }, "900301": { baseCost: 200, groupId: 90030, iconId: "20011", order: 30 }, "900321": { baseCost: 200, groupId: 90032, iconId: "20021", order: 30 }, "900351": { baseCost: 200, groupId: 90035, iconId: "20011", order: 30 }, "900411": { baseCost: 200, groupId: 90041, iconId: "20011", order: 30 }, "900451": { baseCost: 200, groupId: 90045, iconId: "20021", order: 30 }, "900521": { baseCost: 200, groupId: 90052, iconId: "20021", order: 30 }, "900561": { baseCost: 200, groupId: 90056, iconId: "20011", order: 30 }, "900601": { baseCost: 200, groupId: 90060, iconId: "20011", order: 30 }, "900611": { baseCost: 200, groupId: 90061, iconId: "20011", order: 30 } };

  // ../components/SkillList.tsx
  function skillmeta(id3) {
    return skill_meta_default[id3.split("-")[0]];
  }
  var Parser = getParser(mockConditions);
  var STRINGS_ja = Object.freeze({
    "skillfilters": Object.freeze({
      "search": "",
      // TODO translate
      "white": "\u767D\u30B9\u30AD\u30EB",
      "gold": "\u91D1\u30B9\u30AD\u30EB",
      "pink": "\u9032\u5316\u30B9\u30AD\u30EB",
      "unique": "\u56FA\u6709\u30B9\u30AD\u30EB",
      "inherit": "\u7D99\u627F\u3057\u305F\u56FA\u6709\u30B9\u30AD\u30EB",
      "nige": "\u9003\u3052",
      "senkou": "\u5148\u884C",
      "sasi": "\u5DEE\u3057",
      "oikomi": "\u8FFD\u8FBC",
      "short": "\u77ED\u8DDD\u96E2",
      "mile": "\u30DE\u30A4\u30EB",
      "medium": "\u4E2D\u8DDD\u96E2",
      "long": "\u9577\u8DDD\u96E2",
      "turf": "\u829D",
      "dirt": "\u30C0\u30FC\u30C8",
      "phase0": "\u5E8F\u76E4",
      "phase1": "\u4E2D\u76E4",
      "phase2": "\u7D42\u76E4",
      "phase3": "\u30E9\u30B9\u30C8\u30B9\u30D1\u30FC\u30C8",
      "finalcorner": "\u6700\u7D42\u30B3\u30FC\u30CA\u30FC",
      "finalstraight": "\u6700\u7D42\u76F4\u7DDA"
    }),
    "skilleffecttypes": Object.freeze({
      "1": "\u30B9\u30D4\u30FC\u30C9\u30A2\u30C3\u30D7",
      "2": "\u30B9\u30BF\u30DF\u30CA\u30A2\u30C3\u30D7",
      "3": "\u30D1\u30EF\u30FC\u30A2\u30C3\u30D7",
      "4": "\u6839\u6027\u30A2\u30C3\u30D7",
      "5": "\u8CE2\u3055\u30A2\u30C3\u30D7",
      "9": "\u4F53\u529B\u56DE\u5FA9",
      "21": "\u73FE\u5728\u901F\u5EA6\uFF08\u6E1B\u901F\u306A\u3057\uFF09",
      "22": "\u73FE\u5728\u901F\u5EA6",
      "27": "\u76EE\u6A19\u901F\u5EA6",
      "28": "\u30EC\u30FC\u30F3\u79FB\u52D5\u901F\u5EA6",
      "31": "\u52A0\u901F",
      "37": "Activate random gold skill",
      "42": "\u30B9\u30AD\u30EB\u306E\u52B9\u679C\u6642\u9593\u4E0A\u304C\u308A"
    }),
    "skilldetails": Object.freeze({
      "accel": "{{n}}m/s\xB2",
      "basinn": "{{n}}\u30D0\u8EAB",
      "conditions": "\u767A\u52D5\u6761\u4EF6",
      "distance_type": Object.freeze(["", "\u77ED\u8DDD\u96E2", "\u30DE\u30A4\u30EB", "\u4E2D\u8DDD\u96E2", "\u9577\u8DDD\u96E2"]),
      "baseduration": "\u57FA\u6E96\u6301\u7D9A\u6642\u9593",
      "effectiveduration": "\u52B9\u679C\u6642\u9593\uFF08{{distance}}m\uFF09",
      "durationincrease": "{{n}}\u500D",
      "effects": "\u52B9\u679C",
      "grade": Object.freeze({ 100: "G1", 200: "G2", 300: "G3", 400: "OP", 700: "Pre-OP", 800: "Maiden", 900: "\u30C7\u30D3\u30E5\u30FC", 999: "\u6BCE\u65E5" }),
      "ground_condition": Object.freeze(["", "\u826F", "\u7A0D\u91CD", "\u91CD", "\u4E0D\u826F"]),
      "ground_type": Object.freeze(["", "\u829D", "\u30C0\u30FC\u30C8"]),
      "id": "ID: ",
      "meters": "{{n}}m",
      "motivation": Object.freeze(["", "\u7D76\u4E0D\u8ABF", "\u4E0D\u8ABF", "\u666E\u901A", "\u597D\u8ABF", "\u7D76\u597D\u8ABF"]),
      "order_rate": "\u30C1\u30E3\u30F3\u30DF\uFF1A{{cm}}\u3001\u30EA\u30B0\u30D2\uFF1A{{loh}}",
      "preconditions": "\u524D\u63D0\u6761\u4EF6",
      "rotation": Object.freeze(["", "\u53F3\u56DE\u308A", "\u5DE6\u56DE\u308A"]),
      "running_style": Object.freeze(["", "\u9003\u3052", "\u5148\u884C", "\u5DEE\u3057", "\u8FFD\u8FBC"]),
      "season": Object.freeze(["", "\u65E9\u6625", "\u590F", "\u79CB", "\u51AC", "\u6625"]),
      "seconds": "{{n}}s",
      "slope": Object.freeze(["\u5E73\u5730", "\u4E0A\u308A\u5742", "\u4E0B\u308A\u5742"]),
      "speed": "{{n}}m/s",
      "time": Object.freeze(["", "\u671D", "\u663C", "\u5915\u65B9", "\u591C"]),
      "weather": Object.freeze(["", "\u6674\u308C", "\u66C7\u308A", "\u96E8", "\u96EA"])
    })
  });
  var STRINGS_en = Object.freeze({
    "skillfilters": Object.freeze({
      "search": "Search by skill name or conditions",
      "white": "White skills",
      "gold": "Gold skills",
      "pink": "Evolved skills",
      "unique": "Unique skills",
      "inherit": "Inherited uniques",
      "nige": "Runner",
      "senkou": "Leader",
      "sasi": "Betweener",
      "oikomi": "Chaser",
      "short": "Short",
      "mile": "Mile",
      "medium": "Medium",
      "long": "Long",
      "turf": "Turf",
      "dirt": "Dirt",
      "phase0": "Opening leg",
      "phase1": "Middle leg",
      "phase2": "Final leg",
      "phase3": "Last spurt",
      "finalcorner": "Final corner",
      "finalstraight": "Final straight"
    }),
    "skilleffecttypes": Object.freeze({
      "1": "Speed up",
      "2": "Stamina up",
      "3": "Power up",
      "4": "Guts up",
      "5": "Wisdom up",
      "9": "Recovery",
      "21": "Current speed",
      "22": "Current speed with natural deceleration",
      "27": "Target speed",
      "28": "Lane movement speed",
      "31": "Acceleration",
      "37": "Activate random gold skill",
      "42": "Increase skill duration"
    }),
    "skilldetails": Object.freeze({
      "accel": "{{n}}m/s\xB2",
      "basinn": "{{n}} bashin",
      "conditions": "Conditions:",
      "distance_type": Object.freeze(["", "Short", "Mile", "Medium", "Long"]),
      "baseduration": "Base duration:",
      "effectiveduration": "Effective duration ({{distance}}m):",
      "durationincrease": "{{n}}\xD7",
      "effects": "Effects:",
      "grade": Object.freeze({ 100: "G1", 200: "G2", 300: "G3", 400: "OP", 700: "Pre-OP", 800: "Maiden", 900: "Debut", 999: "Daily races" }),
      "ground_condition": Object.freeze(["", "Good", "Yielding", "Soft", "Heavy"]),
      "ground_type": Object.freeze(["", "Turf", "Dirt"]),
      "id": "ID: ",
      "meters": "{{n}}m",
      "motivation": Object.freeze(["", "Terrible", "Bad", "Normal", "Good", "Perfect"]),
      "order_rate": "CM: {{cm}}, LOH: {{loh}}",
      "preconditions": "Preconditions:",
      "rotation": Object.freeze(["", "Clockwise", "Counterclockwise"]),
      "running_style": Object.freeze(["", "Runner", "Leader", "Betweener", "Chaser"]),
      "season": Object.freeze(["", "Early spring", "Summer", "Autumn", "Winter", "Late spring"]),
      "seconds": "{{n}}s",
      "slope": Object.freeze(["Flat", "Uphill", "Downhill"]),
      "speed": "{{n}}m/s",
      "time": Object.freeze(["", "Morning", "Mid day", "Evening", "Night"]),
      "weather": Object.freeze(["", "Sunny", "Cloudy", "Rainy", "Snowy"])
    })
  });
  function C3(s4) {
    return Parser.parseAny(Parser.tokenize(s4));
  }
  var filterOps = Object.freeze({
    "nige": [C3("running_style==1")],
    "senkou": [C3("running_style==2")],
    "sasi": [C3("running_style==3")],
    "oikomi": [C3("running_style==4")],
    "short": [C3("distance_type==1")],
    "mile": [C3("distance_type==2")],
    "medium": [C3("distance_type==3")],
    "long": [C3("distance_type==4")],
    "turf": [C3("ground_type==1")],
    "dirt": [C3("ground_type==2")],
    "phase0": [C3("phase==0"), C3("phase_random==0"), C3("phase_firsthalf_random==0"), C3("phase_laterhalf_random==0")],
    "phase1": [C3("phase==1"), C3("phase>=1"), C3("phase_random==1"), C3("phase_firsthalf_random==1"), C3("phase_laterhalf_random==1")],
    "phase2": [C3("phase==2"), C3("phase>=2"), C3("phase_random==2"), C3("phase_firsthalf_random==2"), C3("phase_laterhalf_random==2"), C3("phase_firstquarter_random==2"), C3("is_lastspurt==1")],
    "phase3": [C3("phase==3"), C3("phase_random==3"), C3("phase_firsthalf_random==3"), C3("phase_laterhalf_random==3")],
    "finalcorner": [C3("is_finalcorner==1"), C3("is_finalcorner_laterhalf==1"), C3("is_finalcorner_random==1")],
    "finalstraight": [C3("is_last_straight==1"), C3("is_last_straight_onetime==1")]
  });
  var parsedConditions = {};
  Object.keys(skill_data_default).forEach((id3) => {
    parsedConditions[id3] = skill_data_default[id3].alternatives.map((ef) => Parser.parse(Parser.tokenize(ef.condition)));
  });
  function matchRarity(id3, testRarity) {
    const r4 = skill_data_default[id3].rarity;
    switch (testRarity) {
      case "white":
        return r4 == 1 /* White */ && id3[0] != "9";
      case "gold":
        return r4 == 2 /* Gold */;
      case "pink":
        return r4 == 6 /* Evolution */;
      case "unique":
        return r4 > 2 /* Gold */ && r4 < 6 /* Evolution */;
      case "inherit":
        return id3[0] == "9";
      default:
        return true;
    }
  }
  var classnames = Object.freeze(["", "skill-white", "skill-gold", "skill-unique", "skill-unique", "skill-unique", "skill-pink"]);
  function Skill(props) {
    return /* @__PURE__ */ _("div", { class: `skill ${classnames[skill_data_default[props.id].rarity]} ${props.selected ? "selected" : ""}`, "data-skillid": props.id }, /* @__PURE__ */ _("img", { class: "skillIcon", src: `/uma-tools/icons/${skillmeta(props.id).iconId}.png` }), /* @__PURE__ */ _("span", { class: "skillName" }, /* @__PURE__ */ _(Text, { id: `skillnames.${props.id}` })), props.dismissable && /* @__PURE__ */ _("span", { class: "skillDismiss" }, "\u2715"));
  }
  function fmtSeconds(arg) {
    return /* @__PURE__ */ _(Text, { id: "skilldetails.seconds", plural: arg, fields: { n: arg } });
  }
  function fmtPercent(arg) {
    return `${arg}%`;
  }
  function fmtMeters(arg) {
    return /* @__PURE__ */ _(Text, { id: "skilldetails.meters", plural: arg, fields: { n: arg } });
  }
  function fmtString(strId) {
    return function(arg) {
      return /* @__PURE__ */ _(Tooltip, { title: arg.toString(), tall: useLanguage() == "ja" }, /* @__PURE__ */ _(Text, { id: `skilldetails.${strId}.${arg}` }));
    };
  }
  var conditionFormatters = new Proxy({
    accumulatetime: fmtSeconds,
    bashin_diff_behind(arg) {
      return /* @__PURE__ */ _(Localizer, null, /* @__PURE__ */ _(Tooltip, { title: /* @__PURE__ */ _(Text, { id: "skilldetails.meters", plural: arg * 2.5, fields: { n: arg * 2.5 } }) }, /* @__PURE__ */ _(Text, { id: "skilldetails.basinn", plural: arg, fields: { n: arg } })));
    },
    bashin_diff_infront(arg) {
      return /* @__PURE__ */ _(Localizer, null, /* @__PURE__ */ _(Tooltip, { title: /* @__PURE__ */ _(Text, { id: "skilldetails.meters", plural: arg * 2.5, fields: { n: arg * 2.5 } }) }, /* @__PURE__ */ _(Text, { id: "skilldetails.basinn", plural: arg, fields: { n: arg } })));
    },
    behind_near_lane_time: fmtSeconds,
    behind_near_lane_time_set1: fmtSeconds,
    blocked_all_continuetime: fmtSeconds,
    blocked_front_continuetime: fmtSeconds,
    blocked_side_continuetime: fmtSeconds,
    course_distance: fmtMeters,
    distance_diff_rate: fmtPercent,
    distance_diff_top(arg) {
      return /* @__PURE__ */ _(Localizer, null, /* @__PURE__ */ _(Tooltip, { title: /* @__PURE__ */ _(Text, { id: "skilldetails.basinn", plural: arg / 2.5, fields: { n: arg / 2.5 } }) }, /* @__PURE__ */ _(Text, { id: "skilldetails.meters", plural: arg, fields: { n: arg } })));
    },
    distance_diff_top_float(arg) {
      return /* @__PURE__ */ _(Localizer, null, /* @__PURE__ */ _(Tooltip, { title: /* @__PURE__ */ _(Text, { id: "skilldetails.basinn", plural: arg / 25, fields: { n: arg / 25 } }) }, /* @__PURE__ */ _(Text, { id: "skilldetails.meters", plural: arg, fields: { n: (arg / 10).toFixed(1) } })));
    },
    distance_rate: fmtPercent,
    distance_rate_after_random: fmtPercent,
    distance_type: fmtString("distance_type"),
    grade: fmtString("grade"),
    ground_condition: fmtString("ground_condition"),
    ground_type: fmtString("ground_type"),
    hp_per: fmtPercent,
    infront_near_lane_time: fmtSeconds,
    motivation: fmtString("motivation"),
    order_rate(arg) {
      return /* @__PURE__ */ _(Localizer, null, /* @__PURE__ */ _(Tooltip, { title: /* @__PURE__ */ _(Text, { id: "skilldetails.order_rate", fields: { cm: Math.round(arg / 100 * 9), loh: Math.round(arg / 100 * 12) } }) }, arg));
    },
    overtake_target_no_order_up_time: fmtSeconds,
    overtake_target_time: fmtSeconds,
    random_lot: fmtPercent,
    remain_distance: fmtMeters,
    rotation: fmtString("rotation"),
    running_style: fmtString("running_style"),
    season: fmtString("season"),
    slope: fmtString("slope"),
    time: fmtString("time"),
    track_id(arg) {
      return /* @__PURE__ */ _(Tooltip, { title: arg, tall: useLanguage() == "ja" }, /* @__PURE__ */ _(Text, { id: `tracknames.${arg}` }));
    },
    weather: fmtString("weather")
  }, {
    get(o5, prop) {
      if (o5.hasOwnProperty(prop)) {
        return { name: prop, formatArg: o5[prop] };
      }
      return {
        name: prop,
        formatArg(arg) {
          return arg.toString();
        }
      };
    }
  });
  var AndFormatter = class {
    constructor(left2, right2) {
      this.left = left2;
      this.right = right2;
    }
    format() {
      return /* @__PURE__ */ _(k, null, this.left.format(), /* @__PURE__ */ _("span", { class: "operatorAnd" }, "&"), this.right.format());
    }
  };
  var OrFormatter = class {
    constructor(left2, right2) {
      this.left = left2;
      this.right = right2;
    }
    format() {
      return /* @__PURE__ */ _(k, null, this.left.format(), /* @__PURE__ */ _("span", { class: "operatorOr" }, "@", /* @__PURE__ */ _("span", { class: "operatorOrText" }, "or")), this.right.format());
    }
  };
  function CmpFormatter(op) {
    return class {
      constructor(cond, arg) {
        this.cond = cond;
        this.arg = arg;
      }
      format() {
        return /* @__PURE__ */ _("div", { class: "condition" }, /* @__PURE__ */ _("span", { class: "conditionName" }, this.cond.name), /* @__PURE__ */ _("span", { class: "conditionOp" }, op), /* @__PURE__ */ _("span", { class: "conditionArg" }, this.cond.formatArg(this.arg)));
      }
    };
  }
  var FormatParser = getParser(conditionFormatters, {
    and: AndFormatter,
    or: OrFormatter,
    eq: CmpFormatter("=="),
    neq: CmpFormatter("!="),
    lt: CmpFormatter("<"),
    lte: CmpFormatter("<="),
    gt: CmpFormatter(">"),
    gte: CmpFormatter(">=")
  });
  function forceSign(n4) {
    return n4 <= 0 ? n4.toString() : "+" + n4;
  }
  var formatStat = forceSign;
  function formatSpeed(n4) {
    return /* @__PURE__ */ _(Text, { id: "skilldetails.speed", plural: n4, fields: { n: forceSign(n4) } });
  }
  var formatEffect = Object.freeze({
    1: formatStat,
    2: formatStat,
    3: formatStat,
    4: formatStat,
    5: formatStat,
    9: (n4) => `${(n4 * 100).toFixed(1)}%`,
    21: formatSpeed,
    22: formatSpeed,
    27: formatSpeed,
    31: (n4) => /* @__PURE__ */ _(Text, { id: "skilldetails.accel", plural: n4, fields: { n: forceSign(n4) } }),
    42: (n4) => /* @__PURE__ */ _(Text, { id: "skilldetails.durationincrease", plural: n4, fields: { n: n4 } })
  });
  function ExpandedSkillDetails(props) {
    const skill = skill_data_default[props.id];
    const lang = useLanguage();
    return /* @__PURE__ */ _(IntlProvider, { definition: lang == "ja" ? STRINGS_ja : STRINGS_en }, /* @__PURE__ */ _("div", { class: `expandedSkill ${classnames[skill.rarity]}`, "data-skillid": props.id }, /* @__PURE__ */ _("div", { class: "expandedSkillHeader" }, /* @__PURE__ */ _("img", { class: "skillIcon", src: `/uma-tools/icons/${skillmeta(props.id).iconId}.png` }), /* @__PURE__ */ _("span", { class: "skillName" }, /* @__PURE__ */ _(Text, { id: `skillnames.${props.id}` })), props.dismissable && /* @__PURE__ */ _("span", { class: "skillDismiss" }, "\u2715")), /* @__PURE__ */ _("div", { class: "skillDetails" }, /* @__PURE__ */ _("div", null, /* @__PURE__ */ _(Text, { id: "skilldetails.id" }), props.id), skill_data_default[props.id].alternatives.map(
      (alt) => /* @__PURE__ */ _("div", { class: "skillDetailsSection" }, alt.precondition.length > 0 && /* @__PURE__ */ _(k, null, /* @__PURE__ */ _(Text, { id: "skilldetails.preconditions" }), /* @__PURE__ */ _("div", { class: "skillConditions" }, FormatParser.parse(FormatParser.tokenize(alt.precondition)).format())), /* @__PURE__ */ _(Text, { id: "skilldetails.conditions" }), /* @__PURE__ */ _("div", { class: "skillConditions" }, FormatParser.parse(FormatParser.tokenize(alt.condition)).format()), /* @__PURE__ */ _(Text, { id: "skilldetails.effects" }), /* @__PURE__ */ _("div", { class: "skillEffects" }, alt.effects.map(
        (ef) => /* @__PURE__ */ _("div", { class: "skillEffect" }, /* @__PURE__ */ _("span", { class: "skillEffectType" }, /* @__PURE__ */ _(Text, { id: `skilleffecttypes.${ef.type}` }, ef.type)), /* @__PURE__ */ _("span", { class: "skillEffectValue" }, ef.type in formatEffect ? formatEffect[ef.type](ef.modifier / 1e4) : ef.modifier / 1e4))
      )), alt.baseDuration > 0 && /* @__PURE__ */ _("span", { class: "skillDuration" }, /* @__PURE__ */ _(Text, { id: "skilldetails.baseduration" }), " ", /* @__PURE__ */ _(Text, { id: "skilldetails.seconds", fields: { n: alt.baseDuration / 1e4 } })), props.distanceFactor && alt.baseDuration > 0 && /* @__PURE__ */ _("span", { class: "skillDuration" }, /* @__PURE__ */ _(Text, { id: "skilldetails.effectiveduration", fields: { distance: props.distanceFactor } }), " ", /* @__PURE__ */ _(Text, { id: "skilldetails.seconds", fields: { n: +(alt.baseDuration / 1e4 * (props.distanceFactor / 1e3)).toFixed(2) } })))
    ))));
  }
  var iconIdPrefixes = Object.freeze({
    "1001": ["1001"],
    "1002": ["1002", "2018"],
    "1003": ["1003"],
    "1004": ["1004"],
    "1005": ["1005"],
    "1006": ["1006"],
    "2002": ["2002", "2011"],
    "2001": ["2001", "2010", "2014", "2015", "2016", "2019", "2021"],
    "2004": ["2004", "2012", "2017", "2020"],
    "2005": ["2005", "2013"],
    "2006": ["2006"],
    "2009": ["2009"],
    "3001": ["3001"],
    "3002": ["3002"],
    "3004": ["3004"],
    "3005": ["3005"],
    "3007": ["3007"],
    "4001": ["4001"]
  });
  var groups_filters = Object.freeze({
    "rarity": ["white", "gold", "pink", "unique", "inherit"],
    "icontype": ["1001", "1002", "1003", "1004", "1005", "1006", "4001", "2002", "2001", "2004", "2005", "2006", "2009", "3001", "3002", "3004", "3005", "3007"],
    "strategy": ["nige", "senkou", "sasi", "oikomi"],
    "distance": ["short", "mile", "medium", "long"],
    "surface": ["turf", "dirt"],
    "location": ["phase0", "phase1", "phase2", "phase3", "finalcorner", "finalstraight"]
  });
  function textSearch(id3, searchText, searchConditions) {
    const needle = searchText.toUpperCase();
    if (skillnames_default[id3].some((s4) => s4.toUpperCase().indexOf(needle) > -1)) {
      return 1;
    } else if (searchConditions) {
      let op = null;
      try {
        op = C3(searchText);
      } catch (_3) {
        return 0;
      }
      return parsedConditions[id3].some((alt) => treeMatch(op, alt)) ? 2 : 0;
    } else {
      return 0;
    }
  }
  function SkillList(props) {
    const lang = useLanguage();
    const [visible, setVisible] = d2(() => new Set(props.ids));
    const active = {}, setActive = {};
    Object.keys(groups_filters).forEach((group) => {
      active[group] = {};
      setActive[group] = {};
      groups_filters[group].forEach((filter6) => {
        const [active_, setActive_] = d2(group == "icontype");
        active[group][filter6] = active_;
        setActive[group][filter6] = setActive_;
      });
    });
    const searchInput = A2(null);
    const [searchText, setSearchText] = d2("");
    y2(function() {
      if (props.isOpen && searchInput.current)
        searchInput.current.focus();
    }, [props.isOpen]);
    const selectedMap = new Map(Array.from(props.selected).map((id3) => [skillmeta(id3).groupId, id3]));
    function toggleSelected(e6) {
      const se2 = e6.target.closest("div.skill");
      if (se2 == null)
        return;
      e6.stopPropagation();
      const id3 = se2.dataset.skillid;
      const groupId = skillmeta(id3).groupId;
      const old = selectedMap.get(groupId) == id3;
      const newSelected = new Set(selectedMap.values());
      if (selectedMap.has(groupId)) {
        newSelected.delete(selectedMap.get(groupId));
      }
      newSelected.add(id3);
      props.setSelected(newSelected);
    }
    function updateFilters(e6) {
      if (e6.target.tagName != "BUTTON" && e6.target.tagName != "INPUT")
        return;
      e6.stopPropagation();
      const group = e6.target.parentElement.dataset.filterGroup;
      const filter6 = e6.target.dataset.filter;
      let newSearchText = searchText;
      if (group == "search") {
        newSearchText = e6.target.value;
        setSearchText(newSearchText);
      } else if (group == "icontype") {
        if (groups_filters.icontype.every((f4) => active.icontype[f4])) {
          groups_filters.icontype.forEach((f4) => f4 != filter6 && setActive.icontype[f4](active.icontype[f4] = false));
        } else {
          setActive.icontype[filter6](active.icontype[filter6] = !active.icontype[filter6]);
          if (!groups_filters.icontype.some((f4) => active.icontype[f4])) {
            groups_filters.icontype.forEach((f4) => setActive.icontype[f4](active.icontype[f4] = true));
          }
        }
      } else {
        setActive[group][filter6](active[group][filter6]);
        Object.keys(active[group]).forEach((k4) => setActive[group][k4](active[group][k4] = !active[group][k4] && k4 == filter6));
      }
      const filtered = /* @__PURE__ */ new Set();
      let allowConditionSearch = true;
      props.ids.forEach((id3) => {
        const passesTextSearch = newSearchText.length > 0 ? textSearch(id3, newSearchText, allowConditionSearch) : 3;
        if (allowConditionSearch && passesTextSearch == 1) {
          allowConditionSearch = false;
        }
        const pass = passesTextSearch && Object.keys(groups_filters).every((group2) => {
          const check = groups_filters[group2].filter((f4) => active[group2][f4]);
          if (check.length == 0)
            return true;
          if (group2 == "rarity")
            return check.some((f4) => matchRarity(id3, f4));
          else if (group2 == "icontype")
            return check.some((f4) => iconIdPrefixes[f4].some((p5) => skillmeta(id3).iconId.startsWith(p5)));
          return check.some((f4) => filterOps[f4].some((op) => parsedConditions[id3].some((alt) => treeMatch(op, alt))));
        });
        if (pass) {
          filtered.add(id3);
        }
      });
      setVisible(filtered);
    }
    function FilterGroup(props2) {
      return /* @__PURE__ */ _("div", { "data-filter-group": props2.group }, props2.children.map((c4) => J(c4, { group: props2.group })));
    }
    function FilterButton(props2) {
      return /* @__PURE__ */ _("button", { "data-filter": props2.filter, class: `filterButton ${active[props2.group][props2.filter] ? "active" : ""}` }, /* @__PURE__ */ _(Text, { id: `skillfilters.${props2.filter}` }));
    }
    function IconFilterButton(props2) {
      return /* @__PURE__ */ _("button", { "data-filter": props2.type, class: `iconFilterButton ${active[props2.group][props2.type] ? "active" : ""}`, style: `background-image:url(/uma-tools/icons/${props2.type}1.png)` });
    }
    const items = props.ids.map((id3) => /* @__PURE__ */ _("li", { key: id3, class: visible.has(id3) ? "" : "hidden" }, /* @__PURE__ */ _(Skill, { id: id3, selected: selectedMap.get(skillmeta(id3).groupId) == id3 })));
    return /* @__PURE__ */ _(IntlProvider, { definition: lang == "ja" ? STRINGS_ja : STRINGS_en }, /* @__PURE__ */ _("div", { class: "filterGroups", onClick: updateFilters }, /* @__PURE__ */ _("div", { "data-filter-group": "search" }, /* @__PURE__ */ _(Localizer, null, /* @__PURE__ */ _("input", { type: "text", class: "filterSearch", value: searchText, placeholder: /* @__PURE__ */ _(Text, { id: "skillfilters.search" }), onInput: updateFilters, ref: searchInput }))), /* @__PURE__ */ _(FilterGroup, { group: "rarity" }, /* @__PURE__ */ _(FilterButton, { filter: "white" }), /* @__PURE__ */ _(FilterButton, { filter: "gold" }), /* @__PURE__ */ _(FilterButton, { filter: "pink" }), /* @__PURE__ */ _(FilterButton, { filter: "unique" }), /* @__PURE__ */ _(FilterButton, { filter: "inherit" })), /* @__PURE__ */ _(FilterGroup, { group: "icontype" }, groups_filters["icontype"].map((t4) => /* @__PURE__ */ _(IconFilterButton, { type: t4 }))), /* @__PURE__ */ _(FilterGroup, { group: "strategy" }, /* @__PURE__ */ _(FilterButton, { filter: "nige" }), /* @__PURE__ */ _(FilterButton, { filter: "senkou" }), /* @__PURE__ */ _(FilterButton, { filter: "sasi" }), /* @__PURE__ */ _(FilterButton, { filter: "oikomi" })), /* @__PURE__ */ _(FilterGroup, { group: "distance" }, /* @__PURE__ */ _(FilterButton, { filter: "short" }), /* @__PURE__ */ _(FilterButton, { filter: "mile" }), /* @__PURE__ */ _(FilterButton, { filter: "medium" }), /* @__PURE__ */ _(FilterButton, { filter: "long" })), /* @__PURE__ */ _(FilterGroup, { group: "surface" }, /* @__PURE__ */ _(FilterButton, { filter: "turf" }), /* @__PURE__ */ _(FilterButton, { filter: "dirt" })), /* @__PURE__ */ _(FilterGroup, { group: "location" }, /* @__PURE__ */ _(FilterButton, { filter: "phase0" }), /* @__PURE__ */ _(FilterButton, { filter: "phase1" }), /* @__PURE__ */ _(FilterButton, { filter: "phase2" }), /* @__PURE__ */ _(FilterButton, { filter: "phase3" }), /* @__PURE__ */ _(FilterButton, { filter: "finalcorner" }), /* @__PURE__ */ _(FilterButton, { filter: "finalstraight" }))), /* @__PURE__ */ _("ul", { class: "skillList", onClick: toggleSelected }, items));
  }

  // tracknames.json
  var tracknames_default = {
    "10001": ["", "Sapporo"],
    "10002": ["", "Hakodate"],
    "10003": ["", "Niigata"],
    "10004": ["", "Fukushima"],
    "10005": ["", "Nakayama"],
    "10006": ["", "Tokyo"],
    "10007": ["", "Chukyo"],
    "10008": ["", "Kyoto"],
    "10009": ["", "Hanshin"],
    "10010": ["", "Kokura"],
    "10101": ["", "Ooi"]
  };

  // ../strings/common.ts
  var TRACKNAMES_ja = {};
  Object.keys(tracknames_default).forEach((k4) => TRACKNAMES_ja[k4] = tracknames_default[k4][0]);
  Object.freeze(TRACKNAMES_ja);
  var TRACKNAMES_en = {};
  Object.keys(tracknames_default).forEach((k4) => TRACKNAMES_en[k4] = tracknames_default[k4][1]);
  Object.freeze(TRACKNAMES_en);

  // ../components/RaceTrack.tsx
  var STRINGS_ja2 = Object.freeze({
    "racetrack": Object.freeze({
      "none": "\u200B",
      "inner": " \uFF08\u5185\uFF09",
      "outer": " \uFF08\u5916\uFF09",
      "outin": " \uFF08\u5916\u2192\u5185\uFF09",
      "orientation": Object.freeze(["", "\u53F3", "\u5DE6", "", "\u76F4"]),
      "turf": "\u829D",
      "dirt": "\u30C0\u30FC\u30C8",
      "straight": "\u76F4\u7DDA",
      "corner": "\u30B3\u30FC\u30CA\u30FC{{n}}",
      "uphill": "\u4E0A\u308A\u5742",
      "downhill": "\u4E0B\u308A\u5742",
      "phase0": "\u5E8F\u76E4",
      "phase1": "\u4E2D\u76E4",
      "phase2": "\u7D42\u76E4",
      "phase3": "\u30E9\u30B9\u30C8\u30B9\u30D1\u30FC\u30C8",
      "short": Object.freeze({
        "straight": "\u76F4",
        "corner": "\u30B3{{n}}",
        "uphill": "\u4E0A",
        "downhill": "\u4E0B"
      })
    }),
    "tracknames": TRACKNAMES_ja,
    "coursedesc": "{{surface}}{{distance}}m{{inout}}"
  });
  var STRINGS_en2 = Object.freeze({
    "racetrack": Object.freeze({
      "none": "\u200B",
      "inner": " (inner)",
      "outer": " (outer)",
      "outin": " (outer\u2192inner)",
      "orientation": Object.freeze(["", "(clockwise)", "(counterclockwise)", "", "(straight)"]),
      "turf": "Turf",
      "dirt": "Dirt",
      "straight": "Straight \u2192",
      "corner": "Corner \u2B8C{{n}}",
      "uphill": "Uphill \u2197",
      "downhill": "Downhill \u2198",
      "phase0": "Opening leg",
      "phase1": "Middle leg",
      "phase2": "Final leg",
      "phase3": "Last spurt",
      "short": Object.freeze({
        "straight": "\u2192",
        "corner": "\u2B8C{{n}}",
        "uphill": "\u2197",
        "downhill": "\u2198"
      })
    }),
    "tracknames": TRACKNAMES_en,
    "coursedesc": Object.freeze({
      // 1 = turf 2 = dirt
      "one": "{{distance}}m{{inout}}",
      "many": "{{surface}} {{distance}}m{{inout}}"
    })
  });
  var inoutKey = Object.freeze(["", "none", "inner", "outer", "outin"]);
  var coursesByTrack = function() {
    const o5 = /* @__PURE__ */ Object.create(null);
    Object.keys(course_data_default).forEach((cid) => {
      const tid = course_data_default[cid].raceTrackId;
      if (tid in o5) {
        o5[tid].push(+cid);
      } else {
        o5[tid] = [+cid];
      }
    });
    return Object.freeze(o5);
  }();
  function TrackSelect(props) {
    const lang = useLanguage();
    let [trackid, setTrackid] = d2(course_data_default[props.courseid].raceTrackId);
    const changeCourse = q2((e6) => props.setCourseid(+e6.target.value), [props.setCourseid]);
    function changeTrack(e6) {
      const newTrackId = +e6.target.value;
      setTrackid(newTrackId);
      props.setCourseid(coursesByTrack[newTrackId][0]);
    }
    return /* @__PURE__ */ _(IntlProvider, { definition: lang == "ja" ? STRINGS_ja2 : STRINGS_en2 }, /* @__PURE__ */ _("div", { class: "trackSelect" }, /* @__PURE__ */ _("select", { value: trackid, onChange: changeTrack, tabindex: props.tabindex }, Object.keys(tracknames_default).map((tid) => /* @__PURE__ */ _("option", { value: tid }, /* @__PURE__ */ _(Text, { id: `tracknames.${tid}` })))), /* @__PURE__ */ _("select", { value: props.courseid, onChange: changeCourse, tabindex: props.tabindex + 1 }, coursesByTrack[trackid].map(
      (cid) => /* @__PURE__ */ _("option", { value: cid }, /* @__PURE__ */ _(Text, { id: "coursedesc", plural: course_data_default[cid].surface, fields: {
        "distance": course_data_default[cid].distance,
        "inout": /* @__PURE__ */ _(Text, { id: `racetrack.${inoutKey[course_data_default[cid].course]}` }),
        "surface": /* @__PURE__ */ _(Text, { id: course_data_default[cid].surface == 1 /* Turf */ ? "racetrack.turf" : "racetrack.dirt" })
      } }))
    ))));
  }
  function DistanceMarker(props) {
    const y5 = props.up ? props.y - 11.5 : props.y;
    return /* @__PURE__ */ _(k, null, /* @__PURE__ */ _("text", { class: "distanceMarker", x: `${props.x}%`, y: `${y5 - (props.up ? -0.8 : 0.8)}%`, "font-size": "10px", "text-anchor": "middle", "dominant-baseline": props.up ? "hanging" : "auto", fill: "rgb(121,64,22)" }, `${props.d}m`), /* @__PURE__ */ _("line", { x1: `${props.x}%`, y1: `${y5}%`, x2: `${props.x}%`, y2: `${y5 + (props.up ? -2.5 : 2.5)}%`, stroke: "rgb(121,64,22)" }));
  }
  function SectionText(props) {
    return /* @__PURE__ */ _("text", { class: "sectionText", x: "50%", y: "50%", height: "40%", width: "100%", fill: "rgb(121,64,22)" }, /* @__PURE__ */ _(Text, { id: `racetrack${props.w < 0.085 ? ".short" : ""}.${props.id}`, fields: props.fields }));
  }
  function RaceTrack(props) {
    const lang = useLanguage();
    const course = CourseHelpers.getCourse(props.courseid);
    const xOffset = props.xOffset || 0, yOffset = props.yOffset || 0, xExtra = props.xExtra || 0, yExtra = props.yExtra || 0;
    function doMouseMove(e6) {
      const svg = e6.currentTarget;
      if (e6.offsetX < xOffset)
        return;
      const line = svg.querySelector(".mouseoverLine");
      const text = svg.querySelector(".mouseoverText");
      const w4 = svg.getBoundingClientRect().width - xOffset;
      const x5 = e6.offsetX - xOffset;
      const y5 = e6.offsetY - yOffset;
      line.setAttribute("x1", x5);
      line.setAttribute("x2", x5);
      text.setAttribute("x", x5 > w4 - 45 ? x5 - 45 : x5 + 5);
      text.setAttribute("y", y5);
      text.textContent = Math.round(x5 / w4 * course_data_default[svg.dataset.courseid].distance) + "m";
      props.mouseMove && props.mouseMove(x5 / w4);
    }
    function doMouseLeave(e6) {
      const svg = e6.currentTarget;
      const line = svg.querySelector(".mouseoverLine");
      const text = svg.querySelector(".mouseoverText");
      line.setAttribute("x1", -5);
      line.setAttribute("x2", -5);
      text.setAttribute("x", -5);
      text.setAttribute("y", -5);
      props.mouseLeave && props.mouseLeave();
    }
    const trackNameHeader = T2(
      () => /* @__PURE__ */ _("div", { class: "racetrackName" }, /* @__PURE__ */ _(Text, { id: `tracknames.${course.raceTrackId}` }), " ", /* @__PURE__ */ _(Text, { id: "coursedesc", plural: course.surface, fields: {
        "distance": course.distance,
        "inout": /* @__PURE__ */ _(Text, { id: `racetrack.${inoutKey[course_data_default[props.courseid].course]}` }),
        "surface": /* @__PURE__ */ _(Text, { id: course.surface == 1 /* Turf */ ? "racetrack.turf" : "racetrack.dirt" })
      } }), " ", /* @__PURE__ */ _(Text, { id: `racetrack.orientation.${course.turn}` })),
      [props.courseid]
    );
    const almostEverything = T2(function() {
      const flatLevel = 50;
      const [_3, highestPoint, lowestPoint] = course.slopes.reduce((x5, s4) => {
        const [last5, highest, lowest] = x5;
        const us2 = last5 + s4.slope / 1e4 * s4.length;
        if (us2 > highest) {
          return [us2, us2, lowest];
        } else if (us2 < lowest) {
          return [us2, highest, us2];
        } else {
          return [us2, highest, lowest];
        }
      }, [0, 1, 0]);
      const range = highestPoint - (lowestPoint + highestPoint > -30 ? 0 : lowestPoint);
      const full = course.slopes.slice();
      let lastEnd = 0;
      course.slopes.forEach((s4, i5) => {
        if (s4.start != lastEnd) {
          full.push({ start: lastEnd, length: s4.start - lastEnd, slope: 0 });
        }
        lastEnd = s4.start + s4.length;
      });
      if (lastEnd < course.distance) {
        full.push({ start: lastEnd, length: course.distance - lastEnd, slope: 0 });
      }
      full.sort((a5, b2) => a5.start - b2.start);
      const slopeEndHeights = [50];
      const slopes = full.reduce((elems, s4, i5) => {
        const lastEndHeight = slopeEndHeights[slopeEndHeights.length - 1];
        const thisEndHeight = lastEndHeight - s4.slope / 1e4 * s4.length / range * 40;
        slopeEndHeights.push(thisEndHeight);
        if (s4.slope == 0) {
          elems.push(/* @__PURE__ */ _("rect", { x: `${s4.start / course.distance * 100}%`, y: `${lastEndHeight * 0.262}%`, width: `${s4.length / course.distance * 100}%`, height: "26.2%", fill: "rgb(211,243,68)" }));
        } else {
          elems.push(
            /* @__PURE__ */ _("svg", { class: `hillArea ${s4.slope < 0 ? "downhill" : "uphill"}`, x: `${s4.start / course.distance * 100}%`, y: "0", width: `${s4.length / course.distance * 100}%`, height: "26.2%", viewBox: "0 0 100 100", preserveAspectRatio: "none" }, /* @__PURE__ */ _("polygon", { points: `0,${lastEndHeight} 0,100 100,100 100,${thisEndHeight}`, fill: "rgb(211,243,68)" }))
          );
        }
        return elems;
      }, []);
      const sections = course.straights.concat(course.corners.map((c4) => ({ start: c4.start, end: c4.start + c4.length }))).sort((a5, b2) => a5.start - b2.start);
      const phase1Start = Math.round(CourseHelpers.phaseStart(course.distance, 1)), phase2Start = Math.round(CourseHelpers.phaseStart(course.distance, 2)), phase3Start = Math.round(CourseHelpers.phaseStart(course.distance, 3));
      let upi = 0, downi = 0;
      return /* @__PURE__ */ _(k, null, slopes, /* @__PURE__ */ _("rect", { x: "0", y: "26.2%", width: "100%", height: "1.8%", fill: "rgb(140,170,10)" }), /* @__PURE__ */ _("svg", { class: "sectionsBg", x: "0", y: "28%", width: "100%", height: "18%" }, /* @__PURE__ */ _("rect", { x: "0", y: "0", height: "90%", width: "100%", fill: "rgb(239,229,241)" }), /* @__PURE__ */ _("rect", { x: "0", y: "90%", height: "10%", width: "100%", fill: "rgb(163,106,175)" })), course.slopes.map(
        (s4) => /* @__PURE__ */ _("svg", { class: "slope", x: `${s4.start / course.distance * 100}%`, y: "28%", width: `${s4.length / course.distance * 100}%`, height: "18%" }, /* @__PURE__ */ _("rect", { x: "0", y: "0", height: "90%", width: "100%", fill: s4.slope > 0 ? upi % 2 == 0 ? "rgb(234,207,147)" : "rgb(229,196,120)" : downi % 2 == 0 ? "rgb(82,195,184)" : "rgb(116,206,198)" }), /* @__PURE__ */ _("rect", { x: "0", y: "90%", height: "10%", width: "100%", fill: s4.slope > 0 ? upi++ % 2 == 0 ? "rgb(191,143,37)" : "rgb(175,132,33)" : downi++ % 2 == 0 ? "rgb(42,123,115)" : "rgb(50,142,134)" }), /* @__PURE__ */ _(SectionText, { id: s4.slope > 0 ? "uphill" : "downhill", w: s4.length / course.distance }))
      ), course.slopes.map((s4, i5) => {
        const nodes = [];
        let markedStart = false;
        if (s4.start != 0 && (i5 == 0 || s4.start != course.slopes[i5 - 1].start + course.slopes[i5 - 1].length)) {
          markedStart = true;
          nodes.push(/* @__PURE__ */ _(DistanceMarker, { d: s4.start, x: s4.start / course.distance * 100, y: 42, up: i5 > 0 && s4.start - (course.slopes[i5 - 1].start + course.slopes[i5 - 1].length) < course.distance * 0.05 }));
        }
        if (s4.start + s4.length != course.distance) {
          nodes.push(/* @__PURE__ */ _(DistanceMarker, { d: s4.start + s4.length, x: (s4.start + s4.length) / course.distance * 100, y: 42, up: markedStart && s4.length < course.distance * 0.05 }));
        }
        return /* @__PURE__ */ _(k, null, nodes);
      }), /* @__PURE__ */ _("svg", { class: "sectionsBg", x: "0", y: "46%", width: "100%", height: "18%" }, /* @__PURE__ */ _("rect", { x: "0", y: "0", height: "90%", width: "100%", fill: "rgb(232,232,232)" }), /* @__PURE__ */ _("rect", { x: "0", y: "90%", height: "10%", width: "100%", fill: "rgb(139,139,139)" })), course.straights.map(
        (s4, i5) => /* @__PURE__ */ _("svg", { class: "straight", x: `${s4.start / course.distance * 100}%`, y: "46%", width: `${(s4.end - s4.start) / course.distance * 100}%`, height: "18%" }, /* @__PURE__ */ _("rect", { x: "0", y: "0", height: "90%", width: "100%", fill: i5 % 2 == 0 ? "rgb(209,235,255)" : "rgb(185,224,255)" }), /* @__PURE__ */ _("rect", { x: "0", y: "90%", height: "10%", width: "100%", fill: i5 % 2 == 0 ? "rgb(23,154,255)" : "rgb(9,146,254)" }), /* @__PURE__ */ _(SectionText, { id: "straight", w: (s4.end - s4.start) / course.distance * 100 }))
      ), course.corners.map(
        (c4, i5) => /* @__PURE__ */ _("svg", { class: "corner", x: `${c4.start / course.distance * 100}%`, y: "46%", width: `${c4.length / course.distance * 100}%`, height: "18%" }, /* @__PURE__ */ _("rect", { x: "0", y: "0", height: "90%", width: "100%", fill: i5 % 2 == 0 ? "rgb(255,216,185)" : "rgb(254,228,209)" }), /* @__PURE__ */ _("rect", { x: "0", y: "90%", height: "10%", width: "100%", fill: i5 % 2 == 0 ? "rgb(254,117,9)" : "rgb(250,121,27)" }), /* @__PURE__ */ _(SectionText, { id: "corner", w: c4.length / course.distance, fields: { n: 4 - (course.corners.length - i5 - 1) % 4 } }))
      ), sections.map((s4, i5) => {
        const nodes = [];
        let markedStart = false;
        if (s4.start != 0 && (i5 == 0 || s4.start != sections[i5 - 1].end)) {
          markedStart = true;
          nodes.push(/* @__PURE__ */ _(DistanceMarker, { d: s4.start, x: s4.start / course.distance * 100, y: 60, up: i5 > 0 && s4.start - sections[i5 - 1].end < course.distance * 0.05 }));
        }
        if (s4.end != course.distance) {
          nodes.push(/* @__PURE__ */ _(DistanceMarker, { d: s4.end, x: s4.end / course.distance * 100, y: 60, up: markedStart && s4.end - s4.start < course.distance * 0.05 }));
        }
        return /* @__PURE__ */ _(k, null, nodes);
      }), /* @__PURE__ */ _("svg", { class: "phase phase0", x: "0", y: "64%", width: "16.67%", height: "18%" }, /* @__PURE__ */ _("rect", { x: "0", y: "0", height: "90%", width: "100%", fill: "rgb(0,154,111)" }), " ", /* @__PURE__ */ _("rect", { x: "0", y: "90%", height: "10%", width: "100%", fill: "rgb(0,92,66)" }), " ", /* @__PURE__ */ _(SectionText, { id: "phase0", w: 0.1667 })), /* @__PURE__ */ _("svg", { class: "phase phase1", x: "16.67%", y: "64%", width: "50%", height: "18%" }, /* @__PURE__ */ _("rect", { x: "0", y: "0", height: "90%", width: "100%", fill: "rgb(242,233,103)" }), " ", /* @__PURE__ */ _("rect", { x: "0", y: "90%", height: "10%", width: "100%", fill: "rgb(190,179,16)" }), " ", /* @__PURE__ */ _(SectionText, { id: "phase1", w: 0.5 })), /* @__PURE__ */ _("svg", { class: "phase phase2", x: "66.67%", y: "64%", width: "16.67%", height: "18%" }, /* @__PURE__ */ _("rect", { x: "0", y: "0", height: "90%", width: "100%", fill: "rgb(209,134,175)" }), " ", /* @__PURE__ */ _("rect", { x: "0", y: "90%", height: "10%", width: "100%", fill: "rgb(149,56,107)" }), " ", /* @__PURE__ */ _(SectionText, { id: "phase2", w: 0.1667 })), /* @__PURE__ */ _("svg", { class: "phase phase3", x: "83.33%", y: "64%", width: "16.67%", height: "18%" }, /* @__PURE__ */ _("rect", { x: "0", y: "0", height: "90%", width: "100%", fill: "rgb(199,109,159)" }), " ", /* @__PURE__ */ _("rect", { x: "0", y: "90%", height: "10%", width: "100%", fill: "rgb(133,51,96)" }), " ", /* @__PURE__ */ _(SectionText, { id: "phase3", w: 0.1667 })), /* @__PURE__ */ _(DistanceMarker, { d: phase1Start, x: "16.67", y: 78 }), /* @__PURE__ */ _(DistanceMarker, { d: phase2Start, x: "66.67", y: 78 }), /* @__PURE__ */ _(DistanceMarker, { d: phase3Start, x: "83.33", y: 78 }), /* @__PURE__ */ _("rect", { x: "0", y: "82%", height: "18%", width: "100%", fill: "rgb(228,235,240)" }), Array.from({ length: 25 }, (_4, i5) => i5).map((i5) => /* @__PURE__ */ _("line", { x1: `${i5 / 24 * 100}%`, y1: "96%", x2: `${i5 / 24 * 100}%`, y2: "100%", stroke: "rgb(107,145,173)", "stroke-width": i5 == 0 || i5 == 24 ? "4" : "2" })), Array.from({ length: 24 }, (_4, i5) => i5 + 1).map((i5) => /* @__PURE__ */ _("text", { x: `${(1 / 48 + (i5 - 1) / 24) * 100}%`, y: "91%", "font-size": "10px", "text-anchor": "middle", "dominant-baseline": "central", fill: "rgb(107,145,173)" }, i5)), /* @__PURE__ */ _("rect", { x: "0", y: "98.2%", height: "1.8%", width: "100%", fill: "rgb(107,145,173)" }));
    }, [props.courseid]);
    const regions = T2(function() {
      return props.regions.reduce((state, desc) => {
        if (desc.type == 0 /* Immediate */ && desc.regions.length > 0) {
          let x5 = desc.regions[0].start / course.distance * 100;
          while (state.seen.has(x5)) {
            x5 += (3 + +(x5 == 0)) / props.width * 100;
          }
          state.seen.add(x5);
          state.elem.push(/* @__PURE__ */ _("line", { x1: `${x5}%`, y1: "0", x2: `${x5}%`, y2: "100%", stroke: desc.color.stroke, "stroke-width": x5 == 0 ? 4 : 2 }));
        } else if (desc.type == 2 /* Textbox */) {
          const rects = desc.regions.map((r4) => {
            const x5 = r4.start / course.distance * 100;
            const w4 = (r4.end - r4.start) / course.distance * 100;
            let i5 = 0;
            while (i5 < 10) {
              if (state.rungs[i5].some(
                (b2) => r4.start >= b2.start && r4.start < b2.end || r4.end > b2.start && r4.end <= b2.end || b2.start >= r4.start && b2.start < r4.end || b2.end > r4.start && b2.end <= r4.end
              )) {
                ++i5;
              } else {
                break;
              }
            }
            state.rungs[i5].push(r4);
            const y5 = 90 - 10 * i5;
            return /* @__PURE__ */ _("svg", { class: "textbox", x: x5 + "%", y: y5 + "%", width: w4 + "%", height: "10%" }, /* @__PURE__ */ _("rect", { x: "0", y: "0", width: "100%", height: "100%", fill: desc.color.fill, stroke: desc.color.stroke }), /* @__PURE__ */ _("text", { x: "0", y: "50%", "font-size": "12px", "dominant-baseline": "central" }, desc.text));
          });
          state.elem.push(/* @__PURE__ */ _(k, null, rects));
        } else {
          state.elem.push(
            /* @__PURE__ */ _(k, null, desc.regions.map(
              (r4) => /* @__PURE__ */ _("rect", { x: `${r4.start / course.distance * 100}%`, y: `${100 - desc.height}%`, width: `${(r4.end - r4.start) / course.distance * 100}%`, height: `${desc.height}%`, fill: desc.color.fill, stroke: desc.color.stroke })
            ))
          );
        }
        return state;
      }, { seen: /* @__PURE__ */ new Set(), rungs: Array(10).fill(0).map((_3) => []), elem: [] }).elem;
    }, [props.regions, course.distance]);
    return /* @__PURE__ */ _(IntlProvider, { definition: lang == "ja" ? STRINGS_ja2 : STRINGS_en2 }, /* @__PURE__ */ _("div", { class: "racetrackWrapper", style: `width:${props.width + xOffset + xExtra}px` }, trackNameHeader, /* @__PURE__ */ _("svg", { version: "1.1", width: props.width + xOffset + xExtra, height: props.height + yOffset + yExtra, xmlns: "http://www.w3.org/2000/svg", class: "racetrackView", "data-courseid": props.courseid, onMouseMove: doMouseMove, onMouseLeave: doMouseLeave }, /* @__PURE__ */ _("svg", { x: props.xOffset, y: props.yOffset, width: props.width, height: props.height }, almostEverything, regions, /* @__PURE__ */ _("line", { class: "mouseoverLine", x1: "-5", y1: "0", x2: "-5", y2: "100%", stroke: "rgb(121,64,22)", "stroke-width": "2" }), /* @__PURE__ */ _("text", { class: "mouseoverText", x: "-5", y: "-5", fill: "rgb(121,64,22)" })), props.children)));
  }

  // ../node_modules/immutable-sorted/dist/immutable.es.js
  var DELETE2 = "delete";
  var SHIFT2 = 5;
  var SIZE2 = 1 << SHIFT2;
  var MASK2 = SIZE2 - 1;
  var NOT_SET2 = {};
  function MakeRef2() {
    return { value: false };
  }
  function SetRef2(ref) {
    if (ref) {
      ref.value = true;
    }
  }
  function GetRef(ref) {
    return ref.value;
  }
  function OwnerID2() {
  }
  function ensureSize2(iter) {
    if (iter.size === void 0) {
      iter.size = iter.__iterate(returnTrue2);
    }
    return iter.size;
  }
  function wrapIndex2(iter, index) {
    if (typeof index !== "number") {
      var uint32Index = index >>> 0;
      if ("" + uint32Index !== index || uint32Index === 4294967295) {
        return NaN;
      }
      index = uint32Index;
    }
    return index < 0 ? ensureSize2(iter) + index : index;
  }
  function returnTrue2() {
    return true;
  }
  function wholeSlice2(begin, end, size2) {
    return (begin === 0 && !isNeg2(begin) || size2 !== void 0 && begin <= -size2) && (end === void 0 || size2 !== void 0 && end >= size2);
  }
  function resolveBegin2(begin, size2) {
    return resolveIndex2(begin, size2, 0);
  }
  function resolveEnd2(end, size2) {
    return resolveIndex2(end, size2, size2);
  }
  function resolveIndex2(index, size2, defaultIndex) {
    return index === void 0 ? defaultIndex : isNeg2(index) ? size2 === Infinity ? size2 : Math.max(0, size2 + index) | 0 : size2 === void 0 || size2 === index ? index : Math.min(size2, index) | 0;
  }
  function isNeg2(value) {
    return value < 0 || value === 0 && 1 / value === -Infinity;
  }
  var IS_COLLECTION_SYMBOL2 = "@@__IMMUTABLE_ITERABLE__@@";
  function isCollection2(maybeCollection) {
    return Boolean(maybeCollection && maybeCollection[IS_COLLECTION_SYMBOL2]);
  }
  var IS_KEYED_SYMBOL2 = "@@__IMMUTABLE_KEYED__@@";
  function isKeyed2(maybeKeyed) {
    return Boolean(maybeKeyed && maybeKeyed[IS_KEYED_SYMBOL2]);
  }
  var IS_INDEXED_SYMBOL2 = "@@__IMMUTABLE_INDEXED__@@";
  function isIndexed2(maybeIndexed) {
    return Boolean(maybeIndexed && maybeIndexed[IS_INDEXED_SYMBOL2]);
  }
  function isAssociative2(maybeAssociative) {
    return isKeyed2(maybeAssociative) || isIndexed2(maybeAssociative);
  }
  var Collection3 = function Collection4(value) {
    return isCollection2(value) ? value : Seq2(value);
  };
  var KeyedCollection2 = function(Collection5) {
    function KeyedCollection3(value) {
      return isKeyed2(value) ? value : KeyedSeq2(value);
    }
    if (Collection5)
      KeyedCollection3.__proto__ = Collection5;
    KeyedCollection3.prototype = Object.create(Collection5 && Collection5.prototype);
    KeyedCollection3.prototype.constructor = KeyedCollection3;
    return KeyedCollection3;
  }(Collection3);
  var IndexedCollection2 = function(Collection5) {
    function IndexedCollection3(value) {
      return isIndexed2(value) ? value : IndexedSeq2(value);
    }
    if (Collection5)
      IndexedCollection3.__proto__ = Collection5;
    IndexedCollection3.prototype = Object.create(Collection5 && Collection5.prototype);
    IndexedCollection3.prototype.constructor = IndexedCollection3;
    return IndexedCollection3;
  }(Collection3);
  var SetCollection2 = function(Collection5) {
    function SetCollection3(value) {
      return isCollection2(value) && !isAssociative2(value) ? value : SetSeq2(value);
    }
    if (Collection5)
      SetCollection3.__proto__ = Collection5;
    SetCollection3.prototype = Object.create(Collection5 && Collection5.prototype);
    SetCollection3.prototype.constructor = SetCollection3;
    return SetCollection3;
  }(Collection3);
  Collection3.Keyed = KeyedCollection2;
  Collection3.Indexed = IndexedCollection2;
  Collection3.Set = SetCollection2;
  var IS_SEQ_SYMBOL2 = "@@__IMMUTABLE_SEQ__@@";
  function isSeq2(maybeSeq) {
    return Boolean(maybeSeq && maybeSeq[IS_SEQ_SYMBOL2]);
  }
  var IS_RECORD_SYMBOL2 = "@@__IMMUTABLE_RECORD__@@";
  function isRecord2(maybeRecord) {
    return Boolean(maybeRecord && maybeRecord[IS_RECORD_SYMBOL2]);
  }
  function isImmutable2(maybeImmutable) {
    return isCollection2(maybeImmutable) || isRecord2(maybeImmutable);
  }
  var IS_ORDERED_SYMBOL2 = "@@__IMMUTABLE_ORDERED__@@";
  function isOrdered2(maybeOrdered) {
    return Boolean(maybeOrdered && maybeOrdered[IS_ORDERED_SYMBOL2]);
  }
  var ITERATE_KEYS2 = 0;
  var ITERATE_VALUES2 = 1;
  var ITERATE_ENTRIES2 = 2;
  var REAL_ITERATOR_SYMBOL2 = typeof Symbol === "function" && Symbol.iterator;
  var FAUX_ITERATOR_SYMBOL2 = "@@iterator";
  var ITERATOR_SYMBOL2 = REAL_ITERATOR_SYMBOL2 || FAUX_ITERATOR_SYMBOL2;
  var Iterator3 = function Iterator4(next) {
    this.next = next;
  };
  Iterator3.prototype.toString = function toString5() {
    return "[Iterator]";
  };
  Iterator3.KEYS = ITERATE_KEYS2;
  Iterator3.VALUES = ITERATE_VALUES2;
  Iterator3.ENTRIES = ITERATE_ENTRIES2;
  Iterator3.prototype.inspect = Iterator3.prototype.toSource = function() {
    return this.toString();
  };
  Iterator3.prototype[ITERATOR_SYMBOL2] = function() {
    return this;
  };
  function iteratorValue2(type2, k4, v4, iteratorResult) {
    var value = type2 === 0 ? k4 : type2 === 1 ? v4 : [k4, v4];
    iteratorResult ? iteratorResult.value = value : iteratorResult = {
      value,
      done: false
    };
    return iteratorResult;
  }
  function iteratorDone2() {
    return { value: void 0, done: true };
  }
  function hasIterator2(maybeIterable) {
    return !!getIteratorFn2(maybeIterable);
  }
  function isIterator2(maybeIterator) {
    return maybeIterator && typeof maybeIterator.next === "function";
  }
  function getIterator2(iterable) {
    var iteratorFn = getIteratorFn2(iterable);
    return iteratorFn && iteratorFn.call(iterable);
  }
  function getIteratorFn2(iterable) {
    var iteratorFn = iterable && (REAL_ITERATOR_SYMBOL2 && iterable[REAL_ITERATOR_SYMBOL2] || iterable[FAUX_ITERATOR_SYMBOL2]);
    if (typeof iteratorFn === "function") {
      return iteratorFn;
    }
  }
  var hasOwnProperty2 = Object.prototype.hasOwnProperty;
  function isArrayLike2(value) {
    if (Array.isArray(value) || typeof value === "string") {
      return true;
    }
    return value && typeof value === "object" && Number.isInteger(value.length) && value.length >= 0 && (value.length === 0 ? (
      // Only {length: 0} is considered Array-like.
      Object.keys(value).length === 1
    ) : (
      // An object is only Array-like if it has a property where the last value
      // in the array-like may be found (which could be undefined).
      value.hasOwnProperty(value.length - 1)
    ));
  }
  var Seq2 = function(Collection$$1) {
    function Seq3(value) {
      return value === null || value === void 0 ? emptySequence2() : isImmutable2(value) ? value.toSeq() : seqFromValue2(value);
    }
    if (Collection$$1)
      Seq3.__proto__ = Collection$$1;
    Seq3.prototype = Object.create(Collection$$1 && Collection$$1.prototype);
    Seq3.prototype.constructor = Seq3;
    Seq3.prototype.toSeq = function toSeq5() {
      return this;
    };
    Seq3.prototype.toString = function toString9() {
      return this.__toString("Seq {", "}");
    };
    Seq3.prototype.cacheResult = function cacheResult() {
      if (!this._cache && this.__iterateUncached) {
        this._cache = this.entrySeq().toArray();
        this.size = this._cache.length;
      }
      return this;
    };
    Seq3.prototype.__iterate = function __iterate3(fn2, reverse5) {
      var this$1 = this;
      var cache = this._cache;
      if (cache) {
        var size2 = cache.length;
        var i5 = 0;
        while (i5 !== size2) {
          var entry = cache[reverse5 ? size2 - ++i5 : i5++];
          if (fn2(entry[1], entry[0], this$1) === false) {
            break;
          }
        }
        return i5;
      }
      return this.__iterateUncached(fn2, reverse5);
    };
    Seq3.prototype.__iterator = function __iterator3(type2, reverse5) {
      var cache = this._cache;
      if (cache) {
        var size2 = cache.length;
        var i5 = 0;
        return new Iterator3(function() {
          if (i5 === size2) {
            return iteratorDone2();
          }
          var entry = cache[reverse5 ? size2 - ++i5 : i5++];
          return iteratorValue2(type2, entry[0], entry[1]);
        });
      }
      return this.__iteratorUncached(type2, reverse5);
    };
    return Seq3;
  }(Collection3);
  var KeyedSeq2 = function(Seq3) {
    function KeyedSeq3(value) {
      return value === null || value === void 0 ? emptySequence2().toKeyedSeq() : isCollection2(value) ? isKeyed2(value) ? value.toSeq() : value.fromEntrySeq() : isRecord2(value) ? value.toSeq() : keyedSeqFromValue2(value);
    }
    if (Seq3)
      KeyedSeq3.__proto__ = Seq3;
    KeyedSeq3.prototype = Object.create(Seq3 && Seq3.prototype);
    KeyedSeq3.prototype.constructor = KeyedSeq3;
    KeyedSeq3.prototype.toKeyedSeq = function toKeyedSeq5() {
      return this;
    };
    return KeyedSeq3;
  }(Seq2);
  var IndexedSeq2 = function(Seq3) {
    function IndexedSeq3(value) {
      return value === null || value === void 0 ? emptySequence2() : isCollection2(value) ? isKeyed2(value) ? value.entrySeq() : value.toIndexedSeq() : isRecord2(value) ? value.toSeq().entrySeq() : indexedSeqFromValue2(value);
    }
    if (Seq3)
      IndexedSeq3.__proto__ = Seq3;
    IndexedSeq3.prototype = Object.create(Seq3 && Seq3.prototype);
    IndexedSeq3.prototype.constructor = IndexedSeq3;
    IndexedSeq3.of = function of() {
      return IndexedSeq3(arguments);
    };
    IndexedSeq3.prototype.toIndexedSeq = function toIndexedSeq3() {
      return this;
    };
    IndexedSeq3.prototype.toString = function toString9() {
      return this.__toString("Seq [", "]");
    };
    return IndexedSeq3;
  }(Seq2);
  var SetSeq2 = function(Seq3) {
    function SetSeq3(value) {
      return (isCollection2(value) && !isAssociative2(value) ? value : IndexedSeq2(value)).toSetSeq();
    }
    if (Seq3)
      SetSeq3.__proto__ = Seq3;
    SetSeq3.prototype = Object.create(Seq3 && Seq3.prototype);
    SetSeq3.prototype.constructor = SetSeq3;
    SetSeq3.of = function of() {
      return SetSeq3(arguments);
    };
    SetSeq3.prototype.toSetSeq = function toSetSeq3() {
      return this;
    };
    return SetSeq3;
  }(Seq2);
  Seq2.isSeq = isSeq2;
  Seq2.Keyed = KeyedSeq2;
  Seq2.Set = SetSeq2;
  Seq2.Indexed = IndexedSeq2;
  Seq2.prototype[IS_SEQ_SYMBOL2] = true;
  var ArraySeq2 = function(IndexedSeq3) {
    function ArraySeq3(array3) {
      this._array = array3;
      this.size = array3.length;
    }
    if (IndexedSeq3)
      ArraySeq3.__proto__ = IndexedSeq3;
    ArraySeq3.prototype = Object.create(IndexedSeq3 && IndexedSeq3.prototype);
    ArraySeq3.prototype.constructor = ArraySeq3;
    ArraySeq3.prototype.get = function get24(index, notSetValue) {
      return this.has(index) ? this._array[wrapIndex2(this, index)] : notSetValue;
    };
    ArraySeq3.prototype.__iterate = function __iterate3(fn2, reverse5) {
      var this$1 = this;
      var array3 = this._array;
      var size2 = array3.length;
      var i5 = 0;
      while (i5 !== size2) {
        var ii2 = reverse5 ? size2 - ++i5 : i5++;
        if (fn2(array3[ii2], ii2, this$1) === false) {
          break;
        }
      }
      return i5;
    };
    ArraySeq3.prototype.__iterator = function __iterator3(type2, reverse5) {
      var array3 = this._array;
      var size2 = array3.length;
      var i5 = 0;
      return new Iterator3(function() {
        if (i5 === size2) {
          return iteratorDone2();
        }
        var ii2 = reverse5 ? size2 - ++i5 : i5++;
        return iteratorValue2(type2, ii2, array3[ii2]);
      });
    };
    return ArraySeq3;
  }(IndexedSeq2);
  var ObjectSeq2 = function(KeyedSeq3) {
    function ObjectSeq3(object) {
      var keys3 = Object.keys(object);
      this._object = object;
      this._keys = keys3;
      this.size = keys3.length;
    }
    if (KeyedSeq3)
      ObjectSeq3.__proto__ = KeyedSeq3;
    ObjectSeq3.prototype = Object.create(KeyedSeq3 && KeyedSeq3.prototype);
    ObjectSeq3.prototype.constructor = ObjectSeq3;
    ObjectSeq3.prototype.get = function get24(key, notSetValue) {
      if (notSetValue !== void 0 && !this.has(key)) {
        return notSetValue;
      }
      return this._object[key];
    };
    ObjectSeq3.prototype.has = function has9(key) {
      return hasOwnProperty2.call(this._object, key);
    };
    ObjectSeq3.prototype.__iterate = function __iterate3(fn2, reverse5) {
      var this$1 = this;
      var object = this._object;
      var keys3 = this._keys;
      var size2 = keys3.length;
      var i5 = 0;
      while (i5 !== size2) {
        var key = keys3[reverse5 ? size2 - ++i5 : i5++];
        if (fn2(object[key], key, this$1) === false) {
          break;
        }
      }
      return i5;
    };
    ObjectSeq3.prototype.__iterator = function __iterator3(type2, reverse5) {
      var object = this._object;
      var keys3 = this._keys;
      var size2 = keys3.length;
      var i5 = 0;
      return new Iterator3(function() {
        if (i5 === size2) {
          return iteratorDone2();
        }
        var key = keys3[reverse5 ? size2 - ++i5 : i5++];
        return iteratorValue2(type2, key, object[key]);
      });
    };
    return ObjectSeq3;
  }(KeyedSeq2);
  ObjectSeq2.prototype[IS_ORDERED_SYMBOL2] = true;
  var CollectionSeq2 = function(IndexedSeq3) {
    function CollectionSeq3(collection) {
      this._collection = collection;
      this.size = collection.length || collection.size;
    }
    if (IndexedSeq3)
      CollectionSeq3.__proto__ = IndexedSeq3;
    CollectionSeq3.prototype = Object.create(IndexedSeq3 && IndexedSeq3.prototype);
    CollectionSeq3.prototype.constructor = CollectionSeq3;
    CollectionSeq3.prototype.__iterateUncached = function __iterateUncached(fn2, reverse5) {
      var this$1 = this;
      if (reverse5) {
        return this.cacheResult().__iterate(fn2, reverse5);
      }
      var collection = this._collection;
      var iterator = getIterator2(collection);
      var iterations = 0;
      if (isIterator2(iterator)) {
        var step;
        while (!(step = iterator.next()).done) {
          if (fn2(step.value, iterations++, this$1) === false) {
            break;
          }
        }
      }
      return iterations;
    };
    CollectionSeq3.prototype.__iteratorUncached = function __iteratorUncached(type2, reverse5) {
      if (reverse5) {
        return this.cacheResult().__iterator(type2, reverse5);
      }
      var collection = this._collection;
      var iterator = getIterator2(collection);
      if (!isIterator2(iterator)) {
        return new Iterator3(iteratorDone2);
      }
      var iterations = 0;
      return new Iterator3(function() {
        var step = iterator.next();
        return step.done ? step : iteratorValue2(type2, iterations++, step.value);
      });
    };
    return CollectionSeq3;
  }(IndexedSeq2);
  var EMPTY_SEQ2;
  function emptySequence2() {
    return EMPTY_SEQ2 || (EMPTY_SEQ2 = new ArraySeq2([]));
  }
  function keyedSeqFromValue2(value) {
    var seq = Array.isArray(value) ? new ArraySeq2(value) : hasIterator2(value) ? new CollectionSeq2(value) : void 0;
    if (seq) {
      return seq.fromEntrySeq();
    }
    if (typeof value === "object") {
      return new ObjectSeq2(value);
    }
    throw new TypeError(
      "Expected Array or collection object of [k, v] entries, or keyed object: " + value
    );
  }
  function indexedSeqFromValue2(value) {
    var seq = maybeIndexedSeqFromValue2(value);
    if (seq) {
      return seq;
    }
    throw new TypeError(
      "Expected Array or collection object of values: " + value
    );
  }
  function seqFromValue2(value) {
    var seq = maybeIndexedSeqFromValue2(value);
    if (seq) {
      return seq;
    }
    if (typeof value === "object") {
      return new ObjectSeq2(value);
    }
    throw new TypeError(
      "Expected Array or collection object of values, or keyed object: " + value
    );
  }
  function maybeIndexedSeqFromValue2(value) {
    return isArrayLike2(value) ? new ArraySeq2(value) : hasIterator2(value) ? new CollectionSeq2(value) : void 0;
  }
  var IS_MAP_SYMBOL2 = "@@__IMMUTABLE_MAP__@@";
  function isMap2(maybeMap) {
    return Boolean(maybeMap && maybeMap[IS_MAP_SYMBOL2]);
  }
  function isOrderedMap2(maybeOrderedMap) {
    return isMap2(maybeOrderedMap) && isOrdered2(maybeOrderedMap);
  }
  function isValueObject2(maybeValue) {
    return Boolean(
      maybeValue && typeof maybeValue.equals === "function" && typeof maybeValue.hashCode === "function"
    );
  }
  function is2(valueA, valueB) {
    if (valueA === valueB || valueA !== valueA && valueB !== valueB) {
      return true;
    }
    if (!valueA || !valueB) {
      return false;
    }
    if (typeof valueA.valueOf === "function" && typeof valueB.valueOf === "function") {
      valueA = valueA.valueOf();
      valueB = valueB.valueOf();
      if (valueA === valueB || valueA !== valueA && valueB !== valueB) {
        return true;
      }
      if (!valueA || !valueB) {
        return false;
      }
    }
    return !!(isValueObject2(valueA) && isValueObject2(valueB) && valueA.equals(valueB));
  }
  var IS_SORTED_SYMBOL = "@@__IMMUTABLE_SORTED__@@";
  function isSorted(maybeSorted) {
    return Boolean(maybeSorted && maybeSorted[IS_SORTED_SYMBOL]);
  }
  var imul3 = typeof Math.imul === "function" && Math.imul(4294967295, 2) === -2 ? Math.imul : function imul4(a5, b2) {
    a5 |= 0;
    b2 |= 0;
    var c4 = a5 & 65535;
    var d4 = b2 & 65535;
    return c4 * d4 + ((a5 >>> 16) * d4 + c4 * (b2 >>> 16) << 16 >>> 0) | 0;
  };
  function smi2(i32) {
    return i32 >>> 1 & 1073741824 | i32 & 3221225471;
  }
  var defaultValueOf2 = Object.prototype.valueOf;
  function hash2(o5) {
    switch (typeof o5) {
      case "boolean":
        return o5 ? 1108378657 : 1108378656;
      case "number":
        return hashNumber2(o5);
      case "string":
        return o5.length > STRING_HASH_CACHE_MIN_STRLEN2 ? cachedHashString2(o5) : hashString2(o5);
      case "object":
      case "function":
        if (o5 === null) {
          return 1108378658;
        }
        if (typeof o5.hashCode === "function") {
          return smi2(o5.hashCode(o5));
        }
        if (o5.valueOf !== defaultValueOf2 && typeof o5.valueOf === "function") {
          o5 = o5.valueOf(o5);
        }
        return hashJSObj2(o5);
      case "undefined":
        return 1108378659;
      default:
        if (typeof o5.toString === "function") {
          return hashString2(o5.toString());
        }
        throw new Error("Value type " + typeof o5 + " cannot be hashed.");
    }
  }
  function hashNumber2(n4) {
    if (n4 !== n4 || n4 === Infinity) {
      return 0;
    }
    var hash3 = n4 | 0;
    if (hash3 !== n4) {
      hash3 ^= n4 * 4294967295;
    }
    while (n4 > 4294967295) {
      n4 /= 4294967295;
      hash3 ^= n4;
    }
    return smi2(hash3);
  }
  function cachedHashString2(string) {
    var hashed = stringHashCache2[string];
    if (hashed === void 0) {
      hashed = hashString2(string);
      if (STRING_HASH_CACHE_SIZE2 === STRING_HASH_CACHE_MAX_SIZE2) {
        STRING_HASH_CACHE_SIZE2 = 0;
        stringHashCache2 = {};
      }
      STRING_HASH_CACHE_SIZE2++;
      stringHashCache2[string] = hashed;
    }
    return hashed;
  }
  function hashString2(string) {
    var hashed = 0;
    for (var ii2 = 0; ii2 < string.length; ii2++) {
      hashed = 31 * hashed + string.charCodeAt(ii2) | 0;
    }
    return smi2(hashed);
  }
  function hashJSObj2(obj) {
    var hashed;
    if (usingWeakMap2) {
      hashed = weakMap2.get(obj);
      if (hashed !== void 0) {
        return hashed;
      }
    }
    hashed = obj[UID_HASH_KEY2];
    if (hashed !== void 0) {
      return hashed;
    }
    if (!canDefineProperty2) {
      hashed = obj.propertyIsEnumerable && obj.propertyIsEnumerable[UID_HASH_KEY2];
      if (hashed !== void 0) {
        return hashed;
      }
      hashed = getIENodeHash2(obj);
      if (hashed !== void 0) {
        return hashed;
      }
    }
    hashed = ++objHashUID;
    if (objHashUID & 1073741824) {
      objHashUID = 0;
    }
    if (usingWeakMap2) {
      weakMap2.set(obj, hashed);
    } else if (isExtensible2 !== void 0 && isExtensible2(obj) === false) {
      throw new Error("Non-extensible objects are not allowed as keys.");
    } else if (canDefineProperty2) {
      Object.defineProperty(obj, UID_HASH_KEY2, {
        enumerable: false,
        configurable: false,
        writable: false,
        value: hashed
      });
    } else if (obj.propertyIsEnumerable !== void 0 && obj.propertyIsEnumerable === obj.constructor.prototype.propertyIsEnumerable) {
      obj.propertyIsEnumerable = function() {
        return this.constructor.prototype.propertyIsEnumerable.apply(
          this,
          arguments
        );
      };
      obj.propertyIsEnumerable[UID_HASH_KEY2] = hashed;
    } else if (obj.nodeType !== void 0) {
      obj[UID_HASH_KEY2] = hashed;
    } else {
      throw new Error("Unable to set a non-enumerable property on object.");
    }
    return hashed;
  }
  var isExtensible2 = Object.isExtensible;
  var canDefineProperty2 = function() {
    try {
      Object.defineProperty({}, "@", {});
      return true;
    } catch (e6) {
      return false;
    }
  }();
  function getIENodeHash2(node) {
    if (node && node.nodeType > 0) {
      switch (node.nodeType) {
        case 1:
          return node.uniqueID;
        case 9:
          return node.documentElement && node.documentElement.uniqueID;
      }
    }
  }
  var usingWeakMap2 = typeof WeakMap === "function";
  var weakMap2;
  if (usingWeakMap2) {
    weakMap2 = /* @__PURE__ */ new WeakMap();
  }
  var objHashUID = 0;
  var UID_HASH_KEY2 = "__immutablehash__";
  if (typeof Symbol === "function") {
    UID_HASH_KEY2 = Symbol(UID_HASH_KEY2);
  }
  var STRING_HASH_CACHE_MIN_STRLEN2 = 16;
  var STRING_HASH_CACHE_MAX_SIZE2 = 255;
  var STRING_HASH_CACHE_SIZE2 = 0;
  var stringHashCache2 = {};
  var swap = function(array3, i5, j4) {
    var tmp = array3[i5];
    array3[i5] = array3[j4];
    array3[j4] = tmp;
  };
  var sampleThreshold = 1e3;
  var sampleReach = 0.5;
  var quickSelectRange = function(array3, left2, right2, k4, comparator) {
    if (k4 < left2 || k4 > right2) {
      return;
    }
    while (right2 > left2) {
      if (right2 - left2 > sampleThreshold) {
        var n4 = right2 - left2 + 1;
        var i5 = k4 - left2 + 1;
        var z4 = Math.log(n4);
        var s4 = sampleReach * Math.exp(2 * z4 / 3);
        var sd = 0.5 * Math.sqrt(z4 * s4 * (n4 - s4) / n4) * Math.sign(i5 - n4 / 2);
        var newLeft = Math.max(left2, Math.floor(k4 - i5 * s4 / n4 + sd));
        var newRight = Math.min(right2, Math.floor(k4 + (n4 - i5) * s4 / n4 + sd));
        quickSelectRange(array3, newLeft, newRight, k4, comparator);
      }
      var t4 = array3[k4];
      var i$1 = left2;
      var j4 = right2;
      swap(array3, left2, k4);
      if (comparator(array3[right2], t4) > 0) {
        swap(array3, right2, left2);
      }
      while (i$1 < j4) {
        swap(array3, i$1++, j4--);
        while (comparator(array3[i$1], t4) < 0) {
          i$1++;
        }
        while (comparator(array3[j4], t4) > 0) {
          j4--;
        }
      }
      if (array3[left2] === t4) {
        swap(array3, left2, j4);
      } else {
        swap(array3, ++j4, right2);
      }
      if (j4 <= k4) {
        left2 = j4 + 1;
      }
      if (k4 <= j4) {
        right2 = j4 - 1;
      }
    }
  };
  var quickSelect = function(array3, k4, comparator) {
    if (!comparator) {
      comparator = function(a5, b2) {
        return a5 > b2 ? 1 : a5 < b2 ? -1 : 0;
      };
    }
    quickSelectRange(array3, 0, array3.length - 1, k4, comparator);
  };
  var ToKeyedSequence2 = function(KeyedSeq$$1) {
    function ToKeyedSequence3(indexed, useKeys) {
      this._iter = indexed;
      this._useKeys = useKeys;
      this.size = indexed.size;
    }
    if (KeyedSeq$$1)
      ToKeyedSequence3.__proto__ = KeyedSeq$$1;
    ToKeyedSequence3.prototype = Object.create(KeyedSeq$$1 && KeyedSeq$$1.prototype);
    ToKeyedSequence3.prototype.constructor = ToKeyedSequence3;
    ToKeyedSequence3.prototype.get = function get24(key, notSetValue) {
      return this._iter.get(key, notSetValue);
    };
    ToKeyedSequence3.prototype.has = function has9(key) {
      return this._iter.has(key);
    };
    ToKeyedSequence3.prototype.valueSeq = function valueSeq3() {
      return this._iter.valueSeq();
    };
    ToKeyedSequence3.prototype.reverse = function reverse5() {
      var this$1 = this;
      var reversedSequence = reverseFactory2(this, true);
      if (!this._useKeys) {
        reversedSequence.valueSeq = function() {
          return this$1._iter.toSeq().reverse();
        };
      }
      return reversedSequence;
    };
    ToKeyedSequence3.prototype.map = function map5(mapper, context) {
      var this$1 = this;
      var mappedSequence = mapFactory2(this, mapper, context);
      if (!this._useKeys) {
        mappedSequence.valueSeq = function() {
          return this$1._iter.toSeq().map(mapper, context);
        };
      }
      return mappedSequence;
    };
    ToKeyedSequence3.prototype.__iterate = function __iterate3(fn2, reverse5) {
      var this$1 = this;
      return this._iter.__iterate(function(v4, k4) {
        return fn2(v4, k4, this$1);
      }, reverse5);
    };
    ToKeyedSequence3.prototype.__iterator = function __iterator3(type2, reverse5) {
      return this._iter.__iterator(type2, reverse5);
    };
    return ToKeyedSequence3;
  }(KeyedSeq2);
  ToKeyedSequence2.prototype[IS_ORDERED_SYMBOL2] = true;
  var ToIndexedSequence2 = function(IndexedSeq$$1) {
    function ToIndexedSequence3(iter) {
      this._iter = iter;
      this.size = iter.size;
    }
    if (IndexedSeq$$1)
      ToIndexedSequence3.__proto__ = IndexedSeq$$1;
    ToIndexedSequence3.prototype = Object.create(IndexedSeq$$1 && IndexedSeq$$1.prototype);
    ToIndexedSequence3.prototype.constructor = ToIndexedSequence3;
    ToIndexedSequence3.prototype.includes = function includes5(value) {
      return this._iter.includes(value);
    };
    ToIndexedSequence3.prototype.__iterate = function __iterate3(fn2, reverse5) {
      var this$1 = this;
      var i5 = 0;
      reverse5 && ensureSize2(this);
      return this._iter.__iterate(
        function(v4) {
          return fn2(v4, reverse5 ? this$1.size - ++i5 : i5++, this$1);
        },
        reverse5
      );
    };
    ToIndexedSequence3.prototype.__iterator = function __iterator3(type2, reverse5) {
      var this$1 = this;
      var iterator = this._iter.__iterator(ITERATE_VALUES2, reverse5);
      var i5 = 0;
      reverse5 && ensureSize2(this);
      return new Iterator3(function() {
        var step = iterator.next();
        return step.done ? step : iteratorValue2(
          type2,
          reverse5 ? this$1.size - ++i5 : i5++,
          step.value,
          step
        );
      });
    };
    return ToIndexedSequence3;
  }(IndexedSeq2);
  var ToSetSequence2 = function(SetSeq$$1) {
    function ToSetSequence3(iter) {
      this._iter = iter;
      this.size = iter.size;
    }
    if (SetSeq$$1)
      ToSetSequence3.__proto__ = SetSeq$$1;
    ToSetSequence3.prototype = Object.create(SetSeq$$1 && SetSeq$$1.prototype);
    ToSetSequence3.prototype.constructor = ToSetSequence3;
    ToSetSequence3.prototype.has = function has9(key) {
      return this._iter.includes(key);
    };
    ToSetSequence3.prototype.__iterate = function __iterate3(fn2, reverse5) {
      var this$1 = this;
      return this._iter.__iterate(function(v4) {
        return fn2(v4, v4, this$1);
      }, reverse5);
    };
    ToSetSequence3.prototype.__iterator = function __iterator3(type2, reverse5) {
      var iterator = this._iter.__iterator(ITERATE_VALUES2, reverse5);
      return new Iterator3(function() {
        var step = iterator.next();
        return step.done ? step : iteratorValue2(type2, step.value, step.value, step);
      });
    };
    return ToSetSequence3;
  }(SetSeq2);
  var FromEntriesSequence2 = function(KeyedSeq$$1) {
    function FromEntriesSequence3(entries5) {
      this._iter = entries5;
      this.size = entries5.size;
    }
    if (KeyedSeq$$1)
      FromEntriesSequence3.__proto__ = KeyedSeq$$1;
    FromEntriesSequence3.prototype = Object.create(KeyedSeq$$1 && KeyedSeq$$1.prototype);
    FromEntriesSequence3.prototype.constructor = FromEntriesSequence3;
    FromEntriesSequence3.prototype.entrySeq = function entrySeq3() {
      return this._iter.toSeq();
    };
    FromEntriesSequence3.prototype.__iterate = function __iterate3(fn2, reverse5) {
      var this$1 = this;
      return this._iter.__iterate(function(entry) {
        if (entry) {
          validateEntry2(entry);
          var indexedCollection = isCollection2(entry);
          return fn2(
            indexedCollection ? entry.get(1) : entry[1],
            indexedCollection ? entry.get(0) : entry[0],
            this$1
          );
        }
      }, reverse5);
    };
    FromEntriesSequence3.prototype.__iterator = function __iterator3(type2, reverse5) {
      var iterator = this._iter.__iterator(ITERATE_VALUES2, reverse5);
      return new Iterator3(function() {
        while (true) {
          var step = iterator.next();
          if (step.done) {
            return step;
          }
          var entry = step.value;
          if (entry) {
            validateEntry2(entry);
            var indexedCollection = isCollection2(entry);
            return iteratorValue2(
              type2,
              indexedCollection ? entry.get(0) : entry[0],
              indexedCollection ? entry.get(1) : entry[1],
              step
            );
          }
        }
      });
    };
    return FromEntriesSequence3;
  }(KeyedSeq2);
  ToIndexedSequence2.prototype.cacheResult = ToKeyedSequence2.prototype.cacheResult = ToSetSequence2.prototype.cacheResult = FromEntriesSequence2.prototype.cacheResult = cacheResultThrough2;
  function flipFactory2(collection) {
    var flipSequence = makeSequence2(collection);
    flipSequence._iter = collection;
    flipSequence.size = collection.size;
    flipSequence.flip = function() {
      return collection;
    };
    flipSequence.reverse = function() {
      var reversedSequence = collection.reverse.apply(this);
      reversedSequence.flip = function() {
        return collection.reverse();
      };
      return reversedSequence;
    };
    flipSequence.has = function(key) {
      return collection.includes(key);
    };
    flipSequence.includes = function(key) {
      return collection.has(key);
    };
    flipSequence.cacheResult = cacheResultThrough2;
    flipSequence.__iterateUncached = function(fn2, reverse5) {
      var this$1 = this;
      return collection.__iterate(function(v4, k4) {
        return fn2(k4, v4, this$1) !== false;
      }, reverse5);
    };
    flipSequence.__iteratorUncached = function(type2, reverse5) {
      if (type2 === ITERATE_ENTRIES2) {
        var iterator = collection.__iterator(type2, reverse5);
        return new Iterator3(function() {
          var step = iterator.next();
          if (!step.done) {
            var k4 = step.value[0];
            step.value[0] = step.value[1];
            step.value[1] = k4;
          }
          return step;
        });
      }
      return collection.__iterator(
        type2 === ITERATE_VALUES2 ? ITERATE_KEYS2 : ITERATE_VALUES2,
        reverse5
      );
    };
    return flipSequence;
  }
  function mapFactory2(collection, mapper, context) {
    var mappedSequence = makeSequence2(collection);
    mappedSequence.size = collection.size;
    mappedSequence.has = function(key) {
      return collection.has(key);
    };
    mappedSequence.get = function(key, notSetValue) {
      var v4 = collection.get(key, NOT_SET2);
      return v4 === NOT_SET2 ? notSetValue : mapper.call(context, v4, key, collection);
    };
    mappedSequence.__iterateUncached = function(fn2, reverse5) {
      var this$1 = this;
      return collection.__iterate(
        function(v4, k4, c4) {
          return fn2(mapper.call(context, v4, k4, c4), k4, this$1) !== false;
        },
        reverse5
      );
    };
    mappedSequence.__iteratorUncached = function(type2, reverse5) {
      var iterator = collection.__iterator(ITERATE_ENTRIES2, reverse5);
      return new Iterator3(function() {
        var step = iterator.next();
        if (step.done) {
          return step;
        }
        var entry = step.value;
        var key = entry[0];
        return iteratorValue2(
          type2,
          key,
          mapper.call(context, entry[1], key, collection),
          step
        );
      });
    };
    return mappedSequence;
  }
  function reverseFactory2(collection, useKeys) {
    var this$1 = this;
    var reversedSequence = makeSequence2(collection);
    reversedSequence._iter = collection;
    reversedSequence.size = collection.size;
    reversedSequence.reverse = function() {
      return collection;
    };
    if (collection.flip) {
      reversedSequence.flip = function() {
        var flipSequence = flipFactory2(collection);
        flipSequence.reverse = function() {
          return collection.flip();
        };
        return flipSequence;
      };
    }
    reversedSequence.get = function(key, notSetValue) {
      return collection.get(useKeys ? key : -1 - key, notSetValue);
    };
    reversedSequence.has = function(key) {
      return collection.has(useKeys ? key : -1 - key);
    };
    reversedSequence.includes = function(value) {
      return collection.includes(value);
    };
    reversedSequence.cacheResult = cacheResultThrough2;
    reversedSequence.__iterate = function(fn2, reverse5) {
      var this$12 = this;
      var i5 = 0;
      reverse5 && ensureSize2(collection);
      return collection.__iterate(
        function(v4, k4) {
          return fn2(v4, useKeys ? k4 : reverse5 ? this$12.size - ++i5 : i5++, this$12);
        },
        !reverse5
      );
    };
    reversedSequence.__iterator = function(type2, reverse5) {
      var i5 = 0;
      reverse5 && ensureSize2(collection);
      var iterator = collection.__iterator(ITERATE_ENTRIES2, !reverse5);
      return new Iterator3(function() {
        var step = iterator.next();
        if (step.done) {
          return step;
        }
        var entry = step.value;
        return iteratorValue2(
          type2,
          useKeys ? entry[0] : reverse5 ? this$1.size - ++i5 : i5++,
          entry[1],
          step
        );
      });
    };
    return reversedSequence;
  }
  function filterFactory2(collection, predicate, context, useKeys) {
    var filterSequence = makeSequence2(collection);
    if (useKeys) {
      filterSequence.has = function(key) {
        var v4 = collection.get(key, NOT_SET2);
        return v4 !== NOT_SET2 && !!predicate.call(context, v4, key, collection);
      };
      filterSequence.get = function(key, notSetValue) {
        var v4 = collection.get(key, NOT_SET2);
        return v4 !== NOT_SET2 && predicate.call(context, v4, key, collection) ? v4 : notSetValue;
      };
    }
    filterSequence.__iterateUncached = function(fn2, reverse5) {
      var this$1 = this;
      var iterations = 0;
      collection.__iterate(function(v4, k4, c4) {
        if (predicate.call(context, v4, k4, c4)) {
          iterations++;
          return fn2(v4, useKeys ? k4 : iterations - 1, this$1);
        }
      }, reverse5);
      return iterations;
    };
    filterSequence.__iteratorUncached = function(type2, reverse5) {
      var iterator = collection.__iterator(ITERATE_ENTRIES2, reverse5);
      var iterations = 0;
      return new Iterator3(function() {
        while (true) {
          var step = iterator.next();
          if (step.done) {
            return step;
          }
          var entry = step.value;
          var key = entry[0];
          var value = entry[1];
          if (predicate.call(context, value, key, collection)) {
            return iteratorValue2(type2, useKeys ? key : iterations++, value, step);
          }
        }
      });
    };
    return filterSequence;
  }
  function countByFactory2(collection, grouper, context) {
    var groups = Map3().asMutable();
    collection.__iterate(function(v4, k4) {
      groups.update(grouper.call(context, v4, k4, collection), 0, function(a5) {
        return a5 + 1;
      });
    });
    return groups.asImmutable();
  }
  function groupByFactory2(collection, grouper, context) {
    var isKeyedIter = isKeyed2(collection);
    var groups = (isOrdered2(collection) ? OrderedMap2() : Map3()).asMutable();
    collection.__iterate(function(v4, k4) {
      groups.update(
        grouper.call(context, v4, k4, collection),
        function(a5) {
          return a5 = a5 || [], a5.push(isKeyedIter ? [k4, v4] : v4), a5;
        }
      );
    });
    var coerce = collectionClass2(collection);
    return groups.map(function(arr) {
      return reify2(collection, coerce(arr));
    }).asImmutable();
  }
  function sliceFactory2(collection, begin, end, useKeys) {
    var originalSize = collection.size;
    if (wholeSlice2(begin, end, originalSize)) {
      return collection;
    }
    var resolvedBegin = resolveBegin2(begin, originalSize);
    var resolvedEnd = resolveEnd2(end, originalSize);
    if (resolvedBegin !== resolvedBegin || resolvedEnd !== resolvedEnd) {
      return sliceFactory2(collection.toSeq().cacheResult(), begin, end, useKeys);
    }
    var resolvedSize = resolvedEnd - resolvedBegin;
    var sliceSize;
    if (resolvedSize === resolvedSize) {
      sliceSize = resolvedSize < 0 ? 0 : resolvedSize;
    }
    var sliceSeq = makeSequence2(collection);
    sliceSeq.size = sliceSize === 0 ? sliceSize : collection.size && sliceSize || void 0;
    if (!useKeys && isSeq2(collection) && sliceSize >= 0) {
      sliceSeq.get = function(index, notSetValue) {
        index = wrapIndex2(this, index);
        return index >= 0 && index < sliceSize ? collection.get(index + resolvedBegin, notSetValue) : notSetValue;
      };
    }
    sliceSeq.__iterateUncached = function(fn2, reverse5) {
      var this$1 = this;
      if (sliceSize === 0) {
        return 0;
      }
      if (reverse5) {
        return this.cacheResult().__iterate(fn2, reverse5);
      }
      var skipped = 0;
      var isSkipping = true;
      var iterations = 0;
      collection.__iterate(function(v4, k4) {
        if (!(isSkipping && (isSkipping = skipped++ < resolvedBegin))) {
          iterations++;
          return fn2(v4, useKeys ? k4 : iterations - 1, this$1) !== false && iterations !== sliceSize;
        }
      });
      return iterations;
    };
    sliceSeq.__iteratorUncached = function(type2, reverse5) {
      if (sliceSize !== 0 && reverse5) {
        return this.cacheResult().__iterator(type2, reverse5);
      }
      if (sliceSize === 0) {
        return new Iterator3(iteratorDone2);
      }
      var iterator = collection.__iterator(type2, reverse5);
      var skipped = 0;
      var iterations = 0;
      return new Iterator3(function() {
        while (skipped++ < resolvedBegin) {
          iterator.next();
        }
        if (++iterations > sliceSize) {
          return iteratorDone2();
        }
        var step = iterator.next();
        if (useKeys || type2 === ITERATE_VALUES2 || step.done) {
          return step;
        }
        if (type2 === ITERATE_KEYS2) {
          return iteratorValue2(type2, iterations - 1, void 0, step);
        }
        return iteratorValue2(type2, iterations - 1, step.value[1], step);
      });
    };
    return sliceSeq;
  }
  function takeWhileFactory2(collection, predicate, context) {
    var takeSequence = makeSequence2(collection);
    takeSequence.__iterateUncached = function(fn2, reverse5) {
      var this$1 = this;
      if (reverse5) {
        return this.cacheResult().__iterate(fn2, reverse5);
      }
      var iterations = 0;
      collection.__iterate(
        function(v4, k4, c4) {
          return predicate.call(context, v4, k4, c4) && ++iterations && fn2(v4, k4, this$1);
        }
      );
      return iterations;
    };
    takeSequence.__iteratorUncached = function(type2, reverse5) {
      var this$1 = this;
      if (reverse5) {
        return this.cacheResult().__iterator(type2, reverse5);
      }
      var iterator = collection.__iterator(ITERATE_ENTRIES2, reverse5);
      var iterating = true;
      return new Iterator3(function() {
        if (!iterating) {
          return iteratorDone2();
        }
        var step = iterator.next();
        if (step.done) {
          return step;
        }
        var entry = step.value;
        var k4 = entry[0];
        var v4 = entry[1];
        if (!predicate.call(context, v4, k4, this$1)) {
          iterating = false;
          return iteratorDone2();
        }
        return type2 === ITERATE_ENTRIES2 ? step : iteratorValue2(type2, k4, v4, step);
      });
    };
    return takeSequence;
  }
  function skipWhileFactory2(collection, predicate, context, useKeys) {
    var skipSequence = makeSequence2(collection);
    skipSequence.__iterateUncached = function(fn2, reverse5) {
      var this$1 = this;
      if (reverse5) {
        return this.cacheResult().__iterate(fn2, reverse5);
      }
      var isSkipping = true;
      var iterations = 0;
      collection.__iterate(function(v4, k4, c4) {
        if (!(isSkipping && (isSkipping = predicate.call(context, v4, k4, c4)))) {
          iterations++;
          return fn2(v4, useKeys ? k4 : iterations - 1, this$1);
        }
      });
      return iterations;
    };
    skipSequence.__iteratorUncached = function(type2, reverse5) {
      var this$1 = this;
      if (reverse5) {
        return this.cacheResult().__iterator(type2, reverse5);
      }
      var iterator = collection.__iterator(ITERATE_ENTRIES2, reverse5);
      var skipping = true;
      var iterations = 0;
      return new Iterator3(function() {
        var step;
        var k4;
        var v4;
        do {
          step = iterator.next();
          if (step.done) {
            if (useKeys || type2 === ITERATE_VALUES2) {
              return step;
            }
            if (type2 === ITERATE_KEYS2) {
              return iteratorValue2(type2, iterations++, void 0, step);
            }
            return iteratorValue2(type2, iterations++, step.value[1], step);
          }
          var entry = step.value;
          k4 = entry[0];
          v4 = entry[1];
          skipping && (skipping = predicate.call(context, v4, k4, this$1));
        } while (skipping);
        return type2 === ITERATE_ENTRIES2 ? step : iteratorValue2(type2, k4, v4, step);
      });
    };
    return skipSequence;
  }
  function concatFactory2(collection, values3) {
    var isKeyedCollection = isKeyed2(collection);
    var iters = [collection].concat(values3).map(function(v4) {
      if (!isCollection2(v4)) {
        v4 = isKeyedCollection ? keyedSeqFromValue2(v4) : indexedSeqFromValue2(Array.isArray(v4) ? v4 : [v4]);
      } else if (isKeyedCollection) {
        v4 = KeyedCollection2(v4);
      }
      return v4;
    }).filter(function(v4) {
      return v4.size !== 0;
    });
    if (iters.length === 0) {
      return collection;
    }
    if (iters.length === 1) {
      var singleton = iters[0];
      if (singleton === collection || isKeyedCollection && isKeyed2(singleton) || isIndexed2(collection) && isIndexed2(singleton)) {
        return singleton;
      }
    }
    var concatSeq = new ArraySeq2(iters);
    if (isKeyedCollection) {
      concatSeq = concatSeq.toKeyedSeq();
    } else if (!isIndexed2(collection)) {
      concatSeq = concatSeq.toSetSeq();
    }
    concatSeq = concatSeq.flatten(true);
    concatSeq.size = iters.reduce(function(sum, seq) {
      if (sum !== void 0) {
        var size2 = seq.size;
        if (size2 !== void 0) {
          return sum + size2;
        }
      }
    }, 0);
    return concatSeq;
  }
  function flattenFactory2(collection, depth, useKeys) {
    var flatSequence = makeSequence2(collection);
    flatSequence.__iterateUncached = function(fn2, reverse5) {
      if (reverse5) {
        return this.cacheResult().__iterate(fn2, reverse5);
      }
      var iterations = 0;
      var stopped = false;
      function flatDeep(iter, currentDepth) {
        iter.__iterate(function(v4, k4) {
          if ((!depth || currentDepth < depth) && isCollection2(v4)) {
            flatDeep(v4, currentDepth + 1);
          } else {
            iterations++;
            if (fn2(v4, useKeys ? k4 : iterations - 1, flatSequence) === false) {
              stopped = true;
            }
          }
          return !stopped;
        }, reverse5);
      }
      flatDeep(collection, 0);
      return iterations;
    };
    flatSequence.__iteratorUncached = function(type2, reverse5) {
      if (reverse5) {
        return this.cacheResult().__iterator(type2, reverse5);
      }
      var iterator = collection.__iterator(type2, reverse5);
      var stack = [];
      var iterations = 0;
      return new Iterator3(function() {
        while (iterator) {
          var step = iterator.next();
          if (step.done !== false) {
            iterator = stack.pop();
            continue;
          }
          var v4 = step.value;
          if (type2 === ITERATE_ENTRIES2) {
            v4 = v4[1];
          }
          if ((!depth || stack.length < depth) && isCollection2(v4)) {
            stack.push(iterator);
            iterator = v4.__iterator(type2, reverse5);
          } else {
            return useKeys ? step : iteratorValue2(type2, iterations++, v4, step);
          }
        }
        return iteratorDone2();
      });
    };
    return flatSequence;
  }
  function flatMapFactory2(collection, mapper, context) {
    var coerce = collectionClass2(collection);
    return collection.toSeq().map(function(v4, k4) {
      return coerce(mapper.call(context, v4, k4, collection));
    }).flatten(true);
  }
  function interposeFactory2(collection, separator) {
    var interposedSequence = makeSequence2(collection);
    interposedSequence.size = collection.size && collection.size * 2 - 1;
    interposedSequence.__iterateUncached = function(fn2, reverse5) {
      var this$1 = this;
      var iterations = 0;
      collection.__iterate(
        function(v4) {
          return (!iterations || fn2(separator, iterations++, this$1) !== false) && fn2(v4, iterations++, this$1) !== false;
        },
        reverse5
      );
      return iterations;
    };
    interposedSequence.__iteratorUncached = function(type2, reverse5) {
      var iterator = collection.__iterator(ITERATE_VALUES2, reverse5);
      var iterations = 0;
      var step;
      return new Iterator3(function() {
        if (!step || iterations % 2) {
          step = iterator.next();
          if (step.done) {
            return step;
          }
        }
        return iterations % 2 ? iteratorValue2(type2, iterations++, separator) : iteratorValue2(type2, iterations++, step.value, step);
      });
    };
    return interposedSequence;
  }
  function sortFactory2(collection, comparator, mapper) {
    if (!comparator) {
      comparator = defaultComparator2;
    }
    var isKeyedCollection = isKeyed2(collection);
    var index = 0;
    var entries5 = collection.toSeq().map(function(v4, k4) {
      return [k4, v4, index++, mapper ? mapper(v4, k4, collection) : v4];
    }).valueSeq().toArray();
    entries5.sort(function(a5, b2) {
      return comparator(a5[3], b2[3]) || a5[2] - b2[2];
    }).forEach(
      isKeyedCollection ? function(v4, i5) {
        entries5[i5].length = 2;
      } : function(v4, i5) {
        entries5[i5] = v4[1];
      }
    );
    return isKeyedCollection ? KeyedSeq2(entries5) : isIndexed2(collection) ? IndexedSeq2(entries5) : SetSeq2(entries5);
  }
  function partialSortFactory(collection, n4, comparator, mapper) {
    if (!comparator) {
      comparator = defaultComparator2;
    }
    var isKeyedCollection = isKeyed2(collection);
    var index = 0;
    var entries5 = collection.toSeq().map(function(v4, k4) {
      return [k4, v4, index++, mapper ? mapper(v4, k4, collection) : v4];
    }).valueSeq().toArray();
    var cmp = function(a5, b2) {
      return comparator(a5[3], b2[3]) || a5[2] - b2[2];
    };
    quickSelect(entries5, n4, cmp);
    entries5 = entries5.slice(0, n4);
    entries5.sort(cmp).forEach(
      isKeyedCollection ? function(v4, i5) {
        entries5[i5].length = 2;
      } : function(v4, i5) {
        entries5[i5] = v4[1];
      }
    );
    return isKeyedCollection ? KeyedSeq2(entries5) : isIndexed2(collection) ? IndexedSeq2(entries5) : SetSeq2(entries5);
  }
  function incSortFactory(collection, comparator, mapper, useKeys) {
    if (!comparator) {
      comparator = defaultComparator2;
    }
    var index = 0;
    var entriesSeq = collection.toSeq().map(function(v4, k4) {
      return [k4, v4, index++, mapper ? mapper(v4, k4, collection) : v4];
    }).valueSeq();
    var sequence = makeSequence2(collection);
    sequence.__iterateUncached = function(fn2, reverse5) {
      var this$1 = this;
      var entries5 = entriesSeq.toArray();
      var rcmp = reverse5 ? function(a5, b2) {
        return comparator(b2, a5);
      } : comparator;
      var cmp = function(a5, b2) {
        return rcmp(a5[3], b2[3]) || a5[2] - b2[2];
      };
      var nextn = entries5.length >> 10;
      nextn = Math.min(entries5.length, 10);
      var from = 0;
      var to2 = -1;
      var n4 = 0;
      var i5 = 0;
      var sortedEntries;
      function nextBatch() {
        from = to2 + 1;
        to2 = Math.min(to2 + nextn, entries5.length - 1);
        n4 = to2 - from + 1;
        i5 = 0;
        nextn <<= 2;
        quickSelectRange(entries5, from, entries5.length - 1, to2, cmp);
        sortedEntries = entries5.slice(from, to2 + 1);
        sortedEntries.sort(cmp).forEach(function(v4, i6) {
          sortedEntries[i6].length = 2;
        });
      }
      function nextEntry() {
        if (i5 >= n4) {
          nextBatch();
        }
        return sortedEntries[i5++];
      }
      var iterations = 0;
      while (iterations < entries5.length) {
        var entry = nextEntry();
        if (fn2(entry[1], useKeys ? entry[0] : iterations, this$1) === false) {
          break;
        }
        iterations++;
      }
      return iterations;
    };
    sequence.__iteratorUncached = function(type2, reverse5) {
      var entries5 = entriesSeq.toArray();
      var rcmp = reverse5 ? function(a5, b2) {
        return comparator(b2, a5);
      } : comparator;
      var cmp = function(a5, b2) {
        return rcmp(a5[3], b2[3]) || a5[2] - b2[2];
      };
      var nextn = entries5.length >> 10;
      nextn = Math.min(entries5.length, 10);
      var from = 0;
      var to2 = -1;
      var n4 = 0;
      var i5 = 0;
      var sortedEntries;
      function nextBatch() {
        from = to2 + 1;
        to2 = Math.min(to2 + nextn, entries5.length - 1);
        n4 = to2 - from + 1;
        i5 = 0;
        nextn <<= 2;
        quickSelectRange(entries5, from, entries5.length - 1, to2, cmp);
        sortedEntries = entries5.slice(from, to2 + 1);
        sortedEntries.sort(cmp).forEach(function(v4, i6) {
          sortedEntries[i6].length = 2;
        });
      }
      function nextEntry() {
        if (i5 >= n4) {
          nextBatch();
        }
        return sortedEntries[i5++];
      }
      var iterations = 0;
      return new Iterator3(function() {
        if (iterations >= entries5.length) {
          return iteratorDone2();
        }
        iterations++;
        var entry = nextEntry(cmp);
        return iteratorValue2(type2, useKeys ? entry[0] : iterations, entry[1]);
      });
    };
    return sequence;
  }
  function maxFactory2(collection, comparator, mapper) {
    if (!comparator) {
      comparator = defaultComparator2;
    }
    if (mapper) {
      var entry = collection.toSeq().map(function(v4, k4) {
        return [v4, mapper(v4, k4, collection)];
      }).reduce(function(a5, b2) {
        return maxCompare2(comparator, a5[1], b2[1]) ? b2 : a5;
      });
      return entry && entry[0];
    }
    return collection.reduce(function(a5, b2) {
      return maxCompare2(comparator, a5, b2) ? b2 : a5;
    });
  }
  function maxCompare2(comparator, a5, b2) {
    var comp = comparator(b2, a5);
    return comp === 0 && b2 !== a5 && (b2 === void 0 || b2 === null || b2 !== b2) || comp > 0;
  }
  function zipWithFactory2(keyIter, zipper, iters, zipAll3) {
    var zipSequence = makeSequence2(keyIter);
    var sizes = new ArraySeq2(iters).map(function(i5) {
      return i5.size;
    });
    zipSequence.size = zipAll3 ? sizes.max() : sizes.min();
    zipSequence.__iterate = function(fn2, reverse5) {
      var this$1 = this;
      var iterator = this.__iterator(ITERATE_VALUES2, reverse5);
      var step;
      var iterations = 0;
      while (!(step = iterator.next()).done) {
        if (fn2(step.value, iterations++, this$1) === false) {
          break;
        }
      }
      return iterations;
    };
    zipSequence.__iteratorUncached = function(type2, reverse5) {
      var iterators = iters.map(
        function(i5) {
          return i5 = Collection3(i5), getIterator2(reverse5 ? i5.reverse() : i5);
        }
      );
      var iterations = 0;
      var isDone = false;
      return new Iterator3(function() {
        var steps;
        if (!isDone) {
          steps = iterators.map(function(i5) {
            return i5.next();
          });
          isDone = zipAll3 ? steps.every(function(s4) {
            return s4.done;
          }) : steps.some(function(s4) {
            return s4.done;
          });
        }
        if (isDone) {
          return iteratorDone2();
        }
        return iteratorValue2(
          type2,
          iterations++,
          zipper.apply(null, steps.map(function(s4) {
            return s4.value;
          }))
        );
      });
    };
    return zipSequence;
  }
  function reify2(iter, seq) {
    return iter === seq ? iter : isSeq2(iter) ? seq : iter.constructor(seq);
  }
  function validateEntry2(entry) {
    if (entry !== Object(entry)) {
      throw new TypeError("Expected [K, V] tuple: " + entry);
    }
  }
  function collectionClass2(collection) {
    return isKeyed2(collection) ? KeyedCollection2 : isIndexed2(collection) ? IndexedCollection2 : SetCollection2;
  }
  function makeSequence2(collection) {
    return Object.create(
      (isKeyed2(collection) ? KeyedSeq2 : isIndexed2(collection) ? IndexedSeq2 : SetSeq2).prototype
    );
  }
  function cacheResultThrough2() {
    if (this._iter.cacheResult) {
      this._iter.cacheResult();
      this.size = this._iter.size;
      return this;
    }
    return Seq2.prototype.cacheResult.call(this);
  }
  function defaultComparator2(a5, b2) {
    if (a5 === void 0 && b2 === void 0) {
      return 0;
    }
    if (a5 === void 0) {
      return 1;
    }
    if (b2 === void 0) {
      return -1;
    }
    return a5 > b2 ? 1 : a5 < b2 ? -1 : 0;
  }
  function arrCopy2(arr, offset2) {
    offset2 = offset2 || 0;
    var len = Math.max(0, arr.length - offset2);
    var newArr = new Array(len);
    for (var ii2 = 0; ii2 < len; ii2++) {
      newArr[ii2] = arr[ii2 + offset2];
    }
    return newArr;
  }
  function invariant2(condition, error) {
    if (!condition) {
      throw new Error(error);
    }
  }
  function assertNotInfinite2(size2) {
    invariant2(
      size2 !== Infinity,
      "Cannot perform this action with an infinite size."
    );
  }
  function coerceKeyPath2(keyPath) {
    if (isArrayLike2(keyPath) && typeof keyPath !== "string") {
      return keyPath;
    }
    if (isOrdered2(keyPath)) {
      return keyPath.toArray();
    }
    throw new TypeError(
      "Invalid keyPath: expected Ordered Collection or Array: " + keyPath
    );
  }
  function isPlainObj(value) {
    return value && (typeof value.constructor !== "function" || value.constructor.name === "Object");
  }
  function isDataStructure2(value) {
    return typeof value === "object" && (isImmutable2(value) || Array.isArray(value) || isPlainObj(value));
  }
  function quoteString2(value) {
    try {
      return typeof value === "string" ? JSON.stringify(value) : String(value);
    } catch (_ignoreError) {
      return JSON.stringify(value);
    }
  }
  function has5(collection, key) {
    return isImmutable2(collection) ? collection.has(key) : isDataStructure2(collection) && hasOwnProperty2.call(collection, key);
  }
  function get13(collection, key, notSetValue) {
    return isImmutable2(collection) ? collection.get(key, notSetValue) : !has5(collection, key) ? notSetValue : typeof collection.get === "function" ? collection.get(key) : collection[key];
  }
  function shallowCopy2(from) {
    if (Array.isArray(from)) {
      return arrCopy2(from);
    }
    var to2 = {};
    for (var key in from) {
      if (hasOwnProperty2.call(from, key)) {
        to2[key] = from[key];
      }
    }
    return to2;
  }
  function remove4(collection, key) {
    if (!isDataStructure2(collection)) {
      throw new TypeError(
        "Cannot update non-data-structure value: " + collection
      );
    }
    if (isImmutable2(collection)) {
      if (!collection.remove) {
        throw new TypeError(
          "Cannot update immutable value without .remove() method: " + collection
        );
      }
      return collection.remove(key);
    }
    if (!hasOwnProperty2.call(collection, key)) {
      return collection;
    }
    var collectionCopy = shallowCopy2(collection);
    if (Array.isArray(collectionCopy)) {
      collectionCopy.splice(key, 1);
    } else {
      delete collectionCopy[key];
    }
    return collectionCopy;
  }
  function set5(collection, key, value) {
    if (!isDataStructure2(collection)) {
      throw new TypeError(
        "Cannot update non-data-structure value: " + collection
      );
    }
    if (isImmutable2(collection)) {
      if (!collection.set) {
        throw new TypeError(
          "Cannot update immutable value without .set() method: " + collection
        );
      }
      return collection.set(key, value);
    }
    if (hasOwnProperty2.call(collection, key) && value === collection[key]) {
      return collection;
    }
    var collectionCopy = shallowCopy2(collection);
    collectionCopy[key] = value;
    return collectionCopy;
  }
  function updateIn2(collection, keyPath, notSetValue, updater) {
    if (!updater) {
      updater = notSetValue;
      notSetValue = void 0;
    }
    var updatedValue = updateInDeeply2(
      isImmutable2(collection),
      collection,
      coerceKeyPath2(keyPath),
      0,
      notSetValue,
      updater
    );
    return updatedValue === NOT_SET2 ? notSetValue : updatedValue;
  }
  function updateInDeeply2(inImmutable, existing, keyPath, i5, notSetValue, updater) {
    var wasNotSet = existing === NOT_SET2;
    if (i5 === keyPath.length) {
      var existingValue = wasNotSet ? notSetValue : existing;
      var newValue = updater(existingValue);
      return newValue === existingValue ? existing : newValue;
    }
    if (!wasNotSet && !isDataStructure2(existing)) {
      throw new TypeError(
        "Cannot update within non-data-structure value in path [" + keyPath.slice(0, i5).map(quoteString2) + "]: " + existing
      );
    }
    var key = keyPath[i5];
    var nextExisting = wasNotSet ? NOT_SET2 : get13(existing, key, NOT_SET2);
    var nextUpdated = updateInDeeply2(
      nextExisting === NOT_SET2 ? inImmutable : isImmutable2(nextExisting),
      nextExisting,
      keyPath,
      i5 + 1,
      notSetValue,
      updater
    );
    return nextUpdated === nextExisting ? existing : nextUpdated === NOT_SET2 ? remove4(existing, key) : set5(
      wasNotSet ? inImmutable ? emptyMap2() : {} : existing,
      key,
      nextUpdated
    );
  }
  function setIn$12(collection, keyPath, value) {
    return updateIn2(collection, keyPath, NOT_SET2, function() {
      return value;
    });
  }
  function setIn$$1(keyPath, v4) {
    return setIn$12(this, keyPath, v4);
  }
  function removeIn2(collection, keyPath) {
    return updateIn2(collection, keyPath, function() {
      return NOT_SET2;
    });
  }
  function deleteIn2(keyPath) {
    return removeIn2(this, keyPath);
  }
  function update$12(collection, key, notSetValue, updater) {
    return updateIn2(collection, [key], notSetValue, updater);
  }
  function update$$1(key, notSetValue, updater) {
    return arguments.length === 1 ? key(this) : update$12(this, key, notSetValue, updater);
  }
  function updateIn$12(keyPath, notSetValue, updater) {
    return updateIn2(this, keyPath, notSetValue, updater);
  }
  function merge() {
    var iters = [], len = arguments.length;
    while (len--)
      iters[len] = arguments[len];
    return mergeIntoKeyedWith2(this, iters);
  }
  function mergeWith(merger) {
    var iters = [], len = arguments.length - 1;
    while (len-- > 0)
      iters[len] = arguments[len + 1];
    if (typeof merger !== "function") {
      throw new TypeError("Invalid merger function: " + merger);
    }
    return mergeIntoKeyedWith2(this, iters, merger);
  }
  function mergeIntoKeyedWith2(collection, collections, merger) {
    var iters = [];
    for (var ii2 = 0; ii2 < collections.length; ii2++) {
      var collection$1 = KeyedCollection2(collections[ii2]);
      if (collection$1.size !== 0) {
        iters.push(collection$1);
      }
    }
    if (iters.length === 0) {
      return collection;
    }
    if (collection.toSeq().size === 0 && !collection.__ownerID && iters.length === 1) {
      return collection.constructor(iters[0]);
    }
    return collection.withMutations(function(collection2) {
      var mergeIntoCollection = merger ? function(value, key) {
        update$12(
          collection2,
          key,
          NOT_SET2,
          function(oldVal) {
            return oldVal === NOT_SET2 ? value : merger(oldVal, value, key);
          }
        );
      } : function(value, key) {
        collection2.set(key, value);
      };
      for (var ii3 = 0; ii3 < iters.length; ii3++) {
        iters[ii3].forEach(mergeIntoCollection);
      }
    });
  }
  function mergeDeepWithSources2(collection, sources, merger) {
    return mergeWithSources2(collection, sources, deepMergerWith2(merger));
  }
  function mergeWithSources2(collection, sources, merger) {
    if (!isDataStructure2(collection)) {
      throw new TypeError(
        "Cannot merge into non-data-structure value: " + collection
      );
    }
    if (isImmutable2(collection)) {
      return typeof merger === "function" && collection.mergeWith ? collection.mergeWith.apply(collection, [merger].concat(sources)) : collection.merge ? collection.merge.apply(collection, sources) : collection.concat.apply(collection, sources);
    }
    var isArray = Array.isArray(collection);
    var merged = collection;
    var Collection$$1 = isArray ? IndexedCollection2 : KeyedCollection2;
    var mergeItem = isArray ? function(value) {
      if (merged === collection) {
        merged = shallowCopy2(merged);
      }
      merged.push(value);
    } : function(value, key) {
      var hasVal = hasOwnProperty2.call(merged, key);
      var nextVal = hasVal && merger ? merger(merged[key], value, key) : value;
      if (!hasVal || nextVal !== merged[key]) {
        if (merged === collection) {
          merged = shallowCopy2(merged);
        }
        merged[key] = nextVal;
      }
    };
    for (var i5 = 0; i5 < sources.length; i5++) {
      Collection$$1(sources[i5]).forEach(mergeItem);
    }
    return merged;
  }
  function deepMergerWith2(merger) {
    function deepMerger(oldValue, newValue, key) {
      return isDataStructure2(oldValue) && isDataStructure2(newValue) ? mergeWithSources2(oldValue, [newValue], deepMerger) : merger ? merger(oldValue, newValue, key) : newValue;
    }
    return deepMerger;
  }
  function mergeDeep2() {
    var iters = [], len = arguments.length;
    while (len--)
      iters[len] = arguments[len];
    return mergeDeepWithSources2(this, iters);
  }
  function mergeDeepWith2(merger) {
    var iters = [], len = arguments.length - 1;
    while (len-- > 0)
      iters[len] = arguments[len + 1];
    return mergeDeepWithSources2(this, iters, merger);
  }
  function mergeIn2(keyPath) {
    var iters = [], len = arguments.length - 1;
    while (len-- > 0)
      iters[len] = arguments[len + 1];
    return updateIn2(this, keyPath, emptyMap2(), function(m4) {
      return mergeWithSources2(m4, iters);
    });
  }
  function mergeDeepIn2(keyPath) {
    var iters = [], len = arguments.length - 1;
    while (len-- > 0)
      iters[len] = arguments[len + 1];
    return updateIn2(
      this,
      keyPath,
      emptyMap2(),
      function(m4) {
        return mergeDeepWithSources2(m4, iters);
      }
    );
  }
  function withMutations2(fn2) {
    var mutable = this.asMutable();
    fn2(mutable);
    return mutable.wasAltered() ? mutable.__ensureOwner(this.__ownerID) : this;
  }
  function asMutable2() {
    return this.__ownerID ? this : this.__ensureOwner(new OwnerID2());
  }
  function asImmutable2() {
    return this.__ensureOwner();
  }
  function wasAltered3() {
    return this.__altered;
  }
  var Map3 = function(KeyedCollection$$1) {
    function Map4(value) {
      return value === null || value === void 0 ? emptyMap2() : isMap2(value) && !isOrdered2(value) && !isSorted(value) ? value : emptyMap2().withMutations(function(map5) {
        var iter = KeyedCollection$$1(value);
        assertNotInfinite2(iter.size);
        iter.forEach(function(v4, k4) {
          return map5.set(k4, v4);
        });
      });
    }
    if (KeyedCollection$$1)
      Map4.__proto__ = KeyedCollection$$1;
    Map4.prototype = Object.create(KeyedCollection$$1 && KeyedCollection$$1.prototype);
    Map4.prototype.constructor = Map4;
    Map4.of = function of() {
      var keyValues = [], len = arguments.length;
      while (len--)
        keyValues[len] = arguments[len];
      return emptyMap2().withMutations(function(map5) {
        for (var i5 = 0; i5 < keyValues.length; i5 += 2) {
          if (i5 + 1 >= keyValues.length) {
            throw new Error("Missing value for key: " + keyValues[i5]);
          }
          map5.set(keyValues[i5], keyValues[i5 + 1]);
        }
      });
    };
    Map4.prototype.toString = function toString9() {
      return this.__toString("Map {", "}");
    };
    Map4.prototype.get = function get24(k4, notSetValue) {
      return this._root ? this._root.get(0, void 0, k4, notSetValue) : notSetValue;
    };
    Map4.prototype.set = function set7(k4, v4) {
      return updateMap2(this, k4, v4);
    };
    Map4.prototype.remove = function remove7(k4) {
      return updateMap2(this, k4, NOT_SET2);
    };
    Map4.prototype.deleteAll = function deleteAll(keys3) {
      var collection = Collection3(keys3);
      if (collection.size === 0) {
        return this;
      }
      return this.withMutations(function(map5) {
        collection.forEach(function(key) {
          return map5.remove(key);
        });
      });
    };
    Map4.prototype.clear = function clear3() {
      if (this.size === 0) {
        return this;
      }
      if (this.__ownerID) {
        this.size = 0;
        this._root = null;
        this.__hash = void 0;
        this.__altered = true;
        return this;
      }
      return emptyMap2();
    };
    Map4.prototype.sort = function sort3(comparator) {
      return OrderedMap2(sortFactory2(this, comparator));
    };
    Map4.prototype.sortBy = function sortBy3(mapper, comparator) {
      return OrderedMap2(sortFactory2(this, comparator, mapper));
    };
    Map4.prototype.map = function map5(mapper, context) {
      return this.withMutations(function(map6) {
        map6.forEach(function(value, key) {
          map6.set(key, mapper.call(context, value, key, map6));
        });
      });
    };
    Map4.prototype.__iterator = function __iterator3(type2, reverse5) {
      return new MapIterator2(this, type2, reverse5);
    };
    Map4.prototype.__iterate = function __iterate3(fn2, reverse5) {
      var this$1 = this;
      var iterations = 0;
      this._root && this._root.iterate(function(entry) {
        iterations++;
        return fn2(entry[1], entry[0], this$1);
      }, reverse5);
      return iterations;
    };
    Map4.prototype.__ensureOwner = function __ensureOwner3(ownerID) {
      if (ownerID === this.__ownerID) {
        return this;
      }
      if (!ownerID) {
        if (this.size === 0) {
          return emptyMap2();
        }
        this.__ownerID = ownerID;
        this.__altered = false;
        return this;
      }
      return makeMap2(this.size, this._root, ownerID, this.__hash);
    };
    return Map4;
  }(KeyedCollection2);
  Map3.isMap = isMap2;
  var MapPrototype2 = Map3.prototype;
  MapPrototype2[IS_MAP_SYMBOL2] = true;
  MapPrototype2[DELETE2] = MapPrototype2.remove;
  MapPrototype2.removeAll = MapPrototype2.deleteAll;
  MapPrototype2.setIn = setIn$$1;
  MapPrototype2.removeIn = MapPrototype2.deleteIn = deleteIn2;
  MapPrototype2.update = update$$1;
  MapPrototype2.updateIn = updateIn$12;
  MapPrototype2.merge = MapPrototype2.concat = merge;
  MapPrototype2.mergeWith = mergeWith;
  MapPrototype2.mergeDeep = mergeDeep2;
  MapPrototype2.mergeDeepWith = mergeDeepWith2;
  MapPrototype2.mergeIn = mergeIn2;
  MapPrototype2.mergeDeepIn = mergeDeepIn2;
  MapPrototype2.withMutations = withMutations2;
  MapPrototype2.wasAltered = wasAltered3;
  MapPrototype2.asImmutable = asImmutable2;
  MapPrototype2["@@transducer/init"] = MapPrototype2.asMutable = asMutable2;
  MapPrototype2["@@transducer/step"] = function(result, arr) {
    return result.set(arr[0], arr[1]);
  };
  MapPrototype2["@@transducer/result"] = function(obj) {
    return obj.asImmutable();
  };
  var ArrayMapNode3 = function ArrayMapNode4(ownerID, entries5) {
    this.ownerID = ownerID;
    this.entries = entries5;
  };
  ArrayMapNode3.prototype.get = function get14(shift2, keyHash, key, notSetValue) {
    var entries5 = this.entries;
    for (var ii2 = 0, len = entries5.length; ii2 < len; ii2++) {
      if (is2(key, entries5[ii2][0])) {
        return entries5[ii2][1];
      }
    }
    return notSetValue;
  };
  ArrayMapNode3.prototype.update = function update$$12(ownerID, shift2, keyHash, key, value, didChangeSize, didAlter) {
    var removed = value === NOT_SET2;
    var entries5 = this.entries;
    var idx = 0;
    var len = entries5.length;
    for (; idx < len; idx++) {
      if (is2(key, entries5[idx][0])) {
        break;
      }
    }
    var exists = idx < len;
    if (exists ? entries5[idx][1] === value : removed) {
      return this;
    }
    SetRef2(didAlter);
    (removed || !exists) && SetRef2(didChangeSize);
    if (removed && entries5.length === 1) {
      return;
    }
    if (!exists && !removed && entries5.length >= MAX_ARRAY_MAP_SIZE2) {
      return createNodes2(ownerID, entries5, key, value);
    }
    var isEditable = ownerID && ownerID === this.ownerID;
    var newEntries = isEditable ? entries5 : arrCopy2(entries5);
    if (exists) {
      if (removed) {
        idx === len - 1 ? newEntries.pop() : newEntries[idx] = newEntries.pop();
      } else {
        newEntries[idx] = [key, value];
      }
    } else {
      newEntries.push([key, value]);
    }
    if (isEditable) {
      this.entries = newEntries;
      return this;
    }
    return new ArrayMapNode3(ownerID, newEntries);
  };
  var BitmapIndexedNode3 = function BitmapIndexedNode4(ownerID, bitmap, nodes) {
    this.ownerID = ownerID;
    this.bitmap = bitmap;
    this.nodes = nodes;
  };
  BitmapIndexedNode3.prototype.get = function get15(shift2, keyHash, key, notSetValue) {
    if (keyHash === void 0) {
      keyHash = hash2(key);
    }
    var bit = 1 << ((shift2 === 0 ? keyHash : keyHash >>> shift2) & MASK2);
    var bitmap = this.bitmap;
    return (bitmap & bit) === 0 ? notSetValue : this.nodes[popCount2(bitmap & bit - 1)].get(
      shift2 + SHIFT2,
      keyHash,
      key,
      notSetValue
    );
  };
  BitmapIndexedNode3.prototype.update = function update$$13(ownerID, shift2, keyHash, key, value, didChangeSize, didAlter) {
    if (keyHash === void 0) {
      keyHash = hash2(key);
    }
    var keyHashFrag = (shift2 === 0 ? keyHash : keyHash >>> shift2) & MASK2;
    var bit = 1 << keyHashFrag;
    var bitmap = this.bitmap;
    var exists = (bitmap & bit) !== 0;
    if (!exists && value === NOT_SET2) {
      return this;
    }
    var idx = popCount2(bitmap & bit - 1);
    var nodes = this.nodes;
    var node = exists ? nodes[idx] : void 0;
    var newNode = updateNode2(
      node,
      ownerID,
      shift2 + SHIFT2,
      keyHash,
      key,
      value,
      didChangeSize,
      didAlter
    );
    if (newNode === node) {
      return this;
    }
    if (!exists && newNode && nodes.length >= MAX_BITMAP_INDEXED_SIZE2) {
      return expandNodes2(ownerID, nodes, bitmap, keyHashFrag, newNode);
    }
    if (exists && !newNode && nodes.length === 2 && isLeafNode2(nodes[idx ^ 1])) {
      return nodes[idx ^ 1];
    }
    if (exists && newNode && nodes.length === 1 && isLeafNode2(newNode)) {
      return newNode;
    }
    var isEditable = ownerID && ownerID === this.ownerID;
    var newBitmap = exists ? newNode ? bitmap : bitmap ^ bit : bitmap | bit;
    var newNodes = exists ? newNode ? setAt2(nodes, idx, newNode, isEditable) : spliceOut2(nodes, idx, isEditable) : spliceIn2(nodes, idx, newNode, isEditable);
    if (isEditable) {
      this.bitmap = newBitmap;
      this.nodes = newNodes;
      return this;
    }
    return new BitmapIndexedNode3(ownerID, newBitmap, newNodes);
  };
  var HashArrayMapNode3 = function HashArrayMapNode4(ownerID, count4, nodes) {
    this.ownerID = ownerID;
    this.count = count4;
    this.nodes = nodes;
  };
  HashArrayMapNode3.prototype.get = function get16(shift2, keyHash, key, notSetValue) {
    if (keyHash === void 0) {
      keyHash = hash2(key);
    }
    var idx = (shift2 === 0 ? keyHash : keyHash >>> shift2) & MASK2;
    var node = this.nodes[idx];
    return node ? node.get(shift2 + SHIFT2, keyHash, key, notSetValue) : notSetValue;
  };
  HashArrayMapNode3.prototype.update = function update$$14(ownerID, shift2, keyHash, key, value, didChangeSize, didAlter) {
    if (keyHash === void 0) {
      keyHash = hash2(key);
    }
    var idx = (shift2 === 0 ? keyHash : keyHash >>> shift2) & MASK2;
    var removed = value === NOT_SET2;
    var nodes = this.nodes;
    var node = nodes[idx];
    if (removed && !node) {
      return this;
    }
    var newNode = updateNode2(
      node,
      ownerID,
      shift2 + SHIFT2,
      keyHash,
      key,
      value,
      didChangeSize,
      didAlter
    );
    if (newNode === node) {
      return this;
    }
    var newCount = this.count;
    if (!node) {
      newCount++;
    } else if (!newNode) {
      newCount--;
      if (newCount < MIN_HASH_ARRAY_MAP_SIZE2) {
        return packNodes2(ownerID, nodes, newCount, idx);
      }
    }
    var isEditable = ownerID && ownerID === this.ownerID;
    var newNodes = setAt2(nodes, idx, newNode, isEditable);
    if (isEditable) {
      this.count = newCount;
      this.nodes = newNodes;
      return this;
    }
    return new HashArrayMapNode3(ownerID, newCount, newNodes);
  };
  var HashCollisionNode3 = function HashCollisionNode4(ownerID, keyHash, entries5) {
    this.ownerID = ownerID;
    this.keyHash = keyHash;
    this.entries = entries5;
  };
  HashCollisionNode3.prototype.get = function get17(shift2, keyHash, key, notSetValue) {
    var entries5 = this.entries;
    for (var ii2 = 0, len = entries5.length; ii2 < len; ii2++) {
      if (is2(key, entries5[ii2][0])) {
        return entries5[ii2][1];
      }
    }
    return notSetValue;
  };
  HashCollisionNode3.prototype.update = function update$$15(ownerID, shift2, keyHash, key, value, didChangeSize, didAlter) {
    if (keyHash === void 0) {
      keyHash = hash2(key);
    }
    var removed = value === NOT_SET2;
    if (keyHash !== this.keyHash) {
      if (removed) {
        return this;
      }
      SetRef2(didAlter);
      SetRef2(didChangeSize);
      return mergeIntoNode2(this, ownerID, shift2, keyHash, [key, value]);
    }
    var entries5 = this.entries;
    var idx = 0;
    var len = entries5.length;
    for (; idx < len; idx++) {
      if (is2(key, entries5[idx][0])) {
        break;
      }
    }
    var exists = idx < len;
    if (exists ? entries5[idx][1] === value : removed) {
      return this;
    }
    SetRef2(didAlter);
    (removed || !exists) && SetRef2(didChangeSize);
    if (removed && len === 2) {
      return new ValueNode3(ownerID, this.keyHash, entries5[idx ^ 1]);
    }
    var isEditable = ownerID && ownerID === this.ownerID;
    var newEntries = isEditable ? entries5 : arrCopy2(entries5);
    if (exists) {
      if (removed) {
        idx === len - 1 ? newEntries.pop() : newEntries[idx] = newEntries.pop();
      } else {
        newEntries[idx] = [key, value];
      }
    } else {
      newEntries.push([key, value]);
    }
    if (isEditable) {
      this.entries = newEntries;
      return this;
    }
    return new HashCollisionNode3(ownerID, this.keyHash, newEntries);
  };
  var ValueNode3 = function ValueNode4(ownerID, keyHash, entry) {
    this.ownerID = ownerID;
    this.keyHash = keyHash;
    this.entry = entry;
  };
  ValueNode3.prototype.get = function get18(shift2, keyHash, key, notSetValue) {
    return is2(key, this.entry[0]) ? this.entry[1] : notSetValue;
  };
  ValueNode3.prototype.update = function update$$16(ownerID, shift2, keyHash, key, value, didChangeSize, didAlter) {
    var removed = value === NOT_SET2;
    var keyMatch = is2(key, this.entry[0]);
    if (keyMatch ? value === this.entry[1] : removed) {
      return this;
    }
    SetRef2(didAlter);
    if (removed) {
      SetRef2(didChangeSize);
      return;
    }
    if (keyMatch) {
      if (ownerID && ownerID === this.ownerID) {
        this.entry[1] = value;
        return this;
      }
      return new ValueNode3(ownerID, this.keyHash, [key, value]);
    }
    SetRef2(didChangeSize);
    return mergeIntoNode2(this, ownerID, shift2, hash2(key), [key, value]);
  };
  ArrayMapNode3.prototype.iterate = HashCollisionNode3.prototype.iterate = function(fn2, reverse5) {
    var entries5 = this.entries;
    for (var ii2 = 0, maxIndex = entries5.length - 1; ii2 <= maxIndex; ii2++) {
      if (fn2(entries5[reverse5 ? maxIndex - ii2 : ii2]) === false) {
        return false;
      }
    }
  };
  BitmapIndexedNode3.prototype.iterate = HashArrayMapNode3.prototype.iterate = function(fn2, reverse5) {
    var nodes = this.nodes;
    for (var ii2 = 0, maxIndex = nodes.length - 1; ii2 <= maxIndex; ii2++) {
      var node = nodes[reverse5 ? maxIndex - ii2 : ii2];
      if (node && node.iterate(fn2, reverse5) === false) {
        return false;
      }
    }
  };
  ValueNode3.prototype.iterate = function(fn2, reverse5) {
    return fn2(this.entry);
  };
  var MapIterator2 = function(Iterator$$1) {
    function MapIterator3(map5, type2, reverse5) {
      this._type = type2;
      this._reverse = reverse5;
      this._stack = map5._root && mapIteratorFrame2(map5._root);
    }
    if (Iterator$$1)
      MapIterator3.__proto__ = Iterator$$1;
    MapIterator3.prototype = Object.create(Iterator$$1 && Iterator$$1.prototype);
    MapIterator3.prototype.constructor = MapIterator3;
    MapIterator3.prototype.next = function next() {
      var this$1 = this;
      var type2 = this._type;
      var stack = this._stack;
      while (stack) {
        var node = stack.node;
        var index = stack.index++;
        var maxIndex = void 0;
        if (node.entry) {
          if (index === 0) {
            return mapIteratorValue2(type2, node.entry);
          }
        } else if (node.entries) {
          maxIndex = node.entries.length - 1;
          if (index <= maxIndex) {
            return mapIteratorValue2(
              type2,
              node.entries[this$1._reverse ? maxIndex - index : index]
            );
          }
        } else {
          maxIndex = node.nodes.length - 1;
          if (index <= maxIndex) {
            var subNode = node.nodes[this$1._reverse ? maxIndex - index : index];
            if (subNode) {
              if (subNode.entry) {
                return mapIteratorValue2(type2, subNode.entry);
              }
              stack = this$1._stack = mapIteratorFrame2(subNode, stack);
            }
            continue;
          }
        }
        stack = this$1._stack = this$1._stack.__prev;
      }
      return iteratorDone2();
    };
    return MapIterator3;
  }(Iterator3);
  function mapIteratorValue2(type2, entry) {
    return iteratorValue2(type2, entry[0], entry[1]);
  }
  function mapIteratorFrame2(node, prev) {
    return {
      node,
      index: 0,
      __prev: prev
    };
  }
  function makeMap2(size2, root2, ownerID, hash$$1) {
    var map5 = Object.create(MapPrototype2);
    map5.size = size2;
    map5._root = root2;
    map5.__ownerID = ownerID;
    map5.__hash = hash$$1;
    map5.__altered = false;
    return map5;
  }
  var EMPTY_MAP2;
  function emptyMap2() {
    return EMPTY_MAP2 || (EMPTY_MAP2 = makeMap2(0));
  }
  function updateMap2(map5, k4, v4) {
    var newRoot;
    var newSize;
    if (!map5._root) {
      if (v4 === NOT_SET2) {
        return map5;
      }
      newSize = 1;
      newRoot = new ArrayMapNode3(map5.__ownerID, [[k4, v4]]);
    } else {
      var didChangeSize = MakeRef2();
      var didAlter = MakeRef2();
      newRoot = updateNode2(
        map5._root,
        map5.__ownerID,
        0,
        void 0,
        k4,
        v4,
        didChangeSize,
        didAlter
      );
      if (!GetRef(didAlter)) {
        return map5;
      }
      newSize = map5.size + (GetRef(didChangeSize) ? v4 === NOT_SET2 ? -1 : 1 : 0);
    }
    if (map5.__ownerID) {
      map5.size = newSize;
      map5._root = newRoot;
      map5.__hash = void 0;
      map5.__altered = true;
      return map5;
    }
    return newRoot ? makeMap2(newSize, newRoot) : emptyMap2();
  }
  function updateNode2(node, ownerID, shift2, keyHash, key, value, didChangeSize, didAlter) {
    if (!node) {
      if (value === NOT_SET2) {
        return node;
      }
      SetRef2(didAlter);
      SetRef2(didChangeSize);
      return new ValueNode3(ownerID, keyHash, [key, value]);
    }
    return node.update(
      ownerID,
      shift2,
      keyHash,
      key,
      value,
      didChangeSize,
      didAlter
    );
  }
  function isLeafNode2(node) {
    return node.constructor === ValueNode3 || node.constructor === HashCollisionNode3;
  }
  function mergeIntoNode2(node, ownerID, shift2, keyHash, entry) {
    if (node.keyHash === keyHash) {
      return new HashCollisionNode3(ownerID, keyHash, [node.entry, entry]);
    }
    var idx1 = (shift2 === 0 ? node.keyHash : node.keyHash >>> shift2) & MASK2;
    var idx2 = (shift2 === 0 ? keyHash : keyHash >>> shift2) & MASK2;
    var newNode;
    var nodes = idx1 === idx2 ? [mergeIntoNode2(node, ownerID, shift2 + SHIFT2, keyHash, entry)] : (newNode = new ValueNode3(ownerID, keyHash, entry), idx1 < idx2 ? [node, newNode] : [newNode, node]);
    return new BitmapIndexedNode3(ownerID, 1 << idx1 | 1 << idx2, nodes);
  }
  function createNodes2(ownerID, entries5, key, value) {
    if (!ownerID) {
      ownerID = new OwnerID2();
    }
    var node = new ValueNode3(ownerID, hash2(key), [key, value]);
    for (var ii2 = 0; ii2 < entries5.length; ii2++) {
      var entry = entries5[ii2];
      node = node.update(ownerID, 0, void 0, entry[0], entry[1]);
    }
    return node;
  }
  function packNodes2(ownerID, nodes, count4, excluding) {
    var bitmap = 0;
    var packedII = 0;
    var packedNodes = new Array(count4);
    for (var ii2 = 0, bit = 1, len = nodes.length; ii2 < len; ii2++, bit <<= 1) {
      var node = nodes[ii2];
      if (node !== void 0 && ii2 !== excluding) {
        bitmap |= bit;
        packedNodes[packedII++] = node;
      }
    }
    return new BitmapIndexedNode3(ownerID, bitmap, packedNodes);
  }
  function expandNodes2(ownerID, nodes, bitmap, including, node) {
    var count4 = 0;
    var expandedNodes = new Array(SIZE2);
    for (var ii2 = 0; bitmap !== 0; ii2++, bitmap >>>= 1) {
      expandedNodes[ii2] = bitmap & 1 ? nodes[count4++] : void 0;
    }
    expandedNodes[including] = node;
    return new HashArrayMapNode3(ownerID, count4 + 1, expandedNodes);
  }
  function popCount2(x5) {
    x5 -= x5 >> 1 & 1431655765;
    x5 = (x5 & 858993459) + (x5 >> 2 & 858993459);
    x5 = x5 + (x5 >> 4) & 252645135;
    x5 += x5 >> 8;
    x5 += x5 >> 16;
    return x5 & 127;
  }
  function setAt2(array3, idx, val, canEdit) {
    var newArray = canEdit ? array3 : arrCopy2(array3);
    newArray[idx] = val;
    return newArray;
  }
  function spliceIn2(array3, idx, val, canEdit) {
    var newLen = array3.length + 1;
    if (canEdit && idx + 1 === newLen) {
      array3[idx] = val;
      return array3;
    }
    var newArray = new Array(newLen);
    var after = 0;
    for (var ii2 = 0; ii2 < newLen; ii2++) {
      if (ii2 === idx) {
        newArray[ii2] = val;
        after = -1;
      } else {
        newArray[ii2] = array3[ii2 + after];
      }
    }
    return newArray;
  }
  function spliceOut2(array3, idx, canEdit) {
    var newLen = array3.length - 1;
    if (canEdit && idx === newLen) {
      array3.pop();
      return array3;
    }
    var newArray = new Array(newLen);
    var after = 0;
    for (var ii2 = 0; ii2 < newLen; ii2++) {
      if (ii2 === idx) {
        after = 1;
      }
      newArray[ii2] = array3[ii2 + after];
    }
    return newArray;
  }
  var MAX_ARRAY_MAP_SIZE2 = SIZE2 / 4;
  var MAX_BITMAP_INDEXED_SIZE2 = SIZE2 / 2;
  var MIN_HASH_ARRAY_MAP_SIZE2 = SIZE2 / 4;
  var IS_LIST_SYMBOL2 = "@@__IMMUTABLE_LIST__@@";
  function isList2(maybeList) {
    return Boolean(maybeList && maybeList[IS_LIST_SYMBOL2]);
  }
  var List2 = function(IndexedCollection$$1) {
    function List3(value) {
      var empty2 = emptyList2();
      if (value === null || value === void 0) {
        return empty2;
      }
      if (isList2(value)) {
        return value;
      }
      var iter = IndexedCollection$$1(value);
      var size2 = iter.size;
      if (size2 === 0) {
        return empty2;
      }
      assertNotInfinite2(size2);
      if (size2 > 0 && size2 < SIZE2) {
        return makeList2(0, size2, SHIFT2, null, new VNode3(iter.toArray()));
      }
      return empty2.withMutations(function(list) {
        list.setSize(size2);
        iter.forEach(function(v4, i5) {
          return list.set(i5, v4);
        });
      });
    }
    if (IndexedCollection$$1)
      List3.__proto__ = IndexedCollection$$1;
    List3.prototype = Object.create(IndexedCollection$$1 && IndexedCollection$$1.prototype);
    List3.prototype.constructor = List3;
    List3.of = function of() {
      return this(arguments);
    };
    List3.prototype.toString = function toString9() {
      return this.__toString("List [", "]");
    };
    List3.prototype.get = function get24(index, notSetValue) {
      index = wrapIndex2(this, index);
      if (index >= 0 && index < this.size) {
        index += this._origin;
        var node = listNodeFor2(this, index);
        return node && node.array[index & MASK2];
      }
      return notSetValue;
    };
    List3.prototype.set = function set7(index, value) {
      return updateList2(this, index, value);
    };
    List3.prototype.remove = function remove7(index) {
      return !this.has(index) ? this : index === 0 ? this.shift() : index === this.size - 1 ? this.pop() : this.splice(index, 1);
    };
    List3.prototype.insert = function insert(index, value) {
      return this.splice(index, 0, value);
    };
    List3.prototype.clear = function clear3() {
      if (this.size === 0) {
        return this;
      }
      if (this.__ownerID) {
        this.size = this._origin = this._capacity = 0;
        this._level = SHIFT2;
        this._root = this._tail = null;
        this.__hash = void 0;
        this.__altered = true;
        return this;
      }
      return emptyList2();
    };
    List3.prototype.push = function push() {
      var values3 = arguments;
      var oldSize = this.size;
      return this.withMutations(function(list) {
        setListBounds2(list, 0, oldSize + values3.length);
        for (var ii2 = 0; ii2 < values3.length; ii2++) {
          list.set(oldSize + ii2, values3[ii2]);
        }
      });
    };
    List3.prototype.pop = function pop() {
      return setListBounds2(this, 0, -1);
    };
    List3.prototype.unshift = function unshift() {
      var values3 = arguments;
      return this.withMutations(function(list) {
        setListBounds2(list, -values3.length);
        for (var ii2 = 0; ii2 < values3.length; ii2++) {
          list.set(ii2, values3[ii2]);
        }
      });
    };
    List3.prototype.shift = function shift2() {
      return setListBounds2(this, 1);
    };
    List3.prototype.concat = function concat3() {
      var arguments$1 = arguments;
      var seqs = [];
      for (var i5 = 0; i5 < arguments.length; i5++) {
        var argument = arguments$1[i5];
        var seq = IndexedCollection$$1(
          typeof argument !== "string" && hasIterator2(argument) ? argument : [argument]
        );
        if (seq.size !== 0) {
          seqs.push(seq);
        }
      }
      if (seqs.length === 0) {
        return this;
      }
      if (this.size === 0 && !this.__ownerID && seqs.length === 1) {
        return this.constructor(seqs[0]);
      }
      return this.withMutations(function(list) {
        seqs.forEach(function(seq2) {
          return seq2.forEach(function(value) {
            return list.push(value);
          });
        });
      });
    };
    List3.prototype.setSize = function setSize(size2) {
      return setListBounds2(this, 0, size2);
    };
    List3.prototype.map = function map5(mapper, context) {
      var this$1 = this;
      return this.withMutations(function(list) {
        for (var i5 = 0; i5 < this$1.size; i5++) {
          list.set(i5, mapper.call(context, list.get(i5), i5, list));
        }
      });
    };
    List3.prototype.slice = function slice7(begin, end) {
      var size2 = this.size;
      if (wholeSlice2(begin, end, size2)) {
        return this;
      }
      return setListBounds2(
        this,
        resolveBegin2(begin, size2),
        resolveEnd2(end, size2)
      );
    };
    List3.prototype.__iterator = function __iterator3(type2, reverse5) {
      var index = reverse5 ? this.size : 0;
      var values3 = iterateList2(this, reverse5);
      return new Iterator3(function() {
        var value = values3();
        return value === DONE2 ? iteratorDone2() : iteratorValue2(type2, reverse5 ? --index : index++, value);
      });
    };
    List3.prototype.__iterate = function __iterate3(fn2, reverse5) {
      var this$1 = this;
      var index = reverse5 ? this.size : 0;
      var values3 = iterateList2(this, reverse5);
      var value;
      while ((value = values3()) !== DONE2) {
        if (fn2(value, reverse5 ? --index : index++, this$1) === false) {
          break;
        }
      }
      return index;
    };
    List3.prototype.__ensureOwner = function __ensureOwner3(ownerID) {
      if (ownerID === this.__ownerID) {
        return this;
      }
      if (!ownerID) {
        if (this.size === 0) {
          return emptyList2();
        }
        this.__ownerID = ownerID;
        this.__altered = false;
        return this;
      }
      return makeList2(
        this._origin,
        this._capacity,
        this._level,
        this._root,
        this._tail,
        ownerID,
        this.__hash
      );
    };
    return List3;
  }(IndexedCollection2);
  List2.isList = isList2;
  var ListPrototype2 = List2.prototype;
  ListPrototype2[IS_LIST_SYMBOL2] = true;
  ListPrototype2[DELETE2] = ListPrototype2.remove;
  ListPrototype2.merge = ListPrototype2.concat;
  ListPrototype2.setIn = setIn$$1;
  ListPrototype2.deleteIn = ListPrototype2.removeIn = deleteIn2;
  ListPrototype2.update = update$$1;
  ListPrototype2.updateIn = updateIn$12;
  ListPrototype2.mergeIn = mergeIn2;
  ListPrototype2.mergeDeepIn = mergeDeepIn2;
  ListPrototype2.withMutations = withMutations2;
  ListPrototype2.wasAltered = wasAltered3;
  ListPrototype2.asImmutable = asImmutable2;
  ListPrototype2["@@transducer/init"] = ListPrototype2.asMutable = asMutable2;
  ListPrototype2["@@transducer/step"] = function(result, arr) {
    return result.push(arr);
  };
  ListPrototype2["@@transducer/result"] = function(obj) {
    return obj.asImmutable();
  };
  var VNode3 = function VNode4(array3, ownerID) {
    this.array = array3;
    this.ownerID = ownerID;
  };
  VNode3.prototype.removeBefore = function removeBefore2(ownerID, level, index) {
    if (index === level ? 1 << level : this.array.length === 0) {
      return this;
    }
    var originIndex = index >>> level & MASK2;
    if (originIndex >= this.array.length) {
      return new VNode3([], ownerID);
    }
    var removingFirst = originIndex === 0;
    var newChild;
    if (level > 0) {
      var oldChild = this.array[originIndex];
      newChild = oldChild && oldChild.removeBefore(ownerID, level - SHIFT2, index);
      if (newChild === oldChild && removingFirst) {
        return this;
      }
    }
    if (removingFirst && !newChild) {
      return this;
    }
    var editable = editableVNode2(this, ownerID);
    if (!removingFirst) {
      for (var ii2 = 0; ii2 < originIndex; ii2++) {
        editable.array[ii2] = void 0;
      }
    }
    if (newChild) {
      editable.array[originIndex] = newChild;
    }
    return editable;
  };
  VNode3.prototype.removeAfter = function removeAfter2(ownerID, level, index) {
    if (index === (level ? 1 << level : 0) || this.array.length === 0) {
      return this;
    }
    var sizeIndex = index - 1 >>> level & MASK2;
    if (sizeIndex >= this.array.length) {
      return this;
    }
    var newChild;
    if (level > 0) {
      var oldChild = this.array[sizeIndex];
      newChild = oldChild && oldChild.removeAfter(ownerID, level - SHIFT2, index);
      if (newChild === oldChild && sizeIndex === this.array.length - 1) {
        return this;
      }
    }
    var editable = editableVNode2(this, ownerID);
    editable.array.splice(sizeIndex + 1);
    if (newChild) {
      editable.array[sizeIndex] = newChild;
    }
    return editable;
  };
  var DONE2 = {};
  function iterateList2(list, reverse5) {
    var left2 = list._origin;
    var right2 = list._capacity;
    var tailPos = getTailOffset2(right2);
    var tail = list._tail;
    return iterateNodeOrLeaf(list._root, list._level, 0);
    function iterateNodeOrLeaf(node, level, offset2) {
      return level === 0 ? iterateLeaf(node, offset2) : iterateNode(node, level, offset2);
    }
    function iterateLeaf(node, offset2) {
      var array3 = offset2 === tailPos ? tail && tail.array : node && node.array;
      var from = offset2 > left2 ? 0 : left2 - offset2;
      var to2 = right2 - offset2;
      if (to2 > SIZE2) {
        to2 = SIZE2;
      }
      return function() {
        if (from === to2) {
          return DONE2;
        }
        var idx = reverse5 ? --to2 : from++;
        return array3 && array3[idx];
      };
    }
    function iterateNode(node, level, offset2) {
      var values3;
      var array3 = node && node.array;
      var from = offset2 > left2 ? 0 : left2 - offset2 >> level;
      var to2 = (right2 - offset2 >> level) + 1;
      if (to2 > SIZE2) {
        to2 = SIZE2;
      }
      return function() {
        while (true) {
          if (values3) {
            var value = values3();
            if (value !== DONE2) {
              return value;
            }
            values3 = null;
          }
          if (from === to2) {
            return DONE2;
          }
          var idx = reverse5 ? --to2 : from++;
          values3 = iterateNodeOrLeaf(
            array3 && array3[idx],
            level - SHIFT2,
            offset2 + (idx << level)
          );
        }
      };
    }
  }
  function makeList2(origin, capacity, level, root2, tail, ownerID, hash3) {
    var list = Object.create(ListPrototype2);
    list.size = capacity - origin;
    list._origin = origin;
    list._capacity = capacity;
    list._level = level;
    list._root = root2;
    list._tail = tail;
    list.__ownerID = ownerID;
    list.__hash = hash3;
    list.__altered = false;
    return list;
  }
  var EMPTY_LIST;
  function emptyList2() {
    return EMPTY_LIST || (EMPTY_LIST = makeList2(0, 0, SHIFT2));
  }
  function updateList2(list, index, value) {
    index = wrapIndex2(list, index);
    if (index !== index) {
      return list;
    }
    if (index >= list.size || index < 0) {
      return list.withMutations(function(list2) {
        index < 0 ? setListBounds2(list2, index).set(0, value) : setListBounds2(list2, 0, index + 1).set(index, value);
      });
    }
    index += list._origin;
    var newTail = list._tail;
    var newRoot = list._root;
    var didAlter = MakeRef2();
    if (index >= getTailOffset2(list._capacity)) {
      newTail = updateVNode2(newTail, list.__ownerID, 0, index, value, didAlter);
    } else {
      newRoot = updateVNode2(
        newRoot,
        list.__ownerID,
        list._level,
        index,
        value,
        didAlter
      );
    }
    if (!GetRef(didAlter)) {
      return list;
    }
    if (list.__ownerID) {
      list._root = newRoot;
      list._tail = newTail;
      list.__hash = void 0;
      list.__altered = true;
      return list;
    }
    return makeList2(list._origin, list._capacity, list._level, newRoot, newTail);
  }
  function updateVNode2(node, ownerID, level, index, value, didAlter) {
    var idx = index >>> level & MASK2;
    var nodeHas = node && idx < node.array.length;
    if (!nodeHas && value === void 0) {
      return node;
    }
    var newNode;
    if (level > 0) {
      var lowerNode = node && node.array[idx];
      var newLowerNode = updateVNode2(
        lowerNode,
        ownerID,
        level - SHIFT2,
        index,
        value,
        didAlter
      );
      if (newLowerNode === lowerNode) {
        return node;
      }
      newNode = editableVNode2(node, ownerID);
      newNode.array[idx] = newLowerNode;
      return newNode;
    }
    if (nodeHas && node.array[idx] === value) {
      return node;
    }
    if (didAlter) {
      SetRef2(didAlter);
    }
    newNode = editableVNode2(node, ownerID);
    if (value === void 0 && idx === newNode.array.length - 1) {
      newNode.array.pop();
    } else {
      newNode.array[idx] = value;
    }
    return newNode;
  }
  function editableVNode2(node, ownerID) {
    if (ownerID && node && ownerID === node.ownerID) {
      return node;
    }
    return new VNode3(node ? node.array.slice() : [], ownerID);
  }
  function listNodeFor2(list, rawIndex) {
    if (rawIndex >= getTailOffset2(list._capacity)) {
      return list._tail;
    }
    if (rawIndex < 1 << list._level + SHIFT2) {
      var node = list._root;
      var level = list._level;
      while (node && level > 0) {
        node = node.array[rawIndex >>> level & MASK2];
        level -= SHIFT2;
      }
      return node;
    }
  }
  function setListBounds2(list, begin, end) {
    if (begin !== void 0) {
      begin |= 0;
    }
    if (end !== void 0) {
      end |= 0;
    }
    var owner = list.__ownerID || new OwnerID2();
    var oldOrigin = list._origin;
    var oldCapacity = list._capacity;
    var newOrigin = oldOrigin + begin;
    var newCapacity = end === void 0 ? oldCapacity : end < 0 ? oldCapacity + end : oldOrigin + end;
    if (newOrigin === oldOrigin && newCapacity === oldCapacity) {
      return list;
    }
    if (newOrigin >= newCapacity) {
      return list.clear();
    }
    var newLevel = list._level;
    var newRoot = list._root;
    var offsetShift = 0;
    while (newOrigin + offsetShift < 0) {
      newRoot = new VNode3(
        newRoot && newRoot.array.length ? [void 0, newRoot] : [],
        owner
      );
      newLevel += SHIFT2;
      offsetShift += 1 << newLevel;
    }
    if (offsetShift) {
      newOrigin += offsetShift;
      oldOrigin += offsetShift;
      newCapacity += offsetShift;
      oldCapacity += offsetShift;
    }
    var oldTailOffset = getTailOffset2(oldCapacity);
    var newTailOffset = getTailOffset2(newCapacity);
    while (newTailOffset >= 1 << newLevel + SHIFT2) {
      newRoot = new VNode3(
        newRoot && newRoot.array.length ? [newRoot] : [],
        owner
      );
      newLevel += SHIFT2;
    }
    var oldTail = list._tail;
    var newTail = newTailOffset < oldTailOffset ? listNodeFor2(list, newCapacity - 1) : newTailOffset > oldTailOffset ? new VNode3([], owner) : oldTail;
    if (oldTail && newTailOffset > oldTailOffset && newOrigin < oldCapacity && oldTail.array.length) {
      newRoot = editableVNode2(newRoot, owner);
      var node = newRoot;
      for (var level = newLevel; level > SHIFT2; level -= SHIFT2) {
        var idx = oldTailOffset >>> level & MASK2;
        node = node.array[idx] = editableVNode2(node.array[idx], owner);
      }
      node.array[oldTailOffset >>> SHIFT2 & MASK2] = oldTail;
    }
    if (newCapacity < oldCapacity) {
      newTail = newTail && newTail.removeAfter(owner, 0, newCapacity);
    }
    if (newOrigin >= newTailOffset) {
      newOrigin -= newTailOffset;
      newCapacity -= newTailOffset;
      newLevel = SHIFT2;
      newRoot = null;
      newTail = newTail && newTail.removeBefore(owner, 0, newOrigin);
    } else if (newOrigin > oldOrigin || newTailOffset < oldTailOffset) {
      offsetShift = 0;
      while (newRoot) {
        var beginIndex = newOrigin >>> newLevel & MASK2;
        if (beginIndex !== newTailOffset >>> newLevel & MASK2) {
          break;
        }
        if (beginIndex) {
          offsetShift += (1 << newLevel) * beginIndex;
        }
        newLevel -= SHIFT2;
        newRoot = newRoot.array[beginIndex];
      }
      if (newRoot && newOrigin > oldOrigin) {
        newRoot = newRoot.removeBefore(owner, newLevel, newOrigin - offsetShift);
      }
      if (newRoot && newTailOffset < oldTailOffset) {
        newRoot = newRoot.removeAfter(
          owner,
          newLevel,
          newTailOffset - offsetShift
        );
      }
      if (offsetShift) {
        newOrigin -= offsetShift;
        newCapacity -= offsetShift;
      }
    }
    if (list.__ownerID) {
      list.size = newCapacity - newOrigin;
      list._origin = newOrigin;
      list._capacity = newCapacity;
      list._level = newLevel;
      list._root = newRoot;
      list._tail = newTail;
      list.__hash = void 0;
      list.__altered = true;
      return list;
    }
    return makeList2(newOrigin, newCapacity, newLevel, newRoot, newTail);
  }
  function getTailOffset2(size2) {
    return size2 < SIZE2 ? 0 : size2 - 1 >>> SHIFT2 << SHIFT2;
  }
  var OrderedMap2 = function(Map$$1) {
    function OrderedMap3(value) {
      return value === null || value === void 0 ? emptyOrderedMap2() : isOrderedMap2(value) ? value : emptyOrderedMap2().withMutations(function(map5) {
        var iter = KeyedCollection2(value);
        assertNotInfinite2(iter.size);
        iter.forEach(function(v4, k4) {
          return map5.set(k4, v4);
        });
      });
    }
    if (Map$$1)
      OrderedMap3.__proto__ = Map$$1;
    OrderedMap3.prototype = Object.create(Map$$1 && Map$$1.prototype);
    OrderedMap3.prototype.constructor = OrderedMap3;
    OrderedMap3.of = function of() {
      return this(arguments);
    };
    OrderedMap3.prototype.toString = function toString9() {
      return this.__toString("OrderedMap {", "}");
    };
    OrderedMap3.prototype.get = function get24(k4, notSetValue) {
      var index = this._map.get(k4);
      return index !== void 0 ? this._list.get(index)[1] : notSetValue;
    };
    OrderedMap3.prototype.clear = function clear3() {
      if (this.size === 0) {
        return this;
      }
      if (this.__ownerID) {
        this.size = 0;
        this._map.clear();
        this._list.clear();
        return this;
      }
      return emptyOrderedMap2();
    };
    OrderedMap3.prototype.set = function set7(k4, v4) {
      return updateOrderedMap2(this, k4, v4);
    };
    OrderedMap3.prototype.remove = function remove7(k4) {
      return updateOrderedMap2(this, k4, NOT_SET2);
    };
    OrderedMap3.prototype.wasAltered = function wasAltered5() {
      return this._map.wasAltered() || this._list.wasAltered();
    };
    OrderedMap3.prototype.__iterate = function __iterate3(fn2, reverse5) {
      var this$1 = this;
      return this._list.__iterate(
        function(entry) {
          return entry && fn2(entry[1], entry[0], this$1);
        },
        reverse5
      );
    };
    OrderedMap3.prototype.__iterator = function __iterator3(type2, reverse5) {
      return this._list.fromEntrySeq().__iterator(type2, reverse5);
    };
    OrderedMap3.prototype.__ensureOwner = function __ensureOwner3(ownerID) {
      if (ownerID === this.__ownerID) {
        return this;
      }
      var newMap = this._map.__ensureOwner(ownerID);
      var newList = this._list.__ensureOwner(ownerID);
      if (!ownerID) {
        if (this.size === 0) {
          return emptyOrderedMap2();
        }
        this.__ownerID = ownerID;
        this._map = newMap;
        this._list = newList;
        return this;
      }
      return makeOrderedMap2(newMap, newList, ownerID, this.__hash);
    };
    return OrderedMap3;
  }(Map3);
  OrderedMap2.isOrderedMap = isOrderedMap2;
  OrderedMap2.prototype[IS_ORDERED_SYMBOL2] = true;
  OrderedMap2.prototype[DELETE2] = OrderedMap2.prototype.remove;
  function makeOrderedMap2(map5, list, ownerID, hash3) {
    var omap = Object.create(OrderedMap2.prototype);
    omap.size = map5 ? map5.size : 0;
    omap._map = map5;
    omap._list = list;
    omap.__ownerID = ownerID;
    omap.__hash = hash3;
    return omap;
  }
  var EMPTY_ORDERED_MAP2;
  function emptyOrderedMap2() {
    return EMPTY_ORDERED_MAP2 || (EMPTY_ORDERED_MAP2 = makeOrderedMap2(emptyMap2(), emptyList2()));
  }
  function updateOrderedMap2(omap, k4, v4) {
    var map5 = omap._map;
    var list = omap._list;
    var i5 = map5.get(k4);
    var has9 = i5 !== void 0;
    var newMap;
    var newList;
    if (v4 === NOT_SET2) {
      if (!has9) {
        return omap;
      }
      if (list.size >= SIZE2 && list.size >= map5.size * 2) {
        newList = list.filter(function(entry, idx) {
          return entry !== void 0 && i5 !== idx;
        });
        newMap = newList.toKeyedSeq().map(function(entry) {
          return entry[0];
        }).flip().toMap();
        if (omap.__ownerID) {
          newMap.__ownerID = newList.__ownerID = omap.__ownerID;
        }
      } else {
        newMap = map5.remove(k4);
        newList = i5 === list.size - 1 ? list.pop() : list.set(i5, void 0);
      }
    } else if (has9) {
      if (v4 === list.get(i5)[1]) {
        return omap;
      }
      newMap = map5;
      newList = list.set(i5, [k4, v4]);
    } else {
      newMap = map5.set(k4, list.size);
      newList = list.set(list.size, [k4, v4]);
    }
    if (omap.__ownerID) {
      omap.size = newMap.size;
      omap._map = newMap;
      omap._list = newList;
      omap.__hash = void 0;
      return omap;
    }
    return makeOrderedMap2(newMap, newList);
  }
  function isSortedMap(maybeSortedMap) {
    return isMap2(maybeSortedMap) && isSorted(maybeSortedMap);
  }
  var SortedMapNode = function SortedMapNode2(comparator, options, ownerID) {
    this.comparator = comparator;
    this.options = options;
    this.ownerID = ownerID;
  };
  SortedMapNode.prototype.getComparator = function getComparator() {
  };
  SortedMapNode.prototype.get = function get19(key, notSetValue) {
  };
  SortedMapNode.prototype.upsert = function upsert(ownerID, key, value, didChangeSize, didAlter) {
  };
  SortedMapNode.prototype.remove = function remove5(ownerID, key, didChangeSize, didAlter) {
  };
  SortedMapNode.prototype.fastRemove = function fastRemove(ownerID, key, didChangeSize, didAlter) {
  };
  SortedMapNode.prototype.iterate = function iterate(fn2, reverse5) {
  };
  SortedMapNode.prototype.print = function print(level, maxDepth) {
  };
  SortedMapNode.prototype.checkConsistency = function checkConsistency(printFlag) {
  };
  var SortedMapPacker = function SortedMapPacker2() {
  };
  SortedMapPacker.prototype.pack = function pack(comparator, options, ownerID, collection) {
  };
  var SortedMapNodeFactory = function SortedMapNodeFactory2() {
  };
  SortedMapNodeFactory.prototype.createNode = function createNode(comparator, options, ownerID, entries5, nodes) {
  };
  SortedMapNodeFactory.prototype.createPacker = function createPacker() {
  };
  SortedMapNodeFactory.prototype.createIterator = function createIterator(map5, type2, reverse5) {
  };
  var DEFAULT_TYPE = "btree";
  var DEFAULT_BTREE_ORDER = 33;
  var SortedMapBtreeNode = function(SortedMapNode$$1) {
    function SortedMapBtreeNode2(comparator, options, ownerID, entries5, nodes) {
      SortedMapNode$$1.call(this, comparator, options, ownerID);
      this.entries = entries5;
      this.nodes = nodes;
      this.btreeOrder = options && options.btreeOrder ? options.btreeOrder : DEFAULT_BTREE_ORDER;
      this.btreeNodeSplitSize = Math.floor((this.btreeOrder - 1) / 2);
      this._calcSize();
      return this;
    }
    if (SortedMapNode$$1)
      SortedMapBtreeNode2.__proto__ = SortedMapNode$$1;
    SortedMapBtreeNode2.prototype = Object.create(SortedMapNode$$1 && SortedMapNode$$1.prototype);
    SortedMapBtreeNode2.prototype.constructor = SortedMapBtreeNode2;
    SortedMapBtreeNode2.prototype._calcSize = function _calcSize() {
      var this$1 = this;
      this.size = 0;
      for (var i5 = 0; i5 < this.entries.length; i5++) {
        if (this$1.entries[i5][1] !== NOT_SET2) {
          this$1.size++;
        }
      }
      if (this.nodes) {
        for (var i$1 = 0; i$1 < this.nodes.length; i$1++) {
          this$1.size += this$1.nodes[i$1].size;
        }
      }
    };
    SortedMapBtreeNode2.prototype.getComparator = function getComparator2() {
      return this.comparator;
    };
    SortedMapBtreeNode2.prototype.get = function get24(key, notSetValue) {
      var entries5 = this.entries;
      var didMatch = MakeRef2();
      var idx = binarySearch(this.comparator, entries5, key, didMatch);
      if (GetRef(didMatch)) {
        var value = entries5[idx][1];
        return value === NOT_SET2 ? notSetValue : value;
      }
      var nodes = this.nodes;
      if (nodes) {
        var value$1 = nodes[idx].get(key, notSetValue);
        return value$1 === NOT_SET2 ? notSetValue : value$1;
      }
      return notSetValue;
    };
    SortedMapBtreeNode2.prototype.entryAt = function entryAt(index) {
      var didMatch = MakeRef2();
      var subIndex = MakeRef2();
      var idx = this.indexSearch(index, didMatch, subIndex);
      if (GetRef(didMatch)) {
        var entry = this.entries[idx];
        var key = entry[0];
        var value = entry[1];
        return [key, value];
      }
      return this.nodes[idx].entryAt(subIndex.value);
    };
    SortedMapBtreeNode2.prototype.keyAt = function keyAt(index) {
      var didMatch = MakeRef2();
      var subIndex = MakeRef2();
      var idx = this.indexSearch(index, didMatch, subIndex);
      if (GetRef(didMatch)) {
        var entry = this.entries[idx];
        var key = entry[0];
        return key;
      }
      return this.nodes[idx].keyAt(subIndex.value);
    };
    SortedMapBtreeNode2.prototype.valueAt = function valueAt(index) {
      var didMatch = MakeRef2();
      var subIndex = MakeRef2();
      var idx = this.indexSearch(index, didMatch, subIndex);
      if (GetRef(didMatch)) {
        var entry = this.entries[idx];
        var value = entry[1];
        return value;
      }
      return this.nodes[idx].valueAt(subIndex.value);
    };
    SortedMapBtreeNode2.prototype.firstKey = function firstKey() {
      var nodes = this.nodes;
      if (nodes) {
        return nodes[0].firstKey();
      }
      var entries5 = this.entries;
      return entries5[0][0];
    };
    SortedMapBtreeNode2.prototype.lastKey = function lastKey() {
      var nodes = this.nodes;
      if (nodes) {
        return nodes[nodes.length - 1].lastKey();
      }
      var entries5 = this.entries;
      return entries5[entries5.length - 1][0];
    };
    SortedMapBtreeNode2.prototype.upsert = function upsert2(ownerID, key, value, didChangeSize, didAlter, outKvn) {
      var ret = this._upsert(
        ownerID,
        key,
        value,
        didChangeSize,
        didAlter,
        outKvn
      );
      if (this === ret && GetRef(didChangeSize)) {
        this.size++;
      }
      return ret;
    };
    SortedMapBtreeNode2.prototype._upsert = function _upsert(ownerID, key, value, didChangeSize, didAlter, outKvn) {
      if (!outKvn) {
        var subKvn = [];
        var newRoot = this.upsert(
          ownerID,
          key,
          value,
          didChangeSize,
          didAlter,
          subKvn
        );
        if (subKvn[0]) {
          var entries$1 = [subKvn[0]];
          var nodes$1 = [newRoot, subKvn[1]];
          newRoot = new SortedMapBtreeNode2(
            this.comparator,
            this.options,
            ownerID,
            entries$1,
            nodes$1
          );
        }
        return newRoot;
      }
      var entries5 = this.entries;
      var didMatch = MakeRef2();
      var idx = binarySearch(this.comparator, entries5, key, didMatch);
      var exists = GetRef(didMatch);
      var nodes = this.nodes;
      var canEdit = ownerID && ownerID === this.ownerID;
      var newEntries;
      var newNodes;
      if (exists) {
        if (entries5[idx][1] === value) {
          return this;
        } else {
          var entry = [key, value];
          SetRef2(didAlter);
          if (entries5[idx][1] === NOT_SET2) {
            SetRef2(didChangeSize);
          }
          newEntries = setIn$2(entries5, idx, entry, canEdit);
          newNodes = clone(nodes, canEdit);
        }
      } else {
        if (nodes) {
          var subKvn$1 = [];
          var updatedNode = nodes[idx].upsert(
            ownerID,
            key,
            value,
            didChangeSize,
            didAlter,
            subKvn$1
          );
          if (GetRef(didAlter)) {
            if (subKvn$1[0]) {
              if (entries5.length >= this.btreeOrder - 1) {
                return this.splitNode(
                  idx,
                  updatedNode,
                  subKvn$1,
                  outKvn,
                  ownerID,
                  canEdit
                );
              } else {
                newEntries = spliceIn$1(entries5, idx, subKvn$1[0], canEdit);
                newNodes = spliceIn$1(nodes, idx + 1, subKvn$1[1], canEdit);
                newNodes[idx] = updatedNode;
              }
            } else {
              newEntries = clone(entries5, canEdit);
              newNodes = setIn$2(nodes, idx, updatedNode, canEdit);
            }
          } else {
            return this;
          }
        } else {
          var entry$1 = [key, value];
          SetRef2(didAlter);
          SetRef2(didChangeSize);
          if (entries5.length >= this.btreeOrder - 1) {
            return this.splitLeaf(idx, entry$1, outKvn, ownerID, canEdit);
          } else {
            newEntries = spliceIn$1(entries5, idx, entry$1, canEdit);
          }
        }
      }
      return this.makeNewNode(newEntries, newNodes, ownerID, canEdit);
    };
    SortedMapBtreeNode2.prototype.fastRemove = function fastRemove2(ownerID, key, didChangeSize, didAlter) {
      var ret = this._fastRemove(ownerID, key, didChangeSize, didAlter);
      if (this === ret && GetRef(didChangeSize)) {
        this.size--;
      }
      return ret;
    };
    SortedMapBtreeNode2.prototype._fastRemove = function _fastRemove(ownerID, key, didChangeSize, didAlter) {
      var entries5 = this.entries;
      var didMatch = MakeRef2();
      var idx = binarySearch(this.comparator, entries5, key, didMatch);
      var exists = GetRef(didMatch);
      var nodes = this.nodes;
      var canEdit = ownerID && ownerID === this.ownerID;
      var newEntries;
      var newNodes;
      if (exists) {
        if (entries5[idx][1] === NOT_SET2) {
          return this;
        }
        SetRef2(didAlter);
        SetRef2(didChangeSize);
        var newEntry = [key, NOT_SET2];
        newEntries = setIn$2(entries5, idx, newEntry, canEdit);
        newNodes = clone(nodes, canEdit);
      } else {
        if (nodes) {
          var updatedNode = nodes[idx].fastRemove(
            ownerID,
            key,
            didChangeSize,
            didAlter
          );
          if (GetRef(didAlter)) {
            newEntries = clone(entries5, canEdit);
            newNodes = setIn$2(nodes, idx, updatedNode, canEdit);
          } else {
            return this;
          }
        } else {
          return this;
        }
      }
      return this.makeNewNode(newEntries, newNodes, ownerID, canEdit);
    };
    SortedMapBtreeNode2.prototype.remove = function remove7(ownerID, key, didChangeSize, didAlter, parent, parentIdx, outKvn) {
      var ret = this._remove(
        ownerID,
        key,
        didChangeSize,
        didAlter,
        parent,
        parentIdx,
        outKvn
      );
      if (this === ret && GetRef(didChangeSize)) {
        this.size--;
      }
      return ret;
    };
    SortedMapBtreeNode2.prototype._remove = function _remove(ownerID, key, didChangeSize, didAlter, parent, parentIdx, outKvn) {
      var entries5 = this.entries;
      var didMatch = MakeRef2();
      var idx = binarySearch(this.comparator, entries5, key, didMatch);
      var exists = GetRef(didMatch);
      var nodes = this.nodes;
      var canEdit = ownerID && ownerID === this.ownerID;
      var newEntries;
      var newNodes;
      if (exists) {
        if (nodes) {
          if (entries5[idx][1] === NOT_SET2) {
            return this;
          }
          SetRef2(didAlter);
          SetRef2(didChangeSize);
          var newEntry = [key, NOT_SET2];
          newEntries = setIn$2(entries5, idx, newEntry, canEdit);
          newNodes = clone(nodes, canEdit);
        } else {
          if (entries5[idx][1] === NOT_SET2) {
            return this;
          }
          SetRef2(didAlter);
          SetRef2(didChangeSize);
          if (entries5.length <= this.btreeNodeSplitSize && parent) {
            return this.consolidateLeaf(
              ownerID,
              idx,
              parent,
              parentIdx,
              canEdit,
              outKvn
            );
          }
          newEntries = spliceOut$1(entries5, idx, canEdit);
        }
      } else {
        if (nodes) {
          var subKvn = [void 0, void 0, void 0];
          var updatedNode = nodes[idx].remove(
            ownerID,
            key,
            didChangeSize,
            didAlter,
            this,
            idx,
            subKvn
          );
          if (GetRef(didAlter)) {
            return this.spliceNode(
              ownerID,
              idx,
              updatedNode,
              parent,
              parentIdx,
              canEdit,
              subKvn,
              outKvn
            );
          } else {
            return this;
          }
        } else {
          return this;
        }
      }
      return this.makeNewNode(newEntries, newNodes, ownerID, canEdit);
    };
    SortedMapBtreeNode2.prototype.makeNewNode = function makeNewNode(newEntries, newNodes, ownerID, canEdit) {
      if (newEntries.length === 0) {
        if (newNodes) {
          return newNodes[0];
        } else {
          return;
        }
      }
      if (canEdit) {
        this.entries = newEntries;
        this.nodes = newNodes;
        this._calcSize();
        return this;
      }
      return new SortedMapBtreeNode2(
        this.comparator,
        this.options,
        ownerID,
        newEntries,
        newNodes
      );
    };
    SortedMapBtreeNode2.prototype.print = function print2(level, maxDepth) {
      function w4(s4) {
        process.stdout.write(s4);
      }
      if (maxDepth && level >= maxDepth) {
        return;
      }
      var nodes = this.nodes;
      var entries5 = this.entries;
      w4(indent(level));
      w4("SIZE=" + this.size + "\n");
      if (nodes) {
        for (var i5 = 0; i5 < nodes.length; i5++) {
          var node = nodes[i5];
          w4(indent(level));
          if (!node || !(node instanceof SortedMapNode$$1)) {
            w4(
              "+ CORRUPT NODE[" + i5 + "] (L" + level + ") " + JSON.stringify(node) + "\n"
            );
          } else {
            if (node.nodes) {
              w4("+ NODE[" + i5 + "] (L" + level + ")\n");
            } else {
              w4("+ LEAF[" + i5 + "] (L" + level + ")\n");
            }
            node.print(level + 1, maxDepth);
          }
          if (i5 < entries5.length) {
            w4(indent(level));
            var entry = entries5[i5];
            if (!entry) {
              w4("- CORRUPT ENTRY[" + i5 + "]: " + JSON.stringify(entry) + "\n");
            } else if (entry[1] === NOT_SET2) {
              w4("- REMOVED ENTRY[" + i5 + "]: " + JSON.stringify(entry[0]) + "\n");
            } else {
              w4("- ENTRY[" + i5 + "]: " + JSON.stringify(entry[0]) + "\n");
            }
          }
        }
      } else {
        for (var i$1 = 0; i$1 < entries5.length; i$1++) {
          w4(indent(level));
          var entry$1 = entries5[i$1];
          if (!entry$1) {
            w4("- CORRUPT ENTRY[" + i$1 + "]: " + JSON.stringify(entry$1) + "\n");
          } else if (entry$1[1] === NOT_SET2) {
            w4("- REMOVED ENTRY[" + i$1 + "]: " + JSON.stringify(entry$1[0]) + "\n");
          } else {
            w4("- ENTRY[" + i$1 + "]: " + JSON.stringify(entry$1[0]) + "\n");
          }
        }
      }
    };
    SortedMapBtreeNode2.prototype.checkConsistency = function checkConsistency2(printFlag, level, n4, leafLevel) {
      var this$1 = this;
      function w4(f4) {
        if (printFlag) {
          var s4 = f4();
          if (s4 !== void 0) {
            process.stdout.write(indent(level));
            process.stdout.write(s4);
          }
        }
      }
      if (!level) {
        level = 0;
      }
      if (!n4) {
        n4 = 0;
      }
      if (!leafLevel) {
        leafLevel = [void 0];
      }
      if (this.nodes) {
        w4(function() {
          return "+ Checking NODE[" + n4 + "] (L" + level + ")\n";
        });
      } else {
        w4(function() {
          return "+ Checking LEAF[" + n4 + "] (L" + level + ")\n";
        });
        if (leafLevel[0] === void 0) {
          leafLevel[0] = level;
        } else if (leafLevel[0] !== level) {
          failed(112, "leaves are not on the same level");
        }
      }
      function failed(code2, msg) {
        var s4 = "Consistency Check Failed with error code " + code2 + ": " + msg;
        if (printFlag) {
          w4(function() {
            return s4 + "\n";
          });
          return code2;
        }
        throw new Error(s4);
      }
      var entries5 = this.entries;
      var nodes = this.nodes;
      if (!entries5) {
        return failed(101, "empty entries in a node");
      }
      if (!(entries5.length > 0 && entries5.length < this.btreeOrder)) {
        return failed(
          102,
          "entries length is out of range from 0 to (btreeOrder-1)"
        );
      }
      if (level > 0 && !(this.btreeNodeSplitSize <= entries5.length)) {
        return failed(103, "entries length is shorter than btreeNodeSplitSize");
      }
      if (nodes && !(nodes.length === entries5.length + 1)) {
        return failed(104, "nodes length out of sync with entries length");
      }
      var loop = function(i6) {
        var entry = entries5[i6];
        if (!entry) {
          return { v: failed(105, "empty entry") };
        }
        if (!(typeof entry === "object" && entry instanceof Array)) {
          return { v: failed(106, "entry is not Array") };
        }
        if (!(entry.length === 2)) {
          return { v: failed(107, "entry is not Array[2]") };
        }
        if (entry[1] === NOT_SET2) {
          w4(
            function() {
              return "    - Checking REMOVED ENTRY[" + i6 + "]: " + JSON.stringify(entry[0]) + "\n";
            }
          );
          if (!nodes) {
            failed(113, "NOT_SET values are not allowed in leaves");
          }
        } else {
          w4(
            function() {
              return "    - Checking ENTRY[" + i6 + "]: " + JSON.stringify(entry[0]) + "\n";
            }
          );
        }
      };
      for (var i5 = 0; i5 < entries5.length; i5++) {
        var returned = loop(i5);
        if (returned)
          return returned.v;
      }
      for (var i$1 = 0; i$1 < entries5.length - 1; i$1++) {
        if (!(this$1.comparator(entries5[i$1][0], entries5[i$1 + 1][0]) < 0)) {
          return failed(108, "the entries are not sorted");
        }
      }
      if (nodes) {
        for (var i$2 = 0; i$2 < nodes.length; i$2++) {
          var node = nodes[i$2];
          if (!node || !(node instanceof SortedMapNode$$1)) {
            return failed(109, "empty or corrupt node");
          }
          var code = node.checkConsistency(printFlag, level + 1, i$2, leafLevel);
          if (code !== 0) {
            return code;
          }
          if (i$2 > 0 && !(this$1.comparator(entries5[i$2 - 1][0], node.firstKey()) < 0)) {
            return failed(110, "the entry and right node not sorted");
          }
          if (i$2 < entries5.length && !(this$1.comparator(node.lastKey(), entries5[i$2][0]) < 0)) {
            return failed(111, "the entry and left node not sorted");
          }
        }
      }
      return 0;
    };
    return SortedMapBtreeNode2;
  }(SortedMapNode);
  SortedMapBtreeNode.prototype.iterate = function(fn2, reverse5) {
    var entries5 = this.entries;
    var nodes = this.nodes;
    if (nodes) {
      for (var ii2 = 0, maxIndex = entries5.length - 1; ii2 <= maxIndex; ii2++) {
        var node = nodes[reverse5 ? maxIndex + 1 - ii2 : ii2];
        if (node.iterate(fn2, reverse5) === false) {
          return false;
        }
        var entry = entries5[reverse5 ? maxIndex - ii2 : ii2];
        if (entry[1] === NOT_SET2) {
          continue;
        }
        if (fn2(entry) === false) {
          return false;
        }
      }
      var node$1 = nodes[reverse5 ? 0 : nodes.length - 1];
      if (node$1.iterate(fn2, reverse5) === false) {
        return false;
      }
    } else {
      for (var ii$1 = 0, maxIndex$1 = entries5.length - 1; ii$1 <= maxIndex$1; ii$1++) {
        var entry$1 = entries5[reverse5 ? maxIndex$1 - ii$1 : ii$1];
        if (entry$1[1] === NOT_SET2) {
          continue;
        }
        if (fn2(entry$1) === false) {
          return false;
        }
      }
    }
    return true;
  };
  SortedMapBtreeNode.prototype.iterateFrom = function(from, fn2, reverse5) {
    var this$1 = this;
    if (reverse5) {
      return this.iterate(function(entry2) {
        if (this$1.comparator(from, entry2[0]) <= 0) {
          return fn2(entry2);
        }
        return true;
      }, reverse5);
    }
    var entries5 = this.entries;
    var nodes = this.nodes;
    var didMatch = MakeRef2();
    var idx = binarySearch(this.comparator, entries5, from, didMatch);
    if (nodes) {
      for (var ii2 = idx, maxIndex = entries5.length - 1; ii2 <= maxIndex; ii2++) {
        var node = nodes[ii2];
        if (ii2 === idx && !GetRef(didMatch)) {
          if (node.iterateFrom(from, fn2, reverse5) === false) {
            return false;
          }
        } else if (ii2 > idx) {
          if (node.iterate(fn2, reverse5) === false) {
            return false;
          }
        }
        var entry = entries5[ii2];
        if (entry[1] === NOT_SET2) {
          continue;
        }
        if (fn2(entry) === false) {
          return false;
        }
      }
      var node$1 = nodes[nodes.length - 1];
      if (idx === nodes.length - 1) {
        if (node$1.iterateFrom(from, fn2, reverse5) === false) {
          return false;
        }
      } else if (node$1.iterate(fn2, reverse5) === false) {
        return false;
      }
    } else {
      for (var ii$1 = idx, maxIndex$1 = entries5.length - 1; ii$1 <= maxIndex$1; ii$1++) {
        var entry$1 = entries5[ii$1];
        if (entry$1[1] === NOT_SET2) {
          continue;
        }
        if (fn2(entry$1) === false) {
          return false;
        }
      }
    }
    return true;
  };
  SortedMapBtreeNode.prototype.iterateFromBackwards = function(from, fn2, reverse5) {
    var this$1 = this;
    if (reverse5) {
      return this.iterate(function(entry2) {
        if (this$1.comparator(entry2[0], from) <= 0) {
          return fn2(entry2);
        }
        return true;
      }, false);
    }
    var entries5 = this.entries;
    var nodes = this.nodes;
    var didMatch = MakeRef2();
    var idx = binarySearch(this.comparator, entries5, from, didMatch);
    if (nodes) {
      for (var ii2 = idx; ii2 >= 0; ii2--) {
        if (ii2 < idx || GetRef(didMatch)) {
          var entry = entries5[ii2];
          if (entry[1] === NOT_SET2) {
            continue;
          }
          if (fn2(entry) === false) {
            return false;
          }
        }
        var node = nodes[ii2];
        if (ii2 === idx && !GetRef(didMatch)) {
          if (node.iterateFromBackwards(from, fn2, reverse5) === false) {
            return false;
          }
        } else if (node.iterate(fn2, true) === false) {
          return false;
        }
      }
    } else {
      for (var ii$1 = GetRef(didMatch) ? idx : idx - 1; ii$1 >= 0; ii$1--) {
        var entry$1 = entries5[ii$1];
        if (entry$1[1] === NOT_SET2) {
          continue;
        }
        if (fn2(entry$1) === false) {
          return false;
        }
      }
    }
    return true;
  };
  SortedMapBtreeNode.prototype.iterateFromIndex = function(index, fn2) {
    var entries5 = this.entries;
    var nodes = this.nodes;
    var didMatch = MakeRef2();
    var subIndex = MakeRef2();
    var idx = this.indexSearch(index, didMatch, subIndex);
    if (nodes) {
      for (var ii2 = idx, maxIndex = entries5.length - 1; ii2 <= maxIndex; ii2++) {
        var node = nodes[ii2];
        if (ii2 === idx && !GetRef(didMatch)) {
          if (node.iterateFromIndex(subIndex.value, fn2) === false) {
            return false;
          }
        } else if (ii2 > idx) {
          if (node.iterate(fn2, false) === false) {
            return false;
          }
        }
        var entry = entries5[ii2];
        if (entry[1] === NOT_SET2) {
          continue;
        }
        if (fn2(entry) === false) {
          return false;
        }
      }
      var node$1 = nodes[nodes.length - 1];
      if (idx === nodes.length - 1) {
        if (node$1.iterateFromIndex(subIndex.value, fn2) === false) {
          return false;
        }
      } else if (node$1.iterate(fn2, false) === false) {
        return false;
      }
    } else {
      for (var ii$1 = idx, maxIndex$1 = entries5.length - 1; ii$1 <= maxIndex$1; ii$1++) {
        var entry$1 = entries5[ii$1];
        if (entry$1[1] === NOT_SET2) {
          continue;
        }
        if (fn2(entry$1) === false) {
          return false;
        }
      }
    }
    return true;
  };
  SortedMapBtreeNode.prototype.iterateFromIndexBackwards = function(index, fn2) {
    var entries5 = this.entries;
    var nodes = this.nodes;
    var didMatch = MakeRef2();
    var subIndex = MakeRef2();
    var idx = this.indexSearch(index, didMatch, subIndex);
    if (nodes) {
      for (var ii2 = idx; ii2 >= 0; ii2--) {
        if (ii2 < idx || GetRef(didMatch)) {
          var entry = entries5[ii2];
          if (entry[1] === NOT_SET2) {
            continue;
          }
          if (fn2(entry) === false) {
            return false;
          }
        }
        var node = nodes[ii2];
        if (ii2 === idx && !GetRef(didMatch)) {
          if (node.iterateFromIndexBackwards(subIndex.value, fn2) === false) {
            return false;
          }
        } else if (node.iterate(fn2, true) === false) {
          return false;
        }
      }
    } else {
      for (var ii$1 = GetRef(didMatch) ? idx : idx - 1; ii$1 >= 0; ii$1--) {
        var entry$1 = entries5[ii$1];
        if (entry$1[1] === NOT_SET2) {
          continue;
        }
        if (fn2(entry$1) === false) {
          return false;
        }
      }
    }
    return true;
  };
  var SortedMapBtreeNodeIterator = function(Iterator$$1) {
    function SortedMapBtreeNodeIterator2(map5, type2, reverse5) {
      this._type = type2;
      this._reverse = reverse5;
      this._stack = map5._root && mapIteratorFrame$1(map5._root);
    }
    if (Iterator$$1)
      SortedMapBtreeNodeIterator2.__proto__ = Iterator$$1;
    SortedMapBtreeNodeIterator2.prototype = Object.create(Iterator$$1 && Iterator$$1.prototype);
    SortedMapBtreeNodeIterator2.prototype.constructor = SortedMapBtreeNodeIterator2;
    SortedMapBtreeNodeIterator2.prototype.next = function next() {
      var this$1 = this;
      var type2 = this._type;
      var stack = this._stack;
      while (stack) {
        var node = stack.node;
        var index = stack.index++;
        if (node.nodes) {
          var maxIndex = node.entries.length + node.nodes.length - 1;
          if (index <= maxIndex) {
            if (index % 2 === 0) {
              index /= 2;
              var subNode = node.nodes[this$1._reverse ? node.nodes.length - 1 - index : index];
              if (subNode) {
                stack = this$1._stack = mapIteratorFrame$1(subNode, stack);
              }
              continue;
            } else {
              index = (index - 1) / 2;
              var entry = node.entries[this$1._reverse ? node.entries.length - 1 - index : index];
              if (entry[1] === NOT_SET2) {
                continue;
              }
              return mapIteratorValue$1(type2, entry);
            }
          }
        } else {
          var maxIndex$1 = node.entries.length - 1;
          if (index <= maxIndex$1) {
            var entry$1 = node.entries[this$1._reverse ? maxIndex$1 - index : index];
            if (entry$1[1] === NOT_SET2) {
              continue;
            }
            return mapIteratorValue$1(type2, entry$1);
          }
        }
        stack = this$1._stack = this$1._stack.__prev;
      }
      return iteratorDone2();
    };
    return SortedMapBtreeNodeIterator2;
  }(Iterator3);
  function mapIteratorValue$1(type2, entry) {
    return iteratorValue2(type2, entry[0], entry[1]);
  }
  function mapIteratorFrame$1(node, prev) {
    return {
      node,
      index: 0,
      __prev: prev
    };
  }
  function allocArray(n4) {
    var a5 = new Array(n4);
    return a5;
  }
  var _indentStr = new Array(120).join(" ");
  function indent(level) {
    var indentCnt = 4 * level;
    if (indentCnt > _indentStr.length) {
      indentCnt = _indentStr.length;
    }
    return _indentStr.substring(0, indentCnt);
  }
  function clone(array3, canEdit) {
    if (array3 === void 0) {
      return array3;
    }
    if (canEdit) {
      return array3;
    }
    var newLen = array3.length;
    var newArray = allocArray(newLen);
    for (var ii2 = 0; ii2 < newLen; ii2++) {
      newArray[ii2] = array3[ii2];
    }
    return newArray;
  }
  function setIn$2(array3, idx, val, canEdit) {
    if (canEdit) {
      array3[idx] = val;
      return array3;
    }
    var newLen = array3.length;
    var newArray = allocArray(newLen);
    for (var ii2 = 0; ii2 < idx; ii2++) {
      newArray[ii2] = array3[ii2];
    }
    newArray[idx] = val;
    for (var ii$1 = idx + 1; ii$1 < newLen; ii$1++) {
      newArray[ii$1] = array3[ii$1];
    }
    return newArray;
  }
  function spliceIn$1(array3, idx, val, canEdit) {
    var newLen = array3.length + 1;
    if (canEdit) {
      for (var ii2 = newLen - 1, stop = idx + 1; ii2 >= stop; ii2--) {
        array3[ii2] = array3[ii2 - 1];
      }
      array3[idx] = val;
      return array3;
    }
    var newArray = allocArray(newLen);
    for (var ii$1 = 0; ii$1 < idx; ii$1++) {
      newArray[ii$1] = array3[ii$1];
    }
    newArray[idx] = val;
    for (var ii$2 = idx + 1; ii$2 < newLen; ii$2++) {
      newArray[ii$2] = array3[ii$2 - 1];
    }
    return newArray;
  }
  function spliceOut$1(array3, idx, canEdit) {
    var newLen = array3.length - 1;
    if (canEdit) {
      for (var ii2 = idx; ii2 < newLen; ii2++) {
        array3[ii2] = array3[ii2 + 1];
      }
      array3.length = newLen;
      return array3;
    }
    var newArray = allocArray(newLen);
    for (var ii$1 = 0; ii$1 < idx; ii$1++) {
      newArray[ii$1] = array3[ii$1];
    }
    for (var ii$2 = idx; ii$2 < newLen; ii$2++) {
      newArray[ii$2] = array3[ii$2 + 1];
    }
    return newArray;
  }
  function spliceOutN(array3, idx, n4, canEdit) {
    var newLen = array3.length - n4;
    if (canEdit) {
      for (var ii2 = idx; ii2 < newLen; ii2++) {
        array3[ii2] = array3[ii2 + n4];
      }
      array3.length = newLen;
      return array3;
    }
    var newArray = allocArray(newLen);
    for (var ii$1 = 0; ii$1 < idx; ii$1++) {
      newArray[ii$1] = array3[ii$1];
    }
    for (var ii$2 = idx; ii$2 < newLen; ii$2++) {
      newArray[ii$2] = array3[ii$2 + n4];
    }
    return newArray;
  }
  function spliceOutShiftRightN(array3, idx, rightN, canEdit) {
    var newLen = array3.length - 1 + rightN;
    var newArray;
    if (canEdit) {
      array3.length = newLen;
      newArray = array3;
    } else {
      newArray = allocArray(newLen);
    }
    for (var ii2 = newLen - 1, stop = idx + rightN; ii2 >= stop; ii2--) {
      newArray[ii2] = array3[ii2 - rightN + 1];
    }
    for (var ii$1 = idx + rightN - 1; ii$1 >= rightN; ii$1--) {
      newArray[ii$1] = array3[ii$1 - rightN];
    }
    return newArray;
  }
  function setInSpliceOut(array3, setInIdx, setInValue, spliceOutIdx, canEdit) {
    var newArray = spliceOut$1(array3, spliceOutIdx, canEdit);
    if (setInIdx < spliceOutIdx) {
      newArray[setInIdx] = setInValue;
    } else if (setInIdx > spliceOutIdx) {
      newArray[setInIdx - 1] = setInValue;
    }
    return newArray;
  }
  function binarySearch(comparator, entries5, key, didMatch) {
    var first5 = 0;
    var range = entries5.length;
    while (range > 0) {
      var half = Math.floor(range / 2);
      var entry = entries5[first5 + half];
      var entryKey = entry[0];
      var cmp = comparator(key, entryKey);
      if (cmp === 0) {
        SetRef2(didMatch);
        return first5 + half;
      }
      if (cmp > 0) {
        first5 += half + 1;
        range -= half + 1;
      } else {
        range = half;
      }
    }
    return first5;
  }
  SortedMapBtreeNode.prototype.indexSearch = function(index, didMatch, subIndex) {
    if (index < 0 || index >= this.size) {
      throw new Error(
        "BtreeNode.indexSearch: index is out of bounds: " + index + " vs " + this.size
      );
    }
    var entries5 = this.entries;
    var nodes = this.nodes;
    for (var i5 = 0; i5 < entries5.length; i5++) {
      if (nodes) {
        var node = nodes[i5];
        if (index < node.size) {
          subIndex.value = index;
          return i5;
        }
        index -= node.size;
      }
      var entry = entries5[i5];
      if (entry[1] !== NOT_SET2) {
        if (index === 0) {
          SetRef2(didMatch);
          return i5;
        }
        index--;
      }
    }
    if (nodes) {
      var node$1 = nodes[nodes.length - 1];
      if (index < node$1.size) {
        subIndex.value = index;
        return nodes.length - 1;
      }
    }
    throw new Error("BtreeNode.indexSearch: inconsistent node size");
  };
  SortedMapBtreeNode.prototype.splitNode = function(idx, updatedNode, subKvn, outKvn, ownerID, canEdit) {
    var entries5 = this.entries;
    var nodes = this.nodes;
    var medianIdx = this.btreeNodeSplitSize;
    var newEntries;
    var newNodes;
    if (idx < medianIdx) {
      var rightEntries = entries5.slice(medianIdx, entries5.length);
      var rightNodes = nodes.slice(medianIdx, nodes.length);
      var rightNode = new SortedMapBtreeNode(
        this.comparator,
        this.options,
        this.ownerID,
        rightEntries,
        rightNodes
      );
      outKvn[0] = entries5[medianIdx - 1];
      outKvn[1] = rightNode;
      if (canEdit) {
        entries5.length = medianIdx;
        nodes.length = medianIdx + 1;
        for (var i5 = medianIdx - 1; i5 >= idx + 1; i5--) {
          entries5[i5] = entries5[i5 - 1];
          nodes[i5 + 1] = nodes[i5];
        }
        entries5[idx] = subKvn[0];
        nodes[idx] = updatedNode;
        nodes[idx + 1] = subKvn[1];
        newEntries = entries5;
        newNodes = nodes;
      } else {
        newEntries = allocArray(medianIdx);
        newNodes = allocArray(medianIdx + 1);
        for (var i$1 = 0; i$1 < idx; i$1++) {
          newEntries[i$1] = entries5[i$1];
          newNodes[i$1] = nodes[i$1];
        }
        newEntries[idx] = subKvn[0];
        newNodes[idx] = updatedNode;
        newNodes[idx + 1] = subKvn[1];
        for (var i$2 = idx + 1; i$2 < medianIdx; i$2++) {
          newEntries[i$2] = entries5[i$2 - 1];
          newNodes[i$2 + 1] = nodes[i$2];
        }
      }
    } else if (idx === medianIdx) {
      var rightEntries$1 = allocArray(entries5.length - medianIdx);
      var rightNodes$1 = allocArray(nodes.length - medianIdx);
      rightEntries$1[0] = entries5[medianIdx];
      rightNodes$1[0] = subKvn[1];
      for (var i$3 = 1, len = rightEntries$1.length; i$3 < len; i$3++) {
        rightEntries$1[i$3] = entries5[medianIdx + i$3];
        rightNodes$1[i$3] = nodes[medianIdx + i$3];
      }
      rightNodes$1[rightNodes$1.length - 1] = nodes[nodes.length - 1];
      var rightNode$1 = new SortedMapBtreeNode(
        this.comparator,
        this.options,
        this.ownerID,
        rightEntries$1,
        rightNodes$1
      );
      outKvn[0] = subKvn[0];
      outKvn[1] = rightNode$1;
      if (canEdit) {
        entries5.length = medianIdx;
        nodes.length = medianIdx + 1;
        nodes[idx] = updatedNode;
        newEntries = entries5;
        newNodes = nodes;
      } else {
        newEntries = allocArray(medianIdx);
        newNodes = allocArray(medianIdx + 1);
        for (var i$4 = 0; i$4 < medianIdx; i$4++) {
          newEntries[i$4] = entries5[i$4];
          newNodes[i$4] = nodes[i$4];
        }
        newNodes[idx] = updatedNode;
      }
    } else {
      var rightEntries$2 = allocArray(entries5.length - medianIdx);
      var rightNodes$2 = allocArray(nodes.length - medianIdx);
      var idx0 = medianIdx + 1;
      var rightIdx = idx - idx0;
      for (var i$5 = 0, len$1 = rightIdx; i$5 < len$1; i$5++) {
        rightEntries$2[i$5] = entries5[idx0 + i$5];
        rightNodes$2[i$5] = nodes[idx0 + i$5];
      }
      rightEntries$2[rightIdx] = subKvn[0];
      rightNodes$2[rightIdx] = updatedNode;
      rightNodes$2[rightIdx + 1] = subKvn[1];
      for (var i$6 = rightIdx + 1, len$2 = rightEntries$2.length; i$6 < len$2; i$6++) {
        rightEntries$2[i$6] = entries5[medianIdx + i$6];
        rightNodes$2[i$6 + 1] = nodes[medianIdx + i$6 + 1];
      }
      var rightNode$2 = new SortedMapBtreeNode(
        this.comparator,
        this.options,
        this.ownerID,
        rightEntries$2,
        rightNodes$2
      );
      outKvn[0] = entries5[medianIdx];
      outKvn[1] = rightNode$2;
      if (canEdit) {
        entries5.length = medianIdx;
        nodes.length = medianIdx + 1;
        newEntries = entries5;
        newNodes = nodes;
      } else {
        newEntries = entries5.slice(0, medianIdx);
        newNodes = nodes.slice(0, medianIdx + 1);
      }
    }
    return this.makeNewNode(newEntries, newNodes, ownerID, canEdit);
  };
  SortedMapBtreeNode.prototype.splitLeaf = function(idx, entry, outKvn, ownerID, canEdit) {
    var entries5 = this.entries;
    var medianIdx = this.btreeNodeSplitSize;
    var newEntries;
    var newNodes;
    if (idx < medianIdx) {
      var rightEntries = entries5.slice(medianIdx, entries5.length);
      var rightNode = new SortedMapBtreeNode(
        this.comparator,
        this.options,
        this.ownerID,
        rightEntries
      );
      outKvn[0] = entries5[medianIdx - 1];
      outKvn[1] = rightNode;
      if (canEdit) {
        entries5.length = medianIdx;
        for (var i5 = medianIdx - 1; i5 >= idx + 1; i5--) {
          entries5[i5] = entries5[i5 - 1];
        }
        entries5[idx] = entry;
        newEntries = entries5;
      } else {
        newEntries = allocArray(medianIdx);
        for (var i$1 = 0; i$1 < idx; i$1++) {
          newEntries[i$1] = entries5[i$1];
        }
        newEntries[idx] = entry;
        for (var i$2 = idx + 1; i$2 < medianIdx; i$2++) {
          newEntries[i$2] = entries5[i$2 - 1];
        }
      }
    } else if (idx === medianIdx) {
      var rightEntries$1 = allocArray(entries5.length - medianIdx);
      rightEntries$1[0] = entries5[medianIdx];
      for (var i$3 = 1, len = rightEntries$1.length; i$3 < len; i$3++) {
        rightEntries$1[i$3] = entries5[medianIdx + i$3];
      }
      var rightNode$1 = new SortedMapBtreeNode(
        this.comparator,
        this.options,
        this.ownerID,
        rightEntries$1
      );
      outKvn[0] = entry;
      outKvn[1] = rightNode$1;
      if (canEdit) {
        entries5.length = medianIdx;
        newEntries = entries5;
      } else {
        newEntries = allocArray(medianIdx);
        for (var i$4 = 0; i$4 < medianIdx; i$4++) {
          newEntries[i$4] = entries5[i$4];
        }
      }
    } else {
      var rightEntries$2 = allocArray(entries5.length - medianIdx);
      var idx0 = medianIdx + 1;
      var rightIdx = idx - idx0;
      for (var i$5 = 0, len$1 = rightIdx; i$5 < len$1; i$5++) {
        rightEntries$2[i$5] = entries5[idx0 + i$5];
      }
      rightEntries$2[rightIdx] = entry;
      for (var i$6 = rightIdx + 1, len$2 = rightEntries$2.length; i$6 < len$2; i$6++) {
        rightEntries$2[i$6] = entries5[medianIdx + i$6];
      }
      var rightNode$2 = new SortedMapBtreeNode(
        this.comparator,
        this.options,
        this.ownerID,
        rightEntries$2
      );
      outKvn[0] = entries5[medianIdx];
      outKvn[1] = rightNode$2;
      if (canEdit) {
        entries5.length = medianIdx;
        newEntries = entries5;
      } else {
        newEntries = entries5.slice(0, medianIdx);
      }
    }
    return this.makeNewNode(newEntries, newNodes, ownerID, canEdit);
  };
  SortedMapBtreeNode.prototype.spliceNode = function(ownerID, idx, updatedNode, parent, parentIdx, canEdit, subKvn, outKvn) {
    var entries5 = this.entries;
    var nodes = this.nodes;
    var newEntries;
    var newNodes;
    var updatedEntry = subKvn[0];
    var updatedNeighbor = subKvn[1];
    var updatedNeighborIsLeft = subKvn[2];
    if (updatedNeighbor === NOT_SET2) {
      if (entries5.length <= this.btreeNodeSplitSize && parent) {
        if (updatedNeighborIsLeft) {
          return this.consolidateNode(
            ownerID,
            idx,
            updatedNode,
            idx - 1,
            idx - 1,
            parent,
            parentIdx,
            canEdit,
            outKvn
          );
        } else {
          return this.consolidateNode(
            ownerID,
            idx,
            updatedNode,
            idx,
            idx + 1,
            parent,
            parentIdx,
            canEdit,
            outKvn
          );
        }
      } else {
        if (updatedNeighborIsLeft) {
          newNodes = setInSpliceOut(nodes, idx, updatedNode, idx - 1, canEdit);
          newEntries = spliceOut$1(entries5, idx - 1, canEdit);
        } else {
          newNodes = setInSpliceOut(nodes, idx, updatedNode, idx + 1, canEdit);
          newEntries = spliceOut$1(entries5, idx, canEdit);
        }
      }
    } else {
      newNodes = setIn$2(nodes, idx, updatedNode, canEdit);
      if (updatedNeighbor) {
        if (updatedNeighborIsLeft) {
          newNodes[idx - 1] = updatedNeighbor;
          newEntries = setIn$2(entries5, idx - 1, updatedEntry, canEdit);
        } else {
          newNodes[idx + 1] = updatedNeighbor;
          newEntries = setIn$2(entries5, idx, updatedEntry, canEdit);
        }
      } else if (updatedEntry) {
        newEntries = setIn$2(entries5, idx, updatedEntry, canEdit);
      } else {
        newEntries = clone(entries5, canEdit);
      }
    }
    return this.makeNewNode(newEntries, newNodes, ownerID, canEdit);
  };
  SortedMapBtreeNode.prototype.consolidateNode = function(ownerID, idx, updatedNode, removeEntryIdx, removeNodeIdx, parent, parentIdx, canEdit, outKvn) {
    var entries5 = this.entries;
    var nodes = this.nodes;
    var parentEntries = parent.entries;
    var parentNodes = parent.nodes;
    var donorNode;
    var mergeNode;
    var leftNode;
    var rightNode;
    if (parentIdx === 0) {
      rightNode = parentNodes[parentIdx + 1];
      mergeNode = donorNode = rightNode;
    } else if (parentIdx === parentNodes.length - 1) {
      leftNode = parentNodes[parentIdx - 1];
      mergeNode = donorNode = leftNode;
    } else {
      leftNode = parentNodes[parentIdx - 1];
      rightNode = parentNodes[parentIdx + 1];
      var leftAvail = (leftNode.entries.length - this.btreeNodeSplitSize + 1) / 2;
      var rightAvail = (rightNode.entries.length - this.btreeNodeSplitSize + 1) / 2;
      if (leftAvail >= rightAvail) {
        donorNode = leftNode;
        mergeNode = rightNode;
      } else {
        donorNode = rightNode;
        mergeNode = leftNode;
      }
    }
    var newEntries;
    var newNodes;
    function moveFromLeftNode(node, n4, merge2) {
      newEntries = spliceOutShiftRightN(entries5, removeEntryIdx, n4, canEdit);
      newNodes = spliceOutShiftRightN(nodes, removeNodeIdx, n4, canEdit);
      var uIdx = idx < removeNodeIdx ? idx + n4 : idx + n4 - 1;
      newNodes[uIdx] = updatedNode;
      var i5 = n4 - 1;
      newEntries[i5] = parentEntries[parentIdx - 1];
      newNodes[i5--] = node.nodes[node.nodes.length - 1];
      var j4;
      for (j4 = node.entries.length - 1; i5 >= 0; i5--, j4--) {
        newEntries[i5] = node.entries[j4];
        newNodes[i5] = node.nodes[j4];
      }
      if (merge2) {
        outKvn[1] = NOT_SET2;
      } else {
        outKvn[0] = node.entries[j4];
        var newNodeEntries = spliceOutN(
          node.entries,
          node.entries.length - n4,
          n4,
          canEdit
        );
        var newNodeNodes = spliceOutN(
          node.nodes,
          node.nodes.length - n4,
          n4,
          canEdit
        );
        outKvn[1] = node.makeNewNode(
          newNodeEntries,
          newNodeNodes,
          ownerID,
          canEdit
        );
      }
      outKvn[2] = true;
    }
    function moveFromRightNode(node, n4, merge2) {
      newEntries = spliceOut$1(entries5, removeEntryIdx, canEdit);
      newNodes = spliceOut$1(nodes, removeNodeIdx, canEdit);
      var j4 = newEntries.length;
      newEntries.length += n4;
      newNodes.length += n4;
      var uIdx = idx < removeNodeIdx ? idx : idx - 1;
      newNodes[uIdx] = updatedNode;
      newEntries[j4++] = parentEntries[parentIdx];
      newNodes[j4] = node.nodes[0];
      for (var i5 = 0, iLimit = n4 - 1; i5 < iLimit; i5++) {
        newEntries[j4 + i5] = node.entries[i5];
        newNodes[j4 + i5 + 1] = node.nodes[i5 + 1];
      }
      if (merge2) {
        outKvn[1] = NOT_SET2;
      } else {
        outKvn[0] = node.entries[n4 - 1];
        var newNodeEntries = spliceOutN(node.entries, 0, n4, canEdit);
        var newNodeNodes = spliceOutN(node.nodes, 0, n4, canEdit);
        outKvn[1] = node.makeNewNode(
          newNodeEntries,
          newNodeNodes,
          ownerID,
          canEdit
        );
      }
      outKvn[2] = false;
    }
    var donorAvail = Math.floor(
      (donorNode.entries.length - this.btreeNodeSplitSize + 1) / 2
    );
    if (donorAvail > 0) {
      if (donorNode === leftNode) {
        moveFromLeftNode(donorNode, donorAvail);
      } else {
        moveFromRightNode(donorNode, donorAvail);
      }
    } else {
      if (mergeNode === leftNode) {
        moveFromLeftNode(mergeNode, mergeNode.entries.length + 1, true);
      } else {
        moveFromRightNode(mergeNode, mergeNode.entries.length + 1, true);
      }
    }
    return this.makeNewNode(newEntries, newNodes, ownerID, canEdit);
  };
  SortedMapBtreeNode.prototype.consolidateLeaf = function(ownerID, idx, parent, parentIdx, canEdit, outKvn) {
    var entries5 = this.entries;
    var parentEntries = parent.entries;
    var parentNodes = parent.nodes;
    var donorNode;
    var leftNode;
    var rightNode;
    if (parentIdx === 0) {
      rightNode = parentNodes[parentIdx + 1];
      donorNode = rightNode;
    } else if (parentIdx === parentNodes.length - 1) {
      leftNode = parentNodes[parentIdx - 1];
      donorNode = leftNode;
    } else {
      leftNode = parentNodes[parentIdx - 1];
      rightNode = parentNodes[parentIdx + 1];
      var leftAvail = leftNode.entries.length - this.btreeNodeSplitSize;
      var rightAvail = rightNode.entries.length - this.btreeNodeSplitSize;
      if (leftAvail >= rightAvail) {
        donorNode = leftNode;
      } else {
        donorNode = rightNode;
      }
    }
    var newEntries;
    function moveFromLeftNode(node, n5, merge2) {
      newEntries = spliceOutShiftRightN(entries5, idx, n5, canEdit);
      var m4 = n5;
      if (!parentNotSet) {
        newEntries[n5 - 1] = parentEntry;
        m4--;
      }
      for (var i5 = 0; i5 < m4; i5++) {
        newEntries[i5] = node.entries[node.entries.length - m4 + i5];
      }
      if (merge2) {
        outKvn[1] = NOT_SET2;
      } else {
        m4++;
        outKvn[0] = node.entries[node.entries.length - m4];
        var newNodeEntries = spliceOutN(
          node.entries,
          node.entries.length - m4,
          m4,
          canEdit
        );
        outKvn[1] = node.makeNewNode(newNodeEntries, void 0, ownerID, canEdit);
      }
      outKvn[2] = true;
    }
    function moveFromRightNode(node, n5, merge2) {
      newEntries = spliceOut$1(entries5, idx, canEdit);
      var j4 = newEntries.length;
      newEntries.length += n5;
      var m4 = n5;
      if (!parentNotSet) {
        newEntries[j4++] = parentEntry;
        m4--;
      }
      for (var i5 = 0; i5 < m4; i5++) {
        newEntries[j4 + i5] = node.entries[i5];
      }
      if (merge2) {
        outKvn[1] = NOT_SET2;
      } else {
        outKvn[0] = node.entries[m4++];
        var newNodeEntries = spliceOutN(node.entries, 0, m4, canEdit);
        outKvn[1] = node.makeNewNode(newNodeEntries, void 0, ownerID, canEdit);
      }
      outKvn[2] = false;
    }
    var parentEntry = donorNode === leftNode ? parentEntries[parentIdx - 1] : parentEntries[parentIdx];
    var parentNotSet = parentEntry[1] === NOT_SET2;
    var parentAdj = parentNotSet ? 1 : 0;
    var donorAvail = donorNode.entries.length - this.btreeNodeSplitSize - parentAdj;
    if (donorAvail > 0) {
      var n4 = Math.floor((donorAvail + 1) / 2);
      if (donorNode === leftNode) {
        moveFromLeftNode(donorNode, n4);
      } else {
        moveFromRightNode(donorNode, n4);
      }
    } else {
      var n$1 = donorNode.entries.length + 1 - parentAdj;
      if (donorNode === leftNode) {
        moveFromLeftNode(donorNode, n$1, true);
      } else {
        moveFromRightNode(donorNode, n$1, true);
      }
    }
    return this.makeNewNode(newEntries, void 0, ownerID, canEdit);
  };
  var SortedMapBtreeNodePacker = function(SortedMapPacker$$1) {
    function SortedMapBtreeNodePacker2() {
      SortedMapPacker$$1.apply(this, arguments);
    }
    if (SortedMapPacker$$1)
      SortedMapBtreeNodePacker2.__proto__ = SortedMapPacker$$1;
    SortedMapBtreeNodePacker2.prototype = Object.create(SortedMapPacker$$1 && SortedMapPacker$$1.prototype);
    SortedMapBtreeNodePacker2.prototype.constructor = SortedMapBtreeNodePacker2;
    SortedMapBtreeNodePacker2.prototype.calcPlanCnt = function calcPlanCnt(order, height) {
      if (height < 1 || height > 20) {
        throw new Error("Height is out of supported limit");
      }
      var n4 = order - 1;
      for (var h4 = 1; h4 < height; h4++) {
        n4 = n4 * order + (order - 1);
      }
      return n4;
    };
    SortedMapBtreeNodePacker2.prototype.prepareCachedPlan = function prepareCachedPlan(order, n4) {
      var key = order.toString() + " " + n4.toString();
      var cachedPlan = SortedMapBtreeNodePacker2.cache[key];
      if (cachedPlan) {
        return cachedPlan;
      }
      var plan = this.preparePlan(order, n4);
      this.verifyPlan(plan);
      if (order < 100 && n4 <= 100 && n4 >= order && SortedMapBtreeNodePacker2.cacheSize < 500) {
        SortedMapBtreeNodePacker2.cache[key] = plan;
        SortedMapBtreeNodePacker2.cacheSize++;
      }
      return plan;
    };
    SortedMapBtreeNodePacker2.prototype.preparePlan = function preparePlan(order, n4) {
      var order1 = order - 1;
      var height = 1;
      var maxEntriesCnt = order1;
      var maxEntriesCnt1;
      while (maxEntriesCnt < n4) {
        maxEntriesCnt1 = maxEntriesCnt;
        maxEntriesCnt = maxEntriesCnt * order + order1;
        height++;
      }
      if (maxEntriesCnt === n4) {
        return {
          op: "build",
          full: true,
          height,
          order,
          repeat: 1,
          total: n4
        };
      }
      if (height === 1) {
        return {
          op: "build",
          full: false,
          height,
          order,
          repeat: 1,
          total: n4
        };
      }
      var planCnt1 = maxEntriesCnt1;
      var rootOrder = 1 + Math.floor(n4 / (planCnt1 + 1));
      if (rootOrder < 2) {
        throw new Error(
          "Something is wrong, the rootOrder is expected to be >= 2"
        );
      }
      if (rootOrder * planCnt1 + (rootOrder - 1) === n4) {
        var repeat = rootOrder;
        var repPlan = [];
        var total$1 = repeat * planCnt1 + repeat - 1;
        repPlan.push({
          op: "build",
          full: true,
          height: height - 1,
          order,
          repeat: rootOrder,
          total: total$1
        });
        return {
          op: "assemble",
          height,
          order,
          total: total$1,
          items: repPlan
        };
      }
      var plan = [];
      if (rootOrder > 2) {
        var repeat$1 = rootOrder - 2;
        var total$2 = repeat$1 * planCnt1 + repeat$1 - 1;
        var build = {
          op: "build",
          full: true,
          height: height - 1,
          order,
          repeat: repeat$1,
          total: total$2
        };
        plan.push(build);
        n4 -= total$2;
        n4--;
      }
      n4--;
      var n22 = Math.floor(n4 / 2);
      if (n4 - n22 > 0) {
        plan.push(this.prepareCachedPlan(order, n4 - n22));
      }
      if (n22 > 0) {
        plan.push(this.prepareCachedPlan(order, n22));
      }
      var total = 0;
      var ilen = plan.length;
      for (var i5 = 0; i5 < ilen; i5++) {
        total += plan[i5].total;
      }
      total += plan.length - 1;
      return {
        op: "assemble",
        height,
        order,
        total,
        items: plan
      };
    };
    SortedMapBtreeNodePacker2.prototype.verifyPlan = function verifyPlan(plan, level) {
      var this$1 = this;
      function failed(msg) {
        throw new Error(msg);
      }
      if (level === void 0) {
        level = 0;
      }
      if (plan.op === "assemble") {
        var cnt = 0;
        var ilen = plan.items.length;
        for (var i5 = 0; i5 < ilen; i5++) {
          var pl = plan.items[i5];
          cnt += pl.total;
          if (pl.op === "build") {
            if (!(pl.order >= pl.repeat)) {
              failed(
                "Plan verification test failed: pl.order >= pl.repeat: " + JSON.stringify(pl)
              );
            }
          }
          if (!(plan.height === pl.height + 1)) {
            failed("Plan verification test failed: plan.height === pl.height+1");
          }
          this$1.verifyPlan(pl, level + 1);
        }
        cnt += plan.items.length - 1;
        if (!(plan.total === cnt)) {
          failed("Count mismatch: " + plan.total + " vs " + cnt);
        }
      } else if (plan.op === "build") {
        var ec = this.calcPlanCnt(plan.order, plan.height);
        if (plan.full) {
          var cnt$1 = ec * plan.repeat + plan.repeat - 1;
          if (!(plan.total === cnt$1)) {
            failed("Plan verification test failed: plan.total === ec");
          }
        } else {
          if (!(plan.height === 1)) {
            failed(
              "Plan verification test failed: expected height 1, got instead " + plan.height
            );
          }
          if (!(plan.total < ec)) {
            failed("Plan verification test failed: plan.total < ec");
          }
          var halfSize = Math.floor((plan.order - 1) / 2);
          if (level > 0 && !(plan.total >= halfSize)) {
            failed(
              "Plan verification test failed: plan.total >= halfSize: " + plan.total + ", " + halfSize
            );
          }
        }
      } else {
        failed("Plan verification test failed: invalid op: " + plan.op);
      }
    };
    SortedMapBtreeNodePacker2.prototype.runPlan = function runPlan(plan, iter) {
      var this$1 = this;
      function failed(msg) {
        msg = "Packing Plan is corrupt: " + msg;
        throw new Error(msg);
      }
      if (plan.op === "assemble") {
        var ilen = plan.items.length;
        for (var i5 = 0; i5 < ilen; i5++) {
          if (i5 > 0) {
            this$1.populate(iter, 1);
          }
          this$1.runPlan(plan.items[i5], iter);
        }
      } else if (plan.op === "build") {
        var n4 = (plan.total - plan.repeat + 1) / plan.repeat;
        for (var i$1 = 0; i$1 < plan.repeat; i$1++) {
          if (i$1 > 0) {
            this$1.populate(iter, 1);
          }
          this$1.populate(iter, n4);
        }
      } else {
        failed("invalid op: " + plan.op);
      }
      this.flush(plan.height);
    };
    SortedMapBtreeNodePacker2.prototype.flushLevel = function flushLevel(level) {
      this.prepareLevel(level + 1);
      var node = this.stack[level];
      node._calcSize();
      this.addNode(level + 1, node);
      this.stack[level] = void 0;
    };
    SortedMapBtreeNodePacker2.prototype.flush = function flush(height) {
      var this$1 = this;
      for (var i5 = 0; i5 < height; i5++) {
        var level = i5;
        if (this$1.stack[level]) {
          this$1.flushLevel(level);
        }
      }
      this.stackLevel = height;
    };
    SortedMapBtreeNodePacker2.prototype.populate = function populate(iter, n4) {
      var this$1 = this;
      for (var i5 = 0; i5 < n4; i5++) {
        var next = iter.next();
        this$1.entriesCnt++;
        if (next.done) {
          throw new Error(
            "unexpected end of iterator at " + this$1.entriesCnt + " vs " + iter.size
          );
        }
        var entry = next.value;
        var level = this$1.stackLevel;
        this$1.prepareLevel(level);
        this$1.addEntry(level, entry);
        if (level > 0) {
          this$1.stackLevel = 0;
        } else if (this$1.stackIndices[level] === this$1.order - 1) {
          this$1.flushLevel(level);
          this$1.stackLevel++;
        }
      }
    };
    SortedMapBtreeNodePacker2.prototype.addEntry = function addEntry(level, entry) {
      this.stack[level].entries[this.stackIndices[level]++] = entry;
    };
    SortedMapBtreeNodePacker2.prototype.addNode = function addNode(level, node) {
      this.stack[level].nodes[this.stackIndices[level]] = node;
      if (this.stackIndices[level] === this.order - 1) {
        this.flushLevel(level);
        this.stackLevel++;
      }
    };
    SortedMapBtreeNodePacker2.prototype.prepareLevel = function prepareLevel(level) {
      if (!this.stack[level]) {
        var entries5 = allocArray(this.order - 1);
        entries5.length = 0;
        var nodes;
        if (level > 0) {
          nodes = allocArray(this.order);
          nodes.length = 0;
        }
        this.stack[level] = new SortedMapBtreeNode(
          this.comparator,
          this.options,
          this.ownerID,
          entries5,
          nodes
        );
        this.stackIndices[level] = 0;
      }
    };
    SortedMapBtreeNodePacker2.prototype.finish = function finish() {
      var level = this.stackLevel;
      if (level >= this.stack.length) {
        return void 0;
      }
      return this.stack[level].nodes[0];
    };
    SortedMapBtreeNodePacker2.prototype.pack = function pack2(comparator, options, ownerID, collection) {
      if (options && options.type && options.type !== DEFAULT_TYPE) {
        throw new Error("Unsuported type by btree factory: " + options.type);
      }
      this.order = options && options.btreeOrder ? options.btreeOrder : DEFAULT_BTREE_ORDER;
      var kc = KeyedCollection2(collection);
      assertNotInfinite2(kc.size);
      var plan = this.preparePlan(this.order, kc.size);
      this.comparator = comparator;
      this.options = options;
      this.ownerID = ownerID;
      this.stack = [];
      this.stackIndices = [];
      this.stackLevel = 0;
      this.entriesCnt = 0;
      var iter = kc.entries();
      this.runPlan(plan, iter);
      if (!iter.next().done) {
        throw new Error("iterator did not end when expected");
      }
      return this.finish();
    };
    return SortedMapBtreeNodePacker2;
  }(SortedMapPacker);
  SortedMapBtreeNodePacker.cache = {};
  SortedMapBtreeNodePacker.cacheSize = 0;
  var SortedMapBtreeNodeFactory = function(SortedMapNodeFactory$$1) {
    function SortedMapBtreeNodeFactory2() {
      SortedMapNodeFactory$$1.apply(this, arguments);
    }
    if (SortedMapNodeFactory$$1)
      SortedMapBtreeNodeFactory2.__proto__ = SortedMapNodeFactory$$1;
    SortedMapBtreeNodeFactory2.prototype = Object.create(SortedMapNodeFactory$$1 && SortedMapNodeFactory$$1.prototype);
    SortedMapBtreeNodeFactory2.prototype.constructor = SortedMapBtreeNodeFactory2;
    SortedMapBtreeNodeFactory2.prototype.createNode = function createNode2(comparator, options, ownerID, entries5, nodes) {
      return new SortedMapBtreeNode(comparator, options, ownerID, entries5, nodes);
    };
    SortedMapBtreeNodeFactory2.prototype.createPacker = function createPacker2() {
      return new SortedMapBtreeNodePacker();
    };
    SortedMapBtreeNodeFactory2.prototype.createIterator = function createIterator2(map5, type2, reverse5) {
      return new SortedMapBtreeNodeIterator(map5, type2, reverse5);
    };
    return SortedMapBtreeNodeFactory2;
  }(SortedMapNodeFactory);
  var SortedMap = function(Map$$1) {
    function SortedMap2(value, comparator, options) {
      if (!comparator) {
        if (this instanceof SortedMap2) {
          comparator = this.getComparator();
        }
        if (!comparator) {
          comparator = SortedMap2.defaultComparator;
        }
      }
      if (!options) {
        if (this instanceof SortedMap2) {
          options = this.getOptions();
        }
        if (!options) {
          options = SortedMap2.defaultOptions;
        }
      }
      return value === null || value === void 0 ? emptySortedMap(comparator, options) : isSortedMap(value) && value.getComparator() === comparator && value.getOptions() === options ? value : emptySortedMap(comparator, options).withMutations(function(map5) {
        map5.pack(value);
      });
    }
    if (Map$$1)
      SortedMap2.__proto__ = Map$$1;
    SortedMap2.prototype = Object.create(Map$$1 && Map$$1.prototype);
    SortedMap2.prototype.constructor = SortedMap2;
    SortedMap2.of = function of() {
      var keyValues = [], len = arguments.length;
      while (len--)
        keyValues[len] = arguments[len];
      return emptySortedMap().withMutations(function(map5) {
        for (var i5 = 0; i5 < keyValues.length; i5 += 2) {
          if (i5 + 1 >= keyValues.length) {
            throw new Error("Missing value for key: " + keyValues[i5]);
          }
          map5.set(keyValues[i5], keyValues[i5 + 1]);
        }
      });
    };
    SortedMap2.prototype.toString = function toString9() {
      return this.__toString("SortedMap {", "}");
    };
    SortedMap2.prototype.getComparator = function getComparator2() {
      return this._comparator;
    };
    SortedMap2.prototype.getOptions = function getOptions() {
      return this._options;
    };
    SortedMap2.prototype.get = function get24(k4, notSetValue) {
      return this._root ? this._root.get(k4, notSetValue) : notSetValue;
    };
    SortedMap2.prototype.entryAt = function entryAt(index) {
      return this._root ? this._root.entryAt(index) : new Error("index is out of bounds");
    };
    SortedMap2.prototype.keyAt = function keyAt(index) {
      return this._root ? this._root.keyAt(index) : new Error("index is out of bounds");
    };
    SortedMap2.prototype.valueAt = function valueAt(index) {
      return this._root ? this._root.valueAt(index) : new Error("index is out of bounds");
    };
    SortedMap2.prototype.clear = function clear3() {
      if (this.size === 0) {
        return this;
      }
      if (this.__ownerID) {
        this.size = 0;
        this._root = null;
        this.__altered = true;
        return this;
      }
      return emptySortedMap(this._comparator, this._options);
    };
    SortedMap2.prototype.pack = function pack2(value) {
      var this$1 = this;
      var collection;
      if (value === void 0) {
        collection = this;
      } else {
        var index = 0;
        var entries5 = KeyedCollection2(value).map(function(v4, k4) {
          return [k4, v4, index++];
        }).valueSeq().toArray();
        if (entries5.length === 0) {
          if (this.__ownerID) {
            this._root = void 0;
            this.size = 0, this.__altered = true;
            return this;
          }
          return emptySortedMap(this._comparator, this._options);
        }
        entries5.sort(function(a5, b2) {
          return this$1._comparator(a5[0], b2[0]) || a5[2] - b2[2];
        });
        var result = [];
        for (var i5 = 0, stop = entries5.length - 1; i5 < stop; i5++) {
          var entry = entries5[i5];
          var nextEntry = entries5[i5 + 1];
          if (this$1._comparator(entry[0], nextEntry[0]) < 0) {
            var newEntry = [entry[0], entry[1]];
            result.push(newEntry);
          }
        }
        var entry$1 = entries5[entries5.length - 1];
        var newEntry$1 = [entry$1[0], entry$1[1]];
        result.push(newEntry$1);
        collection = KeyedSeq2(result);
      }
      assertNotInfinite2(collection.size);
      var newSize = collection.size;
      var newRoot = this._factory.createPacker().pack(this._comparator, this._options, this.__ownerID, collection);
      if (this.__ownerID) {
        this._root = newRoot;
        this.size = newSize, this.__altered = true;
        return this;
      }
      return newRoot ? makeSortedMap(this._comparator, this._options, newSize, newRoot) : emptySortedMap(this._comparator, this._options);
    };
    SortedMap2.prototype.set = function set7(k4, v4) {
      return updateMap$1(this, k4, v4);
    };
    SortedMap2.prototype.remove = function remove7(k4) {
      return updateMap$1(this, k4, NOT_SET2);
    };
    SortedMap2.prototype.fastRemove = function fastRemove2(k4) {
      return updateMap$1(this, k4, NOT_SET2, true);
    };
    SortedMap2.prototype.sort = function sort3(comparator) {
      return SortedMap2(this, comparator, this.getOptions());
    };
    SortedMap2.prototype.sortBy = function sortBy3(mapper, comparator) {
      return SortedMap2(
        sortFactory2(this, comparator, mapper),
        comparator,
        this.getOptions()
      );
    };
    SortedMap2.prototype.__iterator = function __iterator3(type2, reverse5) {
      return this._factory.createIterator(this, type2, reverse5);
    };
    SortedMap2.prototype.__ensureOwner = function __ensureOwner3(ownerID) {
      if (ownerID === this.__ownerID) {
        return this;
      }
      if (!ownerID) {
        if (this.size === 0) {
          return emptySortedMap(this._comparator, this._options);
        }
        this.__ownerID = ownerID;
        this.__altered = false;
        return this;
      }
      return makeSortedMap(
        this._comparator,
        this._options,
        this.size,
        this._root,
        ownerID
      );
    };
    SortedMap2.prototype.checkConsistency = function checkConsistency2(printFlag) {
      var this$1 = this;
      if (this._root) {
        if (!(this.size > 0)) {
          return 1;
        }
        return this._root.checkConsistency(printFlag);
      } else if (!(this.size === 0)) {
        return 2;
      }
      var n4 = 0;
      var prevKey;
      this.keySeq().forEach(function(key) {
        if (n4 && !(this$1._comparator(prevKey, key) < 0)) {
          return 3;
        }
        prevKey = key;
        n4++;
      });
      if (this.size !== n4) {
        return 4;
      }
      return 0;
    };
    SortedMap2.prototype.print = function print2(maxDepth) {
      var header = "SORTED MAP: size=" + this.size;
      if (this._options) {
        header = header + ", options=" + JSON.stringify(this._options);
      }
      console.log(header);
      if (this._root) {
        this._root.print(1, maxDepth);
      }
      return this;
    };
    SortedMap2.prototype.from = function from(key, backwards) {
      var self2 = this;
      var sequence = Object.create(KeyedSeq2).prototype;
      sequence.__iterateUncached = function(fn2, reverse5) {
        var this$1 = this;
        if (!self2._root) {
          return 0;
        }
        var iterations = 0;
        if (backwards) {
          self2._root.iterateFromBackwards(
            key,
            function(entry) {
              iterations++;
              return fn2(entry[1], entry[0], this$1);
            },
            reverse5
          );
        } else {
          self2._root.iterateFrom(
            key,
            function(entry) {
              iterations++;
              return fn2(entry[1], entry[0], this$1);
            },
            reverse5
          );
        }
        return iterations;
      };
      return sequence;
    };
    SortedMap2.prototype.fromIndex = function fromIndex(index, backwards) {
      var self2 = this;
      var sequence = Object.create(KeyedSeq2).prototype;
      sequence.__iterateUncached = function(fn2, reverse5) {
        var this$1 = this;
        if (reverse5) {
          throw new Error("fromIndex: reverse mode not supported");
        }
        if (!self2._root) {
          return 0;
        }
        var iterations = 0;
        if (backwards) {
          self2._root.iterateFromIndexBackwards(
            index,
            function(entry) {
              iterations++;
              return fn2(entry[1], entry[0], this$1);
            },
            reverse5
          );
        } else {
          self2._root.iterateFromIndex(
            index,
            function(entry) {
              iterations++;
              return fn2(entry[1], entry[0], this$1);
            },
            reverse5
          );
        }
        return iterations;
      };
      return sequence;
    };
    return SortedMap2;
  }(Map3);
  SortedMap.isSortedMap = isSortedMap;
  SortedMap.defaultComparator = defaultComparator$1;
  SortedMap.defaultOptions = {
    type: "btree"
  };
  var SortedMapPrototype = SortedMap.prototype;
  SortedMapPrototype[IS_SORTED_SYMBOL] = true;
  SortedMapPrototype[DELETE2] = SortedMapPrototype.remove;
  SortedMapPrototype.removeIn = SortedMapPrototype.deleteIn;
  SortedMapPrototype.removeAll = SortedMapPrototype.deleteAll;
  function makeSortedMap(comparator, options, size2, root2, ownerID) {
    var map5 = Object.create(SortedMapPrototype);
    map5._comparator = comparator || SortedMap.defaultComparator;
    map5._options = options || SortedMap.defaultOptions;
    map5.size = size2;
    map5._root = root2;
    map5._factory = SortedMap.getFactory(map5._options);
    map5.__ownerID = ownerID;
    map5.__altered = false;
    if (map5._options.btreeOrder && map5._options.btreeOrder < 3) {
      throw new Error(
        "SortedMap: minimum value of options.btreeOrder is 3, but got: " + map5._options.btreeOrder
      );
    }
    if (!map5._factory) {
      throw new Error("SortedMap type not supported: " + map5._options.type);
    }
    return map5;
  }
  var DEFAULT_EMPTY_MAP;
  function emptySortedMap(comparator, options) {
    if (comparator === SortedMap.defaultComparator && options === SortedMap.defaultOptions) {
      return DEFAULT_EMPTY_MAP || (DEFAULT_EMPTY_MAP = makeSortedMap(
        SortedMap.defaultComparator,
        SortedMap.defaultOptions,
        0
      ));
    }
    return makeSortedMap(comparator, options, 0);
  }
  function updateMap$1(map5, k4, v4, fast) {
    var remove7 = v4 === NOT_SET2;
    var root2 = map5._root;
    var newRoot;
    var newSize;
    if (!root2) {
      if (remove7) {
        return map5;
      }
      newSize = 1;
      var entries5 = [[k4, v4]];
      newRoot = map5._factory.createNode(
        map5._comparator,
        map5._options,
        map5.__ownerID,
        entries5
      );
    } else {
      var didChangeSize = MakeRef2();
      var didAlter = MakeRef2();
      if (remove7) {
        if (fast) {
          newRoot = map5._root.fastRemove(
            map5.__ownerID,
            k4,
            didChangeSize,
            didAlter
          );
        } else {
          newRoot = map5._root.remove(map5.__ownerID, k4, didChangeSize, didAlter);
        }
      } else {
        newRoot = map5._root.upsert(map5.__ownerID, k4, v4, didChangeSize, didAlter);
      }
      if (!GetRef(didAlter)) {
        return map5;
      }
      newSize = map5.size + (GetRef(didChangeSize) ? remove7 ? -1 : 1 : 0);
      if (newSize === 0) {
        newRoot = void 0;
      }
    }
    if (map5.__ownerID) {
      map5.size = newSize;
      map5._root = newRoot;
      map5.__altered = true;
      return map5;
    }
    return newRoot ? makeSortedMap(map5._comparator, map5._options, newSize, newRoot) : emptySortedMap(map5._comparator, map5._options);
  }
  function defaultComparator$1(a5, b2) {
    if (is2(a5, b2)) {
      return 0;
    }
    var ta2 = typeof a5;
    var tb = typeof b2;
    if (ta2 !== tb) {
      return ta2 < tb ? -1 : 1;
    }
    switch (ta2) {
      case "undefined":
        break;
      case "object":
        if (a5 === null) {
          return 1;
        }
        if (b2 === null) {
          return -1;
        }
        a5 = a5.toString();
        b2 = b2.toString();
        break;
      case "boolean":
        break;
      case "number":
        if (is2(a5, NaN)) {
          return 1;
        }
        if (is2(b2, NaN)) {
          return -1;
        }
        break;
      case "string":
        break;
      case "symbol":
        a5 = a5.toString();
        b2 = b2.toString();
        break;
      case "function":
        a5 = a5.toString();
        b2 = b2.toString();
        break;
      default:
        break;
    }
    return a5 < b2 ? -1 : a5 > b2 ? 1 : 0;
  }
  SortedMap.getFactory = function(options) {
    var type2 = options && options.type ? options.type : SortedMap.defaultOptions.type;
    return SortedMap.factories[type2];
  };
  SortedMap.factories = {
    btree: new SortedMapBtreeNodeFactory()
  };
  var IS_STACK_SYMBOL2 = "@@__IMMUTABLE_STACK__@@";
  function isStack2(maybeStack) {
    return Boolean(maybeStack && maybeStack[IS_STACK_SYMBOL2]);
  }
  var Stack2 = function(IndexedCollection$$1) {
    function Stack3(value) {
      return value === null || value === void 0 ? emptyStack2() : isStack2(value) ? value : emptyStack2().pushAll(value);
    }
    if (IndexedCollection$$1)
      Stack3.__proto__ = IndexedCollection$$1;
    Stack3.prototype = Object.create(IndexedCollection$$1 && IndexedCollection$$1.prototype);
    Stack3.prototype.constructor = Stack3;
    Stack3.of = function of() {
      return this(arguments);
    };
    Stack3.prototype.toString = function toString9() {
      return this.__toString("Stack [", "]");
    };
    Stack3.prototype.get = function get24(index, notSetValue) {
      var head = this._head;
      index = wrapIndex2(this, index);
      while (head && index--) {
        head = head.next;
      }
      return head ? head.value : notSetValue;
    };
    Stack3.prototype.peek = function peek() {
      return this._head && this._head.value;
    };
    Stack3.prototype.push = function push() {
      var arguments$1 = arguments;
      if (arguments.length === 0) {
        return this;
      }
      var newSize = this.size + arguments.length;
      var head = this._head;
      for (var ii2 = arguments.length - 1; ii2 >= 0; ii2--) {
        head = {
          value: arguments$1[ii2],
          next: head
        };
      }
      if (this.__ownerID) {
        this.size = newSize;
        this._head = head;
        this.__hash = void 0;
        this.__altered = true;
        return this;
      }
      return makeStack2(newSize, head);
    };
    Stack3.prototype.pushAll = function pushAll(iter) {
      iter = IndexedCollection$$1(iter);
      if (iter.size === 0) {
        return this;
      }
      if (this.size === 0 && isStack2(iter)) {
        return iter;
      }
      assertNotInfinite2(iter.size);
      var newSize = this.size;
      var head = this._head;
      iter.__iterate(
        function(value) {
          newSize++;
          head = {
            value,
            next: head
          };
        },
        /* reverse */
        true
      );
      if (this.__ownerID) {
        this.size = newSize;
        this._head = head;
        this.__hash = void 0;
        this.__altered = true;
        return this;
      }
      return makeStack2(newSize, head);
    };
    Stack3.prototype.pop = function pop() {
      return this.slice(1);
    };
    Stack3.prototype.clear = function clear3() {
      if (this.size === 0) {
        return this;
      }
      if (this.__ownerID) {
        this.size = 0;
        this._head = void 0;
        this.__hash = void 0;
        this.__altered = true;
        return this;
      }
      return emptyStack2();
    };
    Stack3.prototype.slice = function slice7(begin, end) {
      if (wholeSlice2(begin, end, this.size)) {
        return this;
      }
      var resolvedBegin = resolveBegin2(begin, this.size);
      var resolvedEnd = resolveEnd2(end, this.size);
      if (resolvedEnd !== this.size) {
        return IndexedCollection$$1.prototype.slice.call(this, begin, end);
      }
      var newSize = this.size - resolvedBegin;
      var head = this._head;
      while (resolvedBegin--) {
        head = head.next;
      }
      if (this.__ownerID) {
        this.size = newSize;
        this._head = head;
        this.__hash = void 0;
        this.__altered = true;
        return this;
      }
      return makeStack2(newSize, head);
    };
    Stack3.prototype.__ensureOwner = function __ensureOwner3(ownerID) {
      if (ownerID === this.__ownerID) {
        return this;
      }
      if (!ownerID) {
        if (this.size === 0) {
          return emptyStack2();
        }
        this.__ownerID = ownerID;
        this.__altered = false;
        return this;
      }
      return makeStack2(this.size, this._head, ownerID, this.__hash);
    };
    Stack3.prototype.__iterate = function __iterate3(fn2, reverse5) {
      var this$1 = this;
      if (reverse5) {
        return new ArraySeq2(this.toArray()).__iterate(
          function(v4, k4) {
            return fn2(v4, k4, this$1);
          },
          reverse5
        );
      }
      var iterations = 0;
      var node = this._head;
      while (node) {
        if (fn2(node.value, iterations++, this$1) === false) {
          break;
        }
        node = node.next;
      }
      return iterations;
    };
    Stack3.prototype.__iterator = function __iterator3(type2, reverse5) {
      if (reverse5) {
        return new ArraySeq2(this.toArray()).__iterator(type2, reverse5);
      }
      var iterations = 0;
      var node = this._head;
      return new Iterator3(function() {
        if (node) {
          var value = node.value;
          node = node.next;
          return iteratorValue2(type2, iterations++, value);
        }
        return iteratorDone2();
      });
    };
    return Stack3;
  }(IndexedCollection2);
  Stack2.isStack = isStack2;
  var StackPrototype2 = Stack2.prototype;
  StackPrototype2[IS_STACK_SYMBOL2] = true;
  StackPrototype2.shift = StackPrototype2.pop;
  StackPrototype2.unshift = StackPrototype2.push;
  StackPrototype2.unshiftAll = StackPrototype2.pushAll;
  StackPrototype2.withMutations = withMutations2;
  StackPrototype2.wasAltered = wasAltered3;
  StackPrototype2.asImmutable = asImmutable2;
  StackPrototype2["@@transducer/init"] = StackPrototype2.asMutable = asMutable2;
  StackPrototype2["@@transducer/step"] = function(result, arr) {
    return result.unshift(arr);
  };
  StackPrototype2["@@transducer/result"] = function(obj) {
    return obj.asImmutable();
  };
  function makeStack2(size2, head, ownerID, hash3) {
    var map5 = Object.create(StackPrototype2);
    map5.size = size2;
    map5._head = head;
    map5.__ownerID = ownerID;
    map5.__hash = hash3;
    map5.__altered = false;
    return map5;
  }
  var EMPTY_STACK2;
  function emptyStack2() {
    return EMPTY_STACK2 || (EMPTY_STACK2 = makeStack2(0));
  }
  var IS_SET_SYMBOL2 = "@@__IMMUTABLE_SET__@@";
  function isSet2(maybeSet) {
    return Boolean(maybeSet && maybeSet[IS_SET_SYMBOL2]);
  }
  function isOrderedSet2(maybeOrderedSet) {
    return isSet2(maybeOrderedSet) && isOrdered2(maybeOrderedSet);
  }
  function deepEqual2(a5, b2) {
    if (a5 === b2) {
      return true;
    }
    if (!isCollection2(b2) || a5.size !== void 0 && b2.size !== void 0 && a5.size !== b2.size || a5.__hash !== void 0 && b2.__hash !== void 0 && a5.__hash !== b2.__hash || isKeyed2(a5) !== isKeyed2(b2) || isIndexed2(a5) !== isIndexed2(b2) || isOrdered2(a5) !== isOrdered2(b2) || isSorted(a5) !== isSorted(b2)) {
      return false;
    }
    if (a5.size === 0 && b2.size === 0) {
      return true;
    }
    var notAssociative = !isAssociative2(a5);
    if (isOrdered2(a5)) {
      var entries5 = a5.entries();
      return b2.every(function(v4, k4) {
        var entry = entries5.next().value;
        return entry && is2(entry[1], v4) && (notAssociative || is2(entry[0], k4));
      }) && entries5.next().done;
    }
    var flipped = false;
    if (a5.size === void 0) {
      if (b2.size === void 0) {
        if (typeof a5.cacheResult === "function") {
          a5.cacheResult();
        }
      } else {
        flipped = true;
        var _3 = a5;
        a5 = b2;
        b2 = _3;
      }
    }
    var allEqual = true;
    var bSize = b2.__iterate(function(v4, k4) {
      if (notAssociative ? !a5.has(v4) : flipped ? !is2(v4, a5.get(k4, NOT_SET2)) : !is2(a5.get(k4, NOT_SET2), v4)) {
        allEqual = false;
        return false;
      }
    });
    return allEqual && a5.size === bSize;
  }
  function mixin2(ctor, methods) {
    var keyCopier = function(key) {
      ctor.prototype[key] = methods[key];
    };
    Object.keys(methods).forEach(keyCopier);
    Object.getOwnPropertySymbols && Object.getOwnPropertySymbols(methods).forEach(keyCopier);
    return ctor;
  }
  function toJS2(value) {
    if (!value || typeof value !== "object") {
      return value;
    }
    if (!isCollection2(value)) {
      if (!isDataStructure2(value)) {
        return value;
      }
      value = Seq2(value);
    }
    if (isKeyed2(value)) {
      var result$1 = {};
      value.__iterate(function(v4, k4) {
        result$1[k4] = toJS2(v4);
      });
      return result$1;
    }
    var result = [];
    value.__iterate(function(v4) {
      result.push(toJS2(v4));
    });
    return result;
  }
  function isSortedSet(maybeSortedSet) {
    return isSet2(maybeSortedSet) && isSorted(maybeSortedSet);
  }
  var Set3 = function(SetCollection$$1) {
    function Set4(value) {
      return value === null || value === void 0 ? emptySet2() : isSet2(value) && !isOrdered2(value) && !isSorted(value) ? value : emptySet2().withMutations(function(set7) {
        var iter = SetCollection$$1(value);
        assertNotInfinite2(iter.size);
        iter.forEach(function(v4) {
          return set7.add(v4);
        });
      });
    }
    if (SetCollection$$1)
      Set4.__proto__ = SetCollection$$1;
    Set4.prototype = Object.create(SetCollection$$1 && SetCollection$$1.prototype);
    Set4.prototype.constructor = Set4;
    Set4.of = function of() {
      return this(arguments);
    };
    Set4.fromKeys = function fromKeys(value) {
      return this(KeyedCollection2(value).keySeq());
    };
    Set4.intersect = function intersect(sets) {
      sets = Collection3(sets).toArray();
      return sets.length ? SetPrototype2.intersect.apply(Set4(sets.pop()), sets) : emptySet2();
    };
    Set4.union = function union(sets) {
      sets = Collection3(sets).toArray();
      return sets.length ? SetPrototype2.union.apply(Set4(sets.pop()), sets) : emptySet2();
    };
    Set4.prototype.toString = function toString9() {
      return this.__toString("Set {", "}");
    };
    Set4.prototype.has = function has9(value) {
      return this._map.has(value);
    };
    Set4.prototype.add = function add(value) {
      return updateSet2(this, this._map.set(value, value));
    };
    Set4.prototype.remove = function remove7(value) {
      return updateSet2(this, this._map.remove(value));
    };
    Set4.prototype.clear = function clear3() {
      return updateSet2(this, this._map.clear());
    };
    Set4.prototype.map = function map5(mapper, context) {
      var this$1 = this;
      var removes = [];
      var adds = [];
      this.forEach(function(value) {
        var mapped = mapper.call(context, value, value, this$1);
        if (mapped !== value) {
          removes.push(value);
          adds.push(mapped);
        }
      });
      return this.withMutations(function(set7) {
        removes.forEach(function(value) {
          return set7.remove(value);
        });
        adds.forEach(function(value) {
          return set7.add(value);
        });
      });
    };
    Set4.prototype.union = function union() {
      var iters = [], len = arguments.length;
      while (len--)
        iters[len] = arguments[len];
      iters = iters.filter(function(x5) {
        return x5.size !== 0;
      });
      if (iters.length === 0) {
        return this;
      }
      if (this.size === 0 && !this.__ownerID && iters.length === 1) {
        return this.constructor(iters[0]);
      }
      return this.withMutations(function(set7) {
        for (var ii2 = 0; ii2 < iters.length; ii2++) {
          SetCollection$$1(iters[ii2]).forEach(function(value) {
            return set7.add(value);
          });
        }
      });
    };
    Set4.prototype.intersect = function intersect() {
      var iters = [], len = arguments.length;
      while (len--)
        iters[len] = arguments[len];
      if (iters.length === 0) {
        return this;
      }
      iters = iters.map(function(iter) {
        return SetCollection$$1(iter);
      });
      var toRemove = [];
      this.forEach(function(value) {
        if (!iters.every(function(iter) {
          return iter.includes(value);
        })) {
          toRemove.push(value);
        }
      });
      return this.withMutations(function(set7) {
        toRemove.forEach(function(value) {
          set7.remove(value);
        });
      });
    };
    Set4.prototype.subtract = function subtract() {
      var iters = [], len = arguments.length;
      while (len--)
        iters[len] = arguments[len];
      if (iters.length === 0) {
        return this;
      }
      iters = iters.map(function(iter) {
        return SetCollection$$1(iter);
      });
      var toRemove = [];
      this.forEach(function(value) {
        if (iters.some(function(iter) {
          return iter.includes(value);
        })) {
          toRemove.push(value);
        }
      });
      return this.withMutations(function(set7) {
        toRemove.forEach(function(value) {
          set7.remove(value);
        });
      });
    };
    Set4.prototype.sort = function sort3(comparator) {
      return OrderedSet2(sortFactory2(this, comparator));
    };
    Set4.prototype.sortBy = function sortBy3(mapper, comparator) {
      return OrderedSet2(sortFactory2(this, comparator, mapper));
    };
    Set4.prototype.wasAltered = function wasAltered5() {
      return this._map.wasAltered();
    };
    Set4.prototype.__iterate = function __iterate3(fn2, reverse5) {
      var this$1 = this;
      return this._map.__iterate(function(k4) {
        return fn2(k4, k4, this$1);
      }, reverse5);
    };
    Set4.prototype.__iterator = function __iterator3(type2, reverse5) {
      return this._map.__iterator(type2, reverse5);
    };
    Set4.prototype.__ensureOwner = function __ensureOwner3(ownerID) {
      if (ownerID === this.__ownerID) {
        return this;
      }
      var newMap = this._map.__ensureOwner(ownerID);
      if (!ownerID) {
        if (this.size === 0) {
          return this.__empty();
        }
        this.__ownerID = ownerID;
        this._map = newMap;
        return this;
      }
      return this.__make(newMap, ownerID);
    };
    return Set4;
  }(SetCollection2);
  Set3.isSet = isSet2;
  var SetPrototype2 = Set3.prototype;
  SetPrototype2[IS_SET_SYMBOL2] = true;
  SetPrototype2[DELETE2] = SetPrototype2.remove;
  SetPrototype2.merge = SetPrototype2.concat = SetPrototype2.union;
  SetPrototype2.withMutations = withMutations2;
  SetPrototype2.asImmutable = asImmutable2;
  SetPrototype2["@@transducer/init"] = SetPrototype2.asMutable = asMutable2;
  SetPrototype2["@@transducer/step"] = function(result, arr) {
    return result.add(arr);
  };
  SetPrototype2["@@transducer/result"] = function(obj) {
    return obj.asImmutable();
  };
  SetPrototype2.__empty = emptySet2;
  SetPrototype2.__make = makeSet2;
  function updateSet2(set7, newMap) {
    if (set7.__ownerID) {
      set7.size = newMap.size;
      set7._map = newMap;
      return set7;
    }
    return newMap === set7._map ? set7 : newMap.size === 0 ? set7.__empty() : set7.__make(newMap);
  }
  function makeSet2(map5, ownerID) {
    var set7 = Object.create(SetPrototype2);
    set7.size = map5 ? map5.size : 0;
    set7._map = map5;
    set7.__ownerID = ownerID;
    return set7;
  }
  var EMPTY_SET2;
  function emptySet2() {
    return EMPTY_SET2 || (EMPTY_SET2 = makeSet2(emptyMap2()));
  }
  var SortedSet = function(Set$$1) {
    function SortedSet2(value, comparator, options) {
      if (!comparator) {
        if (this instanceof SortedSet2) {
          comparator = this._map && this.getComparator();
        }
        if (!comparator) {
          comparator = SortedSet2.defaultComparator;
        }
      }
      if (!options) {
        if (this instanceof SortedSet2) {
          options = this._map && this.getOptions();
        }
        if (!options) {
          options = SortedSet2.defaultOptions;
        }
      }
      return value === null || value === void 0 ? emptySortedSet(comparator, options) : isSortedSet(value) && value.getComparator() === comparator && value.getOptions() === options ? value : emptySortedSet(comparator, options).withMutations(function(set7) {
        set7.pack(value);
      });
    }
    if (Set$$1)
      SortedSet2.__proto__ = Set$$1;
    SortedSet2.prototype = Object.create(Set$$1 && Set$$1.prototype);
    SortedSet2.prototype.constructor = SortedSet2;
    SortedSet2.of = function of() {
      return this(arguments);
    };
    SortedSet2.fromKeys = function fromKeys(value) {
      return this(KeyedCollection2(value).keySeq());
    };
    SortedSet2.prototype.toString = function toString9() {
      return this.__toString("SortedSet {", "}");
    };
    SortedSet2.prototype.getComparator = function getComparator2() {
      return this._map.getComparator();
    };
    SortedSet2.prototype.getOptions = function getOptions() {
      return this._map.getOptions();
    };
    SortedSet2.prototype.pack = function pack2(value) {
      var seq = value === void 0 ? void 0 : SetCollection2(value).toKeyedSeq().mapKeys(function(k4, v4) {
        return v4;
      });
      return updateSortedSet(this, this._map.pack(seq));
    };
    SortedSet2.prototype.from = function from(value, backwards) {
      return this._map.from(value, backwards).toSetSeq();
    };
    SortedSet2.prototype.fromIndex = function fromIndex(index, backwards) {
      return this._map.fromIndex(index, backwards).toSetSeq();
    };
    SortedSet2.prototype.sort = function sort3(comparator) {
      return SortedSet2(this, comparator, this.getOptions());
    };
    SortedSet2.prototype.sortBy = function sortBy3(mapper, comparator) {
      return SortedSet2(mapFactory2(this, mapper), comparator, this.getOptions());
    };
    SortedSet2.prototype.__ensureOwner = function __ensureOwner3(ownerID) {
      if (ownerID === this.__ownerID) {
        return this;
      }
      var newMap = this._map.__ensureOwner(ownerID);
      if (!ownerID) {
        if (this.size === 0) {
          return this.__empty();
        }
        this.__ownerID = ownerID;
        this._map = newMap;
        return this;
      }
      return this.__make(newMap, ownerID);
    };
    return SortedSet2;
  }(Set3);
  SortedSet.isSortedSet = isSortedSet;
  SortedSet.defaultComparator = SortedMap.defaultComparator;
  SortedSet.defaultOptions = SortedMap.defaultOptions;
  var SortedSetPrototype = SortedSet.prototype;
  SortedSetPrototype[IS_SORTED_SYMBOL] = true;
  SortedSetPrototype.__empty = function() {
    return emptySortedSet(this.getComparator(), this.getOptions());
  };
  SortedSetPrototype.__make = makeSortedSet;
  function updateSortedSet(set7, newMap) {
    if (set7.__ownerID) {
      set7.size = newMap.size;
      set7._map = newMap;
      return set7;
    }
    return newMap === set7._map ? set7 : newMap.size === 0 ? set7.__empty() : set7.__make(newMap);
  }
  function makeSortedSet(map5, ownerID) {
    var set7 = Object.create(SortedSetPrototype);
    set7.size = map5 ? map5.size : 0;
    set7._map = map5;
    set7.__ownerID = ownerID;
    return set7;
  }
  function emptySortedSet(comparator, options) {
    return makeSortedSet(emptySortedMap(comparator, options));
  }
  var Range2 = function(IndexedSeq$$1) {
    function Range3(start2, end, step) {
      if (!(this instanceof Range3)) {
        return new Range3(start2, end, step);
      }
      invariant2(step !== 0, "Cannot step a Range by 0");
      start2 = start2 || 0;
      if (end === void 0) {
        end = Infinity;
      }
      step = step === void 0 ? 1 : Math.abs(step);
      if (end < start2) {
        step = -step;
      }
      this._start = start2;
      this._end = end;
      this._step = step;
      this.size = Math.max(0, Math.ceil((end - start2) / step - 1) + 1);
      if (this.size === 0) {
        if (EMPTY_RANGE2) {
          return EMPTY_RANGE2;
        }
        EMPTY_RANGE2 = this;
      }
    }
    if (IndexedSeq$$1)
      Range3.__proto__ = IndexedSeq$$1;
    Range3.prototype = Object.create(IndexedSeq$$1 && IndexedSeq$$1.prototype);
    Range3.prototype.constructor = Range3;
    Range3.prototype.toString = function toString9() {
      if (this.size === 0) {
        return "Range []";
      }
      return "Range [ " + this._start + "..." + this._end + (this._step !== 1 ? " by " + this._step : "") + " ]";
    };
    Range3.prototype.get = function get24(index, notSetValue) {
      return this.has(index) ? this._start + wrapIndex2(this, index) * this._step : notSetValue;
    };
    Range3.prototype.includes = function includes5(searchValue) {
      var possibleIndex = (searchValue - this._start) / this._step;
      return possibleIndex >= 0 && possibleIndex < this.size && possibleIndex === Math.floor(possibleIndex);
    };
    Range3.prototype.slice = function slice7(begin, end) {
      if (wholeSlice2(begin, end, this.size)) {
        return this;
      }
      begin = resolveBegin2(begin, this.size);
      end = resolveEnd2(end, this.size);
      if (end <= begin) {
        return new Range3(0, 0);
      }
      return new Range3(
        this.get(begin, this._end),
        this.get(end, this._end),
        this._step
      );
    };
    Range3.prototype.indexOf = function indexOf3(searchValue) {
      var offsetValue = searchValue - this._start;
      if (offsetValue % this._step === 0) {
        var index = offsetValue / this._step;
        if (index >= 0 && index < this.size) {
          return index;
        }
      }
      return -1;
    };
    Range3.prototype.lastIndexOf = function lastIndexOf3(searchValue) {
      return this.indexOf(searchValue);
    };
    Range3.prototype.__iterate = function __iterate3(fn2, reverse5) {
      var this$1 = this;
      var size2 = this.size;
      var step = this._step;
      var value = reverse5 ? this._start + (size2 - 1) * step : this._start;
      var i5 = 0;
      while (i5 !== size2) {
        if (fn2(value, reverse5 ? size2 - ++i5 : i5++, this$1) === false) {
          break;
        }
        value += reverse5 ? -step : step;
      }
      return i5;
    };
    Range3.prototype.__iterator = function __iterator3(type2, reverse5) {
      var size2 = this.size;
      var step = this._step;
      var value = reverse5 ? this._start + (size2 - 1) * step : this._start;
      var i5 = 0;
      return new Iterator3(function() {
        if (i5 === size2) {
          return iteratorDone2();
        }
        var v4 = value;
        value += reverse5 ? -step : step;
        return iteratorValue2(type2, reverse5 ? size2 - ++i5 : i5++, v4);
      });
    };
    Range3.prototype.equals = function equals5(other) {
      return other instanceof Range3 ? this._start === other._start && this._end === other._end && this._step === other._step : deepEqual2(this, other);
    };
    return Range3;
  }(IndexedSeq2);
  var EMPTY_RANGE2;
  function getIn$12(collection, searchKeyPath, notSetValue) {
    var keyPath = coerceKeyPath2(searchKeyPath);
    var i5 = 0;
    while (i5 !== keyPath.length) {
      collection = get13(collection, keyPath[i5++], NOT_SET2);
      if (collection === NOT_SET2) {
        return notSetValue;
      }
    }
    return collection;
  }
  function getIn$$1(searchKeyPath, notSetValue) {
    return getIn$12(this, searchKeyPath, notSetValue);
  }
  function hasIn$12(collection, keyPath) {
    return getIn$12(collection, keyPath, NOT_SET2) !== NOT_SET2;
  }
  function hasIn$$1(searchKeyPath) {
    return hasIn$12(this, searchKeyPath);
  }
  function toObject2() {
    assertNotInfinite2(this.size);
    var object = {};
    this.__iterate(function(v4, k4) {
      object[k4] = v4;
    });
    return object;
  }
  Collection3.isIterable = isCollection2;
  Collection3.isKeyed = isKeyed2;
  Collection3.isIndexed = isIndexed2;
  Collection3.isAssociative = isAssociative2;
  Collection3.isOrdered = isOrdered2;
  Collection3.Iterator = Iterator3;
  mixin2(Collection3, {
    // ### Conversion to other types
    toArray: function toArray2() {
      assertNotInfinite2(this.size);
      var array3 = new Array(this.size || 0);
      var useTuples = isKeyed2(this);
      var i5 = 0;
      this.__iterate(function(v4, k4) {
        array3[i5++] = useTuples ? [k4, v4] : v4;
      });
      return array3;
    },
    toIndexedSeq: function toIndexedSeq2() {
      return new ToIndexedSequence2(this);
    },
    toJS: function toJS$13() {
      return toJS2(this);
    },
    toKeyedSeq: function toKeyedSeq3() {
      return new ToKeyedSequence2(this, true);
    },
    toMap: function toMap2() {
      return Map3(this.toKeyedSeq());
    },
    toObject: toObject2,
    toOrderedMap: function toOrderedMap2() {
      return OrderedMap2(this.toKeyedSeq());
    },
    toSortedMap: function toSortedMap(comparator, options) {
      return SortedMap(this.toKeyedSeq(), comparator, options);
    },
    toSortedSet: function toSortedSet(comparator, options) {
      return SortedSet(
        isKeyed2(this) ? this.valueSeq() : this,
        comparator,
        options
      );
    },
    toOrderedSet: function toOrderedSet2() {
      return OrderedSet2(isKeyed2(this) ? this.valueSeq() : this);
    },
    toSet: function toSet2() {
      return Set3(isKeyed2(this) ? this.valueSeq() : this);
    },
    toSetSeq: function toSetSeq2() {
      return new ToSetSequence2(this);
    },
    toSeq: function toSeq3() {
      return isIndexed2(this) ? this.toIndexedSeq() : isKeyed2(this) ? this.toKeyedSeq() : this.toSetSeq();
    },
    toStack: function toStack2() {
      return Stack2(isKeyed2(this) ? this.valueSeq() : this);
    },
    toList: function toList2() {
      return List2(isKeyed2(this) ? this.valueSeq() : this);
    },
    // ### Common JavaScript methods and properties
    toString: function toString6() {
      return "[Collection]";
    },
    __toString: function __toString2(head, tail) {
      if (this.size === 0) {
        return head + tail;
      }
      return head + " " + this.toSeq().map(this.__toStringMapper).join(", ") + " " + tail;
    },
    // ### ES6 Collection methods (ES6 Array and Map)
    concat: function concat2() {
      var values3 = [], len = arguments.length;
      while (len--)
        values3[len] = arguments[len];
      return reify2(this, concatFactory2(this, values3));
    },
    includes: function includes3(searchValue) {
      return this.some(function(value) {
        return is2(value, searchValue);
      });
    },
    entries: function entries3() {
      return this.__iterator(ITERATE_ENTRIES2);
    },
    every: function every2(predicate, context) {
      assertNotInfinite2(this.size);
      var returnValue = true;
      this.__iterate(function(v4, k4, c4) {
        if (!predicate.call(context, v4, k4, c4)) {
          returnValue = false;
          return false;
        }
      });
      return returnValue;
    },
    filter: function filter4(predicate, context) {
      return reify2(this, filterFactory2(this, predicate, context, true));
    },
    find: function find3(predicate, context, notSetValue) {
      var entry = this.findEntry(predicate, context);
      return entry ? entry[1] : notSetValue;
    },
    forEach: function forEach2(sideEffect, context) {
      assertNotInfinite2(this.size);
      return this.__iterate(context ? sideEffect.bind(context) : sideEffect);
    },
    join: function join2(separator) {
      assertNotInfinite2(this.size);
      separator = separator !== void 0 ? "" + separator : ",";
      var joined = "";
      var isFirst = true;
      this.__iterate(function(v4) {
        isFirst ? isFirst = false : joined += separator;
        joined += v4 !== null && v4 !== void 0 ? v4.toString() : "";
      });
      return joined;
    },
    keys: function keys2() {
      return this.__iterator(ITERATE_KEYS2);
    },
    map: function map4(mapper, context) {
      return reify2(this, mapFactory2(this, mapper, context));
    },
    reduce: function reduce$12(reducer, initialReduction, context) {
      return reduce2(
        this,
        reducer,
        initialReduction,
        context,
        arguments.length < 2,
        false
      );
    },
    reduceRight: function reduceRight2(reducer, initialReduction, context) {
      return reduce2(
        this,
        reducer,
        initialReduction,
        context,
        arguments.length < 2,
        true
      );
    },
    reverse: function reverse3() {
      return reify2(this, reverseFactory2(this, true));
    },
    slice: function slice5(begin, end) {
      return reify2(this, sliceFactory2(this, begin, end, true));
    },
    some: function some2(predicate, context) {
      return !this.every(not2(predicate), context);
    },
    sort: function sort2(comparator) {
      return reify2(this, sortFactory2(this, comparator));
    },
    partialSort: function partialSort(n4, comparator) {
      return reify2(this, partialSortFactory(this, n4, comparator));
    },
    incSort: function incSort(comparator) {
      return reify2(this, incSortFactory(this, comparator, null, true));
    },
    values: function values2() {
      return this.__iterator(ITERATE_VALUES2);
    },
    // ### More sequential methods
    butLast: function butLast2() {
      return this.slice(0, -1);
    },
    isEmpty: function isEmpty2() {
      return this.size !== void 0 ? this.size === 0 : !this.some(function() {
        return true;
      });
    },
    count: function count3(predicate, context) {
      return ensureSize2(
        predicate ? this.toSeq().filter(predicate, context) : this
      );
    },
    countBy: function countBy2(grouper, context) {
      return countByFactory2(this, grouper, context);
    },
    equals: function equals3(other) {
      return deepEqual2(this, other);
    },
    entrySeq: function entrySeq2() {
      var collection = this;
      if (collection._cache) {
        return new ArraySeq2(collection._cache);
      }
      var entriesSequence = collection.toSeq().map(entryMapper2).toIndexedSeq();
      entriesSequence.fromEntrySeq = function() {
        return collection.toSeq();
      };
      return entriesSequence;
    },
    filterNot: function filterNot2(predicate, context) {
      return this.filter(not2(predicate), context);
    },
    findEntry: function findEntry2(predicate, context, notSetValue) {
      var found = notSetValue;
      this.__iterate(function(v4, k4, c4) {
        if (predicate.call(context, v4, k4, c4)) {
          found = [k4, v4];
          return false;
        }
      });
      return found;
    },
    findKey: function findKey2(predicate, context) {
      var entry = this.findEntry(predicate, context);
      return entry && entry[0];
    },
    findLast: function findLast2(predicate, context, notSetValue) {
      return this.toKeyedSeq().reverse().find(predicate, context, notSetValue);
    },
    findLastEntry: function findLastEntry2(predicate, context, notSetValue) {
      return this.toKeyedSeq().reverse().findEntry(predicate, context, notSetValue);
    },
    findLastKey: function findLastKey2(predicate, context) {
      return this.toKeyedSeq().reverse().findKey(predicate, context);
    },
    first: function first3(notSetValue) {
      return this.find(returnTrue2, null, notSetValue);
    },
    flatMap: function flatMap2(mapper, context) {
      return reify2(this, flatMapFactory2(this, mapper, context));
    },
    flatten: function flatten4(depth) {
      return reify2(this, flattenFactory2(this, depth, true));
    },
    fromEntrySeq: function fromEntrySeq2() {
      return new FromEntriesSequence2(this);
    },
    get: function get20(searchKey, notSetValue) {
      return this.find(function(_3, key) {
        return is2(key, searchKey);
      }, void 0, notSetValue);
    },
    getIn: getIn$$1,
    groupBy: function groupBy2(grouper, context) {
      return groupByFactory2(this, grouper, context);
    },
    has: function has6(searchKey) {
      return this.get(searchKey, NOT_SET2) !== NOT_SET2;
    },
    hasIn: hasIn$$1,
    isSubset: function isSubset2(iter) {
      iter = typeof iter.includes === "function" ? iter : Collection3(iter);
      return this.every(function(value) {
        return iter.includes(value);
      });
    },
    isSuperset: function isSuperset2(iter) {
      iter = typeof iter.isSubset === "function" ? iter : Collection3(iter);
      return iter.isSubset(this);
    },
    keyOf: function keyOf2(searchValue) {
      return this.findKey(function(value) {
        return is2(value, searchValue);
      });
    },
    keySeq: function keySeq4() {
      return this.toSeq().map(keyMapper2).toIndexedSeq();
    },
    last: function last3(notSetValue) {
      return this.toSeq().reverse().first(notSetValue);
    },
    lastKeyOf: function lastKeyOf2(searchValue) {
      return this.toKeyedSeq().reverse().keyOf(searchValue);
    },
    max: function max5(comparator) {
      return maxFactory2(this, comparator);
    },
    maxBy: function maxBy2(mapper, comparator) {
      return maxFactory2(this, comparator, mapper);
    },
    min: function min4(comparator) {
      return maxFactory2(
        this,
        comparator ? neg2(comparator) : defaultNegComparator2
      );
    },
    minBy: function minBy2(mapper, comparator) {
      return maxFactory2(
        this,
        comparator ? neg2(comparator) : defaultNegComparator2,
        mapper
      );
    },
    rest: function rest2() {
      return this.slice(1);
    },
    skip: function skip2(amount) {
      return amount === 0 ? this : this.slice(Math.max(0, amount));
    },
    skipLast: function skipLast2(amount) {
      return amount === 0 ? this : this.slice(0, -Math.max(0, amount));
    },
    skipWhile: function skipWhile3(predicate, context) {
      return reify2(this, skipWhileFactory2(this, predicate, context, true));
    },
    skipUntil: function skipUntil2(predicate, context) {
      return this.skipWhile(not2(predicate), context);
    },
    sortBy: function sortBy2(mapper, comparator) {
      return reify2(this, sortFactory2(this, comparator, mapper));
    },
    partialSortBy: function partialSortBy(n4, mapper, comparator) {
      return reify2(this, partialSortFactory(this, n4, comparator, mapper));
    },
    incSortBy: function incSortBy(mapper, comparator) {
      return reify2(this, incSortFactory(this, comparator, mapper, true));
    },
    take: function take2(amount) {
      return this.slice(0, Math.max(0, amount));
    },
    takeLast: function takeLast2(amount) {
      return this.slice(-Math.max(0, amount));
    },
    takeWhile: function takeWhile2(predicate, context) {
      return reify2(this, takeWhileFactory2(this, predicate, context));
    },
    takeUntil: function takeUntil2(predicate, context) {
      return this.takeWhile(not2(predicate), context);
    },
    update: function update8(fn2) {
      return fn2(this);
    },
    valueSeq: function valueSeq2() {
      return this.toIndexedSeq();
    },
    // ### Hashable Object
    hashCode: function hashCode3() {
      return this.__hash || (this.__hash = hashCollection2(this));
    }
    // ### Internal
    // abstract __iterate(fn, reverse)
    // abstract __iterator(type, reverse)
  });
  var CollectionPrototype2 = Collection3.prototype;
  CollectionPrototype2[IS_COLLECTION_SYMBOL2] = true;
  CollectionPrototype2[ITERATOR_SYMBOL2] = CollectionPrototype2.values;
  CollectionPrototype2.toJSON = CollectionPrototype2.toArray;
  CollectionPrototype2.__toStringMapper = quoteString2;
  CollectionPrototype2.inspect = CollectionPrototype2.toSource = function() {
    return this.toString();
  };
  CollectionPrototype2.chain = CollectionPrototype2.flatMap;
  CollectionPrototype2.contains = CollectionPrototype2.includes;
  mixin2(KeyedCollection2, {
    // ### More sequential methods
    flip: function flip4() {
      return reify2(this, flipFactory2(this));
    },
    mapEntries: function mapEntries2(mapper, context) {
      var this$1 = this;
      var iterations = 0;
      return reify2(
        this,
        this.toSeq().map(function(v4, k4) {
          return mapper.call(context, [k4, v4], iterations++, this$1);
        }).fromEntrySeq()
      );
    },
    mapKeys: function mapKeys2(mapper, context) {
      var this$1 = this;
      return reify2(
        this,
        this.toSeq().flip().map(function(k4, v4) {
          return mapper.call(context, k4, v4, this$1);
        }).flip()
      );
    }
  });
  var KeyedCollectionPrototype2 = KeyedCollection2.prototype;
  KeyedCollectionPrototype2[IS_KEYED_SYMBOL2] = true;
  KeyedCollectionPrototype2[ITERATOR_SYMBOL2] = CollectionPrototype2.entries;
  KeyedCollectionPrototype2.toJSON = toObject2;
  KeyedCollectionPrototype2.__toStringMapper = function(v4, k4) {
    return quoteString2(k4) + ": " + quoteString2(v4);
  };
  mixin2(IndexedCollection2, {
    // ### Conversion to other types
    toKeyedSeq: function toKeyedSeq4() {
      return new ToKeyedSequence2(this, false);
    },
    // ### ES6 Collection methods (ES6 Array and Map)
    filter: function filter5(predicate, context) {
      return reify2(this, filterFactory2(this, predicate, context, false));
    },
    findIndex: function findIndex2(predicate, context) {
      var entry = this.findEntry(predicate, context);
      return entry ? entry[0] : -1;
    },
    indexOf: function indexOf2(searchValue) {
      var key = this.keyOf(searchValue);
      return key === void 0 ? -1 : key;
    },
    lastIndexOf: function lastIndexOf2(searchValue) {
      var key = this.lastKeyOf(searchValue);
      return key === void 0 ? -1 : key;
    },
    reverse: function reverse4() {
      return reify2(this, reverseFactory2(this, false));
    },
    slice: function slice6(begin, end) {
      return reify2(this, sliceFactory2(this, begin, end, false));
    },
    splice: function splice2(index, removeNum) {
      var numArgs = arguments.length;
      removeNum = Math.max(removeNum || 0, 0);
      if (numArgs === 0 || numArgs === 2 && !removeNum) {
        return this;
      }
      index = resolveBegin2(index, index < 0 ? this.count() : this.size);
      var spliced = this.slice(0, index);
      return reify2(
        this,
        numArgs === 1 ? spliced : spliced.concat(arrCopy2(arguments, 2), this.slice(index + removeNum))
      );
    },
    // ### More collection methods
    findLastIndex: function findLastIndex2(predicate, context) {
      var entry = this.findLastEntry(predicate, context);
      return entry ? entry[0] : -1;
    },
    first: function first4(notSetValue) {
      return this.get(0, notSetValue);
    },
    flatten: function flatten5(depth) {
      return reify2(this, flattenFactory2(this, depth, false));
    },
    get: function get21(index, notSetValue) {
      index = wrapIndex2(this, index);
      return index < 0 || (this.size === Infinity || this.size !== void 0 && index > this.size) ? notSetValue : this.find(function(_3, key) {
        return key === index;
      }, void 0, notSetValue);
    },
    has: function has7(index) {
      index = wrapIndex2(this, index);
      return index >= 0 && (this.size !== void 0 ? this.size === Infinity || index < this.size : this.indexOf(index) !== -1);
    },
    interpose: function interpose2(separator) {
      return reify2(this, interposeFactory2(this, separator));
    },
    interleave: function interleave2() {
      var collections = [this].concat(arrCopy2(arguments));
      var zipped = zipWithFactory2(this.toSeq(), IndexedSeq2.of, collections);
      var interleaved = zipped.flatten(true);
      if (zipped.size) {
        interleaved.size = zipped.size * collections.length;
      }
      return reify2(this, interleaved);
    },
    keySeq: function keySeq5() {
      return Range2(0, this.size);
    },
    last: function last4(notSetValue) {
      return this.get(-1, notSetValue);
    },
    skipWhile: function skipWhile4(predicate, context) {
      return reify2(this, skipWhileFactory2(this, predicate, context, false));
    },
    incSort: function incSort2(comparator) {
      return reify2(this, incSortFactory(this, comparator, null, false));
    },
    incSortBy: function incSortBy2(mapper, comparator) {
      return reify2(this, incSortFactory(this, comparator, mapper, false));
    },
    zip: function zip2() {
      var collections = [this].concat(arrCopy2(arguments));
      return reify2(this, zipWithFactory2(this, defaultZipper2, collections));
    },
    zipAll: function zipAll2() {
      var collections = [this].concat(arrCopy2(arguments));
      return reify2(this, zipWithFactory2(this, defaultZipper2, collections, true));
    },
    zipWith: function zipWith2(zipper) {
      var collections = arrCopy2(arguments);
      collections[0] = this;
      return reify2(this, zipWithFactory2(this, zipper, collections));
    }
  });
  var IndexedCollectionPrototype2 = IndexedCollection2.prototype;
  IndexedCollectionPrototype2[IS_INDEXED_SYMBOL2] = true;
  IndexedCollectionPrototype2[IS_ORDERED_SYMBOL2] = true;
  mixin2(SetCollection2, {
    // ### ES6 Collection methods (ES6 Array and Map)
    get: function get22(value, notSetValue) {
      return this.has(value) ? value : notSetValue;
    },
    includes: function includes4(value) {
      return this.has(value);
    },
    // ### More sequential methods
    keySeq: function keySeq6() {
      return this.valueSeq();
    }
  });
  SetCollection2.prototype.has = CollectionPrototype2.includes;
  SetCollection2.prototype.contains = SetCollection2.prototype.includes;
  mixin2(KeyedSeq2, KeyedCollection2.prototype);
  mixin2(IndexedSeq2, IndexedCollection2.prototype);
  mixin2(SetSeq2, SetCollection2.prototype);
  function reduce2(collection, reducer, reduction, context, useFirst, reverse5) {
    assertNotInfinite2(collection.size);
    collection.__iterate(function(v4, k4, c4) {
      if (useFirst) {
        useFirst = false;
        reduction = v4;
      } else {
        reduction = reducer.call(context, reduction, v4, k4, c4);
      }
    }, reverse5);
    return reduction;
  }
  function keyMapper2(v4, k4) {
    return k4;
  }
  function entryMapper2(v4, k4) {
    return [k4, v4];
  }
  function not2(predicate) {
    return function() {
      return !predicate.apply(this, arguments);
    };
  }
  function neg2(predicate) {
    return function() {
      return -predicate.apply(this, arguments);
    };
  }
  function defaultZipper2() {
    return arrCopy2(arguments);
  }
  function defaultNegComparator2(a5, b2) {
    return a5 < b2 ? 1 : a5 > b2 ? -1 : 0;
  }
  function hashCollection2(collection) {
    if (collection.size === Infinity) {
      return 0;
    }
    var ordered = isOrdered2(collection);
    var keyed = isKeyed2(collection);
    var h4 = ordered ? 1 : 0;
    var size2 = collection.__iterate(
      keyed ? ordered ? function(v4, k4) {
        h4 = 31 * h4 + hashMerge2(hash2(v4), hash2(k4)) | 0;
      } : function(v4, k4) {
        h4 = h4 + hashMerge2(hash2(v4), hash2(k4)) | 0;
      } : ordered ? function(v4) {
        h4 = 31 * h4 + hash2(v4) | 0;
      } : function(v4) {
        h4 = h4 + hash2(v4) | 0;
      }
    );
    return murmurHashOfSize2(size2, h4);
  }
  function murmurHashOfSize2(size2, h4) {
    h4 = imul3(h4, 3432918353);
    h4 = imul3(h4 << 15 | h4 >>> -15, 461845907);
    h4 = imul3(h4 << 13 | h4 >>> -13, 5);
    h4 = (h4 + 3864292196 | 0) ^ size2;
    h4 = imul3(h4 ^ h4 >>> 16, 2246822507);
    h4 = imul3(h4 ^ h4 >>> 13, 3266489909);
    h4 = smi2(h4 ^ h4 >>> 16);
    return h4;
  }
  function hashMerge2(a5, b2) {
    return a5 ^ b2 + 2654435769 + (a5 << 6) + (a5 >> 2) | 0;
  }
  var OrderedSet2 = function(Set$$1) {
    function OrderedSet3(value) {
      return value === null || value === void 0 ? emptyOrderedSet2() : isOrderedSet2(value) ? value : emptyOrderedSet2().withMutations(function(set7) {
        var iter = SetCollection2(value);
        assertNotInfinite2(iter.size);
        iter.forEach(function(v4) {
          return set7.add(v4);
        });
      });
    }
    if (Set$$1)
      OrderedSet3.__proto__ = Set$$1;
    OrderedSet3.prototype = Object.create(Set$$1 && Set$$1.prototype);
    OrderedSet3.prototype.constructor = OrderedSet3;
    OrderedSet3.of = function of() {
      return this(arguments);
    };
    OrderedSet3.fromKeys = function fromKeys(value) {
      return this(KeyedCollection2(value).keySeq());
    };
    OrderedSet3.prototype.toString = function toString9() {
      return this.__toString("OrderedSet {", "}");
    };
    return OrderedSet3;
  }(Set3);
  OrderedSet2.isOrderedSet = isOrderedSet2;
  var OrderedSetPrototype2 = OrderedSet2.prototype;
  OrderedSetPrototype2[IS_ORDERED_SYMBOL2] = true;
  OrderedSetPrototype2.zip = IndexedCollectionPrototype2.zip;
  OrderedSetPrototype2.zipWith = IndexedCollectionPrototype2.zipWith;
  OrderedSetPrototype2.__empty = emptyOrderedSet2;
  OrderedSetPrototype2.__make = makeOrderedSet2;
  function makeOrderedSet2(map5, ownerID) {
    var set7 = Object.create(OrderedSetPrototype2);
    set7.size = map5 ? map5.size : 0;
    set7._map = map5;
    set7.__ownerID = ownerID;
    return set7;
  }
  var EMPTY_ORDERED_SET2;
  function emptyOrderedSet2() {
    return EMPTY_ORDERED_SET2 || (EMPTY_ORDERED_SET2 = makeOrderedSet2(emptyOrderedMap2()));
  }
  var Record3 = function Record4(defaultValues, name) {
    var hasInitialized;
    var RecordType = function Record5(values3) {
      var this$1 = this;
      if (values3 instanceof RecordType) {
        return values3;
      }
      if (!(this instanceof RecordType)) {
        return new RecordType(values3);
      }
      if (!hasInitialized) {
        hasInitialized = true;
        var keys3 = Object.keys(defaultValues);
        var indices = RecordTypePrototype._indices = {};
        RecordTypePrototype._name = name;
        RecordTypePrototype._keys = keys3;
        RecordTypePrototype._defaultValues = defaultValues;
        for (var i5 = 0; i5 < keys3.length; i5++) {
          var propName = keys3[i5];
          indices[propName] = i5;
          if (RecordTypePrototype[propName]) {
            typeof console === "object" && console.warn && console.warn(
              "Cannot define " + recordName2(this$1) + ' with property "' + propName + '" since that property name is part of the Record API.'
            );
          } else {
            setProp2(RecordTypePrototype, propName);
          }
        }
      }
      this.__ownerID = void 0;
      this._values = List2().withMutations(function(l5) {
        l5.setSize(this$1._keys.length);
        KeyedCollection2(values3).forEach(function(v4, k4) {
          l5.set(this$1._indices[k4], v4 === this$1._defaultValues[k4] ? void 0 : v4);
        });
      });
    };
    var RecordTypePrototype = RecordType.prototype = Object.create(
      RecordPrototype2
    );
    RecordTypePrototype.constructor = RecordType;
    if (name) {
      RecordType.displayName = name;
    }
    return RecordType;
  };
  Record3.prototype.toString = function toString7() {
    var this$1 = this;
    var str = recordName2(this) + " { ";
    var keys3 = this._keys;
    var k4;
    for (var i5 = 0, l5 = keys3.length; i5 !== l5; i5++) {
      k4 = keys3[i5];
      str += (i5 ? ", " : "") + k4 + ": " + quoteString2(this$1.get(k4));
    }
    return str + " }";
  };
  Record3.prototype.equals = function equals4(other) {
    return this === other || other && this._keys === other._keys && recordSeq2(this).equals(recordSeq2(other));
  };
  Record3.prototype.hashCode = function hashCode4() {
    return recordSeq2(this).hashCode();
  };
  Record3.prototype.has = function has8(k4) {
    return this._indices.hasOwnProperty(k4);
  };
  Record3.prototype.get = function get23(k4, notSetValue) {
    if (!this.has(k4)) {
      return notSetValue;
    }
    var index = this._indices[k4];
    var value = this._values.get(index);
    return value === void 0 ? this._defaultValues[k4] : value;
  };
  Record3.prototype.set = function set6(k4, v4) {
    if (this.has(k4)) {
      var newValues = this._values.set(
        this._indices[k4],
        v4 === this._defaultValues[k4] ? void 0 : v4
      );
      if (newValues !== this._values && !this.__ownerID) {
        return makeRecord2(this, newValues);
      }
    }
    return this;
  };
  Record3.prototype.remove = function remove6(k4) {
    return this.set(k4);
  };
  Record3.prototype.clear = function clear2() {
    var newValues = this._values.clear().setSize(this._keys.length);
    return this.__ownerID ? this : makeRecord2(this, newValues);
  };
  Record3.prototype.wasAltered = function wasAltered4() {
    return this._values.wasAltered();
  };
  Record3.prototype.toSeq = function toSeq4() {
    return recordSeq2(this);
  };
  Record3.prototype.toJS = function toJS$14() {
    return toJS2(this);
  };
  Record3.prototype.entries = function entries4() {
    return this.__iterator(ITERATE_ENTRIES2);
  };
  Record3.prototype.__iterator = function __iterator2(type2, reverse5) {
    return recordSeq2(this).__iterator(type2, reverse5);
  };
  Record3.prototype.__iterate = function __iterate2(fn2, reverse5) {
    return recordSeq2(this).__iterate(fn2, reverse5);
  };
  Record3.prototype.__ensureOwner = function __ensureOwner2(ownerID) {
    if (ownerID === this.__ownerID) {
      return this;
    }
    var newValues = this._values.__ensureOwner(ownerID);
    if (!ownerID) {
      this.__ownerID = ownerID;
      this._values = newValues;
      return this;
    }
    return makeRecord2(this, newValues, ownerID);
  };
  Record3.isRecord = isRecord2;
  Record3.getDescriptiveName = recordName2;
  var RecordPrototype2 = Record3.prototype;
  RecordPrototype2[IS_RECORD_SYMBOL2] = true;
  RecordPrototype2[DELETE2] = RecordPrototype2.remove;
  RecordPrototype2.deleteIn = RecordPrototype2.removeIn = deleteIn2;
  RecordPrototype2.getIn = getIn$$1;
  RecordPrototype2.hasIn = CollectionPrototype2.hasIn;
  RecordPrototype2.merge = merge;
  RecordPrototype2.mergeWith = mergeWith;
  RecordPrototype2.mergeIn = mergeIn2;
  RecordPrototype2.mergeDeep = mergeDeep2;
  RecordPrototype2.mergeDeepWith = mergeDeepWith2;
  RecordPrototype2.mergeDeepIn = mergeDeepIn2;
  RecordPrototype2.setIn = setIn$$1;
  RecordPrototype2.update = update$$1;
  RecordPrototype2.updateIn = updateIn$12;
  RecordPrototype2.withMutations = withMutations2;
  RecordPrototype2.asMutable = asMutable2;
  RecordPrototype2.asImmutable = asImmutable2;
  RecordPrototype2[ITERATOR_SYMBOL2] = RecordPrototype2.entries;
  RecordPrototype2.toJSON = RecordPrototype2.toObject = CollectionPrototype2.toObject;
  RecordPrototype2.inspect = RecordPrototype2.toSource = function() {
    return this.toString();
  };
  function makeRecord2(likeRecord, values3, ownerID) {
    var record = Object.create(Object.getPrototypeOf(likeRecord));
    record._values = values3;
    record.__ownerID = ownerID;
    return record;
  }
  function recordName2(record) {
    return record.constructor.displayName || record.constructor.name || "Record";
  }
  function recordSeq2(record) {
    return keyedSeqFromValue2(record._keys.map(function(k4) {
      return [k4, record.get(k4)];
    }));
  }
  function setProp2(prototype, name) {
    try {
      Object.defineProperty(prototype, name, {
        get: function() {
          return this.get(name);
        },
        set: function(value) {
          invariant2(this.__ownerID, "Cannot set on an immutable record.");
          this.set(name, value);
        }
      });
    } catch (error) {
    }
  }
  var Repeat = function(IndexedSeq$$1) {
    function Repeat2(value, times) {
      if (!(this instanceof Repeat2)) {
        return new Repeat2(value, times);
      }
      this._value = value;
      this.size = times === void 0 ? Infinity : Math.max(0, times);
      if (this.size === 0) {
        if (EMPTY_REPEAT) {
          return EMPTY_REPEAT;
        }
        EMPTY_REPEAT = this;
      }
    }
    if (IndexedSeq$$1)
      Repeat2.__proto__ = IndexedSeq$$1;
    Repeat2.prototype = Object.create(IndexedSeq$$1 && IndexedSeq$$1.prototype);
    Repeat2.prototype.constructor = Repeat2;
    Repeat2.prototype.toString = function toString9() {
      if (this.size === 0) {
        return "Repeat []";
      }
      return "Repeat [ " + this._value + " " + this.size + " times ]";
    };
    Repeat2.prototype.get = function get24(index, notSetValue) {
      return this.has(index) ? this._value : notSetValue;
    };
    Repeat2.prototype.includes = function includes5(searchValue) {
      return is2(this._value, searchValue);
    };
    Repeat2.prototype.slice = function slice7(begin, end) {
      var size2 = this.size;
      return wholeSlice2(begin, end, size2) ? this : new Repeat2(
        this._value,
        resolveEnd2(end, size2) - resolveBegin2(begin, size2)
      );
    };
    Repeat2.prototype.reverse = function reverse5() {
      return this;
    };
    Repeat2.prototype.indexOf = function indexOf3(searchValue) {
      if (is2(this._value, searchValue)) {
        return 0;
      }
      return -1;
    };
    Repeat2.prototype.lastIndexOf = function lastIndexOf3(searchValue) {
      if (is2(this._value, searchValue)) {
        return this.size;
      }
      return -1;
    };
    Repeat2.prototype.__iterate = function __iterate3(fn2, reverse5) {
      var this$1 = this;
      var size2 = this.size;
      var i5 = 0;
      while (i5 !== size2) {
        if (fn2(this$1._value, reverse5 ? size2 - ++i5 : i5++, this$1) === false) {
          break;
        }
      }
      return i5;
    };
    Repeat2.prototype.__iterator = function __iterator3(type2, reverse5) {
      var this$1 = this;
      var size2 = this.size;
      var i5 = 0;
      return new Iterator3(
        function() {
          return i5 === size2 ? iteratorDone2() : iteratorValue2(type2, reverse5 ? size2 - ++i5 : i5++, this$1._value);
        }
      );
    };
    Repeat2.prototype.equals = function equals5(other) {
      return other instanceof Repeat2 ? is2(this._value, other._value) : deepEqual2(other);
    };
    return Repeat2;
  }(IndexedSeq2);
  var EMPTY_REPEAT;

  // ../components/HorseDefTypes.ts
  function skillmeta2(id3) {
    return skill_meta_default[id3.split("-")[0]];
  }
  function skillComparator(a5, b2) {
    const x5 = skillmeta2(a5).order, y5 = skillmeta2(b2).order;
    return +(y5 < x5) - +(x5 < y5) || +(b2 < a5) - +(a5 < b2);
  }
  function SkillSet(iterable) {
    return SortedSet(iterable, skillComparator);
  }
  var HorseState = class extends Record({
    outfitId: "",
    speed: true ? 1200 : 1850,
    stamina: true ? 1200 : 1200,
    power: true ? 800 : 1500,
    guts: true ? 400 : 1200,
    wisdom: true ? 400 : 1300,
    strategy: "Senkou",
    distanceAptitude: "S",
    surfaceAptitude: "A",
    strategyAptitude: "A",
    skills: SkillSet([])
  }) {
  };

  // umas.json
  var umas_default = { "1001": { name: ["", "Special Week"], outfits: { "100101": "[Special Dreamer]" } }, "1002": { name: ["", "Silence Suzuka"], outfits: { "100201": "[Innocent Silence]" } }, "1003": { name: ["", "Tokai Teio"], outfits: { "100301": "[Peak Joy]" } }, "1004": { name: ["", "Maruzensky"], outfits: { "100401": "[Formula R]" } }, "1006": { name: ["", "Oguri Cap"], outfits: { "100601": "[Starlight Beat]" } }, "1007": { name: ["", "Gold Ship"], outfits: { "100701": "[Red Strife]" } }, "1008": { name: ["", "Vodka"], outfits: { "100801": "[Wild Top Gear]" } }, "1009": { name: ["", "Daiwa Scarlet"], outfits: { "100901": "[Peak Blue]" } }, "1010": { name: ["", "Taiki Shuttle"], outfits: { "101001": "[Wild Frontier]" } }, "1011": { name: ["", "Grass Wonder"], outfits: { "101101": "[Stone-Piercing Blue]" } }, "1013": { name: ["", "Mejiro McQueen"], outfits: { "101301": "[Frontline Elegance]" } }, "1014": { name: ["", "El Condor Pasa"], outfits: { "101401": "[El\u2606N\xFAmero 1]" } }, "1015": { name: ["", "T.M. Opera O"], outfits: { "101501": "[O Sole Suo!]" } }, "1017": { name: ["", "Symboli Rudolf"], outfits: { "101701": "[Emperor's Path]" } }, "1018": { name: ["", "Air Groove"], outfits: { "101801": "[Empress Road]" } }, "1023": { name: ["", "Biwa Hayahide"], outfits: { "102301": "[pf. Winning Equation...]" } }, "1024": { name: ["", "Mayano Top Gun"], outfits: { "102401": "[Scramble\u2606Zone]" } }, "1026": { name: ["", "Mihono Bourbon"], outfits: { "102601": "[MB-19890425]" } }, "1027": { name: ["", "Mejiro Ryan"], outfits: { "102701": "[Down the Line]" } }, "1030": { name: ["", "Rice Shower"], outfits: { "103001": "[Rosy Dreams]" } }, "1032": { name: ["", "Agnes Tachyon"], outfits: { "103201": "[tach-nology]" } }, "1035": { name: ["", "Winning Ticket"], outfits: { "103501": "[Get to Winning!]" } }, "1041": { name: ["", "Sakura Bakushin O"], outfits: { "104101": "[Blossom in Learning]" } }, "1045": { name: ["", "Super Creek"], outfits: { "104501": "[Murmuring Stream]" } }, "1052": { name: ["", "Haru Urara"], outfits: { "105201": "[Bestest Prize \u266A]" } }, "1056": { name: ["", "Matikanefukukitaru"], outfits: { "105601": "[Rising\u2606Fortune]" } }, "1060": { name: ["", "Nice Nature"], outfits: { "106001": "[Poinsettia Ribbon]" } }, "1061": { name: ["", "King Halo"], outfits: { "106101": "[King of Emeralds]" } } };

  // ../icons.json
  var icons_default = { "1001": "/uma-tools/icons/chara/chr_icon_1001.png", "100101": "/uma-tools/icons/chara/trained_chr_icon_1001_100101_02.png", "100102": "/uma-tools/icons/chara/trained_chr_icon_1001_100130_02.png", "100103": "/uma-tools/icons/chara/trained_chr_icon_1001_100102_02.png", "1002": "/uma-tools/icons/chara/chr_icon_1002.png", "100201": "/uma-tools/icons/chara/trained_chr_icon_1002_100201_02.png", "100202": "/uma-tools/icons/chara/trained_chr_icon_1002_100230_02.png", "1003": "/uma-tools/icons/chara/chr_icon_1003.png", "100301": "/uma-tools/icons/chara/trained_chr_icon_1003_100301_02.png", "100302": "/uma-tools/icons/chara/trained_chr_icon_1003_100302_02.png", "100303": "/uma-tools/icons/chara/trained_chr_icon_1003_100343_02.png", "1004": "/uma-tools/icons/chara/chr_icon_1004.png", "100401": "/uma-tools/icons/chara/trained_chr_icon_1004_100401_02.png", "100402": "/uma-tools/icons/chara/trained_chr_icon_1004_100430_02.png", "100403": "/uma-tools/icons/chara/trained_chr_icon_1004_100410_02.png", "1005": "/uma-tools/icons/chara/chr_icon_1005.png", "100501": "/uma-tools/icons/chara/trained_chr_icon_1005_100501_02.png", "100502": "/uma-tools/icons/chara/trained_chr_icon_1005_100520_02.png", "1006": "/uma-tools/icons/chara/chr_icon_1006.png", "100601": "/uma-tools/icons/chara/trained_chr_icon_1006_100601_02.png", "100602": "/uma-tools/icons/chara/trained_chr_icon_1006_100646_02.png", "1007": "/uma-tools/icons/chara/chr_icon_1007.png", "100701": "/uma-tools/icons/chara/trained_chr_icon_1007_100701_02.png", "100702": "/uma-tools/icons/chara/trained_chr_icon_1007_100730_02.png", "100703": "/uma-tools/icons/chara/trained_chr_icon_1007_100702_02.png", "1008": "/uma-tools/icons/chara/chr_icon_1008.png", "100801": "/uma-tools/icons/chara/trained_chr_icon_1008_100801_02.png", "100802": "/uma-tools/icons/chara/trained_chr_icon_1008_100846_02.png", "1009": "/uma-tools/icons/chara/chr_icon_1009.png", "100901": "/uma-tools/icons/chara/trained_chr_icon_1009_100901_02.png", "100902": "/uma-tools/icons/chara/trained_chr_icon_1009_100946_02.png", "1010": "/uma-tools/icons/chara/chr_icon_1010.png", "101001": "/uma-tools/icons/chara/trained_chr_icon_1010_101001_02.png", "101002": "/uma-tools/icons/chara/trained_chr_icon_1010_101023_02.png", "1011": "/uma-tools/icons/chara/chr_icon_1011.png", "101101": "/uma-tools/icons/chara/trained_chr_icon_1011_101101_02.png", "101102": "/uma-tools/icons/chara/trained_chr_icon_1011_101116_02.png", "101103": "/uma-tools/icons/chara/trained_chr_icon_1011_101102_02.png", "1012": "/uma-tools/icons/chara/chr_icon_1012.png", "101201": "/uma-tools/icons/chara/trained_chr_icon_1012_101201_02.png", "101202": "/uma-tools/icons/chara/trained_chr_icon_1012_101226_02.png", "1013": "/uma-tools/icons/chara/chr_icon_1013.png", "101301": "/uma-tools/icons/chara/trained_chr_icon_1013_101301_02.png", "101302": "/uma-tools/icons/chara/trained_chr_icon_1013_101302_02.png", "101303": "/uma-tools/icons/chara/trained_chr_icon_1013_101330_02.png", "1014": "/uma-tools/icons/chara/chr_icon_1014.png", "101401": "/uma-tools/icons/chara/trained_chr_icon_1014_101401_02.png", "101402": "/uma-tools/icons/chara/trained_chr_icon_1014_101416_02.png", "1015": "/uma-tools/icons/chara/chr_icon_1015.png", "101501": "/uma-tools/icons/chara/trained_chr_icon_1015_101501_02.png", "101502": "/uma-tools/icons/chara/trained_chr_icon_1015_101510_02.png", "1016": "/uma-tools/icons/chara/chr_icon_1016.png", "101601": "/uma-tools/icons/chara/trained_chr_icon_1016_101601_02.png", "101602": "/uma-tools/icons/chara/trained_chr_icon_1016_101602_02.png", "1017": "/uma-tools/icons/chara/chr_icon_1017.png", "101701": "/uma-tools/icons/chara/trained_chr_icon_1017_101701_02.png", "101702": "/uma-tools/icons/chara/trained_chr_icon_1017_101743_02.png", "1018": "/uma-tools/icons/chara/chr_icon_1018.png", "101801": "/uma-tools/icons/chara/trained_chr_icon_1018_101801_02.png", "101802": "/uma-tools/icons/chara/trained_chr_icon_1018_101826_02.png", "1019": "/uma-tools/icons/chara/chr_icon_1019.png", "101901": "/uma-tools/icons/chara/trained_chr_icon_1019_101901_02.png", "101902": "/uma-tools/icons/chara/trained_chr_icon_1019_101940_02.png", "1020": "/uma-tools/icons/chara/chr_icon_1020.png", "102001": "/uma-tools/icons/chara/trained_chr_icon_1020_102001_02.png", "102002": "/uma-tools/icons/chara/trained_chr_icon_1020_102020_02.png", "1021": "/uma-tools/icons/chara/chr_icon_1021.png", "102101": "/uma-tools/icons/chara/trained_chr_icon_1021_102101_02.png", "102102": "/uma-tools/icons/chara/trained_chr_icon_1021_102143_02.png", "1022": "/uma-tools/icons/chara/chr_icon_1022.png", "102201": "/uma-tools/icons/chara/trained_chr_icon_1022_102201_02.png", "102202": "/uma-tools/icons/chara/trained_chr_icon_1022_102226_02.png", "1023": "/uma-tools/icons/chara/chr_icon_1023.png", "102301": "/uma-tools/icons/chara/trained_chr_icon_1023_102301_02.png", "102302": "/uma-tools/icons/chara/trained_chr_icon_1023_102346_02.png", "102303": "/uma-tools/icons/chara/trained_chr_icon_1023_102302_02.png", "1024": "/uma-tools/icons/chara/chr_icon_1024.png", "102401": "/uma-tools/icons/chara/trained_chr_icon_1024_102401_02.png", "102402": "/uma-tools/icons/chara/trained_chr_icon_1024_102426_02.png", "102403": "/uma-tools/icons/chara/trained_chr_icon_1024_102440_02.png", "1025": "/uma-tools/icons/chara/chr_icon_1025.png", "102501": "/uma-tools/icons/chara/trained_chr_icon_1025_102501_02.png", "102502": "/uma-tools/icons/chara/trained_chr_icon_1025_102513_02.png", "1026": "/uma-tools/icons/chara/chr_icon_1026.png", "102601": "/uma-tools/icons/chara/trained_chr_icon_1026_102601_02.png", "102602": "/uma-tools/icons/chara/trained_chr_icon_1026_102613_02.png", "1027": "/uma-tools/icons/chara/chr_icon_1027.png", "102701": "/uma-tools/icons/chara/trained_chr_icon_1027_102701_02.png", "102702": "/uma-tools/icons/chara/trained_chr_icon_1027_102713_02.png", "1028": "/uma-tools/icons/chara/chr_icon_1028.png", "102801": "/uma-tools/icons/chara/trained_chr_icon_1028_102801_02.png", "1029": "/uma-tools/icons/chara/chr_icon_1029.png", "102901": "/uma-tools/icons/chara/trained_chr_icon_1029_102901_02.png", "102902": "/uma-tools/icons/chara/trained_chr_icon_1029_102913_02.png", "1030": "/uma-tools/icons/chara/chr_icon_1030.png", "103001": "/uma-tools/icons/chara/trained_chr_icon_1030_103001_02.png", "103002": "/uma-tools/icons/chara/trained_chr_icon_1030_103040_02.png", "103003": "/uma-tools/icons/chara/trained_chr_icon_1030_103002_02.png", "1031": "/uma-tools/icons/chara/chr_icon_1031.png", "103101": "/uma-tools/icons/chara/trained_chr_icon_1031_103101_02.png", "103102": "/uma-tools/icons/chara/trained_chr_icon_1031_103113_02.png", "1032": "/uma-tools/icons/chara/chr_icon_1032.png", "103201": "/uma-tools/icons/chara/trained_chr_icon_1032_103201_02.png", "103202": "/uma-tools/icons/chara/trained_chr_icon_1032_103230_02.png", "103203": "/uma-tools/icons/chara/trained_chr_icon_1032_103202_02.png", "1033": "/uma-tools/icons/chara/chr_icon_1033.png", "103301": "/uma-tools/icons/chara/trained_chr_icon_1033_103301_02.png", "103302": "/uma-tools/icons/chara/trained_chr_icon_1033_103346_02.png", "1034": "/uma-tools/icons/chara/chr_icon_1034.png", "103401": "/uma-tools/icons/chara/trained_chr_icon_1034_103401_02.png", "103402": "/uma-tools/icons/chara/trained_chr_icon_1034_103443_02.png", "1035": "/uma-tools/icons/chara/chr_icon_1035.png", "103501": "/uma-tools/icons/chara/trained_chr_icon_1035_103501_02.png", "103502": "/uma-tools/icons/chara/trained_chr_icon_1035_103516_02.png", "103503": "/uma-tools/icons/chara/trained_chr_icon_1035_103502_02.png", "1036": "/uma-tools/icons/chara/chr_icon_1036.png", "103601": "/uma-tools/icons/chara/trained_chr_icon_1036_103601_02.png", "103602": "/uma-tools/icons/chara/trained_chr_icon_1036_103640_02.png", "1037": "/uma-tools/icons/chara/chr_icon_1037.png", "103701": "/uma-tools/icons/chara/trained_chr_icon_1037_103701_02.png", "103702": "/uma-tools/icons/chara/trained_chr_icon_1037_103713_02.png", "103703": "/uma-tools/icons/chara/trained_chr_icon_1037_103730_02.png", "1038": "/uma-tools/icons/chara/chr_icon_1038.png", "103801": "/uma-tools/icons/chara/trained_chr_icon_1038_103801_02.png", "103802": "/uma-tools/icons/chara/trained_chr_icon_1038_103826_02.png", "1039": "/uma-tools/icons/chara/chr_icon_1039.png", "103901": "/uma-tools/icons/chara/trained_chr_icon_1039_103901_02.png", "103902": "/uma-tools/icons/chara/trained_chr_icon_1039_103943_02.png", "1040": "/uma-tools/icons/chara/chr_icon_1040.png", "104001": "/uma-tools/icons/chara/trained_chr_icon_1040_104001_02.png", "104002": "/uma-tools/icons/chara/trained_chr_icon_1040_104043_02.png", "104003": "/uma-tools/icons/chara/trained_chr_icon_1040_104002_02.png", "1041": "/uma-tools/icons/chara/chr_icon_1041.png", "104101": "/uma-tools/icons/chara/trained_chr_icon_1041_104101_02.png", "104102": "/uma-tools/icons/chara/trained_chr_icon_1041_104150_02.png", "1042": "/uma-tools/icons/chara/chr_icon_1042.png", "104201": "/uma-tools/icons/chara/trained_chr_icon_1042_104201_02.png", "104202": "/uma-tools/icons/chara/trained_chr_icon_1042_104240_02.png", "1043": "/uma-tools/icons/chara/chr_icon_1043.png", "104301": "/uma-tools/icons/chara/trained_chr_icon_1043_104301_02.png", "1044": "/uma-tools/icons/chara/chr_icon_1044.png", "104401": "/uma-tools/icons/chara/trained_chr_icon_1044_104401_02.png", "104402": "/uma-tools/icons/chara/trained_chr_icon_1044_104426_02.png", "1045": "/uma-tools/icons/chara/chr_icon_1045.png", "104501": "/uma-tools/icons/chara/trained_chr_icon_1045_104501_02.png", "104502": "/uma-tools/icons/chara/trained_chr_icon_1045_104540_02.png", "104503": "/uma-tools/icons/chara/trained_chr_icon_1045_104550_02.png", "1046": "/uma-tools/icons/chara/chr_icon_1046.png", "104601": "/uma-tools/icons/chara/trained_chr_icon_1046_104601_02.png", "104602": "/uma-tools/icons/chara/trained_chr_icon_1046_104602_02.png", "104603": "/uma-tools/icons/chara/trained_chr_icon_1046_104650_02.png", "1047": "/uma-tools/icons/chara/chr_icon_1047.png", "104701": "/uma-tools/icons/chara/trained_chr_icon_1047_104701_02.png", "104702": "/uma-tools/icons/chara/trained_chr_icon_1047_104723_02.png", "1048": "/uma-tools/icons/chara/chr_icon_1048.png", "104801": "/uma-tools/icons/chara/trained_chr_icon_1048_104801_02.png", "104802": "/uma-tools/icons/chara/trained_chr_icon_1048_104823_02.png", "1049": "/uma-tools/icons/chara/chr_icon_1049.png", "104901": "/uma-tools/icons/chara/trained_chr_icon_1049_104901_02.png", "1050": "/uma-tools/icons/chara/chr_icon_1050.png", "105001": "/uma-tools/icons/chara/trained_chr_icon_1050_105001_02.png", "105002": "/uma-tools/icons/chara/trained_chr_icon_1050_105016_02.png", "105003": "/uma-tools/icons/chara/trained_chr_icon_1050_105002_02.png", "1051": "/uma-tools/icons/chara/chr_icon_1051.png", "105101": "/uma-tools/icons/chara/trained_chr_icon_1051_105101_02.png", "105102": "/uma-tools/icons/chara/trained_chr_icon_1051_105126_02.png", "1052": "/uma-tools/icons/chara/chr_icon_1052.png", "105201": "/uma-tools/icons/chara/trained_chr_icon_1052_105201_02.png", "105202": "/uma-tools/icons/chara/trained_chr_icon_1052_105210_02.png", "1053": "/uma-tools/icons/chara/chr_icon_1053.png", "105301": "/uma-tools/icons/chara/trained_chr_icon_1053_105301_02.png", "105302": "/uma-tools/icons/chara/trained_chr_icon_1053_105323_02.png", "1054": "/uma-tools/icons/chara/chr_icon_1054.png", "105401": "/uma-tools/icons/chara/trained_chr_icon_1054_105401_02.png", "1055": "/uma-tools/icons/chara/chr_icon_1055.png", "105501": "/uma-tools/icons/chara/trained_chr_icon_1055_105501_02.png", "1056": "/uma-tools/icons/chara/chr_icon_1056.png", "105601": "/uma-tools/icons/chara/trained_chr_icon_1056_105601_02.png", "105602": "/uma-tools/icons/chara/trained_chr_icon_1056_105623_02.png", "1057": "/uma-tools/icons/chara/chr_icon_1057.png", "105701": "/uma-tools/icons/chara/trained_chr_icon_1057_105701_02.png", "105702": "/uma-tools/icons/chara/trained_chr_icon_1057_105710_02.png", "1058": "/uma-tools/icons/chara/chr_icon_1058.png", "105801": "/uma-tools/icons/chara/trained_chr_icon_1058_105801_02.png", "105802": "/uma-tools/icons/chara/trained_chr_icon_1058_105840_02.png", "1059": "/uma-tools/icons/chara/chr_icon_1059.png", "105901": "/uma-tools/icons/chara/trained_chr_icon_1059_105901_02.png", "105902": "/uma-tools/icons/chara/trained_chr_icon_1059_105923_02.png", "1060": "/uma-tools/icons/chara/chr_icon_1060.png", "106001": "/uma-tools/icons/chara/trained_chr_icon_1060_106001_02.png", "106002": "/uma-tools/icons/chara/trained_chr_icon_1060_106050_02.png", "106003": "/uma-tools/icons/chara/trained_chr_icon_1060_106010_02.png", "1061": "/uma-tools/icons/chara/chr_icon_1061.png", "106101": "/uma-tools/icons/chara/trained_chr_icon_1061_106101_02.png", "106102": "/uma-tools/icons/chara/trained_chr_icon_1061_106150_02.png", "106103": "/uma-tools/icons/chara/trained_chr_icon_1061_106126_02.png", "1062": "/uma-tools/icons/chara/chr_icon_1062.png", "106201": "/uma-tools/icons/chara/trained_chr_icon_1062_106201_02.png", "106202": "/uma-tools/icons/chara/trained_chr_icon_1062_106250_02.png", "1063": "/uma-tools/icons/chara/chr_icon_1063.png", "106301": "/uma-tools/icons/chara/trained_chr_icon_1063_106301_02.png", "1064": "/uma-tools/icons/chara/chr_icon_1064.png", "106401": "/uma-tools/icons/chara/trained_chr_icon_1064_106401_02.png", "106402": "/uma-tools/icons/chara/trained_chr_icon_1064_106446_02.png", "1065": "/uma-tools/icons/chara/chr_icon_1065.png", "106501": "/uma-tools/icons/chara/trained_chr_icon_1065_106501_02.png", "106502": "/uma-tools/icons/chara/trained_chr_icon_1065_106520_02.png", "1066": "/uma-tools/icons/chara/chr_icon_1066.png", "106601": "/uma-tools/icons/chara/trained_chr_icon_1066_106601_02.png", "1067": "/uma-tools/icons/chara/chr_icon_1067.png", "106701": "/uma-tools/icons/chara/trained_chr_icon_1067_106701_02.png", "106702": "/uma-tools/icons/chara/trained_chr_icon_1067_106710_02.png", "106703": "/uma-tools/icons/chara/trained_chr_icon_1067_106702_02.png", "1068": "/uma-tools/icons/chara/chr_icon_1068.png", "106801": "/uma-tools/icons/chara/trained_chr_icon_1068_106801_02.png", "106802": "/uma-tools/icons/chara/trained_chr_icon_1068_106810_02.png", "106803": "/uma-tools/icons/chara/trained_chr_icon_1068_106802_02.png", "1069": "/uma-tools/icons/chara/chr_icon_1069.png", "106901": "/uma-tools/icons/chara/trained_chr_icon_1069_106901_02.png", "106902": "/uma-tools/icons/chara/trained_chr_icon_1069_106920_02.png", "1070": "/uma-tools/icons/chara/chr_icon_1070.png", "107001": "/uma-tools/icons/chara/trained_chr_icon_1070_107001_02.png", "107002": "/uma-tools/icons/chara/trained_chr_icon_1070_107002_02.png", "1071": "/uma-tools/icons/chara/chr_icon_1071.png", "107101": "/uma-tools/icons/chara/trained_chr_icon_1071_107101_02.png", "107102": "/uma-tools/icons/chara/trained_chr_icon_1071_107120_02.png", "1072": "/uma-tools/icons/chara/chr_icon_1072.png", "107201": "/uma-tools/icons/chara/trained_chr_icon_1072_107201_02.png", "107202": "/uma-tools/icons/chara/trained_chr_icon_1072_107250_02.png", "1073": "/uma-tools/icons/chara/chr_icon_1073.png", "107301": "/uma-tools/icons/chara/trained_chr_icon_1073_107301_02.png", "1074": "/uma-tools/icons/chara/chr_icon_1074.png", "107401": "/uma-tools/icons/chara/trained_chr_icon_1074_107401_02.png", "107402": "/uma-tools/icons/chara/trained_chr_icon_1074_107446_02.png", "1075": "/uma-tools/icons/chara/chr_icon_1075.png", "1076": "/uma-tools/icons/chara/chr_icon_1076.png", "107601": "/uma-tools/icons/chara/trained_chr_icon_1076_107601_02.png", "1077": "/uma-tools/icons/chara/chr_icon_1077.png", "107701": "/uma-tools/icons/chara/trained_chr_icon_1077_107701_02.png", "107702": "/uma-tools/icons/chara/trained_chr_icon_1077_107746_02.png", "1078": "/uma-tools/icons/chara/chr_icon_1078.png", "107801": "/uma-tools/icons/chara/trained_chr_icon_1078_107801_02.png", "107802": "/uma-tools/icons/chara/trained_chr_icon_1078_107813_02.png", "1079": "/uma-tools/icons/chara/chr_icon_1079.png", "107901": "/uma-tools/icons/chara/trained_chr_icon_1079_107901_02.png", "1080": "/uma-tools/icons/chara/chr_icon_1080.png", "108001": "/uma-tools/icons/chara/trained_chr_icon_1080_108001_02.png", "1081": "/uma-tools/icons/chara/chr_icon_1081.png", "1082": "/uma-tools/icons/chara/chr_icon_1082.png", "108201": "/uma-tools/icons/chara/trained_chr_icon_1082_108201_02.png", "1083": "/uma-tools/icons/chara/chr_icon_1083.png", "108301": "/uma-tools/icons/chara/trained_chr_icon_1083_108301_02.png", "108302": "/uma-tools/icons/chara/trained_chr_icon_1083_108340_02.png", "1084": "/uma-tools/icons/chara/chr_icon_1084.png", "108401": "/uma-tools/icons/chara/trained_chr_icon_1084_108401_02.png", "108402": "/uma-tools/icons/chara/trained_chr_icon_1084_108420_02.png", "1085": "/uma-tools/icons/chara/chr_icon_1085.png", "108501": "/uma-tools/icons/chara/trained_chr_icon_1085_108501_02.png", "108502": "/uma-tools/icons/chara/trained_chr_icon_1085_108520_02.png", "1086": "/uma-tools/icons/chara/chr_icon_1086.png", "108601": "/uma-tools/icons/chara/trained_chr_icon_1086_108601_02.png", "108602": "/uma-tools/icons/chara/trained_chr_icon_1086_108626_02.png", "1087": "/uma-tools/icons/chara/chr_icon_1087.png", "108701": "/uma-tools/icons/chara/trained_chr_icon_1087_108701_02.png", "108702": "/uma-tools/icons/chara/trained_chr_icon_1087_108713_02.png", "1088": "/uma-tools/icons/chara/chr_icon_1088.png", "108801": "/uma-tools/icons/chara/trained_chr_icon_1088_108801_02.png", "1089": "/uma-tools/icons/chara/chr_icon_1089.png", "108901": "/uma-tools/icons/chara/trained_chr_icon_1089_108901_02.png", "1090": "/uma-tools/icons/chara/chr_icon_1090.png", "109001": "/uma-tools/icons/chara/trained_chr_icon_1090_109001_02.png", "1091": "/uma-tools/icons/chara/chr_icon_1091.png", "109101": "/uma-tools/icons/chara/trained_chr_icon_1091_109101_02.png", "1092": "/uma-tools/icons/chara/chr_icon_1092.png", "1093": "/uma-tools/icons/chara/chr_icon_1093.png", "109301": "/uma-tools/icons/chara/trained_chr_icon_1093_109301_02.png", "1094": "/uma-tools/icons/chara/chr_icon_1094.png", "109401": "/uma-tools/icons/chara/trained_chr_icon_1094_109401_02.png", "1095": "/uma-tools/icons/chara/chr_icon_1095.png", "1096": "/uma-tools/icons/chara/chr_icon_1096.png", "109601": "/uma-tools/icons/chara/trained_chr_icon_1096_109601_02.png", "1097": "/uma-tools/icons/chara/chr_icon_1097.png", "1098": "/uma-tools/icons/chara/chr_icon_1098.png", "109801": "/uma-tools/icons/chara/trained_chr_icon_1098_109801_02.png", "109802": "/uma-tools/icons/chara/trained_chr_icon_1098_109850_02.png", "1099": "/uma-tools/icons/chara/chr_icon_1099.png", "109901": "/uma-tools/icons/chara/trained_chr_icon_1099_109901_02.png", "109902": "/uma-tools/icons/chara/trained_chr_icon_1099_109930_02.png", "1100": "/uma-tools/icons/chara/chr_icon_1100.png", "110001": "/uma-tools/icons/chara/trained_chr_icon_1100_110001_02.png", "1102": "/uma-tools/icons/chara/chr_icon_1102.png", "110201": "/uma-tools/icons/chara/trained_chr_icon_1102_110201_02.png", "1103": "/uma-tools/icons/chara/chr_icon_1103.png", "1104": "/uma-tools/icons/chara/chr_icon_1104.png", "110401": "/uma-tools/icons/chara/trained_chr_icon_1104_110401_02.png", "110402": "/uma-tools/icons/chara/trained_chr_icon_1104_110410_02.png", "1105": "/uma-tools/icons/chara/chr_icon_1105.png", "110501": "/uma-tools/icons/chara/trained_chr_icon_1105_110501_02.png", "110502": "/uma-tools/icons/chara/trained_chr_icon_1105_110523_02.png", "1106": "/uma-tools/icons/chara/chr_icon_1106.png", "110601": "/uma-tools/icons/chara/trained_chr_icon_1106_110601_02.png", "1107": "/uma-tools/icons/chara/chr_icon_1107.png", "110701": "/uma-tools/icons/chara/trained_chr_icon_1107_110701_02.png", "110702": "/uma-tools/icons/chara/trained_chr_icon_1107_110720_02.png", "1108": "/uma-tools/icons/chara/chr_icon_1108.png", "110801": "/uma-tools/icons/chara/trained_chr_icon_1108_110801_02.png", "1109": "/uma-tools/icons/chara/chr_icon_1109.png", "110901": "/uma-tools/icons/chara/trained_chr_icon_1109_110901_02.png", "1110": "/uma-tools/icons/chara/chr_icon_1110.png", "111001": "/uma-tools/icons/chara/trained_chr_icon_1110_111001_02.png", "111002": "/uma-tools/icons/chara/trained_chr_icon_1110_111026_02.png", "1111": "/uma-tools/icons/chara/chr_icon_1111.png", "111101": "/uma-tools/icons/chara/trained_chr_icon_1111_111101_02.png", "1112": "/uma-tools/icons/chara/chr_icon_1112.png", "1113": "/uma-tools/icons/chara/chr_icon_1113.png", "1114": "/uma-tools/icons/chara/chr_icon_1114.png", "1115": "/uma-tools/icons/chara/chr_icon_1115.png", "111501": "/uma-tools/icons/chara/trained_chr_icon_1115_111501_02.png", "1116": "/uma-tools/icons/chara/chr_icon_1116.png", "111601": "/uma-tools/icons/chara/trained_chr_icon_1116_111601_02.png", "1117": "/uma-tools/icons/chara/chr_icon_1117.png", "111701": "/uma-tools/icons/chara/trained_chr_icon_1117_111701_02.png", "1119": "/uma-tools/icons/chara/chr_icon_1119.png", "111901": "/uma-tools/icons/chara/trained_chr_icon_1119_111901_02.png", "1120": "/uma-tools/icons/chara/chr_icon_1120.png", "112001": "/uma-tools/icons/chara/trained_chr_icon_1120_112001_02.png", "1121": "/uma-tools/icons/chara/chr_icon_1121.png", "112101": "/uma-tools/icons/chara/trained_chr_icon_1121_112101_02.png", "1124": "/uma-tools/icons/chara/chr_icon_1124.png", "112401": "/uma-tools/icons/chara/trained_chr_icon_1124_112401_02.png", "1127": "/uma-tools/icons/chara/chr_icon_1127.png", "112701": "/uma-tools/icons/chara/trained_chr_icon_1127_112701_02.png", "1128": "/uma-tools/icons/chara/chr_icon_1128.png", "1129": "/uma-tools/icons/chara/chr_icon_1129.png", "1130": "/uma-tools/icons/chara/chr_icon_1130.png", "1131": "/uma-tools/icons/chara/chr_icon_1131.png", "113101": "/uma-tools/icons/chara/trained_chr_icon_1131_113101_02.png", "1132": "/uma-tools/icons/chara/chr_icon_1132.png", "113201": "/uma-tools/icons/chara/trained_chr_icon_1132_113201_02.png", "1133": "/uma-tools/icons/chara/chr_icon_1133.png", "113301": "/uma-tools/icons/chara/trained_chr_icon_1133_113301_02.png", "1134": "/uma-tools/icons/chara/chr_icon_1134.png" };

  // ../components/HorseDef.tsx
  var umaAltIds = Object.keys(umas_default).flatMap((id3) => Object.keys(umas_default[id3].outfits));
  var umaNamesForSearch = {};
  umaAltIds.forEach((id3) => {
    const u4 = umas_default[id3.slice(0, 4)];
    umaNamesForSearch[id3] = (u4.outfits[id3] + " " + u4.name[1]).toUpperCase().replace(/\./g, "");
  });
  function searchNames(query) {
    const q4 = query.toUpperCase().replace(/\./g, "");
    return umaAltIds.filter((oid) => umaNamesForSearch[oid].indexOf(q4) > -1);
  }
  function UmaSelector(props) {
    const randomMob = T2(() => `/uma-tools/icons/mob/trained_mob_chr_icon_${8e3 + Math.floor(Math.random() * 624)}_000001_01.png`, []);
    const u4 = props.value && umas_default[props.value.slice(0, 4)];
    const input = A2(null);
    const suggestionsContainer = A2(null);
    const [open, setOpen] = d2(false);
    const [activeIdx, setActiveIdx] = d2(-1);
    function update9(q4) {
      return { input: q4, suggestions: searchNames(q4) };
    }
    const [query, search] = h2((_3, q4) => update9(q4), u4 && u4.name[1], update9);
    function confirm(oid) {
      setOpen(false);
      props.select(oid);
      const uname = umas_default[oid.slice(0, 4)].name[1];
      search(uname);
      setActiveIdx(-1);
      input.current && input.current.blur();
    }
    function focus() {
      input.current && input.current.select();
    }
    function setActiveAndScroll(idx) {
      setActiveIdx(idx);
      if (!suggestionsContainer.current)
        return;
      const container = suggestionsContainer.current;
      const li2 = container.querySelector(`[data-uma-id="${query.suggestions[idx]}"]`);
      const ch = container.offsetHeight - 4;
      if (li2.offsetTop < container.scrollTop) {
        container.scrollTop = li2.offsetTop;
      } else if (li2.offsetTop >= container.scrollTop + ch) {
        const h4 = li2.offsetHeight;
        container.scrollTop = (li2.offsetTop / h4 - (ch / h4 - 1)) * h4;
      }
    }
    function handleClick(e6) {
      const li2 = e6.target.closest(".umaSuggestion");
      if (li2 == null)
        return;
      e6.stopPropagation();
      confirm(li2.dataset.umaId);
    }
    function handleInput(e6) {
      const q4 = e6.target.value;
      search(e6.target.value);
    }
    function handleKeyDown(e6) {
      const l5 = query.suggestions.length;
      switch (e6.keyCode) {
        case 13:
          if (activeIdx > -1)
            confirm(query.suggestions[activeIdx]);
          break;
        case 38:
          setActiveAndScroll((activeIdx - 1 + l5) % l5);
          break;
        case 40:
          setActiveAndScroll((activeIdx + 1 + l5) % l5);
          break;
      }
    }
    return /* @__PURE__ */ _("div", { class: "umaSelector" }, /* @__PURE__ */ _("div", { class: "umaSelectorIconsBox", onClick: focus }, /* @__PURE__ */ _("img", { src: props.value ? icons_default[props.value] : randomMob }), /* @__PURE__ */ _("img", { src: "/uma-tools/icons/utx_ico_umamusume_00.png" })), /* @__PURE__ */ _("div", { class: "umaEpithet" }, /* @__PURE__ */ _("span", null, props.value && u4.outfits[props.value])), /* @__PURE__ */ _("div", { class: "umaSelectWrapper" }, /* @__PURE__ */ _("input", { type: "text", class: "umaSelectInput", value: query.input, tabindex: props.tabindex, onInput: handleInput, onKeyDown: handleKeyDown, onFocus: () => setOpen(true), onBlur: () => setOpen(false), ref: input }), /* @__PURE__ */ _("ul", { class: `umaSuggestions ${open ? "open" : ""}`, onMouseDown: handleClick, ref: suggestionsContainer }, query.suggestions.map((oid, i5) => {
      const uid = oid.slice(0, 4);
      return /* @__PURE__ */ _("li", { key: oid, "data-uma-id": oid, class: `umaSuggestion ${i5 == activeIdx ? "selected" : ""}` }, /* @__PURE__ */ _("img", { src: icons_default[oid] }), /* @__PURE__ */ _("span", null, umas_default[uid].outfits[oid], " ", umas_default[uid].name[1]));
    }))));
  }
  function rankForStat(x5) {
    if (x5 > 1200) {
      return 18 + Math.floor((x5 - 1200) / 100) * 10 + Math.floor(x5 / 10) % 10;
    } else if (x5 >= 1150) {
      return 17;
    } else if (x5 >= 1100) {
      return 16;
    } else if (x5 >= 400) {
      return 8 + Math.floor((x5 - 400) / 100);
    } else {
      return Math.floor(x5 / 50);
    }
  }
  function Stat(props) {
    return /* @__PURE__ */ _("div", { class: "horseParam" }, /* @__PURE__ */ _("img", { src: `/uma-tools/icons/statusrank/ui_statusrank_${(100 + rankForStat(props.value)).toString().slice(1)}.png` }), /* @__PURE__ */ _("input", { type: "number", min: "1", max: "1999", value: props.value, tabindex: props.tabindex, onInput: (e6) => props.change(+e6.currentTarget.value) }));
  }
  var APTITUDES = Object.freeze(["S", "A", "B", "C", "D", "E", "F", "G"]);
  function AptitudeIcon(props) {
    const idx = 7 - APTITUDES.indexOf(props.a);
    return /* @__PURE__ */ _("img", { src: `/uma-tools/icons/utx_ico_statusrank_${(100 + idx).toString().slice(1)}.png` });
  }
  function AptitudeSelect(props) {
    const [open, setOpen] = d2(false);
    function setAptitude(e6) {
      e6.stopPropagation();
      props.setA(e6.currentTarget.dataset.horseAptitude);
      setOpen(false);
    }
    function selectByKey(e6) {
      const k4 = e6.key.toUpperCase();
      if (APTITUDES.indexOf(k4) > -1) {
        props.setA(k4);
      }
    }
    return /* @__PURE__ */ _("div", { class: "horseAptitudeSelect", tabindex: props.tabindex, onClick: () => setOpen(!open), onBlur: setOpen.bind(null, false), onKeyDown: selectByKey }, /* @__PURE__ */ _("span", null, /* @__PURE__ */ _(AptitudeIcon, { a: props.a })), /* @__PURE__ */ _("ul", { style: open ? "display:block" : "display:none" }, APTITUDES.map((a5) => /* @__PURE__ */ _("li", { key: a5, "data-horse-aptitude": a5, onClick: setAptitude }, /* @__PURE__ */ _(AptitudeIcon, { a: a5 })))));
  }
  function StrategySelect(props) {
    if (true) {
      return /* @__PURE__ */ _("select", { class: "horseStrategySelect", value: props.s, tabindex: props.tabindex, onInput: (e6) => props.setS(e6.currentTarget.value) }, /* @__PURE__ */ _("option", { value: "Nige" }, "Front Runner"), /* @__PURE__ */ _("option", { value: "Senkou" }, "Pace Chaser"), /* @__PURE__ */ _("option", { value: "Sasi" }, "Late Closer"), /* @__PURE__ */ _("option", { value: "Oikomi" }, "Tail End"));
    }
    return /* @__PURE__ */ _("select", { class: "horseStrategySelect", value: props.s, tabindex: props.tabindex, onInput: (e6) => props.setS(e6.currentTarget.value) }, /* @__PURE__ */ _("option", { value: "Nige" }, "\u9003\u3052"), /* @__PURE__ */ _("option", { value: "Senkou" }, "\u5148\u884C"), /* @__PURE__ */ _("option", { value: "Sasi" }, "\u5DEE\u3057"), /* @__PURE__ */ _("option", { value: "Oikomi" }, "\u8FFD\u8FBC"), /* @__PURE__ */ _("option", { value: "Oonige" }, "\u5927\u9003\u3052"));
  }
  var nonUniqueSkills = Object.keys(skill_data_default).filter((id3) => skill_data_default[id3].rarity < 3 || skill_data_default[id3].rarity > 5);
  function assertIsSkill(sid) {
    console.assert(skill_data_default[sid] != null);
  }
  function uniqueSkillForUma(oid) {
    const i5 = +oid.slice(1, -2), v4 = +oid.slice(-2);
    const sid = (1e5 + 1e4 * (v4 - 1) + i5 * 10 + 1).toString();
    assertIsSkill(sid);
    return sid;
  }
  var totalTabs = 0;
  function horseDefTabs() {
    return totalTabs;
  }
  function HorseDef(props) {
    const { state, setState } = props;
    const [skillPickerOpen, setSkillPickerOpen] = d2(false);
    const [expanded, setExpanded] = d2(() => Set2());
    const tabstart = props.tabstart();
    let tabi = 0;
    function tabnext() {
      if (++tabi > totalTabs)
        totalTabs = tabi;
      return tabstart + tabi - 1;
    }
    const umaId = state.outfitId;
    const selectableSkills = T2(() => nonUniqueSkills.filter((id3) => skill_data_default[id3].rarity != 6 || id3.startsWith(umaId)), [umaId]);
    function setter(prop) {
      return (x5) => setState(state.set(prop, x5));
    }
    const setSkills = setter("skills");
    function setUma(id3) {
      setState(
        state.set("outfitId", id3).set("skills", state.skills.filter((id4) => skill_data_default[id4].rarity < 3).add(uniqueSkillForUma(id3)))
      );
    }
    function openSkillPicker(e6) {
      e6.stopPropagation();
      setSkillPickerOpen(true);
    }
    function setSkillsAndClose(ids) {
      setSkills(SkillSet(ids));
      setSkillPickerOpen(false);
    }
    function handleSkillClick(e6) {
      e6.stopPropagation();
      const se2 = e6.target.closest(".skill, .expandedSkill");
      if (se2 == null)
        return;
      if (e6.target.classList.contains("skillDismiss")) {
        setSkills(state.skills.delete(se2.dataset.skillid));
      } else if (se2.classList.contains("expandedSkill")) {
        setExpanded(expanded.delete(se2.dataset.skillid));
      } else {
        setExpanded(expanded.add(se2.dataset.skillid));
      }
    }
    y2(function() {
      window.requestAnimationFrame(
        () => document.querySelectorAll(".horseExpandedSkill").forEach((e6) => {
          e6.style.gridRow = "span " + Math.ceil(e6.firstChild.offsetHeight / 64);
        })
      );
    }, [expanded]);
    const skillList = T2(function() {
      const u4 = uniqueSkillForUma(umaId);
      return Array.from(state.skills).map(
        (id3) => expanded.has(id3) ? /* @__PURE__ */ _("li", { key: id3, class: "horseExpandedSkill" }, /* @__PURE__ */ _(ExpandedSkillDetails, { id: id3, distanceFactor: props.courseDistance, dismissable: id3 != u4 })) : /* @__PURE__ */ _("li", { key: id3, style: "" }, /* @__PURE__ */ _(Skill, { id: id3, selected: false, dismissable: id3 != u4 }))
      );
    }, [state.skills, umaId, expanded, props.courseDistance]);
    return /* @__PURE__ */ _("div", { class: "horseDef" }, /* @__PURE__ */ _("div", { class: "horseDefHeader" }, props.children), /* @__PURE__ */ _(UmaSelector, { value: umaId, select: setUma, tabindex: tabnext() }), /* @__PURE__ */ _("div", { class: "horseParams" }, /* @__PURE__ */ _("div", { class: "horseParamHeader" }, /* @__PURE__ */ _("img", { src: "/uma-tools/icons/status_00.png" }), /* @__PURE__ */ _("span", null, "Speed")), /* @__PURE__ */ _("div", { class: "horseParamHeader" }, /* @__PURE__ */ _("img", { src: "/uma-tools/icons/status_01.png" }), /* @__PURE__ */ _("span", null, "Stamina")), /* @__PURE__ */ _("div", { class: "horseParamHeader" }, /* @__PURE__ */ _("img", { src: "/uma-tools/icons/status_02.png" }), /* @__PURE__ */ _("span", null, "Power")), /* @__PURE__ */ _("div", { class: "horseParamHeader" }, /* @__PURE__ */ _("img", { src: "/uma-tools/icons/status_03.png" }), /* @__PURE__ */ _("span", null, "Guts")), /* @__PURE__ */ _("div", { class: "horseParamHeader" }, /* @__PURE__ */ _("img", { src: "/uma-tools/icons/status_04.png" }), /* @__PURE__ */ _("span", null, true ? "Wit" : "Wisdom")), /* @__PURE__ */ _(Stat, { value: state.speed, change: setter("speed"), tabindex: tabnext() }), /* @__PURE__ */ _(Stat, { value: state.stamina, change: setter("stamina"), tabindex: tabnext() }), /* @__PURE__ */ _(Stat, { value: state.power, change: setter("power"), tabindex: tabnext() }), /* @__PURE__ */ _(Stat, { value: state.guts, change: setter("guts"), tabindex: tabnext() }), /* @__PURE__ */ _(Stat, { value: state.wisdom, change: setter("wisdom"), tabindex: tabnext() })), /* @__PURE__ */ _("div", { class: "horseAptitudes" }, /* @__PURE__ */ _("div", null, /* @__PURE__ */ _("span", null, "Surface aptitude:"), /* @__PURE__ */ _(AptitudeSelect, { a: state.surfaceAptitude, setA: setter("surfaceAptitude"), tabindex: tabnext() })), /* @__PURE__ */ _("div", null, /* @__PURE__ */ _("span", null, "Distance aptitude:"), /* @__PURE__ */ _(AptitudeSelect, { a: state.distanceAptitude, setA: setter("distanceAptitude"), tabindex: tabnext() })), /* @__PURE__ */ _("div", null, /* @__PURE__ */ _("span", null, "Strategy:"), /* @__PURE__ */ _(StrategySelect, { s: state.strategy, setS: setter("strategy"), tabindex: tabnext() })), /* @__PURE__ */ _("div", null, /* @__PURE__ */ _("span", null, "Strategy aptitude:"), /* @__PURE__ */ _(AptitudeSelect, { a: state.strategyAptitude, setA: setter("strategyAptitude"), tabindex: tabnext() }))), /* @__PURE__ */ _("div", { class: "horseSkillHeader" }, "Skills"), /* @__PURE__ */ _("div", { class: "horseSkillListWrapper", onClick: handleSkillClick }, /* @__PURE__ */ _("ul", { class: "horseSkillList" }, skillList, /* @__PURE__ */ _("li", { key: "add" }, /* @__PURE__ */ _("div", { class: "skill addSkillButton", onClick: openSkillPicker, tabindex: tabnext() }, /* @__PURE__ */ _("span", null, "+"), "Add Skill")))), /* @__PURE__ */ _("div", { class: `horseSkillPickerOverlay ${skillPickerOpen ? "open" : ""}`, onClick: setSkillPickerOpen.bind(null, false) }), /* @__PURE__ */ _("div", { class: `horseSkillPickerWrapper ${skillPickerOpen ? "open" : ""}` }, /* @__PURE__ */ _(SkillList, { ids: selectableSkills, selected: new Set(state.skills), setSelected: setSkillsAndClose, isOpen: skillPickerOpen })));
  }

  // ../vendor/table-core/utils.ts
  var isDev = true;
  function functionalUpdate(updater, input) {
    return typeof updater === "function" ? updater(input) : updater;
  }
  function makeStateUpdater(key, instance) {
    return (updater) => {
      ;
      instance.setState((old) => {
        return {
          ...old,
          [key]: functionalUpdate(updater, old[key])
        };
      });
    };
  }
  function isFunction(d4) {
    return d4 instanceof Function;
  }
  function flattenBy(arr, getChildren) {
    const flat = [];
    const recurse = (subArr) => {
      subArr.forEach((item) => {
        flat.push(item);
        const children2 = getChildren(item);
        if (children2.length) {
          recurse(children2);
        }
      });
    };
    recurse(arr);
    return flat;
  }
  var memo = ({
    fn: fn2,
    memoDeps,
    onAfterCompare,
    onAfterUpdate,
    onBeforeCompare,
    onBeforeUpdate
  }) => {
    let deps = [];
    let result;
    return (depArgs) => {
      onBeforeCompare?.();
      const newDeps = memoDeps?.(depArgs);
      const depsChanged = !newDeps || newDeps.length !== deps?.length || newDeps.some((dep, index) => deps?.[index] !== dep);
      onAfterCompare?.(depsChanged);
      if (!depsChanged) {
        return result;
      }
      deps = newDeps;
      onBeforeUpdate?.();
      result = fn2(...newDeps ?? []);
      onAfterUpdate?.(result);
      return result;
    };
  };
  var pad = (str, num) => {
    str = String(str);
    while (str.length < num) {
      str = " " + str;
    }
    return str;
  };
  function tableMemo({
    feature,
    fnName,
    objectId,
    onAfterUpdate,
    table,
    ...memoOptions
  }) {
    let beforeCompareTime;
    let afterCompareTime;
    let startCalcTime;
    let endCalcTime;
    let runCount = 0;
    let debug;
    let debugCache;
    if (isDev) {
      const { debugCache: _debugCache, debugAll } = table.options;
      debugCache = _debugCache;
      const { parentName } = getFunctionNameInfo(fnName, ".");
      const debugByParent = (
        // @ts-expect-error
        table.options[`debug${(parentName != "table" ? parentName + "s" : parentName).replace(
          parentName,
          parentName.charAt(0).toUpperCase() + parentName.slice(1)
        )}`]
      );
      const debugByFeature = feature ? (
        // @ts-expect-error
        table.options[`debug${feature.charAt(0).toUpperCase() + feature.slice(1)}`]
      ) : false;
      debug = debugAll || debugByParent || debugByFeature;
    }
    function logTime(time, depsChanged) {
      const runType = runCount === 0 ? "(1st run)" : depsChanged ? "(rerun #" + runCount + ")" : "(cache)";
      runCount++;
      console.groupCollapsed(
        `%c\u23F1 ${pad(`${time.toFixed(1)} ms`, 12)} %c${runType}%c ${fnName}%c ${objectId ? `(${fnName.split(".")[0]}Id: ${objectId})` : ""}`,
        `font-size: .6rem; font-weight: bold; ${depsChanged ? `color: hsl(
        ${Math.max(0, Math.min(120 - Math.log10(time) * 60, 120))}deg 100% 31%);` : ""} `,
        `color: ${runCount < 2 ? "#FF00FF" : "#FF1493"}`,
        "color: #666",
        "color: #87CEEB"
      );
      console.info({
        feature,
        state: table.getState(),
        deps: memoOptions.memoDeps?.toString()
      });
      console.trace();
      console.groupEnd();
    }
    const debugOptions = isDev ? {
      onBeforeCompare: () => {
        if (debugCache) {
          beforeCompareTime = performance.now();
        }
      },
      onAfterCompare: (depsChanged) => {
        if (debugCache) {
          afterCompareTime = performance.now();
          const compareTime = Math.round((afterCompareTime - beforeCompareTime) * 100) / 100;
          if (!depsChanged) {
            logTime(compareTime, depsChanged);
          }
        }
      },
      onBeforeUpdate: () => {
        if (debug) {
          startCalcTime = performance.now();
        }
      },
      onAfterUpdate: () => {
        if (debug) {
          endCalcTime = performance.now();
          const executionTime = Math.round((endCalcTime - startCalcTime) * 100) / 100;
          logTime(executionTime, true);
        }
        queueMicrotask(() => onAfterUpdate?.());
      }
    } : {
      onAfterUpdate: () => {
        queueMicrotask(() => onAfterUpdate?.());
      }
    };
    return memo({
      ...memoOptions,
      ...debugOptions
    });
  }
  function getFunctionNameInfo(staticFnName, splitBy = "_") {
    const [parentName, fnKey] = staticFnName.split(splitBy);
    const fnName = `${parentName}.${fnKey}`;
    return { fnKey, fnName, parentName };
  }
  function assignAPIs(feature, obj, apis) {
    const table = obj._table ?? obj;
    apis.forEach(({ fn: fn2, memoDeps, fnName: staticFnName }) => {
      const { fnKey, fnName } = getFunctionNameInfo(staticFnName);
      obj[fnKey] = memoDeps ? tableMemo({
        memoDeps,
        fn: fn2,
        fnName,
        objectId: obj.id,
        table,
        feature
      }) : fn2;
    });
  }
  function callMemoOrStaticFn(obj, fnKey, staticFn, ...args) {
    return obj[fnKey]?.(...args) ?? staticFn(obj, ...args);
  }

  // ../vendor/table-core/core/cells/coreCellsFeature.utils.ts
  function cell_getValue(cell) {
    return cell.row.getValue(cell.column.id);
  }
  function cell_renderValue(cell) {
    return cell.getValue() ?? cell._table.options.renderFallbackValue;
  }
  function cell_getContext(cell) {
    return {
      table: cell._table,
      column: cell.column,
      row: cell.row,
      cell,
      getValue: cell.getValue,
      renderValue: cell.renderValue
    };
  }

  // ../vendor/table-core/core/cells/coreCellsFeature.ts
  function constructCoreCellsFeature() {
    return {
      constructCellAPIs: (cell) => {
        assignAPIs("coreCellsFeature", cell, [
          {
            fn: () => cell_getValue(cell),
            fnName: "cell_getValue"
          },
          {
            fn: () => cell_renderValue(cell),
            fnName: "cell_renderValue"
          },
          {
            fn: () => cell_getContext(cell),
            fnName: "cell_getContext",
            memoDeps: () => [cell]
          }
        ]);
      }
    };
  }
  var coreCellsFeature = constructCoreCellsFeature();

  // ../vendor/table-core/features/column-visibility/columnVisibilityFeature.utils.ts
  function getDefaultColumnVisibilityState() {
    return structuredClone({});
  }
  function column_toggleVisibility(column, visible) {
    if (column_getCanHide(column)) {
      table_setColumnVisibility(column._table, (old) => ({
        ...old,
        [column.id]: visible ?? !callMemoOrStaticFn(column, "getIsVisible", column_getIsVisible)
      }));
    }
  }
  function column_getIsVisible(column) {
    const childColumns = column.columns;
    return (childColumns.length ? childColumns.some(
      (childColumn) => callMemoOrStaticFn(childColumn, "getIsVisible", column_getIsVisible)
    ) : column._table.options.state?.columnVisibility?.[column.id]) ?? true;
  }
  function column_getCanHide(column) {
    return (column.columnDef.enableHiding ?? true) && (column._table.options.enableHiding ?? true);
  }
  function column_getToggleVisibilityHandler(column) {
    return (e6) => {
      column_toggleVisibility(
        column,
        e6.target.checked
      );
    };
  }
  function row_getAllVisibleCells(row) {
    return row.getAllCells().filter(
      (cell) => callMemoOrStaticFn(cell.column, "getIsVisible", column_getIsVisible)
    );
  }
  function row_getVisibleCells(left2, center2, right2) {
    return [...left2, ...center2, ...right2];
  }
  function table_getVisibleFlatColumns(table) {
    return table.getAllFlatColumns().filter(
      (column) => callMemoOrStaticFn(column, "getIsVisible", column_getIsVisible)
    );
  }
  function table_getVisibleLeafColumns(table) {
    return table.getAllLeafColumns().filter(
      (column) => callMemoOrStaticFn(column, "getIsVisible", column_getIsVisible)
    );
  }
  function table_setColumnVisibility(table, updater) {
    table.options.onColumnVisibilityChange?.(updater);
  }
  function table_resetColumnVisibility(table, defaultState) {
    table_setColumnVisibility(
      table,
      defaultState ? {} : table.initialState.columnVisibility ?? {}
    );
  }
  function table_toggleAllColumnsVisible(table, value) {
    value = value ?? !table_getIsAllColumnsVisible(table);
    table_setColumnVisibility(
      table,
      table.getAllLeafColumns().reduce(
        (obj, column) => ({
          ...obj,
          [column.id]: !value ? !column_getCanHide(column) : value
        }),
        {}
      )
    );
  }
  function table_getIsAllColumnsVisible(table) {
    return !table.getAllLeafColumns().some(
      (column) => !callMemoOrStaticFn(column, "getIsVisible", column_getIsVisible)
    );
  }
  function table_getIsSomeColumnsVisible(table) {
    return table.getAllLeafColumns().some(
      (column) => callMemoOrStaticFn(column, "getIsVisible", column_getIsVisible)
    );
  }
  function table_getToggleAllColumnsVisibilityHandler(table) {
    return (e6) => {
      table_toggleAllColumnsVisible(
        table,
        e6.target.checked
      );
    };
  }

  // ../vendor/table-core/core/headers/constructHeader.ts
  function constructHeader(table, column, options) {
    const header = {
      colSpan: 0,
      column,
      depth: options.depth,
      headerGroup: null,
      id: options.id ?? column.id,
      index: options.index,
      isPlaceholder: !!options.isPlaceholder,
      placeholderId: options.placeholderId,
      rowSpan: 0,
      subHeaders: [],
      _table: table
    };
    for (const feature of Object.values(table._features)) {
      feature.constructHeaderAPIs?.(header);
    }
    return header;
  }

  // ../vendor/table-core/core/headers/buildHeaderGroups.ts
  function buildHeaderGroups(allColumns, columnsToGroup, table, headerFamily) {
    let maxDepth = 0;
    const findMaxDepth = (columns, depth = 1) => {
      maxDepth = Math.max(maxDepth, depth);
      columns.filter(
        (column) => callMemoOrStaticFn(column, "getIsVisible", column_getIsVisible)
      ).forEach((column) => {
        if (column.columns.length) {
          findMaxDepth(column.columns, depth + 1);
        }
      }, 0);
    };
    findMaxDepth(allColumns);
    const headerGroups = [];
    const constructHeaderGroup = (headersToGroup, depth) => {
      const headerGroup = {
        depth,
        id: [headerFamily, `${depth}`].filter(Boolean).join("_"),
        headers: []
      };
      const pendingParentHeaders = [];
      headersToGroup.forEach((headerToGroup) => {
        const latestPendingParentHeader = [...pendingParentHeaders].reverse()[0];
        const isLeafHeader = headerToGroup.column.depth === headerGroup.depth;
        let column;
        let isPlaceholder = false;
        if (isLeafHeader && headerToGroup.column.parent) {
          column = headerToGroup.column.parent;
        } else {
          column = headerToGroup.column;
          isPlaceholder = true;
        }
        if (latestPendingParentHeader && latestPendingParentHeader.column === column) {
          latestPendingParentHeader.subHeaders.push(headerToGroup);
        } else {
          const header = constructHeader(table, column, {
            id: [headerFamily, depth, column.id, headerToGroup.id].filter(Boolean).join("_"),
            isPlaceholder,
            placeholderId: isPlaceholder ? `${pendingParentHeaders.filter((d4) => d4.column === column).length}` : void 0,
            depth,
            index: pendingParentHeaders.length
          });
          header.subHeaders.push(headerToGroup);
          pendingParentHeaders.push(header);
        }
        headerGroup.headers.push(headerToGroup);
        headerToGroup.headerGroup = headerGroup;
      });
      headerGroups.push(headerGroup);
      if (depth > 0) {
        constructHeaderGroup(pendingParentHeaders, depth - 1);
      }
    };
    const bottomHeaders = columnsToGroup.map(
      (column, index) => constructHeader(table, column, {
        depth: maxDepth,
        index
      })
    );
    constructHeaderGroup(bottomHeaders, maxDepth - 1);
    headerGroups.reverse();
    const recurseHeadersForSpans = (headers) => {
      const filteredHeaders = headers.filter(
        (header) => callMemoOrStaticFn(header.column, "getIsVisible", column_getIsVisible)
      );
      return filteredHeaders.map((header) => {
        let colSpan = 0;
        let rowSpan = 0;
        let childRowSpans = [0];
        if (header.subHeaders.length) {
          childRowSpans = [];
          recurseHeadersForSpans(header.subHeaders).forEach(
            ({ colSpan: childColSpan, rowSpan: childRowSpan }) => {
              colSpan += childColSpan;
              childRowSpans.push(childRowSpan);
            }
          );
        } else {
          colSpan = 1;
        }
        const minChildRowSpan = Math.min(...childRowSpans);
        rowSpan = rowSpan + minChildRowSpan;
        header.colSpan = colSpan;
        header.rowSpan = rowSpan;
        return { colSpan, rowSpan };
      });
    };
    recurseHeadersForSpans(
      headerGroups[0]?.headers ?? []
    );
    return headerGroups;
  }

  // ../vendor/table-core/features/column-pinning/columnPinningFeature.utils.ts
  function getDefaultColumnPinningState() {
    return structuredClone({
      left: [],
      right: []
    });
  }
  function column_pin(column, position) {
    const columnIds = column.getLeafColumns().map((d4) => d4.id).filter(Boolean);
    table_setColumnPinning(column._table, (old) => {
      if (position === "right") {
        return {
          left: old.left.filter((d4) => !columnIds.includes(d4)),
          right: [
            ...old.right.filter((d4) => !columnIds.includes(d4)),
            ...columnIds
          ]
        };
      }
      if (position === "left") {
        return {
          left: [...old.left.filter((d4) => !columnIds.includes(d4)), ...columnIds],
          right: old.right.filter((d4) => !columnIds.includes(d4))
        };
      }
      return {
        left: old.left.filter((d4) => !columnIds.includes(d4)),
        right: old.right.filter((d4) => !columnIds.includes(d4))
      };
    });
  }
  function column_getCanPin(column) {
    const leafColumns = column.getLeafColumns();
    return leafColumns.some(
      (leafColumn) => (leafColumn.columnDef.enablePinning ?? true) && (column._table.options.enableColumnPinning ?? true)
    );
  }
  function column_getIsPinned(column) {
    const leafColumnIds = column.getLeafColumns().map((d4) => d4.id);
    const { left: left2, right: right2 } = column._table.options.state?.columnPinning ?? getDefaultColumnPinningState();
    const isLeft = leafColumnIds.some((d4) => left2.includes(d4));
    const isRight = leafColumnIds.some((d4) => right2.includes(d4));
    return isLeft ? "left" : isRight ? "right" : false;
  }
  function column_getPinnedIndex(column) {
    const position = column_getIsPinned(column);
    return position ? column._table.options.state?.columnPinning?.[position].indexOf(
      column.id
    ) ?? -1 : 0;
  }
  function row_getCenterVisibleCells(row) {
    const allCells = callMemoOrStaticFn(
      row,
      "getAllVisibleCells",
      row_getAllVisibleCells
    );
    const { left: left2, right: right2 } = row._table.options.state?.columnPinning ?? getDefaultColumnPinningState();
    const leftAndRight = [...left2, ...right2];
    return allCells.filter((d4) => !leftAndRight.includes(d4.column.id));
  }
  function row_getLeftVisibleCells(row) {
    const allCells = callMemoOrStaticFn(
      row,
      "getAllVisibleCells",
      row_getAllVisibleCells
    );
    const { left: left2 } = row._table.options.state?.columnPinning ?? getDefaultColumnPinningState();
    const cells = left2.map((columnId) => allCells.find((cell) => cell.column.id === columnId)).filter(Boolean).map((d4) => ({ ...d4, position: "left" }));
    return cells;
  }
  function row_getRightVisibleCells(row) {
    const allCells = callMemoOrStaticFn(
      row,
      "getAllVisibleCells",
      row_getAllVisibleCells
    );
    const { right: right2 } = row._table.options.state?.columnPinning ?? getDefaultColumnPinningState();
    const cells = right2.map((columnId) => allCells.find((cell) => cell.column.id === columnId)).filter(Boolean).map((d4) => ({ ...d4, position: "right" }));
    return cells;
  }
  function table_setColumnPinning(table, updater) {
    table.options.onColumnPinningChange?.(updater);
  }
  function table_resetColumnPinning(table, defaultState) {
    table_setColumnPinning(
      table,
      defaultState ? getDefaultColumnPinningState() : table.initialState.columnPinning ?? getDefaultColumnPinningState()
    );
  }
  function table_getIsSomeColumnsPinned(table, position) {
    const pinningState = table.options.state?.columnPinning;
    if (!position) {
      return Boolean(pinningState?.left.length || pinningState?.right.length);
    }
    return Boolean(pinningState?.[position].length);
  }
  function table_getLeftHeaderGroups(table) {
    const allColumns = table.getAllColumns();
    const leafColumns = callMemoOrStaticFn(
      table,
      "getVisibleLeafColumns",
      table_getVisibleLeafColumns
    );
    const { left: left2 } = table.options.state?.columnPinning ?? getDefaultColumnPinningState();
    const orderedLeafColumns = left2.map((columnId) => leafColumns.find((d4) => d4.id === columnId)).filter(Boolean);
    return buildHeaderGroups(allColumns, orderedLeafColumns, table, "left");
  }
  function table_getRightHeaderGroups(table) {
    const allColumns = table.getAllColumns();
    const leafColumns = callMemoOrStaticFn(
      table,
      "getVisibleLeafColumns",
      table_getVisibleLeafColumns
    );
    const { right: right2 } = table.options.state?.columnPinning ?? getDefaultColumnPinningState();
    const orderedLeafColumns = right2.map((columnId) => leafColumns.find((d4) => d4.id === columnId)).filter(Boolean);
    return buildHeaderGroups(allColumns, orderedLeafColumns, table, "right");
  }
  function table_getCenterHeaderGroups(table) {
    const allColumns = table.getAllColumns();
    let leafColumns = callMemoOrStaticFn(
      table,
      "getVisibleLeafColumns",
      table_getVisibleLeafColumns
    );
    const { left: left2, right: right2 } = table.options.state?.columnPinning ?? getDefaultColumnPinningState();
    const leftAndRight = [...left2, ...right2];
    leafColumns = leafColumns.filter(
      (column) => !leftAndRight.includes(column.id)
    );
    return buildHeaderGroups(allColumns, leafColumns, table, "center");
  }
  function table_getLeftFooterGroups(table) {
    const headerGroups = callMemoOrStaticFn(
      table,
      "getLeftHeaderGroups",
      table_getLeftHeaderGroups
    );
    return [...headerGroups].reverse();
  }
  function table_getRightFooterGroups(table) {
    const headerGroups = callMemoOrStaticFn(
      table,
      "getRightHeaderGroups",
      table_getRightHeaderGroups
    );
    return [...headerGroups].reverse();
  }
  function table_getCenterFooterGroups(table) {
    const headerGroups = callMemoOrStaticFn(
      table,
      "getCenterHeaderGroups",
      table_getCenterHeaderGroups
    );
    return [...headerGroups].reverse();
  }
  function table_getLeftFlatHeaders(table) {
    const leftHeaderGroups = callMemoOrStaticFn(
      table,
      "getLeftHeaderGroups",
      table_getLeftHeaderGroups
    );
    return leftHeaderGroups.map((headerGroup) => {
      return headerGroup.headers;
    }).flat();
  }
  function table_getRightFlatHeaders(table) {
    const rightHeaderGroups = callMemoOrStaticFn(
      table,
      "getRightHeaderGroups",
      table_getRightHeaderGroups
    );
    return rightHeaderGroups.map((headerGroup) => {
      return headerGroup.headers;
    }).flat();
  }
  function table_getCenterFlatHeaders(table) {
    const centerHeaderGroups = callMemoOrStaticFn(
      table,
      "getCenterHeaderGroups",
      table_getCenterHeaderGroups
    );
    return centerHeaderGroups.map((headerGroup) => {
      return headerGroup.headers;
    }).flat();
  }
  function table_getLeftLeafHeaders(table) {
    return callMemoOrStaticFn(
      table,
      "getLeftFlatHeaders",
      table_getLeftFlatHeaders
    ).filter((header) => !header.subHeaders.length);
  }
  function table_getRightLeafHeaders(table) {
    return callMemoOrStaticFn(
      table,
      "getRightFlatHeaders",
      table_getRightFlatHeaders
    ).filter((header) => !header.subHeaders.length);
  }
  function table_getCenterLeafHeaders(table) {
    return callMemoOrStaticFn(
      table,
      "getCenterFlatHeaders",
      table_getCenterFlatHeaders
    ).filter((header) => !header.subHeaders.length);
  }
  function table_getLeftLeafColumns(table) {
    const { left: left2 } = table.options.state?.columnPinning ?? getDefaultColumnPinningState();
    return left2.map(
      (columnId) => table.getAllLeafColumns().find((column) => column.id === columnId)
    ).filter(Boolean);
  }
  function table_getRightLeafColumns(table) {
    const { right: right2 } = table.options.state?.columnPinning ?? getDefaultColumnPinningState();
    return right2.map(
      (columnId) => table.getAllLeafColumns().find((column) => column.id === columnId)
    ).filter(Boolean);
  }
  function table_getCenterLeafColumns(table) {
    const { left: left2, right: right2 } = table.options.state?.columnPinning ?? getDefaultColumnPinningState();
    const leftAndRight = [...left2, ...right2];
    return table.getAllLeafColumns().filter((d4) => !leftAndRight.includes(d4.id));
  }
  function table_getLeftVisibleLeafColumns(table) {
    return callMemoOrStaticFn(
      table,
      "getLeftLeafColumns",
      table_getLeftLeafColumns
    ).filter(
      (column) => callMemoOrStaticFn(column, "getIsVisible", column_getIsVisible)
    );
  }
  function table_getRightVisibleLeafColumns(table) {
    return callMemoOrStaticFn(
      table,
      "getRightLeafColumns",
      table_getRightLeafColumns
    ).filter(
      (column) => callMemoOrStaticFn(column, "getIsVisible", column_getIsVisible)
    );
  }
  function table_getCenterVisibleLeafColumns(table) {
    return callMemoOrStaticFn(
      table,
      "getCenterLeafColumns",
      table_getCenterLeafColumns
    ).filter(
      (column) => callMemoOrStaticFn(column, "getIsVisible", column_getIsVisible)
    );
  }
  function table_getPinnedVisibleLeafColumns(table, position) {
    return !position ? callMemoOrStaticFn(
      table,
      "getVisibleLeafColumns",
      table_getVisibleLeafColumns
    ) : position === "left" ? callMemoOrStaticFn(
      table,
      "getLeftVisibleLeafColumns",
      table_getLeftVisibleLeafColumns
    ) : position === "right" ? callMemoOrStaticFn(
      table,
      "getRightVisibleLeafColumns",
      table_getRightVisibleLeafColumns
    ) : callMemoOrStaticFn(
      table,
      "getCenterVisibleLeafColumns",
      table_getCenterVisibleLeafColumns
    );
  }

  // ../vendor/table-core/features/column-ordering/columnOrderingFeature.utils.ts
  function getDefaultColumnOrderState() {
    return structuredClone([]);
  }
  function column_getIndex(column, position) {
    const { _table: table } = column;
    const columns = table_getPinnedVisibleLeafColumns(table, position);
    return columns.findIndex((d4) => d4.id === column.id);
  }
  function column_getIsFirstColumn(column, position) {
    const columns = table_getPinnedVisibleLeafColumns(column._table, position);
    return columns[0]?.id === column.id;
  }
  function column_getIsLastColumn(column, position) {
    const columns = table_getPinnedVisibleLeafColumns(column._table, position);
    return columns[columns.length - 1]?.id === column.id;
  }
  function table_setColumnOrder(table, updater) {
    table.options.onColumnOrderChange?.(updater);
  }
  function table_resetColumnOrder(table, defaultState) {
    table_setColumnOrder(
      table,
      defaultState ? [] : table.initialState.columnOrder ?? []
    );
  }
  function table_getOrderColumnsFn(table) {
    const { columnOrder = [] } = table.options.state ?? {};
    return (columns) => {
      let orderedColumns = [];
      if (!columnOrder.length) {
        orderedColumns = columns;
      } else {
        const columnOrderCopy = [...columnOrder];
        const columnsCopy = [...columns];
        while (columnsCopy.length && columnOrderCopy.length) {
          const targetColumnId = columnOrderCopy.shift();
          const foundIndex = columnsCopy.findIndex((d4) => d4.id === targetColumnId);
          if (foundIndex > -1) {
            orderedColumns.push(columnsCopy.splice(foundIndex, 1)[0]);
          }
        }
        orderedColumns = [...orderedColumns, ...columnsCopy];
      }
      return orderColumns(table, orderedColumns);
    };
  }
  function orderColumns(table, leafColumns) {
    const grouping = table.options.state?.grouping ?? [];
    const { groupedColumnMode } = table.options;
    if (!grouping.length || !groupedColumnMode) {
      return leafColumns;
    }
    const nonGroupingColumns = leafColumns.filter(
      (col) => !grouping.includes(col.id)
    );
    if (groupedColumnMode === "remove") {
      return nonGroupingColumns;
    }
    const groupingColumns = grouping.map((g4) => leafColumns.find((col) => col.id === g4)).filter(Boolean);
    return [...groupingColumns, ...nonGroupingColumns];
  }

  // ../vendor/table-core/core/columns/constructColumn.ts
  function constructColumn(table, columnDef, depth, parent) {
    const defaultColumn = table.getDefaultColumnDef();
    const resolvedColumnDef = {
      ...defaultColumn,
      ...columnDef
    };
    const accessorKey = resolvedColumnDef.accessorKey;
    const id3 = resolvedColumnDef.id ?? (accessorKey ? accessorKey.replaceAll(".", "_") : void 0) ?? (typeof resolvedColumnDef.header === "string" ? resolvedColumnDef.header : void 0);
    let accessorFn;
    if (resolvedColumnDef.accessorFn) {
      accessorFn = resolvedColumnDef.accessorFn;
    } else if (accessorKey) {
      if (accessorKey.includes(".")) {
        accessorFn = (originalRow) => {
          let result = originalRow;
          for (const key of accessorKey.split(".")) {
            result = result?.[key];
            if (isDev && result === void 0) {
              console.warn(
                `"${key}" in deeply nested key "${accessorKey}" returned undefined.`
              );
            }
          }
          return result;
        };
      } else {
        accessorFn = (originalRow) => originalRow[resolvedColumnDef.accessorKey];
      }
    }
    if (!id3) {
      if (isDev) {
        throw new Error(
          resolvedColumnDef.accessorFn ? `coreColumnsFeature require an id when using an accessorFn` : `coreColumnsFeature require an id when using a non-string header`
        );
      }
      throw new Error();
    }
    const column = {
      accessorFn,
      columnDef: resolvedColumnDef,
      columns: [],
      depth,
      id: `${String(id3)}`,
      parent,
      _table: table
    };
    for (const feature of Object.values(table._features)) {
      feature.constructColumnAPIs?.(column);
    }
    return column;
  }

  // ../vendor/table-core/core/columns/coreColumnsFeature.utils.ts
  function column_getFlatColumns(column) {
    return [column, ...column.columns.flatMap((col) => col.getFlatColumns())];
  }
  function column_getLeafColumns(column) {
    if (column.columns.length) {
      const leafColumns = column.columns.flatMap(
        (col) => col.getLeafColumns()
        // recursive
      );
      return callMemoOrStaticFn(
        column._table,
        "getOrderColumns",
        table_getOrderColumnsFn
      )(leafColumns);
    }
    return [column];
  }
  function table_getDefaultColumnDef(table) {
    return {
      header: (props) => {
        const resolvedColumnDef = props.header.column.columnDef;
        if (resolvedColumnDef.accessorKey) {
          return resolvedColumnDef.accessorKey;
        }
        if (resolvedColumnDef.accessorFn) {
          return resolvedColumnDef.id;
        }
        return null;
      },
      cell: (props) => props.renderValue()?.toString?.() ?? null,
      ...Object.values(table._features).reduce((obj, feature) => {
        return Object.assign(obj, feature.getDefaultColumnDef?.());
      }, {}),
      ...table.options.defaultColumn
    };
  }
  function table_getAllColumns(table) {
    const recurseColumns = (colDefs, parent, depth = 0) => {
      return colDefs.map((columnDef) => {
        const column = constructColumn(table, columnDef, depth, parent);
        const groupingColumnDef = columnDef;
        column.columns = groupingColumnDef.columns ? recurseColumns(groupingColumnDef.columns, column, depth + 1) : [];
        return column;
      });
    };
    return recurseColumns(table.options.columns);
  }
  function table_getAllFlatColumns(table) {
    return table.getAllColumns().flatMap((column) => column.getFlatColumns());
  }
  function table_getAllFlatColumnsById(table) {
    return table.getAllFlatColumns().reduce(
      (acc, column) => {
        acc[column.id] = column;
        return acc;
      },
      {}
    );
  }
  function table_getAllLeafColumns(table) {
    const leafColumns = table.getAllColumns().flatMap(
      (c4) => c4.getLeafColumns()
      // recursive
    );
    return callMemoOrStaticFn(
      table,
      "getOrderColumns",
      table_getOrderColumnsFn
    )(leafColumns);
  }
  function table_getColumn(table, columnId) {
    const column = table.getAllFlatColumnsById()[columnId];
    if (isDev && !column) {
      console.warn(`[Table] Column with id '${columnId}' does not exist.`);
    }
    return column;
  }

  // ../vendor/table-core/core/columns/coreColumnsFeature.ts
  function constructCoreColumnsFeature() {
    return {
      constructColumnAPIs: (column) => {
        const { _table: table } = column;
        assignAPIs("coreColumnsFeature", column, [
          {
            fn: () => column_getFlatColumns(column),
            fnName: "column_getFlatColumns",
            memoDeps: () => [table.options.columns]
          },
          {
            fn: () => column_getLeafColumns(column),
            fnName: "column_getLeafColumns",
            memoDeps: () => [
              table.options.state?.columnOrder,
              table.options.state?.grouping,
              table.options.columns,
              table.options.groupedColumnMode
            ]
          }
        ]);
      },
      constructTableAPIs: (table) => {
        assignAPIs("coreColumnsFeature", table, [
          {
            fn: () => table_getDefaultColumnDef(table),
            fnName: "table_getDefaultColumnDef",
            memoDeps: () => [table.options.defaultColumn]
          },
          {
            fn: () => table_getAllColumns(table),
            fnName: "table_getAllColumns",
            memoDeps: () => [table.options.columns]
          },
          {
            fn: () => table_getAllFlatColumns(table),
            fnName: "table_getAllFlatColumns",
            memoDeps: () => [table.options.columns]
          },
          {
            fn: () => table_getAllFlatColumnsById(table),
            fnName: "table_getAllFlatColumnsById",
            memoDeps: () => [table.options.columns]
          },
          {
            fn: () => table_getAllLeafColumns(table),
            fnName: "table_getAllLeafColumns",
            memoDeps: () => [
              table.options.state?.columnOrder,
              table.options.state?.grouping,
              table.options.columns,
              table.options.groupedColumnMode
            ]
          },
          {
            fn: (columnId) => table_getColumn(table, columnId),
            fnName: "table_getColumn"
          }
        ]);
      }
    };
  }
  var coreColumnsFeature = constructCoreColumnsFeature();

  // ../vendor/table-core/core/headers/coreHeadersFeature.utils.ts
  function header_getLeafHeaders(header) {
    const leafHeaders = [];
    const recurseHeader = (h4) => {
      if (h4.subHeaders.length) {
        h4.subHeaders.map(recurseHeader);
      }
      leafHeaders.push(h4);
    };
    recurseHeader(header);
    return leafHeaders;
  }
  function header_getContext(header) {
    return {
      column: header.column,
      header,
      table: header.column._table
    };
  }
  function table_getHeaderGroups(table) {
    const { left: left2, right: right2 } = table.options.state?.columnPinning ?? getDefaultColumnPinningState();
    const allColumns = table.getAllColumns();
    const leafColumns = callMemoOrStaticFn(
      table,
      "getVisibleLeafColumns",
      table_getVisibleLeafColumns
    );
    const leftColumns = left2.map((columnId) => leafColumns.find((d4) => d4.id === columnId)).filter(Boolean);
    const rightColumns = right2.map((columnId) => leafColumns.find((d4) => d4.id === columnId)).filter(Boolean);
    const centerColumns = leafColumns.filter(
      (column) => !left2.includes(column.id) && !right2.includes(column.id)
    );
    const headerGroups = buildHeaderGroups(
      allColumns,
      [...leftColumns, ...centerColumns, ...rightColumns],
      table
    );
    return headerGroups;
  }
  function table_getFooterGroups(table) {
    const headerGroups = table.getHeaderGroups();
    return [...headerGroups].reverse();
  }
  function table_getFlatHeaders(table) {
    const headerGroups = table.getHeaderGroups();
    return headerGroups.map((headerGroup) => {
      return headerGroup.headers;
    }).flat();
  }
  function table_getLeafHeaders(table) {
    const left2 = callMemoOrStaticFn(
      table,
      "getLeftHeaderGroups",
      table_getLeftHeaderGroups
    );
    const center2 = callMemoOrStaticFn(
      table,
      "getCenterHeaderGroups",
      table_getCenterHeaderGroups
    );
    const right2 = callMemoOrStaticFn(
      table,
      "getRightHeaderGroups",
      table_getRightHeaderGroups
    );
    return [
      ...left2[0]?.headers ?? [],
      ...center2[0]?.headers ?? [],
      ...right2[0]?.headers ?? []
    ].map((header) => {
      return header.getLeafHeaders();
    }).flat();
  }

  // ../vendor/table-core/core/headers/coreHeadersFeature.ts
  function constructCoreHeadersFeature() {
    return {
      constructHeaderAPIs: (header) => {
        assignAPIs("coreHeadersFeature", header, [
          {
            fn: () => header_getLeafHeaders(header),
            fnName: "header_getLeafHeaders",
            memoDeps: () => [header.column._table.options.columns]
          },
          {
            fn: () => header_getContext(header),
            fnName: "header_getContext",
            memoDeps: () => [header.column._table.options.columns]
          }
        ]);
      },
      constructTableAPIs: (table) => {
        assignAPIs("coreHeadersFeature", table, [
          {
            fn: () => table_getHeaderGroups(table),
            fnName: "table_getHeaderGroups",
            memoDeps: () => [
              table.options.columns,
              table.options.state?.columnOrder,
              table.options.state?.grouping,
              table.options.state?.columnPinning,
              table.options.groupedColumnMode
            ]
          },
          {
            fn: () => table_getFooterGroups(table),
            fnName: "table_getFooterGroups",
            memoDeps: () => [table.getHeaderGroups()]
          },
          {
            fn: () => table_getFlatHeaders(table),
            fnName: "table_getFlatHeaders",
            memoDeps: () => [table.getHeaderGroups()]
          },
          {
            fn: () => table_getLeafHeaders(table),
            fnName: "table_getLeafHeaders",
            memoDeps: () => [
              callMemoOrStaticFn(
                table,
                "getLeftHeaderGroups",
                table_getLeftHeaderGroups
              ),
              callMemoOrStaticFn(
                table,
                "getCenterHeaderGroups",
                table_getCenterHeaderGroups
              ),
              callMemoOrStaticFn(
                table,
                "getRightHeaderGroups",
                table_getRightHeaderGroups
              )
            ]
          }
        ]);
      }
    };
  }
  var coreHeadersFeature = constructCoreHeadersFeature();

  // ../vendor/table-core/core/rows/constructRow.ts
  var constructRow = (table, id3, original, rowIndex, depth, subRows, parentId) => {
    const row = {
      _uniqueValuesCache: {},
      _valuesCache: {},
      depth,
      id: id3,
      index: rowIndex,
      original,
      parentId,
      subRows: subRows ?? [],
      _table: table
    };
    for (const feature of Object.values(table._features)) {
      feature.constructRowAPIs?.(row);
    }
    return row;
  };

  // ../vendor/table-core/features/row-pagination/rowPaginationFeature.utils.ts
  var defaultPageIndex = 0;
  var defaultPageSize = 10;
  function getDefaultPaginationState() {
    return structuredClone({
      pageIndex: defaultPageIndex,
      pageSize: defaultPageSize
    });
  }
  function table_autoResetPageIndex(table) {
    if (table.options.autoResetAll ?? table.options.autoResetPageIndex ?? !table.options.manualPagination) {
      table_resetPageIndex(table);
    }
  }
  function table_setPagination(table, updater) {
    const safeUpdater = (old) => {
      const newState = functionalUpdate(updater, old);
      return newState;
    };
    return table.options.onPaginationChange?.(safeUpdater);
  }
  function table_resetPagination(table, defaultState) {
    table_setPagination(
      table,
      defaultState ? getDefaultPaginationState() : table.initialState.pagination ?? getDefaultPaginationState()
    );
  }
  function table_setPageIndex(table, updater) {
    table_setPagination(table, (old) => {
      let pageIndex = functionalUpdate(updater, old.pageIndex);
      const maxPageIndex = typeof table.options.pageCount === "undefined" || table.options.pageCount === -1 ? Number.MAX_SAFE_INTEGER : table.options.pageCount - 1;
      pageIndex = Math.max(0, Math.min(pageIndex, maxPageIndex));
      return {
        ...old,
        pageIndex
      };
    });
  }
  function table_resetPageIndex(table, defaultState) {
    table_setPageIndex(
      table,
      defaultState ? defaultPageIndex : table.initialState.pagination?.pageIndex ?? defaultPageIndex
    );
  }
  function table_resetPageSize(table, defaultState) {
    table_setPageSize(
      table,
      defaultState ? defaultPageSize : table.initialState.pagination?.pageSize ?? defaultPageSize
    );
  }
  function table_setPageSize(table, updater) {
    table_setPagination(table, (old) => {
      const pageSize = Math.max(1, functionalUpdate(updater, old.pageSize));
      const topRowIndex = old.pageSize * old.pageIndex;
      const pageIndex = Math.floor(topRowIndex / pageSize);
      return {
        ...old,
        pageIndex,
        pageSize
      };
    });
  }
  function table_getPageOptions(table) {
    const pageCount = table_getPageCount(table);
    let pageOptions = [];
    if (pageCount && pageCount > 0) {
      pageOptions = [...new Array(pageCount)].fill(null).map((_3, i5) => i5);
    }
    return pageOptions;
  }
  function table_getCanPreviousPage(table) {
    return (table.options.state?.pagination?.pageIndex ?? 0) > 0;
  }
  function table_getCanNextPage(table) {
    const pageIndex = table.options.state?.pagination?.pageIndex ?? defaultPageIndex;
    const pageCount = table_getPageCount(table);
    if (pageCount === -1) {
      return true;
    }
    if (pageCount === 0) {
      return false;
    }
    return pageIndex < pageCount - 1;
  }
  function table_previousPage(table) {
    return table_setPageIndex(table, (old) => old - 1);
  }
  function table_nextPage(table) {
    return table_setPageIndex(table, (old) => {
      return old + 1;
    });
  }
  function table_firstPage(table) {
    return table_setPageIndex(table, 0);
  }
  function table_lastPage(table) {
    return table_setPageIndex(table, table_getPageCount(table) - 1);
  }
  function table_getPageCount(table) {
    return table.options.pageCount ?? Math.ceil(
      table_getRowCount(table) / (table.options.state?.pagination?.pageSize ?? defaultPageSize)
    );
  }
  function table_getRowCount(table) {
    return table.options.rowCount ?? table.getPrePaginatedRowModel().rows.length;
  }

  // ../vendor/table-core/core/row-models/createCoreRowModel.ts
  function createCoreRowModel() {
    return (table) => tableMemo({
      feature: "coreRowModelsFeature",
      fn: (data) => _createCoreRowModel(table, data),
      fnName: "table.getCoreRowModel",
      memoDeps: () => [table.options.data],
      onAfterUpdate: () => table_autoResetPageIndex(table),
      table
    });
  }
  function _createCoreRowModel(table, data) {
    const rowModel = {
      rows: [],
      flatRows: [],
      rowsById: {}
    };
    const accessRows = (originalRows, depth = 0, parentRow) => {
      const rows = [];
      for (let i5 = 0; i5 < originalRows.length; i5++) {
        const originalRow = originalRows[i5];
        const row = constructRow(
          table,
          table.getRowId(originalRow, i5, parentRow),
          originalRow,
          i5,
          depth,
          void 0,
          parentRow?.id
        );
        rowModel.flatRows.push(row);
        rowModel.rowsById[row.id] = row;
        rows.push(row);
        if (table.options.getSubRows) {
          row.originalSubRows = table.options.getSubRows(originalRow, i5);
          if (row.originalSubRows?.length) {
            row.subRows = accessRows(row.originalSubRows, depth + 1, row);
          }
        }
      }
      return rows;
    };
    rowModel.rows = accessRows(data);
    return rowModel;
  }

  // ../vendor/table-core/core/row-models/coreRowModelsFeature.utils.ts
  function table_getCoreRowModel(table) {
    if (!table._rowModels.coreRowModel) {
      table._rowModels.coreRowModel = table.options._rowModels?.coreRowModel?.(table) ?? createCoreRowModel()(table);
    }
    return table._rowModels.coreRowModel();
  }
  function table_getPreFilteredRowModel(table) {
    return table.getCoreRowModel();
  }
  function table_getFilteredRowModel(table) {
    if (!table._rowModels.filteredRowModel) {
      table._rowModels.filteredRowModel = table.options._rowModels?.filteredRowModel?.(table);
    }
    if (table.options.manualFiltering || !table._rowModels.filteredRowModel) {
      return table.getPreFilteredRowModel();
    }
    return table._rowModels.filteredRowModel();
  }
  function table_getPreGroupedRowModel(table) {
    return table.getFilteredRowModel();
  }
  function table_getGroupedRowModel(table) {
    if (!table._rowModels.groupedRowModel) {
      table._rowModels.groupedRowModel = table.options._rowModels?.groupedRowModel?.(table);
    }
    if (table.options.manualGrouping || !table._rowModels.groupedRowModel) {
      return table.getPreGroupedRowModel();
    }
    return table._rowModels.groupedRowModel();
  }
  function table_getPreSortedRowModel(table) {
    return table.getGroupedRowModel();
  }
  function table_getSortedRowModel(table) {
    if (!table._rowModels.sortedRowModel) {
      table._rowModels.sortedRowModel = table.options._rowModels?.sortedRowModel?.(table);
    }
    if (table.options.manualSorting || !table._rowModels.sortedRowModel) {
      return table.getPreSortedRowModel();
    }
    return table._rowModels.sortedRowModel();
  }
  function table_getPreExpandedRowModel(table) {
    return table.getSortedRowModel();
  }
  function table_getExpandedRowModel(table) {
    if (!table._rowModels.expandedRowModel) {
      table._rowModels.expandedRowModel = table.options._rowModels?.expandedRowModel?.(table);
    }
    if (table.options.manualExpanding || !table._rowModels.expandedRowModel) {
      return table.getPreExpandedRowModel();
    }
    return table._rowModels.expandedRowModel();
  }
  function table_getPrePaginatedRowModel(table) {
    return table.getExpandedRowModel();
  }
  function table_getPaginatedRowModel(table) {
    if (!table._rowModels.paginatedRowModel) {
      table._rowModels.paginatedRowModel = table.options._rowModels?.paginatedRowModel?.(table);
    }
    if (table.options.manualPagination || !table._rowModels.paginatedRowModel) {
      return table.getPrePaginatedRowModel();
    }
    return table._rowModels.paginatedRowModel();
  }
  function table_getRowModel(table) {
    return table.getPaginatedRowModel();
  }

  // ../vendor/table-core/core/row-models/coreRowModelsFeature.ts
  function constructCoreRowModelsFeature() {
    return {
      constructTableAPIs: (table) => {
        assignAPIs("coreRowModelsFeature", table, [
          {
            fn: () => table_getCoreRowModel(table),
            fnName: "table_getCoreRowModel"
          },
          {
            fn: () => table_getPreFilteredRowModel(table),
            fnName: "table_getPreFilteredRowModel"
          },
          {
            fn: () => table_getFilteredRowModel(table),
            fnName: "table_getFilteredRowModel"
          },
          {
            fn: () => table_getPreGroupedRowModel(table),
            fnName: "table_getPreGroupedRowModel"
          },
          {
            fn: () => table_getGroupedRowModel(table),
            fnName: "table_getGroupedRowModel"
          },
          {
            fn: () => table_getPreSortedRowModel(table),
            fnName: "table_getPreSortedRowModel"
          },
          {
            fn: () => table_getSortedRowModel(table),
            fnName: "table_getSortedRowModel"
          },
          {
            fn: () => table_getPreExpandedRowModel(table),
            fnName: "table_getPreExpandedRowModel"
          },
          {
            fn: () => table_getExpandedRowModel(table),
            fnName: "table_getExpandedRowModel"
          },
          {
            fn: () => table_getPrePaginatedRowModel(table),
            fnName: "table_getPrePaginatedRowModel"
          },
          {
            fn: () => table_getPaginatedRowModel(table),
            fnName: "table_getPaginatedRowModel"
          },
          {
            fn: () => table_getRowModel(table),
            fnName: "table_getRowModel"
          }
        ]);
      }
    };
  }
  var coreRowModelsFeature = constructCoreRowModelsFeature();

  // ../vendor/table-core/core/cells/constructCell.ts
  function constructCell(column, row, table) {
    const cell = {
      column,
      id: `${row.id}_${column.id}`,
      row,
      _table: table
    };
    for (const feature of Object.values(table._features)) {
      feature.constructCellAPIs?.(cell);
    }
    return cell;
  }

  // ../vendor/table-core/core/rows/coreRowsFeature.utils.ts
  function row_getValue(row, columnId) {
    if (row._valuesCache.hasOwnProperty(columnId)) {
      return row._valuesCache[columnId];
    }
    const column = row._table.getColumn(columnId);
    if (!column?.accessorFn) {
      return void 0;
    }
    row._valuesCache[columnId] = column.accessorFn(row.original, row.index);
    return row._valuesCache[columnId];
  }
  function row_getUniqueValues(row, columnId) {
    if (row._uniqueValuesCache.hasOwnProperty(columnId)) {
      return row._uniqueValuesCache[columnId];
    }
    const column = row._table.getColumn(columnId);
    if (!column?.accessorFn) {
      return void 0;
    }
    if (!column.columnDef.getUniqueValues) {
      row._uniqueValuesCache[columnId] = [row.getValue(columnId)];
      return row._uniqueValuesCache[columnId];
    }
    row._uniqueValuesCache[columnId] = column.columnDef.getUniqueValues(
      row.original,
      row.index
    );
    return row._uniqueValuesCache[columnId];
  }
  function row_renderValue(row, columnId) {
    return row.getValue(columnId) ?? row._table.options.renderFallbackValue;
  }
  function row_getLeafRows(row) {
    return flattenBy(row.subRows, (d4) => d4.subRows);
  }
  function row_getParentRow(row) {
    return row.parentId ? row._table.getRow(row.parentId, true) : void 0;
  }
  function row_getParentRows(row) {
    const parentRows = [];
    let currentRow = row;
    while (true) {
      const parentRow = currentRow.getParentRow();
      if (!parentRow)
        break;
      parentRows.push(parentRow);
      currentRow = parentRow;
    }
    return parentRows.reverse();
  }
  function row_getAllCells(row) {
    return row._table.getAllLeafColumns().map((column) => {
      return constructCell(column, row, row._table);
    });
  }
  function row_getAllCellsByColumnId(row) {
    return row.getAllCells().reduce(
      (acc, cell) => {
        acc[cell.column.id] = cell;
        return acc;
      },
      {}
    );
  }
  function table_getRowId(originalRow, table, index, parent) {
    return table.options.getRowId?.(originalRow, index, parent) ?? `${parent ? [parent.id, index].join(".") : index}`;
  }
  function table_getRow(table, rowId, searchAll) {
    let row = (searchAll ? table.getPrePaginatedRowModel() : table.getRowModel()).rowsById[rowId];
    if (!row) {
      row = table.getCoreRowModel().rowsById[rowId];
      if (!row) {
        if (isDev) {
          throw new Error(`getRow could not find row with ID: ${rowId}`);
        }
        throw new Error();
      }
    }
    return row;
  }

  // ../vendor/table-core/core/rows/coreRowsFeature.ts
  function constructCoreRowsFeature() {
    return {
      constructRowAPIs: (row) => {
        assignAPIs("coreRowsFeature", row, [
          {
            fn: () => row_getAllCellsByColumnId(row),
            fnName: "row_getAllCellsByColumnId",
            memoDeps: () => [row.getAllCells()]
          },
          {
            fn: () => row_getAllCells(row),
            fnName: "row_getAllCells",
            memoDeps: () => [row._table.getAllLeafColumns()]
          },
          {
            fn: () => row_getLeafRows(row),
            fnName: "row_getLeafRows"
          },
          {
            fn: () => row_getParentRow(row),
            fnName: "row_getParentRow"
          },
          {
            fn: () => row_getParentRows(row),
            fnName: "row_getParentRows"
          },
          {
            fn: (columnId) => row_getUniqueValues(row, columnId),
            fnName: "row_getUniqueValues"
          },
          {
            fn: (columnId) => row_getValue(row, columnId),
            fnName: "row_getValue"
          },
          {
            fn: (columnId) => row_renderValue(row, columnId),
            fnName: "row_renderValue"
          }
        ]);
      },
      constructTableAPIs: (table) => {
        assignAPIs("coreRowsFeature", table, [
          {
            fn: (row, index, parent) => table_getRowId(row, table, index, parent),
            fnName: "table_getRowId"
          },
          {
            fn: (id3, searchAll) => table_getRow(table, id3, searchAll),
            fnName: "table_getRow"
          }
        ]);
      }
    };
  }
  var coreRowsFeature = constructCoreRowsFeature();

  // ../vendor/table-core/core/table/coreTablesFeature.utils.ts
  function table_reset(table) {
    table.setState(table.initialState);
  }
  function table_mergeOptions(table, newOptions) {
    if (table.options.mergeOptions) {
      return table.options.mergeOptions(table.options, newOptions);
    }
    return {
      ...table.options,
      ...newOptions
    };
  }
  function table_setOptions(table, updater) {
    const newOptions = functionalUpdate(updater, table.options);
    table.options = table_mergeOptions(table, newOptions);
  }
  function table_getState(table) {
    return table.options.state;
  }
  function table_setState(table, updater) {
    table.options.onStateChange?.(updater);
  }

  // ../vendor/table-core/core/table/coreTablesFeature.ts
  function constructCoreTablesFeature() {
    return {
      constructTableAPIs: (table) => {
        assignAPIs("coreTablesFeature", table, [
          {
            fn: () => table_getState(table),
            fnName: "table_getState"
          },
          {
            fn: () => table_reset(table),
            fnName: "table_reset"
          },
          {
            fn: (updater) => table_setOptions(table, updater),
            fnName: "table_setOptions"
          },
          {
            fn: (updater) => table_setState(table, updater),
            fnName: "table_setState"
          }
        ]);
      }
    };
  }
  var coreTablesFeature = constructCoreTablesFeature();

  // ../vendor/table-core/core/coreFeatures.ts
  var coreFeatures = {
    coreCellsFeature,
    coreColumnsFeature,
    coreHeadersFeature,
    coreRowsFeature,
    coreRowModelsFeature,
    coreTablesFeature
  };

  // ../vendor/table-core/helpers/tableFeatures.ts
  function tableFeatures(features) {
    return features;
  }

  // ../vendor/table-core/core/table/constructTable.ts
  function getInitialTableState(features, initialState = {}) {
    Object.values(features).forEach((feature) => {
      initialState = feature.getInitialState?.(initialState) ?? initialState;
    });
    return structuredClone(initialState);
  }
  function constructTable(options) {
    const { _features = {} } = options;
    const featuresList = Object.values(_features);
    if (isDev && (options.debugAll || options.debugTable)) {
      console.info(
        "Constructing Table Instance with feature list:",
        Object.keys(_features)
      );
    }
    const table = {};
    const defaultOptions = featuresList.reduce((obj, feature) => {
      return Object.assign(obj, feature.getDefaultTableOptions?.(table));
    }, {});
    const initialState = getInitialTableState(_features, options.initialState);
    const coreInstance = {
      _features,
      // features get stored here immediately
      _rowModels: {},
      // row models get cached here later
      _rowModelFns: {},
      // row model processing functions get stored here
      options: {
        ...defaultOptions,
        ...options
      },
      initialState
    };
    Object.assign(table, coreInstance);
    for (const feature of featuresList) {
      feature.constructTableAPIs?.(table);
    }
    return table;
  }

  // ../vendor/table-core/fns/filterFns.ts
  var filterFn_equals = (row, columnId, filterValue) => {
    return row.getValue(columnId) === filterValue;
  };
  filterFn_equals.autoRemove = (val) => testFalsy(val);
  var filterFn_weakEquals = (row, columnId, filterValue) => {
    return row.getValue(columnId) == filterValue;
  };
  filterFn_weakEquals.autoRemove = (val) => testFalsy(val);
  var filterFn_includesStringSensitive = (row, columnId, filterValue) => {
    return Boolean(
      row.getValue(columnId)?.toString().includes(filterValue.toString())
    );
  };
  filterFn_includesStringSensitive.autoRemove = (val) => testFalsy(val);
  var filterFn_includesString = (row, columnId, filterValue) => {
    return Boolean(
      row.getValue(columnId)?.toString().toLowerCase().includes(filterValue.toString().toLowerCase())
    );
  };
  filterFn_includesString.autoRemove = (val) => testFalsy(val);
  var filterFn_equalsString = (row, columnId, filterValue) => {
    return row.getValue(columnId)?.toString().toLowerCase() === filterValue.toLowerCase();
  };
  filterFn_equalsString.autoRemove = (val) => testFalsy(val);
  var filterFn_equalsStringSensitive = (row, columnId, filterValue) => {
    return row.getValue(columnId)?.toString() === filterValue;
  };
  filterFn_equalsStringSensitive.autoRemove = (val) => testFalsy(val);
  var filterFn_greaterThan = (row, columnId, filterValue) => {
    const rowValue = row.getValue(columnId);
    const numericRowValue = rowValue === null || rowValue === void 0 ? 0 : +rowValue;
    const numericFilterValue = +filterValue;
    if (!isNaN(numericFilterValue) && !isNaN(numericRowValue)) {
      return numericRowValue > numericFilterValue;
    }
    const stringValue = (rowValue ?? "").toString().toLowerCase().trim();
    const stringFilterValue = filterValue.toString().toLowerCase().trim();
    return stringValue > stringFilterValue;
  };
  filterFn_greaterThan.resolveFilterValue = (val) => testFalsy(val);
  var filterFn_greaterThanOrEqualTo = (row, columnId, filterValue) => {
    return filterFn_greaterThan(row, columnId, filterValue) || filterFn_equals(row, columnId, filterValue);
  };
  filterFn_greaterThanOrEqualTo.resolveFilterValue = (val) => testFalsy(val);
  var filterFn_lessThan = (row, columnId, filterValue) => {
    return !filterFn_greaterThanOrEqualTo(row, columnId, filterValue);
  };
  filterFn_lessThan.resolveFilterValue = (val) => testFalsy(val);
  var filterFn_lessThanOrEqualTo = (row, columnId, filterValue) => {
    return !filterFn_greaterThan(row, columnId, filterValue);
  };
  filterFn_lessThanOrEqualTo.resolveFilterValue = (val) => testFalsy(val);
  var filterFn_between = (row, columnId, filterValues) => (["", void 0].includes(filterValues[0]) || filterFn_greaterThan(row, columnId, filterValues[0])) && (!isNaN(+filterValues[0]) && !isNaN(+filterValues[1]) && +filterValues[0] > +filterValues[1] || ["", void 0].includes(filterValues[1]) || filterFn_lessThan(row, columnId, filterValues[1]));
  filterFn_between.autoRemove = (val) => !val;
  var filterFn_betweenInclusive = (row, columnId, filterValues) => (["", void 0].includes(filterValues[0]) || filterFn_greaterThanOrEqualTo(row, columnId, filterValues[0])) && (!isNaN(+filterValues[0]) && !isNaN(+filterValues[1]) && +filterValues[0] > +filterValues[1] || ["", void 0].includes(filterValues[1]) || filterFn_lessThanOrEqualTo(row, columnId, filterValues[1]));
  filterFn_betweenInclusive.autoRemove = (val) => !val;
  var filterFn_inNumberRange = (row, columnId, filterValue) => {
    const [min5, max6] = filterValue;
    const rowValue = row.getValue(columnId);
    return rowValue >= min5 && rowValue <= max6;
  };
  filterFn_inNumberRange.resolveFilterValue = (val) => {
    const [unsafeMin, unsafeMax] = val;
    const parsedMin = typeof unsafeMin !== "number" ? parseFloat(unsafeMin) : unsafeMin;
    const parsedMax = typeof unsafeMax !== "number" ? parseFloat(unsafeMax) : unsafeMax;
    let min5 = unsafeMin === null || Number.isNaN(parsedMin) ? -Infinity : parsedMin;
    let max6 = unsafeMax === null || Number.isNaN(parsedMax) ? Infinity : parsedMax;
    if (min5 > max6) {
      const temp = min5;
      min5 = max6;
      max6 = temp;
    }
    return [min5, max6];
  };
  filterFn_inNumberRange.autoRemove = (val) => testFalsy(val) || testFalsy(val[0]) && testFalsy(val[1]);
  var filterFn_arrIncludes = (row, columnId, filterValue) => {
    return filterValue.some(
      (val) => row.getValue(columnId).includes(
        val
      )
    );
  };
  filterFn_arrIncludes.autoRemove = (val) => testFalsy(val) || !val?.length;
  var filterFn_arrIncludesAll = (row, columnId, filterValue) => {
    const value = row.getValue(columnId);
    if (!Array.isArray(value))
      return false;
    return !filterValue.some((val) => !value.includes(val));
  };
  filterFn_arrIncludesAll.autoRemove = (val) => testFalsy(val) || !val?.length;
  var filterFn_arrIncludesSome = (row, columnId, filterValue) => {
    const value = row.getValue(columnId);
    if (!Array.isArray(value))
      return false;
    return filterValue.some((val) => value.includes(val));
  };
  filterFn_arrIncludesSome.autoRemove = (val) => testFalsy(val) || !val?.length;
  function testFalsy(val) {
    return val === void 0 || val === null || val === "";
  }

  // ../vendor/table-core/fns/sortFns.ts
  var reSplitAlphaNumeric = /([0-9]+)/gm;
  var sortFn_alphanumeric = (rowA, rowB, columnId) => {
    return compareAlphanumeric(
      toString8(rowA.getValue(columnId)).toLowerCase(),
      toString8(rowB.getValue(columnId)).toLowerCase()
    );
  };
  var sortFn_alphanumericCaseSensitive = (rowA, rowB, columnId) => {
    return compareAlphanumeric(
      toString8(rowA.getValue(columnId)),
      toString8(rowB.getValue(columnId))
    );
  };
  var sortFn_text = (rowA, rowB, columnId) => {
    return compareBasic(
      toString8(rowA.getValue(columnId)).toLowerCase(),
      toString8(rowB.getValue(columnId)).toLowerCase()
    );
  };
  var sortFn_textCaseSensitive = (rowA, rowB, columnId) => {
    return compareBasic(
      toString8(rowA.getValue(columnId)),
      toString8(rowB.getValue(columnId))
    );
  };
  var sortFn_datetime = (rowA, rowB, columnId) => {
    const a5 = rowA.getValue(columnId);
    const b2 = rowB.getValue(columnId);
    return a5 > b2 ? 1 : a5 < b2 ? -1 : 0;
  };
  var sortFn_basic = (rowA, rowB, columnId) => {
    return compareBasic(rowA.getValue(columnId), rowB.getValue(columnId));
  };
  function compareBasic(a5, b2) {
    return a5 === b2 ? 0 : a5 > b2 ? 1 : -1;
  }
  function toString8(a5) {
    if (typeof a5 === "number") {
      if (isNaN(a5) || a5 === Infinity || a5 === -Infinity) {
        return "";
      }
      return String(a5);
    }
    if (typeof a5 === "string") {
      return a5;
    }
    return "";
  }
  function compareAlphanumeric(aStr, bStr) {
    const a5 = aStr.split(reSplitAlphaNumeric).filter(Boolean);
    const b2 = bStr.split(reSplitAlphaNumeric).filter(Boolean);
    while (a5.length && b2.length) {
      const aa2 = a5.shift();
      const bb = b2.shift();
      const an2 = parseInt(aa2, 10);
      const bn2 = parseInt(bb, 10);
      const combo = [an2, bn2].sort();
      if (isNaN(combo[0])) {
        if (aa2 > bb) {
          return 1;
        }
        if (bb > aa2) {
          return -1;
        }
        continue;
      }
      if (isNaN(combo[1])) {
        return isNaN(an2) ? -1 : 1;
      }
      if (an2 > bn2) {
        return 1;
      }
      if (bn2 > an2) {
        return -1;
      }
    }
    return a5.length - b2.length;
  }
  var sortFns = {
    alphanumeric: sortFn_alphanumeric,
    alphanumericCaseSensitive: sortFn_alphanumericCaseSensitive,
    basic: sortFn_basic,
    datetime: sortFn_datetime,
    text: sortFn_text,
    textCaseSensitive: sortFn_textCaseSensitive
  };

  // ../vendor/table-core/features/column-faceting/columnFacetingFeature.utils.ts
  function column_getFacetedMinMaxValues(column, table) {
    return table.options._rowModels?.facetedMinMaxValues?.(table, column.id) ?? (() => void 0);
  }
  function column_getFacetedRowModel(column, table) {
    return table.options._rowModels?.facetedRowModel?.(table, column?.id ?? "") ?? (() => table.getPreFilteredRowModel());
  }
  function column_getFacetedUniqueValues(column, table) {
    return table.options._rowModels?.facetedUniqueValues?.(table, column.id) ?? (() => /* @__PURE__ */ new Map());
  }
  function table_getGlobalFacetedMinMaxValues(table) {
    return table.options._rowModels?.facetedMinMaxValues?.(table, "__global__") ?? (() => void 0);
  }
  function table_getGlobalFacetedRowModel(table) {
    return table.options._rowModels?.facetedRowModel?.(table, "__global__") ?? (() => table.getPreFilteredRowModel());
  }
  function table_getGlobalFacetedUniqueValues(table) {
    return table.options._rowModels?.facetedUniqueValues?.(table, "__global__") ?? (() => /* @__PURE__ */ new Map());
  }

  // ../vendor/table-core/features/column-faceting/columnFacetingFeature.ts
  function constructColumnFacetingFeature() {
    return {
      constructColumnAPIs: (column) => {
        assignAPIs("columnFacetingFeature", column, [
          {
            fn: () => column_getFacetedMinMaxValues(column, column._table),
            fnName: "column_getFacetedMinMaxValues"
          },
          {
            fn: () => column_getFacetedRowModel(column, column._table),
            fnName: "column_getFacetedRowModel"
          },
          {
            fn: () => column_getFacetedUniqueValues(column, column._table),
            fnName: "column_getFacetedUniqueValues"
          }
        ]);
      },
      constructTableAPIs: (table) => {
        assignAPIs("columnFacetingFeature", table, [
          {
            fn: () => table_getGlobalFacetedMinMaxValues(table),
            fnName: "table_getGlobalFacetedMinMaxValues"
          },
          {
            fn: () => table_getGlobalFacetedRowModel(table),
            fnName: "table_getGlobalFacetedRowModel"
          },
          {
            fn: () => table_getGlobalFacetedUniqueValues(table),
            fnName: "table_getGlobalFacetedUniqueValues"
          }
        ]);
      }
    };
  }
  var columnFacetingFeature = constructColumnFacetingFeature();

  // ../vendor/table-core/features/column-filtering/columnFilteringFeature.utils.ts
  function getDefaultColumnFiltersState() {
    return structuredClone([]);
  }
  function column_getAutoFilterFn(column) {
    const filterFns = column._table._rowModelFns.filterFns;
    const firstRow = column._table.getCoreRowModel().flatRows[0];
    const value = firstRow ? firstRow.getValue(column.id) : void 0;
    if (typeof value === "string") {
      return filterFns?.includesString;
    }
    if (typeof value === "number") {
      return filterFns?.inNumberRange;
    }
    if (typeof value === "boolean") {
      return filterFns?.equals;
    }
    if (value !== null && typeof value === "object") {
      return filterFns?.equals;
    }
    if (Array.isArray(value)) {
      return filterFns?.arrIncludes;
    }
    return filterFns?.weakEquals;
  }
  function column_getFilterFn(column) {
    let filterFn = null;
    const filterFns = column._table._rowModelFns.filterFns;
    filterFn = isFunction(column.columnDef.filterFn) ? column.columnDef.filterFn : column.columnDef.filterFn === "auto" ? column_getAutoFilterFn(column) : filterFns?.[column.columnDef.filterFn];
    if (isDev && !filterFn) {
      console.warn(
        `Could not find a valid 'column.filterFn' for column with the ID: ${column.id}.`
      );
    }
    return filterFn;
  }
  function column_getCanFilter(column) {
    return (column.columnDef.enableColumnFilter ?? true) && (column._table.options.enableColumnFilters ?? true) && (column._table.options.enableFilters ?? true) && !!column.accessorFn;
  }
  function column_getIsFiltered(column) {
    return column_getFilterIndex(column) > -1;
  }
  function column_getFilterValue(column) {
    return column._table.options.state?.columnFilters?.find(
      (d4) => d4.id === column.id
    )?.value;
  }
  function column_getFilterIndex(column) {
    return column._table.options.state?.columnFilters?.findIndex(
      (d4) => d4.id === column.id
    ) ?? -1;
  }
  function column_setFilterValue(column, value) {
    table_setColumnFilters(column._table, (old) => {
      const filterFn = column_getFilterFn(column);
      const previousFilter = old.find((d4) => d4.id === column.id);
      const newFilter = functionalUpdate(
        value,
        previousFilter ? previousFilter.value : void 0
      );
      if (shouldAutoRemoveFilter(filterFn, newFilter, column)) {
        return old.filter((d4) => d4.id !== column.id);
      }
      const newFilterObj = { id: column.id, value: newFilter };
      if (previousFilter) {
        return old.map((d4) => {
          if (d4.id === column.id) {
            return newFilterObj;
          }
          return d4;
        });
      }
      if (old.length) {
        return [...old, newFilterObj];
      }
      return [newFilterObj];
    });
  }
  function table_setColumnFilters(table, updater) {
    const leafColumns = table.getAllLeafColumns();
    const updateFn = (old) => {
      return functionalUpdate(updater, old).filter((filter6) => {
        const column = leafColumns.find((d4) => d4.id === filter6.id);
        if (column) {
          const filterFn = column_getFilterFn(column);
          if (shouldAutoRemoveFilter(filterFn, filter6.value, column)) {
            return false;
          }
        }
        return true;
      });
    };
    table.options.onColumnFiltersChange?.(updateFn);
  }
  function table_resetColumnFilters(table, defaultState) {
    table_setColumnFilters(
      table,
      defaultState ? [] : table.initialState.columnFilters ?? []
    );
  }
  function shouldAutoRemoveFilter(filterFn, value, column) {
    return (filterFn && filterFn.autoRemove ? filterFn.autoRemove(
      value,
      column
    ) : false) || typeof value === "undefined" || typeof value === "string" && !value;
  }

  // ../vendor/table-core/features/column-filtering/columnFilteringFeature.ts
  function constructColumnFilteringFeature() {
    return {
      getInitialState: (initialState) => {
        return {
          columnFilters: getDefaultColumnFiltersState(),
          ...initialState
        };
      },
      getDefaultColumnDef: () => {
        return {
          filterFn: "auto"
        };
      },
      getDefaultTableOptions: (table) => {
        return {
          onColumnFiltersChange: makeStateUpdater("columnFilters", table),
          filterFromLeafRows: false,
          maxLeafRowFilterDepth: 100
        };
      },
      constructColumnAPIs: (column) => {
        assignAPIs("columnFilteringFeature", column, [
          {
            fn: () => column_getAutoFilterFn(column),
            fnName: "column_getAutoFilterFn"
          },
          {
            fn: () => column_getFilterFn(column),
            fnName: "column_getFilterFn"
          },
          {
            fn: () => column_getCanFilter(column),
            fnName: "column_getCanFilter"
          },
          {
            fn: () => column_getIsFiltered(column),
            fnName: "column_getIsFiltered"
          },
          {
            fn: () => column_getFilterValue(column),
            fnName: "column_getFilterValue"
          },
          {
            fn: () => column_getFilterIndex(column),
            fnName: "column_getFilterIndex"
          },
          {
            fn: (value) => column_setFilterValue(column, value),
            fnName: "column_setFilterValue"
          }
        ]);
      },
      constructRowAPIs: (row) => {
        ;
        row.columnFilters = {};
        row.columnFiltersMeta = {};
      },
      constructTableAPIs: (table) => {
        assignAPIs("columnFilteringFeature", table, [
          {
            fn: (updater) => table_setColumnFilters(table, updater),
            fnName: "table_setColumnFilters"
          },
          {
            fn: (defaultState) => table_resetColumnFilters(table, defaultState),
            fnName: "table_resetColumnFilters"
          }
        ]);
      }
    };
  }
  var columnFilteringFeature = constructColumnFilteringFeature();

  // ../vendor/table-core/features/column-grouping/columnGroupingFeature.utils.ts
  function getDefaultGroupingState() {
    return structuredClone([]);
  }
  function column_toggleGrouping(column) {
    table_setGrouping(column._table, (old) => {
      if (old.includes(column.id)) {
        return old.filter((d4) => d4 !== column.id);
      }
      return [...old, column.id];
    });
  }
  function column_getCanGroup(column) {
    return (column.columnDef.enableGrouping ?? true) && (column._table.options.enableGrouping ?? true) && (!!column.accessorFn || !!column.columnDef.getGroupingValue);
  }
  function column_getIsGrouped(column) {
    return !!column._table.options.state?.grouping?.includes(column.id);
  }
  function column_getGroupedIndex(column) {
    return column._table.options.state?.grouping?.indexOf(column.id) ?? -1;
  }
  function column_getToggleGroupingHandler(column) {
    const canGroup = column_getCanGroup(column);
    return () => {
      if (!canGroup)
        return;
      column_toggleGrouping(column);
    };
  }
  function column_getAutoAggregationFn(column) {
    const aggregationFns = column._table._rowModelFns.aggregationFns;
    const firstRow = column._table.getCoreRowModel().flatRows[0];
    const value = firstRow?.getValue(column.id);
    if (typeof value === "number") {
      return aggregationFns?.sum;
    }
    if (Object.prototype.toString.call(value) === "[object Date]") {
      return aggregationFns?.extent;
    }
  }
  function column_getAggregationFn(column) {
    const aggregationFns = column._table._rowModelFns.aggregationFns;
    return isFunction(column.columnDef.aggregationFn) ? column.columnDef.aggregationFn : column.columnDef.aggregationFn === "auto" ? column_getAutoAggregationFn(column) : aggregationFns?.[column.columnDef.aggregationFn];
  }
  function table_setGrouping(table, updater) {
    table.options.onGroupingChange?.(updater);
  }
  function table_resetGrouping(table, defaultState) {
    table_setGrouping(
      table,
      defaultState ? [] : table.initialState.grouping ?? []
    );
  }
  function row_getIsGrouped(row) {
    return !!row.groupingColumnId;
  }
  function row_getGroupingValue(row, columnId) {
    if (row._groupingValuesCache?.hasOwnProperty(columnId)) {
      return row._groupingValuesCache[columnId];
    }
    const column = table_getColumn(row._table, columnId);
    if (!column.columnDef.getGroupingValue) {
      return row.getValue(columnId);
    }
    if (row._groupingValuesCache) {
      row._groupingValuesCache[columnId] = column.columnDef.getGroupingValue(
        row.original
      );
    }
    return row._groupingValuesCache?.[columnId];
  }
  function cell_getIsGrouped(cell) {
    const row = cell.row;
    return column_getIsGrouped(cell.column) && cell.column.id === row.groupingColumnId;
  }
  function cell_getIsPlaceholder(cell) {
    return !cell_getIsGrouped(cell) && column_getIsGrouped(cell.column);
  }
  function cell_getIsAggregated(cell) {
    return !cell_getIsGrouped(cell) && !cell_getIsPlaceholder(cell) && !!cell.row.subRows.length;
  }

  // ../vendor/table-core/features/column-grouping/columnGroupingFeature.ts
  function constructColumnGroupingFeature() {
    return {
      getInitialState: (initialState) => {
        return {
          grouping: getDefaultGroupingState(),
          ...initialState
        };
      },
      getDefaultColumnDef: () => {
        return {
          aggregatedCell: ({ getValue }) => getValue()?.toString?.() ?? null,
          aggregationFn: "auto"
        };
      },
      getDefaultTableOptions: (table) => {
        return {
          onGroupingChange: makeStateUpdater("grouping", table),
          groupedColumnMode: "reorder"
        };
      },
      constructCellAPIs: (cell) => {
        assignAPIs("columnGroupingFeature", cell, [
          {
            fn: () => cell_getIsGrouped(cell),
            fnName: "cell_getIsGrouped"
          },
          {
            fn: () => cell_getIsPlaceholder(cell),
            fnName: "cell_getIsPlaceholder"
          },
          {
            fn: () => cell_getIsAggregated(cell),
            fnName: "cell_getIsAggregated"
          }
        ]);
      },
      constructColumnAPIs: (column) => {
        assignAPIs("columnGroupingFeature", column, [
          {
            fn: () => column_toggleGrouping(column),
            fnName: "column_toggleGrouping"
          },
          {
            fn: () => column_getCanGroup(column),
            fnName: "column_getCanGroup"
          },
          {
            fn: () => column_getIsGrouped(column),
            fnName: "column_getIsGrouped"
          },
          {
            fn: () => column_getGroupedIndex(column),
            fnName: "column_getGroupedIndex"
          },
          {
            fn: () => column_getToggleGroupingHandler(column),
            fnName: "column_getToggleGroupingHandler"
          },
          {
            fn: () => column_getAutoAggregationFn(column),
            fnName: "column_getAutoAggregationFn"
          },
          {
            fn: () => column_getAggregationFn(column),
            fnName: "column_getAggregationFn"
          }
        ]);
      },
      constructRowAPIs: (row) => {
        ;
        row._groupingValuesCache = {};
        assignAPIs("columnGroupingFeature", row, [
          {
            fn: () => row_getIsGrouped(row),
            fnName: "row_getIsGrouped"
          },
          {
            fn: (columnId) => row_getGroupingValue(row, columnId),
            fnName: "row_getGroupingValue"
          }
        ]);
      },
      constructTableAPIs: (table) => {
        assignAPIs("columnGroupingFeature", table, [
          {
            fn: (updater) => table_setGrouping(table, updater),
            fnName: "table_setGrouping"
          },
          {
            fn: (defaultState) => table_resetGrouping(table, defaultState),
            fnName: "table_resetGrouping"
          }
        ]);
      }
    };
  }
  var columnGroupingFeature = constructColumnGroupingFeature();

  // ../vendor/table-core/features/column-ordering/columnOrderingFeature.ts
  function constructColumnOrderingFeature() {
    return {
      getInitialState: (initialState) => {
        return {
          columnOrder: getDefaultColumnOrderState(),
          ...initialState
        };
      },
      getDefaultTableOptions: (table) => {
        return {
          onColumnOrderChange: makeStateUpdater("columnOrder", table)
        };
      },
      constructColumnAPIs: (column) => {
        assignAPIs("columnOrderingFeature", column, [
          {
            fn: (position) => column_getIndex(column, position),
            fnName: "column_getIndex",
            memoDeps: (position) => [
              position,
              column._table.options.state?.columnOrder,
              column._table.options.state?.columnPinning,
              column._table.options.state?.grouping
            ]
          },
          {
            fn: (position) => column_getIsFirstColumn(column, position),
            fnName: "column_getIsFirstColumn"
          },
          {
            fn: (position) => column_getIsLastColumn(column, position),
            fnName: "column_getIsLastColumn"
          }
        ]);
      },
      constructTableAPIs: (table) => {
        assignAPIs("columnOrderingFeature", table, [
          {
            fn: (updater) => table_setColumnOrder(table, updater),
            fnName: "table_setColumnOrder"
          },
          {
            fn: (defaultState) => table_resetColumnOrder(table, defaultState),
            fnName: "table_resetColumnOrder"
          },
          {
            fn: () => table_getOrderColumnsFn(table),
            fnName: "table_getOrderColumnsFn",
            memoDeps: () => [
              table.options.state?.columnOrder,
              table.options.state?.grouping,
              table.options.groupedColumnMode
            ]
          }
        ]);
      }
    };
  }
  var columnOrderingFeature = constructColumnOrderingFeature();

  // ../vendor/table-core/features/column-pinning/columnPinningFeature.ts
  function constructColumnPinningFeature() {
    return {
      getInitialState: (initialState) => {
        return {
          columnPinning: {
            ...getDefaultColumnPinningState(),
            ...initialState.columnPinning
          }
        };
      },
      getDefaultTableOptions: (table) => {
        return {
          onColumnPinningChange: makeStateUpdater("columnPinning", table)
        };
      },
      constructColumnAPIs: (column) => {
        assignAPIs("columnPinningFeature", column, [
          {
            fn: (position) => column_pin(column, position),
            fnName: "column_pin"
          },
          {
            fn: () => column_getCanPin(column),
            fnName: "column_getCanPin"
          },
          {
            fn: () => column_getPinnedIndex(column),
            fnName: "column_getPinnedIndex"
          },
          {
            fn: () => column_getIsPinned(column),
            fnName: "column_getIsPinned"
          }
        ]);
      },
      constructRowAPIs: (row) => {
        assignAPIs("columnPinningFeature", row, [
          {
            fn: () => row_getCenterVisibleCells(row),
            fnName: "row_getCenterVisibleCells",
            memoDeps: () => [
              row.getAllCells(),
              row._table.options.state?.columnPinning,
              row._table.options.state?.columnVisibility
            ]
          },
          {
            fn: () => row_getLeftVisibleCells(row),
            fnName: "row_getLeftVisibleCells",
            memoDeps: () => [
              row.getAllCells(),
              row._table.options.state?.columnPinning?.left,
              row._table.options.state?.columnVisibility
            ]
          },
          {
            fn: () => row_getRightVisibleCells(row),
            fnName: "row_getRightVisibleCells",
            memoDeps: () => [
              row.getAllCells(),
              row._table.options.state?.columnPinning?.right,
              row._table.options.state?.columnVisibility
            ]
          }
        ]);
      },
      constructTableAPIs: (table) => {
        assignAPIs("columnPinningFeature", table, [
          {
            fn: (updater) => table_setColumnPinning(table, updater),
            fnName: "table_setColumnPinning"
          },
          {
            fn: (defaultState) => table_resetColumnPinning(table, defaultState),
            fnName: "table_resetColumnPinning"
          },
          {
            fn: (position) => table_getIsSomeColumnsPinned(table, position),
            fnName: "table_getIsSomeColumnsPinned"
          },
          // header groups
          {
            fn: () => table_getLeftHeaderGroups(table),
            fnName: "table_getLeftHeaderGroups",
            memoDeps: () => [
              table.getAllColumns(),
              callMemoOrStaticFn(
                table,
                "getVisibleLeafColumns",
                table_getVisibleLeafColumns
              ),
              table.options.state?.columnPinning?.left
            ]
          },
          {
            fn: () => table_getCenterHeaderGroups(table),
            fnName: "table_getCenterHeaderGroups",
            memoDeps: () => [
              table.getAllColumns(),
              callMemoOrStaticFn(
                table,
                "getVisibleLeafColumns",
                table_getVisibleLeafColumns
              ),
              table.options.state?.columnPinning
            ]
          },
          {
            fn: () => table_getRightHeaderGroups(table),
            fnName: "table_getRightHeaderGroups",
            memoDeps: () => [
              table.getAllColumns(),
              callMemoOrStaticFn(
                table,
                "getVisibleLeafColumns",
                table_getVisibleLeafColumns
              ),
              table.options.state?.columnPinning?.right
            ]
          },
          // footer groups
          {
            fn: () => table_getLeftFooterGroups(table),
            fnName: "table_getLeftFooterGroups",
            memoDeps: () => [
              callMemoOrStaticFn(
                table,
                "getLeftHeaderGroups",
                table_getLeftHeaderGroups
              )
            ]
          },
          {
            fn: () => table_getCenterFooterGroups(table),
            fnName: "table_getCenterFooterGroups",
            memoDeps: () => [
              callMemoOrStaticFn(
                table,
                "getCenterHeaderGroups",
                table_getCenterHeaderGroups
              )
            ]
          },
          {
            fn: () => table_getRightFooterGroups(table),
            fnName: "table_getRightFooterGroups",
            memoDeps: () => [
              callMemoOrStaticFn(
                table,
                "getRightHeaderGroups",
                table_getRightHeaderGroups
              )
            ]
          },
          // flat headers
          {
            fn: () => table_getLeftFlatHeaders(table),
            fnName: "table_getLeftFlatHeaders",
            memoDeps: () => [
              callMemoOrStaticFn(
                table,
                "getLeftHeaderGroups",
                table_getLeftHeaderGroups
              )
            ]
          },
          {
            fn: () => table_getRightFlatHeaders(table),
            fnName: "table_getRightFlatHeaders",
            memoDeps: () => [
              callMemoOrStaticFn(
                table,
                "getRightHeaderGroups",
                table_getRightHeaderGroups
              )
            ]
          },
          {
            fn: () => table_getCenterFlatHeaders(table),
            fnName: "table_getCenterFlatHeaders",
            memoDeps: () => [
              callMemoOrStaticFn(
                table,
                "getCenterHeaderGroups",
                table_getCenterHeaderGroups
              )
            ]
          },
          // leaf headers
          {
            fn: () => table_getLeftLeafHeaders(table),
            fnName: "table_getLeftLeafHeaders",
            memoDeps: () => [
              callMemoOrStaticFn(
                table,
                "getLeftHeaderGroups",
                table_getLeftHeaderGroups
              )
            ]
          },
          {
            fn: () => table_getRightLeafHeaders(table),
            fnName: "table_getRightLeafHeaders",
            memoDeps: () => [
              callMemoOrStaticFn(
                table,
                "getRightHeaderGroups",
                table_getRightHeaderGroups
              )
            ]
          },
          {
            fn: () => table_getCenterLeafHeaders(table),
            fnName: "table_getCenterLeafHeaders",
            memoDeps: () => [
              callMemoOrStaticFn(
                table,
                "getCenterHeaderGroups",
                table_getCenterHeaderGroups
              )
            ]
          },
          // leaf columns
          {
            fn: () => table_getLeftLeafColumns(table),
            fnName: "table_getLeftLeafColumns",
            memoDeps: () => [
              table.options.columns,
              table.options.state?.columnPinning
            ]
          },
          {
            fn: () => table_getRightLeafColumns(table),
            fnName: "table_getRightLeafColumns",
            memoDeps: () => [
              table.options.columns,
              table.options.state?.columnPinning
            ]
          },
          {
            fn: () => table_getCenterLeafColumns(table),
            fnName: "table_getCenterLeafColumns",
            memoDeps: () => [
              table.options.columns,
              table.options.state?.columnPinning
            ]
          },
          // visible leaf columns
          {
            fn: () => table_getLeftVisibleLeafColumns(table),
            fnName: "table_getLeftVisibleLeafColumns",
            memoDeps: () => [
              table.options.columns,
              table.options.state?.columnPinning,
              table.options.state?.columnVisibility
            ]
          },
          {
            fn: () => table_getCenterVisibleLeafColumns(table),
            fnName: "table_getCenterVisibleLeafColumns",
            memoDeps: () => [
              table.options.columns,
              table.options.state?.columnPinning,
              table.options.state?.columnVisibility
            ]
          },
          {
            fn: () => table_getRightVisibleLeafColumns(table),
            fnName: "table_getRightVisibleLeafColumns",
            memoDeps: () => [
              table.options.columns,
              table.options.state?.columnPinning,
              table.options.state?.columnVisibility
            ]
          }
        ]);
      }
    };
  }
  var columnPinningFeature = constructColumnPinningFeature();

  // ../vendor/table-core/features/column-sizing/columnSizingFeature.utils.ts
  function getDefaultColumnSizingState() {
    return structuredClone({});
  }
  function getDefaultColumnSizingColumnDef() {
    return structuredClone({
      size: 150,
      minSize: 20,
      maxSize: Number.MAX_SAFE_INTEGER
    });
  }
  function column_getSize(column) {
    const defaultSizes = getDefaultColumnSizingColumnDef();
    const columnSize = column._table.options.state?.columnSizing?.[column.id];
    return Math.min(
      Math.max(
        column.columnDef.minSize ?? defaultSizes.minSize,
        columnSize ?? column.columnDef.size ?? defaultSizes.size
      ),
      column.columnDef.maxSize ?? defaultSizes.maxSize
    );
  }
  function column_getStart(column, position) {
    const { _table: table } = column;
    const visibleLeafColumns = callMemoOrStaticFn(
      table,
      "getPinnedVisibleLeafColumns",
      table_getPinnedVisibleLeafColumns,
      position
    );
    return visibleLeafColumns.slice(0, callMemoOrStaticFn(column, "getIndex", column_getIndex, position)).reduce((sum, c4) => sum + column_getSize(c4), 0);
  }
  function column_getAfter(column, position) {
    const { _table: table } = column;
    const visibleLeafColumns = callMemoOrStaticFn(
      table,
      "getPinnedVisibleLeafColumns",
      table_getPinnedVisibleLeafColumns,
      position
    );
    return visibleLeafColumns.slice(
      callMemoOrStaticFn(column, "getIndex", column_getIndex, position) + 1
    ).reduce((sum, c4) => sum + column_getSize(c4), 0);
  }
  function column_resetSize(column) {
    table_setColumnSizing(column._table, ({ [column.id]: _3, ...rest3 }) => {
      return rest3;
    });
  }
  function header_getSize(header) {
    let sum = 0;
    const recurse = (h4) => {
      if (h4.subHeaders.length) {
        h4.subHeaders.forEach(recurse);
      } else {
        sum += column_getSize(h4.column);
      }
    };
    recurse(header);
    return sum;
  }
  function header_getStart(header) {
    if (header.index > 0) {
      const prevSiblingHeader = header.headerGroup?.headers[header.index - 1];
      if (prevSiblingHeader) {
        return header_getStart(prevSiblingHeader) + header_getSize(prevSiblingHeader);
      }
    }
    return 0;
  }
  function table_setColumnSizing(table, updater) {
    table.options.onColumnSizingChange?.(updater);
  }
  function table_resetColumnSizing(table, defaultState) {
    table_setColumnSizing(
      table,
      defaultState ? {} : table.initialState.columnSizing ?? {}
    );
  }
  function table_getTotalSize(table) {
    return table.getHeaderGroups()[0]?.headers.reduce((sum, header) => {
      return sum + header_getSize(header);
    }, 0) ?? 0;
  }
  function table_getLeftTotalSize(table) {
    return callMemoOrStaticFn(
      table,
      "getLeftHeaderGroups",
      table_getLeftHeaderGroups
    )[0]?.headers.reduce((sum, header) => {
      return sum + header_getSize(header);
    }, 0) ?? 0;
  }
  function table_getCenterTotalSize(table) {
    return callMemoOrStaticFn(
      table,
      "getCenterHeaderGroups",
      table_getCenterHeaderGroups
    )[0]?.headers.reduce((sum, header) => {
      return sum + header_getSize(header);
    }, 0) ?? 0;
  }
  function table_getRightTotalSize(table) {
    return callMemoOrStaticFn(
      table,
      "getRightHeaderGroups",
      table_getRightHeaderGroups
    )[0]?.headers.reduce((sum, header) => {
      return sum + header_getSize(header);
    }, 0) ?? 0;
  }

  // ../vendor/table-core/features/column-resizing/columnResizingFeature.utils.ts
  function getDefaultColumnResizingState() {
    return structuredClone({
      startOffset: null,
      startSize: null,
      deltaOffset: null,
      deltaPercentage: null,
      isResizingColumn: false,
      columnSizingStart: []
    });
  }
  function column_getCanResize(column) {
    return (column.columnDef.enableResizing ?? true) && (column._table.options.enableColumnResizing ?? true);
  }
  function column_getIsResizing(column) {
    return column._table.options.state?.columnResizing?.isResizingColumn === column.id;
  }
  function header_getResizeHandler(header, _contextDocument) {
    const column = table_getColumn(header.column._table, header.column.id);
    const canResize = column_getCanResize(column);
    return (event) => {
      if (!canResize) {
        return;
      }
      ;
      event.persist?.();
      if (isTouchStartEvent(event)) {
        if (event.touches.length > 1) {
          return;
        }
      }
      const startSize = header_getSize(header);
      const columnSizingStart = header.getLeafHeaders().map((leafHeader) => [
        leafHeader.column.id,
        column_getSize(leafHeader.column)
      ]);
      const clientX = isTouchStartEvent(event) ? Math.round(event.touches[0].clientX) : event.clientX;
      const newColumnSizing = {};
      const updateOffset = (eventType, clientXPos) => {
        if (typeof clientXPos !== "number") {
          return;
        }
        table_setColumnResizing(column._table, (old) => {
          const deltaDirection = column._table.options.columnResizeDirection === "rtl" ? -1 : 1;
          const deltaOffset = (clientXPos - (old.startOffset ?? 0)) * deltaDirection;
          const deltaPercentage = Math.max(
            deltaOffset / (old.startSize ?? 0),
            -0.999999
          );
          old.columnSizingStart.forEach(([columnId, headerSize]) => {
            newColumnSizing[columnId] = Math.round(
              Math.max(headerSize + headerSize * deltaPercentage, 0) * 100
            ) / 100;
          });
          return {
            ...old,
            deltaOffset,
            deltaPercentage
          };
        });
        if (column._table.options.columnResizeMode === "onChange" || eventType === "end") {
          table_setColumnSizing(column._table, (old) => ({
            ...old,
            ...newColumnSizing
          }));
        }
      };
      const onMove = (clientXPos) => updateOffset("move", clientXPos);
      const onEnd = (clientXPos) => {
        updateOffset("end", clientXPos);
        table_setColumnResizing(column._table, (old) => ({
          ...old,
          isResizingColumn: false,
          startOffset: null,
          startSize: null,
          deltaOffset: null,
          deltaPercentage: null,
          columnSizingStart: []
        }));
      };
      const contextDocument = _contextDocument || typeof document !== "undefined" ? document : null;
      const mouseEvents = {
        moveHandler: (e6) => onMove(e6.clientX),
        upHandler: (e6) => {
          contextDocument?.removeEventListener(
            "mousemove",
            mouseEvents.moveHandler
          );
          contextDocument?.removeEventListener("mouseup", mouseEvents.upHandler);
          onEnd(e6.clientX);
        }
      };
      const touchEvents = {
        moveHandler: (touchEvent) => {
          if (touchEvent.cancelable) {
            touchEvent.preventDefault();
            touchEvent.stopPropagation();
          }
          onMove(touchEvent.touches[0].clientX);
          return false;
        },
        upHandler: (e6) => {
          contextDocument?.removeEventListener(
            "touchmove",
            touchEvents.moveHandler
          );
          contextDocument?.removeEventListener("touchend", touchEvents.upHandler);
          if (e6.cancelable) {
            e6.preventDefault();
            e6.stopPropagation();
          }
          onEnd(e6.touches[0]?.clientX);
        }
      };
      const passiveIfSupported = passiveEventSupported() ? { passive: false } : false;
      if (isTouchStartEvent(event)) {
        contextDocument?.addEventListener(
          "touchmove",
          touchEvents.moveHandler,
          passiveIfSupported
        );
        contextDocument?.addEventListener(
          "touchend",
          touchEvents.upHandler,
          passiveIfSupported
        );
      } else {
        contextDocument?.addEventListener(
          "mousemove",
          mouseEvents.moveHandler,
          passiveIfSupported
        );
        contextDocument?.addEventListener(
          "mouseup",
          mouseEvents.upHandler,
          passiveIfSupported
        );
      }
      table_setColumnResizing(column._table, (old) => ({
        ...old,
        startOffset: clientX,
        startSize,
        deltaOffset: 0,
        deltaPercentage: 0,
        columnSizingStart,
        isResizingColumn: column.id
      }));
    };
  }
  function table_setColumnResizing(table, updater) {
    table.options.onColumnResizingChange?.(updater);
  }
  function table_resetHeaderSizeInfo(table, defaultState) {
    table_setColumnResizing(
      table,
      defaultState ? getDefaultColumnResizingState() : table.initialState.columnResizing ?? getDefaultColumnResizingState()
    );
  }
  function passiveEventSupported() {
    let passiveSupported = null;
    if (typeof passiveSupported === "boolean")
      return passiveSupported;
    let supported = false;
    try {
      const options = {
        get passive() {
          supported = true;
          return false;
        }
      };
      const noop3 = () => {
      };
      window.addEventListener("test", noop3, options);
      window.removeEventListener("test", noop3);
    } catch (err) {
      supported = false;
    }
    passiveSupported = supported;
    return passiveSupported;
  }
  function isTouchStartEvent(e6) {
    return e6.type === "touchstart";
  }

  // ../vendor/table-core/features/column-resizing/columnResizingFeature.ts
  function constructColumnResizingFeature() {
    return {
      getInitialState: (initialState) => {
        return {
          columnResizing: getDefaultColumnResizingState(),
          ...initialState
        };
      },
      getDefaultTableOptions: (table) => {
        return {
          columnResizeMode: "onEnd",
          columnResizeDirection: "ltr",
          onColumnResizingChange: makeStateUpdater("columnResizing", table)
        };
      },
      constructColumnAPIs: (column) => {
        assignAPIs("columnResizingFeature", column, [
          {
            fn: () => column_getCanResize(column),
            fnName: "column_getCanResize"
          },
          {
            fn: () => column_getIsResizing(column),
            fnName: "column_getIsResizing"
          }
        ]);
      },
      constructHeaderAPIs: (header) => {
        assignAPIs("columnResizingFeature", header, [
          {
            fn: (_contextDocument) => header_getResizeHandler(header, _contextDocument),
            fnName: "header_getResizeHandler"
          }
        ]);
      },
      constructTableAPIs: (table) => {
        assignAPIs("columnResizingFeature", table, [
          {
            fn: (updater) => table_setColumnResizing(table, updater),
            fnName: "table_setColumnResizing"
          },
          {
            fn: (defaultState) => table_resetHeaderSizeInfo(table, defaultState),
            fnName: "table_resetHeaderSizeInfo"
          }
        ]);
      }
    };
  }
  var columnResizingFeature = constructColumnResizingFeature();

  // ../vendor/table-core/features/column-sizing/columnSizingFeature.ts
  function constructColumnSizingFeature() {
    return {
      getInitialState: (initialState) => {
        return {
          columnSizing: getDefaultColumnSizingState(),
          ...initialState
        };
      },
      getDefaultColumnDef: () => {
        return getDefaultColumnSizingColumnDef();
      },
      getDefaultTableOptions: (table) => {
        return {
          onColumnSizingChange: makeStateUpdater("columnSizing", table)
        };
      },
      constructColumnAPIs: (column) => {
        assignAPIs("columnSizingFeature", column, [
          {
            fn: () => column_getSize(column),
            fnName: "column_getSize"
          },
          {
            fn: (position) => column_getStart(column, position),
            fnName: "column_getStart",
            memoDeps: (position) => [
              position,
              callMemoOrStaticFn(
                column._table,
                "getPinnedVisibleLeafColumns",
                table_getPinnedVisibleLeafColumns,
                position
              ),
              column._table.options.state?.columnSizing
            ]
          },
          {
            fn: (position) => column_getAfter(column, position),
            fnName: "column_getAfter",
            memoDeps: (position) => [
              position,
              callMemoOrStaticFn(
                column._table,
                "getPinnedVisibleLeafColumns",
                table_getPinnedVisibleLeafColumns,
                position
              ),
              column._table.options.state?.columnSizing
            ]
          },
          {
            fn: () => column_resetSize(column),
            fnName: "column_resetSize"
          }
        ]);
      },
      constructHeaderAPIs: (header) => {
        assignAPIs("columnSizingFeature", header, [
          {
            fn: () => header_getSize(header),
            fnName: "header_getSize"
          },
          {
            fn: () => header_getStart(header),
            fnName: "header_getStart"
          }
        ]);
      },
      constructTableAPIs: (table) => {
        assignAPIs("columnSizingFeature", table, [
          {
            fn: (updater) => table_setColumnSizing(table, updater),
            fnName: "table_setColumnSizing"
          },
          {
            fn: (defaultState) => table_resetColumnSizing(table, defaultState),
            fnName: "table_resetColumnSizing"
          },
          {
            fn: () => table_getTotalSize(table),
            fnName: "table_getTotalSize"
          },
          {
            fn: () => table_getLeftTotalSize(table),
            fnName: "table_getLeftTotalSize"
          },
          {
            fn: () => table_getCenterTotalSize(table),
            fnName: "table_getCenterTotalSize"
          },
          {
            fn: () => table_getRightTotalSize(table),
            fnName: "table_getRightTotalSize"
          }
        ]);
      }
    };
  }
  var columnSizingFeature = constructColumnSizingFeature();

  // ../vendor/table-core/features/column-visibility/columnVisibilityFeature.ts
  function constructColumnVisibilityFeature() {
    return {
      getInitialState: (initialState) => {
        return {
          columnVisibility: getDefaultColumnVisibilityState(),
          ...initialState
        };
      },
      getDefaultTableOptions: (table) => {
        return {
          onColumnVisibilityChange: makeStateUpdater("columnVisibility", table)
        };
      },
      constructColumnAPIs: (column) => {
        assignAPIs("columnVisibilityFeature", column, [
          {
            fn: () => column_getIsVisible(column),
            fnName: "column_getIsVisible",
            memoDeps: () => [
              column._table.options.columns,
              column._table.options.state?.columnVisibility,
              column.columns
            ]
          },
          {
            fn: () => column_getCanHide(column),
            fnName: "column_getCanHide"
          },
          {
            fn: () => column_getToggleVisibilityHandler(column),
            fnName: "column_getToggleVisibilityHandler"
          },
          {
            fn: (visible) => column_toggleVisibility(column, visible),
            fnName: "column_toggleVisibility"
          }
        ]);
      },
      constructRowAPIs: (row) => {
        assignAPIs("columnVisibilityFeature", row, [
          {
            fn: () => row_getAllVisibleCells(row),
            fnName: "row_getAllVisibleCells",
            memoDeps: () => [
              row.getAllCells(),
              row._table.options.state?.columnVisibility
            ]
          },
          {
            fn: (left2, center2, right2) => row_getVisibleCells(left2, center2, right2),
            fnName: "row_getVisibleCells",
            memoDeps: () => [
              row_getLeftVisibleCells(row),
              row_getCenterVisibleCells(row),
              row_getRightVisibleCells(row)
            ]
          }
        ]);
      },
      constructTableAPIs: (table) => {
        assignAPIs("columnVisibilityFeature", table, [
          {
            fn: () => table_getVisibleFlatColumns(table),
            fnName: "table_getVisibleFlatColumns",
            memoDeps: () => [
              table.options.state?.columnVisibility,
              table.options.columns
            ]
          },
          {
            fn: () => table_getVisibleLeafColumns(table),
            fnName: "table_getVisibleLeafColumns",
            memoDeps: () => [
              table.options.state?.columnVisibility,
              table.options.columns
            ]
          },
          {
            fn: (updater) => table_setColumnVisibility(table, updater),
            fnName: "table_setColumnVisibility"
          },
          {
            fn: (defaultState) => table_resetColumnVisibility(table, defaultState),
            fnName: "table_resetColumnVisibility"
          },
          {
            fn: (value) => table_toggleAllColumnsVisible(table, value),
            fnName: "table_toggleAllColumnsVisible"
          },
          {
            fn: () => table_getIsAllColumnsVisible(table),
            fnName: "table_getIsAllColumnsVisible"
          },
          {
            fn: () => table_getIsSomeColumnsVisible(table),
            fnName: "table_getIsSomeColumnsVisible"
          },
          {
            fn: () => table_getToggleAllColumnsVisibilityHandler(table),
            fnName: "table_getToggleAllColumnsVisibilityHandler"
          }
        ]);
      }
    };
  }
  var columnVisibilityFeature = constructColumnVisibilityFeature();

  // ../vendor/table-core/features/global-filtering/globalFilteringFeature.utils.ts
  function column_getCanGlobalFilter(column) {
    const { _table: table } = column;
    return (column.columnDef.enableGlobalFilter ?? true) && (table.options.enableGlobalFilter ?? true) && (table.options.enableFilters ?? true) && (table.options.getColumnCanGlobalFilter?.(column) ?? true) && !!column.accessorFn;
  }
  function table_getGlobalAutoFilterFn() {
    return filterFn_includesString;
  }
  function table_getGlobalFilterFn(table) {
    const { globalFilterFn } = table.options;
    const filterFns = table._rowModelFns.filterFns;
    return isFunction(globalFilterFn) ? globalFilterFn : globalFilterFn === "auto" ? table_getGlobalAutoFilterFn() : filterFns?.[globalFilterFn];
  }
  function table_setGlobalFilter(table, updater) {
    table.options.onGlobalFilterChange?.(updater);
  }
  function table_resetGlobalFilter(table, defaultState) {
    table_setGlobalFilter(
      table,
      defaultState ? void 0 : table.initialState.globalFilter
    );
  }

  // ../vendor/table-core/features/global-filtering/globalFilteringFeature.ts
  function constructGlobalFilteringFeature() {
    return {
      getInitialState: (initialState) => {
        return {
          globalFilter: void 0,
          ...initialState
        };
      },
      getDefaultTableOptions: (table) => {
        return {
          onGlobalFilterChange: makeStateUpdater("globalFilter", table),
          globalFilterFn: "auto",
          getColumnCanGlobalFilter: (column) => {
            const value = table.getCoreRowModel().flatRows[0]?.getAllCellsByColumnId()[column.id]?.getValue();
            return typeof value === "string" || typeof value === "number";
          }
        };
      },
      constructColumnAPIs: (column) => {
        assignAPIs("globalFilteringFeature", column, [
          {
            fn: () => column_getCanGlobalFilter(column),
            fnName: "column_getCanGlobalFilter"
          }
        ]);
      },
      constructTableAPIs: (table) => {
        assignAPIs("globalFilteringFeature", table, [
          {
            fn: () => table_getGlobalAutoFilterFn(),
            fnName: "table_getGlobalAutoFilterFn"
          },
          {
            fn: () => table_getGlobalFilterFn(table),
            fnName: "table_getGlobalFilterFn"
          },
          {
            fn: (updater) => table_setGlobalFilter(table, updater),
            fnName: "table_setGlobalFilter"
          },
          {
            fn: (defaultState) => table_resetGlobalFilter(table, defaultState),
            fnName: "table_resetGlobalFilter"
          }
        ]);
      }
    };
  }
  var globalFilteringFeature = constructGlobalFilteringFeature();

  // ../vendor/table-core/features/row-expanding/rowExpandingFeature.utils.ts
  function getDefaultExpandedState() {
    return structuredClone({});
  }
  function table_autoResetExpanded(table) {
    if (table.options.autoResetAll ?? table.options.autoResetExpanded ?? !table.options.manualExpanding) {
      queueMicrotask(() => table_resetExpanded(table));
    }
  }
  function table_setExpanded(table, updater) {
    table.options.onExpandedChange?.(updater);
  }
  function table_toggleAllRowsExpanded(table, expanded) {
    if (expanded ?? !table_getIsAllRowsExpanded(table)) {
      table_setExpanded(table, true);
    } else {
      table_setExpanded(table, {});
    }
  }
  function table_resetExpanded(table, defaultState) {
    table_setExpanded(
      table,
      defaultState ? {} : table.initialState.expanded ?? {}
    );
  }
  function table_getCanSomeRowsExpand(table) {
    return table.getPrePaginatedRowModel().flatRows.some((row) => row_getCanExpand(row));
  }
  function table_getToggleAllRowsExpandedHandler(table) {
    return (e6) => {
      ;
      e6.persist?.();
      table_toggleAllRowsExpanded(table);
    };
  }
  function table_getIsSomeRowsExpanded(table) {
    const expanded = table.options.state?.expanded ?? {};
    return expanded === true || Object.values(expanded).some(Boolean);
  }
  function table_getIsAllRowsExpanded(table) {
    const expanded = table.options.state?.expanded ?? {};
    if (expanded === true) {
      return true;
    }
    if (!Object.keys(expanded).length) {
      return false;
    }
    if (table.getRowModel().flatRows.some((row) => !row_getIsExpanded(row))) {
      return false;
    }
    return true;
  }
  function table_getExpandedDepth(table) {
    let maxDepth = 0;
    const rowIds = table.options.state?.expanded === true ? Object.keys(table.getRowModel().rowsById) : Object.keys(table.options.state?.expanded ?? {});
    rowIds.forEach((id3) => {
      const splitId = id3.split(".");
      maxDepth = Math.max(maxDepth, splitId.length);
    });
    return maxDepth;
  }
  function row_toggleExpanded(row, expanded) {
    table_setExpanded(row._table, (old) => {
      const exists = old === true ? true : !!old[row.id];
      let oldExpanded = {};
      if (old === true) {
        Object.keys(row._table.getRowModel().rowsById).forEach((rowId) => {
          oldExpanded[rowId] = true;
        });
      } else {
        oldExpanded = old;
      }
      expanded = expanded ?? !exists;
      if (!exists && expanded) {
        return {
          ...oldExpanded,
          [row.id]: true
        };
      }
      if (exists && !expanded) {
        const { [row.id]: _3, ...rest3 } = oldExpanded;
        return rest3;
      }
      return old;
    });
  }
  function row_getIsExpanded(row) {
    const expanded = row._table.options.state?.expanded ?? {};
    return !!(row._table.options.getIsRowExpanded?.(row) ?? (expanded === true || expanded[row.id]));
  }
  function row_getCanExpand(row) {
    return row._table.options.getRowCanExpand?.(row) ?? ((row._table.options.enableExpanding ?? true) && !!row.subRows.length);
  }
  function row_getIsAllParentsExpanded(row) {
    let isFullyExpanded = true;
    let currentRow = row;
    while (isFullyExpanded && currentRow.parentId) {
      currentRow = row._table.getRow(currentRow.parentId, true);
      isFullyExpanded = row_getIsExpanded(row);
    }
    return isFullyExpanded;
  }
  function row_getToggleExpandedHandler(row) {
    const canExpand = row_getCanExpand(row);
    return () => {
      if (!canExpand)
        return;
      row_toggleExpanded(row);
    };
  }

  // ../vendor/table-core/features/row-expanding/rowExpandingFeature.ts
  function constructRowExpandingFeature() {
    return {
      getInitialState: (initialState) => {
        return {
          expanded: getDefaultExpandedState(),
          ...initialState
        };
      },
      getDefaultTableOptions: (table) => {
        return {
          onExpandedChange: makeStateUpdater("expanded", table),
          paginateExpandedRows: true
        };
      },
      constructRowAPIs: (row) => {
        assignAPIs("rowExpandingFeature", row, [
          {
            fn: (expanded) => row_toggleExpanded(row, expanded),
            fnName: "row_toggleExpanded"
          },
          {
            fn: () => row_getIsExpanded(row),
            fnName: "row_getIsExpanded"
          },
          {
            fn: () => row_getCanExpand(row),
            fnName: "row_getCanExpand"
          },
          {
            fn: () => row_getIsAllParentsExpanded(row),
            fnName: "row_getIsAllParentsExpanded"
          },
          {
            fn: () => row_getToggleExpandedHandler(row),
            fnName: "row_getToggleExpandedHandler"
          }
        ]);
      },
      constructTableAPIs: (table) => {
        assignAPIs("rowExpandingFeature", table, [
          {
            fn: () => table_autoResetExpanded(table),
            fnName: "table_autoResetExpanded"
          },
          {
            fn: (updater) => table_setExpanded(table, updater),
            fnName: "table_setExpanded"
          },
          {
            fn: (expanded) => table_toggleAllRowsExpanded(table, expanded),
            fnName: "table_toggleAllRowsExpanded"
          },
          {
            fn: (defaultState) => table_resetExpanded(table, defaultState),
            fnName: "table_resetExpanded"
          },
          {
            fn: () => table_getCanSomeRowsExpand(table),
            fnName: "table_getCanSomeRowsExpand"
          },
          {
            fn: () => table_getToggleAllRowsExpandedHandler(table),
            fnName: "table_getToggleAllRowsExpandedHandler"
          },
          {
            fn: () => table_getIsSomeRowsExpanded(table),
            fnName: "table_getIsSomeRowsExpanded"
          },
          {
            fn: () => table_getIsAllRowsExpanded(table),
            fnName: "table_getIsAllRowsExpanded"
          },
          {
            fn: () => table_getExpandedDepth(table),
            fnName: "table_getExpandedDepth"
          }
        ]);
      }
    };
  }
  var rowExpandingFeature = constructRowExpandingFeature();

  // ../vendor/table-core/features/row-pagination/rowPaginationFeature.ts
  function constructRowPaginationFeature() {
    return {
      getInitialState: (initialState) => {
        return {
          ...initialState,
          pagination: {
            ...getDefaultPaginationState(),
            ...initialState.pagination
          }
        };
      },
      getDefaultTableOptions: (table) => {
        return {
          onPaginationChange: makeStateUpdater("pagination", table)
        };
      },
      constructTableAPIs: (table) => {
        assignAPIs("rowPaginationFeature", table, [
          {
            fn: () => table_autoResetPageIndex(table),
            fnName: "table_autoResetPageIndex"
          },
          {
            fn: (updater) => table_setPagination(table, updater),
            fnName: "table_setPagination"
          },
          {
            fn: (defaultState) => table_resetPagination(table, defaultState),
            fnName: "table_resetPagination"
          },
          {
            fn: (updater) => table_setPageIndex(table, updater),
            fnName: "table_setPageIndex"
          },
          {
            fn: (defaultState) => table_resetPageIndex(table, defaultState),
            fnName: "table_resetPageIndex"
          },
          {
            fn: (updater) => table_setPageSize(table, updater),
            fnName: "table_setPageSize"
          },
          {
            fn: () => table_getPageCount(table),
            fnName: "table_getPageCount"
          },
          {
            fn: (defaultState) => table_resetPageSize(table, defaultState),
            fnName: "table_resetPageSize"
          },
          {
            fn: () => table_getPageOptions(table),
            fnName: "table_getPageOptions"
          },
          {
            fn: () => table_getCanPreviousPage(table),
            fnName: "table_getCanPreviousPage"
          },
          {
            fn: () => table_getCanNextPage(table),
            fnName: "table_getCanNextPage"
          },
          {
            fn: () => table_previousPage(table),
            fnName: "table_previousPage"
          },
          {
            fn: () => table_nextPage(table),
            fnName: "table_nextPage"
          },
          {
            fn: () => table_firstPage(table),
            fnName: "table_firstPage"
          },
          {
            fn: () => table_lastPage(table),
            fnName: "table_lastPage"
          },
          {
            fn: () => table_getPageCount(table),
            fnName: "table_getPageCount"
          },
          {
            fn: () => table_getRowCount(table),
            fnName: "table_getRowCount"
          }
        ]);
      }
    };
  }
  var rowPaginationFeature = constructRowPaginationFeature();

  // ../vendor/table-core/features/row-pinning/rowPinningFeature.utils.ts
  function getDefaultRowPinningState() {
    return structuredClone({
      top: [],
      bottom: []
    });
  }
  function table_setRowPinning(table, updater) {
    table.options.onRowPinningChange?.(updater);
  }
  function table_resetRowPinning(table, defaultState) {
    table_setRowPinning(
      table,
      defaultState ? getDefaultRowPinningState() : table.initialState.rowPinning ?? getDefaultRowPinningState()
    );
  }
  function table_getIsSomeRowsPinned(table, position) {
    const rowPinning = table.options.state?.rowPinning;
    if (!position) {
      return Boolean(rowPinning?.top.length || rowPinning?.bottom.length);
    }
    return Boolean(rowPinning?.[position].length);
  }
  function table_getPinnedRows(table, position) {
    const visibleRows = table.getRowModel().rows;
    const pinnedRowIds = table.options.state?.rowPinning?.[position] ?? [];
    const rows = table.options.keepPinnedRows ?? true ? (
      // get all rows that are pinned even if they would not be otherwise visible
      // account for expanded parent rows, but not pagination or filtering
      pinnedRowIds.map((rowId) => {
        const row = table.getRow(rowId, true);
        return row_getIsAllParentsExpanded(row) ? row : null;
      })
    ) : (
      // else get only visible rows that are pinned
      pinnedRowIds.map(
        (rowId) => visibleRows.find((row) => row.id === rowId)
      )
    );
    return rows.filter((r4) => !!r4).map((d4) => ({ ...d4, position }));
  }
  function table_getTopRows(table) {
    return table_getPinnedRows(table, "top");
  }
  function table_getBottomRows(table) {
    return table_getPinnedRows(table, "bottom");
  }
  function table_getCenterRows(table) {
    const { top: top2, bottom: bottom2 } = table.options.state?.rowPinning ?? getDefaultRowPinningState();
    const allRows = table.getRowModel().rows;
    const topAndBottom = /* @__PURE__ */ new Set([...top2, ...bottom2]);
    return allRows.filter((d4) => !topAndBottom.has(d4.id));
  }
  function row_getCanPin(row) {
    const { enableRowPinning } = row._table.options;
    if (typeof enableRowPinning === "function") {
      return enableRowPinning(row);
    }
    return enableRowPinning ?? true;
  }
  function row_getIsPinned(row) {
    const { top: top2, bottom: bottom2 } = row._table.options.state?.rowPinning ?? getDefaultRowPinningState();
    return top2.includes(row.id) ? "top" : bottom2.includes(row.id) ? "bottom" : false;
  }
  function row_getPinnedIndex(row) {
    const position = row_getIsPinned(row);
    if (!position)
      return -1;
    const visiblePinnedRowIds = (position === "top" ? callMemoOrStaticFn(row._table, "getTopRows", table_getTopRows) : callMemoOrStaticFn(row._table, "getBottomRows", table_getBottomRows)).map(({ id: id3 }) => id3);
    return visiblePinnedRowIds.indexOf(row.id);
  }
  function row_pin(row, position, includeLeafRows, includeParentRows) {
    const leafRowIds = includeLeafRows ? row.getLeafRows().map(({ id: id3 }) => id3) : [];
    const parentRowIds = includeParentRows ? row.getParentRows().map(({ id: id3 }) => id3) : [];
    const rowIds = /* @__PURE__ */ new Set([...parentRowIds, row.id, ...leafRowIds]);
    table_setRowPinning(row._table, (old) => {
      if (position === "bottom") {
        return {
          top: old.top.filter((d4) => !rowIds.has(d4)),
          bottom: [
            ...old.bottom.filter((d4) => !rowIds.has(d4)),
            ...Array.from(rowIds)
          ]
        };
      }
      if (position === "top") {
        return {
          top: [...old.top.filter((d4) => !rowIds.has(d4)), ...Array.from(rowIds)],
          bottom: old.bottom.filter((d4) => !rowIds.has(d4))
        };
      }
      return {
        top: old.top.filter((d4) => !rowIds.has(d4)),
        bottom: old.bottom.filter((d4) => !rowIds.has(d4))
      };
    });
  }

  // ../vendor/table-core/features/row-pinning/rowPinningFeature.ts
  function constructRowPinningFeature() {
    return {
      getInitialState: (initialState) => {
        return {
          ...initialState,
          rowPinning: {
            ...getDefaultRowPinningState(),
            ...initialState.rowPinning
          }
        };
      },
      getDefaultTableOptions: (table) => {
        return {
          onRowPinningChange: makeStateUpdater("rowPinning", table)
        };
      },
      constructRowAPIs: (row) => {
        assignAPIs("rowPinningFeature", row, [
          {
            fn: () => row_getCanPin(row),
            fnName: "row_getCanPin"
          },
          {
            fn: () => row_getIsPinned(row),
            fnName: "row_getIsPinned"
          },
          {
            fn: () => row_getPinnedIndex(row),
            fnName: "row_getPinnedIndex",
            memoDeps: () => [
              row._table.getRowModel().rows,
              row._table.options.state?.rowPinning
            ]
          },
          {
            fn: (position, includeLeafRows, includeParentRows) => row_pin(row, position, includeLeafRows, includeParentRows),
            fnName: "row_pin"
          }
        ]);
      },
      constructTableAPIs: (table) => {
        assignAPIs("rowPinningFeature", table, [
          {
            fn: (updater) => table_setRowPinning(table, updater),
            fnName: "table_setRowPinning"
          },
          {
            fn: (defaultState) => table_resetRowPinning(table, defaultState),
            fnName: "table_resetRowPinning"
          },
          {
            fn: (position) => table_getIsSomeRowsPinned(table, position),
            fnName: "table_getIsSomeRowsPinned"
          },
          {
            fn: () => table_getTopRows(table),
            fnName: "table_getTopRows",
            memoDeps: () => [
              table.getRowModel().rows,
              table.options.state?.rowPinning?.top
            ]
          },
          {
            fn: () => table_getBottomRows(table),
            fnName: "table_getBottomRows",
            memoDeps: () => [
              table.getRowModel().rows,
              table.options.state?.rowPinning?.bottom
            ]
          },
          {
            fn: () => table_getCenterRows(table),
            fnName: "table_getCenterRows",
            memoDeps: () => [
              table.getRowModel().rows,
              table.options.state?.rowPinning
            ]
          }
        ]);
      }
    };
  }
  var rowPinningFeature = constructRowPinningFeature();

  // ../vendor/table-core/features/row-selection/rowSelectionFeature.utils.ts
  function getDefaultRowSelectionState() {
    return structuredClone({});
  }
  function table_setRowSelection(table, updater) {
    table.options.onRowSelectionChange?.(updater);
  }
  function table_resetRowSelection(table, defaultState) {
    table_setRowSelection(
      table,
      defaultState ? {} : table.initialState.rowSelection ?? {}
    );
  }
  function table_toggleAllRowsSelected(table, value) {
    table_setRowSelection(table, (old) => {
      value = typeof value !== "undefined" ? value : !table_getIsAllRowsSelected(table);
      const rowSelection = { ...old };
      const preGroupedFlatRows = table.getPreGroupedRowModel().flatRows;
      if (value) {
        preGroupedFlatRows.forEach((row) => {
          if (!row_getCanSelect(row)) {
            return;
          }
          rowSelection[row.id] = true;
        });
      } else {
        preGroupedFlatRows.forEach((row) => {
          delete rowSelection[row.id];
        });
      }
      return rowSelection;
    });
  }
  function table_toggleAllPageRowsSelected(table, value) {
    table_setRowSelection(table, (old) => {
      const resolvedValue = typeof value !== "undefined" ? value : !table_getIsAllPageRowsSelected(table);
      const rowSelection = { ...old };
      table.getRowModel().rows.forEach((row) => {
        mutateRowIsSelected(rowSelection, row.id, resolvedValue, true, table);
      });
      return rowSelection;
    });
  }
  function table_getPreSelectedRowModel(table) {
    return table.getCoreRowModel();
  }
  function table_getSelectedRowModel(table) {
    const rowModel = table.getCoreRowModel();
    if (!Object.keys(table.options.state?.rowSelection ?? {}).length) {
      return {
        rows: [],
        flatRows: [],
        rowsById: {}
      };
    }
    return selectRowsFn(rowModel);
  }
  function table_getFilteredSelectedRowModel(table) {
    const rowModel = table.getCoreRowModel();
    if (!Object.keys(table.options.state?.rowSelection ?? {}).length) {
      return {
        rows: [],
        flatRows: [],
        rowsById: {}
      };
    }
    return selectRowsFn(rowModel);
  }
  function table_getGroupedSelectedRowModel(table) {
    const rowModel = table.getCoreRowModel();
    if (!Object.keys(table.options.state?.rowSelection ?? {}).length) {
      return {
        rows: [],
        flatRows: [],
        rowsById: {}
      };
    }
    return selectRowsFn(rowModel);
  }
  function table_getIsAllRowsSelected(table) {
    const preGroupedFlatRows = table.getFilteredRowModel().flatRows;
    const rowSelection = table.options.state?.rowSelection ?? {};
    let isAllRowsSelected = Boolean(
      preGroupedFlatRows.length && Object.keys(rowSelection).length
    );
    if (isAllRowsSelected) {
      if (preGroupedFlatRows.some(
        (row) => row_getCanSelect(row) && !rowSelection[row.id]
      )) {
        isAllRowsSelected = false;
      }
    }
    return isAllRowsSelected;
  }
  function table_getIsAllPageRowsSelected(table) {
    const paginationFlatRows = table.getPaginatedRowModel().flatRows.filter((row) => row_getCanSelect(row));
    const rowSelection = table.options.state?.rowSelection ?? {};
    let isAllPageRowsSelected = !!paginationFlatRows.length;
    if (isAllPageRowsSelected && paginationFlatRows.some((row) => !rowSelection[row.id])) {
      isAllPageRowsSelected = false;
    }
    return isAllPageRowsSelected;
  }
  function table_getIsSomeRowsSelected(table) {
    const totalSelected = Object.keys(
      table.options.state?.rowSelection ?? {}
    ).length;
    return totalSelected > 0 && totalSelected < table.getFilteredRowModel().flatRows.length;
  }
  function table_getIsSomePageRowsSelected(table) {
    const paginationFlatRows = table.getPaginatedRowModel().flatRows;
    return table_getIsAllPageRowsSelected(table) ? false : paginationFlatRows.filter((row) => row_getCanSelect(row)).some((row) => row_getIsSelected(row) || row_getIsSomeSelected(row));
  }
  function table_getToggleAllRowsSelectedHandler(table) {
    return (e6) => {
      table_toggleAllRowsSelected(
        table,
        e6.target.checked
      );
    };
  }
  function table_getToggleAllPageRowsSelectedHandler(table) {
    return (e6) => {
      table_toggleAllPageRowsSelected(
        table,
        e6.target.checked
      );
    };
  }
  function row_toggleSelected(row, value, opts) {
    const isSelected = row_getIsSelected(row);
    table_setRowSelection(row._table, (old) => {
      value = typeof value !== "undefined" ? value : !isSelected;
      if (row_getCanSelect(row) && isSelected === value) {
        return old;
      }
      const selectedRowIds = { ...old };
      mutateRowIsSelected(
        selectedRowIds,
        row.id,
        value,
        opts?.selectChildren ?? true,
        row._table
      );
      return selectedRowIds;
    });
  }
  function row_getIsSelected(row) {
    return isRowSelected(row);
  }
  function row_getIsSomeSelected(row) {
    return isSubRowSelected(row) === "some";
  }
  function row_getIsAllSubRowsSelected(row) {
    return isSubRowSelected(row) === "all";
  }
  function row_getCanSelect(row) {
    const options = row._table.options;
    if (typeof options.enableRowSelection === "function") {
      return options.enableRowSelection(row);
    }
    return options.enableRowSelection ?? true;
  }
  function row_getCanSelectSubRows(row) {
    const options = row._table.options;
    if (typeof options.enableSubRowSelection === "function") {
      return options.enableSubRowSelection(row);
    }
    return options.enableSubRowSelection ?? true;
  }
  function row_getCanMultiSelect(row) {
    const options = row._table.options;
    if (typeof options.enableMultiRowSelection === "function") {
      return options.enableMultiRowSelection(row);
    }
    return options.enableMultiRowSelection ?? true;
  }
  function row_getToggleSelectedHandler(row) {
    const canSelect = row_getCanSelect(row);
    return (e6) => {
      if (!canSelect)
        return;
      row_toggleSelected(
        row,
        e6.target.checked
      );
    };
  }
  var mutateRowIsSelected = (selectedRowIds, rowId, value, includeChildren, table) => {
    const row = table.getRow(rowId, true);
    if (value) {
      if (!row_getCanMultiSelect(row)) {
        Object.keys(selectedRowIds).forEach((key) => delete selectedRowIds[key]);
      }
      if (row_getCanSelect(row)) {
        selectedRowIds[rowId] = true;
      }
    } else {
      delete selectedRowIds[rowId];
    }
    if (includeChildren && row.subRows.length && row_getCanSelectSubRows(row)) {
      row.subRows.forEach(
        (r4) => mutateRowIsSelected(selectedRowIds, r4.id, value, includeChildren, table)
      );
    }
  };
  function selectRowsFn(rowModel) {
    const newSelectedFlatRows = [];
    const newSelectedRowsById = {};
    const recurseRows = (rows, depth = 0) => {
      return rows.map((row) => {
        const isSelected = isRowSelected(row);
        if (isSelected) {
          newSelectedFlatRows.push(row);
          newSelectedRowsById[row.id] = row;
        }
        if (row.subRows.length) {
          row = {
            ...row,
            subRows: recurseRows(row.subRows, depth + 1)
          };
        }
        if (isSelected) {
          return row;
        }
      }).filter((x5) => !!x5);
    };
    return {
      rows: recurseRows(rowModel.rows),
      flatRows: newSelectedFlatRows,
      rowsById: newSelectedRowsById
    };
  }
  function isRowSelected(row) {
    return (row._table.options.state?.rowSelection ?? {})[row.id] ?? false;
  }
  function isSubRowSelected(row) {
    if (!row.subRows.length)
      return false;
    const rowSelection = row._table.options.state?.rowSelection ?? {};
    let allChildrenSelected = true;
    let someSelected = false;
    row.subRows.forEach((subRow) => {
      if (someSelected && !allChildrenSelected) {
        return;
      }
      if (row_getCanSelect(subRow)) {
        if (isRowSelected(subRow)) {
          someSelected = true;
        } else {
          allChildrenSelected = false;
        }
      }
      if (subRow.subRows.length) {
        const subRowChildrenSelected = isSubRowSelected(subRow);
        if (subRowChildrenSelected === "all") {
          someSelected = true;
        } else if (subRowChildrenSelected === "some") {
          someSelected = true;
          allChildrenSelected = false;
        } else {
          allChildrenSelected = false;
        }
      }
    });
    return allChildrenSelected ? "all" : someSelected ? "some" : false;
  }

  // ../vendor/table-core/features/row-selection/rowSelectionFeature.ts
  function constructRowSelectionFeature() {
    return {
      getInitialState: (initialState) => {
        return {
          rowSelection: getDefaultRowSelectionState(),
          ...initialState
        };
      },
      getDefaultTableOptions: (table) => {
        return {
          onRowSelectionChange: makeStateUpdater("rowSelection", table),
          enableRowSelection: true,
          enableMultiRowSelection: true,
          enableSubRowSelection: true
        };
      },
      constructRowAPIs: (row) => {
        assignAPIs("rowSelectionFeature", row, [
          {
            fn: (value, opts) => row_toggleSelected(row, value, opts),
            fnName: "row_toggleSelected"
          },
          {
            fn: () => row_getIsSelected(row),
            fnName: "row_getIsSelected"
          },
          {
            fn: () => row_getIsSomeSelected(row),
            fnName: "row_getIsSomeSelected"
          },
          {
            fn: () => row_getIsAllSubRowsSelected(row),
            fnName: "row_getIsAllSubRowsSelected"
          },
          {
            fn: () => row_getCanSelect(row),
            fnName: "row_getCanSelect"
          },
          {
            fn: () => row_getCanSelectSubRows(row),
            fnName: "row_getCanSelectSubRows"
          },
          {
            fn: () => row_getCanMultiSelect(row),
            fnName: "row_getCanMultiSelect"
          },
          {
            fn: () => row_getToggleSelectedHandler(row),
            fnName: "row_getToggleSelectedHandler"
          }
        ]);
      },
      constructTableAPIs: (table) => {
        assignAPIs("rowSelectionFeature", table, [
          {
            fn: (updater) => table_setRowSelection(table, updater),
            fnName: "table_setRowSelection"
          },
          {
            fn: (defaultState) => table_resetRowSelection(table, defaultState),
            fnName: "table_resetRowSelection"
          },
          {
            fn: (value) => table_toggleAllRowsSelected(table, value),
            fnName: "table_toggleAllRowsSelected"
          },
          {
            fn: (value) => table_toggleAllPageRowsSelected(table, value),
            fnName: "table_toggleAllPageRowsSelected"
          },
          {
            fn: () => table_getPreSelectedRowModel(table),
            fnName: "table_getPreSelectedRowModel"
          },
          {
            fn: () => table_getSelectedRowModel(table),
            fnName: "table_getSelectedRowModel",
            memoDeps: () => [
              table.options.state?.rowSelection,
              table.getCoreRowModel()
            ]
          },
          {
            fn: () => table_getFilteredSelectedRowModel(table),
            fnName: "table_getFilteredSelectedRowModel",
            memoDeps: () => [
              table.options.state?.rowSelection,
              table.getFilteredRowModel()
            ]
          },
          {
            fn: () => table_getGroupedSelectedRowModel(table),
            fnName: "table_getGroupedSelectedRowModel",
            memoDeps: () => [
              table.options.state?.rowSelection,
              table.getSortedRowModel()
            ]
          },
          {
            fn: () => table_getIsAllRowsSelected(table),
            fnName: "table_getIsAllRowsSelected"
          },
          {
            fn: () => table_getIsAllPageRowsSelected(table),
            fnName: "table_getIsAllPageRowsSelected"
          },
          {
            fn: () => table_getIsSomeRowsSelected(table),
            fnName: "table_getIsSomeRowsSelected"
          },
          {
            fn: () => table_getIsSomePageRowsSelected(table),
            fnName: "table_getIsSomePageRowsSelected"
          },
          {
            fn: () => table_getToggleAllRowsSelectedHandler(table),
            fnName: "table_getToggleAllRowsSelectedHandler"
          },
          {
            fn: () => table_getToggleAllPageRowsSelectedHandler(table),
            fnName: "table_getToggleAllPageRowsSelectedHandler"
          }
        ]);
      }
    };
  }
  var rowSelectionFeature = constructRowSelectionFeature();

  // ../vendor/table-core/features/row-sorting/rowSortingFeature.utils.ts
  function getDefaultSortingState() {
    return structuredClone([]);
  }
  function table_setSorting(table, updater) {
    table.options.onSortingChange?.(updater);
  }
  function table_resetSorting(table, defaultState) {
    table_setSorting(
      table,
      defaultState ? [] : table.initialState.sorting ?? []
    );
  }
  function column_getAutoSortFn(column) {
    const sortFns2 = column._table._rowModelFns.sortFns;
    let sortFn;
    const firstRows = column._table.getFilteredRowModel().flatRows.slice(10);
    let isString = false;
    for (const row of firstRows) {
      const value = row.getValue(column.id);
      if (Object.prototype.toString.call(value) === "[object Date]") {
        sortFn = sortFns2?.datetime;
      }
      if (typeof value === "string") {
        isString = true;
        if (value.split(reSplitAlphaNumeric).length > 1) {
          sortFn = sortFns2?.alphanumeric;
        }
      }
    }
    if (isString) {
      sortFn = sortFns2?.text;
    }
    return sortFn ?? sortFn_basic;
  }
  function column_getAutoSortDir(column) {
    const firstRow = column._table.getFilteredRowModel().flatRows[0];
    const value = firstRow ? firstRow.getValue(column.id) : void 0;
    if (typeof value === "string") {
      return "asc";
    }
    return "desc";
  }
  function column_getSortFn(column) {
    const sortFns2 = column._table._rowModelFns.sortFns;
    return isFunction(column.columnDef.sortFn) ? column.columnDef.sortFn : column.columnDef.sortFn === "auto" ? column_getAutoSortFn(column) : sortFns2?.[column.columnDef.sortFn] ?? sortFn_basic;
  }
  function column_toggleSorting(column, desc, multi) {
    const nextSortingOrder = column_getNextSortingOrder(column);
    const hasManualValue = typeof desc !== "undefined";
    table_setSorting(column._table, (old) => {
      const existingSorting = old.find((d4) => d4.id === column.id);
      const existingIndex = old.findIndex((d4) => d4.id === column.id);
      let newSorting = [];
      let sortAction;
      const nextDesc = hasManualValue ? desc : nextSortingOrder === "desc";
      if (old.length && column_getCanMultiSort(column) && multi) {
        if (existingSorting) {
          sortAction = "toggle";
        } else {
          sortAction = "add";
        }
      } else {
        if (old.length && existingIndex !== old.length - 1) {
          sortAction = "replace";
        } else if (existingSorting) {
          sortAction = "toggle";
        } else {
          sortAction = "replace";
        }
      }
      if (sortAction === "toggle") {
        if (!hasManualValue) {
          if (!nextSortingOrder) {
            sortAction = "remove";
          }
        }
      }
      if (sortAction === "add") {
        newSorting = [
          ...old,
          {
            id: column.id,
            desc: nextDesc
          }
        ];
        newSorting.splice(
          0,
          newSorting.length - (column._table.options.maxMultiSortColCount ?? Number.MAX_SAFE_INTEGER)
        );
      } else if (sortAction === "toggle") {
        newSorting = old.map((d4) => {
          if (d4.id === column.id) {
            return {
              ...d4,
              desc: nextDesc
            };
          }
          return d4;
        });
      } else if (sortAction === "remove") {
        newSorting = old.filter((d4) => d4.id !== column.id);
      } else {
        newSorting = [
          {
            id: column.id,
            desc: nextDesc
          }
        ];
      }
      return newSorting;
    });
  }
  function column_getFirstSortDir(column) {
    const sortDescFirst = column.columnDef.sortDescFirst ?? column._table.options.sortDescFirst ?? column_getAutoSortDir(column) === "desc";
    return sortDescFirst ? "desc" : "asc";
  }
  function column_getNextSortingOrder(column, multi) {
    const firstSortDirection = column_getFirstSortDir(column);
    const isSorted2 = column_getIsSorted(column);
    if (!isSorted2) {
      return firstSortDirection;
    }
    if (isSorted2 !== firstSortDirection && (column._table.options.enableSortingRemoval ?? true) && // If enableSortRemove, enable in general
    (multi ? column._table.options.enableMultiRemove ?? true : true)) {
      return false;
    }
    return isSorted2 === "desc" ? "asc" : "desc";
  }
  function column_getCanSort(column) {
    return (column.columnDef.enableSorting ?? true) && (column._table.options.enableSorting ?? true) && !!column.accessorFn;
  }
  function column_getCanMultiSort(column) {
    return column.columnDef.enableMultiSort ?? column._table.options.enableMultiSort ?? !!column.accessorFn;
  }
  function column_getIsSorted(column) {
    const columnSort = column._table.options.state?.sorting?.find(
      (d4) => d4.id === column.id
    );
    return !columnSort ? false : columnSort.desc ? "desc" : "asc";
  }
  function column_getSortIndex(column) {
    return column._table.options.state?.sorting?.findIndex(
      (d4) => d4.id === column.id
    ) ?? -1;
  }
  function column_clearSorting(column) {
    table_setSorting(
      column._table,
      (old) => old.length ? old.filter((d4) => d4.id !== column.id) : []
    );
  }
  function column_getToggleSortingHandler(column) {
    const canSort = column_getCanSort(column);
    return (e6) => {
      if (!canSort)
        return;
      e6.persist?.();
      column_toggleSorting(
        column,
        void 0,
        column_getCanMultiSort(column) ? column._table.options.isMultiSortEvent?.(e6) : false
      );
    };
  }

  // ../vendor/table-core/features/row-sorting/rowSortingFeature.ts
  function constructRowSortingFeature() {
    return {
      getInitialState(initialState) {
        return {
          sorting: getDefaultSortingState(),
          ...initialState
        };
      },
      getDefaultColumnDef() {
        return {
          sortFn: "auto",
          sortUndefined: 1
        };
      },
      getDefaultTableOptions(table) {
        return {
          onSortingChange: makeStateUpdater("sorting", table),
          isMultiSortEvent: (e6) => {
            return e6.shiftKey;
          }
        };
      },
      constructColumnAPIs(column) {
        assignAPIs("rowSortingFeature", column, [
          {
            fn: () => column_getAutoSortFn(column),
            fnName: "column.getAutoSortFn"
          },
          {
            fn: () => column_getAutoSortDir(column),
            fnName: "column.getAutoSortDir"
          },
          {
            fn: () => column_getSortFn(column),
            fnName: "column_getSortFn"
          },
          {
            fn: (desc, multi) => column_toggleSorting(column, desc, multi),
            fnName: "column_toggleSorting"
          },
          {
            fn: () => column_getFirstSortDir(column),
            fnName: "column_getFirstSortDir"
          },
          {
            fn: (multi) => column_getNextSortingOrder(column, multi),
            fnName: "column_getNextSortingOrder"
          },
          {
            fn: () => column_getCanSort(column),
            fnName: "column_getCanSort"
          },
          {
            fn: () => column_getCanMultiSort(column),
            fnName: "column_getCanMultiSort"
          },
          {
            fn: () => column_getIsSorted(column),
            fnName: "column_getIsSorted"
          },
          {
            fn: () => column_getSortIndex(column),
            fnName: "column_getSortIndex"
          },
          {
            fn: () => column_clearSorting(column),
            fnName: "column_clearSorting"
          },
          {
            fn: () => column_getToggleSortingHandler(column),
            fnName: "column_getToggleSortingHandler"
          }
        ]);
      },
      constructTableAPIs(table) {
        assignAPIs("rowSortingFeature", table, [
          {
            fn: (updater) => table_setSorting(table, updater),
            fnName: "table_setSorting"
          },
          {
            fn: (defaultState) => table_resetSorting(table, defaultState),
            fnName: "table_resetSorting"
          }
        ]);
      }
    };
  }
  var rowSortingFeature = constructRowSortingFeature();

  // ../vendor/table-core/features/row-sorting/createSortedRowModel.ts
  function createSortedRowModel(sortFns2) {
    return (table) => {
      if (!table._rowModelFns.sortFns)
        table._rowModelFns.sortFns = sortFns2;
      return tableMemo({
        feature: "rowSortingFeature",
        table,
        fnName: "table.getSortedRowModel",
        memoDeps: () => [
          table.options.state?.sorting,
          table.getPreSortedRowModel()
        ],
        fn: () => _createSortedRowModel(table),
        onAfterUpdate: () => table_autoResetPageIndex(table)
      });
    };
  }
  function _createSortedRowModel(table) {
    const preSortedRowModel = table.getPreSortedRowModel();
    const sorting = table.options.state?.sorting;
    if (!preSortedRowModel.rows.length || !sorting?.length) {
      return preSortedRowModel;
    }
    const sortedFlatRows = [];
    const availableSorting = sorting.filter(
      (sort3) => column_getCanSort(
        table.getColumn(sort3.id)
      )
    );
    const columnInfoById = {};
    availableSorting.forEach((sortEntry) => {
      const column = table.getColumn(sortEntry.id);
      if (!column)
        return;
      columnInfoById[sortEntry.id] = {
        sortUndefined: column.columnDef.sortUndefined,
        invertSorting: column.columnDef.invertSorting,
        sortFn: column_getSortFn(column)
      };
    });
    const sortData = (rows) => {
      const sortedData = rows.map((row) => ({ ...row }));
      sortedData.sort((rowA, rowB) => {
        for (const sortEntry of availableSorting) {
          const columnInfo = columnInfoById[sortEntry.id];
          const sortUndefined = columnInfo.sortUndefined;
          const isDesc = sortEntry.desc;
          let sortInt = 0;
          if (sortUndefined) {
            const aValue = rowA.getValue(sortEntry.id);
            const bValue = rowB.getValue(sortEntry.id);
            const aUndefined = aValue === void 0;
            const bUndefined = bValue === void 0;
            if (aUndefined || bUndefined) {
              if (sortUndefined === "first")
                return aUndefined ? -1 : 1;
              if (sortUndefined === "last")
                return aUndefined ? 1 : -1;
              sortInt = aUndefined && bUndefined ? 0 : aUndefined ? sortUndefined : -sortUndefined;
            }
          }
          if (sortInt === 0) {
            sortInt = columnInfo.sortFn(rowA, rowB, sortEntry.id);
          }
          if (sortInt !== 0) {
            if (isDesc) {
              sortInt *= -1;
            }
            if (columnInfo.invertSorting) {
              sortInt *= -1;
            }
            return sortInt;
          }
        }
        return rowA.index - rowB.index;
      });
      sortedData.forEach((row) => {
        sortedFlatRows.push(row);
        if (row.subRows.length) {
          row.subRows = sortData(row.subRows);
        }
      });
      return sortedData;
    };
    return {
      rows: sortData(preSortedRowModel.rows),
      flatRows: sortedFlatRows,
      rowsById: preSortedRowModel.rowsById
    };
  }

  // ../vendor/preact-table/FlexRender.tsx
  function isPreactComponent(component) {
    return isClassComponent(component) || typeof component === "function" || isExoticComponent(component);
  }
  function isClassComponent(component) {
    return typeof component === "function" && (() => {
      const proto = Object.getPrototypeOf(component);
      return proto.prototype && proto.prototype.isPreactComponent;
    })();
  }
  function isExoticComponent(component) {
    return typeof component === "object" && typeof component.$$typeof === "symbol" && ["preact.memo", "preact.forward_ref"].includes(
      component.$$typeof.description
    );
  }
  function flexRender(Comp, props) {
    return !Comp ? null : isPreactComponent(Comp) ? /* @__PURE__ */ _(Comp, { ...props }) : Comp;
  }

  // ../vendor/preact-table/useTable.ts
  function useTableRef(options) {
    const tableRef = A2(null);
    if (!tableRef.current) {
      tableRef.current = constructTable(options);
    }
    return tableRef.current;
  }
  function useTable(tableOptions) {
    const _features = { ...coreFeatures, ...tableOptions._features };
    const [state, setState] = d2(
      () => getInitialTableState(_features, tableOptions.initialState)
    );
    const statefulOptions = {
      ...tableOptions,
      _features,
      state: { ...state, ...tableOptions.state },
      onStateChange: (updater) => {
        setState(updater);
        tableOptions.onStateChange?.(updater);
      }
    };
    const table = useTableRef(statefulOptions);
    table.setOptions((prev) => ({ ...prev, ...statefulOptions }));
    return table;
  }

  // ../../skilltool/HpPolicy.ts
  var HpStrategyCoefficient = Object.freeze([0, 0.95, 0.89, 1, 0.995, 0.86]);
  var HpConsumptionGroundModifier = Object.freeze([
    [],
    [0, 1, 1, 1.02, 1.02],
    [0, 1, 1, 1.01, 1.02]
  ].map((o5) => Object.freeze(o5)));

  // ../../skilltool/RaceSolverBuilder.ts
  var GroundSpeedModifier = Object.freeze([
    null,
    // ground types started at 1
    [0, 0, 0, 0, -50],
    [0, 0, 0, 0, -50]
  ].map((o5) => Object.freeze(o5)));
  var GroundPowerModifier = Object.freeze([
    null,
    [0, 0, -50, -50, -50],
    [0, -100, -50, -100, -100]
  ].map((o5) => Object.freeze(o5)));
  var StrategyProficiencyModifier = Object.freeze([1.1, 1, 0.85, 0.75, 0.6, 0.4, 0.2, 0.1]);
  var Asitame;
  ((Asitame2) => {
    Asitame2.StrategyDistanceCoefficient = Object.freeze([
      [],
      // distances are 1-indexed (as are strategies, hence the 0 in the first column for every row)
      [0, 1, 0.7, 0.75, 0.7, 1],
      // short (nige, senkou, sasi, oikomi, oonige)
      [0, 1, 0.8, 0.7, 0.75, 1],
      // mile
      [0, 1, 0.9, 0.875, 0.86, 1],
      // medium
      [0, 1, 0.9, 1, 0.9, 1]
      // long
    ]);
    Asitame2.BaseModifier = 875e-5;
    function calcApproximateModifier(power, strategy, distance) {
      return Asitame2.BaseModifier * Math.sqrt(power - 1200) * Asitame2.StrategyDistanceCoefficient[distance][strategy];
    }
    Asitame2.calcApproximateModifier = calcApproximateModifier;
  })(Asitame || (Asitame = {}));
  var StaminaSyoubu;
  ((StaminaSyoubu2) => {
    function distanceFactor(distance) {
      if (distance < 2101)
        return 0;
      else if (distance < 2201)
        return 0.5;
      else if (distance < 2401)
        return 1;
      else if (distance < 2601)
        return 1.2;
      else
        return 1.5;
    }
    StaminaSyoubu2.distanceFactor = distanceFactor;
    function calcApproximateModifier(stamina, distance) {
      const randomFactor = 1;
      return Math.sqrt(stamina - 1200) * 85e-4 * distanceFactor(distance) * randomFactor;
    }
    StaminaSyoubu2.calcApproximateModifier = calcApproximateModifier;
  })(StaminaSyoubu || (StaminaSyoubu = {}));
  function parseStrategy(s4) {
    if (typeof s4 != "string") {
      return s4;
    }
    switch (s4.toUpperCase()) {
      case "NIGE":
        return 1 /* Nige */;
      case "SENKOU":
        return 2 /* Senkou */;
      case "SASI":
      case "SASHI":
        return 3 /* Sasi */;
      case "OIKOMI":
        return 4 /* Oikomi */;
      case "OONIGE":
        return 5 /* Oonige */;
      default:
        throw new Error("Invalid running strategy.");
    }
  }
  function parseAptitude(a5, type2) {
    if (typeof a5 != "string") {
      return a5;
    }
    switch (a5.toUpperCase()) {
      case "S":
        return 0 /* S */;
      case "A":
        return 1 /* A */;
      case "B":
        return 2 /* B */;
      case "C":
        return 3 /* C */;
      case "D":
        return 4 /* D */;
      case "E":
        return 5 /* E */;
      case "F":
        return 6 /* F */;
      case "G":
        return 7 /* G */;
      default:
        throw new Error("Invalid " + type2 + " aptitude.");
    }
  }
  function adjustOvercap(stat) {
    return stat > 1200 ? 1200 + Math.floor((stat - 1200) / 2) : stat;
  }
  function buildBaseStats(horseDesc, mood) {
    const motivCoef = 1 + 0.02 * mood;
    return Object.freeze({
      speed: adjustOvercap(horseDesc.speed) * motivCoef,
      stamina: adjustOvercap(horseDesc.stamina) * motivCoef,
      power: adjustOvercap(horseDesc.power) * motivCoef,
      guts: adjustOvercap(horseDesc.guts) * motivCoef,
      wisdom: adjustOvercap(horseDesc.wisdom) * motivCoef,
      strategy: parseStrategy(horseDesc.strategy),
      distanceAptitude: parseAptitude(horseDesc.distanceAptitude, "distance"),
      surfaceAptitude: parseAptitude(horseDesc.surfaceAptitude, "surface"),
      strategyAptitude: parseAptitude(horseDesc.strategyAptitude, "strategy"),
      rawStamina: horseDesc.stamina * motivCoef
    });
  }
  function buildSkillEffects(skill) {
    return skill.effects.reduce((acc, ef) => {
      if (SkillType.hasOwnProperty(ef.type) && ef.modifier > 0) {
        acc.push({ type: ef.type, baseDuration: skill.baseDuration / 1e4, modifier: ef.modifier / 1e4 });
      }
      return acc;
    }, []);
  }
  function buildSkillData(horse, raceParams, course, wholeCourse, parser, skillId, ignoreNullEffects = false) {
    if (!(skillId in skill_data_default)) {
      throw new Error("bad skill ID " + skillId);
    }
    const extra = Object.assign({ skillId }, raceParams);
    const alternatives = skill_data_default[skillId].alternatives;
    const triggers = [];
    for (let i5 = 0; i5 < alternatives.length; ++i5) {
      const skill = alternatives[i5];
      let full = new RegionList();
      wholeCourse.forEach((r4) => full.push(r4));
      if (skill.precondition) {
        const pre = parser.parse(parser.tokenize(skill.precondition));
        const preRegions = pre.apply(wholeCourse, course, horse, extra)[0];
        if (preRegions.length == 0) {
          continue;
        } else {
          const bounds = new Region(preRegions[0].start, wholeCourse[wholeCourse.length - 1].end);
          full = full.rmap((r4) => r4.intersect(bounds));
        }
      }
      const op = parser.parse(parser.tokenize(skill.condition));
      const [regions, extraCondition] = op.apply(full, course, horse, extra);
      if (regions.length == 0) {
        continue;
      }
      if (triggers.length > 0 && !/is_activate_other_skill_detail|is_used_skill_id/.test(skill.condition)) {
        continue;
      }
      const effects2 = buildSkillEffects(skill);
      if (effects2.length > 0 || ignoreNullEffects) {
        const rarity = skill_data_default[skillId].rarity;
        triggers.push({
          skillId,
          // for some reason 1*/2* uniques, 1*/2* upgraded to 3*, and naturally 3* uniques all have different rarity (3, 4, 5 respectively)
          rarity: rarity >= 3 && rarity <= 5 ? 3 : rarity,
          samplePolicy: op.samplePolicy,
          regions,
          extraCondition,
          effects: effects2
        });
      }
    }
    if (triggers.length > 0)
      return triggers;
    const effects = buildSkillEffects(alternatives[0]);
    if (effects.length == 0 && !ignoreNullEffects) {
      return [];
    } else {
      const afterEnd = new RegionList();
      afterEnd.push(new Region(9999, 9999));
      return [{
        skillId,
        rarity: Math.min(skill_data_default[skillId].rarity, 3),
        samplePolicy: ImmediatePolicy,
        regions: afterEnd,
        extraCondition: (_3) => false,
        effects
      }];
    }
  }
  var conditionsWithActivateCountsAsRandom = Object.freeze(Object.assign({}, Conditions, {
    activate_count_all: random({
      filterGte(regions, n4, course, _1, extra) {
        if (n4 == 7) {
          const rl = new RegionList();
          regions.forEach((r4) => rl.push(new Region(r4.start, r4.start + 11)));
          return rl;
        }
        const bounds = new Region(Math.min(n4 / 23 - 0.2, 0.6) * course.distance, Math.min(n4 / 23 + 0.2, 1) * course.distance);
        return regions.rmap((r4) => r4.intersect(bounds));
      },
      filterLte(regions, n4, course, _1, extra) {
        return new RegionList();
      }
    }),
    activate_count_end_after: random({
      filterGte(regions, _0, course, _1, extra) {
        const bounds = new Region(CourseHelpers.phaseStart(course.distance, 2), CourseHelpers.phaseEnd(course.distance, 3));
        return regions.rmap((r4) => r4.intersect(bounds));
      }
    }),
    activate_count_heal: noopRandom,
    activate_count_later_half: random({
      filterGte(regions, _0, course, _1, extra) {
        const bounds = new Region(course.distance / 2, course.distance);
        return regions.rmap((r4) => r4.intersect(bounds));
      }
    }),
    activate_count_middle: random({
      filterGte(regions, n4, course, _1, extra) {
        const start2 = CourseHelpers.phaseStart(course.distance, 1), end = CourseHelpers.phaseEnd(course.distance, 1);
        const bounds = new Region(start2, start2 + n4 / 10 * (end - start2));
        return regions.rmap((r4) => r4.intersect(bounds));
      }
    }),
    activate_count_start: immediate({
      // for 地固め
      filterGte(regions, _0, course, _1, extra) {
        const bounds = new Region(CourseHelpers.phaseStart(course.distance, 0), CourseHelpers.phaseEnd(course.distance, 0));
        return regions.rmap((r4) => r4.intersect(bounds));
      }
    })
  }));
  var defaultParser = getParser();
  var acrParser = getParser(conditionsWithActivateCountsAsRandom);

  // ../umalator/BasinnChart.tsx
  function skillmeta3(id3) {
    return skill_meta_default[id3.split("-")[0]];
  }
  function getActivateableSkills(skills, horse, course, racedef) {
    const parser = getParser();
    const h22 = buildBaseStats(horse, racedef.mood);
    const wholeCourse = new RegionList();
    wholeCourse.push(new Region(0, course.distance));
    return skills.filter((id3) => {
      let sd;
      try {
        sd = buildSkillData(h22, racedef, course, wholeCourse, parser, id3);
      } catch (_3) {
        return false;
      }
      if (sd == null)
        return false;
      return sd.some((trigger) => trigger.regions.length > 0 && trigger.regions[0].start < 9999);
    });
  }
  function getNullRow(skillid) {
    return { id: skillid, min: 0, max: 0, mean: 0, median: 0, results: [], runData: null };
  }
  function formatBasinn(info) {
    return info.getValue().toFixed(2).replace("-0.00", "0.00") + " L";
  }
  function SkillNameCell(props) {
    return /* @__PURE__ */ _("div", { class: "chartSkillName" }, /* @__PURE__ */ _("img", { src: `/uma-tools/icons/${skillmeta3(props.id).iconId}.png` }), /* @__PURE__ */ _("span", null, /* @__PURE__ */ _(Text, { id: `skillnames.${props.id}` })));
  }
  function headerRenderer(radioGroup, selectedType, type2, text, onClick) {
    function click(e6) {
      e6.stopPropagation();
      onClick(type2);
    }
    return (c4) => /* @__PURE__ */ _("div", null, /* @__PURE__ */ _("input", { type: "radio", name: radioGroup, checked: selectedType == type2, title: `Show ${text.toLowerCase()} on chart`, onClick: click }), /* @__PURE__ */ _("span", { onClick: c4.header.column.getToggleSortingHandler() }, text));
  }
  function BasinnChart(props) {
    const radioGroup = g2();
    const [selected, setSelected] = d2("");
    const [selectedType, setSelectedType] = d2("mean");
    function headerClick(type2) {
      setSelectedType(type2);
      props.onRunTypeChange(type2 + "run");
    }
    const columns = T2(() => [{
      header: () => /* @__PURE__ */ _("span", null, "Skill name"),
      accessorKey: "id",
      cell: (info) => /* @__PURE__ */ _(SkillNameCell, { id: info.getValue() }),
      sortingFn: (a5, b2, _3) => skillnames_default[a5] < skillnames_default[b2] ? -1 : 1
    }, {
      header: headerRenderer(radioGroup, selectedType, "min", "Minimum", headerClick),
      accessorKey: "min",
      cell: formatBasinn
    }, {
      header: headerRenderer(radioGroup, selectedType, "max", "Maximum", headerClick),
      accessorKey: "max",
      cell: formatBasinn,
      sortDescFirst: true
    }, {
      header: headerRenderer(radioGroup, selectedType, "mean", "Mean", headerClick),
      accessorKey: "mean",
      cell: formatBasinn,
      sortDescFirst: true
    }, {
      header: headerRenderer(radioGroup, selectedType, "median", "Median", headerClick),
      accessorKey: "median",
      cell: formatBasinn,
      sortDescFirst: true
    }], [selectedType]);
    const [sorting, setSorting] = d2([{ id: "mean", desc: true }]);
    const table = useTable({
      _features: tableFeatures({ rowSortingFeature }),
      _rowModels: { sortedRowModel: createSortedRowModel(sortFns) },
      columns,
      data: props.data,
      onSortingChange: setSorting,
      enableSortingRemoval: false,
      state: { sorting }
    });
    function handleClick(e6) {
      const tr2 = e6.target.closest("tr");
      if (tr2 == null)
        return;
      e6.stopPropagation();
      const id3 = tr2.dataset.skillid;
      if (e6.target.tagName == "IMG") {
        props.onInfoClick(id3);
      } else {
        setSelected(id3);
        props.onSelectionChange(id3);
      }
    }
    function handleDblClick(e6) {
      const tr2 = e6.target.closest("tr");
      if (tr2 == null)
        return;
      e6.stopPropagation();
      const id3 = tr2.dataset.skillid;
      props.onDblClickRow(id3);
    }
    return /* @__PURE__ */ _("div", { class: "basinnChartWrapper" }, /* @__PURE__ */ _("table", { class: "basinnChart" }, /* @__PURE__ */ _("thead", null, table.getHeaderGroups().map((headerGroup) => /* @__PURE__ */ _("tr", { key: headerGroup.id }, headerGroup.headers.map((header) => /* @__PURE__ */ _("th", { key: header.id, colSpan: header.colSpan }, !header.isPlaceholder && /* @__PURE__ */ _(
      "div",
      {
        class: `columnHeader ${{
          "asc": "basinnChartSortedAsc",
          "desc": "basinnChartSortedDesc",
          "false": ""
        }[header.column.getIsSorted()]}`,
        title: header.column.getCanSort() && {
          "asc": "Sort ascending",
          "desc": "Sort descending",
          "false": "Clear sort"
        }[header.column.getNextSortingOrder()]
      },
      flexRender(header.column.columnDef.header, header.getContext())
    )))))), /* @__PURE__ */ _("tbody", { onClick: handleClick, onDblClick: handleDblClick }, table.getRowModel().rows.map((row) => {
      const id3 = row.getValue("id");
      return /* @__PURE__ */ _("tr", { key: row.id, "data-skillid": id3, class: id3 == selected && "selected", style: props.hidden.has(id3) && "display:none" }, row.getAllCells().map((cell) => /* @__PURE__ */ _("td", { key: cell.id }, flexRender(cell.column.columnDef.cell, cell.getContext()))));
    }))));
  }

  // ../node_modules/posthog-js/dist/module.js
  var t3 = "undefined" != typeof window ? window : void 0;
  var i4 = "undefined" != typeof globalThis ? globalThis : t3;
  var e4 = Array.prototype;
  var r3 = e4.forEach;
  var s3 = e4.indexOf;
  var n3 = null == i4 ? void 0 : i4.navigator;
  var o4 = null == i4 ? void 0 : i4.document;
  var a4 = null == i4 ? void 0 : i4.location;
  var l4 = null == i4 ? void 0 : i4.fetch;
  var u3 = null != i4 && i4.XMLHttpRequest && "withCredentials" in new i4.XMLHttpRequest() ? i4.XMLHttpRequest : void 0;
  var h3 = null == i4 ? void 0 : i4.AbortController;
  var d3 = null == n3 ? void 0 : n3.userAgent;
  var v3 = null != t3 ? t3 : {};
  var c3 = { DEBUG: false, LIB_VERSION: "1.257.0" };
  var f3 = "$copy_autocapture";
  var p4 = ["$snapshot", "$pageview", "$pageleave", "$set", "survey dismissed", "survey sent", "survey shown", "$identify", "$groupidentify", "$create_alias", "$$client_ingestion_warning", "$web_experiment_applied", "$feature_enrollment_update", "$feature_flag_called"];
  var g3 = function(t4) {
    return t4.GZipJS = "gzip-js", t4.Base64 = "base64", t4;
  }({});
  var _2 = ["fatal", "error", "warning", "log", "info", "debug"];
  function m3(t4, i5) {
    return -1 !== t4.indexOf(i5);
  }
  var b = function(t4) {
    return t4.trim();
  };
  var y4 = function(t4) {
    return t4.replace(/^\$/, "");
  };
  var w3 = Array.isArray;
  var S2 = Object.prototype;
  var $2 = S2.hasOwnProperty;
  var k3 = S2.toString;
  var x4 = w3 || function(t4) {
    return "[object Array]" === k3.call(t4);
  };
  var E2 = (t4) => "function" == typeof t4;
  var I2 = (t4) => t4 === Object(t4) && !x4(t4);
  var P2 = (t4) => {
    if (I2(t4)) {
      for (var i5 in t4)
        if ($2.call(t4, i5))
          return false;
      return true;
    }
    return false;
  };
  var R = (t4) => void 0 === t4;
  var T3 = (t4) => "[object String]" == k3.call(t4);
  var M2 = (t4) => T3(t4) && 0 === t4.trim().length;
  var C4 = (t4) => null === t4;
  var F2 = (t4) => R(t4) || C4(t4);
  var O2 = (t4) => "[object Number]" == k3.call(t4);
  var A3 = (t4) => "[object Boolean]" === k3.call(t4);
  var D3 = (t4) => t4 instanceof FormData;
  var L2 = (t4) => m3(p4, t4);
  var j3 = (i5) => {
    var e6 = { t: function(e7) {
      if (t3 && (c3.DEBUG || v3.POSTHOG_DEBUG) && !R(t3.console) && t3.console) {
        for (var r4 = ("__rrweb_original__" in t3.console[e7]) ? t3.console[e7].__rrweb_original__ : t3.console[e7], s4 = arguments.length, n4 = new Array(s4 > 1 ? s4 - 1 : 0), o5 = 1; o5 < s4; o5++)
          n4[o5 - 1] = arguments[o5];
        r4(i5, ...n4);
      }
    }, info: function() {
      for (var t4 = arguments.length, i6 = new Array(t4), r4 = 0; r4 < t4; r4++)
        i6[r4] = arguments[r4];
      e6.t("log", ...i6);
    }, warn: function() {
      for (var t4 = arguments.length, i6 = new Array(t4), r4 = 0; r4 < t4; r4++)
        i6[r4] = arguments[r4];
      e6.t("warn", ...i6);
    }, error: function() {
      for (var t4 = arguments.length, i6 = new Array(t4), r4 = 0; r4 < t4; r4++)
        i6[r4] = arguments[r4];
      e6.t("error", ...i6);
    }, critical: function() {
      for (var t4 = arguments.length, e7 = new Array(t4), r4 = 0; r4 < t4; r4++)
        e7[r4] = arguments[r4];
      console.error(i5, ...e7);
    }, uninitializedWarning: (t4) => {
      e6.error("You must initialize PostHog before calling " + t4);
    }, createLogger: (t4) => j3(i5 + " " + t4) };
    return e6;
  };
  var N2 = j3("[PostHog.js]");
  var z3 = N2.createLogger;
  var U = z3("[ExternalScriptsLoader]");
  var q3 = (t4, i5, e6) => {
    if (t4.config.disable_external_dependency_loading)
      return U.warn(i5 + " was requested but loading of external scripts is disabled."), e6("Loading of external scripts is disabled");
    var r4 = null == o4 ? void 0 : o4.querySelectorAll("script");
    if (r4) {
      for (var s4 = 0; s4 < r4.length; s4++)
        if (r4[s4].src === i5)
          return e6();
    }
    var n4 = () => {
      if (!o4)
        return e6("document not found");
      var r5 = o4.createElement("script");
      if (r5.type = "text/javascript", r5.crossOrigin = "anonymous", r5.src = i5, r5.onload = (t5) => e6(void 0, t5), r5.onerror = (t5) => e6(t5), t4.config.prepare_external_dependency_script && (r5 = t4.config.prepare_external_dependency_script(r5)), !r5)
        return e6("prepare_external_dependency_script returned null");
      var s5, n5 = o4.querySelectorAll("body > script");
      n5.length > 0 ? null == (s5 = n5[0].parentNode) || s5.insertBefore(r5, n5[0]) : o4.body.appendChild(r5);
    };
    null != o4 && o4.body ? n4() : null == o4 || o4.addEventListener("DOMContentLoaded", n4);
  };
  function B3() {
    return B3 = Object.assign ? Object.assign.bind() : function(t4) {
      for (var i5 = 1; i5 < arguments.length; i5++) {
        var e6 = arguments[i5];
        for (var r4 in e6)
          ({}).hasOwnProperty.call(e6, r4) && (t4[r4] = e6[r4]);
      }
      return t4;
    }, B3.apply(null, arguments);
  }
  function H(t4, i5) {
    if (null == t4)
      return {};
    var e6 = {};
    for (var r4 in t4)
      if ({}.hasOwnProperty.call(t4, r4)) {
        if (-1 !== i5.indexOf(r4))
          continue;
        e6[r4] = t4[r4];
      }
    return e6;
  }
  v3.__PosthogExtensions__ = v3.__PosthogExtensions__ || {}, v3.__PosthogExtensions__.loadExternalDependency = (t4, i5, e6) => {
    var r4 = "/static/" + i5 + ".js?v=" + t4.version;
    if ("remote-config" === i5 && (r4 = "/array/" + t4.config.token + "/config.js"), "toolbar" === i5) {
      var s4 = 3e5;
      r4 = r4 + "&t=" + Math.floor(Date.now() / s4) * s4;
    }
    var n4 = t4.requestRouter.endpointFor("assets", r4);
    q3(t4, n4, e6);
  }, v3.__PosthogExtensions__.loadSiteApp = (t4, i5, e6) => {
    var r4 = t4.requestRouter.endpointFor("api", i5);
    q3(t4, r4, e6);
  };
  var W = {};
  function G(t4, i5, e6) {
    if (x4(t4)) {
      if (r3 && t4.forEach === r3)
        t4.forEach(i5, e6);
      else if ("length" in t4 && t4.length === +t4.length) {
        for (var s4 = 0, n4 = t4.length; s4 < n4; s4++)
          if (s4 in t4 && i5.call(e6, t4[s4], s4) === W)
            return;
      }
    }
  }
  function J2(t4, i5, e6) {
    if (!F2(t4)) {
      if (x4(t4))
        return G(t4, i5, e6);
      if (D3(t4)) {
        for (var r4 of t4.entries())
          if (i5.call(e6, r4[1], r4[0]) === W)
            return;
      } else
        for (var s4 in t4)
          if ($2.call(t4, s4) && i5.call(e6, t4[s4], s4) === W)
            return;
    }
  }
  var V2 = function(t4) {
    for (var i5 = arguments.length, e6 = new Array(i5 > 1 ? i5 - 1 : 0), r4 = 1; r4 < i5; r4++)
      e6[r4 - 1] = arguments[r4];
    return G(e6, function(i6) {
      for (var e7 in i6)
        void 0 !== i6[e7] && (t4[e7] = i6[e7]);
    }), t4;
  };
  var K2 = function(t4) {
    for (var i5 = arguments.length, e6 = new Array(i5 > 1 ? i5 - 1 : 0), r4 = 1; r4 < i5; r4++)
      e6[r4 - 1] = arguments[r4];
    return G(e6, function(i6) {
      G(i6, function(i7) {
        t4.push(i7);
      });
    }), t4;
  };
  function Y2(t4) {
    for (var i5 = Object.keys(t4), e6 = i5.length, r4 = new Array(e6); e6--; )
      r4[e6] = [i5[e6], t4[i5[e6]]];
    return r4;
  }
  var X2 = function(t4) {
    try {
      return t4();
    } catch (t5) {
      return;
    }
  };
  var Q = function(t4) {
    return function() {
      try {
        for (var i5 = arguments.length, e6 = new Array(i5), r4 = 0; r4 < i5; r4++)
          e6[r4] = arguments[r4];
        return t4.apply(this, e6);
      } catch (t5) {
        N2.critical("Implementation error. Please turn on debug mode and open a ticket on https://app.posthog.com/home#panel=support%3Asupport%3A."), N2.critical(t5);
      }
    };
  };
  var Z = function(t4) {
    var i5 = {};
    return J2(t4, function(t5, e6) {
      (T3(t5) && t5.length > 0 || O2(t5)) && (i5[e6] = t5);
    }), i5;
  };
  function tt(t4, i5) {
    return e6 = t4, r4 = (t5) => T3(t5) && !C4(i5) ? t5.slice(0, i5) : t5, s4 = /* @__PURE__ */ new Set(), function t5(i6, e7) {
      return i6 !== Object(i6) ? r4 ? r4(i6, e7) : i6 : s4.has(i6) ? void 0 : (s4.add(i6), x4(i6) ? (n4 = [], G(i6, (i7) => {
        n4.push(t5(i7));
      })) : (n4 = {}, J2(i6, (i7, e8) => {
        s4.has(i7) || (n4[e8] = t5(i7, e8));
      })), n4);
      var n4;
    }(e6);
    var e6, r4, s4;
  }
  var it = ["herokuapp.com", "vercel.app", "netlify.app"];
  function et(t4) {
    var i5 = null == t4 ? void 0 : t4.hostname;
    if (!T3(i5))
      return false;
    var e6 = i5.split(".").slice(-2).join(".");
    for (var r4 of it)
      if (e6 === r4)
        return false;
    return true;
  }
  function rt(t4, i5) {
    for (var e6 = 0; e6 < t4.length; e6++)
      if (i5(t4[e6]))
        return t4[e6];
  }
  function st(t4, i5, e6, r4) {
    var { capture: s4 = false, passive: n4 = true } = null != r4 ? r4 : {};
    null == t4 || t4.addEventListener(i5, e6, { capture: s4, passive: n4 });
  }
  var nt = "$people_distinct_id";
  var ot = "__alias";
  var at = "__timers";
  var lt = "$autocapture_disabled_server_side";
  var ut = "$heatmaps_enabled_server_side";
  var ht = "$exception_capture_enabled_server_side";
  var dt = "$error_tracking_suppression_rules";
  var vt = "$web_vitals_enabled_server_side";
  var ct = "$dead_clicks_enabled_server_side";
  var ft = "$web_vitals_allowed_metrics";
  var pt = "$session_recording_enabled_server_side";
  var gt = "$console_log_recording_enabled_server_side";
  var _t = "$session_recording_network_payload_capture";
  var mt = "$session_recording_masking";
  var bt = "$session_recording_canvas_recording";
  var yt = "$replay_sample_rate";
  var wt = "$replay_minimum_duration";
  var St = "$replay_script_config";
  var $t = "$sesid";
  var kt = "$session_is_sampled";
  var xt = "$session_recording_url_trigger_activated_session";
  var Et = "$session_recording_event_trigger_activated_session";
  var It = "$enabled_feature_flags";
  var Pt = "$early_access_features";
  var Rt = "$feature_flag_details";
  var Tt = "$stored_person_properties";
  var Mt = "$stored_group_properties";
  var Ct = "$surveys";
  var Ft = "$surveys_activated";
  var Ot = "$flag_call_reported";
  var At = "$user_state";
  var Dt = "$client_session_props";
  var Lt = "$capture_rate_limit";
  var jt = "$initial_campaign_params";
  var Nt = "$initial_referrer_info";
  var zt = "$initial_person_info";
  var Ut = "$epp";
  var qt = "__POSTHOG_TOOLBAR__";
  var Bt = "$posthog_cookieless";
  var Ht = [nt, ot, "__cmpns", at, pt, ut, $t, It, dt, At, Pt, Rt, Mt, Tt, Ct, Ot, Dt, Lt, jt, Nt, Ut, zt];
  function Wt(t4) {
    return t4 instanceof Element && (t4.id === qt || !(null == t4.closest || !t4.closest(".toolbar-global-fade-container")));
  }
  function Gt(t4) {
    return !!t4 && 1 === t4.nodeType;
  }
  function Jt(t4, i5) {
    return !!t4 && !!t4.tagName && t4.tagName.toLowerCase() === i5.toLowerCase();
  }
  function Vt(t4) {
    return !!t4 && 3 === t4.nodeType;
  }
  function Kt(t4) {
    return !!t4 && 11 === t4.nodeType;
  }
  function Yt(t4) {
    return t4 ? b(t4).split(/\s+/) : [];
  }
  function Xt(i5) {
    var e6 = null == t3 ? void 0 : t3.location.href;
    return !!(e6 && i5 && i5.some((t4) => e6.match(t4)));
  }
  function Qt(t4) {
    var i5 = "";
    switch (typeof t4.className) {
      case "string":
        i5 = t4.className;
        break;
      case "object":
        i5 = (t4.className && "baseVal" in t4.className ? t4.className.baseVal : null) || t4.getAttribute("class") || "";
        break;
      default:
        i5 = "";
    }
    return Yt(i5);
  }
  function Zt(t4) {
    return F2(t4) ? null : b(t4).split(/(\s+)/).filter((t5) => ci(t5)).join("").replace(/[\r\n]/g, " ").replace(/[ ]+/g, " ").substring(0, 255);
  }
  function ti(t4) {
    var i5 = "";
    return ni(t4) && !oi(t4) && t4.childNodes && t4.childNodes.length && J2(t4.childNodes, function(t5) {
      var e6;
      Vt(t5) && t5.textContent && (i5 += null !== (e6 = Zt(t5.textContent)) && void 0 !== e6 ? e6 : "");
    }), b(i5);
  }
  function ii(t4) {
    return R(t4.target) ? t4.srcElement || null : null != (i5 = t4.target) && i5.shadowRoot ? t4.composedPath()[0] || null : t4.target || null;
    var i5;
  }
  var ei = ["a", "button", "form", "input", "select", "textarea", "label"];
  function ri(t4) {
    var i5 = t4.parentNode;
    return !(!i5 || !Gt(i5)) && i5;
  }
  function si(i5, e6, r4, s4, n4) {
    var o5, a5, l5;
    if (void 0 === r4 && (r4 = void 0), !t3 || !i5 || Jt(i5, "html") || !Gt(i5))
      return false;
    if (null != (o5 = r4) && o5.url_allowlist && !Xt(r4.url_allowlist))
      return false;
    if (null != (a5 = r4) && a5.url_ignorelist && Xt(r4.url_ignorelist))
      return false;
    if (null != (l5 = r4) && l5.dom_event_allowlist) {
      var u4 = r4.dom_event_allowlist;
      if (u4 && !u4.some((t4) => e6.type === t4))
        return false;
    }
    for (var h4 = false, d4 = [i5], v4 = true, c4 = i5; c4.parentNode && !Jt(c4, "body"); )
      if (Kt(c4.parentNode))
        d4.push(c4.parentNode.host), c4 = c4.parentNode.host;
      else {
        if (!(v4 = ri(c4)))
          break;
        if (s4 || ei.indexOf(v4.tagName.toLowerCase()) > -1)
          h4 = true;
        else {
          var f4 = t3.getComputedStyle(v4);
          f4 && "pointer" === f4.getPropertyValue("cursor") && (h4 = true);
        }
        d4.push(v4), c4 = v4;
      }
    if (!function(t4, i6) {
      var e7 = null == i6 ? void 0 : i6.element_allowlist;
      if (R(e7))
        return true;
      var r5, s5 = function(t5) {
        if (e7.some((i7) => t5.tagName.toLowerCase() === i7))
          return { v: true };
      };
      for (var n5 of t4)
        if (r5 = s5(n5))
          return r5.v;
      return false;
    }(d4, r4))
      return false;
    if (!function(t4, i6) {
      var e7 = null == i6 ? void 0 : i6.css_selector_allowlist;
      if (R(e7))
        return true;
      var r5, s5 = function(t5) {
        if (e7.some((i7) => t5.matches(i7)))
          return { v: true };
      };
      for (var n5 of t4)
        if (r5 = s5(n5))
          return r5.v;
      return false;
    }(d4, r4))
      return false;
    var p5 = t3.getComputedStyle(i5);
    if (p5 && "pointer" === p5.getPropertyValue("cursor") && "click" === e6.type)
      return true;
    var g4 = i5.tagName.toLowerCase();
    switch (g4) {
      case "html":
        return false;
      case "form":
        return (n4 || ["submit"]).indexOf(e6.type) >= 0;
      case "input":
      case "select":
      case "textarea":
        return (n4 || ["change", "click"]).indexOf(e6.type) >= 0;
      default:
        return h4 ? (n4 || ["click"]).indexOf(e6.type) >= 0 : (n4 || ["click"]).indexOf(e6.type) >= 0 && (ei.indexOf(g4) > -1 || "true" === i5.getAttribute("contenteditable"));
    }
  }
  function ni(t4) {
    for (var i5 = t4; i5.parentNode && !Jt(i5, "body"); i5 = i5.parentNode) {
      var e6 = Qt(i5);
      if (m3(e6, "ph-sensitive") || m3(e6, "ph-no-capture"))
        return false;
    }
    if (m3(Qt(t4), "ph-include"))
      return true;
    var r4 = t4.type || "";
    if (T3(r4))
      switch (r4.toLowerCase()) {
        case "hidden":
        case "password":
          return false;
      }
    var s4 = t4.name || t4.id || "";
    if (T3(s4)) {
      if (/^cc|cardnum|ccnum|creditcard|csc|cvc|cvv|exp|pass|pwd|routing|seccode|securitycode|securitynum|socialsec|socsec|ssn/i.test(s4.replace(/[^a-zA-Z0-9]/g, "")))
        return false;
    }
    return true;
  }
  function oi(t4) {
    return !!(Jt(t4, "input") && !["button", "checkbox", "submit", "reset"].includes(t4.type) || Jt(t4, "select") || Jt(t4, "textarea") || "true" === t4.getAttribute("contenteditable"));
  }
  var ai = "(4[0-9]{12}(?:[0-9]{3})?)|(5[1-5][0-9]{14})|(6(?:011|5[0-9]{2})[0-9]{12})|(3[47][0-9]{13})|(3(?:0[0-5]|[68][0-9])[0-9]{11})|((?:2131|1800|35[0-9]{3})[0-9]{11})";
  var li = new RegExp("^(?:" + ai + ")$");
  var ui = new RegExp(ai);
  var hi = "\\d{3}-?\\d{2}-?\\d{4}";
  var di = new RegExp("^(" + hi + ")$");
  var vi = new RegExp("(" + hi + ")");
  function ci(t4, i5) {
    if (void 0 === i5 && (i5 = true), F2(t4))
      return false;
    if (T3(t4)) {
      if (t4 = b(t4), (i5 ? li : ui).test((t4 || "").replace(/[- ]/g, "")))
        return false;
      if ((i5 ? di : vi).test(t4))
        return false;
    }
    return true;
  }
  function fi(t4) {
    var i5 = ti(t4);
    return ci(i5 = (i5 + " " + pi2(t4)).trim()) ? i5 : "";
  }
  function pi2(t4) {
    var i5 = "";
    return t4 && t4.childNodes && t4.childNodes.length && J2(t4.childNodes, function(t5) {
      var e6;
      if (t5 && "span" === (null == (e6 = t5.tagName) ? void 0 : e6.toLowerCase()))
        try {
          var r4 = ti(t5);
          i5 = (i5 + " " + r4).trim(), t5.childNodes && t5.childNodes.length && (i5 = (i5 + " " + pi2(t5)).trim());
        } catch (t6) {
          N2.error("[AutoCapture]", t6);
        }
    }), i5;
  }
  function gi(t4) {
    return function(t5) {
      var i5 = t5.map((t6) => {
        var i6, e6, r4 = "";
        if (t6.tag_name && (r4 += t6.tag_name), t6.attr_class)
          for (var s4 of (t6.attr_class.sort(), t6.attr_class))
            r4 += "." + s4.replace(/"/g, "");
        var n4 = B3({}, t6.text ? { text: t6.text } : {}, { "nth-child": null !== (i6 = t6.nth_child) && void 0 !== i6 ? i6 : 0, "nth-of-type": null !== (e6 = t6.nth_of_type) && void 0 !== e6 ? e6 : 0 }, t6.href ? { href: t6.href } : {}, t6.attr_id ? { attr_id: t6.attr_id } : {}, t6.attributes), o5 = {};
        return Y2(n4).sort((t7, i7) => {
          var [e7] = t7, [r5] = i7;
          return e7.localeCompare(r5);
        }).forEach((t7) => {
          var [i7, e7] = t7;
          return o5[_i(i7.toString())] = _i(e7.toString());
        }), r4 += ":", r4 += Y2(o5).map((t7) => {
          var [i7, e7] = t7;
          return i7 + '="' + e7 + '"';
        }).join("");
      });
      return i5.join(";");
    }(function(t5) {
      return t5.map((t6) => {
        var i5, e6, r4 = { text: null == (i5 = t6.$el_text) ? void 0 : i5.slice(0, 400), tag_name: t6.tag_name, href: null == (e6 = t6.attr__href) ? void 0 : e6.slice(0, 2048), attr_class: mi(t6), attr_id: t6.attr__id, nth_child: t6.nth_child, nth_of_type: t6.nth_of_type, attributes: {} };
        return Y2(t6).filter((t7) => {
          var [i6] = t7;
          return 0 === i6.indexOf("attr__");
        }).forEach((t7) => {
          var [i6, e7] = t7;
          return r4.attributes[i6] = e7;
        }), r4;
      });
    }(t4));
  }
  function _i(t4) {
    return t4.replace(/"|\\"/g, '\\"');
  }
  function mi(t4) {
    var i5 = t4.attr__class;
    return i5 ? x4(i5) ? i5 : Yt(i5) : void 0;
  }
  var bi = class {
    constructor() {
      this.clicks = [];
    }
    isRageClick(t4, i5, e6) {
      var r4 = this.clicks[this.clicks.length - 1];
      if (r4 && Math.abs(t4 - r4.x) + Math.abs(i5 - r4.y) < 30 && e6 - r4.timestamp < 1e3) {
        if (this.clicks.push({ x: t4, y: i5, timestamp: e6 }), 3 === this.clicks.length)
          return true;
      } else
        this.clicks = [{ x: t4, y: i5, timestamp: e6 }];
      return false;
    }
  };
  var yi = ["localhost", "127.0.0.1"];
  var wi = (t4) => {
    var i5 = null == o4 ? void 0 : o4.createElement("a");
    return R(i5) ? null : (i5.href = t4, i5);
  };
  var Si = function(t4, i5) {
    var e6, r4;
    void 0 === i5 && (i5 = "&");
    var s4 = [];
    return J2(t4, function(t5, i6) {
      R(t5) || R(i6) || "undefined" === i6 || (e6 = encodeURIComponent(((t6) => t6 instanceof File)(t5) ? t5.name : t5.toString()), r4 = encodeURIComponent(i6), s4[s4.length] = r4 + "=" + e6);
    }), s4.join(i5);
  };
  var $i = function(t4, i5) {
    for (var e6, r4 = ((t4.split("#")[0] || "").split(/\?(.*)/)[1] || "").replace(/^\?+/g, "").split("&"), s4 = 0; s4 < r4.length; s4++) {
      var n4 = r4[s4].split("=");
      if (n4[0] === i5) {
        e6 = n4;
        break;
      }
    }
    if (!x4(e6) || e6.length < 2)
      return "";
    var o5 = e6[1];
    try {
      o5 = decodeURIComponent(o5);
    } catch (t5) {
      N2.error("Skipping decoding for malformed query param: " + o5);
    }
    return o5.replace(/\+/g, " ");
  };
  var ki = function(t4, i5, e6) {
    if (!t4 || !i5 || !i5.length)
      return t4;
    for (var r4 = t4.split("#"), s4 = r4[0] || "", n4 = r4[1], o5 = s4.split("?"), a5 = o5[1], l5 = o5[0], u4 = (a5 || "").split("&"), h4 = [], d4 = 0; d4 < u4.length; d4++) {
      var v4 = u4[d4].split("=");
      x4(v4) && (i5.includes(v4[0]) ? h4.push(v4[0] + "=" + e6) : h4.push(u4[d4]));
    }
    var c4 = l5;
    return null != a5 && (c4 += "?" + h4.join("&")), null != n4 && (c4 += "#" + n4), c4;
  };
  var xi = function(t4, i5) {
    var e6 = t4.match(new RegExp(i5 + "=([^&]*)"));
    return e6 ? e6[1] : null;
  };
  var Ei = z3("[AutoCapture]");
  function Ii(t4, i5) {
    return i5.length > t4 ? i5.slice(0, t4) + "..." : i5;
  }
  function Pi(t4) {
    if (t4.previousElementSibling)
      return t4.previousElementSibling;
    var i5 = t4;
    do {
      i5 = i5.previousSibling;
    } while (i5 && !Gt(i5));
    return i5;
  }
  function Ri(t4, i5, e6, r4) {
    var s4 = t4.tagName.toLowerCase(), n4 = { tag_name: s4 };
    ei.indexOf(s4) > -1 && !e6 && ("a" === s4.toLowerCase() || "button" === s4.toLowerCase() ? n4.$el_text = Ii(1024, fi(t4)) : n4.$el_text = Ii(1024, ti(t4)));
    var o5 = Qt(t4);
    o5.length > 0 && (n4.classes = o5.filter(function(t5) {
      return "" !== t5;
    })), J2(t4.attributes, function(e7) {
      var s5;
      if ((!oi(t4) || -1 !== ["name", "id", "class", "aria-label"].indexOf(e7.name)) && ((null == r4 || !r4.includes(e7.name)) && !i5 && ci(e7.value) && (s5 = e7.name, !T3(s5) || "_ngcontent" !== s5.substring(0, 10) && "_nghost" !== s5.substring(0, 7)))) {
        var o6 = e7.value;
        "class" === e7.name && (o6 = Yt(o6).join(" ")), n4["attr__" + e7.name] = Ii(1024, o6);
      }
    });
    for (var a5 = 1, l5 = 1, u4 = t4; u4 = Pi(u4); )
      a5++, u4.tagName === t4.tagName && l5++;
    return n4.nth_child = a5, n4.nth_of_type = l5, n4;
  }
  function Ti(i5, e6) {
    for (var r4, s4, { e: n4, maskAllElementAttributes: o5, maskAllText: a5, elementAttributeIgnoreList: l5, elementsChainAsString: u4 } = e6, h4 = [i5], d4 = i5; d4.parentNode && !Jt(d4, "body"); )
      Kt(d4.parentNode) ? (h4.push(d4.parentNode.host), d4 = d4.parentNode.host) : (h4.push(d4.parentNode), d4 = d4.parentNode);
    var v4, c4 = [], f4 = {}, p5 = false, g4 = false;
    if (J2(h4, (t4) => {
      var i6 = ni(t4);
      "a" === t4.tagName.toLowerCase() && (p5 = t4.getAttribute("href"), p5 = i6 && p5 && ci(p5) && p5), m3(Qt(t4), "ph-no-capture") && (g4 = true), c4.push(Ri(t4, o5, a5, l5));
      var e7 = function(t5) {
        if (!ni(t5))
          return {};
        var i7 = {};
        return J2(t5.attributes, function(t6) {
          if (t6.name && 0 === t6.name.indexOf("data-ph-capture-attribute")) {
            var e8 = t6.name.replace("data-ph-capture-attribute-", ""), r5 = t6.value;
            e8 && r5 && ci(r5) && (i7[e8] = r5);
          }
        }), i7;
      }(t4);
      V2(f4, e7);
    }), g4)
      return { props: {}, explicitNoCapture: g4 };
    if (a5 || ("a" === i5.tagName.toLowerCase() || "button" === i5.tagName.toLowerCase() ? c4[0].$el_text = fi(i5) : c4[0].$el_text = ti(i5)), p5) {
      var _3, b2;
      c4[0].attr__href = p5;
      var y5 = null == (_3 = wi(p5)) ? void 0 : _3.host, w4 = null == t3 || null == (b2 = t3.location) ? void 0 : b2.host;
      y5 && w4 && y5 !== w4 && (v4 = p5);
    }
    return { props: V2({ $event_type: n4.type, $ce_version: 1 }, u4 ? {} : { $elements: c4 }, { $elements_chain: gi(c4) }, null != (r4 = c4[0]) && r4.$el_text ? { $el_text: null == (s4 = c4[0]) ? void 0 : s4.$el_text } : {}, v4 && "click" === n4.type ? { $external_click_url: v4 } : {}, f4) };
  }
  var Mi = class {
    constructor(t4) {
      this.i = false, this.o = null, this.rageclicks = new bi(), this.h = false, this.instance = t4, this.m = null;
    }
    get S() {
      var t4, i5, e6 = I2(this.instance.config.autocapture) ? this.instance.config.autocapture : {};
      return e6.url_allowlist = null == (t4 = e6.url_allowlist) ? void 0 : t4.map((t5) => new RegExp(t5)), e6.url_ignorelist = null == (i5 = e6.url_ignorelist) ? void 0 : i5.map((t5) => new RegExp(t5)), e6;
    }
    $() {
      if (this.isBrowserSupported()) {
        if (t3 && o4) {
          var i5 = (i6) => {
            i6 = i6 || (null == t3 ? void 0 : t3.event);
            try {
              this.k(i6);
            } catch (t4) {
              Ei.error("Failed to capture event", t4);
            }
          };
          if (st(o4, "submit", i5, { capture: true }), st(o4, "change", i5, { capture: true }), st(o4, "click", i5, { capture: true }), this.S.capture_copied_text) {
            var e6 = (i6) => {
              i6 = i6 || (null == t3 ? void 0 : t3.event), this.k(i6, f3);
            };
            st(o4, "copy", e6, { capture: true }), st(o4, "cut", e6, { capture: true });
          }
        }
      } else
        Ei.info("Disabling Automatic Event Collection because this browser is not supported");
    }
    startIfEnabled() {
      this.isEnabled && !this.i && (this.$(), this.i = true);
    }
    onRemoteConfig(t4) {
      t4.elementsChainAsString && (this.h = t4.elementsChainAsString), this.instance.persistence && this.instance.persistence.register({ [lt]: !!t4.autocapture_opt_out }), this.o = !!t4.autocapture_opt_out, this.startIfEnabled();
    }
    setElementSelectors(t4) {
      this.m = t4;
    }
    getElementSelectors(t4) {
      var i5, e6 = [];
      return null == (i5 = this.m) || i5.forEach((i6) => {
        var r4 = null == o4 ? void 0 : o4.querySelectorAll(i6);
        null == r4 || r4.forEach((r5) => {
          t4 === r5 && e6.push(i6);
        });
      }), e6;
    }
    get isEnabled() {
      var t4, i5, e6 = null == (t4 = this.instance.persistence) ? void 0 : t4.props[lt], r4 = this.o;
      if (C4(r4) && !A3(e6) && !this.instance.I())
        return false;
      var s4 = null !== (i5 = this.o) && void 0 !== i5 ? i5 : !!e6;
      return !!this.instance.config.autocapture && !s4;
    }
    k(i5, e6) {
      if (void 0 === e6 && (e6 = "$autocapture"), this.isEnabled) {
        var r4, s4 = ii(i5);
        if (Vt(s4) && (s4 = s4.parentNode || null), "$autocapture" === e6 && "click" === i5.type && i5 instanceof MouseEvent)
          this.instance.config.rageclick && null != (r4 = this.rageclicks) && r4.isRageClick(i5.clientX, i5.clientY, (/* @__PURE__ */ new Date()).getTime()) && this.k(i5, "$rageclick");
        var n4 = e6 === f3;
        if (s4 && si(s4, i5, this.S, n4, n4 ? ["copy", "cut"] : void 0)) {
          var { props: o5, explicitNoCapture: a5 } = Ti(s4, { e: i5, maskAllElementAttributes: this.instance.config.mask_all_element_attributes, maskAllText: this.instance.config.mask_all_text, elementAttributeIgnoreList: this.S.element_attribute_ignorelist, elementsChainAsString: this.h });
          if (a5)
            return false;
          var l5 = this.getElementSelectors(s4);
          if (l5 && l5.length > 0 && (o5.$element_selectors = l5), e6 === f3) {
            var u4, h4 = Zt(null == t3 || null == (u4 = t3.getSelection()) ? void 0 : u4.toString()), d4 = i5.type || "clipboard";
            if (!h4)
              return false;
            o5.$selected_content = h4, o5.$copy_type = d4;
          }
          return this.instance.capture(e6, o5), true;
        }
      }
    }
    isBrowserSupported() {
      return E2(null == o4 ? void 0 : o4.querySelectorAll);
    }
  };
  Math.trunc || (Math.trunc = function(t4) {
    return t4 < 0 ? Math.ceil(t4) : Math.floor(t4);
  }), Number.isInteger || (Number.isInteger = function(t4) {
    return O2(t4) && isFinite(t4) && Math.floor(t4) === t4;
  });
  var Ci = "0123456789abcdef";
  var Fi = class _Fi {
    constructor(t4) {
      if (this.bytes = t4, 16 !== t4.length)
        throw new TypeError("not 128-bit length");
    }
    static fromFieldsV7(t4, i5, e6, r4) {
      if (!Number.isInteger(t4) || !Number.isInteger(i5) || !Number.isInteger(e6) || !Number.isInteger(r4) || t4 < 0 || i5 < 0 || e6 < 0 || r4 < 0 || t4 > 281474976710655 || i5 > 4095 || e6 > 1073741823 || r4 > 4294967295)
        throw new RangeError("invalid field value");
      var s4 = new Uint8Array(16);
      return s4[0] = t4 / Math.pow(2, 40), s4[1] = t4 / Math.pow(2, 32), s4[2] = t4 / Math.pow(2, 24), s4[3] = t4 / Math.pow(2, 16), s4[4] = t4 / Math.pow(2, 8), s4[5] = t4, s4[6] = 112 | i5 >>> 8, s4[7] = i5, s4[8] = 128 | e6 >>> 24, s4[9] = e6 >>> 16, s4[10] = e6 >>> 8, s4[11] = e6, s4[12] = r4 >>> 24, s4[13] = r4 >>> 16, s4[14] = r4 >>> 8, s4[15] = r4, new _Fi(s4);
    }
    toString() {
      for (var t4 = "", i5 = 0; i5 < this.bytes.length; i5++)
        t4 = t4 + Ci.charAt(this.bytes[i5] >>> 4) + Ci.charAt(15 & this.bytes[i5]), 3 !== i5 && 5 !== i5 && 7 !== i5 && 9 !== i5 || (t4 += "-");
      if (36 !== t4.length)
        throw new Error("Invalid UUIDv7 was generated");
      return t4;
    }
    clone() {
      return new _Fi(this.bytes.slice(0));
    }
    equals(t4) {
      return 0 === this.compareTo(t4);
    }
    compareTo(t4) {
      for (var i5 = 0; i5 < 16; i5++) {
        var e6 = this.bytes[i5] - t4.bytes[i5];
        if (0 !== e6)
          return Math.sign(e6);
      }
      return 0;
    }
  };
  var Oi = class {
    constructor() {
      this.P = 0, this.R = 0, this.T = new Li();
    }
    generate() {
      var t4 = this.generateOrAbort();
      if (R(t4)) {
        this.P = 0;
        var i5 = this.generateOrAbort();
        if (R(i5))
          throw new Error("Could not generate UUID after timestamp reset");
        return i5;
      }
      return t4;
    }
    generateOrAbort() {
      var t4 = Date.now();
      if (t4 > this.P)
        this.P = t4, this.M();
      else {
        if (!(t4 + 1e4 > this.P))
          return;
        this.R++, this.R > 4398046511103 && (this.P++, this.M());
      }
      return Fi.fromFieldsV7(this.P, Math.trunc(this.R / Math.pow(2, 30)), this.R & Math.pow(2, 30) - 1, this.T.nextUint32());
    }
    M() {
      this.R = 1024 * this.T.nextUint32() + (1023 & this.T.nextUint32());
    }
  };
  var Ai;
  var Di = (t4) => {
    if ("undefined" != typeof UUIDV7_DENY_WEAK_RNG && UUIDV7_DENY_WEAK_RNG)
      throw new Error("no cryptographically strong RNG available");
    for (var i5 = 0; i5 < t4.length; i5++)
      t4[i5] = 65536 * Math.trunc(65536 * Math.random()) + Math.trunc(65536 * Math.random());
    return t4;
  };
  t3 && !R(t3.crypto) && crypto.getRandomValues && (Di = (t4) => crypto.getRandomValues(t4));
  var Li = class {
    constructor() {
      this.C = new Uint32Array(8), this.F = 1 / 0;
    }
    nextUint32() {
      return this.F >= this.C.length && (Di(this.C), this.F = 0), this.C[this.F++];
    }
  };
  var ji = () => Ni().toString();
  var Ni = () => (Ai || (Ai = new Oi())).generate();
  var zi = "";
  var Ui = /[a-z0-9][a-z0-9-]+\.[a-z]{2,}$/i;
  function qi(t4, i5) {
    if (i5) {
      var e6 = function(t5, i6) {
        if (void 0 === i6 && (i6 = o4), zi)
          return zi;
        if (!i6)
          return "";
        if (["localhost", "127.0.0.1"].includes(t5))
          return "";
        for (var e7 = t5.split("."), r5 = Math.min(e7.length, 8), s4 = "dmn_chk_" + ji(); !zi && r5--; ) {
          var n4 = e7.slice(r5).join("."), a5 = s4 + "=1;domain=." + n4 + ";path=/";
          i6.cookie = a5 + ";max-age=3", i6.cookie.includes(s4) && (i6.cookie = a5 + ";max-age=0", zi = n4);
        }
        return zi;
      }(t4);
      if (!e6) {
        var r4 = ((t5) => {
          var i6 = t5.match(Ui);
          return i6 ? i6[0] : "";
        })(t4);
        r4 !== e6 && N2.info("Warning: cookie subdomain discovery mismatch", r4, e6), e6 = r4;
      }
      return e6 ? "; domain=." + e6 : "";
    }
    return "";
  }
  var Bi = { O: () => !!o4, A: function(t4) {
    N2.error("cookieStore error: " + t4);
  }, D: function(t4) {
    if (o4) {
      try {
        for (var i5 = t4 + "=", e6 = o4.cookie.split(";").filter((t5) => t5.length), r4 = 0; r4 < e6.length; r4++) {
          for (var s4 = e6[r4]; " " == s4.charAt(0); )
            s4 = s4.substring(1, s4.length);
          if (0 === s4.indexOf(i5))
            return decodeURIComponent(s4.substring(i5.length, s4.length));
        }
      } catch (t5) {
      }
      return null;
    }
  }, L: function(t4) {
    var i5;
    try {
      i5 = JSON.parse(Bi.D(t4)) || {};
    } catch (t5) {
    }
    return i5;
  }, j: function(t4, i5, e6, r4, s4) {
    if (o4)
      try {
        var n4 = "", a5 = "", l5 = qi(o4.location.hostname, r4);
        if (e6) {
          var u4 = /* @__PURE__ */ new Date();
          u4.setTime(u4.getTime() + 24 * e6 * 60 * 60 * 1e3), n4 = "; expires=" + u4.toUTCString();
        }
        s4 && (a5 = "; secure");
        var h4 = t4 + "=" + encodeURIComponent(JSON.stringify(i5)) + n4 + "; SameSite=Lax; path=/" + l5 + a5;
        return h4.length > 3686.4 && N2.warn("cookieStore warning: large cookie, len=" + h4.length), o4.cookie = h4, h4;
      } catch (t5) {
        return;
      }
  }, N: function(t4, i5) {
    try {
      Bi.j(t4, "", -1, i5);
    } catch (t5) {
      return;
    }
  } };
  var Hi = null;
  var Wi = { O: function() {
    if (!C4(Hi))
      return Hi;
    var i5 = true;
    if (R(t3))
      i5 = false;
    else
      try {
        var e6 = "__mplssupport__";
        Wi.j(e6, "xyz"), '"xyz"' !== Wi.D(e6) && (i5 = false), Wi.N(e6);
      } catch (t4) {
        i5 = false;
      }
    return i5 || N2.error("localStorage unsupported; falling back to cookie store"), Hi = i5, i5;
  }, A: function(t4) {
    N2.error("localStorage error: " + t4);
  }, D: function(i5) {
    try {
      return null == t3 ? void 0 : t3.localStorage.getItem(i5);
    } catch (t4) {
      Wi.A(t4);
    }
    return null;
  }, L: function(t4) {
    try {
      return JSON.parse(Wi.D(t4)) || {};
    } catch (t5) {
    }
    return null;
  }, j: function(i5, e6) {
    try {
      null == t3 || t3.localStorage.setItem(i5, JSON.stringify(e6));
    } catch (t4) {
      Wi.A(t4);
    }
  }, N: function(i5) {
    try {
      null == t3 || t3.localStorage.removeItem(i5);
    } catch (t4) {
      Wi.A(t4);
    }
  } };
  var Gi = ["distinct_id", $t, kt, Ut, zt];
  var Ji = B3({}, Wi, { L: function(t4) {
    try {
      var i5 = {};
      try {
        i5 = Bi.L(t4) || {};
      } catch (t5) {
      }
      var e6 = V2(i5, JSON.parse(Wi.D(t4) || "{}"));
      return Wi.j(t4, e6), e6;
    } catch (t5) {
    }
    return null;
  }, j: function(t4, i5, e6, r4, s4, n4) {
    try {
      Wi.j(t4, i5, void 0, void 0, n4);
      var o5 = {};
      Gi.forEach((t5) => {
        i5[t5] && (o5[t5] = i5[t5]);
      }), Object.keys(o5).length && Bi.j(t4, o5, e6, r4, s4, n4);
    } catch (t5) {
      Wi.A(t5);
    }
  }, N: function(i5, e6) {
    try {
      null == t3 || t3.localStorage.removeItem(i5), Bi.N(i5, e6);
    } catch (t4) {
      Wi.A(t4);
    }
  } });
  var Vi = {};
  var Ki = { O: function() {
    return true;
  }, A: function(t4) {
    N2.error("memoryStorage error: " + t4);
  }, D: function(t4) {
    return Vi[t4] || null;
  }, L: function(t4) {
    return Vi[t4] || null;
  }, j: function(t4, i5) {
    Vi[t4] = i5;
  }, N: function(t4) {
    delete Vi[t4];
  } };
  var Yi = null;
  var Xi = { O: function() {
    if (!C4(Yi))
      return Yi;
    if (Yi = true, R(t3))
      Yi = false;
    else
      try {
        var i5 = "__support__";
        Xi.j(i5, "xyz"), '"xyz"' !== Xi.D(i5) && (Yi = false), Xi.N(i5);
      } catch (t4) {
        Yi = false;
      }
    return Yi;
  }, A: function(t4) {
    N2.error("sessionStorage error: ", t4);
  }, D: function(i5) {
    try {
      return null == t3 ? void 0 : t3.sessionStorage.getItem(i5);
    } catch (t4) {
      Xi.A(t4);
    }
    return null;
  }, L: function(t4) {
    try {
      return JSON.parse(Xi.D(t4)) || null;
    } catch (t5) {
    }
    return null;
  }, j: function(i5, e6) {
    try {
      null == t3 || t3.sessionStorage.setItem(i5, JSON.stringify(e6));
    } catch (t4) {
      Xi.A(t4);
    }
  }, N: function(i5) {
    try {
      null == t3 || t3.sessionStorage.removeItem(i5);
    } catch (t4) {
      Xi.A(t4);
    }
  } };
  var Qi = function(t4) {
    return t4[t4.PENDING = -1] = "PENDING", t4[t4.DENIED = 0] = "DENIED", t4[t4.GRANTED = 1] = "GRANTED", t4;
  }({});
  var Zi = class {
    constructor(t4) {
      this._instance = t4;
    }
    get S() {
      return this._instance.config;
    }
    get consent() {
      return this.U() ? Qi.DENIED : this.q;
    }
    isOptedOut() {
      return this.consent === Qi.DENIED || this.consent === Qi.PENDING && this.S.opt_out_capturing_by_default;
    }
    isOptedIn() {
      return !this.isOptedOut();
    }
    optInOut(t4) {
      this.B.j(this.H, t4 ? 1 : 0, this.S.cookie_expiration, this.S.cross_subdomain_cookie, this.S.secure_cookie);
    }
    reset() {
      this.B.N(this.H, this.S.cross_subdomain_cookie);
    }
    get H() {
      var { token: t4, opt_out_capturing_cookie_prefix: i5 } = this._instance.config;
      return (i5 || "__ph_opt_in_out_") + t4;
    }
    get q() {
      var t4 = this.B.D(this.H);
      return "1" === t4 ? Qi.GRANTED : "0" === t4 ? Qi.DENIED : Qi.PENDING;
    }
    get B() {
      if (!this.W) {
        var t4 = this.S.opt_out_capturing_persistence_type;
        this.W = "localStorage" === t4 ? Wi : Bi;
        var i5 = "localStorage" === t4 ? Bi : Wi;
        i5.D(this.H) && (this.W.D(this.H) || this.optInOut("1" === i5.D(this.H)), i5.N(this.H, this.S.cross_subdomain_cookie));
      }
      return this.W;
    }
    U() {
      return !!this.S.respect_dnt && !!rt([null == n3 ? void 0 : n3.doNotTrack, null == n3 ? void 0 : n3.msDoNotTrack, v3.doNotTrack], (t4) => m3([true, 1, "1", "yes"], t4));
    }
  };
  var te = z3("[Dead Clicks]");
  var ie = () => true;
  var ee = (t4) => {
    var i5, e6 = !(null == (i5 = t4.instance.persistence) || !i5.get_property(ct)), r4 = t4.instance.config.capture_dead_clicks;
    return A3(r4) ? r4 : e6;
  };
  var re2 = class {
    get lazyLoadedDeadClicksAutocapture() {
      return this.G;
    }
    constructor(t4, i5, e6) {
      this.instance = t4, this.isEnabled = i5, this.onCapture = e6, this.startIfEnabled();
    }
    onRemoteConfig(t4) {
      this.instance.persistence && this.instance.persistence.register({ [ct]: null == t4 ? void 0 : t4.captureDeadClicks }), this.startIfEnabled();
    }
    startIfEnabled() {
      this.isEnabled(this) && this.J(() => {
        this.V();
      });
    }
    J(t4) {
      var i5, e6;
      null != (i5 = v3.__PosthogExtensions__) && i5.initDeadClicksAutocapture && t4(), null == (e6 = v3.__PosthogExtensions__) || null == e6.loadExternalDependency || e6.loadExternalDependency(this.instance, "dead-clicks-autocapture", (i6) => {
        i6 ? te.error("failed to load script", i6) : t4();
      });
    }
    V() {
      var t4;
      if (o4) {
        if (!this.G && null != (t4 = v3.__PosthogExtensions__) && t4.initDeadClicksAutocapture) {
          var i5 = I2(this.instance.config.capture_dead_clicks) ? this.instance.config.capture_dead_clicks : {};
          i5.__onCapture = this.onCapture, this.G = v3.__PosthogExtensions__.initDeadClicksAutocapture(this.instance, i5), this.G.start(o4), te.info("starting...");
        }
      } else
        te.error("`document` not found. Cannot start.");
    }
    stop() {
      this.G && (this.G.stop(), this.G = void 0, te.info("stopping..."));
    }
  };
  function se(t4, i5, e6, r4, s4) {
    return i5 > e6 && (N2.warn("min cannot be greater than max."), i5 = e6), O2(t4) ? t4 > e6 ? (r4 && N2.warn(r4 + " cannot be  greater than max: " + e6 + ". Using max value instead."), e6) : t4 < i5 ? (r4 && N2.warn(r4 + " cannot be less than min: " + i5 + ". Using min value instead."), i5) : t4 : (r4 && N2.warn(r4 + " must be a number. using max or fallback. max: " + e6 + ", fallback: " + s4), se(s4 || e6, i5, e6, r4));
  }
  var ne = class {
    constructor(t4) {
      this.K = {}, this.Y = () => {
        Object.keys(this.K).forEach((t5) => {
          var i5 = this.X(t5) + this.Z;
          i5 >= this.tt ? delete this.K[t5] : this.it(t5, i5);
        });
      }, this.X = (t5) => this.K[String(t5)], this.it = (t5, i5) => {
        this.K[String(t5)] = i5;
      }, this.consumeRateLimit = (t5) => {
        var i5, e6 = null !== (i5 = this.X(t5)) && void 0 !== i5 ? i5 : this.tt;
        if (0 === (e6 = Math.max(e6 - 1, 0)))
          return true;
        this.it(t5, e6);
        var r4, s4 = 0 === e6;
        s4 && (null == (r4 = this.et) || r4.call(this, t5));
        return s4;
      }, this.rt = t4, this.et = this.rt.et, this.tt = se(this.rt.bucketSize, 0, 100, "rate limiter bucket size"), this.Z = se(this.rt.refillRate, 0, this.tt, "rate limiter refill rate"), this.st = se(this.rt.refillInterval, 0, 864e5, "rate limiter refill interval"), setInterval(() => {
        this.Y();
      }, this.st);
    }
  };
  var oe = z3("[ExceptionAutocapture]");
  var ae = class {
    constructor(i5) {
      var e6, r4, s4;
      this.nt = () => {
        var i6;
        if (t3 && this.isEnabled && null != (i6 = v3.__PosthogExtensions__) && i6.errorWrappingFunctions) {
          var e7 = v3.__PosthogExtensions__.errorWrappingFunctions.wrapOnError, r5 = v3.__PosthogExtensions__.errorWrappingFunctions.wrapUnhandledRejection, s5 = v3.__PosthogExtensions__.errorWrappingFunctions.wrapConsoleError;
          try {
            !this.ot && this.S.capture_unhandled_errors && (this.ot = e7(this.captureException.bind(this))), !this.lt && this.S.capture_unhandled_rejections && (this.lt = r5(this.captureException.bind(this))), !this.ut && this.S.capture_console_errors && (this.ut = s5(this.captureException.bind(this)));
          } catch (t4) {
            oe.error("failed to start", t4), this.ht();
          }
        }
      }, this._instance = i5, this.dt = !(null == (e6 = this._instance.persistence) || !e6.props[ht]), this.S = this.vt(), this.ct = new ne({ refillRate: null !== (r4 = this._instance.config.error_tracking.__exceptionRateLimiterRefillRate) && void 0 !== r4 ? r4 : 1, bucketSize: null !== (s4 = this._instance.config.error_tracking.__exceptionRateLimiterBucketSize) && void 0 !== s4 ? s4 : 10, refillInterval: 1e4 }), this.startIfEnabled();
    }
    vt() {
      var t4 = this._instance.config.capture_exceptions, i5 = { capture_unhandled_errors: false, capture_unhandled_rejections: false, capture_console_errors: false };
      return I2(t4) ? i5 = B3({}, i5, t4) : (R(t4) ? this.dt : t4) && (i5 = B3({}, i5, { capture_unhandled_errors: true, capture_unhandled_rejections: true })), i5;
    }
    get isEnabled() {
      return this.S.capture_console_errors || this.S.capture_unhandled_errors || this.S.capture_unhandled_rejections;
    }
    startIfEnabled() {
      this.isEnabled && (oe.info("enabled"), this.J(this.nt));
    }
    J(t4) {
      var i5, e6;
      null != (i5 = v3.__PosthogExtensions__) && i5.errorWrappingFunctions && t4(), null == (e6 = v3.__PosthogExtensions__) || null == e6.loadExternalDependency || e6.loadExternalDependency(this._instance, "exception-autocapture", (i6) => {
        if (i6)
          return oe.error("failed to load script", i6);
        t4();
      });
    }
    ht() {
      var t4, i5, e6;
      null == (t4 = this.ot) || t4.call(this), this.ot = void 0, null == (i5 = this.lt) || i5.call(this), this.lt = void 0, null == (e6 = this.ut) || e6.call(this), this.ut = void 0;
    }
    onRemoteConfig(t4) {
      var i5 = t4.autocaptureExceptions;
      this.dt = !!i5 || false, this.S = this.vt(), this._instance.persistence && this._instance.persistence.register({ [ht]: this.dt }), this.startIfEnabled();
    }
    captureException(t4) {
      var i5, e6 = this._instance.requestRouter.endpointFor("ui");
      t4.$exception_personURL = e6 + "/project/" + this._instance.config.token + "/person/" + this._instance.get_distinct_id();
      var r4 = null !== (i5 = t4.$exception_list[0].type) && void 0 !== i5 ? i5 : "Exception";
      this.ct.consumeRateLimit(r4) ? oe.info("Skipping exception capture because of client rate limiting.", { exception: t4.$exception_list[0].type }) : this._instance.exceptions.sendExceptionEvent(t4);
    }
  };
  function le(t4) {
    return !R(Event) && ue(t4, Event);
  }
  function ue(t4, i5) {
    try {
      return t4 instanceof i5;
    } catch (t5) {
      return false;
    }
  }
  function he(t4) {
    switch (Object.prototype.toString.call(t4)) {
      case "[object Error]":
      case "[object Exception]":
      case "[object DOMException]":
      case "[object DOMError]":
        return true;
      default:
        return ue(t4, Error);
    }
  }
  function de(t4, i5) {
    return Object.prototype.toString.call(t4) === "[object " + i5 + "]";
  }
  function ve(t4) {
    return de(t4, "DOMError");
  }
  var ce = /\(error: (.*)\)/;
  var fe = 50;
  var pe = "?";
  function ge(t4, i5, e6, r4) {
    var s4 = { platform: "web:javascript", filename: t4, function: "<anonymous>" === i5 ? pe : i5, in_app: true };
    return R(e6) || (s4.lineno = e6), R(r4) || (s4.colno = r4), s4;
  }
  var _e = /^\s*at (\S+?)(?::(\d+))(?::(\d+))\s*$/i;
  var me = /^\s*at (?:(.+?\)(?: \[.+\])?|.*?) ?\((?:address at )?)?(?:async )?((?:<anonymous>|[-a-z]+:|.*bundle|\/)?.*?)(?::(\d+))?(?::(\d+))?\)?\s*$/i;
  var be = /\((\S*)(?::(\d+))(?::(\d+))\)/;
  var ye = /^\s*(.*?)(?:\((.*?)\))?(?:^|@)?((?:[-a-z]+)?:\/.*?|\[native code\]|[^@]*(?:bundle|\d+\.js)|\/[\w\-. /=]+)(?::(\d+))?(?::(\d+))?\s*$/i;
  var we = /(\S+) line (\d+)(?: > eval line \d+)* > eval/i;
  var Se = function() {
    for (var t4 = arguments.length, i5 = new Array(t4), e6 = 0; e6 < t4; e6++)
      i5[e6] = arguments[e6];
    var r4 = i5.sort((t5, i6) => t5[0] - i6[0]).map((t5) => t5[1]);
    return function(t5, i6) {
      void 0 === i6 && (i6 = 0);
      for (var e7 = [], s4 = t5.split("\n"), n4 = i6; n4 < s4.length; n4++) {
        var o5 = s4[n4];
        if (!(o5.length > 1024)) {
          var a5 = ce.test(o5) ? o5.replace(ce, "$1") : o5;
          if (!a5.match(/\S*Error: /)) {
            for (var l5 of r4) {
              var u4 = l5(a5);
              if (u4) {
                e7.push(u4);
                break;
              }
            }
            if (e7.length >= fe)
              break;
          }
        }
      }
      return function(t6) {
        if (!t6.length)
          return [];
        var i7 = Array.from(t6);
        return i7.reverse(), i7.slice(0, fe).map((t7) => B3({}, t7, { filename: t7.filename || $e(i7).filename, function: t7.function || pe }));
      }(e7);
    };
  }(...[[30, (t4) => {
    var i5 = _e.exec(t4);
    if (i5) {
      var [, e6, r4, s4] = i5;
      return ge(e6, pe, +r4, +s4);
    }
    var n4 = me.exec(t4);
    if (n4) {
      if (n4[2] && 0 === n4[2].indexOf("eval")) {
        var o5 = be.exec(n4[2]);
        o5 && (n4[2] = o5[1], n4[3] = o5[2], n4[4] = o5[3]);
      }
      var [a5, l5] = Ie(n4[1] || pe, n4[2]);
      return ge(l5, a5, n4[3] ? +n4[3] : void 0, n4[4] ? +n4[4] : void 0);
    }
  }], [50, (t4) => {
    var i5 = ye.exec(t4);
    if (i5) {
      if (i5[3] && i5[3].indexOf(" > eval") > -1) {
        var e6 = we.exec(i5[3]);
        e6 && (i5[1] = i5[1] || "eval", i5[3] = e6[1], i5[4] = e6[2], i5[5] = "");
      }
      var r4 = i5[3], s4 = i5[1] || pe;
      return [s4, r4] = Ie(s4, r4), ge(r4, s4, i5[4] ? +i5[4] : void 0, i5[5] ? +i5[5] : void 0);
    }
  }]]);
  function $e(t4) {
    return t4[t4.length - 1] || {};
  }
  var ke;
  var xe;
  var Ee;
  var Ie = (t4, i5) => {
    var e6 = -1 !== t4.indexOf("safari-extension"), r4 = -1 !== t4.indexOf("safari-web-extension");
    return e6 || r4 ? [-1 !== t4.indexOf("@") ? t4.split("@")[0] : pe, e6 ? "safari-extension:" + i5 : "safari-web-extension:" + i5] : [t4, i5];
  };
  var Pe = /^(?:[Uu]ncaught (?:exception: )?)?(?:((?:Eval|Internal|Range|Reference|Syntax|Type|URI|)Error): )?(.*)$/i;
  function Re(t4, i5) {
    void 0 === i5 && (i5 = 0);
    var e6 = t4.stacktrace || t4.stack || "", r4 = function(t5) {
      if (t5 && Te.test(t5.message))
        return 1;
      return 0;
    }(t4);
    try {
      var s4 = Se, n4 = function(t5, i6) {
        var e7 = function(t6) {
          var i7 = globalThis._posthogChunkIds;
          if (!i7)
            return {};
          var e8 = Object.keys(i7);
          return Ee && e8.length === xe || (xe = e8.length, Ee = e8.reduce((e9, r5) => {
            ke || (ke = {});
            var s5 = ke[r5];
            if (s5)
              e9[s5[0]] = s5[1];
            else
              for (var n5 = t6(r5), o5 = n5.length - 1; o5 >= 0; o5--) {
                var a5 = n5[o5], l5 = null == a5 ? void 0 : a5.filename, u4 = i7[r5];
                if (l5 && u4) {
                  e9[l5] = u4, ke[r5] = [l5, u4];
                  break;
                }
              }
            return e9;
          }, {})), Ee;
        }(i6);
        return t5.forEach((t6) => {
          t6.filename && (t6.chunk_id = e7[t6.filename]);
        }), t5;
      }(s4(e6, r4), s4);
      return n4.slice(0, n4.length - i5);
    } catch (t5) {
    }
    return [];
  }
  var Te = /Minified React error #\d+;/i;
  function Me(t4, i5) {
    var e6, r4, s4 = Re(t4), n4 = null === (e6 = null == i5 ? void 0 : i5.handled) || void 0 === e6 || e6, o5 = null !== (r4 = null == i5 ? void 0 : i5.synthetic) && void 0 !== r4 && r4;
    return { type: null != i5 && i5.overrideExceptionType ? i5.overrideExceptionType : t4.name, value: function(t5) {
      var i6 = t5.message;
      if (i6.error && "string" == typeof i6.error.message)
        return String(i6.error.message);
      return String(i6);
    }(t4), stacktrace: { frames: s4, type: "raw" }, mechanism: { handled: n4, synthetic: o5 } };
  }
  function Ce(t4, i5) {
    var e6 = Me(t4, i5);
    return t4.cause && he(t4.cause) && t4.cause !== t4 ? [e6, ...Ce(t4.cause, { handled: null == i5 ? void 0 : i5.handled, synthetic: null == i5 ? void 0 : i5.synthetic })] : [e6];
  }
  function Fe(t4, i5) {
    return { $exception_list: Ce(t4, i5), $exception_level: "error" };
  }
  function Oe(t4, i5) {
    var e6, r4, s4, n4 = null === (e6 = null == i5 ? void 0 : i5.handled) || void 0 === e6 || e6, o5 = null === (r4 = null == i5 ? void 0 : i5.synthetic) || void 0 === r4 || r4, a5 = { type: null != i5 && i5.overrideExceptionType ? i5.overrideExceptionType : null !== (s4 = null == i5 ? void 0 : i5.defaultExceptionType) && void 0 !== s4 ? s4 : "Error", value: t4 || (null == i5 ? void 0 : i5.defaultExceptionMessage), mechanism: { handled: n4, synthetic: o5 } };
    if (null != i5 && i5.syntheticException) {
      var l5 = Re(i5.syntheticException, 1);
      l5.length && (a5.stacktrace = { frames: l5, type: "raw" });
    }
    return { $exception_list: [a5], $exception_level: "error" };
  }
  function Ae(t4) {
    return T3(t4) && !M2(t4) && _2.indexOf(t4) >= 0;
  }
  function De(t4, i5) {
    var e6, r4, s4 = null === (e6 = null == i5 ? void 0 : i5.handled) || void 0 === e6 || e6, n4 = null === (r4 = null == i5 ? void 0 : i5.synthetic) || void 0 === r4 || r4, o5 = null != i5 && i5.overrideExceptionType ? i5.overrideExceptionType : le(t4) ? t4.constructor.name : "Error", a5 = "Non-Error 'exception' captured with keys: " + function(t5, i6) {
      void 0 === i6 && (i6 = 40);
      var e7 = Object.keys(t5);
      if (e7.sort(), !e7.length)
        return "[object has no keys]";
      for (var r5 = e7.length; r5 > 0; r5--) {
        var s5 = e7.slice(0, r5).join(", ");
        if (!(s5.length > i6))
          return r5 === e7.length || s5.length <= i6 ? s5 : s5.slice(0, i6) + "...";
      }
      return "";
    }(t4), l5 = { type: o5, value: a5, mechanism: { handled: s4, synthetic: n4 } };
    if (null != i5 && i5.syntheticException) {
      var u4 = Re(null == i5 ? void 0 : i5.syntheticException, 1);
      u4.length && (l5.stacktrace = { frames: u4, type: "raw" });
    }
    return { $exception_list: [l5], $exception_level: Ae(t4.level) ? t4.level : "error" };
  }
  function Le(t4, i5) {
    var { error: e6, event: r4 } = t4, s4 = { $exception_list: [] }, n4 = e6 || r4;
    if (ve(n4) || function(t5) {
      return de(t5, "DOMException");
    }(n4)) {
      var o5 = n4;
      if (function(t5) {
        return "stack" in t5;
      }(n4))
        s4 = Fe(n4, i5);
      else {
        var a5 = o5.name || (ve(o5) ? "DOMError" : "DOMException"), l5 = o5.message ? a5 + ": " + o5.message : a5;
        s4 = Oe(l5, B3({}, i5, { overrideExceptionType: ve(o5) ? "DOMError" : "DOMException", defaultExceptionMessage: l5 }));
      }
      return "code" in o5 && (s4.$exception_DOMException_code = "" + o5.code), s4;
    }
    if (function(t5) {
      return de(t5, "ErrorEvent");
    }(n4) && n4.error)
      return Fe(n4.error, i5);
    if (he(n4))
      return Fe(n4, i5);
    if (function(t5) {
      return de(t5, "Object");
    }(n4) || le(n4))
      return De(n4, i5);
    if (R(e6) && T3(r4)) {
      var u4 = "Error", h4 = r4, d4 = r4.match(Pe);
      return d4 && (u4 = d4[1], h4 = d4[2]), Oe(h4, B3({}, i5, { overrideExceptionType: u4, defaultExceptionMessage: h4 }));
    }
    return Oe(n4, i5);
  }
  function je(t4, i5, e6) {
    try {
      if (!(i5 in t4))
        return () => {
        };
      var r4 = t4[i5], s4 = e6(r4);
      return E2(s4) && (s4.prototype = s4.prototype || {}, Object.defineProperties(s4, { __posthog_wrapped__: { enumerable: false, value: true } })), t4[i5] = s4, () => {
        t4[i5] = r4;
      };
    } catch (t5) {
      return () => {
      };
    }
  }
  var Ne = class {
    constructor(i5) {
      var e6;
      this._instance = i5, this.ft = (null == t3 || null == (e6 = t3.location) ? void 0 : e6.pathname) || "";
    }
    get isEnabled() {
      return "history_change" === this._instance.config.capture_pageview;
    }
    startIfEnabled() {
      this.isEnabled && (N2.info("History API monitoring enabled, starting..."), this.monitorHistoryChanges());
    }
    stop() {
      this.gt && this.gt(), this.gt = void 0, N2.info("History API monitoring stopped");
    }
    monitorHistoryChanges() {
      var i5, e6;
      if (t3 && t3.history) {
        var r4 = this;
        null != (i5 = t3.history.pushState) && i5.__posthog_wrapped__ || je(t3.history, "pushState", (t4) => function(i6, e7, s4) {
          t4.call(this, i6, e7, s4), r4._t("pushState");
        }), null != (e6 = t3.history.replaceState) && e6.__posthog_wrapped__ || je(t3.history, "replaceState", (t4) => function(i6, e7, s4) {
          t4.call(this, i6, e7, s4), r4._t("replaceState");
        }), this.bt();
      }
    }
    _t(i5) {
      try {
        var e6, r4 = null == t3 || null == (e6 = t3.location) ? void 0 : e6.pathname;
        if (!r4)
          return;
        r4 !== this.ft && this.isEnabled && this._instance.capture("$pageview", { navigation_type: i5 }), this.ft = r4;
      } catch (t4) {
        N2.error("Error capturing " + i5 + " pageview", t4);
      }
    }
    bt() {
      if (!this.gt) {
        var i5 = () => {
          this._t("popstate");
        };
        st(t3, "popstate", i5), this.gt = () => {
          t3 && t3.removeEventListener("popstate", i5);
        };
      }
    }
  };
  function ze(t4) {
    var i5, e6;
    return (null == (i5 = JSON.stringify(t4, (e6 = [], function(t5, i6) {
      if (I2(i6)) {
        for (; e6.length > 0 && e6[e6.length - 1] !== this; )
          e6.pop();
        return e6.includes(i6) ? "[Circular]" : (e6.push(i6), i6);
      }
      return i6;
    }))) ? void 0 : i5.length) || 0;
  }
  function Ue(t4, i5) {
    if (void 0 === i5 && (i5 = 66060288e-1), t4.size >= i5 && t4.data.length > 1) {
      var e6 = Math.floor(t4.data.length / 2), r4 = t4.data.slice(0, e6), s4 = t4.data.slice(e6);
      return [Ue({ size: ze(r4), data: r4, sessionId: t4.sessionId, windowId: t4.windowId }), Ue({ size: ze(s4), data: s4, sessionId: t4.sessionId, windowId: t4.windowId })].flatMap((t5) => t5);
    }
    return [t4];
  }
  var qe = ((t4) => (t4[t4.DomContentLoaded = 0] = "DomContentLoaded", t4[t4.Load = 1] = "Load", t4[t4.FullSnapshot = 2] = "FullSnapshot", t4[t4.IncrementalSnapshot = 3] = "IncrementalSnapshot", t4[t4.Meta = 4] = "Meta", t4[t4.Custom = 5] = "Custom", t4[t4.Plugin = 6] = "Plugin", t4))(qe || {});
  var Be = ((t4) => (t4[t4.Mutation = 0] = "Mutation", t4[t4.MouseMove = 1] = "MouseMove", t4[t4.MouseInteraction = 2] = "MouseInteraction", t4[t4.Scroll = 3] = "Scroll", t4[t4.ViewportResize = 4] = "ViewportResize", t4[t4.Input = 5] = "Input", t4[t4.TouchMove = 6] = "TouchMove", t4[t4.MediaInteraction = 7] = "MediaInteraction", t4[t4.StyleSheetRule = 8] = "StyleSheetRule", t4[t4.CanvasMutation = 9] = "CanvasMutation", t4[t4.Font = 10] = "Font", t4[t4.Log = 11] = "Log", t4[t4.Drag = 12] = "Drag", t4[t4.StyleDeclaration = 13] = "StyleDeclaration", t4[t4.Selection = 14] = "Selection", t4[t4.AdoptedStyleSheet = 15] = "AdoptedStyleSheet", t4[t4.CustomElement = 16] = "CustomElement", t4))(Be || {});
  var He = "[SessionRecording]";
  var We = "redacted";
  var Ge = { initiatorTypes: ["audio", "beacon", "body", "css", "early-hint", "embed", "fetch", "frame", "iframe", "icon", "image", "img", "input", "link", "navigation", "object", "ping", "script", "track", "video", "xmlhttprequest"], maskRequestFn: (t4) => t4, recordHeaders: false, recordBody: false, recordInitialRequests: false, recordPerformance: false, performanceEntryTypeToObserve: ["first-input", "navigation", "paint", "resource"], payloadSizeLimitBytes: 1e6, payloadHostDenyList: [".lr-ingest.io", ".ingest.sentry.io", ".clarity.ms", "analytics.google.com", "bam.nr-data.net"] };
  var Je = ["authorization", "x-forwarded-for", "authorization", "cookie", "set-cookie", "x-api-key", "x-real-ip", "remote-addr", "forwarded", "proxy-authorization", "x-csrf-token", "x-csrftoken", "x-xsrf-token"];
  var Ve = ["password", "secret", "passwd", "api_key", "apikey", "auth", "credentials", "mysql_pwd", "privatekey", "private_key", "token"];
  var Ke = ["/s/", "/e/", "/i/"];
  function Ye(t4, i5, e6, r4) {
    if (F2(t4))
      return t4;
    var s4 = (null == i5 ? void 0 : i5["content-length"]) || function(t5) {
      return new Blob([t5]).size;
    }(t4);
    return T3(s4) && (s4 = parseInt(s4)), s4 > e6 ? He + " " + r4 + " body too large to record (" + s4 + " bytes)" : t4;
  }
  function Xe(t4, i5) {
    if (F2(t4))
      return t4;
    var e6 = t4;
    return ci(e6, false) || (e6 = He + " " + i5 + " body " + We), J2(Ve, (t5) => {
      var r4, s4;
      null != (r4 = e6) && r4.length && -1 !== (null == (s4 = e6) ? void 0 : s4.indexOf(t5)) && (e6 = He + " " + i5 + " body " + We + " as might contain: " + t5);
    }), e6;
  }
  var Qe = (t4, i5) => {
    var e6, r4, s4, n4 = { payloadSizeLimitBytes: Ge.payloadSizeLimitBytes, performanceEntryTypeToObserve: [...Ge.performanceEntryTypeToObserve], payloadHostDenyList: [...i5.payloadHostDenyList || [], ...Ge.payloadHostDenyList] }, o5 = false !== t4.session_recording.recordHeaders && i5.recordHeaders, a5 = false !== t4.session_recording.recordBody && i5.recordBody, l5 = false !== t4.capture_performance && i5.recordPerformance, u4 = (e6 = n4, s4 = Math.min(1e6, null !== (r4 = e6.payloadSizeLimitBytes) && void 0 !== r4 ? r4 : 1e6), (t5) => (null != t5 && t5.requestBody && (t5.requestBody = Ye(t5.requestBody, t5.requestHeaders, s4, "Request")), null != t5 && t5.responseBody && (t5.responseBody = Ye(t5.responseBody, t5.responseHeaders, s4, "Response")), t5)), h4 = (i6) => {
      return u4(((t5, i7) => {
        var e8, r6 = wi(t5.name), s5 = 0 === i7.indexOf("http") ? null == (e8 = wi(i7)) ? void 0 : e8.pathname : i7;
        "/" === s5 && (s5 = "");
        var n5 = null == r6 ? void 0 : r6.pathname.replace(s5 || "", "");
        if (!(r6 && n5 && Ke.some((t6) => 0 === n5.indexOf(t6))))
          return t5;
      })((r5 = (e7 = i6).requestHeaders, F2(r5) || J2(Object.keys(null != r5 ? r5 : {}), (t5) => {
        Je.includes(t5.toLowerCase()) && (r5[t5] = We);
      }), e7), t4.api_host));
      var e7, r5;
    }, d4 = E2(t4.session_recording.maskNetworkRequestFn);
    return d4 && E2(t4.session_recording.maskCapturedNetworkRequestFn) && N2.warn("Both `maskNetworkRequestFn` and `maskCapturedNetworkRequestFn` are defined. `maskNetworkRequestFn` will be ignored."), d4 && (t4.session_recording.maskCapturedNetworkRequestFn = (i6) => {
      var e7 = t4.session_recording.maskNetworkRequestFn({ url: i6.name });
      return B3({}, i6, { name: null == e7 ? void 0 : e7.url });
    }), n4.maskRequestFn = E2(t4.session_recording.maskCapturedNetworkRequestFn) ? (i6) => {
      var e7, r5 = h4(i6);
      return r5 && null !== (e7 = null == t4.session_recording.maskCapturedNetworkRequestFn ? void 0 : t4.session_recording.maskCapturedNetworkRequestFn(r5)) && void 0 !== e7 ? e7 : void 0;
    } : (t5) => function(t6) {
      if (!R(t6))
        return t6.requestBody = Xe(t6.requestBody, "Request"), t6.responseBody = Xe(t6.responseBody, "Response"), t6;
    }(h4(t5)), B3({}, Ge, n4, { recordHeaders: o5, recordBody: a5, recordPerformance: l5, recordInitialRequests: l5 });
  };
  var Ze = class {
    constructor(t4, i5) {
      var e6, r4;
      void 0 === i5 && (i5 = {}), this.yt = {}, this.wt = (t5) => {
        if (!this.yt[t5]) {
          var i6, e7;
          this.yt[t5] = true;
          var r5 = this.St(t5);
          null == (i6 = (e7 = this.rt).onBlockedNode) || i6.call(e7, t5, r5);
        }
      }, this.$t = (t5) => {
        var i6 = this.St(t5);
        if ("svg" !== (null == i6 ? void 0 : i6.nodeName) && i6 instanceof Element) {
          var e7 = i6.closest("svg");
          if (e7)
            return [this._rrweb.mirror.getId(e7), e7];
        }
        return [t5, i6];
      }, this.St = (t5) => this._rrweb.mirror.getNode(t5), this.kt = (t5) => {
        var i6, e7, r5, s4, n4, o5, a5, l5;
        return (null !== (i6 = null == (e7 = t5.removes) ? void 0 : e7.length) && void 0 !== i6 ? i6 : 0) + (null !== (r5 = null == (s4 = t5.attributes) ? void 0 : s4.length) && void 0 !== r5 ? r5 : 0) + (null !== (n4 = null == (o5 = t5.texts) ? void 0 : o5.length) && void 0 !== n4 ? n4 : 0) + (null !== (a5 = null == (l5 = t5.adds) ? void 0 : l5.length) && void 0 !== a5 ? a5 : 0);
      }, this.throttleMutations = (t5) => {
        if (3 !== t5.type || 0 !== t5.data.source)
          return t5;
        var i6 = t5.data, e7 = this.kt(i6);
        i6.attributes && (i6.attributes = i6.attributes.filter((t6) => {
          var [i7] = this.$t(t6.id);
          return !this.ct.consumeRateLimit(i7) && t6;
        }));
        var r5 = this.kt(i6);
        return 0 !== r5 || e7 === r5 ? t5 : void 0;
      }, this._rrweb = t4, this.rt = i5, this.ct = new ne({ bucketSize: null !== (e6 = this.rt.bucketSize) && void 0 !== e6 ? e6 : 100, refillRate: null !== (r4 = this.rt.refillRate) && void 0 !== r4 ? r4 : 10, refillInterval: 1e3, et: this.wt });
    }
  };
  var tr = Uint8Array;
  var ir = Uint16Array;
  var er = Uint32Array;
  var rr = new tr([0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, 0, 0, 0]);
  var sr = new tr([0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 0, 0]);
  var nr = new tr([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]);
  var or = function(t4, i5) {
    for (var e6 = new ir(31), r4 = 0; r4 < 31; ++r4)
      e6[r4] = i5 += 1 << t4[r4 - 1];
    var s4 = new er(e6[30]);
    for (r4 = 1; r4 < 30; ++r4)
      for (var n4 = e6[r4]; n4 < e6[r4 + 1]; ++n4)
        s4[n4] = n4 - e6[r4] << 5 | r4;
    return [e6, s4];
  };
  var ar = or(rr, 2);
  var lr = ar[0];
  var ur = ar[1];
  lr[28] = 258, ur[258] = 28;
  for (hr = or(sr, 0)[1], dr = new ir(32768), vr = 0; vr < 32768; ++vr) {
    cr = (43690 & vr) >>> 1 | (21845 & vr) << 1;
    cr = (61680 & (cr = (52428 & cr) >>> 2 | (13107 & cr) << 2)) >>> 4 | (3855 & cr) << 4, dr[vr] = ((65280 & cr) >>> 8 | (255 & cr) << 8) >>> 1;
  }
  var cr;
  var hr;
  var dr;
  var vr;
  var fr = function(t4, i5, e6) {
    for (var r4 = t4.length, s4 = 0, n4 = new ir(i5); s4 < r4; ++s4)
      ++n4[t4[s4] - 1];
    var o5, a5 = new ir(i5);
    for (s4 = 0; s4 < i5; ++s4)
      a5[s4] = a5[s4 - 1] + n4[s4 - 1] << 1;
    if (e6) {
      o5 = new ir(1 << i5);
      var l5 = 15 - i5;
      for (s4 = 0; s4 < r4; ++s4)
        if (t4[s4])
          for (var u4 = s4 << 4 | t4[s4], h4 = i5 - t4[s4], d4 = a5[t4[s4] - 1]++ << h4, v4 = d4 | (1 << h4) - 1; d4 <= v4; ++d4)
            o5[dr[d4] >>> l5] = u4;
    } else
      for (o5 = new ir(r4), s4 = 0; s4 < r4; ++s4)
        o5[s4] = dr[a5[t4[s4] - 1]++] >>> 15 - t4[s4];
    return o5;
  };
  var pr = new tr(288);
  for (vr = 0; vr < 144; ++vr)
    pr[vr] = 8;
  for (vr = 144; vr < 256; ++vr)
    pr[vr] = 9;
  for (vr = 256; vr < 280; ++vr)
    pr[vr] = 7;
  for (vr = 280; vr < 288; ++vr)
    pr[vr] = 8;
  var gr = new tr(32);
  for (vr = 0; vr < 32; ++vr)
    gr[vr] = 5;
  var _r = fr(pr, 9, 0);
  var mr = fr(gr, 5, 0);
  var br = function(t4) {
    return (t4 / 8 >> 0) + (7 & t4 && 1);
  };
  var yr = function(t4, i5, e6) {
    (null == e6 || e6 > t4.length) && (e6 = t4.length);
    var r4 = new (t4 instanceof ir ? ir : t4 instanceof er ? er : tr)(e6 - i5);
    return r4.set(t4.subarray(i5, e6)), r4;
  };
  var wr = function(t4, i5, e6) {
    e6 <<= 7 & i5;
    var r4 = i5 / 8 >> 0;
    t4[r4] |= e6, t4[r4 + 1] |= e6 >>> 8;
  };
  var Sr = function(t4, i5, e6) {
    e6 <<= 7 & i5;
    var r4 = i5 / 8 >> 0;
    t4[r4] |= e6, t4[r4 + 1] |= e6 >>> 8, t4[r4 + 2] |= e6 >>> 16;
  };
  var $r = function(t4, i5) {
    for (var e6 = [], r4 = 0; r4 < t4.length; ++r4)
      t4[r4] && e6.push({ s: r4, f: t4[r4] });
    var s4 = e6.length, n4 = e6.slice();
    if (!s4)
      return [new tr(0), 0];
    if (1 == s4) {
      var o5 = new tr(e6[0].s + 1);
      return o5[e6[0].s] = 1, [o5, 1];
    }
    e6.sort(function(t5, i6) {
      return t5.f - i6.f;
    }), e6.push({ s: -1, f: 25001 });
    var a5 = e6[0], l5 = e6[1], u4 = 0, h4 = 1, d4 = 2;
    for (e6[0] = { s: -1, f: a5.f + l5.f, l: a5, r: l5 }; h4 != s4 - 1; )
      a5 = e6[e6[u4].f < e6[d4].f ? u4++ : d4++], l5 = e6[u4 != h4 && e6[u4].f < e6[d4].f ? u4++ : d4++], e6[h4++] = { s: -1, f: a5.f + l5.f, l: a5, r: l5 };
    var v4 = n4[0].s;
    for (r4 = 1; r4 < s4; ++r4)
      n4[r4].s > v4 && (v4 = n4[r4].s);
    var c4 = new ir(v4 + 1), f4 = kr(e6[h4 - 1], c4, 0);
    if (f4 > i5) {
      r4 = 0;
      var p5 = 0, g4 = f4 - i5, _3 = 1 << g4;
      for (n4.sort(function(t5, i6) {
        return c4[i6.s] - c4[t5.s] || t5.f - i6.f;
      }); r4 < s4; ++r4) {
        var m4 = n4[r4].s;
        if (!(c4[m4] > i5))
          break;
        p5 += _3 - (1 << f4 - c4[m4]), c4[m4] = i5;
      }
      for (p5 >>>= g4; p5 > 0; ) {
        var b2 = n4[r4].s;
        c4[b2] < i5 ? p5 -= 1 << i5 - c4[b2]++ - 1 : ++r4;
      }
      for (; r4 >= 0 && p5; --r4) {
        var y5 = n4[r4].s;
        c4[y5] == i5 && (--c4[y5], ++p5);
      }
      f4 = i5;
    }
    return [new tr(c4), f4];
  };
  var kr = function(t4, i5, e6) {
    return -1 == t4.s ? Math.max(kr(t4.l, i5, e6 + 1), kr(t4.r, i5, e6 + 1)) : i5[t4.s] = e6;
  };
  var xr = function(t4) {
    for (var i5 = t4.length; i5 && !t4[--i5]; )
      ;
    for (var e6 = new ir(++i5), r4 = 0, s4 = t4[0], n4 = 1, o5 = function(t5) {
      e6[r4++] = t5;
    }, a5 = 1; a5 <= i5; ++a5)
      if (t4[a5] == s4 && a5 != i5)
        ++n4;
      else {
        if (!s4 && n4 > 2) {
          for (; n4 > 138; n4 -= 138)
            o5(32754);
          n4 > 2 && (o5(n4 > 10 ? n4 - 11 << 5 | 28690 : n4 - 3 << 5 | 12305), n4 = 0);
        } else if (n4 > 3) {
          for (o5(s4), --n4; n4 > 6; n4 -= 6)
            o5(8304);
          n4 > 2 && (o5(n4 - 3 << 5 | 8208), n4 = 0);
        }
        for (; n4--; )
          o5(s4);
        n4 = 1, s4 = t4[a5];
      }
    return [e6.subarray(0, r4), i5];
  };
  var Er = function(t4, i5) {
    for (var e6 = 0, r4 = 0; r4 < i5.length; ++r4)
      e6 += t4[r4] * i5[r4];
    return e6;
  };
  var Ir = function(t4, i5, e6) {
    var r4 = e6.length, s4 = br(i5 + 2);
    t4[s4] = 255 & r4, t4[s4 + 1] = r4 >>> 8, t4[s4 + 2] = 255 ^ t4[s4], t4[s4 + 3] = 255 ^ t4[s4 + 1];
    for (var n4 = 0; n4 < r4; ++n4)
      t4[s4 + n4 + 4] = e6[n4];
    return 8 * (s4 + 4 + r4);
  };
  var Pr = function(t4, i5, e6, r4, s4, n4, o5, a5, l5, u4, h4) {
    wr(i5, h4++, e6), ++s4[256];
    for (var d4 = $r(s4, 15), v4 = d4[0], c4 = d4[1], f4 = $r(n4, 15), p5 = f4[0], g4 = f4[1], _3 = xr(v4), m4 = _3[0], b2 = _3[1], y5 = xr(p5), w4 = y5[0], S3 = y5[1], $3 = new ir(19), k4 = 0; k4 < m4.length; ++k4)
      $3[31 & m4[k4]]++;
    for (k4 = 0; k4 < w4.length; ++k4)
      $3[31 & w4[k4]]++;
    for (var x5 = $r($3, 7), E3 = x5[0], I3 = x5[1], P3 = 19; P3 > 4 && !E3[nr[P3 - 1]]; --P3)
      ;
    var R2, T4, M3, C5, F3 = u4 + 5 << 3, O3 = Er(s4, pr) + Er(n4, gr) + o5, A4 = Er(s4, v4) + Er(n4, p5) + o5 + 14 + 3 * P3 + Er($3, E3) + (2 * $3[16] + 3 * $3[17] + 7 * $3[18]);
    if (F3 <= O3 && F3 <= A4)
      return Ir(i5, h4, t4.subarray(l5, l5 + u4));
    if (wr(i5, h4, 1 + (A4 < O3)), h4 += 2, A4 < O3) {
      R2 = fr(v4, c4, 0), T4 = v4, M3 = fr(p5, g4, 0), C5 = p5;
      var D4 = fr(E3, I3, 0);
      wr(i5, h4, b2 - 257), wr(i5, h4 + 5, S3 - 1), wr(i5, h4 + 10, P3 - 4), h4 += 14;
      for (k4 = 0; k4 < P3; ++k4)
        wr(i5, h4 + 3 * k4, E3[nr[k4]]);
      h4 += 3 * P3;
      for (var L3 = [m4, w4], j4 = 0; j4 < 2; ++j4) {
        var N3 = L3[j4];
        for (k4 = 0; k4 < N3.length; ++k4) {
          var z4 = 31 & N3[k4];
          wr(i5, h4, D4[z4]), h4 += E3[z4], z4 > 15 && (wr(i5, h4, N3[k4] >>> 5 & 127), h4 += N3[k4] >>> 12);
        }
      }
    } else
      R2 = _r, T4 = pr, M3 = mr, C5 = gr;
    for (k4 = 0; k4 < a5; ++k4)
      if (r4[k4] > 255) {
        z4 = r4[k4] >>> 18 & 31;
        Sr(i5, h4, R2[z4 + 257]), h4 += T4[z4 + 257], z4 > 7 && (wr(i5, h4, r4[k4] >>> 23 & 31), h4 += rr[z4]);
        var U2 = 31 & r4[k4];
        Sr(i5, h4, M3[U2]), h4 += C5[U2], U2 > 3 && (Sr(i5, h4, r4[k4] >>> 5 & 8191), h4 += sr[U2]);
      } else
        Sr(i5, h4, R2[r4[k4]]), h4 += T4[r4[k4]];
    return Sr(i5, h4, R2[256]), h4 + T4[256];
  };
  var Rr = new er([65540, 131080, 131088, 131104, 262176, 1048704, 1048832, 2114560, 2117632]);
  var Tr = function() {
    for (var t4 = new er(256), i5 = 0; i5 < 256; ++i5) {
      for (var e6 = i5, r4 = 9; --r4; )
        e6 = (1 & e6 && 3988292384) ^ e6 >>> 1;
      t4[i5] = e6;
    }
    return t4;
  }();
  var Mr = function() {
    var t4 = 4294967295;
    return { p: function(i5) {
      for (var e6 = t4, r4 = 0; r4 < i5.length; ++r4)
        e6 = Tr[255 & e6 ^ i5[r4]] ^ e6 >>> 8;
      t4 = e6;
    }, d: function() {
      return 4294967295 ^ t4;
    } };
  };
  var Cr = function(t4, i5, e6, r4, s4) {
    return function(t5, i6, e7, r5, s5, n4) {
      var o5 = t5.length, a5 = new tr(r5 + o5 + 5 * (1 + Math.floor(o5 / 7e3)) + s5), l5 = a5.subarray(r5, a5.length - s5), u4 = 0;
      if (!i6 || o5 < 8)
        for (var h4 = 0; h4 <= o5; h4 += 65535) {
          var d4 = h4 + 65535;
          d4 < o5 ? u4 = Ir(l5, u4, t5.subarray(h4, d4)) : (l5[h4] = n4, u4 = Ir(l5, u4, t5.subarray(h4, o5)));
        }
      else {
        for (var v4 = Rr[i6 - 1], c4 = v4 >>> 13, f4 = 8191 & v4, p5 = (1 << e7) - 1, g4 = new ir(32768), _3 = new ir(p5 + 1), m4 = Math.ceil(e7 / 3), b2 = 2 * m4, y5 = function(i7) {
          return (t5[i7] ^ t5[i7 + 1] << m4 ^ t5[i7 + 2] << b2) & p5;
        }, w4 = new er(25e3), S3 = new ir(288), $3 = new ir(32), k4 = 0, x5 = 0, E3 = (h4 = 0, 0), I3 = 0, P3 = 0; h4 < o5; ++h4) {
          var R2 = y5(h4), T4 = 32767 & h4, M3 = _3[R2];
          if (g4[T4] = M3, _3[R2] = T4, I3 <= h4) {
            var C5 = o5 - h4;
            if ((k4 > 7e3 || E3 > 24576) && C5 > 423) {
              u4 = Pr(t5, l5, 0, w4, S3, $3, x5, E3, P3, h4 - P3, u4), E3 = k4 = x5 = 0, P3 = h4;
              for (var F3 = 0; F3 < 286; ++F3)
                S3[F3] = 0;
              for (F3 = 0; F3 < 30; ++F3)
                $3[F3] = 0;
            }
            var O3 = 2, A4 = 0, D4 = f4, L3 = T4 - M3 & 32767;
            if (C5 > 2 && R2 == y5(h4 - L3))
              for (var j4 = Math.min(c4, C5) - 1, N3 = Math.min(32767, h4), z4 = Math.min(258, C5); L3 <= N3 && --D4 && T4 != M3; ) {
                if (t5[h4 + O3] == t5[h4 + O3 - L3]) {
                  for (var U2 = 0; U2 < z4 && t5[h4 + U2] == t5[h4 + U2 - L3]; ++U2)
                    ;
                  if (U2 > O3) {
                    if (O3 = U2, A4 = L3, U2 > j4)
                      break;
                    var q4 = Math.min(L3, U2 - 2), B4 = 0;
                    for (F3 = 0; F3 < q4; ++F3) {
                      var H2 = h4 - L3 + F3 + 32768 & 32767, W2 = H2 - g4[H2] + 32768 & 32767;
                      W2 > B4 && (B4 = W2, M3 = H2);
                    }
                  }
                }
                L3 += (T4 = M3) - (M3 = g4[T4]) + 32768 & 32767;
              }
            if (A4) {
              w4[E3++] = 268435456 | ur[O3] << 18 | hr[A4];
              var G2 = 31 & ur[O3], J3 = 31 & hr[A4];
              x5 += rr[G2] + sr[J3], ++S3[257 + G2], ++$3[J3], I3 = h4 + O3, ++k4;
            } else
              w4[E3++] = t5[h4], ++S3[t5[h4]];
          }
        }
        u4 = Pr(t5, l5, n4, w4, S3, $3, x5, E3, P3, h4 - P3, u4);
      }
      return yr(a5, 0, r5 + br(u4) + s5);
    }(t4, null == i5.level ? 6 : i5.level, null == i5.mem ? Math.ceil(1.5 * Math.max(8, Math.min(13, Math.log(t4.length)))) : 12 + i5.mem, e6, r4, !s4);
  };
  var Fr = function(t4, i5, e6) {
    for (; e6; ++i5)
      t4[i5] = e6, e6 >>>= 8;
  };
  var Or = function(t4, i5) {
    var e6 = i5.filename;
    if (t4[0] = 31, t4[1] = 139, t4[2] = 8, t4[8] = i5.level < 2 ? 4 : 9 == i5.level ? 2 : 0, t4[9] = 3, 0 != i5.mtime && Fr(t4, 4, Math.floor(new Date(i5.mtime || Date.now()) / 1e3)), e6) {
      t4[3] = 8;
      for (var r4 = 0; r4 <= e6.length; ++r4)
        t4[r4 + 10] = e6.charCodeAt(r4);
    }
  };
  var Ar = function(t4) {
    return 10 + (t4.filename && t4.filename.length + 1 || 0);
  };
  function Dr(t4, i5) {
    void 0 === i5 && (i5 = {});
    var e6 = Mr(), r4 = t4.length;
    e6.p(t4);
    var s4 = Cr(t4, i5, Ar(i5), 8), n4 = s4.length;
    return Or(s4, i5), Fr(s4, n4 - 8, e6.d()), Fr(s4, n4 - 4, r4), s4;
  }
  function Lr(t4, i5) {
    var e6 = t4.length;
    if ("undefined" != typeof TextEncoder)
      return new TextEncoder().encode(t4);
    for (var r4 = new tr(t4.length + (t4.length >>> 1)), s4 = 0, n4 = function(t5) {
      r4[s4++] = t5;
    }, o5 = 0; o5 < e6; ++o5) {
      if (s4 + 5 > r4.length) {
        var a5 = new tr(s4 + 8 + (e6 - o5 << 1));
        a5.set(r4), r4 = a5;
      }
      var l5 = t4.charCodeAt(o5);
      l5 < 128 || i5 ? n4(l5) : l5 < 2048 ? (n4(192 | l5 >>> 6), n4(128 | 63 & l5)) : l5 > 55295 && l5 < 57344 ? (n4(240 | (l5 = 65536 + (1047552 & l5) | 1023 & t4.charCodeAt(++o5)) >>> 18), n4(128 | l5 >>> 12 & 63), n4(128 | l5 >>> 6 & 63), n4(128 | 63 & l5)) : (n4(224 | l5 >>> 12), n4(128 | l5 >>> 6 & 63), n4(128 | 63 & l5));
    }
    return yr(r4, 0, s4);
  }
  function jr(t4, i5) {
    return function(t5) {
      for (var i6 = 0, e6 = 0; e6 < t5.length; e6++)
        i6 = (i6 << 5) - i6 + t5.charCodeAt(e6), i6 |= 0;
      return Math.abs(i6);
    }(t4) % 100 < se(100 * i5, 0, 100);
  }
  var Nr = "disabled";
  var zr = "sampled";
  var Ur = "active";
  var qr = "buffering";
  var Br = "paused";
  var Hr = "trigger";
  var Wr = Hr + "_activated";
  var Gr = Hr + "_pending";
  var Jr = Hr + "_" + Nr;
  function Vr(t4, i5) {
    return i5.some((i6) => "regex" === i6.matching && new RegExp(i6.url).test(t4));
  }
  var Kr = class {
    constructor(t4) {
      this.xt = t4;
    }
    triggerStatus(t4) {
      var i5 = this.xt.map((i6) => i6.triggerStatus(t4));
      return i5.includes(Wr) ? Wr : i5.includes(Gr) ? Gr : Jr;
    }
    stop() {
      this.xt.forEach((t4) => t4.stop());
    }
  };
  var Yr = class {
    constructor(t4) {
      this.xt = t4;
    }
    triggerStatus(t4) {
      var i5 = /* @__PURE__ */ new Set();
      for (var e6 of this.xt)
        i5.add(e6.triggerStatus(t4));
      switch (i5.delete(Jr), i5.size) {
        case 0:
          return Jr;
        case 1:
          return Array.from(i5)[0];
        default:
          return Gr;
      }
    }
    stop() {
      this.xt.forEach((t4) => t4.stop());
    }
  };
  var Xr = class {
    triggerStatus() {
      return Gr;
    }
    stop() {
    }
  };
  var Qr = class {
    constructor(t4) {
      this.Et = [], this.It = [], this.urlBlocked = false, this._instance = t4;
    }
    onRemoteConfig(t4) {
      var i5, e6;
      this.Et = (null == (i5 = t4.sessionRecording) ? void 0 : i5.urlTriggers) || [], this.It = (null == (e6 = t4.sessionRecording) ? void 0 : e6.urlBlocklist) || [];
    }
    Pt(t4) {
      var i5;
      return 0 === this.Et.length ? Jr : (null == (i5 = this._instance) ? void 0 : i5.get_property(xt)) === t4 ? Wr : Gr;
    }
    triggerStatus(t4) {
      var i5 = this.Pt(t4), e6 = i5 === Wr ? Wr : i5 === Gr ? Gr : Jr;
      return this._instance.register_for_session({ $sdk_debug_replay_url_trigger_status: e6 }), e6;
    }
    checkUrlTriggerConditions(i5, e6, r4) {
      if (void 0 !== t3 && t3.location.href) {
        var s4 = t3.location.href, n4 = this.urlBlocked, o5 = Vr(s4, this.It);
        n4 && o5 || (o5 && !n4 ? i5() : !o5 && n4 && e6(), Vr(s4, this.Et) && r4("url"));
      }
    }
    stop() {
    }
  };
  var Zr = class {
    constructor(t4) {
      this.linkedFlag = null, this.linkedFlagSeen = false, this.Rt = () => {
      }, this._instance = t4;
    }
    triggerStatus() {
      var t4 = Gr;
      return F2(this.linkedFlag) && (t4 = Jr), this.linkedFlagSeen && (t4 = Wr), this._instance.register_for_session({ $sdk_debug_replay_linked_flag_trigger_status: t4 }), t4;
    }
    onRemoteConfig(t4, i5) {
      var e6;
      if (this.linkedFlag = (null == (e6 = t4.sessionRecording) ? void 0 : e6.linkedFlag) || null, !F2(this.linkedFlag) && !this.linkedFlagSeen) {
        var r4 = T3(this.linkedFlag) ? this.linkedFlag : this.linkedFlag.flag, s4 = T3(this.linkedFlag) ? null : this.linkedFlag.variant;
        this.Rt = this._instance.onFeatureFlags((t5, e7) => {
          var n4 = false;
          if (I2(e7) && r4 in e7) {
            var o5 = e7[r4];
            n4 = A3(o5) ? true === o5 : s4 ? o5 === s4 : !!o5;
          }
          this.linkedFlagSeen = n4, n4 && i5(r4, s4);
        });
      }
    }
    stop() {
      this.Rt();
    }
  };
  var ts = class {
    constructor(t4) {
      this.Tt = [], this._instance = t4;
    }
    onRemoteConfig(t4) {
      var i5;
      this.Tt = (null == (i5 = t4.sessionRecording) ? void 0 : i5.eventTriggers) || [];
    }
    Mt(t4) {
      var i5;
      return 0 === this.Tt.length ? Jr : (null == (i5 = this._instance) ? void 0 : i5.get_property(Et)) === t4 ? Wr : Gr;
    }
    triggerStatus(t4) {
      var i5 = this.Mt(t4), e6 = i5 === Wr ? Wr : i5 === Gr ? Gr : Jr;
      return this._instance.register_for_session({ $sdk_debug_replay_event_trigger_status: e6 }), e6;
    }
    stop() {
    }
  };
  function is3(t4) {
    return t4.isRecordingEnabled ? qr : Nr;
  }
  function es(t4) {
    if (!t4.receivedFlags)
      return qr;
    if (!t4.isRecordingEnabled)
      return Nr;
    if (t4.urlTriggerMatching.urlBlocked)
      return Br;
    var i5 = true === t4.isSampled, e6 = new Kr([t4.eventTriggerMatching, t4.urlTriggerMatching, t4.linkedFlagMatching]).triggerStatus(t4.sessionId);
    return i5 ? zr : e6 === Wr ? Ur : e6 === Gr ? qr : false === t4.isSampled ? Nr : Ur;
  }
  function rs(t4) {
    if (!t4.receivedFlags)
      return qr;
    if (!t4.isRecordingEnabled)
      return Nr;
    if (t4.urlTriggerMatching.urlBlocked)
      return Br;
    var i5 = new Yr([t4.eventTriggerMatching, t4.urlTriggerMatching, t4.linkedFlagMatching]).triggerStatus(t4.sessionId), e6 = i5 !== Jr, r4 = A3(t4.isSampled);
    return e6 && i5 === Gr ? qr : e6 && i5 === Jr || r4 && !t4.isSampled ? Nr : true === t4.isSampled ? zr : Ur;
  }
  var ss = "[SessionRecording]";
  var ns = z3(ss);
  function os() {
    var t4;
    return null == v3 || null == (t4 = v3.__PosthogExtensions__) || null == (t4 = t4.rrweb) ? void 0 : t4.record;
  }
  var as = 3e5;
  var ls = [Be.MouseMove, Be.MouseInteraction, Be.Scroll, Be.ViewportResize, Be.Input, Be.TouchMove, Be.MediaInteraction, Be.Drag];
  var us = (t4) => ({ rrwebMethod: t4, enqueuedAt: Date.now(), attempt: 1 });
  function hs(t4) {
    return function(t5, i5) {
      for (var e6 = "", r4 = 0; r4 < t5.length; ) {
        var s4 = t5[r4++];
        s4 < 128 || i5 ? e6 += String.fromCharCode(s4) : s4 < 224 ? e6 += String.fromCharCode((31 & s4) << 6 | 63 & t5[r4++]) : s4 < 240 ? e6 += String.fromCharCode((15 & s4) << 12 | (63 & t5[r4++]) << 6 | 63 & t5[r4++]) : (s4 = ((15 & s4) << 18 | (63 & t5[r4++]) << 12 | (63 & t5[r4++]) << 6 | 63 & t5[r4++]) - 65536, e6 += String.fromCharCode(55296 | s4 >> 10, 56320 | 1023 & s4));
      }
      return e6;
    }(Dr(Lr(JSON.stringify(t4))), true);
  }
  function ds(t4) {
    return t4.type === qe.Custom && "sessionIdle" === t4.data.tag;
  }
  var vs = class {
    get sessionId() {
      return this.Ct;
    }
    get Ft() {
      return this._instance.config.session_recording.session_idle_threshold_ms || 3e5;
    }
    get started() {
      return this.Ot;
    }
    get At() {
      if (!this._instance.sessionManager)
        throw new Error(ss + " must be started with a valid sessionManager.");
      return this._instance.sessionManager;
    }
    get Dt() {
      var t4, i5;
      return this.Lt.triggerStatus(this.sessionId) === Gr ? 6e4 : null !== (t4 = null == (i5 = this._instance.config.session_recording) ? void 0 : i5.full_snapshot_interval_millis) && void 0 !== t4 ? t4 : as;
    }
    get jt() {
      var t4 = this._instance.get_property(kt);
      return A3(t4) ? t4 : null;
    }
    get Nt() {
      var t4, i5, e6 = null == (t4 = this.C) ? void 0 : t4.data[(null == (i5 = this.C) ? void 0 : i5.data.length) - 1], { sessionStartTimestamp: r4 } = this.At.checkAndGetSessionAndWindowId(true);
      return e6 ? e6.timestamp - r4 : null;
    }
    get zt() {
      var i5 = !!this._instance.get_property(pt), e6 = !this._instance.config.disable_session_recording;
      return t3 && i5 && e6;
    }
    get Ut() {
      var t4 = !!this._instance.get_property(gt), i5 = this._instance.config.enable_recording_console_log;
      return null != i5 ? i5 : t4;
    }
    get qt() {
      var t4, i5, e6, r4, s4, n4, o5 = this._instance.config.session_recording.captureCanvas, a5 = this._instance.get_property(bt), l5 = null !== (t4 = null !== (i5 = null == o5 ? void 0 : o5.recordCanvas) && void 0 !== i5 ? i5 : null == a5 ? void 0 : a5.enabled) && void 0 !== t4 && t4, u4 = null !== (e6 = null !== (r4 = null == o5 ? void 0 : o5.canvasFps) && void 0 !== r4 ? r4 : null == a5 ? void 0 : a5.fps) && void 0 !== e6 ? e6 : 4, h4 = null !== (s4 = null !== (n4 = null == o5 ? void 0 : o5.canvasQuality) && void 0 !== n4 ? n4 : null == a5 ? void 0 : a5.quality) && void 0 !== s4 ? s4 : 0.4;
      if ("string" == typeof h4) {
        var d4 = parseFloat(h4);
        h4 = isNaN(d4) ? 0.4 : d4;
      }
      return { enabled: l5, fps: se(u4, 0, 12, "canvas recording fps", 4), quality: se(h4, 0, 1, "canvas recording quality", 0.4) };
    }
    get Bt() {
      var t4, i5, e6 = this._instance.get_property(_t), r4 = { recordHeaders: null == (t4 = this._instance.config.session_recording) ? void 0 : t4.recordHeaders, recordBody: null == (i5 = this._instance.config.session_recording) ? void 0 : i5.recordBody }, s4 = (null == r4 ? void 0 : r4.recordHeaders) || (null == e6 ? void 0 : e6.recordHeaders), n4 = (null == r4 ? void 0 : r4.recordBody) || (null == e6 ? void 0 : e6.recordBody), o5 = I2(this._instance.config.capture_performance) ? this._instance.config.capture_performance.network_timing : this._instance.config.capture_performance, a5 = !!(A3(o5) ? o5 : null == e6 ? void 0 : e6.capturePerformance);
      return s4 || n4 || a5 ? { recordHeaders: s4, recordBody: n4, recordPerformance: a5 } : void 0;
    }
    get Ht() {
      var t4, i5, e6, r4, s4, n4, o5 = this._instance.get_property(mt), a5 = { maskAllInputs: null == (t4 = this._instance.config.session_recording) ? void 0 : t4.maskAllInputs, maskTextSelector: null == (i5 = this._instance.config.session_recording) ? void 0 : i5.maskTextSelector, blockSelector: null == (e6 = this._instance.config.session_recording) ? void 0 : e6.blockSelector }, l5 = null !== (r4 = null == a5 ? void 0 : a5.maskAllInputs) && void 0 !== r4 ? r4 : null == o5 ? void 0 : o5.maskAllInputs, u4 = null !== (s4 = null == a5 ? void 0 : a5.maskTextSelector) && void 0 !== s4 ? s4 : null == o5 ? void 0 : o5.maskTextSelector, h4 = null !== (n4 = null == a5 ? void 0 : a5.blockSelector) && void 0 !== n4 ? n4 : null == o5 ? void 0 : o5.blockSelector;
      return R(l5) && R(u4) && R(h4) ? void 0 : { maskAllInputs: null == l5 || l5, maskTextSelector: u4, blockSelector: h4 };
    }
    get Wt() {
      var t4 = this._instance.get_property(yt);
      return O2(t4) ? t4 : null;
    }
    get Gt() {
      var t4 = this._instance.get_property(wt);
      return O2(t4) ? t4 : null;
    }
    get status() {
      return this.Jt ? this.Vt({ receivedFlags: this.Jt, isRecordingEnabled: this.zt, isSampled: this.jt, urlTriggerMatching: this.Kt, eventTriggerMatching: this.Yt, linkedFlagMatching: this.Xt, sessionId: this.sessionId }) : qr;
    }
    constructor(t4) {
      if (this.Vt = is3, this.Jt = false, this.Qt = [], this.Zt = "unknown", this.ti = Date.now(), this.Lt = new Xr(), this.ii = void 0, this.ei = void 0, this.ri = void 0, this.si = void 0, this.ni = void 0, this._forceAllowLocalhostNetworkCapture = false, this.oi = () => {
        this.ai();
      }, this.li = () => {
        this.ui("browser offline", {});
      }, this.hi = () => {
        this.ui("browser online", {});
      }, this.di = () => {
        if (null != o4 && o4.visibilityState) {
          var t5 = "window " + o4.visibilityState;
          this.ui(t5, {});
        }
      }, this._instance = t4, this.Ot = false, this.vi = "/s/", this.ci = void 0, this.Jt = false, !this._instance.sessionManager)
        throw ns.error("started without valid sessionManager"), new Error(ss + " started without valid sessionManager. This is a bug.");
      if (this._instance.config.__preview_experimental_cookieless_mode)
        throw new Error(ss + " cannot be used with __preview_experimental_cookieless_mode.");
      this.Xt = new Zr(this._instance), this.Kt = new Qr(this._instance), this.Yt = new ts(this._instance);
      var { sessionId: i5, windowId: e6 } = this.At.checkAndGetSessionAndWindowId();
      this.Ct = i5, this.fi = e6, this.C = this.pi(), this.Ft >= this.At.sessionTimeoutMs && ns.warn("session_idle_threshold_ms (" + this.Ft + ") is greater than the session timeout (" + this.At.sessionTimeoutMs + "). Session will never be detected as idle");
    }
    startIfEnabledOrStop(i5) {
      this.zt ? (this.gi(i5), st(t3, "beforeunload", this.oi), st(t3, "offline", this.li), st(t3, "online", this.hi), st(t3, "visibilitychange", this.di), this.mi(), this.bi(), F2(this.ii) && (this.ii = this._instance.on("eventCaptured", (t4) => {
        try {
          if ("$pageview" === t4.event) {
            var i6 = null != t4 && t4.properties.$current_url ? this.yi(null == t4 ? void 0 : t4.properties.$current_url) : "";
            if (!i6)
              return;
            this.ui("$pageview", { href: i6 });
          }
        } catch (t5) {
          ns.error("Could not add $pageview to rrweb session", t5);
        }
      })), this.ei || (this.ei = this.At.onSessionId((t4, i6, e6) => {
        var r4, s4;
        e6 && (this.ui("$session_id_change", { sessionId: t4, windowId: i6, changeReason: e6 }), null == (r4 = this._instance) || null == (r4 = r4.persistence) || r4.unregister(Et), null == (s4 = this._instance) || null == (s4 = s4.persistence) || s4.unregister(xt));
      }))) : this.stopRecording();
    }
    stopRecording() {
      var i5, e6, r4, s4;
      this.Ot && this.ci && (this.ci(), this.ci = void 0, this.Ot = false, null == t3 || t3.removeEventListener("beforeunload", this.oi), null == t3 || t3.removeEventListener("offline", this.li), null == t3 || t3.removeEventListener("online", this.hi), null == t3 || t3.removeEventListener("visibilitychange", this.di), this.pi(), clearInterval(this.wi), null == (i5 = this.ii) || i5.call(this), this.ii = void 0, null == (e6 = this.ni) || e6.call(this), this.ni = void 0, null == (r4 = this.ei) || r4.call(this), this.ei = void 0, null == (s4 = this.si) || s4.call(this), this.si = void 0, this.Yt.stop(), this.Kt.stop(), this.Xt.stop(), ns.info("stopped"));
    }
    Si() {
      var t4;
      null == (t4 = this._instance.persistence) || t4.unregister(kt);
    }
    $i(t4) {
      var i5, e6 = this.Ct !== t4, r4 = this.Wt;
      if (O2(r4)) {
        var s4 = this.jt, n4 = e6 || !A3(s4), o5 = n4 ? jr(t4, r4) : s4;
        n4 && (o5 ? this.ki(zr) : ns.warn("Sample rate (" + r4 + ") has determined that this sessionId (" + t4 + ") will not be sent to the server."), this.ui("samplingDecisionMade", { sampleRate: r4, isSampled: o5 })), null == (i5 = this._instance.persistence) || i5.register({ [kt]: o5 });
      } else
        this.Si();
    }
    onRemoteConfig(t4) {
      var i5, e6, r4, s4;
      (this.ui("$remote_config_received", t4), this.xi(t4), null != (i5 = t4.sessionRecording) && i5.endpoint) && (this.vi = null == (s4 = t4.sessionRecording) ? void 0 : s4.endpoint);
      this.mi(), "any" === (null == (e6 = t4.sessionRecording) ? void 0 : e6.triggerMatchType) ? (this.Vt = es, this.Lt = new Kr([this.Yt, this.Kt])) : (this.Vt = rs, this.Lt = new Yr([this.Yt, this.Kt])), this._instance.register_for_session({ $sdk_debug_replay_remote_trigger_matching_config: null == (r4 = t4.sessionRecording) ? void 0 : r4.triggerMatchType }), this.Kt.onRemoteConfig(t4), this.Yt.onRemoteConfig(t4), this.Xt.onRemoteConfig(t4, (t5, i6) => {
        this.ki("linked_flag_matched", { flag: t5, variant: i6 });
      }), this.Jt = true, this.startIfEnabledOrStop();
    }
    mi() {
      O2(this.Wt) && F2(this.si) && (this.si = this.At.onSessionId((t4) => {
        this.$i(t4);
      }));
    }
    xi(t4) {
      if (this._instance.persistence) {
        var i5, e6 = this._instance.persistence, r4 = () => {
          var i6, r5, s4, n4, o5, a5, l5, u4, h4, d4 = null == (i6 = t4.sessionRecording) ? void 0 : i6.sampleRate, v4 = F2(d4) ? null : parseFloat(d4);
          F2(v4) && this.Si();
          var c4 = null == (r5 = t4.sessionRecording) ? void 0 : r5.minimumDurationMilliseconds;
          e6.register({ [pt]: !!t4.sessionRecording, [gt]: null == (s4 = t4.sessionRecording) ? void 0 : s4.consoleLogRecordingEnabled, [_t]: B3({ capturePerformance: t4.capturePerformance }, null == (n4 = t4.sessionRecording) ? void 0 : n4.networkPayloadCapture), [mt]: null == (o5 = t4.sessionRecording) ? void 0 : o5.masking, [bt]: { enabled: null == (a5 = t4.sessionRecording) ? void 0 : a5.recordCanvas, fps: null == (l5 = t4.sessionRecording) ? void 0 : l5.canvasFps, quality: null == (u4 = t4.sessionRecording) ? void 0 : u4.canvasQuality }, [yt]: v4, [wt]: R(c4) ? null : c4, [St]: null == (h4 = t4.sessionRecording) ? void 0 : h4.scriptConfig });
        };
        r4(), null == (i5 = this.ri) || i5.call(this), this.ri = this.At.onSessionId(r4);
      }
    }
    log(t4, i5) {
      var e6;
      void 0 === i5 && (i5 = "log"), null == (e6 = this._instance.sessionRecording) || e6.onRRwebEmit({ type: 6, data: { plugin: "rrweb/console@1", payload: { level: i5, trace: [], payload: [JSON.stringify(t4)] } }, timestamp: Date.now() });
    }
    gi(t4) {
      if (!R(Object.assign) && !R(Array.from) && !(this.Ot || this._instance.config.disable_session_recording || this._instance.consent.isOptedOut())) {
        var i5;
        if (this.Ot = true, this.At.checkAndGetSessionAndWindowId(), os())
          this.Ei();
        else
          null == (i5 = v3.__PosthogExtensions__) || null == i5.loadExternalDependency || i5.loadExternalDependency(this._instance, this.Ii, (t5) => {
            if (t5)
              return ns.error("could not load recorder", t5);
            this.Ei();
          });
        ns.info("starting"), this.status === Ur && this.ki(t4 || "recording_initialized");
      }
    }
    get Ii() {
      var t4;
      return (null == (t4 = this._instance) || null == (t4 = t4.persistence) || null == (t4 = t4.get_property(St)) ? void 0 : t4.script) || "recorder";
    }
    Pi(t4) {
      var i5;
      return 3 === t4.type && -1 !== ls.indexOf(null == (i5 = t4.data) ? void 0 : i5.source);
    }
    Ri(t4) {
      var i5 = this.Pi(t4);
      i5 || this.Zt || t4.timestamp - this.ti > this.Ft && (this.Zt = true, clearInterval(this.wi), this.ui("sessionIdle", { eventTimestamp: t4.timestamp, lastActivityTimestamp: this.ti, threshold: this.Ft, bufferLength: this.C.data.length, bufferSize: this.C.size }), this.ai());
      var e6 = false;
      if (i5 && (this.ti = t4.timestamp, this.Zt)) {
        var r4 = "unknown" === this.Zt;
        this.Zt = false, r4 || (this.ui("sessionNoLongerIdle", { reason: "user activity", type: t4.type }), e6 = true);
      }
      if (!this.Zt) {
        var { windowId: s4, sessionId: n4 } = this.At.checkAndGetSessionAndWindowId(!i5, t4.timestamp), o5 = this.Ct !== n4, a5 = this.fi !== s4;
        this.fi = s4, this.Ct = n4, o5 || a5 ? (this.stopRecording(), this.startIfEnabledOrStop("session_id_changed")) : e6 && this.Ti();
      }
    }
    Mi(t4) {
      try {
        return t4.rrwebMethod(), true;
      } catch (i5) {
        return this.Qt.length < 10 ? this.Qt.push({ enqueuedAt: t4.enqueuedAt || Date.now(), attempt: t4.attempt++, rrwebMethod: t4.rrwebMethod }) : ns.warn("could not emit queued rrweb event.", i5, t4), false;
      }
    }
    ui(t4, i5) {
      return this.Mi(us(() => os().addCustomEvent(t4, i5)));
    }
    Ci() {
      return this.Mi(us(() => os().takeFullSnapshot()));
    }
    Ei() {
      var t4, i5, e6, r4, s4 = { blockClass: "ph-no-capture", blockSelector: void 0, ignoreClass: "ph-ignore-input", maskTextClass: "ph-mask", maskTextSelector: void 0, maskTextFn: void 0, maskAllInputs: true, maskInputOptions: { password: true }, maskInputFn: void 0, slimDOMOptions: {}, collectFonts: false, inlineStylesheet: true, recordCrossOriginIframes: false }, n4 = this._instance.config.session_recording;
      for (var [o5, a5] of Object.entries(n4 || {}))
        o5 in s4 && ("maskInputOptions" === o5 ? s4.maskInputOptions = B3({ password: true }, a5) : s4[o5] = a5);
      (this.qt && this.qt.enabled && (s4.recordCanvas = true, s4.sampling = { canvas: this.qt.fps }, s4.dataURLOptions = { type: "image/webp", quality: this.qt.quality }), this.Ht) && (s4.maskAllInputs = null === (i5 = this.Ht.maskAllInputs) || void 0 === i5 || i5, s4.maskTextSelector = null !== (e6 = this.Ht.maskTextSelector) && void 0 !== e6 ? e6 : void 0, s4.blockSelector = null !== (r4 = this.Ht.blockSelector) && void 0 !== r4 ? r4 : void 0);
      var l5 = os();
      if (l5) {
        this.Fi = null !== (t4 = this.Fi) && void 0 !== t4 ? t4 : new Ze(l5, { refillRate: this._instance.config.session_recording.__mutationThrottlerRefillRate, bucketSize: this._instance.config.session_recording.__mutationThrottlerBucketSize, onBlockedNode: (t5, i6) => {
          var e7 = "Too many mutations on node '" + t5 + "'. Rate limiting. This could be due to SVG animations or something similar";
          ns.info(e7, { node: i6 }), this.log(ss + " " + e7, "warn");
        } });
        var u4 = this.Oi();
        this.ci = l5(B3({ emit: (t5) => {
          this.onRRwebEmit(t5);
        }, plugins: u4 }, s4)), this.ti = Date.now(), this.Zt = A3(this.Zt) ? this.Zt : "unknown", this.ui("$session_options", { sessionRecordingOptions: s4, activePlugins: u4.map((t5) => null == t5 ? void 0 : t5.name) }), this.ui("$posthog_config", { config: this._instance.config });
      } else
        ns.error("onScriptLoaded was called but rrwebRecord is not available. This indicates something has gone wrong.");
    }
    Ti() {
      if (this.wi && clearInterval(this.wi), true !== this.Zt) {
        var t4 = this.Dt;
        t4 && (this.wi = setInterval(() => {
          this.Ci();
        }, t4));
      }
    }
    Oi() {
      var t4, i5, e6 = [], r4 = null == (t4 = v3.__PosthogExtensions__) || null == (t4 = t4.rrwebPlugins) ? void 0 : t4.getRecordConsolePlugin;
      r4 && this.Ut && e6.push(r4());
      var s4 = null == (i5 = v3.__PosthogExtensions__) || null == (i5 = i5.rrwebPlugins) ? void 0 : i5.getRecordNetworkPlugin;
      this.Bt && E2(s4) && (!yi.includes(location.hostname) || this._forceAllowLocalhostNetworkCapture ? e6.push(s4(Qe(this._instance.config, this.Bt))) : ns.info("NetworkCapture not started because we are on localhost."));
      return e6;
    }
    onRRwebEmit(t4) {
      var i5;
      if (this.Ai(), t4 && I2(t4)) {
        if (t4.type === qe.Meta) {
          var e6 = this.yi(t4.data.href);
          if (this.Di = e6, !e6)
            return;
          t4.data.href = e6;
        } else
          this.Li();
        if (this.Kt.checkUrlTriggerConditions(() => this.ji(), () => this.Ni(), (t5) => this.zi(t5)), !this.Kt.urlBlocked || (r4 = t4).type === qe.Custom && "recording paused" === r4.data.tag) {
          var r4;
          t4.type === qe.FullSnapshot && this.Ti(), t4.type === qe.FullSnapshot && this.Jt && this.Lt.triggerStatus(this.sessionId) === Gr && this.pi();
          var s4 = this.Fi ? this.Fi.throttleMutations(t4) : t4;
          if (s4) {
            var n4 = function(t5) {
              var i6 = t5;
              if (i6 && I2(i6) && 6 === i6.type && I2(i6.data) && "rrweb/console@1" === i6.data.plugin) {
                i6.data.payload.payload.length > 10 && (i6.data.payload.payload = i6.data.payload.payload.slice(0, 10), i6.data.payload.payload.push("...[truncated]"));
                for (var e7 = [], r5 = 0; r5 < i6.data.payload.payload.length; r5++)
                  i6.data.payload.payload[r5] && i6.data.payload.payload[r5].length > 2e3 ? e7.push(i6.data.payload.payload[r5].slice(0, 2e3) + "...[truncated]") : e7.push(i6.data.payload.payload[r5]);
                return i6.data.payload.payload = e7, t5;
              }
              return t5;
            }(s4);
            if (this.Ri(n4), true !== this.Zt || ds(n4)) {
              if (ds(n4)) {
                var o5 = n4.data.payload;
                if (o5) {
                  var a5 = o5.lastActivityTimestamp, l5 = o5.threshold;
                  n4.timestamp = a5 + l5;
                }
              }
              var u4 = null === (i5 = this._instance.config.session_recording.compress_events) || void 0 === i5 || i5 ? function(t5) {
                if (ze(t5) < 1024)
                  return t5;
                try {
                  if (t5.type === qe.FullSnapshot)
                    return B3({}, t5, { data: hs(t5.data), cv: "2024-10" });
                  if (t5.type === qe.IncrementalSnapshot && t5.data.source === Be.Mutation)
                    return B3({}, t5, { cv: "2024-10", data: B3({}, t5.data, { texts: hs(t5.data.texts), attributes: hs(t5.data.attributes), removes: hs(t5.data.removes), adds: hs(t5.data.adds) }) });
                  if (t5.type === qe.IncrementalSnapshot && t5.data.source === Be.StyleSheetRule)
                    return B3({}, t5, { cv: "2024-10", data: B3({}, t5.data, { adds: t5.data.adds ? hs(t5.data.adds) : void 0, removes: t5.data.removes ? hs(t5.data.removes) : void 0 }) });
                } catch (t6) {
                  ns.error("could not compress event - will use uncompressed event", t6);
                }
                return t5;
              }(n4) : n4, h4 = { $snapshot_bytes: ze(u4), $snapshot_data: u4, $session_id: this.Ct, $window_id: this.fi };
              this.status !== Nr ? this.Ui(h4) : this.pi();
            }
          }
        }
      }
    }
    Li() {
      if (!this._instance.config.capture_pageview && t3) {
        var i5 = this.yi(t3.location.href);
        this.Di !== i5 && (this.ui("$url_changed", { href: i5 }), this.Di = i5);
      }
    }
    Ai() {
      if (this.Qt.length) {
        var t4 = [...this.Qt];
        this.Qt = [], t4.forEach((t5) => {
          Date.now() - t5.enqueuedAt <= 2e3 && this.Mi(t5);
        });
      }
    }
    yi(t4) {
      var i5 = this._instance.config.session_recording;
      if (i5.maskNetworkRequestFn) {
        var e6, r4 = { url: t4 };
        return null == (e6 = r4 = i5.maskNetworkRequestFn(r4)) ? void 0 : e6.url;
      }
      return t4;
    }
    pi() {
      return this.C = { size: 0, data: [], sessionId: this.Ct, windowId: this.fi }, this.C;
    }
    ai() {
      this.qi && (clearTimeout(this.qi), this.qi = void 0);
      var t4 = this.Gt, i5 = this.Nt, e6 = O2(i5) && i5 >= 0, r4 = O2(t4) && e6 && i5 < t4;
      if (this.status === qr || this.status === Br || this.status === Nr || r4)
        return this.qi = setTimeout(() => {
          this.ai();
        }, 2e3), this.C;
      this.C.data.length > 0 && Ue(this.C).forEach((t5) => {
        this.Bi({ $snapshot_bytes: t5.size, $snapshot_data: t5.data, $session_id: t5.sessionId, $window_id: t5.windowId, $lib: "web", $lib_version: c3.LIB_VERSION });
      });
      return this.pi();
    }
    Ui(t4) {
      var i5, e6 = 2 + ((null == (i5 = this.C) ? void 0 : i5.data.length) || 0);
      !this.Zt && (this.C.size + t4.$snapshot_bytes + e6 > 943718.4 || this.C.sessionId !== this.Ct) && (this.C = this.ai()), this.C.size += t4.$snapshot_bytes, this.C.data.push(t4.$snapshot_data), this.qi || this.Zt || (this.qi = setTimeout(() => {
        this.ai();
      }, 2e3));
    }
    Bi(t4) {
      this._instance.capture("$snapshot", t4, { _url: this._instance.requestRouter.endpointFor("api", this.vi), _noTruncate: true, _batchKey: "recordings", skip_client_rate_limiting: true });
    }
    zi(t4) {
      var i5;
      this.Lt.triggerStatus(this.sessionId) === Gr && (null == (i5 = this._instance) || null == (i5 = i5.persistence) || i5.register({ ["url" === t4 ? xt : Et]: this.Ct }), this.ai(), this.ki(t4 + "_trigger_matched"));
    }
    ji() {
      this.Kt.urlBlocked || (this.Kt.urlBlocked = true, clearInterval(this.wi), ns.info("recording paused due to URL blocker"), this.ui("recording paused", { reason: "url blocker" }));
    }
    Ni() {
      this.Kt.urlBlocked && (this.Kt.urlBlocked = false, this.Ci(), this.Ti(), this.ui("recording resumed", { reason: "left blocked url" }), ns.info("recording resumed"));
    }
    bi() {
      0 !== this.Yt.Tt.length && F2(this.ni) && (this.ni = this._instance.on("eventCaptured", (t4) => {
        try {
          this.Yt.Tt.includes(t4.event) && this.zi("event");
        } catch (t5) {
          ns.error("Could not activate event trigger", t5);
        }
      }));
    }
    overrideLinkedFlag() {
      this.Xt.linkedFlagSeen = true, this.Ci(), this.ki("linked_flag_overridden");
    }
    overrideSampling() {
      var t4;
      null == (t4 = this._instance.persistence) || t4.register({ [kt]: true }), this.Ci(), this.ki("sampling_overridden");
    }
    overrideTrigger(t4) {
      this.zi(t4);
    }
    ki(t4, i5) {
      this._instance.register_for_session({ $session_recording_start_reason: t4 }), ns.info(t4.replace("_", " "), i5), m3(["recording_initialized", "session_id_changed"], t4) || this.ui(t4, i5);
    }
    get sdkDebugProperties() {
      var { sessionStartTimestamp: t4 } = this.At.checkAndGetSessionAndWindowId(true);
      return { $recording_status: this.status, $sdk_debug_replay_internal_buffer_length: this.C.data.length, $sdk_debug_replay_internal_buffer_size: this.C.size, $sdk_debug_current_session_duration: this.Nt, $sdk_debug_session_start: t4 };
    }
  };
  var cs = z3("[SegmentIntegration]");
  function fs(t4, i5) {
    var e6 = t4.config.segment;
    if (!e6)
      return i5();
    !function(t5, i6) {
      var e7 = t5.config.segment;
      if (!e7)
        return i6();
      var r4 = (e8) => {
        var r5 = () => e8.anonymousId() || ji();
        t5.config.get_device_id = r5, e8.id() && (t5.register({ distinct_id: e8.id(), $device_id: r5() }), t5.persistence.set_property(At, "identified")), i6();
      }, s4 = e7.user();
      "then" in s4 && E2(s4.then) ? s4.then((t6) => r4(t6)) : r4(s4);
    }(t4, () => {
      e6.register(((t5) => {
        Promise && Promise.resolve || cs.warn("This browser does not have Promise support, and can not use the segment integration");
        var i6 = (i7, e7) => {
          if (!e7)
            return i7;
          i7.event.userId || i7.event.anonymousId === t5.get_distinct_id() || (cs.info("No userId set, resetting PostHog"), t5.reset()), i7.event.userId && i7.event.userId !== t5.get_distinct_id() && (cs.info("UserId set, identifying with PostHog"), t5.identify(i7.event.userId));
          var r4 = t5.calculateEventProperties(e7, i7.event.properties);
          return i7.event.properties = Object.assign({}, r4, i7.event.properties), i7;
        };
        return { name: "PostHog JS", type: "enrichment", version: "1.0.0", isLoaded: () => true, load: () => Promise.resolve(), track: (t6) => i6(t6, t6.event.event), page: (t6) => i6(t6, "$pageview"), identify: (t6) => i6(t6, "$identify"), screen: (t6) => i6(t6, "$screen") };
      })(t4)).then(() => {
        i5();
      });
    });
  }
  var ps = "posthog-js";
  function gs(t4, i5) {
    var { organization: e6, projectId: r4, prefix: s4, severityAllowList: n4 = ["error"] } = void 0 === i5 ? {} : i5;
    return (i6) => {
      var o5, a5, l5, u4, h4;
      if (!("*" === n4 || n4.includes(i6.level)) || !t4.__loaded)
        return i6;
      i6.tags || (i6.tags = {});
      var d4 = t4.requestRouter.endpointFor("ui", "/project/" + t4.config.token + "/person/" + t4.get_distinct_id());
      i6.tags["PostHog Person URL"] = d4, t4.sessionRecordingStarted() && (i6.tags["PostHog Recording URL"] = t4.get_session_replay_url({ withTimestamp: true }));
      var v4 = (null == (o5 = i6.exception) ? void 0 : o5.values) || [], c4 = v4.map((t5) => B3({}, t5, { stacktrace: t5.stacktrace ? B3({}, t5.stacktrace, { type: "raw", frames: (t5.stacktrace.frames || []).map((t6) => B3({}, t6, { platform: "web:javascript" })) }) : void 0 })), f4 = { $exception_message: (null == (a5 = v4[0]) ? void 0 : a5.value) || i6.message, $exception_type: null == (l5 = v4[0]) ? void 0 : l5.type, $exception_personURL: d4, $exception_level: i6.level, $exception_list: c4, $sentry_event_id: i6.event_id, $sentry_exception: i6.exception, $sentry_exception_message: (null == (u4 = v4[0]) ? void 0 : u4.value) || i6.message, $sentry_exception_type: null == (h4 = v4[0]) ? void 0 : h4.type, $sentry_tags: i6.tags };
      return e6 && r4 && (f4.$sentry_url = (s4 || "https://sentry.io/organizations/") + e6 + "/issues/?project=" + r4 + "&query=" + i6.event_id), t4.exceptions.sendExceptionEvent(f4), i6;
    };
  }
  var _s = class {
    constructor(t4, i5, e6, r4, s4) {
      this.name = ps, this.setupOnce = function(n4) {
        n4(gs(t4, { organization: i5, projectId: e6, prefix: r4, severityAllowList: s4 }));
      };
    }
  };
  var ms = null != t3 && t3.location ? xi(t3.location.hash, "__posthog") || xi(location.hash, "state") : null;
  var bs = "_postHogToolbarParams";
  var ys = z3("[Toolbar]");
  var ws = function(t4) {
    return t4[t4.UNINITIALIZED = 0] = "UNINITIALIZED", t4[t4.LOADING = 1] = "LOADING", t4[t4.LOADED = 2] = "LOADED", t4;
  }(ws || {});
  var Ss = class {
    constructor(t4) {
      this.instance = t4;
    }
    Hi(t4) {
      v3.ph_toolbar_state = t4;
    }
    Wi() {
      var t4;
      return null !== (t4 = v3.ph_toolbar_state) && void 0 !== t4 ? t4 : ws.UNINITIALIZED;
    }
    maybeLoadToolbar(i5, e6, r4) {
      if (void 0 === i5 && (i5 = void 0), void 0 === e6 && (e6 = void 0), void 0 === r4 && (r4 = void 0), !t3 || !o4)
        return false;
      i5 = null != i5 ? i5 : t3.location, r4 = null != r4 ? r4 : t3.history;
      try {
        if (!e6) {
          try {
            t3.localStorage.setItem("test", "test"), t3.localStorage.removeItem("test");
          } catch (t4) {
            return false;
          }
          e6 = null == t3 ? void 0 : t3.localStorage;
        }
        var s4, n4 = ms || xi(i5.hash, "__posthog") || xi(i5.hash, "state"), a5 = n4 ? X2(() => JSON.parse(atob(decodeURIComponent(n4)))) || X2(() => JSON.parse(decodeURIComponent(n4))) : null;
        return a5 && "ph_authorize" === a5.action ? ((s4 = a5).source = "url", s4 && Object.keys(s4).length > 0 && (a5.desiredHash ? i5.hash = a5.desiredHash : r4 ? r4.replaceState(r4.state, "", i5.pathname + i5.search) : i5.hash = "")) : ((s4 = JSON.parse(e6.getItem(bs) || "{}")).source = "localstorage", delete s4.userIntent), !(!s4.token || this.instance.config.token !== s4.token) && (this.loadToolbar(s4), true);
      } catch (t4) {
        return false;
      }
    }
    Gi(t4) {
      var i5 = v3.ph_load_toolbar || v3.ph_load_editor;
      !F2(i5) && E2(i5) ? i5(t4, this.instance) : ys.warn("No toolbar load function found");
    }
    loadToolbar(i5) {
      var e6 = !(null == o4 || !o4.getElementById(qt));
      if (!t3 || e6)
        return false;
      var r4 = "custom" === this.instance.requestRouter.region && this.instance.config.advanced_disable_toolbar_metrics, s4 = B3({ token: this.instance.config.token }, i5, { apiURL: this.instance.requestRouter.endpointFor("ui") }, r4 ? { instrument: false } : {});
      if (t3.localStorage.setItem(bs, JSON.stringify(B3({}, s4, { source: void 0 }))), this.Wi() === ws.LOADED)
        this.Gi(s4);
      else if (this.Wi() === ws.UNINITIALIZED) {
        var n4;
        this.Hi(ws.LOADING), null == (n4 = v3.__PosthogExtensions__) || null == n4.loadExternalDependency || n4.loadExternalDependency(this.instance, "toolbar", (t4) => {
          if (t4)
            return ys.error("[Toolbar] Failed to load", t4), void this.Hi(ws.UNINITIALIZED);
          this.Hi(ws.LOADED), this.Gi(s4);
        }), st(t3, "turbolinks:load", () => {
          this.Hi(ws.UNINITIALIZED), this.loadToolbar(s4);
        });
      }
      return true;
    }
    Ji(t4) {
      return this.loadToolbar(t4);
    }
    maybeLoadEditor(t4, i5, e6) {
      return void 0 === t4 && (t4 = void 0), void 0 === i5 && (i5 = void 0), void 0 === e6 && (e6 = void 0), this.maybeLoadToolbar(t4, i5, e6);
    }
  };
  var $s = z3("[TracingHeaders]");
  var ks = class {
    constructor(t4) {
      this.Vi = void 0, this.Ki = void 0, this.nt = () => {
        var t5, i5;
        R(this.Vi) && (null == (t5 = v3.__PosthogExtensions__) || null == (t5 = t5.tracingHeadersPatchFns) || t5._patchXHR(this._instance.get_distinct_id(), this._instance.sessionManager));
        R(this.Ki) && (null == (i5 = v3.__PosthogExtensions__) || null == (i5 = i5.tracingHeadersPatchFns) || i5._patchFetch(this._instance.get_distinct_id(), this._instance.sessionManager));
      }, this._instance = t4;
    }
    J(t4) {
      var i5, e6;
      null != (i5 = v3.__PosthogExtensions__) && i5.tracingHeadersPatchFns && t4(), null == (e6 = v3.__PosthogExtensions__) || null == e6.loadExternalDependency || e6.loadExternalDependency(this._instance, "tracing-headers", (i6) => {
        if (i6)
          return $s.error("failed to load script", i6);
        t4();
      });
    }
    startIfEnabledOrStop() {
      var t4, i5;
      this._instance.config.__add_tracing_headers ? this.J(this.nt) : (null == (t4 = this.Vi) || t4.call(this), null == (i5 = this.Ki) || i5.call(this), this.Vi = void 0, this.Ki = void 0);
    }
  };
  var xs = z3("[Web Vitals]");
  var Es = 9e5;
  var Is = class {
    constructor(t4) {
      var i5;
      this.Yi = false, this.i = false, this.C = { url: void 0, metrics: [], firstMetricTimestamp: void 0 }, this.Xi = () => {
        clearTimeout(this.Qi), 0 !== this.C.metrics.length && (this._instance.capture("$web_vitals", this.C.metrics.reduce((t5, i6) => B3({}, t5, { ["$web_vitals_" + i6.name + "_event"]: B3({}, i6), ["$web_vitals_" + i6.name + "_value"]: i6.value }), {})), this.C = { url: void 0, metrics: [], firstMetricTimestamp: void 0 });
      }, this.Zi = (t5) => {
        var i6, e6 = null == (i6 = this._instance.sessionManager) ? void 0 : i6.checkAndGetSessionAndWindowId(true);
        if (R(e6))
          xs.error("Could not read session ID. Dropping metrics!");
        else {
          this.C = this.C || { url: void 0, metrics: [], firstMetricTimestamp: void 0 };
          var r4 = this.te();
          if (!R(r4))
            if (F2(null == t5 ? void 0 : t5.name) || F2(null == t5 ? void 0 : t5.value))
              xs.error("Invalid metric received", t5);
            else if (this.ie && t5.value >= this.ie)
              xs.error("Ignoring metric with value >= " + this.ie, t5);
            else
              this.C.url !== r4 && (this.Xi(), this.Qi = setTimeout(this.Xi, this.flushToCaptureTimeoutMs)), R(this.C.url) && (this.C.url = r4), this.C.firstMetricTimestamp = R(this.C.firstMetricTimestamp) ? Date.now() : this.C.firstMetricTimestamp, t5.attribution && t5.attribution.interactionTargetElement && (t5.attribution.interactionTargetElement = void 0), this.C.metrics.push(B3({}, t5, { $current_url: r4, $session_id: e6.sessionId, $window_id: e6.windowId, timestamp: Date.now() })), this.C.metrics.length === this.allowedMetrics.length && this.Xi();
        }
      }, this.nt = () => {
        var t5, i6, e6, r4, s4 = v3.__PosthogExtensions__;
        R(s4) || R(s4.postHogWebVitalsCallbacks) || ({ onLCP: t5, onCLS: i6, onFCP: e6, onINP: r4 } = s4.postHogWebVitalsCallbacks), t5 && i6 && e6 && r4 ? (this.allowedMetrics.indexOf("LCP") > -1 && t5(this.Zi.bind(this)), this.allowedMetrics.indexOf("CLS") > -1 && i6(this.Zi.bind(this)), this.allowedMetrics.indexOf("FCP") > -1 && e6(this.Zi.bind(this)), this.allowedMetrics.indexOf("INP") > -1 && r4(this.Zi.bind(this)), this.i = true) : xs.error("web vitals callbacks not loaded - not starting");
      }, this._instance = t4, this.Yi = !(null == (i5 = this._instance.persistence) || !i5.props[vt]), this.startIfEnabled();
    }
    get allowedMetrics() {
      var t4, i5, e6 = I2(this._instance.config.capture_performance) ? null == (t4 = this._instance.config.capture_performance) ? void 0 : t4.web_vitals_allowed_metrics : void 0;
      return R(e6) ? (null == (i5 = this._instance.persistence) ? void 0 : i5.props[ft]) || ["CLS", "FCP", "INP", "LCP"] : e6;
    }
    get flushToCaptureTimeoutMs() {
      return (I2(this._instance.config.capture_performance) ? this._instance.config.capture_performance.web_vitals_delayed_flush_ms : void 0) || 5e3;
    }
    get ie() {
      var t4 = I2(this._instance.config.capture_performance) && O2(this._instance.config.capture_performance.__web_vitals_max_value) ? this._instance.config.capture_performance.__web_vitals_max_value : Es;
      return 0 < t4 && t4 <= 6e4 ? Es : t4;
    }
    get isEnabled() {
      var t4 = null == a4 ? void 0 : a4.protocol;
      if ("http:" !== t4 && "https:" !== t4)
        return xs.info("Web Vitals are disabled on non-http/https protocols"), false;
      var i5 = I2(this._instance.config.capture_performance) ? this._instance.config.capture_performance.web_vitals : A3(this._instance.config.capture_performance) ? this._instance.config.capture_performance : void 0;
      return A3(i5) ? i5 : this.Yi;
    }
    startIfEnabled() {
      this.isEnabled && !this.i && (xs.info("enabled, starting..."), this.J(this.nt));
    }
    onRemoteConfig(t4) {
      var i5 = I2(t4.capturePerformance) && !!t4.capturePerformance.web_vitals, e6 = I2(t4.capturePerformance) ? t4.capturePerformance.web_vitals_allowed_metrics : void 0;
      this._instance.persistence && (this._instance.persistence.register({ [vt]: i5 }), this._instance.persistence.register({ [ft]: e6 })), this.Yi = i5, this.startIfEnabled();
    }
    J(t4) {
      var i5, e6;
      null != (i5 = v3.__PosthogExtensions__) && i5.postHogWebVitalsCallbacks && t4(), null == (e6 = v3.__PosthogExtensions__) || null == e6.loadExternalDependency || e6.loadExternalDependency(this._instance, "web-vitals", (i6) => {
        i6 ? xs.error("failed to load script", i6) : t4();
      });
    }
    te() {
      var i5 = t3 ? t3.location.href : void 0;
      return i5 || xs.error("Could not determine current URL"), i5;
    }
  };
  var Ps = z3("[Heatmaps]");
  function Rs(t4) {
    return I2(t4) && "clientX" in t4 && "clientY" in t4 && O2(t4.clientX) && O2(t4.clientY);
  }
  var Ts = class {
    constructor(t4) {
      var i5;
      this.rageclicks = new bi(), this.Yi = false, this.i = false, this.ee = null, this.instance = t4, this.Yi = !(null == (i5 = this.instance.persistence) || !i5.props[ut]);
    }
    get flushIntervalMilliseconds() {
      var t4 = 5e3;
      return I2(this.instance.config.capture_heatmaps) && this.instance.config.capture_heatmaps.flush_interval_milliseconds && (t4 = this.instance.config.capture_heatmaps.flush_interval_milliseconds), t4;
    }
    get isEnabled() {
      return R(this.instance.config.capture_heatmaps) ? R(this.instance.config.enable_heatmaps) ? this.Yi : this.instance.config.enable_heatmaps : false !== this.instance.config.capture_heatmaps;
    }
    startIfEnabled() {
      if (this.isEnabled) {
        if (this.i)
          return;
        Ps.info("starting..."), this.re(), this.ee = setInterval(this.se.bind(this), this.flushIntervalMilliseconds);
      } else {
        var t4, i5;
        clearInterval(null !== (t4 = this.ee) && void 0 !== t4 ? t4 : void 0), null == (i5 = this.ne) || i5.stop(), this.getAndClearBuffer();
      }
    }
    onRemoteConfig(t4) {
      var i5 = !!t4.heatmaps;
      this.instance.persistence && this.instance.persistence.register({ [ut]: i5 }), this.Yi = i5, this.startIfEnabled();
    }
    getAndClearBuffer() {
      var t4 = this.C;
      return this.C = void 0, t4;
    }
    oe(t4) {
      this.ae(t4.originalEvent, "deadclick");
    }
    re() {
      t3 && o4 && (st(t3, "beforeunload", this.se.bind(this)), st(o4, "click", (i5) => this.ae(i5 || (null == t3 ? void 0 : t3.event)), { capture: true }), st(o4, "mousemove", (i5) => this.le(i5 || (null == t3 ? void 0 : t3.event)), { capture: true }), this.ne = new re2(this.instance, ie, this.oe.bind(this)), this.ne.startIfEnabled(), this.i = true);
    }
    ue(i5, e6) {
      var r4 = this.instance.scrollManager.scrollY(), s4 = this.instance.scrollManager.scrollX(), n4 = this.instance.scrollManager.scrollElement(), o5 = function(i6, e7, r5) {
        for (var s5 = i6; s5 && Gt(s5) && !Jt(s5, "body"); ) {
          if (s5 === r5)
            return false;
          if (m3(e7, null == t3 ? void 0 : t3.getComputedStyle(s5).position))
            return true;
          s5 = ri(s5);
        }
        return false;
      }(ii(i5), ["fixed", "sticky"], n4);
      return { x: i5.clientX + (o5 ? 0 : s4), y: i5.clientY + (o5 ? 0 : r4), target_fixed: o5, type: e6 };
    }
    ae(t4, i5) {
      var e6;
      if (void 0 === i5 && (i5 = "click"), !Wt(t4.target) && Rs(t4)) {
        var r4 = this.ue(t4, i5);
        null != (e6 = this.rageclicks) && e6.isRageClick(t4.clientX, t4.clientY, (/* @__PURE__ */ new Date()).getTime()) && this.he(B3({}, r4, { type: "rageclick" })), this.he(r4);
      }
    }
    le(t4) {
      !Wt(t4.target) && Rs(t4) && (clearTimeout(this.de), this.de = setTimeout(() => {
        this.he(this.ue(t4, "mousemove"));
      }, 500));
    }
    he(i5) {
      if (t3) {
        var e6 = t3.location.href;
        this.C = this.C || {}, this.C[e6] || (this.C[e6] = []), this.C[e6].push(i5);
      }
    }
    se() {
      this.C && !P2(this.C) && this.instance.capture("$$heatmap", { $heatmap_data: this.getAndClearBuffer() });
    }
  };
  var Ms = class {
    constructor(t4) {
      this._instance = t4;
    }
    doPageView(i5, e6) {
      var r4, s4 = this.ve(i5, e6);
      return this.ce = { pathname: null !== (r4 = null == t3 ? void 0 : t3.location.pathname) && void 0 !== r4 ? r4 : "", pageViewId: e6, timestamp: i5 }, this._instance.scrollManager.resetContext(), s4;
    }
    doPageLeave(t4) {
      var i5;
      return this.ve(t4, null == (i5 = this.ce) ? void 0 : i5.pageViewId);
    }
    doEvent() {
      var t4;
      return { $pageview_id: null == (t4 = this.ce) ? void 0 : t4.pageViewId };
    }
    ve(t4, i5) {
      var e6 = this.ce;
      if (!e6)
        return { $pageview_id: i5 };
      var r4 = { $pageview_id: i5, $prev_pageview_id: e6.pageViewId }, s4 = this._instance.scrollManager.getContext();
      if (s4 && !this._instance.config.disable_scroll_properties) {
        var { maxScrollHeight: n4, lastScrollY: o5, maxScrollY: a5, maxContentHeight: l5, lastContentY: u4, maxContentY: h4 } = s4;
        if (!(R(n4) || R(o5) || R(a5) || R(l5) || R(u4) || R(h4))) {
          n4 = Math.ceil(n4), o5 = Math.ceil(o5), a5 = Math.ceil(a5), l5 = Math.ceil(l5), u4 = Math.ceil(u4), h4 = Math.ceil(h4);
          var d4 = n4 <= 1 ? 1 : se(o5 / n4, 0, 1), v4 = n4 <= 1 ? 1 : se(a5 / n4, 0, 1), c4 = l5 <= 1 ? 1 : se(u4 / l5, 0, 1), f4 = l5 <= 1 ? 1 : se(h4 / l5, 0, 1);
          r4 = V2(r4, { $prev_pageview_last_scroll: o5, $prev_pageview_last_scroll_percentage: d4, $prev_pageview_max_scroll: a5, $prev_pageview_max_scroll_percentage: v4, $prev_pageview_last_content: u4, $prev_pageview_last_content_percentage: c4, $prev_pageview_max_content: h4, $prev_pageview_max_content_percentage: f4 });
        }
      }
      return e6.pathname && (r4.$prev_pageview_pathname = e6.pathname), e6.timestamp && (r4.$prev_pageview_duration = (t4.getTime() - e6.timestamp.getTime()) / 1e3), r4;
    }
  };
  var Cs = function(t4) {
    var i5, e6, r4, s4, n4 = "";
    for (i5 = e6 = 0, r4 = (t4 = (t4 + "").replace(/\r\n/g, "\n").replace(/\r/g, "\n")).length, s4 = 0; s4 < r4; s4++) {
      var o5 = t4.charCodeAt(s4), a5 = null;
      o5 < 128 ? e6++ : a5 = o5 > 127 && o5 < 2048 ? String.fromCharCode(o5 >> 6 | 192, 63 & o5 | 128) : String.fromCharCode(o5 >> 12 | 224, o5 >> 6 & 63 | 128, 63 & o5 | 128), C4(a5) || (e6 > i5 && (n4 += t4.substring(i5, e6)), n4 += a5, i5 = e6 = s4 + 1);
    }
    return e6 > i5 && (n4 += t4.substring(i5, t4.length)), n4;
  };
  var Fs = !!u3 || !!l4;
  var Os = "text/plain";
  var As = (t4, i5) => {
    var [e6, r4] = t4.split("?"), s4 = B3({}, i5);
    null == r4 || r4.split("&").forEach((t5) => {
      var [i6] = t5.split("=");
      delete s4[i6];
    });
    var n4 = Si(s4);
    return e6 + "?" + (n4 = n4 ? (r4 ? r4 + "&" : "") + n4 : r4);
  };
  var Ds = (t4, i5) => JSON.stringify(t4, (t5, i6) => "bigint" == typeof i6 ? i6.toString() : i6, i5);
  var Ls = (t4) => {
    var { data: i5, compression: e6 } = t4;
    if (i5) {
      if (e6 === g3.GZipJS) {
        var r4 = Dr(Lr(Ds(i5)), { mtime: 0 }), s4 = new Blob([r4], { type: Os });
        return { contentType: Os, body: s4, estimatedSize: s4.size };
      }
      if (e6 === g3.Base64) {
        var n4 = function(t5) {
          var i6, e7, r5, s5, n5, o6 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=", a6 = 0, l5 = 0, u4 = "", h4 = [];
          if (!t5)
            return t5;
          t5 = Cs(t5);
          do {
            i6 = (n5 = t5.charCodeAt(a6++) << 16 | t5.charCodeAt(a6++) << 8 | t5.charCodeAt(a6++)) >> 18 & 63, e7 = n5 >> 12 & 63, r5 = n5 >> 6 & 63, s5 = 63 & n5, h4[l5++] = o6.charAt(i6) + o6.charAt(e7) + o6.charAt(r5) + o6.charAt(s5);
          } while (a6 < t5.length);
          switch (u4 = h4.join(""), t5.length % 3) {
            case 1:
              u4 = u4.slice(0, -2) + "==";
              break;
            case 2:
              u4 = u4.slice(0, -1) + "=";
          }
          return u4;
        }(Ds(i5)), o5 = ((t5) => "data=" + encodeURIComponent("string" == typeof t5 ? t5 : Ds(t5)))(n4);
        return { contentType: "application/x-www-form-urlencoded", body: o5, estimatedSize: new Blob([o5]).size };
      }
      var a5 = Ds(i5);
      return { contentType: "application/json", body: a5, estimatedSize: new Blob([a5]).size };
    }
  };
  var js = [];
  l4 && js.push({ transport: "fetch", method: (t4) => {
    var i5, e6, { contentType: r4, body: s4, estimatedSize: n4 } = null !== (i5 = Ls(t4)) && void 0 !== i5 ? i5 : {}, o5 = new Headers();
    J2(t4.headers, function(t5, i6) {
      o5.append(i6, t5);
    }), r4 && o5.append("Content-Type", r4);
    var a5 = t4.url, u4 = null;
    if (h3) {
      var d4 = new h3();
      u4 = { signal: d4.signal, timeout: setTimeout(() => d4.abort(), t4.timeout) };
    }
    l4(a5, B3({ method: (null == t4 ? void 0 : t4.method) || "GET", headers: o5, keepalive: "POST" === t4.method && (n4 || 0) < 52428.8, body: s4, signal: null == (e6 = u4) ? void 0 : e6.signal }, t4.fetchOptions)).then((i6) => i6.text().then((e7) => {
      var r5 = { statusCode: i6.status, text: e7 };
      if (200 === i6.status)
        try {
          r5.json = JSON.parse(e7);
        } catch (t5) {
          N2.error(t5);
        }
      null == t4.callback || t4.callback(r5);
    })).catch((i6) => {
      N2.error(i6), null == t4.callback || t4.callback({ statusCode: 0, text: i6 });
    }).finally(() => u4 ? clearTimeout(u4.timeout) : null);
  } }), u3 && js.push({ transport: "XHR", method: (t4) => {
    var i5, e6 = new u3();
    e6.open(t4.method || "GET", t4.url, true);
    var { contentType: r4, body: s4 } = null !== (i5 = Ls(t4)) && void 0 !== i5 ? i5 : {};
    J2(t4.headers, function(t5, i6) {
      e6.setRequestHeader(i6, t5);
    }), r4 && e6.setRequestHeader("Content-Type", r4), t4.timeout && (e6.timeout = t4.timeout), e6.withCredentials = true, e6.onreadystatechange = () => {
      if (4 === e6.readyState) {
        var i6 = { statusCode: e6.status, text: e6.responseText };
        if (200 === e6.status)
          try {
            i6.json = JSON.parse(e6.responseText);
          } catch (t5) {
          }
        null == t4.callback || t4.callback(i6);
      }
    }, e6.send(s4);
  } }), null != n3 && n3.sendBeacon && js.push({ transport: "sendBeacon", method: (t4) => {
    var i5 = As(t4.url, { beacon: "1" });
    try {
      var e6, { contentType: r4, body: s4 } = null !== (e6 = Ls(t4)) && void 0 !== e6 ? e6 : {}, o5 = "string" == typeof s4 ? new Blob([s4], { type: r4 }) : s4;
      n3.sendBeacon(i5, o5);
    } catch (t5) {
    }
  } });
  var Ns = function(t4, i5) {
    if (!function(t5) {
      try {
        new RegExp(t5);
      } catch (t6) {
        return false;
      }
      return true;
    }(i5))
      return false;
    try {
      return new RegExp(i5).test(t4);
    } catch (t5) {
      return false;
    }
  };
  function zs(t4, i5, e6) {
    return Ds({ distinct_id: t4, userPropertiesToSet: i5, userPropertiesToSetOnce: e6 });
  }
  var Us = { exact: (t4, i5) => i5.some((i6) => t4.some((t5) => i6 === t5)), is_not: (t4, i5) => i5.every((i6) => t4.every((t5) => i6 !== t5)), regex: (t4, i5) => i5.some((i6) => t4.some((t5) => Ns(i6, t5))), not_regex: (t4, i5) => i5.every((i6) => t4.every((t5) => !Ns(i6, t5))), icontains: (t4, i5) => i5.map(qs).some((i6) => t4.map(qs).some((t5) => i6.includes(t5))), not_icontains: (t4, i5) => i5.map(qs).every((i6) => t4.map(qs).every((t5) => !i6.includes(t5))) };
  var qs = (t4) => t4.toLowerCase();
  var Bs = z3("[Error tracking]");
  var Hs = class {
    constructor(t4) {
      var i5, e6;
      this.fe = [], this._instance = t4, this.fe = null !== (i5 = null == (e6 = this._instance.persistence) ? void 0 : e6.get_property(dt)) && void 0 !== i5 ? i5 : [];
    }
    onRemoteConfig(t4) {
      var i5, e6, r4 = null !== (i5 = null == (e6 = t4.errorTracking) ? void 0 : e6.suppressionRules) && void 0 !== i5 ? i5 : [];
      this.fe = r4, this._instance.persistence && this._instance.persistence.register({ [dt]: this.fe });
    }
    sendExceptionEvent(t4) {
      this.pe(t4) ? Bs.info("Skipping exception capture because a suppression rule matched") : this._instance.capture("$exception", t4, { _noTruncate: true, _batchKey: "exceptionEvent" });
    }
    pe(t4) {
      var i5 = t4.$exception_list;
      if (!i5 || !x4(i5) || 0 === i5.length)
        return false;
      var e6 = i5.reduce((t5, i6) => {
        var { type: e7, value: r4 } = i6;
        return T3(e7) && e7.length > 0 && t5.$exception_types.push(e7), T3(r4) && r4.length > 0 && t5.$exception_values.push(r4), t5;
      }, { $exception_types: [], $exception_values: [] });
      return this.fe.some((t5) => {
        var i6 = t5.values.map((t6) => {
          var i7, r4 = Us[t6.operator], s4 = x4(t6.value) ? t6.value : [t6.value], n4 = null !== (i7 = e6[t6.key]) && void 0 !== i7 ? i7 : [];
          return s4.length > 0 && r4(s4, n4);
        });
        return "OR" === t5.type ? i6.some(Boolean) : i6.every(Boolean);
      });
    }
  };
  var Ws = "Mobile";
  var Gs = "iOS";
  var Js = "Android";
  var Vs = "Tablet";
  var Ks = Js + " " + Vs;
  var Ys = "iPad";
  var Xs = "Apple";
  var Qs = Xs + " Watch";
  var Zs = "Safari";
  var tn = "BlackBerry";
  var en = "Samsung";
  var rn = en + "Browser";
  var sn = en + " Internet";
  var nn = "Chrome";
  var on = nn + " OS";
  var an = nn + " " + Gs;
  var ln = "Internet Explorer";
  var un = ln + " " + Ws;
  var hn = "Opera";
  var dn = hn + " Mini";
  var vn = "Edge";
  var cn = "Microsoft " + vn;
  var fn = "Firefox";
  var pn = fn + " " + Gs;
  var gn = "Nintendo";
  var _n = "PlayStation";
  var mn = "Xbox";
  var bn = Js + " " + Ws;
  var yn = Ws + " " + Zs;
  var wn = "Windows";
  var Sn = wn + " Phone";
  var $n = "Nokia";
  var kn = "Ouya";
  var xn = "Generic";
  var En = xn + " " + Ws.toLowerCase();
  var In = xn + " " + Vs.toLowerCase();
  var Pn = "Konqueror";
  var Rn = "(\\d+(\\.\\d+)?)";
  var Tn = new RegExp("Version/" + Rn);
  var Mn = new RegExp(mn, "i");
  var Cn = new RegExp(_n + " \\w+", "i");
  var Fn = new RegExp(gn + " \\w+", "i");
  var On = new RegExp(tn + "|PlayBook|BB10", "i");
  var An = { "NT3.51": "NT 3.11", "NT4.0": "NT 4.0", "5.0": "2000", 5.1: "XP", 5.2: "XP", "6.0": "Vista", 6.1: "7", 6.2: "8", 6.3: "8.1", 6.4: "10", "10.0": "10" };
  var Dn = (t4, i5) => i5 && m3(i5, Xs) || function(t5) {
    return m3(t5, Zs) && !m3(t5, nn) && !m3(t5, Js);
  }(t4);
  var Ln = function(t4, i5) {
    return i5 = i5 || "", m3(t4, " OPR/") && m3(t4, "Mini") ? dn : m3(t4, " OPR/") ? hn : On.test(t4) ? tn : m3(t4, "IE" + Ws) || m3(t4, "WPDesktop") ? un : m3(t4, rn) ? sn : m3(t4, vn) || m3(t4, "Edg/") ? cn : m3(t4, "FBIOS") ? "Facebook " + Ws : m3(t4, "UCWEB") || m3(t4, "UCBrowser") ? "UC Browser" : m3(t4, "CriOS") ? an : m3(t4, "CrMo") || m3(t4, nn) ? nn : m3(t4, Js) && m3(t4, Zs) ? bn : m3(t4, "FxiOS") ? pn : m3(t4.toLowerCase(), Pn.toLowerCase()) ? Pn : Dn(t4, i5) ? m3(t4, Ws) ? yn : Zs : m3(t4, fn) ? fn : m3(t4, "MSIE") || m3(t4, "Trident/") ? ln : m3(t4, "Gecko") ? fn : "";
  };
  var jn = { [un]: [new RegExp("rv:" + Rn)], [cn]: [new RegExp(vn + "?\\/" + Rn)], [nn]: [new RegExp("(" + nn + "|CrMo)\\/" + Rn)], [an]: [new RegExp("CriOS\\/" + Rn)], "UC Browser": [new RegExp("(UCBrowser|UCWEB)\\/" + Rn)], [Zs]: [Tn], [yn]: [Tn], [hn]: [new RegExp("(Opera|OPR)\\/" + Rn)], [fn]: [new RegExp(fn + "\\/" + Rn)], [pn]: [new RegExp("FxiOS\\/" + Rn)], [Pn]: [new RegExp("Konqueror[:/]?" + Rn, "i")], [tn]: [new RegExp(tn + " " + Rn), Tn], [bn]: [new RegExp("android\\s" + Rn, "i")], [sn]: [new RegExp(rn + "\\/" + Rn)], [ln]: [new RegExp("(rv:|MSIE )" + Rn)], Mozilla: [new RegExp("rv:" + Rn)] };
  var Nn = function(t4, i5) {
    var e6 = Ln(t4, i5), r4 = jn[e6];
    if (R(r4))
      return null;
    for (var s4 = 0; s4 < r4.length; s4++) {
      var n4 = r4[s4], o5 = t4.match(n4);
      if (o5)
        return parseFloat(o5[o5.length - 2]);
    }
    return null;
  };
  var zn = [[new RegExp(mn + "; " + mn + " (.*?)[);]", "i"), (t4) => [mn, t4 && t4[1] || ""]], [new RegExp(gn, "i"), [gn, ""]], [new RegExp(_n, "i"), [_n, ""]], [On, [tn, ""]], [new RegExp(wn, "i"), (t4, i5) => {
    if (/Phone/.test(i5) || /WPDesktop/.test(i5))
      return [Sn, ""];
    if (new RegExp(Ws).test(i5) && !/IEMobile\b/.test(i5))
      return [wn + " " + Ws, ""];
    var e6 = /Windows NT ([0-9.]+)/i.exec(i5);
    if (e6 && e6[1]) {
      var r4 = e6[1], s4 = An[r4] || "";
      return /arm/i.test(i5) && (s4 = "RT"), [wn, s4];
    }
    return [wn, ""];
  }], [/((iPhone|iPad|iPod).*?OS (\d+)_(\d+)_?(\d+)?|iPhone)/, (t4) => {
    if (t4 && t4[3]) {
      var i5 = [t4[3], t4[4], t4[5] || "0"];
      return [Gs, i5.join(".")];
    }
    return [Gs, ""];
  }], [/(watch.*\/(\d+\.\d+\.\d+)|watch os,(\d+\.\d+),)/i, (t4) => {
    var i5 = "";
    return t4 && t4.length >= 3 && (i5 = R(t4[2]) ? t4[3] : t4[2]), ["watchOS", i5];
  }], [new RegExp("(" + Js + " (\\d+)\\.(\\d+)\\.?(\\d+)?|" + Js + ")", "i"), (t4) => {
    if (t4 && t4[2]) {
      var i5 = [t4[2], t4[3], t4[4] || "0"];
      return [Js, i5.join(".")];
    }
    return [Js, ""];
  }], [/Mac OS X (\d+)[_.](\d+)[_.]?(\d+)?/i, (t4) => {
    var i5 = ["Mac OS X", ""];
    if (t4 && t4[1]) {
      var e6 = [t4[1], t4[2], t4[3] || "0"];
      i5[1] = e6.join(".");
    }
    return i5;
  }], [/Mac/i, ["Mac OS X", ""]], [/CrOS/, [on, ""]], [/Linux|debian/i, ["Linux", ""]]];
  var Un = function(t4) {
    return Fn.test(t4) ? gn : Cn.test(t4) ? _n : Mn.test(t4) ? mn : new RegExp(kn, "i").test(t4) ? kn : new RegExp("(" + Sn + "|WPDesktop)", "i").test(t4) ? Sn : /iPad/.test(t4) ? Ys : /iPod/.test(t4) ? "iPod Touch" : /iPhone/.test(t4) ? "iPhone" : /(watch)(?: ?os[,/]|\d,\d\/)[\d.]+/i.test(t4) ? Qs : On.test(t4) ? tn : /(kobo)\s(ereader|touch)/i.test(t4) ? "Kobo" : new RegExp($n, "i").test(t4) ? $n : /(kf[a-z]{2}wi|aeo[c-r]{2})( bui|\))/i.test(t4) || /(kf[a-z]+)( bui|\)).+silk\//i.test(t4) ? "Kindle Fire" : /(Android|ZTE)/i.test(t4) ? !new RegExp(Ws).test(t4) || /(9138B|TB782B|Nexus [97]|pixel c|HUAWEISHT|BTV|noble nook|smart ultra 6)/i.test(t4) ? /pixel[\daxl ]{1,6}/i.test(t4) && !/pixel c/i.test(t4) || /(huaweimed-al00|tah-|APA|SM-G92|i980|zte|U304AA)/i.test(t4) || /lmy47v/i.test(t4) && !/QTAQZ3/i.test(t4) ? Js : Ks : Js : new RegExp("(pda|" + Ws + ")", "i").test(t4) ? En : new RegExp(Vs, "i").test(t4) && !new RegExp(Vs + " pc", "i").test(t4) ? In : "";
  };
  var qn = "https?://(.*)";
  var Bn = ["gclid", "gclsrc", "dclid", "gbraid", "wbraid", "fbclid", "msclkid", "twclid", "li_fat_id", "igshid", "ttclid", "rdt_cid", "epik", "qclid", "sccid", "irclid", "_kx"];
  var Hn = K2(["utm_source", "utm_medium", "utm_campaign", "utm_content", "utm_term", "gad_source", "mc_cid"], Bn);
  var Wn = "<masked>";
  var Gn = ["li_fat_id"];
  function Jn(t4, i5, e6) {
    if (!o4)
      return {};
    var r4, s4 = i5 ? K2([], Bn, e6 || []) : [], n4 = Vn(ki(o4.URL, s4, Wn), t4), a5 = (r4 = {}, J2(Gn, function(t5) {
      var i6 = Bi.D(t5);
      r4[t5] = i6 || null;
    }), r4);
    return V2(a5, n4);
  }
  function Vn(t4, i5) {
    var e6 = Hn.concat(i5 || []), r4 = {};
    return J2(e6, function(i6) {
      var e7 = $i(t4, i6);
      r4[i6] = e7 || null;
    }), r4;
  }
  function Kn(t4) {
    var i5 = function(t5) {
      return t5 ? 0 === t5.search(qn + "google.([^/?]*)") ? "google" : 0 === t5.search(qn + "bing.com") ? "bing" : 0 === t5.search(qn + "yahoo.com") ? "yahoo" : 0 === t5.search(qn + "duckduckgo.com") ? "duckduckgo" : null : null;
    }(t4), e6 = "yahoo" != i5 ? "q" : "p", r4 = {};
    if (!C4(i5)) {
      r4.$search_engine = i5;
      var s4 = o4 ? $i(o4.referrer, e6) : "";
      s4.length && (r4.ph_keyword = s4);
    }
    return r4;
  }
  function Yn() {
    return navigator.language || navigator.userLanguage;
  }
  function Xn() {
    return (null == o4 ? void 0 : o4.referrer) || "$direct";
  }
  function Qn(t4, i5) {
    var e6 = t4 ? K2([], Bn, i5 || []) : [], r4 = null == a4 ? void 0 : a4.href.substring(0, 1e3);
    return { r: Xn().substring(0, 1e3), u: r4 ? ki(r4, e6, Wn) : void 0 };
  }
  function Zn(t4) {
    var i5, { r: e6, u: r4 } = t4, s4 = { $referrer: e6, $referring_domain: null == e6 ? void 0 : "$direct" == e6 ? "$direct" : null == (i5 = wi(e6)) ? void 0 : i5.host };
    if (r4) {
      s4.$current_url = r4;
      var n4 = wi(r4);
      s4.$host = null == n4 ? void 0 : n4.host, s4.$pathname = null == n4 ? void 0 : n4.pathname;
      var o5 = Vn(r4);
      V2(s4, o5);
    }
    if (e6) {
      var a5 = Kn(e6);
      V2(s4, a5);
    }
    return s4;
  }
  function to() {
    try {
      return Intl.DateTimeFormat().resolvedOptions().timeZone;
    } catch (t4) {
      return;
    }
  }
  function io() {
    try {
      return (/* @__PURE__ */ new Date()).getTimezoneOffset();
    } catch (t4) {
      return;
    }
  }
  function eo(i5, e6) {
    if (!d3)
      return {};
    var r4, s4, n4, o5 = i5 ? K2([], Bn, e6 || []) : [], [l5, u4] = function(t4) {
      for (var i6 = 0; i6 < zn.length; i6++) {
        var [e7, r5] = zn[i6], s5 = e7.exec(t4), n5 = s5 && (E2(r5) ? r5(s5, t4) : r5);
        if (n5)
          return n5;
      }
      return ["", ""];
    }(d3);
    return V2(Z({ $os: l5, $os_version: u4, $browser: Ln(d3, navigator.vendor), $device: Un(d3), $device_type: (s4 = d3, n4 = Un(s4), n4 === Ys || n4 === Ks || "Kobo" === n4 || "Kindle Fire" === n4 || n4 === In ? Vs : n4 === gn || n4 === mn || n4 === _n || n4 === kn ? "Console" : n4 === Qs ? "Wearable" : n4 ? Ws : "Desktop"), $timezone: to(), $timezone_offset: io() }), { $current_url: ki(null == a4 ? void 0 : a4.href, o5, Wn), $host: null == a4 ? void 0 : a4.host, $pathname: null == a4 ? void 0 : a4.pathname, $raw_user_agent: d3.length > 1e3 ? d3.substring(0, 997) + "..." : d3, $browser_version: Nn(d3, navigator.vendor), $browser_language: Yn(), $browser_language_prefix: (r4 = Yn(), "string" == typeof r4 ? r4.split("-")[0] : void 0), $screen_height: null == t3 ? void 0 : t3.screen.height, $screen_width: null == t3 ? void 0 : t3.screen.width, $viewport_height: null == t3 ? void 0 : t3.innerHeight, $viewport_width: null == t3 ? void 0 : t3.innerWidth, $lib: "web", $lib_version: c3.LIB_VERSION, $insert_id: Math.random().toString(36).substring(2, 10) + Math.random().toString(36).substring(2, 10), $time: Date.now() / 1e3 });
  }
  var ro = z3("[FeatureFlags]");
  var so = "$active_feature_flags";
  var no = "$override_feature_flags";
  var oo = "$feature_flag_payloads";
  var ao = "$override_feature_flag_payloads";
  var lo = "$feature_flag_request_id";
  var uo = (t4) => {
    var i5 = {};
    for (var [e6, r4] of Y2(t4 || {}))
      r4 && (i5[e6] = r4);
    return i5;
  };
  var ho = (t4) => {
    var i5 = t4.flags;
    return i5 ? (t4.featureFlags = Object.fromEntries(Object.keys(i5).map((t5) => {
      var e6;
      return [t5, null !== (e6 = i5[t5].variant) && void 0 !== e6 ? e6 : i5[t5].enabled];
    })), t4.featureFlagPayloads = Object.fromEntries(Object.keys(i5).filter((t5) => i5[t5].enabled).filter((t5) => {
      var e6;
      return null == (e6 = i5[t5].metadata) ? void 0 : e6.payload;
    }).map((t5) => {
      var e6;
      return [t5, null == (e6 = i5[t5].metadata) ? void 0 : e6.payload];
    }))) : ro.warn("Using an older version of the feature flags endpoint. Please upgrade your PostHog server to the latest version"), t4;
  };
  var vo = function(t4) {
    return t4.FeatureFlags = "feature_flags", t4.Recordings = "recordings", t4;
  }({});
  var co = class {
    constructor(t4) {
      this.ge = false, this._e = false, this.me = false, this.be = false, this.ye = false, this.we = false, this.Se = false, this._instance = t4, this.featureFlagEventHandlers = [];
    }
    flags() {
      if (this._instance.config.__preview_remote_config)
        this.we = true;
      else {
        var t4 = !this.$e && (this._instance.config.advanced_disable_feature_flags || this._instance.config.advanced_disable_feature_flags_on_first_load);
        this.ke({ disableFlags: t4 });
      }
    }
    get hasLoadedFlags() {
      return this._e;
    }
    getFlags() {
      return Object.keys(this.getFlagVariants());
    }
    getFlagsWithDetails() {
      var t4 = this._instance.get_property(Rt), i5 = this._instance.get_property(no), e6 = this._instance.get_property(ao);
      if (!e6 && !i5)
        return t4 || {};
      var r4 = V2({}, t4 || {}), s4 = [.../* @__PURE__ */ new Set([...Object.keys(e6 || {}), ...Object.keys(i5 || {})])];
      for (var n4 of s4) {
        var o5, a5, l5 = r4[n4], u4 = null == i5 ? void 0 : i5[n4], h4 = R(u4) ? null !== (o5 = null == l5 ? void 0 : l5.enabled) && void 0 !== o5 && o5 : !!u4, d4 = R(u4) ? l5.variant : "string" == typeof u4 ? u4 : void 0, v4 = null == e6 ? void 0 : e6[n4], c4 = B3({}, l5, { enabled: h4, variant: h4 ? null != d4 ? d4 : null == l5 ? void 0 : l5.variant : void 0 });
        if (h4 !== (null == l5 ? void 0 : l5.enabled) && (c4.original_enabled = null == l5 ? void 0 : l5.enabled), d4 !== (null == l5 ? void 0 : l5.variant) && (c4.original_variant = null == l5 ? void 0 : l5.variant), v4)
          c4.metadata = B3({}, null == l5 ? void 0 : l5.metadata, { payload: v4, original_payload: null == l5 || null == (a5 = l5.metadata) ? void 0 : a5.payload });
        r4[n4] = c4;
      }
      return this.ge || (ro.warn(" Overriding feature flag details!", { flagDetails: t4, overriddenPayloads: e6, finalDetails: r4 }), this.ge = true), r4;
    }
    getFlagVariants() {
      var t4 = this._instance.get_property(It), i5 = this._instance.get_property(no);
      if (!i5)
        return t4 || {};
      for (var e6 = V2({}, t4), r4 = Object.keys(i5), s4 = 0; s4 < r4.length; s4++)
        e6[r4[s4]] = i5[r4[s4]];
      return this.ge || (ro.warn(" Overriding feature flags!", { enabledFlags: t4, overriddenFlags: i5, finalFlags: e6 }), this.ge = true), e6;
    }
    getFlagPayloads() {
      var t4 = this._instance.get_property(oo), i5 = this._instance.get_property(ao);
      if (!i5)
        return t4 || {};
      for (var e6 = V2({}, t4 || {}), r4 = Object.keys(i5), s4 = 0; s4 < r4.length; s4++)
        e6[r4[s4]] = i5[r4[s4]];
      return this.ge || (ro.warn(" Overriding feature flag payloads!", { flagPayloads: t4, overriddenPayloads: i5, finalPayloads: e6 }), this.ge = true), e6;
    }
    reloadFeatureFlags() {
      this.be || this._instance.config.advanced_disable_feature_flags || this.$e || (this.$e = setTimeout(() => {
        this.ke();
      }, 5));
    }
    xe() {
      clearTimeout(this.$e), this.$e = void 0;
    }
    ensureFlagsLoaded() {
      this._e || this.me || this.$e || this.reloadFeatureFlags();
    }
    setAnonymousDistinctId(t4) {
      this.$anon_distinct_id = t4;
    }
    setReloadingPaused(t4) {
      this.be = t4;
    }
    ke(t4) {
      var i5;
      if (this.xe(), !this._instance.I())
        if (this.me)
          this.ye = true;
        else {
          var e6 = { token: this._instance.config.token, distinct_id: this._instance.get_distinct_id(), groups: this._instance.getGroups(), $anon_distinct_id: this.$anon_distinct_id, person_properties: B3({}, (null == (i5 = this._instance.persistence) ? void 0 : i5.get_initial_props()) || {}, this._instance.get_property(Tt) || {}), group_properties: this._instance.get_property(Mt) };
          (null != t4 && t4.disableFlags || this._instance.config.advanced_disable_feature_flags) && (e6.disable_flags = true);
          var r4 = this._instance.config.__preview_remote_config, s4 = r4 ? "/flags/?v=2" : "/flags/?v=2&config=true", n4 = this._instance.config.advanced_only_evaluate_survey_feature_flags ? "&only_evaluate_survey_feature_flags=true" : "", o5 = this._instance.requestRouter.endpointFor("api", s4 + n4);
          r4 && (e6.timezone = to()), this.me = true, this._instance.Ee({ method: "POST", url: o5, data: e6, compression: this._instance.config.disable_compression ? void 0 : g3.Base64, timeout: this._instance.config.feature_flag_request_timeout_ms, callback: (t5) => {
            var i6, r5, s5 = true;
            (200 === t5.statusCode && (this.ye || (this.$anon_distinct_id = void 0), s5 = false), this.me = false, this.we) || (this.we = true, this._instance.Ie(null !== (r5 = t5.json) && void 0 !== r5 ? r5 : {}));
            if (!e6.disable_flags || this.ye)
              if (this.Se = !s5, t5.json && null != (i6 = t5.json.quotaLimited) && i6.includes(vo.FeatureFlags))
                ro.warn("You have hit your feature flags quota limit, and will not be able to load feature flags until the quota is reset.  Please visit https://posthog.com/docs/billing/limits-alerts to learn more.");
              else {
                var n5;
                if (!e6.disable_flags)
                  this.receivedFeatureFlags(null !== (n5 = t5.json) && void 0 !== n5 ? n5 : {}, s5);
                this.ye && (this.ye = false, this.ke());
              }
          } });
        }
    }
    getFeatureFlag(t4, i5) {
      if (void 0 === i5 && (i5 = {}), this._e || this.getFlags() && this.getFlags().length > 0) {
        var e6 = this.getFlagVariants()[t4], r4 = "" + e6, s4 = this._instance.get_property(lo) || void 0, n4 = this._instance.get_property(Ot) || {};
        if ((i5.send_event || !("send_event" in i5)) && (!(t4 in n4) || !n4[t4].includes(r4))) {
          var o5, a5, l5, u4, h4, d4, v4, c4, f4;
          x4(n4[t4]) ? n4[t4].push(r4) : n4[t4] = [r4], null == (o5 = this._instance.persistence) || o5.register({ [Ot]: n4 });
          var p5 = this.getFeatureFlagDetails(t4), g4 = { $feature_flag: t4, $feature_flag_response: e6, $feature_flag_payload: this.getFeatureFlagPayload(t4) || null, $feature_flag_request_id: s4, $feature_flag_bootstrapped_response: (null == (a5 = this._instance.config.bootstrap) || null == (a5 = a5.featureFlags) ? void 0 : a5[t4]) || null, $feature_flag_bootstrapped_payload: (null == (l5 = this._instance.config.bootstrap) || null == (l5 = l5.featureFlagPayloads) ? void 0 : l5[t4]) || null, $used_bootstrap_value: !this.Se };
          R(null == p5 || null == (u4 = p5.metadata) ? void 0 : u4.version) || (g4.$feature_flag_version = p5.metadata.version);
          var _3, m4 = null !== (h4 = null == p5 || null == (d4 = p5.reason) ? void 0 : d4.description) && void 0 !== h4 ? h4 : null == p5 || null == (v4 = p5.reason) ? void 0 : v4.code;
          if (m4 && (g4.$feature_flag_reason = m4), null != p5 && null != (c4 = p5.metadata) && c4.id && (g4.$feature_flag_id = p5.metadata.id), R(null == p5 ? void 0 : p5.original_variant) && R(null == p5 ? void 0 : p5.original_enabled) || (g4.$feature_flag_original_response = R(p5.original_variant) ? p5.original_enabled : p5.original_variant), null != p5 && null != (f4 = p5.metadata) && f4.original_payload)
            g4.$feature_flag_original_payload = null == p5 || null == (_3 = p5.metadata) ? void 0 : _3.original_payload;
          this._instance.capture("$feature_flag_called", g4);
        }
        return e6;
      }
      ro.warn('getFeatureFlag for key "' + t4 + `" failed. Feature flags didn't load in time.`);
    }
    getFeatureFlagDetails(t4) {
      return this.getFlagsWithDetails()[t4];
    }
    getFeatureFlagPayload(t4) {
      return this.getFlagPayloads()[t4];
    }
    getRemoteConfigPayload(t4, i5) {
      var e6 = this._instance.config.token;
      this._instance.Ee({ method: "POST", url: this._instance.requestRouter.endpointFor("api", "/flags/?v=2&config=true"), data: { distinct_id: this._instance.get_distinct_id(), token: e6 }, compression: this._instance.config.disable_compression ? void 0 : g3.Base64, timeout: this._instance.config.feature_flag_request_timeout_ms, callback: (e7) => {
        var r4, s4 = null == (r4 = e7.json) ? void 0 : r4.featureFlagPayloads;
        i5((null == s4 ? void 0 : s4[t4]) || void 0);
      } });
    }
    isFeatureEnabled(t4, i5) {
      if (void 0 === i5 && (i5 = {}), this._e || this.getFlags() && this.getFlags().length > 0)
        return !!this.getFeatureFlag(t4, i5);
      ro.warn('isFeatureEnabled for key "' + t4 + `" failed. Feature flags didn't load in time.`);
    }
    addFeatureFlagsHandler(t4) {
      this.featureFlagEventHandlers.push(t4);
    }
    removeFeatureFlagsHandler(t4) {
      this.featureFlagEventHandlers = this.featureFlagEventHandlers.filter((i5) => i5 !== t4);
    }
    receivedFeatureFlags(t4, i5) {
      if (this._instance.persistence) {
        this._e = true;
        var e6 = this.getFlagVariants(), r4 = this.getFlagPayloads(), s4 = this.getFlagsWithDetails();
        !function(t5, i6, e7, r5, s5) {
          void 0 === e7 && (e7 = {}), void 0 === r5 && (r5 = {}), void 0 === s5 && (s5 = {});
          var n4 = ho(t5), o5 = n4.flags, a5 = n4.featureFlags, l5 = n4.featureFlagPayloads;
          if (a5) {
            var u4 = t5.requestId;
            if (x4(a5)) {
              ro.warn("v1 of the feature flags endpoint is deprecated. Please use the latest version.");
              var h4 = {};
              if (a5)
                for (var d4 = 0; d4 < a5.length; d4++)
                  h4[a5[d4]] = true;
              i6 && i6.register({ [so]: a5, [It]: h4 });
            } else {
              var v4 = a5, c4 = l5, f4 = o5;
              t5.errorsWhileComputingFlags && (v4 = B3({}, e7, v4), c4 = B3({}, r5, c4), f4 = B3({}, s5, f4)), i6 && i6.register(B3({ [so]: Object.keys(uo(v4)), [It]: v4 || {}, [oo]: c4 || {}, [Rt]: f4 || {} }, u4 ? { [lo]: u4 } : {}));
            }
          }
        }(t4, this._instance.persistence, e6, r4, s4), this.Pe(i5);
      }
    }
    override(t4, i5) {
      void 0 === i5 && (i5 = false), ro.warn("override is deprecated. Please use overrideFeatureFlags instead."), this.overrideFeatureFlags({ flags: t4, suppressWarning: i5 });
    }
    overrideFeatureFlags(t4) {
      if (!this._instance.__loaded || !this._instance.persistence)
        return ro.uninitializedWarning("posthog.featureFlags.overrideFeatureFlags");
      if (false === t4)
        return this._instance.persistence.unregister(no), this._instance.persistence.unregister(ao), void this.Pe();
      if (t4 && "object" == typeof t4 && ("flags" in t4 || "payloads" in t4)) {
        var i5, e6 = t4;
        if (this.ge = Boolean(null !== (i5 = e6.suppressWarning) && void 0 !== i5 && i5), "flags" in e6) {
          if (false === e6.flags)
            this._instance.persistence.unregister(no);
          else if (e6.flags)
            if (x4(e6.flags)) {
              for (var r4 = {}, s4 = 0; s4 < e6.flags.length; s4++)
                r4[e6.flags[s4]] = true;
              this._instance.persistence.register({ [no]: r4 });
            } else
              this._instance.persistence.register({ [no]: e6.flags });
        }
        return "payloads" in e6 && (false === e6.payloads ? this._instance.persistence.unregister(ao) : e6.payloads && this._instance.persistence.register({ [ao]: e6.payloads })), void this.Pe();
      }
      this.Pe();
    }
    onFeatureFlags(t4) {
      if (this.addFeatureFlagsHandler(t4), this._e) {
        var { flags: i5, flagVariants: e6 } = this.Re();
        t4(i5, e6);
      }
      return () => this.removeFeatureFlagsHandler(t4);
    }
    updateEarlyAccessFeatureEnrollment(t4, i5) {
      var e6, r4 = (this._instance.get_property(Pt) || []).find((i6) => i6.flagKey === t4), s4 = { ["$feature_enrollment/" + t4]: i5 }, n4 = { $feature_flag: t4, $feature_enrollment: i5, $set: s4 };
      r4 && (n4.$early_access_feature_name = r4.name), this._instance.capture("$feature_enrollment_update", n4), this.setPersonPropertiesForFlags(s4, false);
      var o5 = B3({}, this.getFlagVariants(), { [t4]: i5 });
      null == (e6 = this._instance.persistence) || e6.register({ [so]: Object.keys(uo(o5)), [It]: o5 }), this.Pe();
    }
    getEarlyAccessFeatures(t4, i5, e6) {
      void 0 === i5 && (i5 = false);
      var r4 = this._instance.get_property(Pt), s4 = e6 ? "&" + e6.map((t5) => "stage=" + t5).join("&") : "";
      if (r4 && !i5)
        return t4(r4);
      this._instance.Ee({ url: this._instance.requestRouter.endpointFor("api", "/api/early_access_features/?token=" + this._instance.config.token + s4), method: "GET", callback: (i6) => {
        var e7;
        if (i6.json) {
          var r5 = i6.json.earlyAccessFeatures;
          return null == (e7 = this._instance.persistence) || e7.register({ [Pt]: r5 }), t4(r5);
        }
      } });
    }
    Re() {
      var t4 = this.getFlags(), i5 = this.getFlagVariants();
      return { flags: t4.filter((t5) => i5[t5]), flagVariants: Object.keys(i5).filter((t5) => i5[t5]).reduce((t5, e6) => (t5[e6] = i5[e6], t5), {}) };
    }
    Pe(t4) {
      var { flags: i5, flagVariants: e6 } = this.Re();
      this.featureFlagEventHandlers.forEach((r4) => r4(i5, e6, { errorsLoading: t4 }));
    }
    setPersonPropertiesForFlags(t4, i5) {
      void 0 === i5 && (i5 = true);
      var e6 = this._instance.get_property(Tt) || {};
      this._instance.register({ [Tt]: B3({}, e6, t4) }), i5 && this._instance.reloadFeatureFlags();
    }
    resetPersonPropertiesForFlags() {
      this._instance.unregister(Tt);
    }
    setGroupPropertiesForFlags(t4, i5) {
      void 0 === i5 && (i5 = true);
      var e6 = this._instance.get_property(Mt) || {};
      0 !== Object.keys(e6).length && Object.keys(e6).forEach((i6) => {
        e6[i6] = B3({}, e6[i6], t4[i6]), delete t4[i6];
      }), this._instance.register({ [Mt]: B3({}, e6, t4) }), i5 && this._instance.reloadFeatureFlags();
    }
    resetGroupPropertiesForFlags(t4) {
      if (t4) {
        var i5 = this._instance.get_property(Mt) || {};
        this._instance.register({ [Mt]: B3({}, i5, { [t4]: {} }) });
      } else
        this._instance.unregister(Mt);
    }
    reset() {
      this._e = false, this.me = false, this.be = false, this.ye = false, this.we = false, this.Se = false, this.$anon_distinct_id = void 0, this.xe(), this.ge = false;
    }
  };
  var fo = ["cookie", "localstorage", "localstorage+cookie", "sessionstorage", "memory"];
  var po = class {
    constructor(t4) {
      this.S = t4, this.props = {}, this.Te = false, this.Me = ((t5) => {
        var i5 = "";
        return t5.token && (i5 = t5.token.replace(/\+/g, "PL").replace(/\//g, "SL").replace(/=/g, "EQ")), t5.persistence_name ? "ph_" + t5.persistence_name : "ph_" + i5 + "_posthog";
      })(t4), this.B = this.Ce(t4), this.load(), t4.debug && N2.info("Persistence loaded", t4.persistence, B3({}, this.props)), this.update_config(t4, t4), this.save();
    }
    Ce(t4) {
      -1 === fo.indexOf(t4.persistence.toLowerCase()) && (N2.critical("Unknown persistence type " + t4.persistence + "; falling back to localStorage+cookie"), t4.persistence = "localStorage+cookie");
      var i5 = t4.persistence.toLowerCase();
      return "localstorage" === i5 && Wi.O() ? Wi : "localstorage+cookie" === i5 && Ji.O() ? Ji : "sessionstorage" === i5 && Xi.O() ? Xi : "memory" === i5 ? Ki : "cookie" === i5 ? Bi : Ji.O() ? Ji : Bi;
    }
    properties() {
      var t4 = {};
      return J2(this.props, function(i5, e6) {
        if (e6 === It && I2(i5))
          for (var r4 = Object.keys(i5), n4 = 0; n4 < r4.length; n4++)
            t4["$feature/" + r4[n4]] = i5[r4[n4]];
        else
          a5 = e6, l5 = false, (C4(o5 = Ht) ? l5 : s3 && o5.indexOf === s3 ? -1 != o5.indexOf(a5) : (J2(o5, function(t5) {
            if (l5 || (l5 = t5 === a5))
              return W;
          }), l5)) || (t4[e6] = i5);
        var o5, a5, l5;
      }), t4;
    }
    load() {
      if (!this.Fe) {
        var t4 = this.B.L(this.Me);
        t4 && (this.props = V2({}, t4));
      }
    }
    save() {
      this.Fe || this.B.j(this.Me, this.props, this.Oe, this.Ae, this.De, this.S.debug);
    }
    remove() {
      this.B.N(this.Me, false), this.B.N(this.Me, true);
    }
    clear() {
      this.remove(), this.props = {};
    }
    register_once(t4, i5, e6) {
      if (I2(t4)) {
        R(i5) && (i5 = "None"), this.Oe = R(e6) ? this.Le : e6;
        var r4 = false;
        if (J2(t4, (t5, e7) => {
          this.props.hasOwnProperty(e7) && this.props[e7] !== i5 || (this.props[e7] = t5, r4 = true);
        }), r4)
          return this.save(), true;
      }
      return false;
    }
    register(t4, i5) {
      if (I2(t4)) {
        this.Oe = R(i5) ? this.Le : i5;
        var e6 = false;
        if (J2(t4, (i6, r4) => {
          t4.hasOwnProperty(r4) && this.props[r4] !== i6 && (this.props[r4] = i6, e6 = true);
        }), e6)
          return this.save(), true;
      }
      return false;
    }
    unregister(t4) {
      t4 in this.props && (delete this.props[t4], this.save());
    }
    update_campaign_params() {
      if (!this.Te) {
        var t4 = Jn(this.S.custom_campaign_params, this.S.mask_personal_data_properties, this.S.custom_personal_data_properties);
        P2(Z(t4)) || this.register(t4), this.Te = true;
      }
    }
    update_search_keyword() {
      var t4;
      this.register((t4 = null == o4 ? void 0 : o4.referrer) ? Kn(t4) : {});
    }
    update_referrer_info() {
      var t4;
      this.register_once({ $referrer: Xn(), $referring_domain: null != o4 && o4.referrer && (null == (t4 = wi(o4.referrer)) ? void 0 : t4.host) || "$direct" }, void 0);
    }
    set_initial_person_info() {
      this.props[jt] || this.props[Nt] || this.register_once({ [zt]: Qn(this.S.mask_personal_data_properties, this.S.custom_personal_data_properties) }, void 0);
    }
    get_initial_props() {
      var t4 = {};
      J2([Nt, jt], (i6) => {
        var e7 = this.props[i6];
        e7 && J2(e7, function(i7, e8) {
          t4["$initial_" + y4(e8)] = i7;
        });
      });
      var i5, e6, r4 = this.props[zt];
      if (r4) {
        var s4 = (i5 = Zn(r4), e6 = {}, J2(i5, function(t5, i6) {
          e6["$initial_" + y4(i6)] = t5;
        }), e6);
        V2(t4, s4);
      }
      return t4;
    }
    safe_merge(t4) {
      return J2(this.props, function(i5, e6) {
        e6 in t4 || (t4[e6] = i5);
      }), t4;
    }
    update_config(t4, i5) {
      if (this.Le = this.Oe = t4.cookie_expiration, this.set_disabled(t4.disable_persistence), this.set_cross_subdomain(t4.cross_subdomain_cookie), this.set_secure(t4.secure_cookie), t4.persistence !== i5.persistence) {
        var e6 = this.Ce(t4), r4 = this.props;
        this.clear(), this.B = e6, this.props = r4, this.save();
      }
    }
    set_disabled(t4) {
      this.Fe = t4, this.Fe ? this.remove() : this.save();
    }
    set_cross_subdomain(t4) {
      t4 !== this.Ae && (this.Ae = t4, this.remove(), this.save());
    }
    set_secure(t4) {
      t4 !== this.De && (this.De = t4, this.remove(), this.save());
    }
    set_event_timer(t4, i5) {
      var e6 = this.props[at] || {};
      e6[t4] = i5, this.props[at] = e6, this.save();
    }
    remove_event_timer(t4) {
      var i5 = (this.props[at] || {})[t4];
      return R(i5) || (delete this.props[at][t4], this.save()), i5;
    }
    get_property(t4) {
      return this.props[t4];
    }
    set_property(t4, i5) {
      this.props[t4] = i5, this.save();
    }
  };
  var go = class {
    constructor() {
      this.je = {}, this.je = {};
    }
    on(t4, i5) {
      return this.je[t4] || (this.je[t4] = []), this.je[t4].push(i5), () => {
        this.je[t4] = this.je[t4].filter((t5) => t5 !== i5);
      };
    }
    emit(t4, i5) {
      for (var e6 of this.je[t4] || [])
        e6(i5);
      for (var r4 of this.je["*"] || [])
        r4(t4, i5);
    }
  };
  var _o = class __o {
    constructor(t4) {
      this.Ne = new go(), this.ze = (t5, i5) => this.Ue(t5, i5) && this.qe(t5, i5) && this.Be(t5, i5), this.Ue = (t5, i5) => null == i5 || !i5.event || (null == t5 ? void 0 : t5.event) === (null == i5 ? void 0 : i5.event), this._instance = t4, this.He = /* @__PURE__ */ new Set(), this.We = /* @__PURE__ */ new Set();
    }
    init() {
      var t4;
      if (!R(null == (t4 = this._instance) ? void 0 : t4.Ge)) {
        var i5;
        null == (i5 = this._instance) || i5.Ge((t5, i6) => {
          this.on(t5, i6);
        });
      }
    }
    register(t4) {
      var i5, e6;
      if (!R(null == (i5 = this._instance) ? void 0 : i5.Ge) && (t4.forEach((t5) => {
        var i6, e7;
        null == (i6 = this.We) || i6.add(t5), null == (e7 = t5.steps) || e7.forEach((t6) => {
          var i7;
          null == (i7 = this.He) || i7.add((null == t6 ? void 0 : t6.event) || "");
        });
      }), null != (e6 = this._instance) && e6.autocapture)) {
        var r4, s4 = /* @__PURE__ */ new Set();
        t4.forEach((t5) => {
          var i6;
          null == (i6 = t5.steps) || i6.forEach((t6) => {
            null != t6 && t6.selector && s4.add(null == t6 ? void 0 : t6.selector);
          });
        }), null == (r4 = this._instance) || r4.autocapture.setElementSelectors(s4);
      }
    }
    on(t4, i5) {
      var e6;
      null != i5 && 0 != t4.length && (this.He.has(t4) || this.He.has(null == i5 ? void 0 : i5.event)) && this.We && (null == (e6 = this.We) ? void 0 : e6.size) > 0 && this.We.forEach((t5) => {
        this.Je(i5, t5) && this.Ne.emit("actionCaptured", t5.name);
      });
    }
    Ve(t4) {
      this.onAction("actionCaptured", (i5) => t4(i5));
    }
    Je(t4, i5) {
      if (null == (null == i5 ? void 0 : i5.steps))
        return false;
      for (var e6 of i5.steps)
        if (this.ze(t4, e6))
          return true;
      return false;
    }
    onAction(t4, i5) {
      return this.Ne.on(t4, i5);
    }
    qe(t4, i5) {
      if (null != i5 && i5.url) {
        var e6, r4 = null == t4 || null == (e6 = t4.properties) ? void 0 : e6.$current_url;
        if (!r4 || "string" != typeof r4)
          return false;
        if (!__o.Ke(r4, null == i5 ? void 0 : i5.url, (null == i5 ? void 0 : i5.url_matching) || "contains"))
          return false;
      }
      return true;
    }
    static Ke(i5, e6, r4) {
      switch (r4) {
        case "regex":
          return !!t3 && Ns(i5, e6);
        case "exact":
          return e6 === i5;
        case "contains":
          var s4 = __o.Ye(e6).replace(/_/g, ".").replace(/%/g, ".*");
          return Ns(i5, s4);
        default:
          return false;
      }
    }
    static Ye(t4) {
      return t4.replace(/[|\\{}()[\]^$+*?.]/g, "\\$&").replace(/-/g, "\\x2d");
    }
    Be(t4, i5) {
      if ((null != i5 && i5.href || null != i5 && i5.tag_name || null != i5 && i5.text) && !this.Xe(t4).some((t5) => !(null != i5 && i5.href && !__o.Ke(t5.href || "", null == i5 ? void 0 : i5.href, (null == i5 ? void 0 : i5.href_matching) || "exact")) && ((null == i5 || !i5.tag_name || t5.tag_name === (null == i5 ? void 0 : i5.tag_name)) && !(null != i5 && i5.text && !__o.Ke(t5.text || "", null == i5 ? void 0 : i5.text, (null == i5 ? void 0 : i5.text_matching) || "exact") && !__o.Ke(t5.$el_text || "", null == i5 ? void 0 : i5.text, (null == i5 ? void 0 : i5.text_matching) || "exact")))))
        return false;
      if (null != i5 && i5.selector) {
        var e6, r4 = null == t4 || null == (e6 = t4.properties) ? void 0 : e6.$element_selectors;
        if (!r4)
          return false;
        if (!r4.includes(null == i5 ? void 0 : i5.selector))
          return false;
      }
      return true;
    }
    Xe(t4) {
      return null == (null == t4 ? void 0 : t4.properties.$elements) ? [] : null == t4 ? void 0 : t4.properties.$elements;
    }
  };
  var mo = z3("[Surveys]");
  var bo = "seenSurvey_";
  var yo = (t4, i5) => {
    var e6 = "$survey_" + i5 + "/" + t4.id;
    return t4.current_iteration && t4.current_iteration > 0 && (e6 = "$survey_" + i5 + "/" + t4.id + "/" + t4.current_iteration), e6;
  };
  var wo = class {
    constructor(t4) {
      this._instance = t4, this.Qe = /* @__PURE__ */ new Map(), this.Ze = /* @__PURE__ */ new Map();
    }
    register(t4) {
      var i5;
      R(null == (i5 = this._instance) ? void 0 : i5.Ge) || (this.tr(t4), this.ir(t4));
    }
    ir(t4) {
      var i5 = t4.filter((t5) => {
        var i6, e6;
        return (null == (i6 = t5.conditions) ? void 0 : i6.actions) && (null == (e6 = t5.conditions) || null == (e6 = e6.actions) || null == (e6 = e6.values) ? void 0 : e6.length) > 0;
      });
      if (0 !== i5.length) {
        if (null == this.er) {
          this.er = new _o(this._instance), this.er.init();
          this.er.Ve((t5) => {
            this.onAction(t5);
          });
        }
        i5.forEach((t5) => {
          var i6, e6, r4, s4, n4;
          t5.conditions && null != (i6 = t5.conditions) && i6.actions && null != (e6 = t5.conditions) && null != (e6 = e6.actions) && e6.values && (null == (r4 = t5.conditions) || null == (r4 = r4.actions) || null == (r4 = r4.values) ? void 0 : r4.length) > 0 && (null == (s4 = this.er) || s4.register(t5.conditions.actions.values), null == (n4 = t5.conditions) || null == (n4 = n4.actions) || null == (n4 = n4.values) || n4.forEach((i7) => {
            if (i7 && i7.name) {
              var e7 = this.Ze.get(i7.name);
              e7 && e7.push(t5.id), this.Ze.set(i7.name, e7 || [t5.id]);
            }
          }));
        });
      }
    }
    tr(t4) {
      var i5;
      if (0 !== t4.filter((t5) => {
        var i6, e6;
        return (null == (i6 = t5.conditions) ? void 0 : i6.events) && (null == (e6 = t5.conditions) || null == (e6 = e6.events) || null == (e6 = e6.values) ? void 0 : e6.length) > 0;
      }).length) {
        null == (i5 = this._instance) || i5.Ge((t5, i6) => {
          this.onEvent(t5, i6);
        }), t4.forEach((t5) => {
          var i6;
          null == (i6 = t5.conditions) || null == (i6 = i6.events) || null == (i6 = i6.values) || i6.forEach((i7) => {
            if (i7 && i7.name) {
              var e6 = this.Qe.get(i7.name);
              e6 && e6.push(t5.id), this.Qe.set(i7.name, e6 || [t5.id]);
            }
          });
        });
      }
    }
    onEvent(t4, i5) {
      var e6, r4 = (null == (e6 = this._instance) || null == (e6 = e6.persistence) ? void 0 : e6.props[Ft]) || [];
      if ("survey shown" === t4 && i5 && r4.length > 0) {
        var s4;
        mo.info("survey event matched, removing survey from activated surveys", { event: t4, eventPayload: i5, existingActivatedSurveys: r4 });
        var n4 = null == i5 || null == (s4 = i5.properties) ? void 0 : s4.$survey_id;
        if (n4) {
          var o5 = r4.indexOf(n4);
          o5 >= 0 && (r4.splice(o5, 1), this.rr(r4));
        }
      } else
        this.Qe.has(t4) && (mo.info("survey event matched, updating activated surveys", { event: t4, surveys: this.Qe.get(t4) }), this.rr(r4.concat(this.Qe.get(t4) || [])));
    }
    onAction(t4) {
      var i5, e6 = (null == (i5 = this._instance) || null == (i5 = i5.persistence) ? void 0 : i5.props[Ft]) || [];
      this.Ze.has(t4) && this.rr(e6.concat(this.Ze.get(t4) || []));
    }
    rr(t4) {
      var i5;
      null == (i5 = this._instance) || null == (i5 = i5.persistence) || i5.register({ [Ft]: [...new Set(t4)] });
    }
    getSurveys() {
      var t4, i5 = null == (t4 = this._instance) || null == (t4 = t4.persistence) ? void 0 : t4.props[Ft];
      return i5 || [];
    }
    getEventToSurveys() {
      return this.Qe;
    }
    sr() {
      return this.er;
    }
  };
  var So = class {
    constructor(t4) {
      this.nr = void 0, this.ar = null, this.lr = false, this.ur = false, this.hr = [], this._instance = t4, this._surveyEventReceiver = null;
    }
    onRemoteConfig(t4) {
      var i5 = t4.surveys;
      if (F2(i5))
        return mo.warn("Flags not loaded yet. Not loading surveys.");
      var e6 = x4(i5);
      this.nr = e6 ? i5.length > 0 : i5, mo.info("flags response received, isSurveysEnabled: " + this.nr), this.loadIfEnabled();
    }
    reset() {
      localStorage.removeItem("lastSeenSurveyDate");
      for (var t4 = [], i5 = 0; i5 < localStorage.length; i5++) {
        var e6 = localStorage.key(i5);
        (null != e6 && e6.startsWith(bo) || null != e6 && e6.startsWith("inProgressSurvey_")) && t4.push(e6);
      }
      t4.forEach((t5) => localStorage.removeItem(t5));
    }
    loadIfEnabled() {
      if (!this.ar)
        if (this.ur)
          mo.info("Already initializing surveys, skipping...");
        else if (this._instance.config.disable_surveys)
          mo.info("Disabled. Not loading surveys.");
        else {
          var t4 = null == v3 ? void 0 : v3.__PosthogExtensions__;
          if (t4) {
            var i5 = this.nr;
            if (!R(i5)) {
              this.ur = true;
              try {
                var e6 = t4.generateSurveys;
                if (e6)
                  return void this.dr(e6, i5);
                var r4 = t4.loadExternalDependency;
                if (!r4)
                  return void this.vr("PostHog loadExternalDependency extension not found.");
                r4(this._instance, "surveys", (e7) => {
                  e7 || !t4.generateSurveys ? this.vr("Could not load surveys script", e7) : this.dr(t4.generateSurveys, i5);
                });
              } catch (t5) {
                throw this.vr("Error initializing surveys", t5), t5;
              } finally {
                this.ur = false;
              }
            }
          } else
            mo.error("PostHog Extensions not found.");
        }
    }
    dr(t4, i5) {
      this.ar = t4(this._instance, i5), this._surveyEventReceiver = new wo(this._instance), mo.info("Surveys loaded successfully"), this.cr({ isLoaded: true });
    }
    vr(t4, i5) {
      mo.error(t4, i5), this.cr({ isLoaded: false, error: t4 });
    }
    onSurveysLoaded(t4) {
      return this.hr.push(t4), this.ar && this.cr({ isLoaded: true }), () => {
        this.hr = this.hr.filter((i5) => i5 !== t4);
      };
    }
    getSurveys(t4, i5) {
      if (void 0 === i5 && (i5 = false), this._instance.config.disable_surveys)
        return mo.info("Disabled. Not loading surveys."), t4([]);
      var e6 = this._instance.get_property(Ct);
      if (e6 && !i5)
        return t4(e6, { isLoaded: true });
      if (this.lr)
        return t4([], { isLoaded: false, error: "Surveys are already being loaded" });
      try {
        this.lr = true, this._instance.Ee({ url: this._instance.requestRouter.endpointFor("api", "/api/surveys/?token=" + this._instance.config.token), method: "GET", timeout: this._instance.config.surveys_request_timeout_ms, callback: (i6) => {
          var e7;
          this.lr = false;
          var r4 = i6.statusCode;
          if (200 !== r4 || !i6.json) {
            var s4 = "Surveys API could not be loaded, status: " + r4;
            return mo.error(s4), t4([], { isLoaded: false, error: s4 });
          }
          var n4, o5 = i6.json.surveys || [], a5 = o5.filter((t5) => function(t6) {
            return !(!t6.start_date || t6.end_date);
          }(t5) && (function(t6) {
            var i7;
            return !(null == (i7 = t6.conditions) || null == (i7 = i7.events) || null == (i7 = i7.values) || !i7.length);
          }(t5) || function(t6) {
            var i7;
            return !(null == (i7 = t6.conditions) || null == (i7 = i7.actions) || null == (i7 = i7.values) || !i7.length);
          }(t5)));
          a5.length > 0 && (null == (n4 = this._surveyEventReceiver) || n4.register(a5));
          return null == (e7 = this._instance.persistence) || e7.register({ [Ct]: o5 }), t4(o5, { isLoaded: true });
        } });
      } catch (t5) {
        throw this.lr = false, t5;
      }
    }
    cr(t4) {
      for (var i5 of this.hr)
        try {
          t4.isLoaded ? this.getSurveys(i5) : i5([], t4);
        } catch (t5) {
          mo.error("Error in survey callback", t5);
        }
    }
    getActiveMatchingSurveys(t4, i5) {
      if (void 0 === i5 && (i5 = false), !F2(this.ar))
        return this.ar.getActiveMatchingSurveys(t4, i5);
      mo.warn("init was not called");
    }
    pr(t4) {
      var i5 = null;
      return this.getSurveys((e6) => {
        var r4;
        i5 = null !== (r4 = e6.find((i6) => i6.id === t4)) && void 0 !== r4 ? r4 : null;
      }), i5;
    }
    gr(t4) {
      if (F2(this.ar))
        return { eligible: false, reason: "SDK is not enabled or survey functionality is not yet loaded" };
      var i5 = "string" == typeof t4 ? this.pr(t4) : t4;
      return i5 ? this.ar.checkSurveyEligibility(i5) : { eligible: false, reason: "Survey not found" };
    }
    canRenderSurvey(t4) {
      if (F2(this.ar))
        return mo.warn("init was not called"), { visible: false, disabledReason: "SDK is not enabled or survey functionality is not yet loaded" };
      var i5 = this.gr(t4);
      return { visible: i5.eligible, disabledReason: i5.reason };
    }
    canRenderSurveyAsync(t4, i5) {
      return F2(this.ar) ? (mo.warn("init was not called"), Promise.resolve({ visible: false, disabledReason: "SDK is not enabled or survey functionality is not yet loaded" })) : new Promise((e6) => {
        this.getSurveys((i6) => {
          var r4, s4 = null !== (r4 = i6.find((i7) => i7.id === t4)) && void 0 !== r4 ? r4 : null;
          if (s4) {
            var n4 = this.gr(s4);
            e6({ visible: n4.eligible, disabledReason: n4.reason });
          } else
            e6({ visible: false, disabledReason: "Survey not found" });
        }, i5);
      });
    }
    renderSurvey(t4, i5) {
      if (F2(this.ar))
        mo.warn("init was not called");
      else {
        var e6 = this.pr(t4), r4 = null == o4 ? void 0 : o4.querySelector(i5);
        e6 ? r4 ? this.ar.renderSurvey(e6, r4) : mo.warn("Survey element not found") : mo.warn("Survey not found");
      }
    }
  };
  var $o = function(t4) {
    return t4.Button = "button", t4.Tab = "tab", t4.Selector = "selector", t4;
  }({});
  var ko = function(t4) {
    return t4.TopLeft = "top_left", t4.TopRight = "top_right", t4.TopCenter = "top_center", t4.MiddleLeft = "middle_left", t4.MiddleRight = "middle_right", t4.MiddleCenter = "middle_center", t4.Left = "left", t4.Center = "center", t4.Right = "right", t4.NextToTrigger = "next_to_trigger", t4;
  }({});
  var xo = function(t4) {
    return t4.Popover = "popover", t4.API = "api", t4.Widget = "widget", t4;
  }({});
  var Eo = function(t4) {
    return t4.Open = "open", t4.MultipleChoice = "multiple_choice", t4.SingleChoice = "single_choice", t4.Rating = "rating", t4.Link = "link", t4;
  }({});
  var Io = function(t4) {
    return t4.NextQuestion = "next_question", t4.End = "end", t4.ResponseBased = "response_based", t4.SpecificQuestion = "specific_question", t4;
  }({});
  var Po = function(t4) {
    return t4.Once = "once", t4.Recurring = "recurring", t4.Always = "always", t4;
  }({});
  var Ro = function(t4) {
    return t4.SHOWN = "survey shown", t4.DISMISSED = "survey dismissed", t4.SENT = "survey sent", t4;
  }({});
  var To = function(t4) {
    return t4.SURVEY_ID = "$survey_id", t4.SURVEY_NAME = "$survey_name", t4.SURVEY_RESPONSE = "$survey_response", t4.SURVEY_ITERATION = "$survey_iteration", t4.SURVEY_ITERATION_START_DATE = "$survey_iteration_start_date", t4.SURVEY_PARTIALLY_COMPLETED = "$survey_partially_completed", t4.SURVEY_SUBMISSION_ID = "$survey_submission_id", t4.SURVEY_QUESTIONS = "$survey_questions", t4.SURVEY_COMPLETED = "$survey_completed", t4;
  }({});
  var Mo = z3("[RateLimiter]");
  var Co = class {
    constructor(t4) {
      var i5, e6;
      this.serverLimits = {}, this.lastEventRateLimited = false, this.checkForLimiting = (t5) => {
        var i6 = t5.text;
        if (i6 && i6.length)
          try {
            (JSON.parse(i6).quota_limited || []).forEach((t6) => {
              Mo.info((t6 || "events") + " is quota limited."), this.serverLimits[t6] = (/* @__PURE__ */ new Date()).getTime() + 6e4;
            });
          } catch (t6) {
            return void Mo.warn('could not rate limit - continuing. Error: "' + (null == t6 ? void 0 : t6.message) + '"', { text: i6 });
          }
      }, this.instance = t4, this.captureEventsPerSecond = (null == (i5 = t4.config.rate_limiting) ? void 0 : i5.events_per_second) || 10, this.captureEventsBurstLimit = Math.max((null == (e6 = t4.config.rate_limiting) ? void 0 : e6.events_burst_limit) || 10 * this.captureEventsPerSecond, this.captureEventsPerSecond), this.lastEventRateLimited = this.clientRateLimitContext(true).isRateLimited;
    }
    clientRateLimitContext(t4) {
      var i5, e6, r4;
      void 0 === t4 && (t4 = false);
      var s4 = (/* @__PURE__ */ new Date()).getTime(), n4 = null !== (i5 = null == (e6 = this.instance.persistence) ? void 0 : e6.get_property(Lt)) && void 0 !== i5 ? i5 : { tokens: this.captureEventsBurstLimit, last: s4 };
      n4.tokens += (s4 - n4.last) / 1e3 * this.captureEventsPerSecond, n4.last = s4, n4.tokens > this.captureEventsBurstLimit && (n4.tokens = this.captureEventsBurstLimit);
      var o5 = n4.tokens < 1;
      return o5 || t4 || (n4.tokens = Math.max(0, n4.tokens - 1)), !o5 || this.lastEventRateLimited || t4 || this.instance.capture("$$client_ingestion_warning", { $$client_ingestion_warning_message: "posthog-js client rate limited. Config is set to " + this.captureEventsPerSecond + " events per second and " + this.captureEventsBurstLimit + " events burst limit." }, { skip_client_rate_limiting: true }), this.lastEventRateLimited = o5, null == (r4 = this.instance.persistence) || r4.set_property(Lt, n4), { isRateLimited: o5, remainingTokens: n4.tokens };
    }
    isServerRateLimited(t4) {
      var i5 = this.serverLimits[t4 || "events"] || false;
      return false !== i5 && (/* @__PURE__ */ new Date()).getTime() < i5;
    }
  };
  var Fo = z3("[RemoteConfig]");
  var Oo = class {
    constructor(t4) {
      this._instance = t4;
    }
    get remoteConfig() {
      var t4;
      return null == (t4 = v3._POSTHOG_REMOTE_CONFIG) || null == (t4 = t4[this._instance.config.token]) ? void 0 : t4.config;
    }
    _r(t4) {
      var i5, e6;
      null != (i5 = v3.__PosthogExtensions__) && i5.loadExternalDependency ? null == (e6 = v3.__PosthogExtensions__) || null == e6.loadExternalDependency || e6.loadExternalDependency(this._instance, "remote-config", () => t4(this.remoteConfig)) : (Fo.error("PostHog Extensions not found. Cannot load remote config."), t4());
    }
    mr(t4) {
      this._instance.Ee({ method: "GET", url: this._instance.requestRouter.endpointFor("assets", "/array/" + this._instance.config.token + "/config"), callback: (i5) => {
        t4(i5.json);
      } });
    }
    load() {
      try {
        if (this.remoteConfig)
          return Fo.info("Using preloaded remote config", this.remoteConfig), void this.Ie(this.remoteConfig);
        if (this._instance.I())
          return void Fo.warn("Remote config is disabled. Falling back to local config.");
        this._r((t4) => {
          if (!t4)
            return Fo.info("No config found after loading remote JS config. Falling back to JSON."), void this.mr((t5) => {
              this.Ie(t5);
            });
          this.Ie(t4);
        });
      } catch (t4) {
        Fo.error("Error loading remote config", t4);
      }
    }
    Ie(t4) {
      t4 ? this._instance.config.__preview_remote_config ? (this._instance.Ie(t4), false !== t4.hasFeatureFlags && this._instance.featureFlags.ensureFlagsLoaded()) : Fo.info("__preview_remote_config is disabled. Logging config instead", t4) : Fo.error("Failed to fetch remote config from PostHog.");
    }
  };
  var Ao = 3e3;
  var Do = class {
    constructor(t4, i5) {
      this.br = true, this.yr = [], this.wr = se((null == i5 ? void 0 : i5.flush_interval_ms) || Ao, 250, 5e3, "flush interval", Ao), this.Sr = t4;
    }
    enqueue(t4) {
      this.yr.push(t4), this.$r || this.kr();
    }
    unload() {
      this.Er();
      var t4 = this.yr.length > 0 ? this.Ir() : {}, i5 = Object.values(t4);
      [...i5.filter((t5) => 0 === t5.url.indexOf("/e")), ...i5.filter((t5) => 0 !== t5.url.indexOf("/e"))].map((t5) => {
        this.Sr(B3({}, t5, { transport: "sendBeacon" }));
      });
    }
    enable() {
      this.br = false, this.kr();
    }
    kr() {
      var t4 = this;
      this.br || (this.$r = setTimeout(() => {
        if (this.Er(), this.yr.length > 0) {
          var i5 = this.Ir(), e6 = function() {
            var e7 = i5[r4], s4 = (/* @__PURE__ */ new Date()).getTime();
            e7.data && x4(e7.data) && J2(e7.data, (t5) => {
              t5.offset = Math.abs(t5.timestamp - s4), delete t5.timestamp;
            }), t4.Sr(e7);
          };
          for (var r4 in i5)
            e6();
        }
      }, this.wr));
    }
    Er() {
      clearTimeout(this.$r), this.$r = void 0;
    }
    Ir() {
      var t4 = {};
      return J2(this.yr, (i5) => {
        var e6, r4 = i5, s4 = (r4 ? r4.batchKey : null) || r4.url;
        R(t4[s4]) && (t4[s4] = B3({}, r4, { data: [] })), null == (e6 = t4[s4].data) || e6.push(r4.data);
      }), this.yr = [], t4;
    }
  };
  var Lo = ["retriesPerformedSoFar"];
  var jo = class {
    constructor(i5) {
      this.Pr = false, this.Rr = 3e3, this.yr = [], this._instance = i5, this.yr = [], this.Tr = true, !R(t3) && "onLine" in t3.navigator && (this.Tr = t3.navigator.onLine, st(t3, "online", () => {
        this.Tr = true, this.se();
      }), st(t3, "offline", () => {
        this.Tr = false;
      }));
    }
    get length() {
      return this.yr.length;
    }
    retriableRequest(t4) {
      var { retriesPerformedSoFar: i5 } = t4, e6 = H(t4, Lo);
      O2(i5) && i5 > 0 && (e6.url = As(e6.url, { retry_count: i5 })), this._instance.Ee(B3({}, e6, { callback: (t5) => {
        200 !== t5.statusCode && (t5.statusCode < 400 || t5.statusCode >= 500) && (null != i5 ? i5 : 0) < 10 ? this.Mr(B3({ retriesPerformedSoFar: i5 }, e6)) : null == e6.callback || e6.callback(t5);
      } }));
    }
    Mr(t4) {
      var i5 = t4.retriesPerformedSoFar || 0;
      t4.retriesPerformedSoFar = i5 + 1;
      var e6 = function(t5) {
        var i6 = 3e3 * Math.pow(2, t5), e7 = i6 / 2, r5 = Math.min(18e5, i6), s5 = (Math.random() - 0.5) * (r5 - e7);
        return Math.ceil(r5 + s5);
      }(i5), r4 = Date.now() + e6;
      this.yr.push({ retryAt: r4, requestOptions: t4 });
      var s4 = "Enqueued failed request for retry in " + e6;
      navigator.onLine || (s4 += " (Browser is offline)"), N2.warn(s4), this.Pr || (this.Pr = true, this.Cr());
    }
    Cr() {
      this.Fr && clearTimeout(this.Fr), this.Fr = setTimeout(() => {
        this.Tr && this.yr.length > 0 && this.se(), this.Cr();
      }, this.Rr);
    }
    se() {
      var t4 = Date.now(), i5 = [], e6 = this.yr.filter((e7) => e7.retryAt < t4 || (i5.push(e7), false));
      if (this.yr = i5, e6.length > 0)
        for (var { requestOptions: r4 } of e6)
          this.retriableRequest(r4);
    }
    unload() {
      for (var { requestOptions: t4 } of (this.Fr && (clearTimeout(this.Fr), this.Fr = void 0), this.yr))
        try {
          this._instance.Ee(B3({}, t4, { transport: "sendBeacon" }));
        } catch (t5) {
          N2.error(t5);
        }
      this.yr = [];
    }
  };
  var No = class {
    constructor(t4) {
      this.Or = () => {
        var t5, i5, e6, r4;
        this.Ar || (this.Ar = {});
        var s4 = this.scrollElement(), n4 = this.scrollY(), o5 = s4 ? Math.max(0, s4.scrollHeight - s4.clientHeight) : 0, a5 = n4 + ((null == s4 ? void 0 : s4.clientHeight) || 0), l5 = (null == s4 ? void 0 : s4.scrollHeight) || 0;
        this.Ar.lastScrollY = Math.ceil(n4), this.Ar.maxScrollY = Math.max(n4, null !== (t5 = this.Ar.maxScrollY) && void 0 !== t5 ? t5 : 0), this.Ar.maxScrollHeight = Math.max(o5, null !== (i5 = this.Ar.maxScrollHeight) && void 0 !== i5 ? i5 : 0), this.Ar.lastContentY = a5, this.Ar.maxContentY = Math.max(a5, null !== (e6 = this.Ar.maxContentY) && void 0 !== e6 ? e6 : 0), this.Ar.maxContentHeight = Math.max(l5, null !== (r4 = this.Ar.maxContentHeight) && void 0 !== r4 ? r4 : 0);
      }, this._instance = t4;
    }
    getContext() {
      return this.Ar;
    }
    resetContext() {
      var t4 = this.Ar;
      return setTimeout(this.Or, 0), t4;
    }
    startMeasuringScrollPosition() {
      st(t3, "scroll", this.Or, { capture: true }), st(t3, "scrollend", this.Or, { capture: true }), st(t3, "resize", this.Or);
    }
    scrollElement() {
      if (!this._instance.config.scroll_root_selector)
        return null == t3 ? void 0 : t3.document.documentElement;
      var i5 = x4(this._instance.config.scroll_root_selector) ? this._instance.config.scroll_root_selector : [this._instance.config.scroll_root_selector];
      for (var e6 of i5) {
        var r4 = null == t3 ? void 0 : t3.document.querySelector(e6);
        if (r4)
          return r4;
      }
    }
    scrollY() {
      if (this._instance.config.scroll_root_selector) {
        var i5 = this.scrollElement();
        return i5 && i5.scrollTop || 0;
      }
      return t3 && (t3.scrollY || t3.pageYOffset || t3.document.documentElement.scrollTop) || 0;
    }
    scrollX() {
      if (this._instance.config.scroll_root_selector) {
        var i5 = this.scrollElement();
        return i5 && i5.scrollLeft || 0;
      }
      return t3 && (t3.scrollX || t3.pageXOffset || t3.document.documentElement.scrollLeft) || 0;
    }
  };
  var zo = (t4) => Qn(null == t4 ? void 0 : t4.config.mask_personal_data_properties, null == t4 ? void 0 : t4.config.custom_personal_data_properties);
  var Uo = class {
    constructor(t4, i5, e6, r4) {
      this.Dr = (t5) => {
        var i6 = this.Lr();
        if (!i6 || i6.sessionId !== t5) {
          var e7 = { sessionId: t5, props: this.jr(this._instance) };
          this.Nr.register({ [Dt]: e7 });
        }
      }, this._instance = t4, this.zr = i5, this.Nr = e6, this.jr = r4 || zo, this.zr.onSessionId(this.Dr);
    }
    Lr() {
      return this.Nr.props[Dt];
    }
    getSetOnceProps() {
      var t4, i5 = null == (t4 = this.Lr()) ? void 0 : t4.props;
      return i5 ? "r" in i5 ? Zn(i5) : { $referring_domain: i5.referringDomain, $pathname: i5.initialPathName, utm_source: i5.utm_source, utm_campaign: i5.utm_campaign, utm_medium: i5.utm_medium, utm_content: i5.utm_content, utm_term: i5.utm_term } : {};
    }
    getSessionProps() {
      var t4 = {};
      return J2(Z(this.getSetOnceProps()), (i5, e6) => {
        "$current_url" === e6 && (e6 = "url"), t4["$session_entry_" + y4(e6)] = i5;
      }), t4;
    }
  };
  var qo = z3("[SessionId]");
  var Bo = class {
    constructor(t4, i5, e6) {
      var r4;
      if (this.Ur = [], !t4.persistence)
        throw new Error("SessionIdManager requires a PostHogPersistence instance");
      if (t4.config.__preview_experimental_cookieless_mode)
        throw new Error("SessionIdManager cannot be used with __preview_experimental_cookieless_mode");
      this.S = t4.config, this.Nr = t4.persistence, this.fi = void 0, this.Ct = void 0, this._sessionStartTimestamp = null, this._sessionActivityTimestamp = null, this.qr = i5 || ji, this.Br = e6 || ji;
      var s4 = this.S.persistence_name || this.S.token, n4 = this.S.session_idle_timeout_seconds || 1800;
      if (this._sessionTimeoutMs = 1e3 * se(n4, 60, 36e3, "session_idle_timeout_seconds", 1800), t4.register({ $configured_session_timeout_ms: this._sessionTimeoutMs }), this.Hr(), this.Wr = "ph_" + s4 + "_window_id", this.Gr = "ph_" + s4 + "_primary_window_exists", this.Jr()) {
        var o5 = Xi.L(this.Wr), a5 = Xi.L(this.Gr);
        o5 && !a5 ? this.fi = o5 : Xi.N(this.Wr), Xi.j(this.Gr, true);
      }
      if (null != (r4 = this.S.bootstrap) && r4.sessionID)
        try {
          var l5 = ((t5) => {
            var i6 = t5.replace(/-/g, "");
            if (32 !== i6.length)
              throw new Error("Not a valid UUID");
            if ("7" !== i6[12])
              throw new Error("Not a UUIDv7");
            return parseInt(i6.substring(0, 12), 16);
          })(this.S.bootstrap.sessionID);
          this.Vr(this.S.bootstrap.sessionID, (/* @__PURE__ */ new Date()).getTime(), l5);
        } catch (t5) {
          qo.error("Invalid sessionID in bootstrap", t5);
        }
      this.Kr();
    }
    get sessionTimeoutMs() {
      return this._sessionTimeoutMs;
    }
    onSessionId(t4) {
      return R(this.Ur) && (this.Ur = []), this.Ur.push(t4), this.Ct && t4(this.Ct, this.fi), () => {
        this.Ur = this.Ur.filter((i5) => i5 !== t4);
      };
    }
    Jr() {
      return "memory" !== this.S.persistence && !this.Nr.Fe && Xi.O();
    }
    Yr(t4) {
      t4 !== this.fi && (this.fi = t4, this.Jr() && Xi.j(this.Wr, t4));
    }
    Xr() {
      return this.fi ? this.fi : this.Jr() ? Xi.L(this.Wr) : null;
    }
    Vr(t4, i5, e6) {
      t4 === this.Ct && i5 === this._sessionActivityTimestamp && e6 === this._sessionStartTimestamp || (this._sessionStartTimestamp = e6, this._sessionActivityTimestamp = i5, this.Ct = t4, this.Nr.register({ [$t]: [i5, t4, e6] }));
    }
    Qr() {
      if (this.Ct && this._sessionActivityTimestamp && this._sessionStartTimestamp)
        return [this._sessionActivityTimestamp, this.Ct, this._sessionStartTimestamp];
      var t4 = this.Nr.props[$t];
      return x4(t4) && 2 === t4.length && t4.push(t4[0]), t4 || [0, null, 0];
    }
    resetSessionId() {
      this.Vr(null, null, null);
    }
    Kr() {
      st(t3, "beforeunload", () => {
        this.Jr() && Xi.N(this.Gr);
      }, { capture: false });
    }
    checkAndGetSessionAndWindowId(t4, i5) {
      if (void 0 === t4 && (t4 = false), void 0 === i5 && (i5 = null), this.S.__preview_experimental_cookieless_mode)
        throw new Error("checkAndGetSessionAndWindowId should not be called in __preview_experimental_cookieless_mode");
      var e6 = i5 || (/* @__PURE__ */ new Date()).getTime(), [r4, s4, n4] = this.Qr(), o5 = this.Xr(), a5 = O2(n4) && n4 > 0 && Math.abs(e6 - n4) > 864e5, l5 = false, u4 = !s4, h4 = !t4 && Math.abs(e6 - r4) > this.sessionTimeoutMs;
      u4 || h4 || a5 ? (s4 = this.qr(), o5 = this.Br(), qo.info("new session ID generated", { sessionId: s4, windowId: o5, changeReason: { noSessionId: u4, activityTimeout: h4, sessionPastMaximumLength: a5 } }), n4 = e6, l5 = true) : o5 || (o5 = this.Br(), l5 = true);
      var d4 = 0 === r4 || !t4 || a5 ? e6 : r4, v4 = 0 === n4 ? (/* @__PURE__ */ new Date()).getTime() : n4;
      return this.Yr(o5), this.Vr(s4, d4, v4), t4 || this.Hr(), l5 && this.Ur.forEach((t5) => t5(s4, o5, l5 ? { noSessionId: u4, activityTimeout: h4, sessionPastMaximumLength: a5 } : void 0)), { sessionId: s4, windowId: o5, sessionStartTimestamp: v4, changeReason: l5 ? { noSessionId: u4, activityTimeout: h4, sessionPastMaximumLength: a5 } : void 0, lastActivityTimestamp: r4 };
    }
    Hr() {
      clearTimeout(this.Zr), this.Zr = setTimeout(() => {
        this.resetSessionId();
      }, 1.1 * this.sessionTimeoutMs);
    }
  };
  var Ho = ["$set_once", "$set"];
  var Wo = z3("[SiteApps]");
  var Go = class {
    constructor(t4) {
      this._instance = t4, this.ts = [], this.apps = {};
    }
    get isEnabled() {
      return !!this._instance.config.opt_in_site_apps;
    }
    es(t4, i5) {
      if (i5) {
        var e6 = this.globalsForEvent(i5);
        this.ts.push(e6), this.ts.length > 1e3 && (this.ts = this.ts.slice(10));
      }
    }
    get siteAppLoaders() {
      var t4;
      return null == (t4 = v3._POSTHOG_REMOTE_CONFIG) || null == (t4 = t4[this._instance.config.token]) ? void 0 : t4.siteApps;
    }
    init() {
      if (this.isEnabled) {
        var t4 = this._instance.Ge(this.es.bind(this));
        this.rs = () => {
          t4(), this.ts = [], this.rs = void 0;
        };
      }
    }
    globalsForEvent(t4) {
      var i5, e6, r4, s4, n4, o5, a5;
      if (!t4)
        throw new Error("Event payload is required");
      var l5 = {}, u4 = this._instance.get_property("$groups") || [], h4 = this._instance.get_property("$stored_group_properties") || {};
      for (var [d4, v4] of Object.entries(h4))
        l5[d4] = { id: u4[d4], type: d4, properties: v4 };
      var { $set_once: c4, $set: f4 } = t4;
      return { event: B3({}, H(t4, Ho), { properties: B3({}, t4.properties, f4 ? { $set: B3({}, null !== (i5 = null == (e6 = t4.properties) ? void 0 : e6.$set) && void 0 !== i5 ? i5 : {}, f4) } : {}, c4 ? { $set_once: B3({}, null !== (r4 = null == (s4 = t4.properties) ? void 0 : s4.$set_once) && void 0 !== r4 ? r4 : {}, c4) } : {}), elements_chain: null !== (n4 = null == (o5 = t4.properties) ? void 0 : o5.$elements_chain) && void 0 !== n4 ? n4 : "", distinct_id: null == (a5 = t4.properties) ? void 0 : a5.distinct_id }), person: { properties: this._instance.get_property("$stored_person_properties") }, groups: l5 };
    }
    setupSiteApp(t4) {
      var i5 = this.apps[t4.id], e6 = () => {
        var e7;
        (!i5.errored && this.ts.length && (Wo.info("Processing " + this.ts.length + " events for site app with id " + t4.id), this.ts.forEach((t5) => null == i5.processEvent ? void 0 : i5.processEvent(t5)), i5.processedBuffer = true), Object.values(this.apps).every((t5) => t5.processedBuffer || t5.errored)) && (null == (e7 = this.rs) || e7.call(this));
      }, r4 = false, s4 = (s5) => {
        i5.errored = !s5, i5.loaded = true, Wo.info("Site app with id " + t4.id + " " + (s5 ? "loaded" : "errored")), r4 && e6();
      };
      try {
        var { processEvent: n4 } = t4.init({ posthog: this._instance, callback: (t5) => {
          s4(t5);
        } });
        n4 && (i5.processEvent = n4), r4 = true;
      } catch (i6) {
        Wo.error("Error while initializing PostHog app with config id " + t4.id, i6), s4(false);
      }
      if (r4 && i5.loaded)
        try {
          e6();
        } catch (e7) {
          Wo.error("Error while processing buffered events PostHog app with config id " + t4.id, e7), i5.errored = true;
        }
    }
    ss() {
      var t4 = this.siteAppLoaders || [];
      for (var i5 of t4)
        this.apps[i5.id] = { id: i5.id, loaded: false, errored: false, processedBuffer: false };
      for (var e6 of t4)
        this.setupSiteApp(e6);
    }
    ns(t4) {
      if (0 !== Object.keys(this.apps).length) {
        var i5 = this.globalsForEvent(t4);
        for (var e6 of Object.values(this.apps))
          try {
            null == e6.processEvent || e6.processEvent(i5);
          } catch (i6) {
            Wo.error("Error while processing event " + t4.event + " for site app " + e6.id, i6);
          }
      }
    }
    onRemoteConfig(t4) {
      var i5, e6, r4, s4 = this;
      if (null != (i5 = this.siteAppLoaders) && i5.length)
        return this.isEnabled ? (this.ss(), void this._instance.on("eventCaptured", (t5) => this.ns(t5))) : void Wo.error('PostHog site apps are disabled. Enable the "opt_in_site_apps" config to proceed.');
      if (null == (e6 = this.rs) || e6.call(this), null != (r4 = t4.siteApps) && r4.length)
        if (this.isEnabled) {
          var n4 = function(t5) {
            var i6;
            v3["__$$ph_site_app_" + t5] = s4._instance, null == (i6 = v3.__PosthogExtensions__) || null == i6.loadSiteApp || i6.loadSiteApp(s4._instance, a5, (i7) => {
              if (i7)
                return Wo.error("Error while initializing PostHog app with config id " + t5, i7);
            });
          };
          for (var { id: o5, url: a5 } of t4.siteApps)
            n4(o5);
        } else
          Wo.error('PostHog site apps are disabled. Enable the "opt_in_site_apps" config to proceed.');
    }
  };
  var Jo = ["amazonbot", "amazonproductbot", "app.hypefactors.com", "applebot", "archive.org_bot", "awariobot", "backlinksextendedbot", "baiduspider", "bingbot", "bingpreview", "chrome-lighthouse", "dataforseobot", "deepscan", "duckduckbot", "facebookexternal", "facebookcatalog", "http://yandex.com/bots", "hubspot", "ia_archiver", "leikibot", "linkedinbot", "meta-externalagent", "mj12bot", "msnbot", "nessus", "petalbot", "pinterest", "prerender", "rogerbot", "screaming frog", "sebot-wa", "sitebulb", "slackbot", "slurp", "trendictionbot", "turnitin", "twitterbot", "vercelbot", "yahoo! slurp", "yandexbot", "zoombot", "bot.htm", "bot.php", "(bot;", "bot/", "crawler", "ahrefsbot", "ahrefssiteaudit", "semrushbot", "siteauditbot", "splitsignalbot", "gptbot", "oai-searchbot", "chatgpt-user", "perplexitybot", "better uptime bot", "sentryuptimebot", "uptimerobot", "headlesschrome", "cypress", "google-hoteladsverifier", "adsbot-google", "apis-google", "duplexweb-google", "feedfetcher-google", "google favicon", "google web preview", "google-read-aloud", "googlebot", "googleother", "google-cloudvertexbot", "googleweblight", "mediapartners-google", "storebot-google", "google-inspectiontool", "bytespider"];
  var Vo = function(t4, i5) {
    if (!t4)
      return false;
    var e6 = t4.toLowerCase();
    return Jo.concat(i5 || []).some((t5) => {
      var i6 = t5.toLowerCase();
      return -1 !== e6.indexOf(i6);
    });
  };
  var Ko = function(t4, i5) {
    if (!t4)
      return false;
    var e6 = t4.userAgent;
    if (e6 && Vo(e6, i5))
      return true;
    try {
      var r4 = null == t4 ? void 0 : t4.userAgentData;
      if (null != r4 && r4.brands && r4.brands.some((t5) => Vo(null == t5 ? void 0 : t5.brand, i5)))
        return true;
    } catch (t5) {
    }
    return !!t4.webdriver;
  };
  var Yo = function(t4) {
    return t4.US = "us", t4.EU = "eu", t4.CUSTOM = "custom", t4;
  }({});
  var Xo = "i.posthog.com";
  var Qo = class {
    constructor(t4) {
      this.os = {}, this.instance = t4;
    }
    get apiHost() {
      var t4 = this.instance.config.api_host.trim().replace(/\/$/, "");
      return "https://app.posthog.com" === t4 ? "https://us.i.posthog.com" : t4;
    }
    get uiHost() {
      var t4, i5 = null == (t4 = this.instance.config.ui_host) ? void 0 : t4.replace(/\/$/, "");
      return i5 || (i5 = this.apiHost.replace("." + Xo, ".posthog.com")), "https://app.posthog.com" === i5 ? "https://us.posthog.com" : i5;
    }
    get region() {
      return this.os[this.apiHost] || (/https:\/\/(app|us|us-assets)(\.i)?\.posthog\.com/i.test(this.apiHost) ? this.os[this.apiHost] = Yo.US : /https:\/\/(eu|eu-assets)(\.i)?\.posthog\.com/i.test(this.apiHost) ? this.os[this.apiHost] = Yo.EU : this.os[this.apiHost] = Yo.CUSTOM), this.os[this.apiHost];
    }
    endpointFor(t4, i5) {
      if (void 0 === i5 && (i5 = ""), i5 && (i5 = "/" === i5[0] ? i5 : "/" + i5), "ui" === t4)
        return this.uiHost + i5;
      if (this.region === Yo.CUSTOM)
        return this.apiHost + i5;
      var e6 = Xo + i5;
      switch (t4) {
        case "assets":
          return "https://" + this.region + "-assets." + e6;
        case "api":
          return "https://" + this.region + "." + e6;
      }
    }
  };
  var Zo = { icontains: (i5, e6) => !!t3 && e6.href.toLowerCase().indexOf(i5.toLowerCase()) > -1, not_icontains: (i5, e6) => !!t3 && -1 === e6.href.toLowerCase().indexOf(i5.toLowerCase()), regex: (i5, e6) => !!t3 && Ns(e6.href, i5), not_regex: (i5, e6) => !!t3 && !Ns(e6.href, i5), exact: (t4, i5) => i5.href === t4, is_not: (t4, i5) => i5.href !== t4 };
  var ta = class _ta {
    constructor(t4) {
      var i5 = this;
      this.getWebExperimentsAndEvaluateDisplayLogic = function(t5) {
        void 0 === t5 && (t5 = false), i5.getWebExperiments((t6) => {
          _ta.ls("retrieved web experiments from the server"), i5.us = /* @__PURE__ */ new Map(), t6.forEach((t7) => {
            if (t7.feature_flag_key) {
              var e6;
              if (i5.us)
                _ta.ls("setting flag key ", t7.feature_flag_key, " to web experiment ", t7), null == (e6 = i5.us) || e6.set(t7.feature_flag_key, t7);
              var r4 = i5._instance.getFeatureFlag(t7.feature_flag_key);
              T3(r4) && t7.variants[r4] && i5.hs(t7.name, r4, t7.variants[r4].transforms);
            } else if (t7.variants)
              for (var s4 in t7.variants) {
                var n4 = t7.variants[s4];
                _ta.ds(n4) && i5.hs(t7.name, s4, n4.transforms);
              }
          });
        }, t5);
      }, this._instance = t4, this._instance.onFeatureFlags((t5) => {
        this.onFeatureFlags(t5);
      });
    }
    onFeatureFlags(t4) {
      if (this._is_bot())
        _ta.ls("Refusing to render web experiment since the viewer is a likely bot");
      else if (!this._instance.config.disable_web_experiments) {
        if (F2(this.us))
          return this.us = /* @__PURE__ */ new Map(), this.loadIfEnabled(), void this.previewWebExperiment();
        _ta.ls("applying feature flags", t4), t4.forEach((t5) => {
          var i5;
          if (this.us && null != (i5 = this.us) && i5.has(t5)) {
            var e6, r4 = this._instance.getFeatureFlag(t5), s4 = null == (e6 = this.us) ? void 0 : e6.get(t5);
            r4 && null != s4 && s4.variants[r4] && this.hs(s4.name, r4, s4.variants[r4].transforms);
          }
        });
      }
    }
    previewWebExperiment() {
      var t4 = _ta.getWindowLocation();
      if (null != t4 && t4.search) {
        var i5 = $i(null == t4 ? void 0 : t4.search, "__experiment_id"), e6 = $i(null == t4 ? void 0 : t4.search, "__experiment_variant");
        i5 && e6 && (_ta.ls("previewing web experiments " + i5 + " && " + e6), this.getWebExperiments((t5) => {
          this.vs(parseInt(i5), e6, t5);
        }, false, true));
      }
    }
    loadIfEnabled() {
      this._instance.config.disable_web_experiments || this.getWebExperimentsAndEvaluateDisplayLogic();
    }
    getWebExperiments(t4, i5, e6) {
      if (this._instance.config.disable_web_experiments && !e6)
        return t4([]);
      var r4 = this._instance.get_property("$web_experiments");
      if (r4 && !i5)
        return t4(r4);
      this._instance.Ee({ url: this._instance.requestRouter.endpointFor("api", "/api/web_experiments/?token=" + this._instance.config.token), method: "GET", callback: (i6) => {
        if (200 !== i6.statusCode || !i6.json)
          return t4([]);
        var e7 = i6.json.experiments || [];
        return t4(e7);
      } });
    }
    vs(t4, i5, e6) {
      var r4 = e6.filter((i6) => i6.id === t4);
      r4 && r4.length > 0 && (_ta.ls("Previewing web experiment [" + r4[0].name + "] with variant [" + i5 + "]"), this.hs(r4[0].name, i5, r4[0].variants[i5].transforms));
    }
    static ds(t4) {
      return !F2(t4.conditions) && (_ta.cs(t4) && _ta.fs(t4));
    }
    static cs(t4) {
      var i5;
      if (F2(t4.conditions) || F2(null == (i5 = t4.conditions) ? void 0 : i5.url))
        return true;
      var e6, r4, s4, n4 = _ta.getWindowLocation();
      return !!n4 && (null == (e6 = t4.conditions) || !e6.url || Zo[null !== (r4 = null == (s4 = t4.conditions) ? void 0 : s4.urlMatchType) && void 0 !== r4 ? r4 : "icontains"](t4.conditions.url, n4));
    }
    static getWindowLocation() {
      return null == t3 ? void 0 : t3.location;
    }
    static fs(t4) {
      var i5;
      if (F2(t4.conditions) || F2(null == (i5 = t4.conditions) ? void 0 : i5.utm))
        return true;
      var e6 = Jn();
      if (e6.utm_source) {
        var r4, s4, n4, o5, a5, l5, u4, h4, d4 = null == (r4 = t4.conditions) || null == (r4 = r4.utm) || !r4.utm_campaign || (null == (s4 = t4.conditions) || null == (s4 = s4.utm) ? void 0 : s4.utm_campaign) == e6.utm_campaign, v4 = null == (n4 = t4.conditions) || null == (n4 = n4.utm) || !n4.utm_source || (null == (o5 = t4.conditions) || null == (o5 = o5.utm) ? void 0 : o5.utm_source) == e6.utm_source, c4 = null == (a5 = t4.conditions) || null == (a5 = a5.utm) || !a5.utm_medium || (null == (l5 = t4.conditions) || null == (l5 = l5.utm) ? void 0 : l5.utm_medium) == e6.utm_medium, f4 = null == (u4 = t4.conditions) || null == (u4 = u4.utm) || !u4.utm_term || (null == (h4 = t4.conditions) || null == (h4 = h4.utm) ? void 0 : h4.utm_term) == e6.utm_term;
        return d4 && c4 && f4 && v4;
      }
      return false;
    }
    static ls(t4) {
      for (var i5 = arguments.length, e6 = new Array(i5 > 1 ? i5 - 1 : 0), r4 = 1; r4 < i5; r4++)
        e6[r4 - 1] = arguments[r4];
      N2.info("[WebExperiments] " + t4, e6);
    }
    hs(t4, i5, e6) {
      this._is_bot() ? _ta.ls("Refusing to render web experiment since the viewer is a likely bot") : "control" !== i5 ? e6.forEach((e7) => {
        if (e7.selector) {
          var r4;
          _ta.ls("applying transform of variant " + i5 + " for experiment " + t4 + " ", e7);
          var s4 = null == (r4 = document) ? void 0 : r4.querySelectorAll(e7.selector);
          null == s4 || s4.forEach((t5) => {
            var i6 = t5;
            e7.html && (i6.innerHTML = e7.html), e7.css && i6.setAttribute("style", e7.css);
          });
        }
      }) : _ta.ls("Control variants leave the page unmodified.");
    }
    _is_bot() {
      return n3 && this._instance ? Ko(n3, this._instance.config.custom_blocked_useragents) : void 0;
    }
  };
  var ia = z3("[PostHog ExternalIntegrations]");
  var ea = { intercom: "intercom-integration", crispChat: "crisp-chat-integration" };
  var ra = class {
    constructor(t4) {
      this._instance = t4;
    }
    J(t4, i5) {
      var e6;
      null == (e6 = v3.__PosthogExtensions__) || null == e6.loadExternalDependency || e6.loadExternalDependency(this._instance, t4, (t5) => {
        if (t5)
          return ia.error("failed to load script", t5);
        i5();
      });
    }
    startIfEnabledOrStop() {
      var t4 = this, i5 = function(i6) {
        var e7, s5, n4;
        (!r4 || null != (e7 = v3.__PosthogExtensions__) && null != (e7 = e7.integrations) && e7[i6] || t4.J(ea[i6], () => {
          var e8;
          null == (e8 = v3.__PosthogExtensions__) || null == (e8 = e8.integrations) || null == (e8 = e8[i6]) || e8.start(t4._instance);
        }), !r4 && null != (s5 = v3.__PosthogExtensions__) && null != (s5 = s5.integrations) && s5[i6]) && (null == (n4 = v3.__PosthogExtensions__) || null == (n4 = n4.integrations) || null == (n4 = n4[i6]) || n4.stop());
      };
      for (var [e6, r4] of Object.entries(null !== (s4 = this._instance.config.integrations) && void 0 !== s4 ? s4 : {})) {
        var s4;
        i5(e6);
      }
    }
  };
  var sa = {};
  var na = () => {
  };
  var oa = "posthog";
  var aa = !Fs && -1 === (null == d3 ? void 0 : d3.indexOf("MSIE")) && -1 === (null == d3 ? void 0 : d3.indexOf("Mozilla"));
  var la = (i5) => {
    var e6;
    return { api_host: "https://us.i.posthog.com", ui_host: null, token: "", autocapture: true, rageclick: true, cross_subdomain_cookie: et(null == o4 ? void 0 : o4.location), persistence: "localStorage+cookie", persistence_name: "", loaded: na, save_campaign_params: true, custom_campaign_params: [], custom_blocked_useragents: [], save_referrer: true, capture_pageview: "2025-05-24" !== i5 || "history_change", capture_pageleave: "if_capture_pageview", defaults: null != i5 ? i5 : "unset", debug: a4 && T3(null == a4 ? void 0 : a4.search) && -1 !== a4.search.indexOf("__posthog_debug=true") || false, cookie_expiration: 365, upgrade: false, disable_session_recording: false, disable_persistence: false, disable_web_experiments: true, disable_surveys: false, disable_surveys_automatic_display: false, disable_external_dependency_loading: false, enable_recording_console_log: void 0, secure_cookie: "https:" === (null == t3 || null == (e6 = t3.location) ? void 0 : e6.protocol), ip: false, opt_out_capturing_by_default: false, opt_out_persistence_by_default: false, opt_out_useragent_filter: false, opt_out_capturing_persistence_type: "localStorage", opt_out_capturing_cookie_prefix: null, opt_in_site_apps: false, property_denylist: [], respect_dnt: false, sanitize_properties: null, request_headers: {}, request_batching: true, properties_string_max_length: 65535, session_recording: {}, mask_all_element_attributes: false, mask_all_text: false, mask_personal_data_properties: false, custom_personal_data_properties: [], advanced_disable_flags: false, advanced_disable_decide: false, advanced_disable_feature_flags: false, advanced_disable_feature_flags_on_first_load: false, advanced_only_evaluate_survey_feature_flags: false, advanced_disable_toolbar_metrics: false, feature_flag_request_timeout_ms: 3e3, surveys_request_timeout_ms: 1e4, on_request_error: (t4) => {
      var i6 = "Bad HTTP status: " + t4.statusCode + " " + t4.text;
      N2.error(i6);
    }, get_device_id: (t4) => t4, capture_performance: void 0, name: "posthog", bootstrap: {}, disable_compression: false, session_idle_timeout_seconds: 1800, person_profiles: "identified_only", before_send: void 0, request_queue_config: { flush_interval_ms: Ao }, error_tracking: {}, _onCapture: na };
  };
  var ua = (t4) => {
    var i5 = {};
    R(t4.process_person) || (i5.person_profiles = t4.process_person), R(t4.xhr_headers) || (i5.request_headers = t4.xhr_headers), R(t4.cookie_name) || (i5.persistence_name = t4.cookie_name), R(t4.disable_cookie) || (i5.disable_persistence = t4.disable_cookie), R(t4.store_google) || (i5.save_campaign_params = t4.store_google), R(t4.verbose) || (i5.debug = t4.verbose);
    var e6 = V2({}, i5, t4);
    return x4(t4.property_blacklist) && (R(t4.property_denylist) ? e6.property_denylist = t4.property_blacklist : x4(t4.property_denylist) ? e6.property_denylist = [...t4.property_blacklist, ...t4.property_denylist] : N2.error("Invalid value for property_denylist config: " + t4.property_denylist)), e6;
  };
  var ha = class {
    constructor() {
      this.__forceAllowLocalhost = false;
    }
    get ps() {
      return this.__forceAllowLocalhost;
    }
    set ps(t4) {
      N2.error("WebPerformanceObserver is deprecated and has no impact on network capture. Use `_forceAllowLocalhostNetworkCapture` on `posthog.sessionRecording`"), this.__forceAllowLocalhost = t4;
    }
  };
  var da = class _da {
    get decideEndpointWasHit() {
      var t4, i5;
      return null !== (t4 = null == (i5 = this.featureFlags) ? void 0 : i5.hasLoadedFlags) && void 0 !== t4 && t4;
    }
    get flagsEndpointWasHit() {
      var t4, i5;
      return null !== (t4 = null == (i5 = this.featureFlags) ? void 0 : i5.hasLoadedFlags) && void 0 !== t4 && t4;
    }
    constructor() {
      this.webPerformance = new ha(), this.gs = false, this.version = c3.LIB_VERSION, this._s = new go(), this._calculate_event_properties = this.calculateEventProperties.bind(this), this.config = la(), this.SentryIntegration = _s, this.sentryIntegration = (t4) => function(t5, i5) {
        var e6 = gs(t5, i5);
        return { name: ps, processEvent: (t6) => e6(t6) };
      }(this, t4), this.__request_queue = [], this.__loaded = false, this.analyticsDefaultEndpoint = "/e/", this.bs = false, this.ys = null, this.ws = null, this.Ss = null, this.featureFlags = new co(this), this.toolbar = new Ss(this), this.scrollManager = new No(this), this.pageViewManager = new Ms(this), this.surveys = new So(this), this.experiments = new ta(this), this.exceptions = new Hs(this), this.rateLimiter = new Co(this), this.requestRouter = new Qo(this), this.consent = new Zi(this), this.externalIntegrations = new ra(this), this.people = { set: (t4, i5, e6) => {
        var r4 = T3(t4) ? { [t4]: i5 } : t4;
        this.setPersonProperties(r4), null == e6 || e6({});
      }, set_once: (t4, i5, e6) => {
        var r4 = T3(t4) ? { [t4]: i5 } : t4;
        this.setPersonProperties(void 0, r4), null == e6 || e6({});
      } }, this.on("eventCaptured", (t4) => N2.info('send "' + (null == t4 ? void 0 : t4.event) + '"', t4));
    }
    init(t4, i5, e6) {
      if (e6 && e6 !== oa) {
        var r4, s4 = null !== (r4 = sa[e6]) && void 0 !== r4 ? r4 : new _da();
        return s4._init(t4, i5, e6), sa[e6] = s4, sa[oa][e6] = s4, s4;
      }
      return this._init(t4, i5, e6);
    }
    _init(i5, e6, r4) {
      var s4, n4;
      if (void 0 === e6 && (e6 = {}), R(i5) || M2(i5))
        return N2.critical("PostHog was initialized without a token. This likely indicates a misconfiguration. Please check the first argument passed to posthog.init()"), this;
      if (this.__loaded)
        return N2.warn("You have already initialized PostHog! Re-initializing is a no-op"), this;
      this.__loaded = true, this.config = {}, this.$s = e6, this.ks = [], e6.person_profiles && (this.ws = e6.person_profiles), this.set_config(V2({}, la(e6.defaults), ua(e6), { name: r4, token: i5 })), this.config.on_xhr_error && N2.error("on_xhr_error is deprecated. Use on_request_error instead"), this.compression = e6.disable_compression ? void 0 : g3.GZipJS, this.persistence = new po(this.config), this.sessionPersistence = "sessionStorage" === this.config.persistence || "memory" === this.config.persistence ? this.persistence : new po(B3({}, this.config, { persistence: "sessionStorage" }));
      var o5 = B3({}, this.persistence.props), a5 = B3({}, this.sessionPersistence.props);
      if (this.register({ $initialization_time: (/* @__PURE__ */ new Date()).toISOString() }), this.xs = new Do((t4) => this.Es(t4), this.config.request_queue_config), this.Is = new jo(this), this.__request_queue = [], this.config.__preview_experimental_cookieless_mode || (this.sessionManager = new Bo(this), this.sessionPropsManager = new Uo(this, this.sessionManager, this.persistence)), new ks(this).startIfEnabledOrStop(), this.siteApps = new Go(this), null == (s4 = this.siteApps) || s4.init(), this.config.__preview_experimental_cookieless_mode || (this.sessionRecording = new vs(this), this.sessionRecording.startIfEnabledOrStop()), this.config.disable_scroll_properties || this.scrollManager.startMeasuringScrollPosition(), this.autocapture = new Mi(this), this.autocapture.startIfEnabled(), this.surveys.loadIfEnabled(), this.heatmaps = new Ts(this), this.heatmaps.startIfEnabled(), this.webVitalsAutocapture = new Is(this), this.exceptionObserver = new ae(this), this.exceptionObserver.startIfEnabled(), this.deadClicksAutocapture = new re2(this, ee), this.deadClicksAutocapture.startIfEnabled(), this.historyAutocapture = new Ne(this), this.historyAutocapture.startIfEnabled(), c3.DEBUG = c3.DEBUG || this.config.debug, c3.DEBUG && N2.info("Starting in debug mode", { this: this, config: e6, thisC: B3({}, this.config), p: o5, s: a5 }), this.Ps(), void 0 !== (null == (n4 = e6.bootstrap) ? void 0 : n4.distinctID)) {
        var l5, u4, h4 = this.config.get_device_id(ji()), d4 = null != (l5 = e6.bootstrap) && l5.isIdentifiedID ? h4 : e6.bootstrap.distinctID;
        this.persistence.set_property(At, null != (u4 = e6.bootstrap) && u4.isIdentifiedID ? "identified" : "anonymous"), this.register({ distinct_id: e6.bootstrap.distinctID, $device_id: d4 });
      }
      if (this.Rs()) {
        var v4, f4, p5 = Object.keys((null == (v4 = e6.bootstrap) ? void 0 : v4.featureFlags) || {}).filter((t4) => {
          var i6;
          return !(null == (i6 = e6.bootstrap) || null == (i6 = i6.featureFlags) || !i6[t4]);
        }).reduce((t4, i6) => {
          var r5;
          return t4[i6] = (null == (r5 = e6.bootstrap) || null == (r5 = r5.featureFlags) ? void 0 : r5[i6]) || false, t4;
        }, {}), _3 = Object.keys((null == (f4 = e6.bootstrap) ? void 0 : f4.featureFlagPayloads) || {}).filter((t4) => p5[t4]).reduce((t4, i6) => {
          var r5, s5;
          null != (r5 = e6.bootstrap) && null != (r5 = r5.featureFlagPayloads) && r5[i6] && (t4[i6] = null == (s5 = e6.bootstrap) || null == (s5 = s5.featureFlagPayloads) ? void 0 : s5[i6]);
          return t4;
        }, {});
        this.featureFlags.receivedFeatureFlags({ featureFlags: p5, featureFlagPayloads: _3 });
      }
      if (this.config.__preview_experimental_cookieless_mode)
        this.register_once({ distinct_id: Bt, $device_id: null }, "");
      else if (!this.get_distinct_id()) {
        var m4 = this.config.get_device_id(ji());
        this.register_once({ distinct_id: m4, $device_id: m4 }, ""), this.persistence.set_property(At, "anonymous");
      }
      return st(t3, "onpagehide" in self ? "pagehide" : "unload", this._handle_unload.bind(this), { passive: false }), this.toolbar.maybeLoadToolbar(), e6.segment ? fs(this, () => this.Ts()) : this.Ts(), E2(this.config._onCapture) && this.config._onCapture !== na && (N2.warn("onCapture is deprecated. Please use `before_send` instead"), this.on("eventCaptured", (t4) => this.config._onCapture(t4.event, t4))), this.config.ip && N2.warn('The `ip` config option has NO EFFECT AT ALL and has been deprecated. Use a custom transformation or "Discard IP data" project setting instead. See https://posthog.com/tutorials/web-redact-properties#hiding-customer-ip-address for more information.'), this;
    }
    Ie(t4) {
      var i5, e6, r4, s4, n4, a5, l5, u4;
      if (!o4 || !o4.body)
        return N2.info("document not ready yet, trying again in 500 milliseconds..."), void setTimeout(() => {
          this.Ie(t4);
        }, 500);
      this.compression = void 0, t4.supportedCompression && !this.config.disable_compression && (this.compression = m3(t4.supportedCompression, g3.GZipJS) ? g3.GZipJS : m3(t4.supportedCompression, g3.Base64) ? g3.Base64 : void 0), null != (i5 = t4.analytics) && i5.endpoint && (this.analyticsDefaultEndpoint = t4.analytics.endpoint), this.set_config({ person_profiles: this.ws ? this.ws : "identified_only" }), null == (e6 = this.siteApps) || e6.onRemoteConfig(t4), null == (r4 = this.sessionRecording) || r4.onRemoteConfig(t4), null == (s4 = this.autocapture) || s4.onRemoteConfig(t4), null == (n4 = this.heatmaps) || n4.onRemoteConfig(t4), this.surveys.onRemoteConfig(t4), null == (a5 = this.webVitalsAutocapture) || a5.onRemoteConfig(t4), null == (l5 = this.exceptionObserver) || l5.onRemoteConfig(t4), this.exceptions.onRemoteConfig(t4), null == (u4 = this.deadClicksAutocapture) || u4.onRemoteConfig(t4);
    }
    Ts() {
      try {
        this.config.loaded(this);
      } catch (t4) {
        N2.critical("`loaded` function failed", t4);
      }
      this.Ms(), this.config.capture_pageview && setTimeout(() => {
        this.consent.isOptedIn() && this.Cs();
      }, 1), new Oo(this).load(), this.featureFlags.flags();
    }
    Ms() {
      var t4;
      this.has_opted_out_capturing() || this.config.request_batching && (null == (t4 = this.xs) || t4.enable());
    }
    _dom_loaded() {
      this.has_opted_out_capturing() || G(this.__request_queue, (t4) => this.Es(t4)), this.__request_queue = [], this.Ms();
    }
    _handle_unload() {
      var t4, i5;
      this.config.request_batching ? (this.Fs() && this.capture("$pageleave"), null == (t4 = this.xs) || t4.unload(), null == (i5 = this.Is) || i5.unload()) : this.Fs() && this.capture("$pageleave", null, { transport: "sendBeacon" });
    }
    Ee(t4) {
      this.__loaded && (aa ? this.__request_queue.push(t4) : this.rateLimiter.isServerRateLimited(t4.batchKey) || (t4.transport = t4.transport || this.config.api_transport, t4.url = As(t4.url, { ip: this.config.ip ? 1 : 0 }), t4.headers = B3({}, this.config.request_headers), t4.compression = "best-available" === t4.compression ? this.compression : t4.compression, t4.fetchOptions = t4.fetchOptions || this.config.fetch_options, ((t5) => {
        var i5, e6, r4, s4 = B3({}, t5);
        s4.timeout = s4.timeout || 6e4, s4.url = As(s4.url, { _: (/* @__PURE__ */ new Date()).getTime().toString(), ver: c3.LIB_VERSION, compression: s4.compression });
        var n4 = null !== (i5 = s4.transport) && void 0 !== i5 ? i5 : "fetch", o5 = null !== (e6 = null == (r4 = rt(js, (t6) => t6.transport === n4)) ? void 0 : r4.method) && void 0 !== e6 ? e6 : js[0].method;
        if (!o5)
          throw new Error("No available transport method");
        o5(s4);
      })(B3({}, t4, { callback: (i5) => {
        var e6, r4;
        (this.rateLimiter.checkForLimiting(i5), i5.statusCode >= 400) && (null == (e6 = (r4 = this.config).on_request_error) || e6.call(r4, i5));
        null == t4.callback || t4.callback(i5);
      } }))));
    }
    Es(t4) {
      this.Is ? this.Is.retriableRequest(t4) : this.Ee(t4);
    }
    _execute_array(t4) {
      var i5, e6 = [], r4 = [], s4 = [];
      G(t4, (t5) => {
        t5 && (i5 = t5[0], x4(i5) ? s4.push(t5) : E2(t5) ? t5.call(this) : x4(t5) && "alias" === i5 ? e6.push(t5) : x4(t5) && -1 !== i5.indexOf("capture") && E2(this[i5]) ? s4.push(t5) : r4.push(t5));
      });
      var n4 = function(t5, i6) {
        G(t5, function(t6) {
          if (x4(t6[0])) {
            var e7 = i6;
            J2(t6, function(t7) {
              e7 = e7[t7[0]].apply(e7, t7.slice(1));
            });
          } else
            this[t6[0]].apply(this, t6.slice(1));
        }, i6);
      };
      n4(e6, this), n4(r4, this), n4(s4, this);
    }
    Rs() {
      var t4, i5;
      return (null == (t4 = this.config.bootstrap) ? void 0 : t4.featureFlags) && Object.keys(null == (i5 = this.config.bootstrap) ? void 0 : i5.featureFlags).length > 0 || false;
    }
    push(t4) {
      this._execute_array([t4]);
    }
    capture(t4, i5, e6) {
      var r4;
      if (this.__loaded && this.persistence && this.sessionPersistence && this.xs) {
        if (!this.consent.isOptedOut())
          if (!R(t4) && T3(t4)) {
            if (this.config.opt_out_useragent_filter || !this._is_bot()) {
              var s4 = null != e6 && e6.skip_client_rate_limiting ? void 0 : this.rateLimiter.clientRateLimitContext();
              if (null == s4 || !s4.isRateLimited) {
                null != i5 && i5.$current_url && !T3(null == i5 ? void 0 : i5.$current_url) && (N2.error("Invalid `$current_url` property provided to `posthog.capture`. Input must be a string. Ignoring provided value."), null == i5 || delete i5.$current_url), this.sessionPersistence.update_search_keyword(), this.config.save_campaign_params && this.sessionPersistence.update_campaign_params(), this.config.save_referrer && this.sessionPersistence.update_referrer_info(), (this.config.save_campaign_params || this.config.save_referrer) && this.persistence.set_initial_person_info();
                var n4 = /* @__PURE__ */ new Date(), o5 = (null == e6 ? void 0 : e6.timestamp) || n4, a5 = ji(), l5 = { uuid: a5, event: t4, properties: this.calculateEventProperties(t4, i5 || {}, o5, a5) };
                s4 && (l5.properties.$lib_rate_limit_remaining_tokens = s4.remainingTokens), (null == e6 ? void 0 : e6.$set) && (l5.$set = null == e6 ? void 0 : e6.$set);
                var u4, h4, d4 = this.Os(null == e6 ? void 0 : e6.$set_once);
                if (d4 && (l5.$set_once = d4), (l5 = tt(l5, null != e6 && e6._noTruncate ? null : this.config.properties_string_max_length)).timestamp = o5, R(null == e6 ? void 0 : e6.timestamp) || (l5.properties.$event_time_override_provided = true, l5.properties.$event_time_override_system_time = n4), t4 === Ro.DISMISSED || t4 === Ro.SENT) {
                  var v4 = null == i5 ? void 0 : i5[To.SURVEY_ID], c4 = null == i5 ? void 0 : i5[To.SURVEY_ITERATION];
                  localStorage.setItem((h4 = "" + bo + (u4 = { id: v4, current_iteration: c4 }).id, u4.current_iteration && u4.current_iteration > 0 && (h4 = "" + bo + u4.id + "_" + u4.current_iteration), h4), "true"), l5.$set = B3({}, l5.$set, { [yo({ id: v4, current_iteration: c4 }, t4 === Ro.SENT ? "responded" : "dismissed")]: true });
                }
                var f4 = B3({}, l5.properties.$set, l5.$set);
                if (P2(f4) || this.setPersonPropertiesForFlags(f4), !F2(this.config.before_send)) {
                  var p5 = this.As(l5);
                  if (!p5)
                    return;
                  l5 = p5;
                }
                this._s.emit("eventCaptured", l5);
                var g4 = { method: "POST", url: null !== (r4 = null == e6 ? void 0 : e6._url) && void 0 !== r4 ? r4 : this.requestRouter.endpointFor("api", this.analyticsDefaultEndpoint), data: l5, compression: "best-available", batchKey: null == e6 ? void 0 : e6._batchKey };
                return !this.config.request_batching || e6 && (null == e6 || !e6._batchKey) || null != e6 && e6.send_instantly ? this.Es(g4) : this.xs.enqueue(g4), l5;
              }
              N2.critical("This capture call is ignored due to client rate limiting.");
            }
          } else
            N2.error("No event name provided to posthog.capture");
      } else
        N2.uninitializedWarning("posthog.capture");
    }
    Ge(t4) {
      return this.on("eventCaptured", (i5) => t4(i5.event, i5));
    }
    calculateEventProperties(t4, i5, e6, r4, s4) {
      if (e6 = e6 || /* @__PURE__ */ new Date(), !this.persistence || !this.sessionPersistence)
        return i5;
      var n4 = s4 ? void 0 : this.persistence.remove_event_timer(t4), a5 = B3({}, i5);
      if (a5.token = this.config.token, a5.$config_defaults = this.config.defaults, this.config.__preview_experimental_cookieless_mode && (a5.$cookieless_mode = true), "$snapshot" === t4) {
        var l5 = B3({}, this.persistence.properties(), this.sessionPersistence.properties());
        return a5.distinct_id = l5.distinct_id, (!T3(a5.distinct_id) && !O2(a5.distinct_id) || M2(a5.distinct_id)) && N2.error("Invalid distinct_id for replay event. This indicates a bug in your implementation"), a5;
      }
      var u4, h4 = eo(this.config.mask_personal_data_properties, this.config.custom_personal_data_properties);
      if (this.sessionManager) {
        var { sessionId: v4, windowId: c4 } = this.sessionManager.checkAndGetSessionAndWindowId(s4, e6.getTime());
        a5.$session_id = v4, a5.$window_id = c4;
      }
      this.sessionPropsManager && V2(a5, this.sessionPropsManager.getSessionProps());
      try {
        var f4;
        this.sessionRecording && V2(a5, this.sessionRecording.sdkDebugProperties), a5.$sdk_debug_retry_queue_size = null == (f4 = this.Is) ? void 0 : f4.length;
      } catch (t5) {
        a5.$sdk_debug_error_capturing_properties = String(t5);
      }
      if (this.requestRouter.region === Yo.CUSTOM && (a5.$lib_custom_api_host = this.config.api_host), u4 = "$pageview" !== t4 || s4 ? "$pageleave" !== t4 || s4 ? this.pageViewManager.doEvent() : this.pageViewManager.doPageLeave(e6) : this.pageViewManager.doPageView(e6, r4), a5 = V2(a5, u4), "$pageview" === t4 && o4 && (a5.title = o4.title), !R(n4)) {
        var p5 = e6.getTime() - n4;
        a5.$duration = parseFloat((p5 / 1e3).toFixed(3));
      }
      d3 && this.config.opt_out_useragent_filter && (a5.$browser_type = this._is_bot() ? "bot" : "browser"), (a5 = V2({}, h4, this.persistence.properties(), this.sessionPersistence.properties(), a5)).$is_identified = this._isIdentified(), x4(this.config.property_denylist) ? J2(this.config.property_denylist, function(t5) {
        delete a5[t5];
      }) : N2.error("Invalid value for property_denylist config: " + this.config.property_denylist + " or property_blacklist config: " + this.config.property_blacklist);
      var g4 = this.config.sanitize_properties;
      g4 && (N2.error("sanitize_properties is deprecated. Use before_send instead"), a5 = g4(a5, t4));
      var _3 = this.Ds();
      return a5.$process_person_profile = _3, _3 && !s4 && this.Ls("_calculate_event_properties"), a5;
    }
    Os(t4) {
      var i5;
      if (!this.persistence || !this.Ds())
        return t4;
      if (this.gs)
        return t4;
      var e6 = this.persistence.get_initial_props(), r4 = null == (i5 = this.sessionPropsManager) ? void 0 : i5.getSetOnceProps(), s4 = V2({}, e6, r4 || {}, t4 || {}), n4 = this.config.sanitize_properties;
      return n4 && (N2.error("sanitize_properties is deprecated. Use before_send instead"), s4 = n4(s4, "$set_once")), this.gs = true, P2(s4) ? void 0 : s4;
    }
    register(t4, i5) {
      var e6;
      null == (e6 = this.persistence) || e6.register(t4, i5);
    }
    register_once(t4, i5, e6) {
      var r4;
      null == (r4 = this.persistence) || r4.register_once(t4, i5, e6);
    }
    register_for_session(t4) {
      var i5;
      null == (i5 = this.sessionPersistence) || i5.register(t4);
    }
    unregister(t4) {
      var i5;
      null == (i5 = this.persistence) || i5.unregister(t4);
    }
    unregister_for_session(t4) {
      var i5;
      null == (i5 = this.sessionPersistence) || i5.unregister(t4);
    }
    js(t4, i5) {
      this.register({ [t4]: i5 });
    }
    getFeatureFlag(t4, i5) {
      return this.featureFlags.getFeatureFlag(t4, i5);
    }
    getFeatureFlagPayload(t4) {
      var i5 = this.featureFlags.getFeatureFlagPayload(t4);
      try {
        return JSON.parse(i5);
      } catch (t5) {
        return i5;
      }
    }
    isFeatureEnabled(t4, i5) {
      return this.featureFlags.isFeatureEnabled(t4, i5);
    }
    reloadFeatureFlags() {
      this.featureFlags.reloadFeatureFlags();
    }
    updateEarlyAccessFeatureEnrollment(t4, i5) {
      this.featureFlags.updateEarlyAccessFeatureEnrollment(t4, i5);
    }
    getEarlyAccessFeatures(t4, i5, e6) {
      return void 0 === i5 && (i5 = false), this.featureFlags.getEarlyAccessFeatures(t4, i5, e6);
    }
    on(t4, i5) {
      return this._s.on(t4, i5);
    }
    onFeatureFlags(t4) {
      return this.featureFlags.onFeatureFlags(t4);
    }
    onSurveysLoaded(t4) {
      return this.surveys.onSurveysLoaded(t4);
    }
    onSessionId(t4) {
      var i5, e6;
      return null !== (i5 = null == (e6 = this.sessionManager) ? void 0 : e6.onSessionId(t4)) && void 0 !== i5 ? i5 : () => {
      };
    }
    getSurveys(t4, i5) {
      void 0 === i5 && (i5 = false), this.surveys.getSurveys(t4, i5);
    }
    getActiveMatchingSurveys(t4, i5) {
      void 0 === i5 && (i5 = false), this.surveys.getActiveMatchingSurveys(t4, i5);
    }
    renderSurvey(t4, i5) {
      this.surveys.renderSurvey(t4, i5);
    }
    canRenderSurvey(t4) {
      return this.surveys.canRenderSurvey(t4);
    }
    canRenderSurveyAsync(t4, i5) {
      return void 0 === i5 && (i5 = false), this.surveys.canRenderSurveyAsync(t4, i5);
    }
    identify(t4, i5, e6) {
      if (!this.__loaded || !this.persistence)
        return N2.uninitializedWarning("posthog.identify");
      if (O2(t4) && (t4 = t4.toString(), N2.warn("The first argument to posthog.identify was a number, but it should be a string. It has been converted to a string.")), t4)
        if (["distinct_id", "distinctid"].includes(t4.toLowerCase()))
          N2.critical('The string "' + t4 + '" was set in posthog.identify which indicates an error. This ID should be unique to the user and not a hardcoded string.');
        else if (t4 !== Bt) {
          if (this.Ls("posthog.identify")) {
            var r4 = this.get_distinct_id();
            if (this.register({ $user_id: t4 }), !this.get_property("$device_id")) {
              var s4 = r4;
              this.register_once({ $had_persisted_distinct_id: true, $device_id: s4 }, "");
            }
            t4 !== r4 && t4 !== this.get_property(ot) && (this.unregister(ot), this.register({ distinct_id: t4 }));
            var n4 = "anonymous" === (this.persistence.get_property(At) || "anonymous");
            t4 !== r4 && n4 ? (this.persistence.set_property(At, "identified"), this.setPersonPropertiesForFlags(B3({}, e6 || {}, i5 || {}), false), this.capture("$identify", { distinct_id: t4, $anon_distinct_id: r4 }, { $set: i5 || {}, $set_once: e6 || {} }), this.Ss = zs(t4, i5, e6), this.featureFlags.setAnonymousDistinctId(r4)) : (i5 || e6) && this.setPersonProperties(i5, e6), t4 !== r4 && (this.reloadFeatureFlags(), this.unregister(Ot));
          }
        } else
          N2.critical('The string "' + Bt + '" was set in posthog.identify which indicates an error. This ID is only used as a sentinel value.');
      else
        N2.error("Unique user id has not been set in posthog.identify");
    }
    setPersonProperties(t4, i5) {
      if ((t4 || i5) && this.Ls("posthog.setPersonProperties")) {
        var e6 = zs(this.get_distinct_id(), t4, i5);
        this.Ss !== e6 ? (this.setPersonPropertiesForFlags(B3({}, i5 || {}, t4 || {})), this.capture("$set", { $set: t4 || {}, $set_once: i5 || {} }), this.Ss = e6) : N2.info("A duplicate setPersonProperties call was made with the same properties. It has been ignored.");
      }
    }
    group(t4, i5, e6) {
      if (t4 && i5) {
        if (this.Ls("posthog.group")) {
          var r4 = this.getGroups();
          r4[t4] !== i5 && this.resetGroupPropertiesForFlags(t4), this.register({ $groups: B3({}, r4, { [t4]: i5 }) }), e6 && (this.capture("$groupidentify", { $group_type: t4, $group_key: i5, $group_set: e6 }), this.setGroupPropertiesForFlags({ [t4]: e6 })), r4[t4] === i5 || e6 || this.reloadFeatureFlags();
        }
      } else
        N2.error("posthog.group requires a group type and group key");
    }
    resetGroups() {
      this.register({ $groups: {} }), this.resetGroupPropertiesForFlags(), this.reloadFeatureFlags();
    }
    setPersonPropertiesForFlags(t4, i5) {
      void 0 === i5 && (i5 = true), this.featureFlags.setPersonPropertiesForFlags(t4, i5);
    }
    resetPersonPropertiesForFlags() {
      this.featureFlags.resetPersonPropertiesForFlags();
    }
    setGroupPropertiesForFlags(t4, i5) {
      void 0 === i5 && (i5 = true), this.Ls("posthog.setGroupPropertiesForFlags") && this.featureFlags.setGroupPropertiesForFlags(t4, i5);
    }
    resetGroupPropertiesForFlags(t4) {
      this.featureFlags.resetGroupPropertiesForFlags(t4);
    }
    reset(t4) {
      var i5, e6, r4, s4;
      if (N2.info("reset"), !this.__loaded)
        return N2.uninitializedWarning("posthog.reset");
      var n4 = this.get_property("$device_id");
      if (this.consent.reset(), null == (i5 = this.persistence) || i5.clear(), null == (e6 = this.sessionPersistence) || e6.clear(), this.surveys.reset(), this.featureFlags.reset(), null == (r4 = this.persistence) || r4.set_property(At, "anonymous"), null == (s4 = this.sessionManager) || s4.resetSessionId(), this.Ss = null, this.config.__preview_experimental_cookieless_mode)
        this.register_once({ distinct_id: Bt, $device_id: null }, "");
      else {
        var o5 = this.config.get_device_id(ji());
        this.register_once({ distinct_id: o5, $device_id: t4 ? o5 : n4 }, "");
      }
      this.register({ $last_posthog_reset: (/* @__PURE__ */ new Date()).toISOString() }, 1);
    }
    get_distinct_id() {
      return this.get_property("distinct_id");
    }
    getGroups() {
      return this.get_property("$groups") || {};
    }
    get_session_id() {
      var t4, i5;
      return null !== (t4 = null == (i5 = this.sessionManager) ? void 0 : i5.checkAndGetSessionAndWindowId(true).sessionId) && void 0 !== t4 ? t4 : "";
    }
    get_session_replay_url(t4) {
      if (!this.sessionManager)
        return "";
      var { sessionId: i5, sessionStartTimestamp: e6 } = this.sessionManager.checkAndGetSessionAndWindowId(true), r4 = this.requestRouter.endpointFor("ui", "/project/" + this.config.token + "/replay/" + i5);
      if (null != t4 && t4.withTimestamp && e6) {
        var s4, n4 = null !== (s4 = t4.timestampLookBack) && void 0 !== s4 ? s4 : 10;
        if (!e6)
          return r4;
        r4 += "?t=" + Math.max(Math.floor(((/* @__PURE__ */ new Date()).getTime() - e6) / 1e3) - n4, 0);
      }
      return r4;
    }
    alias(t4, i5) {
      return t4 === this.get_property(nt) ? (N2.critical("Attempting to create alias for existing People user - aborting."), -2) : this.Ls("posthog.alias") ? (R(i5) && (i5 = this.get_distinct_id()), t4 !== i5 ? (this.js(ot, t4), this.capture("$create_alias", { alias: t4, distinct_id: i5 })) : (N2.warn("alias matches current distinct_id - skipping api call."), this.identify(t4), -1)) : void 0;
    }
    set_config(t4) {
      var i5, e6, r4, s4, n4, o5 = B3({}, this.config);
      I2(t4) && (V2(this.config, ua(t4)), null == (i5 = this.persistence) || i5.update_config(this.config, o5), this.sessionPersistence = "sessionStorage" === this.config.persistence || "memory" === this.config.persistence ? this.persistence : new po(B3({}, this.config, { persistence: "sessionStorage" })), Wi.O() && "true" === Wi.D("ph_debug") && (this.config.debug = true), this.config.debug && (c3.DEBUG = true, N2.info("set_config", { config: t4, oldConfig: o5, newConfig: B3({}, this.config) })), null == (e6 = this.sessionRecording) || e6.startIfEnabledOrStop(), null == (r4 = this.autocapture) || r4.startIfEnabled(), null == (s4 = this.heatmaps) || s4.startIfEnabled(), this.surveys.loadIfEnabled(), this.Ps(), null == (n4 = this.externalIntegrations) || n4.startIfEnabledOrStop());
    }
    startSessionRecording(t4) {
      var i5 = true === t4, e6 = { sampling: i5 || !(null == t4 || !t4.sampling), linked_flag: i5 || !(null == t4 || !t4.linked_flag), url_trigger: i5 || !(null == t4 || !t4.url_trigger), event_trigger: i5 || !(null == t4 || !t4.event_trigger) };
      if (Object.values(e6).some(Boolean)) {
        var r4, s4, n4, o5, a5;
        if (null == (r4 = this.sessionManager) || r4.checkAndGetSessionAndWindowId(), e6.sampling)
          null == (s4 = this.sessionRecording) || s4.overrideSampling();
        if (e6.linked_flag)
          null == (n4 = this.sessionRecording) || n4.overrideLinkedFlag();
        if (e6.url_trigger)
          null == (o5 = this.sessionRecording) || o5.overrideTrigger("url");
        if (e6.event_trigger)
          null == (a5 = this.sessionRecording) || a5.overrideTrigger("event");
      }
      this.set_config({ disable_session_recording: false });
    }
    stopSessionRecording() {
      this.set_config({ disable_session_recording: true });
    }
    sessionRecordingStarted() {
      var t4;
      return !(null == (t4 = this.sessionRecording) || !t4.started);
    }
    captureException(t4, i5) {
      var e6 = new Error("PostHog syntheticException");
      this.exceptions.sendExceptionEvent(B3({}, Le(((t5) => t5 instanceof Error)(t4) ? { error: t4, event: t4.message } : { event: t4 }, { syntheticException: e6 }), i5));
    }
    loadToolbar(t4) {
      return this.toolbar.loadToolbar(t4);
    }
    get_property(t4) {
      var i5;
      return null == (i5 = this.persistence) ? void 0 : i5.props[t4];
    }
    getSessionProperty(t4) {
      var i5;
      return null == (i5 = this.sessionPersistence) ? void 0 : i5.props[t4];
    }
    toString() {
      var t4, i5 = null !== (t4 = this.config.name) && void 0 !== t4 ? t4 : oa;
      return i5 !== oa && (i5 = oa + "." + i5), i5;
    }
    _isIdentified() {
      var t4, i5;
      return "identified" === (null == (t4 = this.persistence) ? void 0 : t4.get_property(At)) || "identified" === (null == (i5 = this.sessionPersistence) ? void 0 : i5.get_property(At));
    }
    Ds() {
      var t4, i5;
      return !("never" === this.config.person_profiles || "identified_only" === this.config.person_profiles && !this._isIdentified() && P2(this.getGroups()) && (null == (t4 = this.persistence) || null == (t4 = t4.props) || !t4[ot]) && (null == (i5 = this.persistence) || null == (i5 = i5.props) || !i5[Ut]));
    }
    Fs() {
      return true === this.config.capture_pageleave || "if_capture_pageview" === this.config.capture_pageleave && (true === this.config.capture_pageview || "history_change" === this.config.capture_pageview);
    }
    createPersonProfile() {
      this.Ds() || this.Ls("posthog.createPersonProfile") && this.setPersonProperties({}, {});
    }
    Ls(t4) {
      return "never" === this.config.person_profiles ? (N2.error(t4 + ' was called, but process_person is set to "never". This call will be ignored.'), false) : (this.js(Ut, true), true);
    }
    Ps() {
      var t4, i5, e6, r4, s4 = this.consent.isOptedOut(), n4 = this.config.opt_out_persistence_by_default, o5 = this.config.disable_persistence || s4 && !!n4;
      (null == (t4 = this.persistence) ? void 0 : t4.Fe) !== o5 && (null == (e6 = this.persistence) || e6.set_disabled(o5));
      (null == (i5 = this.sessionPersistence) ? void 0 : i5.Fe) !== o5 && (null == (r4 = this.sessionPersistence) || r4.set_disabled(o5));
    }
    opt_in_capturing(t4) {
      var i5;
      (this.consent.optInOut(true), this.Ps(), R(null == t4 ? void 0 : t4.captureEventName) || null != t4 && t4.captureEventName) && this.capture(null !== (i5 = null == t4 ? void 0 : t4.captureEventName) && void 0 !== i5 ? i5 : "$opt_in", null == t4 ? void 0 : t4.captureProperties, { send_instantly: true });
      this.config.capture_pageview && this.Cs();
    }
    opt_out_capturing() {
      this.consent.optInOut(false), this.Ps();
    }
    has_opted_in_capturing() {
      return this.consent.isOptedIn();
    }
    has_opted_out_capturing() {
      return this.consent.isOptedOut();
    }
    clear_opt_in_out_capturing() {
      this.consent.reset(), this.Ps();
    }
    _is_bot() {
      return n3 ? Ko(n3, this.config.custom_blocked_useragents) : void 0;
    }
    Cs() {
      o4 && ("visible" === o4.visibilityState ? this.bs || (this.bs = true, this.capture("$pageview", { title: o4.title }, { send_instantly: true }), this.ys && (o4.removeEventListener("visibilitychange", this.ys), this.ys = null)) : this.ys || (this.ys = this.Cs.bind(this), st(o4, "visibilitychange", this.ys)));
    }
    debug(i5) {
      false === i5 ? (null == t3 || t3.console.log("You've disabled debug mode."), localStorage && localStorage.removeItem("ph_debug"), this.set_config({ debug: false })) : (null == t3 || t3.console.log("You're now in debug mode. All calls to PostHog will be logged in your console.\nYou can disable this with `posthog.debug(false)`."), localStorage && localStorage.setItem("ph_debug", "true"), this.set_config({ debug: true }));
    }
    I() {
      var t4, i5, e6, r4, s4, n4, o5, a5 = this.$s || {};
      return "advanced_disable_flags" in a5 ? !!a5.advanced_disable_flags : false !== this.config.advanced_disable_flags ? !!this.config.advanced_disable_flags : true === this.config.advanced_disable_decide ? (N2.warn("Config field 'advanced_disable_decide' is deprecated. Please use 'advanced_disable_flags' instead. The old field will be removed in a future major version."), true) : (e6 = "advanced_disable_decide", r4 = false, s4 = N2, n4 = (i5 = "advanced_disable_flags") in (t4 = a5) && !R(t4[i5]), o5 = e6 in t4 && !R(t4[e6]), n4 ? t4[i5] : o5 ? (s4 && s4.warn("Config field '" + e6 + "' is deprecated. Please use '" + i5 + "' instead. The old field will be removed in a future major version."), t4[e6]) : r4);
    }
    As(t4) {
      if (F2(this.config.before_send))
        return t4;
      var i5 = x4(this.config.before_send) ? this.config.before_send : [this.config.before_send], e6 = t4;
      for (var r4 of i5) {
        if (e6 = r4(e6), F2(e6)) {
          var s4 = "Event '" + t4.event + "' was rejected in beforeSend function";
          return L2(t4.event) ? N2.warn(s4 + ". This can cause unexpected behavior.") : N2.info(s4), null;
        }
        e6.properties && !P2(e6.properties) || N2.warn("Event '" + t4.event + "' has no properties after beforeSend function, this is likely an error.");
      }
      return e6;
    }
    getPageViewId() {
      var t4;
      return null == (t4 = this.pageViewManager.ce) ? void 0 : t4.pageViewId;
    }
    captureTraceFeedback(t4, i5) {
      this.capture("$ai_feedback", { $ai_trace_id: String(t4), $ai_feedback_text: i5 });
    }
    captureTraceMetric(t4, i5, e6) {
      this.capture("$ai_metric", { $ai_trace_id: String(t4), $ai_metric_name: i5, $ai_metric_value: String(e6) });
    }
  };
  !function(t4, i5) {
    for (var e6 = 0; e6 < i5.length; e6++)
      t4.prototype[i5[e6]] = Q(t4.prototype[i5[e6]]);
  }(da, ["identify"]);
  var va;
  var ca = (va = sa[oa] = new da(), function() {
    function i5() {
      i5.done || (i5.done = true, aa = false, J2(sa, function(t4) {
        t4._dom_loaded();
      }));
    }
    null != o4 && o4.addEventListener ? "complete" === o4.readyState ? i5() : st(o4, "DOMContentLoaded", i5, { capture: false }) : t3 && N2.error("Browser doesn't support `document.addEventListener` so PostHog couldn't be initialized");
  }(), va);

  // ../umalator/telemetry.ts
  function initTelemetry() {
    if (false) {
      posthog.init("phc_rmAEubU5JeFpYm6HSMhR8cpe6nbY6eR94jwOpQt0kzt", {
        api_host: "https://us.i.posthog.com",
        person_profiles: "identified_only"
        // or 'always' to create profiles for anonymous users as well
      });
    }
  }
  function postEvent(event, obj) {
    if (false) {
      posthog.capture(event, obj);
    }
  }

  // ../umalator/app.tsx
  function skillmeta4(id3) {
    return skill_meta_default[id3.split("-")[0]];
  }
  var DEFAULT_COURSE_ID = true ? 10606 : 10906;
  var DEFAULT_SAMPLES = 500;
  function id2(x5) {
    return x5;
  }
  function binSearch(a5, x5) {
    let lo2 = 0, hi2 = a5.length - 1;
    if (x5 < a5[0])
      return 0;
    if (x5 > a5[hi2])
      return hi2 - 1;
    while (lo2 <= hi2) {
      const mid = Math.floor((lo2 + hi2) / 2);
      if (x5 < a5[mid]) {
        hi2 = mid - 1;
      } else if (x5 > a5[mid]) {
        lo2 = mid + 1;
      } else {
        return mid;
      }
    }
    return Math.abs(a5[lo2] - x5) < Math.abs(a5[hi2] - x5) ? lo2 : hi2;
  }
  function TimeOfDaySelect(props) {
    function click(e6) {
      e6.stopPropagation();
      if (!("timeofday" in e6.target.dataset))
        return;
      props.set(+e6.target.dataset.timeofday);
    }
    return /* @__PURE__ */ _("div", { class: "timeofdaySelect", onClick: click }, Array(3).fill(0).map((_3, i5) => /* @__PURE__ */ _(
      "img",
      {
        src: `/uma-tools/icons/utx_ico_timezone_0${i5}.png`,
        title: STRINGS_en.skilldetails.time[i5 + 2],
        class: i5 + 2 == props.value ? "selected" : "",
        "data-timeofday": i5 + 2
      }
    )));
  }
  function GroundSelect(props) {
    if (true) {
      return /* @__PURE__ */ _("select", { class: "groundSelect", value: props.value, onInput: (e6) => props.set(+e6.currentTarget.value) }, /* @__PURE__ */ _("option", { value: "1" }, "Firm"), /* @__PURE__ */ _("option", { value: "2" }, "Good"), /* @__PURE__ */ _("option", { value: "3" }, "Soft"), /* @__PURE__ */ _("option", { value: "4" }, "Heavy"));
    }
    return /* @__PURE__ */ _("select", { class: "groundSelect", value: props.value, onInput: (e6) => props.set(+e6.currentTarget.value) }, /* @__PURE__ */ _("option", { value: "1" }, "\u826F"), /* @__PURE__ */ _("option", { value: "2" }, "\u7A0D\u91CD"), /* @__PURE__ */ _("option", { value: "3" }, "\u91CD"), /* @__PURE__ */ _("option", { value: "4" }, "\u4E0D\u826F"));
  }
  function WeatherSelect(props) {
    function click(e6) {
      e6.stopPropagation();
      if (!("weather" in e6.target.dataset))
        return;
      props.set(+e6.target.dataset.weather);
    }
    return /* @__PURE__ */ _("div", { class: "weatherSelect", onClick: click }, Array(4).fill(0).map((_3, i5) => /* @__PURE__ */ _(
      "img",
      {
        src: `/uma-tools/icons/utx_ico_weather_0${i5}.png`,
        title: STRINGS_en.skilldetails.weather[i5 + 1],
        class: i5 + 1 == props.value ? "selected" : "",
        "data-weather": i5 + 1
      }
    )));
  }
  function SeasonSelect(props) {
    function click(e6) {
      e6.stopPropagation();
      if (!("season" in e6.target.dataset))
        return;
      props.set(+e6.target.dataset.season);
    }
    return /* @__PURE__ */ _("div", { class: "seasonSelect", onClick: click }, Array(
      4 + 0
      /* global doenst have late spring for some reason */
    ).fill(0).map((_3, i5) => /* @__PURE__ */ _(
      "img",
      {
        src: `/uma-tools/icons${true ? "/global" : ""}/utx_txt_season_0${i5}.png`,
        title: STRINGS_en.skilldetails.season[i5 + 1],
        class: i5 + 1 == props.value ? "selected" : "",
        "data-season": i5 + 1
      }
    )));
  }
  function Histogram(props) {
    const { data, width, height } = props;
    const axes = A2(null);
    const xH = 20;
    const yW = 40;
    const x5 = linear2().domain(
      data[0] == 0 && data[data.length - 1] == 0 ? [-1, 1] : [Math.min(0, Math.floor(data[0])), Math.ceil(data[data.length - 1])]
    ).range([yW, width - yW]);
    const bucketize = bin().value(id2).domain(x5.domain()).thresholds(x5.ticks(30));
    const buckets = bucketize(data);
    const y5 = linear2().domain([0, max2(buckets, (b2) => b2.length)]).range([height - xH, xH]);
    y2(function() {
      const g4 = select_default2(axes.current);
      g4.selectAll("*").remove();
      g4.append("g").attr("transform", `translate(0,${height - xH})`).call(axisBottom(x5));
      g4.append("g").attr("transform", `translate(${yW},0)`).call(axisLeft(y5));
    }, [data, width, height]);
    const rects = buckets.map(
      (b2, i5) => /* @__PURE__ */ _("rect", { key: i5, fill: "#2a77c5", stroke: "black", x: x5(b2.x0), y: y5(b2.length), width: x5(b2.x1) - x5(b2.x0), height: height - xH - y5(b2.length) })
    );
    return /* @__PURE__ */ _("svg", { id: "histogram", width, height }, /* @__PURE__ */ _("g", null, rects), /* @__PURE__ */ _("g", { ref: axes }));
  }
  function BasinnChartPopover(props) {
    const popover = A2(null);
    y2(function() {
      if (popover.current == null)
        return;
      const anchor = document.querySelector(`.basinnChart tr[data-skillid="${props.skillid}"] img`);
      computePosition2(anchor, popover.current, {
        placement: "bottom-start",
        middleware: [flip3()]
      }).then(({ x: x5, y: y5 }) => {
        popover.current.style.transform = `translate(${x5}px,${y5}px)`;
        popover.current.style.visibility = "visible";
      });
      popover.current.focus();
    }, [popover.current, props.skillid]);
    return /* @__PURE__ */ _("div", { class: "basinnChartPopover", tabindex: "1000", style: "visibility:hidden", ref: popover }, /* @__PURE__ */ _(ExpandedSkillDetails, { id: props.skillid, distanceFactor: props.courseDistance, dismissable: false }), /* @__PURE__ */ _(Histogram, { width: 500, height: 333, data: props.results }));
  }
  function VelocityLines(props) {
    const axes = A2(null);
    const data = props.data;
    const x5 = linear2().domain([0, props.courseDistance]).range([0, props.width]);
    const y5 = data && linear2().domain([0, max2(data.v, (v4) => max2(v4))]).range([props.height, 0]);
    const hpY = data && linear2().domain([0, max2(data.hp, (hp) => max2(hp))]).range([props.height, 0]);
    y2(function() {
      if (axes.current == null)
        return;
      const g4 = select_default2(axes.current);
      g4.selectAll("*").remove();
      g4.append("g").attr("transform", `translate(${props.xOffset},${props.height + 5})`).call(axisBottom(x5));
      if (data) {
        g4.append("g").attr("transform", `translate(${props.xOffset},4)`).call(axisLeft(y5));
      }
    }, [props.data, props.courseDistance, props.width, props.height]);
    const colors = ["#2a77c5", "#c52a2a"];
    const hpColors = ["#688aab", "#ab6868"];
    return /* @__PURE__ */ _(k, null, /* @__PURE__ */ _("g", { transform: `translate(${props.xOffset},5)` }, data && data.v.map(
      (v4, i5) => /* @__PURE__ */ _("path", { fill: "none", stroke: colors[i5], "stroke-width": "2.5", d: line_default().x((j4) => x5(data.p[i5][j4])).y((j4) => y5(v4[j4]))(data.p[i5].map((_3, j4) => j4)) })
    ).concat(props.showHp ? data.hp.map(
      (hp, i5) => /* @__PURE__ */ _("path", { fill: "none", stroke: hpColors[i5], "stroke-width": "2.5", d: line_default().x((j4) => x5(data.p[i5][j4])).y((j4) => hpY(hp[j4]))(data.p[i5].map((_3, j4) => j4)) })
    ) : [])), /* @__PURE__ */ _("g", { ref: axes }));
  }
  var NO_SHOW = Object.freeze([
    "10011",
    "10012",
    "10016",
    "10021",
    "10022",
    "10026",
    "10031",
    "10032",
    "10036",
    "10041",
    "10042",
    "10046",
    "10051",
    "10052",
    "10056",
    "10061",
    "10062",
    "10066",
    "40011",
    "20061",
    "20062",
    "20066"
  ]);
  var RaceParams = class extends Record({
    mood: 2,
    ground: 1 /* Good */,
    weather: 1 /* Sunny */,
    season: 1 /* Spring */,
    time: 2 /* Midday */,
    grade: 100 /* G1 */
  }) {
  };
  var ORDER_RANGE_FOR_STRATEGY = Object.freeze({
    "Nige": [1, 1],
    "Senkou": [2, 4],
    "Sasi": [5, 9],
    "Oikomi": [5, 9],
    "Oonige": [1, 1]
  });
  function racedefToParams({ mood, ground, weather, season, time, grade }, includeOrder) {
    return {
      mood,
      groundCondition: ground,
      weather,
      season,
      time,
      grade,
      popularity: 1,
      skillId: "",
      orderRange: includeOrder != null ? ORDER_RANGE_FOR_STRATEGY[includeOrder] : null,
      numUmas: 9
    };
  }
  async function serialize(courseId, nsamples, usePosKeep, racedef, uma1, uma2) {
    const json = JSON.stringify({
      courseId,
      nsamples,
      usePosKeep,
      racedef: racedef.toJS(),
      uma1: uma1.toJS(),
      uma2: uma2.toJS()
    });
    const enc = new TextEncoder();
    const stringStream = new ReadableStream({
      start(controller) {
        controller.enqueue(enc.encode(json));
        controller.close();
      }
    });
    const zipped = stringStream.pipeThrough(new CompressionStream("gzip"));
    const reader = zipped.getReader();
    let buf = new Uint8Array();
    let result;
    while (result = await reader.read()) {
      if (result.done) {
        return encodeURIComponent(btoa(String.fromCharCode(...buf)));
      } else {
        buf = new Uint8Array([...buf, ...result.value]);
      }
    }
  }
  async function deserialize(hash3) {
    const zipped = atob(decodeURIComponent(hash3));
    const buf = new Uint8Array(zipped.split("").map((c4) => c4.charCodeAt(0)));
    const stringStream = new ReadableStream({
      start(controller) {
        controller.enqueue(buf);
        controller.close();
      }
    });
    const unzipped = stringStream.pipeThrough(new DecompressionStream("gzip"));
    const reader = unzipped.getReader();
    const decoder = new TextDecoder();
    let json = "";
    let result;
    while (result = await reader.read()) {
      if (result.done) {
        try {
          const o5 = JSON.parse(json);
          return {
            courseId: o5.courseId,
            nsamples: o5.nsamples,
            usePosKeep: o5.usePosKeep,
            racedef: new RaceParams(o5.racedef),
            uma1: new HorseState(o5.uma1).set("skills", SkillSet(o5.uma1.skills)),
            uma2: new HorseState(o5.uma2).set("skills", SkillSet(o5.uma2.skills))
          };
        } catch (_3) {
          return {
            courseId: DEFAULT_COURSE_ID,
            nsamples: DEFAULT_SAMPLES,
            usePosKeep: true,
            racedef: new RaceParams(),
            uma1: new HorseState(),
            uma2: new HorseState()
          };
        }
      } else {
        json += decoder.decode(result.value);
      }
    }
  }
  var EMPTY_RESULTS_STATE = { courseId: DEFAULT_COURSE_ID, results: [], runData: null, chartData: null, displaying: "" };
  function updateResultsState(state, o5) {
    if (typeof o5 == "number") {
      return {
        courseId: o5,
        results: [],
        runData: null,
        chartData: null,
        displaying: ""
      };
    } else if (typeof o5 == "string") {
      postEvent("setChartData", { display: o5 });
      return {
        courseId: state.courseId,
        results: state.results,
        runData: state.runData,
        chartData: state.runData[o5],
        displaying: o5
      };
    } else {
      return {
        courseId: state.courseId,
        results: o5.results,
        runData: o5.runData,
        chartData: o5.runData[state.displaying || "meanrun"],
        displaying: state.displaying || "meanrun"
      };
    }
  }
  var presets = [
    { type: 1 /* LOH */, date: "2025-08", courseId: 10105, season: 2 /* Summer */, Time: 2 /* Midday */ },
    { type: 0 /* CM */, date: "2025-07-25", courseId: 10906, ground: 2 /* Yielding */, weather: 2 /* Cloudy */, season: 2 /* Summer */, time: 2 /* Midday */ },
    { type: 0 /* CM */, date: "2025-06-21", courseId: 10606, ground: 1 /* Good */, weather: 1 /* Sunny */, season: 1 /* Spring */, time: 2 /* Midday */ }
  ].map((def) => ({
    type: def.type,
    date: new Date(def.date),
    courseId: def.courseId,
    racedef: new RaceParams({
      mood: 2,
      ground: def.type == 0 /* CM */ ? def.ground : 1 /* Good */,
      weather: def.type == 0 /* CM */ ? def.weather : 1 /* Sunny */,
      season: def.season,
      time: def.time,
      grade: 100 /* G1 */
    })
  })).sort((a5, b2) => +b2.date - +a5.date);
  function RacePresets(props) {
    const id3 = g2();
    if (true) {
      return /* @__PURE__ */ _(k, null);
    }
    return /* @__PURE__ */ _(k, null, /* @__PURE__ */ _("label", { for: id3 }, "Preset:"), /* @__PURE__ */ _("select", { id: id3, onChange: (e6) => {
      const i5 = +e6.currentTarget.value;
      i5 > -1 && props.set(presets[i5].courseId, presets[i5].racedef);
    } }, /* @__PURE__ */ _("option", { value: "-1" }), presets.map((p5, i5) => /* @__PURE__ */ _("option", { value: i5 }, p5.date.getFullYear() + "-" + (100 + p5.date.getUTCMonth() + 1).toString().slice(-2) + (p5.type == 0 /* CM */ ? " CM" : " LOH")))));
  }
  var baseSkillsToTest = Object.keys(skill_data_default).filter((id3) => skill_data_default[id3].rarity < 3);
  var DEFAULT_UI_STATE = { mode: 0 /* Compare */, currentIdx: 0, expanded: false };
  function nextUiState(state, msg) {
    switch (msg) {
      case 0 /* SetModeCompare */:
        return { ...state, mode: 0 /* Compare */ };
      case 1 /* SetModeChart */:
        return { ...state, mode: 1 /* Chart */, currentIdx: 0, expanded: false };
      case 2 /* SetCurrentIdx0 */:
        return { ...state, currentIdx: 0 };
      case 3 /* SetCurrentIdx1 */:
        return { ...state, currentIdx: 1 };
      case 4 /* ToggleExpand */:
        return { ...state, expanded: !state.expanded };
    }
  }
  function App(props) {
    const [skillsOpen, setSkillsOpen] = d2(false);
    const [racedef, setRaceDef] = d2(() => new RaceParams());
    const [nsamples, setSamples] = d2(DEFAULT_SAMPLES);
    const [usePosKeep, togglePosKeep] = h2((b2, _3) => !b2, true);
    const [showHp, toggleShowHp] = h2((b2, _3) => !b2, false);
    const [{ courseId, results, runData, chartData, displaying }, setSimState] = h2(updateResultsState, EMPTY_RESULTS_STATE);
    const setCourseId = setSimState;
    const setResults = setSimState;
    const setChartData = setSimState;
    const [tableData, updateTableData] = h2((data, newData) => {
      const merged = /* @__PURE__ */ new Map();
      if (newData == "reset") {
        return merged;
      }
      data.forEach((v4, k4) => merged.set(k4, v4));
      newData.forEach((v4, k4) => merged.set(k4, v4));
      return merged;
    }, /* @__PURE__ */ new Map());
    const [popoverSkill, setPopoverSkill] = d2("");
    function racesetter(prop) {
      return (value) => setRaceDef(racedef.set(prop, value));
    }
    const course = T2(() => CourseHelpers.getCourse(courseId), [courseId]);
    const [uma1, setUma1] = d2(() => new HorseState());
    const [uma2, setUma2] = d2(() => new HorseState());
    const [{ mode, currentIdx, expanded }, updateUiState] = h2(nextUiState, DEFAULT_UI_STATE);
    function toggleExpand(e6) {
      e6.stopPropagation();
      updateUiState(4 /* ToggleExpand */);
    }
    const [worker1, worker2] = [1, 2].map((_3) => T2(() => {
      const w4 = new Worker("./simulator.worker.js");
      w4.addEventListener("message", function(e6) {
        const { type: type2, results: results2 } = e6.data;
        switch (type2) {
          case "compare":
            setResults(results2);
            break;
          case "chart":
            updateTableData(e6.data);
            break;
        }
      });
      return w4;
    }, []));
    function loadState() {
      if (window.location.hash) {
        deserialize(window.location.hash.slice(1)).then((o5) => {
          setCourseId(o5.courseId);
          setSamples(o5.nsamples);
          if (o5.usePosKeep != usePosKeep)
            togglePosKeep(0);
          setRaceDef(o5.racedef);
          setUma1(o5.uma1);
          setUma2(o5.uma2);
        });
      }
    }
    y2(function() {
      loadState();
      window.addEventListener("hashchange", loadState);
    }, []);
    function copyStateUrl(e6) {
      e6.preventDefault();
      serialize(courseId, nsamples, usePosKeep, racedef, uma1, uma2).then((hash3) => {
        const url = window.location.protocol + "//" + window.location.host + window.location.pathname;
        window.navigator.clipboard.writeText(url + "#" + hash3);
      });
    }
    function copyUmaToRight() {
      setUma2(uma1);
    }
    function copyUmaToLeft() {
      setUma1(uma2);
    }
    const strings = { skillnames: {}, tracknames: TRACKNAMES_en };
    const langid = +(props.lang == "en");
    Object.keys(skillnames_default).forEach((id3) => strings.skillnames[id3] = skillnames_default[id3][langid]);
    function doComparison() {
      postEvent("doComparison", {});
      worker1.postMessage({
        msg: "compare",
        data: {
          nsamples,
          course,
          racedef: racedefToParams(racedef),
          uma1: uma1.toJS(),
          uma2: uma2.toJS(),
          options: { usePosKeep }
        }
      });
    }
    function doBasinnChart() {
      postEvent("doBasinnChart", {});
      const params = racedefToParams(racedef, uma1.strategy);
      const skills = getActivateableSkills(baseSkillsToTest.filter((s4) => !uma1.skills.has(s4) && (s4[0] != "9" || !uma1.skills.has("1" + s4.slice(1)))), uma1, course, params);
      const filler = /* @__PURE__ */ new Map();
      skills.forEach((id3) => filler.set(id3, getNullRow(id3)));
      const uma = uma1.toJS();
      const skills1 = skills.slice(0, Math.floor(skills.length / 2));
      const skills2 = skills.slice(Math.floor(skills.length / 2));
      updateTableData("reset");
      updateTableData(filler);
      worker1.postMessage({ msg: "chart", data: { skills: skills1, course, racedef: params, uma, options: { usePosKeep } } });
      worker2.postMessage({ msg: "chart", data: { skills: skills2, course, racedef: params, uma, options: { usePosKeep } } });
    }
    function basinnChartSelection(skillId) {
      const r4 = tableData.get(skillId);
      if (r4.runData != null)
        setResults(r4);
    }
    function addSkillFromTable(skillId) {
      postEvent("addSkillFromTable", { skillId });
      setUma1(uma1.set("skills", uma1.skills.add(skillId)));
    }
    function showPopover(skillId) {
      postEvent("showPopover", { skillId });
      setPopoverSkill(skillId);
    }
    y2(function() {
      document.body.addEventListener("click", function() {
        setPopoverSkill("");
      });
    }, []);
    function rtMouseMove(pos) {
      if (chartData == null)
        return;
      document.getElementById("rtMouseOverBox").style.display = "block";
      const x5 = pos * course.distance;
      const i0 = binSearch(chartData.p[0], x5), i1 = binSearch(chartData.p[1], x5);
      document.getElementById("rtV1").textContent = `${chartData.v[0][i0].toFixed(2)} m/s  t=${chartData.t[0][i0].toFixed(2)} s  (${chartData.hp[0][i0].toFixed(0)} hp remaining)`;
      document.getElementById("rtV2").textContent = `${chartData.v[1][i1].toFixed(2)} m/s  t=${chartData.t[1][i1].toFixed(2)} s  (${chartData.hp[1][i1].toFixed(0)} hp remaining)`;
    }
    function rtMouseLeave() {
      document.getElementById("rtMouseOverBox").style.display = "none";
    }
    const mid = Math.floor(results.length / 2);
    const median = results.length % 2 == 0 ? (results[mid - 1] + results[mid]) / 2 : results[mid];
    const mean = results.reduce((a5, b2) => a5 + b2, 0) / results.length;
    const colors = [
      { stroke: "rgb(42, 119, 197)", fill: "rgba(42, 119, 197, 0.7)" },
      { stroke: "rgb(197, 42, 42)", fill: "rgba(197, 42, 42, 0.7)" }
    ];
    const skillActivations = chartData == null ? [] : chartData.sk.flatMap((a5, i5) => {
      return a5.keys().flatMap((id3) => {
        if (NO_SHOW.indexOf(skillmeta4(id3).iconId) > -1)
          return [];
        else
          return a5.get(id3).map((ar2) => ({
            type: 2 /* Textbox */,
            color: colors[i5],
            text: skillnames_default[id3][0],
            regions: [{ start: ar2[0], end: ar2[1] }]
          }));
      }).toArray();
    });
    const umaTabs = /* @__PURE__ */ _(k, null, /* @__PURE__ */ _("div", { class: `umaTab ${currentIdx == 0 ? "selected" : ""}`, onClick: () => updateUiState(2 /* SetCurrentIdx0 */) }, "Umamusume 1"), mode == 0 /* Compare */ && /* @__PURE__ */ _("div", { class: `umaTab ${currentIdx == 1 ? "selected" : ""}`, onClick: () => updateUiState(3 /* SetCurrentIdx1 */) }, "Umamusume 2", /* @__PURE__ */ _("div", { id: "expandBtn", title: "Expand panel", onClick: toggleExpand }, "\u27E9")));
    return /* @__PURE__ */ _(Language.Provider, { value: props.lang }, /* @__PURE__ */ _(IntlProvider, { definition: strings }, /* @__PURE__ */ _("div", { id: "topPane", class: chartData ? "hasResults" : "" }, /* @__PURE__ */ _(RaceTrack, { courseid: courseId, width: 960, height: 240, xOffset: 20, yOffset: 15, yExtra: 20, mouseMove: rtMouseMove, mouseLeave: rtMouseLeave, regions: skillActivations }, /* @__PURE__ */ _(VelocityLines, { data: chartData, courseDistance: course.distance, width: 960, height: 250, xOffset: 20, showHp }), /* @__PURE__ */ _("g", { id: "rtMouseOverBox", style: "display:none" }, /* @__PURE__ */ _("text", { id: "rtV1", x: "25", y: "10", fill: "#2a77c5", "font-size": "10px" }), /* @__PURE__ */ _("text", { id: "rtV2", x: "25", y: "20", fill: "#c52a2a", "font-size": "10px" }))), /* @__PURE__ */ _("div", { id: "runPane" }, /* @__PURE__ */ _("fieldset", null, /* @__PURE__ */ _("legend", null, "Mode:"), /* @__PURE__ */ _("input", { type: "radio", id: "mode-compare", name: "mode", value: "compare", checked: mode == 0 /* Compare */, onClick: () => updateUiState(0 /* SetModeCompare */) }), /* @__PURE__ */ _("label", { for: "mode-compare" }, "Compare"), /* @__PURE__ */ _("input", { type: "radio", id: "mode-chart", name: "mode", value: "chart", checked: mode == 1 /* Chart */, onClick: () => updateUiState(1 /* SetModeChart */) }), /* @__PURE__ */ _("label", { for: "mode-chart" }, "Skill chart")), /* @__PURE__ */ _("label", { for: "nsamples" }, "Samples:"), /* @__PURE__ */ _("input", { type: "number", id: "nsamples", min: "1", max: "10000", value: nsamples, onInput: (e6) => setSamples(+e6.currentTarget.value) }), /* @__PURE__ */ _("div", null, /* @__PURE__ */ _("label", { for: "poskeep" }, "Simulate pos keep"), /* @__PURE__ */ _("input", { type: "checkbox", id: "poskeep", checked: usePosKeep, onClick: togglePosKeep })), /* @__PURE__ */ _("div", null, /* @__PURE__ */ _("label", { for: "showhp" }, "Show HP consumption"), /* @__PURE__ */ _("input", { type: "checkbox", id: "showhp", checked: showHp, onClick: toggleShowHp })), mode == 0 /* Compare */ ? /* @__PURE__ */ _("button", { id: "run", onClick: doComparison, tabindex: 1 }, "COMPARE") : /* @__PURE__ */ _("button", { id: "run", onClick: doBasinnChart, tabindex: 1 }, "RUN"), /* @__PURE__ */ _("a", { href: "#", onClick: copyStateUrl }, "Copy link"), /* @__PURE__ */ _(RacePresets, { set: (courseId2, racedef2) => {
      setCourseId(courseId2);
      setRaceDef(racedef2);
    } })), /* @__PURE__ */ _("div", { id: "buttonsRow" }, /* @__PURE__ */ _(TrackSelect, { key: courseId, courseid: courseId, setCourseid: setCourseId, tabindex: 2 }), /* @__PURE__ */ _("div", { id: "buttonsRowSpace" }), /* @__PURE__ */ _(TimeOfDaySelect, { value: racedef.time, set: racesetter("time") }), /* @__PURE__ */ _("div", null, /* @__PURE__ */ _(GroundSelect, { value: racedef.ground, set: racesetter("ground") }), /* @__PURE__ */ _(WeatherSelect, { value: racedef.weather, set: racesetter("weather") })), /* @__PURE__ */ _(SeasonSelect, { value: racedef.season, set: racesetter("season") }))), mode == 0 /* Compare */ && results.length > 0 && /* @__PURE__ */ _("div", { id: "resultsPaneWrapper" }, /* @__PURE__ */ _("div", { id: "resultsPane", class: "mode-compare" }, /* @__PURE__ */ _("table", { id: "resultsSummary" }, /* @__PURE__ */ _("tfoot", null, /* @__PURE__ */ _("tr", null, Object.entries({
      minrun: ["Minimum", "Set chart display to the run with minimum bashin difference"],
      maxrun: ["Maximum", "Set chart display to the run with maximum bashin difference"],
      meanrun: ["Mean", "Set chart display to a run representative of the mean bashin difference"],
      medianrun: ["Median", "Set chart display to a run representative of the median bashin difference"]
    }).map(
      ([k4, label]) => /* @__PURE__ */ _("th", { scope: "col", class: displaying == k4 ? "selected" : "", title: label[1], onClick: () => setChartData(k4) }, label[0])
    ))), /* @__PURE__ */ _("tbody", null, /* @__PURE__ */ _("tr", null, /* @__PURE__ */ _("td", { onClick: () => setChartData("minrun") }, results[0].toFixed(2), /* @__PURE__ */ _("span", { class: "unit-basinn" }, true ? "lengths" : "\u30D0\u8EAB")), /* @__PURE__ */ _("td", { onClick: () => setChartData("maxrun") }, results[results.length - 1].toFixed(2), /* @__PURE__ */ _("span", { class: "unit-basinn" }, true ? "lengths" : "\u30D0\u8EAB")), /* @__PURE__ */ _("td", { onClick: () => setChartData("meanrun") }, mean.toFixed(2), /* @__PURE__ */ _("span", { class: "unit-basinn" }, true ? "lengths" : "\u30D0\u8EAB")), /* @__PURE__ */ _("td", { onClick: () => setChartData("medianrun") }, median.toFixed(2), /* @__PURE__ */ _("span", { class: "unit-basinn" }, true ? "lengths" : "\u30D0\u8EAB"))))), /* @__PURE__ */ _("div", { id: "resultsHelp" }, "Negative numbers mean ", /* @__PURE__ */ _("strong", { style: "color:#2a77c5" }, "Umamusume 1"), " is faster, positive numbers mean ", /* @__PURE__ */ _("strong", { style: "color:#c52a2a" }, "Umamusume 2"), " is faster."), /* @__PURE__ */ _(Histogram, { width: 500, height: 333, data: results })), /* @__PURE__ */ _("div", { id: "infoTables" }, /* @__PURE__ */ _("table", null, /* @__PURE__ */ _("caption", { style: "color:#2a77c5" }, "Umamusume 1"), /* @__PURE__ */ _("tbody", null, /* @__PURE__ */ _("tr", null, /* @__PURE__ */ _("th", null, "Time to finish"), /* @__PURE__ */ _("td", null, chartData.t[0][chartData.t[0].length - 1].toFixed(4) + "\u202Fs")), /* @__PURE__ */ _("tr", null, /* @__PURE__ */ _("th", null, "Start delay"), /* @__PURE__ */ _("td", null, chartData.sdly[0].toFixed(4) + "\u202Fs")), /* @__PURE__ */ _("tr", null, /* @__PURE__ */ _("th", null, "Top speed"), /* @__PURE__ */ _("td", null, chartData.v[0].reduce((a5, b2) => Math.max(a5, b2), 0).toFixed(2) + "\u202Fm/s"))), chartData.sk[0].size > 0 && /* @__PURE__ */ _("tbody", null, chartData.sk[0].entries().map(([id3, ars]) => ars.flatMap((pos) => /* @__PURE__ */ _("tr", null, /* @__PURE__ */ _("th", null, skillnames_default[id3][0]), /* @__PURE__ */ _("td", null, `${pos[0].toFixed(2)}\u202Fm \u2013 ${pos[1].toFixed(2)}\u202Fm`)))).toArray())), /* @__PURE__ */ _("table", null, /* @__PURE__ */ _("caption", { style: "color:#c52a2a" }, "Umamusume 2"), /* @__PURE__ */ _("tbody", null, /* @__PURE__ */ _("tr", null, /* @__PURE__ */ _("th", null, "Time to finish"), /* @__PURE__ */ _("td", null, chartData.t[1][chartData.t[1].length - 1].toFixed(4) + "\u202Fs")), /* @__PURE__ */ _("tr", null, /* @__PURE__ */ _("th", null, "Start delay"), /* @__PURE__ */ _("td", null, chartData.sdly[1].toFixed(4) + "\u202Fs")), /* @__PURE__ */ _("tr", null, /* @__PURE__ */ _("th", null, "Top speed"), /* @__PURE__ */ _("td", null, chartData.v[1].reduce((a5, b2) => Math.max(a5, b2), 0).toFixed(2) + "\u202Fm/s"))), chartData.sk[1].size > 0 && /* @__PURE__ */ _("tbody", null, chartData.sk[1].entries().map(([id3, ars]) => ars.flatMap((pos) => /* @__PURE__ */ _("tr", null, /* @__PURE__ */ _("th", null, skillnames_default[id3][0]), /* @__PURE__ */ _("td", null, `${pos[0].toFixed(2)}\u202Fm \u2013 ${pos[1].toFixed(2)}\u202Fm`)))).toArray())))), mode == 1 /* Chart */ && tableData.size > 0 && /* @__PURE__ */ _("div", { id: "resultsPaneWrapper" }, /* @__PURE__ */ _("div", { id: "resultsPane", class: "mode-chart" }, /* @__PURE__ */ _(BasinnChart, { data: tableData.values().toArray(), hidden: uma1.skills, onSelectionChange: basinnChartSelection, onRunTypeChange: setChartData, onDblClickRow: addSkillFromTable, onInfoClick: showPopover }))), expanded && /* @__PURE__ */ _("div", { id: "umaPane" }), /* @__PURE__ */ _("div", { id: expanded ? "umaOverlay" : "umaPane" }, /* @__PURE__ */ _("div", { class: !expanded && currentIdx == 0 ? "selected" : "" }, /* @__PURE__ */ _(HorseDef, { key: uma1.outfitId, state: uma1, setState: setUma1, courseDistance: course.distance, tabstart: () => 4 }, expanded ? "Umamusume 1" : umaTabs)), expanded && /* @__PURE__ */ _("div", { id: "copyUmaButtons" }, /* @__PURE__ */ _("div", { id: "copyUmaToRight", onClick: copyUmaToRight }), /* @__PURE__ */ _("div", { id: "copyUmaToLeft", onClick: copyUmaToLeft })), mode == 0 /* Compare */ && /* @__PURE__ */ _("div", { class: !expanded && currentIdx == 1 ? "selected" : "" }, /* @__PURE__ */ _(HorseDef, { key: uma2.outfitId, state: uma2, setState: setUma2, courseDistance: course.distance, tabstart: () => 4 + horseDefTabs() }, expanded ? "Umamusume 2" : umaTabs)), expanded && /* @__PURE__ */ _("div", { id: "closeUmaOverlay", title: "Close panel", onClick: toggleExpand }, "\u2715")), popoverSkill && /* @__PURE__ */ _(BasinnChartPopover, { skillid: popoverSkill, results: tableData.get(popoverSkill).results, courseDistance: course.distance })));
  }
  initTelemetry();
  E(/* @__PURE__ */ _(App, { lang: "en-ja" }), document.getElementById("app"));
})();
/*! Bundled license information:

immutable/dist/immutable.es.js:
  (**
   * @license
   * MIT License
   * 
   * Copyright (c) 2014-present, Lee Byron and other contributors.
   * 
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   * 
   * The above copyright notice and this permission notice shall be included in all
   * copies or substantial portions of the Software.
   * 
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
   * SOFTWARE.
   *)
*/

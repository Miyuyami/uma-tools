(() => {
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __require = /* @__PURE__ */ ((x3) => typeof require !== "undefined" ? require : typeof Proxy !== "undefined" ? new Proxy(x3, {
    get: (a4, b3) => (typeof require !== "undefined" ? require : a4)[b3]
  }) : x3)(function(x3) {
    if (typeof require !== "undefined")
      return require.apply(this, arguments);
    throw Error('Dynamic require of "' + x3 + '" is not supported');
  });
  var __commonJS = (cb, mod) => function __require2() {
    return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames(from))
        if (!__hasOwnProp.call(to, key) && key !== except)
          __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
    // If the importer is in node compatibility mode or this is not an ESM
    // file that has been converted to a CommonJS file using a Babel-
    // compatible transform (i.e. "__esModule" has not been set), then set
    // "default" to the CommonJS "module.exports" for node compatibility.
    isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
    mod
  ));

  // ../node_modules/dlv/dist/dlv.umd.js
  var require_dlv_umd = __commonJS({
    "../node_modules/dlv/dist/dlv.umd.js"(exports, module) {
      !function(t3, n3) {
        "object" == typeof exports && "undefined" != typeof module ? module.exports = function(t4, n4, e4, i4, o4) {
          for (n4 = n4.split ? n4.split(".") : n4, i4 = 0; i4 < n4.length; i4++)
            t4 = t4 ? t4[n4[i4]] : o4;
          return t4 === o4 ? e4 : t4;
        } : "function" == typeof define && define.amd ? define(function() {
          return function(t4, n4, e4, i4, o4) {
            for (n4 = n4.split ? n4.split(".") : n4, i4 = 0; i4 < n4.length; i4++)
              t4 = t4 ? t4[n4[i4]] : o4;
            return t4 === o4 ? e4 : t4;
          };
        }) : t3.dlv = function(t4, n4, e4, i4, o4) {
          for (n4 = n4.split ? n4.split(".") : n4, i4 = 0; i4 < n4.length; i4++)
            t4 = t4 ? t4[n4[i4]] : o4;
          return t4 === o4 ? e4 : t4;
        };
      }(exports);
    }
  });

  // ../node_modules/preact/dist/preact.module.js
  var n;
  var l;
  var u;
  var t;
  var i;
  var o;
  var r;
  var f;
  var e;
  var c = {};
  var s = [];
  var a = /acit|ex(?:s|g|n|p|$)|rph|grid|ows|mnc|ntw|ine[ch]|zoo|^ord|itera/i;
  var v = Array.isArray;
  function h(n3, l4) {
    for (var u3 in l4)
      n3[u3] = l4[u3];
    return n3;
  }
  function p(n3) {
    var l4 = n3.parentNode;
    l4 && l4.removeChild(n3);
  }
  function y(l4, u3, t3) {
    var i4, o4, r3, f3 = {};
    for (r3 in u3)
      "key" == r3 ? i4 = u3[r3] : "ref" == r3 ? o4 = u3[r3] : f3[r3] = u3[r3];
    if (arguments.length > 2 && (f3.children = arguments.length > 3 ? n.call(arguments, 2) : t3), "function" == typeof l4 && null != l4.defaultProps)
      for (r3 in l4.defaultProps)
        void 0 === f3[r3] && (f3[r3] = l4.defaultProps[r3]);
    return d(l4, f3, i4, o4, null);
  }
  function d(n3, t3, i4, o4, r3) {
    var f3 = { type: n3, props: t3, key: i4, ref: o4, __k: null, __: null, __b: 0, __e: null, __d: void 0, __c: null, __h: null, constructor: void 0, __v: null == r3 ? ++u : r3 };
    return null == r3 && null != l.vnode && l.vnode(f3), f3;
  }
  function k(n3) {
    return n3.children;
  }
  function b(n3, l4) {
    this.props = n3, this.context = l4;
  }
  function g(n3, l4) {
    if (null == l4)
      return n3.__ ? g(n3.__, n3.__.__k.indexOf(n3) + 1) : null;
    for (var u3; l4 < n3.__k.length; l4++)
      if (null != (u3 = n3.__k[l4]) && null != u3.__e)
        return u3.__d || u3.__e;
    return "function" == typeof n3.type ? g(n3) : null;
  }
  function m(n3) {
    var l4, u3;
    if (null != (n3 = n3.__) && null != n3.__c) {
      for (n3.__e = n3.__c.base = null, l4 = 0; l4 < n3.__k.length; l4++)
        if (null != (u3 = n3.__k[l4]) && null != u3.__e) {
          n3.__e = n3.__c.base = u3.__e;
          break;
        }
      return m(n3);
    }
  }
  function w(n3) {
    (!n3.__d && (n3.__d = true) && i.push(n3) && !x.__r++ || o !== l.debounceRendering) && ((o = l.debounceRendering) || r)(x);
  }
  function x() {
    var n3, l4, u3, t3, o4, r3, e4, c3, s3;
    for (i.sort(f); n3 = i.shift(); )
      n3.__d && (l4 = i.length, t3 = void 0, o4 = void 0, r3 = void 0, c3 = (e4 = (u3 = n3).__v).__e, (s3 = u3.__P) && (t3 = [], o4 = [], (r3 = h({}, e4)).__v = e4.__v + 1, z(s3, e4, r3, u3.__n, void 0 !== s3.ownerSVGElement, null != e4.__h ? [c3] : null, t3, null == c3 ? g(e4) : c3, e4.__h, o4), L(t3, e4, o4), e4.__e != c3 && m(e4)), i.length > l4 && i.sort(f));
    x.__r = 0;
  }
  function P(n3, l4, u3, t3, i4, o4, r3, f3, e4, a4, h3) {
    var p4, y3, _2, b3, m3, w3, x3, P2, C2, D2 = 0, H2 = t3 && t3.__k || s, I2 = H2.length, T3 = I2, j3 = l4.length;
    for (u3.__k = [], p4 = 0; p4 < j3; p4++)
      null != (b3 = u3.__k[p4] = null == (b3 = l4[p4]) || "boolean" == typeof b3 || "function" == typeof b3 ? null : "string" == typeof b3 || "number" == typeof b3 || "bigint" == typeof b3 ? d(null, b3, null, null, b3) : v(b3) ? d(k, { children: b3 }, null, null, null) : b3.__b > 0 ? d(b3.type, b3.props, b3.key, b3.ref ? b3.ref : null, b3.__v) : b3) ? (b3.__ = u3, b3.__b = u3.__b + 1, -1 === (P2 = A(b3, H2, x3 = p4 + D2, T3)) ? _2 = c : (_2 = H2[P2] || c, H2[P2] = void 0, T3--), z(n3, b3, _2, i4, o4, r3, f3, e4, a4, h3), m3 = b3.__e, (y3 = b3.ref) && _2.ref != y3 && (_2.ref && N(_2.ref, null, b3), h3.push(y3, b3.__c || m3, b3)), null != m3 && (null == w3 && (w3 = m3), (C2 = _2 === c || null === _2.__v) ? -1 == P2 && D2-- : P2 !== x3 && (P2 === x3 + 1 ? D2++ : P2 > x3 ? T3 > j3 - x3 ? D2 += P2 - x3 : D2-- : D2 = P2 < x3 && P2 == x3 - 1 ? P2 - x3 : 0), x3 = p4 + D2, "function" != typeof b3.type || P2 === x3 && _2.__k !== b3.__k ? "function" == typeof b3.type || P2 === x3 && !C2 ? void 0 !== b3.__d ? (e4 = b3.__d, b3.__d = void 0) : e4 = m3.nextSibling : e4 = S(n3, m3, e4) : e4 = $(b3, e4, n3), "function" == typeof u3.type && (u3.__d = e4))) : (_2 = H2[p4]) && null == _2.key && _2.__e && (_2.__e == e4 && (_2.__ = t3, e4 = g(_2)), O(_2, _2, false), H2[p4] = null);
    for (u3.__e = w3, p4 = I2; p4--; )
      null != H2[p4] && ("function" == typeof u3.type && null != H2[p4].__e && H2[p4].__e == u3.__d && (u3.__d = H2[p4].__e.nextSibling), O(H2[p4], H2[p4]));
  }
  function $(n3, l4, u3) {
    for (var t3, i4 = n3.__k, o4 = 0; i4 && o4 < i4.length; o4++)
      (t3 = i4[o4]) && (t3.__ = n3, l4 = "function" == typeof t3.type ? $(t3, l4, u3) : S(u3, t3.__e, l4));
    return l4;
  }
  function S(n3, l4, u3) {
    return null == u3 || u3.parentNode !== n3 ? n3.insertBefore(l4, null) : l4 == u3 && null != l4.parentNode || n3.insertBefore(l4, u3), l4.nextSibling;
  }
  function A(n3, l4, u3, t3) {
    var i4 = n3.key, o4 = n3.type, r3 = u3 - 1, f3 = u3 + 1, e4 = l4[u3];
    if (null === e4 || e4 && i4 == e4.key && o4 === e4.type)
      return u3;
    if (t3 > (null != e4 ? 1 : 0))
      for (; r3 >= 0 || f3 < l4.length; ) {
        if (r3 >= 0) {
          if ((e4 = l4[r3]) && i4 == e4.key && o4 === e4.type)
            return r3;
          r3--;
        }
        if (f3 < l4.length) {
          if ((e4 = l4[f3]) && i4 == e4.key && o4 === e4.type)
            return f3;
          f3++;
        }
      }
    return -1;
  }
  function D(n3, l4, u3, t3, i4) {
    var o4;
    for (o4 in u3)
      "children" === o4 || "key" === o4 || o4 in l4 || I(n3, o4, null, u3[o4], t3);
    for (o4 in l4)
      i4 && "function" != typeof l4[o4] || "children" === o4 || "key" === o4 || "value" === o4 || "checked" === o4 || u3[o4] === l4[o4] || I(n3, o4, l4[o4], u3[o4], t3);
  }
  function H(n3, l4, u3) {
    "-" === l4[0] ? n3.setProperty(l4, null == u3 ? "" : u3) : n3[l4] = null == u3 ? "" : "number" != typeof u3 || a.test(l4) ? u3 : u3 + "px";
  }
  function I(n3, l4, u3, t3, i4) {
    var o4;
    n:
      if ("style" === l4)
        if ("string" == typeof u3)
          n3.style.cssText = u3;
        else {
          if ("string" == typeof t3 && (n3.style.cssText = t3 = ""), t3)
            for (l4 in t3)
              u3 && l4 in u3 || H(n3.style, l4, "");
          if (u3)
            for (l4 in u3)
              t3 && u3[l4] === t3[l4] || H(n3.style, l4, u3[l4]);
        }
      else if ("o" === l4[0] && "n" === l4[1])
        o4 = l4 !== (l4 = l4.replace(/(PointerCapture)$|Capture$/, "$1")), l4 = l4.toLowerCase() in n3 ? l4.toLowerCase().slice(2) : l4.slice(2), n3.l || (n3.l = {}), n3.l[l4 + o4] = u3, u3 ? t3 ? u3.u = t3.u : (u3.u = Date.now(), n3.addEventListener(l4, o4 ? j : T, o4)) : n3.removeEventListener(l4, o4 ? j : T, o4);
      else if ("dangerouslySetInnerHTML" !== l4) {
        if (i4)
          l4 = l4.replace(/xlink(H|:h)/, "h").replace(/sName$/, "s");
        else if ("width" !== l4 && "height" !== l4 && "href" !== l4 && "list" !== l4 && "form" !== l4 && "tabIndex" !== l4 && "download" !== l4 && "rowSpan" !== l4 && "colSpan" !== l4 && "role" !== l4 && l4 in n3)
          try {
            n3[l4] = null == u3 ? "" : u3;
            break n;
          } catch (n4) {
          }
        "function" == typeof u3 || (null == u3 || false === u3 && "-" !== l4[4] ? n3.removeAttribute(l4) : n3.setAttribute(l4, u3));
      }
  }
  function T(n3) {
    var u3 = this.l[n3.type + false];
    if (n3.t) {
      if (n3.t <= u3.u)
        return;
    } else
      n3.t = Date.now();
    return u3(l.event ? l.event(n3) : n3);
  }
  function j(n3) {
    return this.l[n3.type + true](l.event ? l.event(n3) : n3);
  }
  function z(n3, u3, t3, i4, o4, r3, f3, e4, c3, s3) {
    var a4, p4, y3, d3, _2, g3, m3, w3, x3, $2, C2, S2, A2, D2, H2, I2 = u3.type;
    if (void 0 !== u3.constructor)
      return null;
    null != t3.__h && (c3 = t3.__h, e4 = u3.__e = t3.__e, u3.__h = null, r3 = [e4]), (a4 = l.__b) && a4(u3);
    n:
      if ("function" == typeof I2)
        try {
          if (w3 = u3.props, x3 = (a4 = I2.contextType) && i4[a4.__c], $2 = a4 ? x3 ? x3.props.value : a4.__ : i4, t3.__c ? m3 = (p4 = u3.__c = t3.__c).__ = p4.__E : ("prototype" in I2 && I2.prototype.render ? u3.__c = p4 = new I2(w3, $2) : (u3.__c = p4 = new b(w3, $2), p4.constructor = I2, p4.render = q), x3 && x3.sub(p4), p4.props = w3, p4.state || (p4.state = {}), p4.context = $2, p4.__n = i4, y3 = p4.__d = true, p4.__h = [], p4._sb = []), null == p4.__s && (p4.__s = p4.state), null != I2.getDerivedStateFromProps && (p4.__s == p4.state && (p4.__s = h({}, p4.__s)), h(p4.__s, I2.getDerivedStateFromProps(w3, p4.__s))), d3 = p4.props, _2 = p4.state, p4.__v = u3, y3)
            null == I2.getDerivedStateFromProps && null != p4.componentWillMount && p4.componentWillMount(), null != p4.componentDidMount && p4.__h.push(p4.componentDidMount);
          else {
            if (null == I2.getDerivedStateFromProps && w3 !== d3 && null != p4.componentWillReceiveProps && p4.componentWillReceiveProps(w3, $2), !p4.__e && (null != p4.shouldComponentUpdate && false === p4.shouldComponentUpdate(w3, p4.__s, $2) || u3.__v === t3.__v)) {
              for (u3.__v !== t3.__v && (p4.props = w3, p4.state = p4.__s, p4.__d = false), u3.__e = t3.__e, u3.__k = t3.__k, u3.__k.forEach(function(n4) {
                n4 && (n4.__ = u3);
              }), C2 = 0; C2 < p4._sb.length; C2++)
                p4.__h.push(p4._sb[C2]);
              p4._sb = [], p4.__h.length && f3.push(p4);
              break n;
            }
            null != p4.componentWillUpdate && p4.componentWillUpdate(w3, p4.__s, $2), null != p4.componentDidUpdate && p4.__h.push(function() {
              p4.componentDidUpdate(d3, _2, g3);
            });
          }
          if (p4.context = $2, p4.props = w3, p4.__P = n3, p4.__e = false, S2 = l.__r, A2 = 0, "prototype" in I2 && I2.prototype.render) {
            for (p4.state = p4.__s, p4.__d = false, S2 && S2(u3), a4 = p4.render(p4.props, p4.state, p4.context), D2 = 0; D2 < p4._sb.length; D2++)
              p4.__h.push(p4._sb[D2]);
            p4._sb = [];
          } else
            do {
              p4.__d = false, S2 && S2(u3), a4 = p4.render(p4.props, p4.state, p4.context), p4.state = p4.__s;
            } while (p4.__d && ++A2 < 25);
          p4.state = p4.__s, null != p4.getChildContext && (i4 = h(h({}, i4), p4.getChildContext())), y3 || null == p4.getSnapshotBeforeUpdate || (g3 = p4.getSnapshotBeforeUpdate(d3, _2)), P(n3, v(H2 = null != a4 && a4.type === k && null == a4.key ? a4.props.children : a4) ? H2 : [H2], u3, t3, i4, o4, r3, f3, e4, c3, s3), p4.base = u3.__e, u3.__h = null, p4.__h.length && f3.push(p4), m3 && (p4.__E = p4.__ = null);
        } catch (n4) {
          u3.__v = null, (c3 || null != r3) && (u3.__e = e4, u3.__h = !!c3, r3[r3.indexOf(e4)] = null), l.__e(n4, u3, t3);
        }
      else
        null == r3 && u3.__v === t3.__v ? (u3.__k = t3.__k, u3.__e = t3.__e) : u3.__e = M(t3.__e, u3, t3, i4, o4, r3, f3, c3, s3);
    (a4 = l.diffed) && a4(u3);
  }
  function L(n3, u3, t3) {
    for (var i4 = 0; i4 < t3.length; i4++)
      N(t3[i4], t3[++i4], t3[++i4]);
    l.__c && l.__c(u3, n3), n3.some(function(u4) {
      try {
        n3 = u4.__h, u4.__h = [], n3.some(function(n4) {
          n4.call(u4);
        });
      } catch (n4) {
        l.__e(n4, u4.__v);
      }
    });
  }
  function M(l4, u3, t3, i4, o4, r3, f3, e4, s3) {
    var a4, h3, y3, d3 = t3.props, _2 = u3.props, k3 = u3.type, b3 = 0;
    if ("svg" === k3 && (o4 = true), null != r3) {
      for (; b3 < r3.length; b3++)
        if ((a4 = r3[b3]) && "setAttribute" in a4 == !!k3 && (k3 ? a4.localName === k3 : 3 === a4.nodeType)) {
          l4 = a4, r3[b3] = null;
          break;
        }
    }
    if (null == l4) {
      if (null === k3)
        return document.createTextNode(_2);
      l4 = o4 ? document.createElementNS("http://www.w3.org/2000/svg", k3) : document.createElement(k3, _2.is && _2), r3 = null, e4 = false;
    }
    if (null === k3)
      d3 === _2 || e4 && l4.data === _2 || (l4.data = _2);
    else {
      if (r3 = r3 && n.call(l4.childNodes), h3 = (d3 = t3.props || c).dangerouslySetInnerHTML, y3 = _2.dangerouslySetInnerHTML, !e4) {
        if (null != r3)
          for (d3 = {}, b3 = 0; b3 < l4.attributes.length; b3++)
            d3[l4.attributes[b3].name] = l4.attributes[b3].value;
        (y3 || h3) && (y3 && (h3 && y3.__html == h3.__html || y3.__html === l4.innerHTML) || (l4.innerHTML = y3 && y3.__html || ""));
      }
      if (D(l4, _2, d3, o4, e4), y3)
        u3.__k = [];
      else if (P(l4, v(b3 = u3.props.children) ? b3 : [b3], u3, t3, i4, o4 && "foreignObject" !== k3, r3, f3, r3 ? r3[0] : t3.__k && g(t3, 0), e4, s3), null != r3)
        for (b3 = r3.length; b3--; )
          null != r3[b3] && p(r3[b3]);
      e4 || ("value" in _2 && void 0 !== (b3 = _2.value) && (b3 !== l4.value || "progress" === k3 && !b3 || "option" === k3 && b3 !== d3.value) && I(l4, "value", b3, d3.value, false), "checked" in _2 && void 0 !== (b3 = _2.checked) && b3 !== l4.checked && I(l4, "checked", b3, d3.checked, false));
    }
    return l4;
  }
  function N(n3, u3, t3) {
    try {
      "function" == typeof n3 ? n3(u3) : n3.current = u3;
    } catch (n4) {
      l.__e(n4, t3);
    }
  }
  function O(n3, u3, t3) {
    var i4, o4;
    if (l.unmount && l.unmount(n3), (i4 = n3.ref) && (i4.current && i4.current !== n3.__e || N(i4, null, u3)), null != (i4 = n3.__c)) {
      if (i4.componentWillUnmount)
        try {
          i4.componentWillUnmount();
        } catch (n4) {
          l.__e(n4, u3);
        }
      i4.base = i4.__P = null, n3.__c = void 0;
    }
    if (i4 = n3.__k)
      for (o4 = 0; o4 < i4.length; o4++)
        i4[o4] && O(i4[o4], u3, t3 || "function" != typeof n3.type);
    t3 || null == n3.__e || p(n3.__e), n3.__ = n3.__e = n3.__d = void 0;
  }
  function q(n3, l4, u3) {
    return this.constructor(n3, u3);
  }
  function B(u3, t3, i4) {
    var o4, r3, f3, e4;
    l.__ && l.__(u3, t3), r3 = (o4 = "function" == typeof i4) ? null : i4 && i4.__k || t3.__k, f3 = [], e4 = [], z(t3, u3 = (!o4 && i4 || t3).__k = y(k, null, [u3]), r3 || c, c, void 0 !== t3.ownerSVGElement, !o4 && i4 ? [i4] : r3 ? null : t3.firstChild ? n.call(t3.childNodes) : null, f3, !o4 && i4 ? i4 : r3 ? r3.__e : t3.firstChild, o4, e4), L(f3, u3, e4);
  }
  function F(l4, u3, t3) {
    var i4, o4, r3, f3, e4 = h({}, l4.props);
    for (r3 in l4.type && l4.type.defaultProps && (f3 = l4.type.defaultProps), u3)
      "key" == r3 ? i4 = u3[r3] : "ref" == r3 ? o4 = u3[r3] : e4[r3] = void 0 === u3[r3] && void 0 !== f3 ? f3[r3] : u3[r3];
    return arguments.length > 2 && (e4.children = arguments.length > 3 ? n.call(arguments, 2) : t3), d(l4.type, e4, i4 || l4.key, o4 || l4.ref, null);
  }
  function G(n3, l4) {
    var u3 = { __c: l4 = "__cC" + e++, __: n3, Consumer: function(n4, l5) {
      return n4.children(l5);
    }, Provider: function(n4) {
      var u4, t3;
      return this.getChildContext || (u4 = [], (t3 = {})[l4] = this, this.getChildContext = function() {
        return t3;
      }, this.shouldComponentUpdate = function(n5) {
        this.props.value !== n5.value && u4.some(function(n6) {
          n6.__e = true, w(n6);
        });
      }, this.sub = function(n5) {
        u4.push(n5);
        var l5 = n5.componentWillUnmount;
        n5.componentWillUnmount = function() {
          u4.splice(u4.indexOf(n5), 1), l5 && l5.call(n5);
        };
      }), n4.children;
    } };
    return u3.Provider.__ = u3.Consumer.contextType = u3;
  }
  n = s.slice, l = { __e: function(n3, l4, u3, t3) {
    for (var i4, o4, r3; l4 = l4.__; )
      if ((i4 = l4.__c) && !i4.__)
        try {
          if ((o4 = i4.constructor) && null != o4.getDerivedStateFromError && (i4.setState(o4.getDerivedStateFromError(n3)), r3 = i4.__d), null != i4.componentDidCatch && (i4.componentDidCatch(n3, t3 || {}), r3 = i4.__d), r3)
            return i4.__E = i4;
        } catch (l5) {
          n3 = l5;
        }
    throw n3;
  } }, u = 0, t = function(n3) {
    return null != n3 && void 0 === n3.constructor;
  }, b.prototype.setState = function(n3, l4) {
    var u3;
    u3 = null != this.__s && this.__s !== this.state ? this.__s : this.__s = h({}, this.state), "function" == typeof n3 && (n3 = n3(h({}, u3), this.props)), n3 && h(u3, n3), null != n3 && this.__v && (l4 && this._sb.push(l4), w(this));
  }, b.prototype.forceUpdate = function(n3) {
    this.__v && (this.__e = true, n3 && this.__h.push(n3), w(this));
  }, b.prototype.render = k, i = [], r = "function" == typeof Promise ? Promise.prototype.then.bind(Promise.resolve()) : setTimeout, f = function(n3, l4) {
    return n3.__v.__b - l4.__v.__b;
  }, x.__r = 0, e = 0;

  // ../node_modules/preact/hooks/dist/hooks.module.js
  var t2;
  var r2;
  var u2;
  var i2;
  var o2 = 0;
  var f2 = [];
  var c2 = [];
  var e2 = l.__b;
  var a2 = l.__r;
  var v2 = l.diffed;
  var l2 = l.__c;
  var m2 = l.unmount;
  function d2(t3, u3) {
    l.__h && l.__h(r2, t3, o2 || u3), o2 = 0;
    var i4 = r2.__H || (r2.__H = { __: [], __h: [] });
    return t3 >= i4.__.length && i4.__.push({ __V: c2 }), i4.__[t3];
  }
  function h2(n3) {
    return o2 = 1, s2(B2, n3);
  }
  function s2(n3, u3, i4) {
    var o4 = d2(t2++, 2);
    if (o4.t = n3, !o4.__c && (o4.__ = [i4 ? i4(u3) : B2(void 0, u3), function(n4) {
      var t3 = o4.__N ? o4.__N[0] : o4.__[0], r3 = o4.t(t3, n4);
      t3 !== r3 && (o4.__N = [r3, o4.__[1]], o4.__c.setState({}));
    }], o4.__c = r2, !r2.u)) {
      var f3 = function(n4, t3, r3) {
        if (!o4.__c.__H)
          return true;
        var u4 = o4.__c.__H.__.filter(function(n5) {
          return n5.__c;
        });
        if (u4.every(function(n5) {
          return !n5.__N;
        }))
          return !c3 || c3.call(this, n4, t3, r3);
        var i5 = false;
        return u4.forEach(function(n5) {
          if (n5.__N) {
            var t4 = n5.__[0];
            n5.__ = n5.__N, n5.__N = void 0, t4 !== n5.__[0] && (i5 = true);
          }
        }), !(!i5 && o4.__c.props === n4) && (!c3 || c3.call(this, n4, t3, r3));
      };
      r2.u = true;
      var c3 = r2.shouldComponentUpdate, e4 = r2.componentWillUpdate;
      r2.componentWillUpdate = function(n4, t3, r3) {
        if (this.__e) {
          var u4 = c3;
          c3 = void 0, f3(n4, t3, r3), c3 = u4;
        }
        e4 && e4.call(this, n4, t3, r3);
      }, r2.shouldComponentUpdate = f3;
    }
    return o4.__N || o4.__;
  }
  function p2(u3, i4) {
    var o4 = d2(t2++, 3);
    !l.__s && z2(o4.__H, i4) && (o4.__ = u3, o4.i = i4, r2.__H.__h.push(o4));
  }
  function _(n3) {
    return o2 = 5, F2(function() {
      return { current: n3 };
    }, []);
  }
  function F2(n3, r3) {
    var u3 = d2(t2++, 7);
    return z2(u3.__H, r3) ? (u3.__V = n3(), u3.i = r3, u3.__h = n3, u3.__V) : u3.__;
  }
  function T2(n3, t3) {
    return o2 = 8, F2(function() {
      return n3;
    }, t3);
  }
  function q2(n3) {
    var u3 = r2.context[n3.__c], i4 = d2(t2++, 9);
    return i4.c = n3, u3 ? (null == i4.__ && (i4.__ = true, u3.sub(r2)), u3.props.value) : n3.__;
  }
  function b2() {
    for (var t3; t3 = f2.shift(); )
      if (t3.__P && t3.__H)
        try {
          t3.__H.__h.forEach(k2), t3.__H.__h.forEach(w2), t3.__H.__h = [];
        } catch (r3) {
          t3.__H.__h = [], l.__e(r3, t3.__v);
        }
  }
  l.__b = function(n3) {
    r2 = null, e2 && e2(n3);
  }, l.__r = function(n3) {
    a2 && a2(n3), t2 = 0;
    var i4 = (r2 = n3.__c).__H;
    i4 && (u2 === r2 ? (i4.__h = [], r2.__h = [], i4.__.forEach(function(n4) {
      n4.__N && (n4.__ = n4.__N), n4.__V = c2, n4.__N = n4.i = void 0;
    })) : (i4.__h.forEach(k2), i4.__h.forEach(w2), i4.__h = [], t2 = 0)), u2 = r2;
  }, l.diffed = function(t3) {
    v2 && v2(t3);
    var o4 = t3.__c;
    o4 && o4.__H && (o4.__H.__h.length && (1 !== f2.push(o4) && i2 === l.requestAnimationFrame || ((i2 = l.requestAnimationFrame) || j2)(b2)), o4.__H.__.forEach(function(n3) {
      n3.i && (n3.__H = n3.i), n3.__V !== c2 && (n3.__ = n3.__V), n3.i = void 0, n3.__V = c2;
    })), u2 = r2 = null;
  }, l.__c = function(t3, r3) {
    r3.some(function(t4) {
      try {
        t4.__h.forEach(k2), t4.__h = t4.__h.filter(function(n3) {
          return !n3.__ || w2(n3);
        });
      } catch (u3) {
        r3.some(function(n3) {
          n3.__h && (n3.__h = []);
        }), r3 = [], l.__e(u3, t4.__v);
      }
    }), l2 && l2(t3, r3);
  }, l.unmount = function(t3) {
    m2 && m2(t3);
    var r3, u3 = t3.__c;
    u3 && u3.__H && (u3.__H.__.forEach(function(n3) {
      try {
        k2(n3);
      } catch (n4) {
        r3 = n4;
      }
    }), u3.__H = void 0, r3 && l.__e(r3, u3.__v));
  };
  var g2 = "function" == typeof requestAnimationFrame;
  function j2(n3) {
    var t3, r3 = function() {
      clearTimeout(u3), g2 && cancelAnimationFrame(t3), setTimeout(n3);
    }, u3 = setTimeout(r3, 100);
    g2 && (t3 = requestAnimationFrame(r3));
  }
  function k2(n3) {
    var t3 = r2, u3 = n3.__c;
    "function" == typeof u3 && (n3.__c = void 0, u3()), r2 = t3;
  }
  function w2(n3) {
    var t3 = r2;
    n3.__c = n3.__(), r2 = t3;
  }
  function z2(n3, t3) {
    return !n3 || n3.length !== t3.length || t3.some(function(t4, r3) {
      return t4 !== n3[r3];
    });
  }
  function B2(n3, t3) {
    return "function" == typeof t3 ? t3(n3) : t3;
  }

  // ../node_modules/preact-i18n/dist/preact-i18n.esm.js
  var import_dlv = __toESM(require_dlv_umd());

  // ../node_modules/preact-markup/dist/preact-markup.module.js
  var e3;
  var o3 = {};
  function n2(r3, t3, e4) {
    if (3 === r3.nodeType) {
      var o4 = "textContent" in r3 ? r3.textContent : r3.nodeValue || "";
      if (false !== n2.options.trim) {
        var a4 = 0 === t3 || t3 === e4.length - 1;
        if ((!(o4 = o4.match(/^[\s\n]+$/g) && "all" !== n2.options.trim ? " " : o4.replace(/(^[\s\n]+|[\s\n]+$)/g, "all" === n2.options.trim || a4 ? "" : " ")) || " " === o4) && e4.length > 1 && a4)
          return null;
      }
      return o4;
    }
    if (1 !== r3.nodeType)
      return null;
    var p4 = String(r3.nodeName).toLowerCase();
    if ("script" === p4 && !n2.options.allowScripts)
      return null;
    var l4, s3, u3 = n2.h(p4, function(r4) {
      var t4 = r4 && r4.length;
      if (!t4)
        return null;
      for (var e6 = {}, o5 = 0; o5 < t4; o5++) {
        var a5 = r4[o5], i4 = a5.name, p5 = a5.value;
        "on" === i4.substring(0, 2) && n2.options.allowEvents && (p5 = new Function(p5)), e6[i4] = p5;
      }
      return e6;
    }(r3.attributes), (s3 = (l4 = r3.childNodes) && Array.prototype.map.call(l4, n2).filter(i3)) && s3.length ? s3 : null);
    return n2.visitor && n2.visitor(u3), u3;
  }
  var a3;
  var i3 = function(r3) {
    return r3;
  };
  var p3 = {};
  function l3(r3) {
    var t3 = (r3.type || "").toLowerCase(), e4 = l3.map;
    e4 && e4.hasOwnProperty(t3) ? (r3.type = e4[t3], r3.props = Object.keys(r3.props || {}).reduce(function(t4, e6) {
      var o4;
      return t4[o4 = e6, o4.replace(/-(.)/g, function(r4, t5) {
        return t5.toUpperCase();
      })] = r3.props[e6], t4;
    }, {})) : r3.type = t3.replace(/[^a-z0-9-]/i, "");
  }
  var preact_markup_module_default = function(t3) {
    function i4() {
      t3.apply(this, arguments);
    }
    return t3 && (i4.__proto__ = t3), (i4.prototype = Object.create(t3 && t3.prototype)).constructor = i4, i4.setReviver = function(r3) {
      a3 = r3;
    }, i4.prototype.shouldComponentUpdate = function(r3) {
      var t4 = this.props;
      return r3.wrap !== t4.wrap || r3.type !== t4.type || r3.markup !== t4.markup;
    }, i4.prototype.setComponents = function(r3) {
      if (this.map = {}, r3) {
        for (var t4 in r3)
          if (r3.hasOwnProperty(t4)) {
            var e4 = t4.replace(/([A-Z]+)([A-Z][a-z0-9])|([a-z0-9]+)([A-Z])/g, "$1$3-$2$4").toLowerCase();
            this.map[e4] = r3[t4];
          }
      }
    }, i4.prototype.render = function(t4) {
      var i5 = t4.wrap;
      void 0 === i5 && (i5 = true);
      var s3, u3 = t4.type, c3 = t4.markup, m3 = t4.components, v3 = t4.reviver, f3 = t4.onError, d3 = t4["allow-scripts"], h3 = t4["allow-events"], y3 = t4.trim, w3 = function(r3, t5) {
        var e4 = {};
        for (var o4 in r3)
          Object.prototype.hasOwnProperty.call(r3, o4) && -1 === t5.indexOf(o4) && (e4[o4] = r3[o4]);
        return e4;
      }(t4, ["wrap", "type", "markup", "components", "reviver", "onError", "allow-scripts", "allow-events", "trim"]), C2 = v3 || this.reviver || this.constructor.prototype.reviver || a3 || y;
      this.setComponents(m3);
      var g3 = { allowScripts: d3, allowEvents: h3, trim: y3 };
      try {
        s3 = function(r3, t5, a4, i6, s4) {
          var u4 = function(r4, t6) {
            var o4, n3, a5, i7, p4 = "html" === t6 ? "text/html" : "application/xml";
            "html" === t6 ? (i7 = "body", a5 = "<!DOCTYPE html>\n<html><body>" + r4 + "</body></html>") : (i7 = "xml", a5 = '<?xml version="1.0" encoding="UTF-8"?>\n<xml>' + r4 + "</xml>");
            try {
              o4 = new DOMParser().parseFromString(a5, p4);
            } catch (r5) {
              n3 = r5;
            }
            if (o4 || "html" !== t6 || ((o4 = e3 || (e3 = function() {
              if (document.implementation && document.implementation.createHTMLDocument)
                return document.implementation.createHTMLDocument("");
              var r5 = document.createElement("iframe");
              return r5.style.cssText = "position:absolute; left:0; top:-999em; width:1px; height:1px; overflow:hidden;", r5.setAttribute("sandbox", "allow-forms"), document.body.appendChild(r5), r5.contentWindow.document;
            }())).open(), o4.write(a5), o4.close()), o4) {
              var l4 = o4.getElementsByTagName(i7)[0], s5 = l4.firstChild;
              return r4 && !s5 && (l4.error = "Document parse failed."), s5 && "parsererror" === String(s5.nodeName).toLowerCase() && (s5.removeChild(s5.firstChild), s5.removeChild(s5.lastChild), l4.error = s5.textContent || s5.nodeValue || n3 || "Unknown error", l4.removeChild(s5)), l4;
            }
          }(r3, t5);
          if (u4 && u4.error)
            throw new Error(u4.error);
          var c4 = u4 && u4.body || u4;
          l3.map = i6 || p3;
          var m4 = c4 && function(r4, t6, e4, a5) {
            return n2.visitor = t6, n2.h = e4, n2.options = a5 || o3, n2(r4);
          }(c4, l3, a4, s4);
          return l3.map = null, m4 && m4.props && m4.props.children || null;
        }(c3, u3, C2, this.map, g3);
      } catch (r3) {
        f3 ? f3({ error: r3 }) : "undefined" != typeof console && console.error && console.error("preact-markup: " + r3);
      }
      if (false === i5)
        return s3 || null;
      var x3 = w3.hasOwnProperty("className") ? "className" : "class", b3 = w3[x3];
      return b3 ? b3.splice ? b3.splice(0, 0, "markup") : "string" == typeof b3 ? w3[x3] += " markup" : "object" == typeof b3 && (b3.markup = true) : w3[x3] = "markup", C2("div", w3, s3 || null);
    }, i4;
  }(b);

  // ../node_modules/preact-i18n/dist/preact-i18n.esm.js
  var IntlContext = G({ intl: {} });
  function defined(obj) {
    return obj !== null && obj !== void 0;
  }
  function assign(obj, props) {
    for (var i4 in props) {
      obj[i4] = props[i4];
    }
    return obj;
  }
  function deepAssign(target, source) {
    var out = assign({}, target);
    for (var i4 in source) {
      if (source.hasOwnProperty(i4)) {
        if (target[i4] && source[i4] && typeof target[i4] === "object" && typeof source[i4] === "object") {
          out[i4] = deepAssign(target[i4], source[i4]);
        } else {
          out[i4] = target[i4] || source[i4];
        }
      }
    }
    return out;
  }
  function select(properties) {
    properties = properties || {};
    if (typeof properties === "string") {
      properties = properties.split(",");
    }
    if ("join" in properties) {
      var selected = {};
      for (var i4 = 0; i4 < properties.length; i4++) {
        var val = properties[i4].trim();
        if (val) {
          selected[val.split(".").pop()] = val;
        }
      }
      return selected;
    }
    return properties;
  }
  function objectWithoutProperties(obj, exclude) {
    var target = {};
    for (var k3 in obj)
      if (Object.prototype.hasOwnProperty.call(obj, k3) && exclude.indexOf(k3) === -1)
        target[k3] = obj[k3];
    return target;
  }
  var URL_FLAG = /[?&#]intl=show/;
  function IntlProvider(ref) {
    var scope = ref.scope;
    var mark = ref.mark;
    var definition = ref.definition;
    var rest3 = objectWithoutProperties(ref, ["scope", "mark", "definition"]);
    var props = rest3;
    var ref$1 = q2(IntlContext);
    var parentIntl = ref$1.intl;
    var intl2 = assign({}, parentIntl || {});
    if (scope) {
      intl2.scope = scope;
    }
    if (definition) {
      intl2.dictionary = deepAssign(intl2.dictionary || {}, definition);
    }
    if (mark || typeof location !== "undefined" && String(location).match(URL_FLAG)) {
      intl2.mark = true;
    }
    return y(
      IntlContext.Provider,
      { value: { intl: intl2 } },
      props.children
    );
  }
  function intl(Child, options) {
    if (arguments.length < 2) {
      options = Child;
      return function(Child2) {
        return intl(Child2, options);
      };
    }
    function IntlProviderWrapper(props) {
      return y(
        IntlProvider,
        options || {},
        y(Child, props)
      );
    }
    IntlProviderWrapper.getWrappedComponent = Child && Child.getWrappedComponent || function() {
      return Child;
    };
    return IntlProviderWrapper;
  }
  var EMPTY = {};
  function template(template2, fields, scope, dictionary) {
    return template2 && template2.replace(/\{\{([\w.-]+)\}\}/g, replacer.bind(null, fields || EMPTY, scope, dictionary));
  }
  function replacer(currentFields, scope, dictionary, s3, field) {
    var parts = field.split("."), v3 = currentFields;
    for (var i4 = 0; i4 < parts.length; i4++) {
      v3 = v3[parts[i4]];
      if (v3 == null) {
        return "";
      }
      if (v3 && v3.type === Text) {
        return translate(v3.props.id, scope, dictionary, v3.props.fields, v3.props.plural, v3.props.fallback);
      }
    }
    if (typeof v3 === "string" && v3.match(/\{\{/)) {
      v3 = template(v3, currentFields);
    }
    return v3;
  }
  function translate(id3, scope, dictionary, fields, plural, fallback) {
    if (scope) {
      id3 = scope + "." + id3;
    }
    var value = dictionary && (0, import_dlv.default)(dictionary, id3);
    if ((plural || plural === 0) && value && typeof value === "object") {
      if (value.splice) {
        value = value[plural] || value[0];
      } else if (plural === 0 && defined(value.none || value.zero)) {
        value = value.none || value.zero;
      } else if (plural === 1 && defined(value.one || value.singular)) {
        value = value.one || value.singular;
      } else {
        value = value.some || value.many || value.plural || value.other || value;
      }
    }
    return value && template(value, fields, scope, dictionary) || fallback || null;
  }
  function HighlightI18N(ref) {
    var value = ref.value;
    var id3 = ref.id;
    var ref$1 = q2(IntlContext);
    var intl2 = ref$1.intl;
    if (intl2 && intl2.mark) {
      var dictionaryKey = "dictionary" + (intl2 && intl2.scope ? "." + intl2.scope : "") + "." + id3;
      return y(
        "mark",
        {
          style: {
            background: value ? (0, import_dlv.default)(intl2, dictionaryKey) ? "rgba(119,231,117,.5)" : "rgba(229,226,41,.5)" : "rgba(228,147,51,.5)"
          },
          title: id3
        },
        value
      );
    }
    return value;
  }
  function Text(ref) {
    var id3 = ref.id;
    var fallback = ref.children;
    var plural = ref.plural;
    var fields = ref.fields;
    var ref$1 = q2(IntlContext);
    var intl2 = ref$1.intl;
    var value = translate(
      id3,
      intl2 && intl2.scope,
      intl2 && intl2.dictionary,
      fields,
      plural,
      fallback
    );
    return y(HighlightI18N, { id: id3, value });
  }
  function translateMapping(props, intl2, onlyTextNodes) {
    var out = {};
    intl2 = intl2 || {};
    props = select(props);
    for (var name in props) {
      if (props.hasOwnProperty(name) && props[name]) {
        var def = props[name];
        if (!onlyTextNodes && typeof def === "string") {
          out[name] = translate(def, intl2.scope, intl2.dictionary);
        } else if (def.type === Text) {
          def = assign({
            // use children as fallback content
            fallback: def.props.children
          }, def.props);
          out[name] = translate(def.id, intl2.scope, intl2.dictionary, def.fields, def.plural, def.fallback);
        }
      }
    }
    return out;
  }
  function Localizer(ref) {
    var children2 = ref.children;
    var ref$1 = q2(IntlContext);
    var intl2 = ref$1.intl;
    return children2 && children2.length ? children2.map(function(child) {
      return F(child, translateMapping(child.props, intl2, true));
    }) : children2 && F(children2, translateMapping(children2.props, intl2, true));
  }
  function objectWithoutProperties$1(obj, exclude) {
    var target = {};
    for (var k3 in obj)
      if (Object.prototype.hasOwnProperty.call(obj, k3) && exclude.indexOf(k3) === -1)
        target[k3] = obj[k3];
    return target;
  }
  function MarkupText(ref) {
    var id3 = ref.id;
    var fields = ref.fields;
    var plural = ref.plural;
    var children2 = ref.children;
    var rest3 = objectWithoutProperties$1(ref, ["id", "fields", "plural", "children"]);
    var props = rest3;
    return y(
      Localizer,
      null,
      y(Html, Object.assign({}, { html: y(Text, { id: id3, fields, plural, children: children2 }), id: id3 }, props))
    );
  }
  function Html(ref) {
    var html = ref.html;
    var id3 = ref.id;
    var rest3 = objectWithoutProperties$1(ref, ["html", "id"]);
    var props = rest3;
    return y(HighlightI18N, {
      id: id3,
      value: !html ? html : typeof html === "string" ? y(preact_markup_module_default, Object.assign({}, { type: "html", trim: false }, props, { markup: html })) : y("span", null, html)
    });
  }
  function withText(mapping) {
    return function withTextWrapper(Child) {
      function WithTextWrapper(props, context) {
        var ref = q2(IntlContext);
        var intl2 = ref.intl;
        var map5 = typeof mapping === "function" ? mapping(props, { intl: intl2 }) : mapping;
        var translations = translateMapping(map5, intl2);
        return y(Child, assign(assign({}, props), translations));
      }
      WithTextWrapper.getWrappedComponent = Child && Child.getWrappedComponent || function() {
        return Child;
      };
      return WithTextWrapper;
    };
  }
  function useText(mapping) {
    var ref = q2(IntlContext);
    var intl2 = ref.intl;
    return translateMapping(
      typeof mapping === "function" ? mapping({ intl: intl2 }) : mapping,
      intl2
    );
  }
  intl.intl = intl;
  intl.IntlContext = IntlContext;
  intl.IntlProvider = IntlProvider;
  intl.Text = Text;
  intl.MarkupText = MarkupText;
  intl.Localizer = Localizer;
  intl.withText = withText;
  intl.useText = useText;
  intl.translate = translate;

  // ../node_modules/immutable/dist/immutable.es.js
  var DELETE = "delete";
  var SHIFT = 5;
  var SIZE = 1 << SHIFT;
  var MASK = SIZE - 1;
  var NOT_SET = {};
  function MakeRef() {
    return { value: false };
  }
  function SetRef(ref) {
    if (ref) {
      ref.value = true;
    }
  }
  function OwnerID() {
  }
  function ensureSize(iter) {
    if (iter.size === void 0) {
      iter.size = iter.__iterate(returnTrue);
    }
    return iter.size;
  }
  function wrapIndex(iter, index) {
    if (typeof index !== "number") {
      var uint32Index = index >>> 0;
      if ("" + uint32Index !== index || uint32Index === 4294967295) {
        return NaN;
      }
      index = uint32Index;
    }
    return index < 0 ? ensureSize(iter) + index : index;
  }
  function returnTrue() {
    return true;
  }
  function wholeSlice(begin, end, size) {
    return (begin === 0 && !isNeg(begin) || size !== void 0 && begin <= -size) && (end === void 0 || size !== void 0 && end >= size);
  }
  function resolveBegin(begin, size) {
    return resolveIndex(begin, size, 0);
  }
  function resolveEnd(end, size) {
    return resolveIndex(end, size, size);
  }
  function resolveIndex(index, size, defaultIndex) {
    return index === void 0 ? defaultIndex : isNeg(index) ? size === Infinity ? size : Math.max(0, size + index) | 0 : size === void 0 || size === index ? index : Math.min(size, index) | 0;
  }
  function isNeg(value) {
    return value < 0 || value === 0 && 1 / value === -Infinity;
  }
  var IS_COLLECTION_SYMBOL = "@@__IMMUTABLE_ITERABLE__@@";
  function isCollection(maybeCollection) {
    return Boolean(maybeCollection && maybeCollection[IS_COLLECTION_SYMBOL]);
  }
  var IS_KEYED_SYMBOL = "@@__IMMUTABLE_KEYED__@@";
  function isKeyed(maybeKeyed) {
    return Boolean(maybeKeyed && maybeKeyed[IS_KEYED_SYMBOL]);
  }
  var IS_INDEXED_SYMBOL = "@@__IMMUTABLE_INDEXED__@@";
  function isIndexed(maybeIndexed) {
    return Boolean(maybeIndexed && maybeIndexed[IS_INDEXED_SYMBOL]);
  }
  function isAssociative(maybeAssociative) {
    return isKeyed(maybeAssociative) || isIndexed(maybeAssociative);
  }
  var Collection = function Collection2(value) {
    return isCollection(value) ? value : Seq(value);
  };
  var KeyedCollection = /* @__PURE__ */ function(Collection5) {
    function KeyedCollection3(value) {
      return isKeyed(value) ? value : KeyedSeq(value);
    }
    if (Collection5)
      KeyedCollection3.__proto__ = Collection5;
    KeyedCollection3.prototype = Object.create(Collection5 && Collection5.prototype);
    KeyedCollection3.prototype.constructor = KeyedCollection3;
    return KeyedCollection3;
  }(Collection);
  var IndexedCollection = /* @__PURE__ */ function(Collection5) {
    function IndexedCollection3(value) {
      return isIndexed(value) ? value : IndexedSeq(value);
    }
    if (Collection5)
      IndexedCollection3.__proto__ = Collection5;
    IndexedCollection3.prototype = Object.create(Collection5 && Collection5.prototype);
    IndexedCollection3.prototype.constructor = IndexedCollection3;
    return IndexedCollection3;
  }(Collection);
  var SetCollection = /* @__PURE__ */ function(Collection5) {
    function SetCollection3(value) {
      return isCollection(value) && !isAssociative(value) ? value : SetSeq(value);
    }
    if (Collection5)
      SetCollection3.__proto__ = Collection5;
    SetCollection3.prototype = Object.create(Collection5 && Collection5.prototype);
    SetCollection3.prototype.constructor = SetCollection3;
    return SetCollection3;
  }(Collection);
  Collection.Keyed = KeyedCollection;
  Collection.Indexed = IndexedCollection;
  Collection.Set = SetCollection;
  var IS_SEQ_SYMBOL = "@@__IMMUTABLE_SEQ__@@";
  function isSeq(maybeSeq) {
    return Boolean(maybeSeq && maybeSeq[IS_SEQ_SYMBOL]);
  }
  var IS_RECORD_SYMBOL = "@@__IMMUTABLE_RECORD__@@";
  function isRecord(maybeRecord) {
    return Boolean(maybeRecord && maybeRecord[IS_RECORD_SYMBOL]);
  }
  function isImmutable(maybeImmutable) {
    return isCollection(maybeImmutable) || isRecord(maybeImmutable);
  }
  var IS_ORDERED_SYMBOL = "@@__IMMUTABLE_ORDERED__@@";
  function isOrdered(maybeOrdered) {
    return Boolean(maybeOrdered && maybeOrdered[IS_ORDERED_SYMBOL]);
  }
  var ITERATE_KEYS = 0;
  var ITERATE_VALUES = 1;
  var ITERATE_ENTRIES = 2;
  var REAL_ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
  var FAUX_ITERATOR_SYMBOL = "@@iterator";
  var ITERATOR_SYMBOL = REAL_ITERATOR_SYMBOL || FAUX_ITERATOR_SYMBOL;
  var Iterator = function Iterator2(next) {
    this.next = next;
  };
  Iterator.prototype.toString = function toString() {
    return "[Iterator]";
  };
  Iterator.KEYS = ITERATE_KEYS;
  Iterator.VALUES = ITERATE_VALUES;
  Iterator.ENTRIES = ITERATE_ENTRIES;
  Iterator.prototype.inspect = Iterator.prototype.toSource = function() {
    return this.toString();
  };
  Iterator.prototype[ITERATOR_SYMBOL] = function() {
    return this;
  };
  function iteratorValue(type2, k3, v3, iteratorResult) {
    var value = type2 === 0 ? k3 : type2 === 1 ? v3 : [k3, v3];
    iteratorResult ? iteratorResult.value = value : iteratorResult = {
      value,
      done: false
    };
    return iteratorResult;
  }
  function iteratorDone() {
    return { value: void 0, done: true };
  }
  function hasIterator(maybeIterable) {
    if (Array.isArray(maybeIterable)) {
      return true;
    }
    return !!getIteratorFn(maybeIterable);
  }
  function isIterator(maybeIterator) {
    return maybeIterator && typeof maybeIterator.next === "function";
  }
  function getIterator(iterable) {
    var iteratorFn = getIteratorFn(iterable);
    return iteratorFn && iteratorFn.call(iterable);
  }
  function getIteratorFn(iterable) {
    var iteratorFn = iterable && (REAL_ITERATOR_SYMBOL && iterable[REAL_ITERATOR_SYMBOL] || iterable[FAUX_ITERATOR_SYMBOL]);
    if (typeof iteratorFn === "function") {
      return iteratorFn;
    }
  }
  function isEntriesIterable(maybeIterable) {
    var iteratorFn = getIteratorFn(maybeIterable);
    return iteratorFn && iteratorFn === maybeIterable.entries;
  }
  function isKeysIterable(maybeIterable) {
    var iteratorFn = getIteratorFn(maybeIterable);
    return iteratorFn && iteratorFn === maybeIterable.keys;
  }
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  function isArrayLike(value) {
    if (Array.isArray(value) || typeof value === "string") {
      return true;
    }
    return value && typeof value === "object" && Number.isInteger(value.length) && value.length >= 0 && (value.length === 0 ? (
      // Only {length: 0} is considered Array-like.
      Object.keys(value).length === 1
    ) : (
      // An object is only Array-like if it has a property where the last value
      // in the array-like may be found (which could be undefined).
      value.hasOwnProperty(value.length - 1)
    ));
  }
  var Seq = /* @__PURE__ */ function(Collection5) {
    function Seq3(value) {
      return value === void 0 || value === null ? emptySequence() : isImmutable(value) ? value.toSeq() : seqFromValue(value);
    }
    if (Collection5)
      Seq3.__proto__ = Collection5;
    Seq3.prototype = Object.create(Collection5 && Collection5.prototype);
    Seq3.prototype.constructor = Seq3;
    Seq3.prototype.toSeq = function toSeq5() {
      return this;
    };
    Seq3.prototype.toString = function toString8() {
      return this.__toString("Seq {", "}");
    };
    Seq3.prototype.cacheResult = function cacheResult() {
      if (!this._cache && this.__iterateUncached) {
        this._cache = this.entrySeq().toArray();
        this.size = this._cache.length;
      }
      return this;
    };
    Seq3.prototype.__iterate = function __iterate3(fn, reverse5) {
      var cache = this._cache;
      if (cache) {
        var size = cache.length;
        var i4 = 0;
        while (i4 !== size) {
          var entry = cache[reverse5 ? size - ++i4 : i4++];
          if (fn(entry[1], entry[0], this) === false) {
            break;
          }
        }
        return i4;
      }
      return this.__iterateUncached(fn, reverse5);
    };
    Seq3.prototype.__iterator = function __iterator3(type2, reverse5) {
      var cache = this._cache;
      if (cache) {
        var size = cache.length;
        var i4 = 0;
        return new Iterator(function() {
          if (i4 === size) {
            return iteratorDone();
          }
          var entry = cache[reverse5 ? size - ++i4 : i4++];
          return iteratorValue(type2, entry[0], entry[1]);
        });
      }
      return this.__iteratorUncached(type2, reverse5);
    };
    return Seq3;
  }(Collection);
  var KeyedSeq = /* @__PURE__ */ function(Seq3) {
    function KeyedSeq3(value) {
      return value === void 0 || value === null ? emptySequence().toKeyedSeq() : isCollection(value) ? isKeyed(value) ? value.toSeq() : value.fromEntrySeq() : isRecord(value) ? value.toSeq() : keyedSeqFromValue(value);
    }
    if (Seq3)
      KeyedSeq3.__proto__ = Seq3;
    KeyedSeq3.prototype = Object.create(Seq3 && Seq3.prototype);
    KeyedSeq3.prototype.constructor = KeyedSeq3;
    KeyedSeq3.prototype.toKeyedSeq = function toKeyedSeq5() {
      return this;
    };
    return KeyedSeq3;
  }(Seq);
  var IndexedSeq = /* @__PURE__ */ function(Seq3) {
    function IndexedSeq3(value) {
      return value === void 0 || value === null ? emptySequence() : isCollection(value) ? isKeyed(value) ? value.entrySeq() : value.toIndexedSeq() : isRecord(value) ? value.toSeq().entrySeq() : indexedSeqFromValue(value);
    }
    if (Seq3)
      IndexedSeq3.__proto__ = Seq3;
    IndexedSeq3.prototype = Object.create(Seq3 && Seq3.prototype);
    IndexedSeq3.prototype.constructor = IndexedSeq3;
    IndexedSeq3.of = function of() {
      return IndexedSeq3(arguments);
    };
    IndexedSeq3.prototype.toIndexedSeq = function toIndexedSeq3() {
      return this;
    };
    IndexedSeq3.prototype.toString = function toString8() {
      return this.__toString("Seq [", "]");
    };
    return IndexedSeq3;
  }(Seq);
  var SetSeq = /* @__PURE__ */ function(Seq3) {
    function SetSeq3(value) {
      return (isCollection(value) && !isAssociative(value) ? value : IndexedSeq(value)).toSetSeq();
    }
    if (Seq3)
      SetSeq3.__proto__ = Seq3;
    SetSeq3.prototype = Object.create(Seq3 && Seq3.prototype);
    SetSeq3.prototype.constructor = SetSeq3;
    SetSeq3.of = function of() {
      return SetSeq3(arguments);
    };
    SetSeq3.prototype.toSetSeq = function toSetSeq3() {
      return this;
    };
    return SetSeq3;
  }(Seq);
  Seq.isSeq = isSeq;
  Seq.Keyed = KeyedSeq;
  Seq.Set = SetSeq;
  Seq.Indexed = IndexedSeq;
  Seq.prototype[IS_SEQ_SYMBOL] = true;
  var ArraySeq = /* @__PURE__ */ function(IndexedSeq3) {
    function ArraySeq3(array3) {
      this._array = array3;
      this.size = array3.length;
    }
    if (IndexedSeq3)
      ArraySeq3.__proto__ = IndexedSeq3;
    ArraySeq3.prototype = Object.create(IndexedSeq3 && IndexedSeq3.prototype);
    ArraySeq3.prototype.constructor = ArraySeq3;
    ArraySeq3.prototype.get = function get24(index, notSetValue) {
      return this.has(index) ? this._array[wrapIndex(this, index)] : notSetValue;
    };
    ArraySeq3.prototype.__iterate = function __iterate3(fn, reverse5) {
      var array3 = this._array;
      var size = array3.length;
      var i4 = 0;
      while (i4 !== size) {
        var ii = reverse5 ? size - ++i4 : i4++;
        if (fn(array3[ii], ii, this) === false) {
          break;
        }
      }
      return i4;
    };
    ArraySeq3.prototype.__iterator = function __iterator3(type2, reverse5) {
      var array3 = this._array;
      var size = array3.length;
      var i4 = 0;
      return new Iterator(function() {
        if (i4 === size) {
          return iteratorDone();
        }
        var ii = reverse5 ? size - ++i4 : i4++;
        return iteratorValue(type2, ii, array3[ii]);
      });
    };
    return ArraySeq3;
  }(IndexedSeq);
  var ObjectSeq = /* @__PURE__ */ function(KeyedSeq3) {
    function ObjectSeq3(object) {
      var keys3 = Object.keys(object).concat(
        Object.getOwnPropertySymbols ? Object.getOwnPropertySymbols(object) : []
      );
      this._object = object;
      this._keys = keys3;
      this.size = keys3.length;
    }
    if (KeyedSeq3)
      ObjectSeq3.__proto__ = KeyedSeq3;
    ObjectSeq3.prototype = Object.create(KeyedSeq3 && KeyedSeq3.prototype);
    ObjectSeq3.prototype.constructor = ObjectSeq3;
    ObjectSeq3.prototype.get = function get24(key, notSetValue) {
      if (notSetValue !== void 0 && !this.has(key)) {
        return notSetValue;
      }
      return this._object[key];
    };
    ObjectSeq3.prototype.has = function has9(key) {
      return hasOwnProperty.call(this._object, key);
    };
    ObjectSeq3.prototype.__iterate = function __iterate3(fn, reverse5) {
      var object = this._object;
      var keys3 = this._keys;
      var size = keys3.length;
      var i4 = 0;
      while (i4 !== size) {
        var key = keys3[reverse5 ? size - ++i4 : i4++];
        if (fn(object[key], key, this) === false) {
          break;
        }
      }
      return i4;
    };
    ObjectSeq3.prototype.__iterator = function __iterator3(type2, reverse5) {
      var object = this._object;
      var keys3 = this._keys;
      var size = keys3.length;
      var i4 = 0;
      return new Iterator(function() {
        if (i4 === size) {
          return iteratorDone();
        }
        var key = keys3[reverse5 ? size - ++i4 : i4++];
        return iteratorValue(type2, key, object[key]);
      });
    };
    return ObjectSeq3;
  }(KeyedSeq);
  ObjectSeq.prototype[IS_ORDERED_SYMBOL] = true;
  var CollectionSeq = /* @__PURE__ */ function(IndexedSeq3) {
    function CollectionSeq3(collection) {
      this._collection = collection;
      this.size = collection.length || collection.size;
    }
    if (IndexedSeq3)
      CollectionSeq3.__proto__ = IndexedSeq3;
    CollectionSeq3.prototype = Object.create(IndexedSeq3 && IndexedSeq3.prototype);
    CollectionSeq3.prototype.constructor = CollectionSeq3;
    CollectionSeq3.prototype.__iterateUncached = function __iterateUncached(fn, reverse5) {
      if (reverse5) {
        return this.cacheResult().__iterate(fn, reverse5);
      }
      var collection = this._collection;
      var iterator = getIterator(collection);
      var iterations = 0;
      if (isIterator(iterator)) {
        var step;
        while (!(step = iterator.next()).done) {
          if (fn(step.value, iterations++, this) === false) {
            break;
          }
        }
      }
      return iterations;
    };
    CollectionSeq3.prototype.__iteratorUncached = function __iteratorUncached(type2, reverse5) {
      if (reverse5) {
        return this.cacheResult().__iterator(type2, reverse5);
      }
      var collection = this._collection;
      var iterator = getIterator(collection);
      if (!isIterator(iterator)) {
        return new Iterator(iteratorDone);
      }
      var iterations = 0;
      return new Iterator(function() {
        var step = iterator.next();
        return step.done ? step : iteratorValue(type2, iterations++, step.value);
      });
    };
    return CollectionSeq3;
  }(IndexedSeq);
  var EMPTY_SEQ;
  function emptySequence() {
    return EMPTY_SEQ || (EMPTY_SEQ = new ArraySeq([]));
  }
  function keyedSeqFromValue(value) {
    var seq = maybeIndexedSeqFromValue(value);
    if (seq) {
      return seq.fromEntrySeq();
    }
    if (typeof value === "object") {
      return new ObjectSeq(value);
    }
    throw new TypeError(
      "Expected Array or collection object of [k, v] entries, or keyed object: " + value
    );
  }
  function indexedSeqFromValue(value) {
    var seq = maybeIndexedSeqFromValue(value);
    if (seq) {
      return seq;
    }
    throw new TypeError(
      "Expected Array or collection object of values: " + value
    );
  }
  function seqFromValue(value) {
    var seq = maybeIndexedSeqFromValue(value);
    if (seq) {
      return isEntriesIterable(value) ? seq.fromEntrySeq() : isKeysIterable(value) ? seq.toSetSeq() : seq;
    }
    if (typeof value === "object") {
      return new ObjectSeq(value);
    }
    throw new TypeError(
      "Expected Array or collection object of values, or keyed object: " + value
    );
  }
  function maybeIndexedSeqFromValue(value) {
    return isArrayLike(value) ? new ArraySeq(value) : hasIterator(value) ? new CollectionSeq(value) : void 0;
  }
  var IS_MAP_SYMBOL = "@@__IMMUTABLE_MAP__@@";
  function isMap(maybeMap) {
    return Boolean(maybeMap && maybeMap[IS_MAP_SYMBOL]);
  }
  function isOrderedMap(maybeOrderedMap) {
    return isMap(maybeOrderedMap) && isOrdered(maybeOrderedMap);
  }
  function isValueObject(maybeValue) {
    return Boolean(
      maybeValue && typeof maybeValue.equals === "function" && typeof maybeValue.hashCode === "function"
    );
  }
  function is(valueA, valueB) {
    if (valueA === valueB || valueA !== valueA && valueB !== valueB) {
      return true;
    }
    if (!valueA || !valueB) {
      return false;
    }
    if (typeof valueA.valueOf === "function" && typeof valueB.valueOf === "function") {
      valueA = valueA.valueOf();
      valueB = valueB.valueOf();
      if (valueA === valueB || valueA !== valueA && valueB !== valueB) {
        return true;
      }
      if (!valueA || !valueB) {
        return false;
      }
    }
    return !!(isValueObject(valueA) && isValueObject(valueB) && valueA.equals(valueB));
  }
  var imul = typeof Math.imul === "function" && Math.imul(4294967295, 2) === -2 ? Math.imul : function imul2(a4, b3) {
    a4 |= 0;
    b3 |= 0;
    var c3 = a4 & 65535;
    var d3 = b3 & 65535;
    return c3 * d3 + ((a4 >>> 16) * d3 + c3 * (b3 >>> 16) << 16 >>> 0) | 0;
  };
  function smi(i32) {
    return i32 >>> 1 & 1073741824 | i32 & 3221225471;
  }
  var defaultValueOf = Object.prototype.valueOf;
  function hash(o4) {
    if (o4 == null) {
      return hashNullish(o4);
    }
    if (typeof o4.hashCode === "function") {
      return smi(o4.hashCode(o4));
    }
    var v3 = valueOf(o4);
    if (v3 == null) {
      return hashNullish(v3);
    }
    switch (typeof v3) {
      case "boolean":
        return v3 ? 1108378657 : 1108378656;
      case "number":
        return hashNumber(v3);
      case "string":
        return v3.length > STRING_HASH_CACHE_MIN_STRLEN ? cachedHashString(v3) : hashString(v3);
      case "object":
      case "function":
        return hashJSObj(v3);
      case "symbol":
        return hashSymbol(v3);
      default:
        if (typeof v3.toString === "function") {
          return hashString(v3.toString());
        }
        throw new Error("Value type " + typeof v3 + " cannot be hashed.");
    }
  }
  function hashNullish(nullish) {
    return nullish === null ? 1108378658 : (
      /* undefined */
      1108378659
    );
  }
  function hashNumber(n3) {
    if (n3 !== n3 || n3 === Infinity) {
      return 0;
    }
    var hash3 = n3 | 0;
    if (hash3 !== n3) {
      hash3 ^= n3 * 4294967295;
    }
    while (n3 > 4294967295) {
      n3 /= 4294967295;
      hash3 ^= n3;
    }
    return smi(hash3);
  }
  function cachedHashString(string) {
    var hashed = stringHashCache[string];
    if (hashed === void 0) {
      hashed = hashString(string);
      if (STRING_HASH_CACHE_SIZE === STRING_HASH_CACHE_MAX_SIZE) {
        STRING_HASH_CACHE_SIZE = 0;
        stringHashCache = {};
      }
      STRING_HASH_CACHE_SIZE++;
      stringHashCache[string] = hashed;
    }
    return hashed;
  }
  function hashString(string) {
    var hashed = 0;
    for (var ii = 0; ii < string.length; ii++) {
      hashed = 31 * hashed + string.charCodeAt(ii) | 0;
    }
    return smi(hashed);
  }
  function hashSymbol(sym) {
    var hashed = symbolMap[sym];
    if (hashed !== void 0) {
      return hashed;
    }
    hashed = nextHash();
    symbolMap[sym] = hashed;
    return hashed;
  }
  function hashJSObj(obj) {
    var hashed;
    if (usingWeakMap) {
      hashed = weakMap.get(obj);
      if (hashed !== void 0) {
        return hashed;
      }
    }
    hashed = obj[UID_HASH_KEY];
    if (hashed !== void 0) {
      return hashed;
    }
    if (!canDefineProperty) {
      hashed = obj.propertyIsEnumerable && obj.propertyIsEnumerable[UID_HASH_KEY];
      if (hashed !== void 0) {
        return hashed;
      }
      hashed = getIENodeHash(obj);
      if (hashed !== void 0) {
        return hashed;
      }
    }
    hashed = nextHash();
    if (usingWeakMap) {
      weakMap.set(obj, hashed);
    } else if (isExtensible !== void 0 && isExtensible(obj) === false) {
      throw new Error("Non-extensible objects are not allowed as keys.");
    } else if (canDefineProperty) {
      Object.defineProperty(obj, UID_HASH_KEY, {
        enumerable: false,
        configurable: false,
        writable: false,
        value: hashed
      });
    } else if (obj.propertyIsEnumerable !== void 0 && obj.propertyIsEnumerable === obj.constructor.prototype.propertyIsEnumerable) {
      obj.propertyIsEnumerable = function() {
        return this.constructor.prototype.propertyIsEnumerable.apply(
          this,
          arguments
        );
      };
      obj.propertyIsEnumerable[UID_HASH_KEY] = hashed;
    } else if (obj.nodeType !== void 0) {
      obj[UID_HASH_KEY] = hashed;
    } else {
      throw new Error("Unable to set a non-enumerable property on object.");
    }
    return hashed;
  }
  var isExtensible = Object.isExtensible;
  var canDefineProperty = function() {
    try {
      Object.defineProperty({}, "@", {});
      return true;
    } catch (e4) {
      return false;
    }
  }();
  function getIENodeHash(node) {
    if (node && node.nodeType > 0) {
      switch (node.nodeType) {
        case 1:
          return node.uniqueID;
        case 9:
          return node.documentElement && node.documentElement.uniqueID;
      }
    }
  }
  function valueOf(obj) {
    return obj.valueOf !== defaultValueOf && typeof obj.valueOf === "function" ? obj.valueOf(obj) : obj;
  }
  function nextHash() {
    var nextHash2 = ++_objHashUID;
    if (_objHashUID & 1073741824) {
      _objHashUID = 0;
    }
    return nextHash2;
  }
  var usingWeakMap = typeof WeakMap === "function";
  var weakMap;
  if (usingWeakMap) {
    weakMap = /* @__PURE__ */ new WeakMap();
  }
  var symbolMap = /* @__PURE__ */ Object.create(null);
  var _objHashUID = 0;
  var UID_HASH_KEY = "__immutablehash__";
  if (typeof Symbol === "function") {
    UID_HASH_KEY = Symbol(UID_HASH_KEY);
  }
  var STRING_HASH_CACHE_MIN_STRLEN = 16;
  var STRING_HASH_CACHE_MAX_SIZE = 255;
  var STRING_HASH_CACHE_SIZE = 0;
  var stringHashCache = {};
  var ToKeyedSequence = /* @__PURE__ */ function(KeyedSeq3) {
    function ToKeyedSequence3(indexed, useKeys) {
      this._iter = indexed;
      this._useKeys = useKeys;
      this.size = indexed.size;
    }
    if (KeyedSeq3)
      ToKeyedSequence3.__proto__ = KeyedSeq3;
    ToKeyedSequence3.prototype = Object.create(KeyedSeq3 && KeyedSeq3.prototype);
    ToKeyedSequence3.prototype.constructor = ToKeyedSequence3;
    ToKeyedSequence3.prototype.get = function get24(key, notSetValue) {
      return this._iter.get(key, notSetValue);
    };
    ToKeyedSequence3.prototype.has = function has9(key) {
      return this._iter.has(key);
    };
    ToKeyedSequence3.prototype.valueSeq = function valueSeq3() {
      return this._iter.valueSeq();
    };
    ToKeyedSequence3.prototype.reverse = function reverse5() {
      var this$1$1 = this;
      var reversedSequence = reverseFactory(this, true);
      if (!this._useKeys) {
        reversedSequence.valueSeq = function() {
          return this$1$1._iter.toSeq().reverse();
        };
      }
      return reversedSequence;
    };
    ToKeyedSequence3.prototype.map = function map5(mapper, context) {
      var this$1$1 = this;
      var mappedSequence = mapFactory(this, mapper, context);
      if (!this._useKeys) {
        mappedSequence.valueSeq = function() {
          return this$1$1._iter.toSeq().map(mapper, context);
        };
      }
      return mappedSequence;
    };
    ToKeyedSequence3.prototype.__iterate = function __iterate3(fn, reverse5) {
      var this$1$1 = this;
      return this._iter.__iterate(function(v3, k3) {
        return fn(v3, k3, this$1$1);
      }, reverse5);
    };
    ToKeyedSequence3.prototype.__iterator = function __iterator3(type2, reverse5) {
      return this._iter.__iterator(type2, reverse5);
    };
    return ToKeyedSequence3;
  }(KeyedSeq);
  ToKeyedSequence.prototype[IS_ORDERED_SYMBOL] = true;
  var ToIndexedSequence = /* @__PURE__ */ function(IndexedSeq3) {
    function ToIndexedSequence3(iter) {
      this._iter = iter;
      this.size = iter.size;
    }
    if (IndexedSeq3)
      ToIndexedSequence3.__proto__ = IndexedSeq3;
    ToIndexedSequence3.prototype = Object.create(IndexedSeq3 && IndexedSeq3.prototype);
    ToIndexedSequence3.prototype.constructor = ToIndexedSequence3;
    ToIndexedSequence3.prototype.includes = function includes5(value) {
      return this._iter.includes(value);
    };
    ToIndexedSequence3.prototype.__iterate = function __iterate3(fn, reverse5) {
      var this$1$1 = this;
      var i4 = 0;
      reverse5 && ensureSize(this);
      return this._iter.__iterate(
        function(v3) {
          return fn(v3, reverse5 ? this$1$1.size - ++i4 : i4++, this$1$1);
        },
        reverse5
      );
    };
    ToIndexedSequence3.prototype.__iterator = function __iterator3(type2, reverse5) {
      var this$1$1 = this;
      var iterator = this._iter.__iterator(ITERATE_VALUES, reverse5);
      var i4 = 0;
      reverse5 && ensureSize(this);
      return new Iterator(function() {
        var step = iterator.next();
        return step.done ? step : iteratorValue(
          type2,
          reverse5 ? this$1$1.size - ++i4 : i4++,
          step.value,
          step
        );
      });
    };
    return ToIndexedSequence3;
  }(IndexedSeq);
  var ToSetSequence = /* @__PURE__ */ function(SetSeq3) {
    function ToSetSequence3(iter) {
      this._iter = iter;
      this.size = iter.size;
    }
    if (SetSeq3)
      ToSetSequence3.__proto__ = SetSeq3;
    ToSetSequence3.prototype = Object.create(SetSeq3 && SetSeq3.prototype);
    ToSetSequence3.prototype.constructor = ToSetSequence3;
    ToSetSequence3.prototype.has = function has9(key) {
      return this._iter.includes(key);
    };
    ToSetSequence3.prototype.__iterate = function __iterate3(fn, reverse5) {
      var this$1$1 = this;
      return this._iter.__iterate(function(v3) {
        return fn(v3, v3, this$1$1);
      }, reverse5);
    };
    ToSetSequence3.prototype.__iterator = function __iterator3(type2, reverse5) {
      var iterator = this._iter.__iterator(ITERATE_VALUES, reverse5);
      return new Iterator(function() {
        var step = iterator.next();
        return step.done ? step : iteratorValue(type2, step.value, step.value, step);
      });
    };
    return ToSetSequence3;
  }(SetSeq);
  var FromEntriesSequence = /* @__PURE__ */ function(KeyedSeq3) {
    function FromEntriesSequence3(entries5) {
      this._iter = entries5;
      this.size = entries5.size;
    }
    if (KeyedSeq3)
      FromEntriesSequence3.__proto__ = KeyedSeq3;
    FromEntriesSequence3.prototype = Object.create(KeyedSeq3 && KeyedSeq3.prototype);
    FromEntriesSequence3.prototype.constructor = FromEntriesSequence3;
    FromEntriesSequence3.prototype.entrySeq = function entrySeq3() {
      return this._iter.toSeq();
    };
    FromEntriesSequence3.prototype.__iterate = function __iterate3(fn, reverse5) {
      var this$1$1 = this;
      return this._iter.__iterate(function(entry) {
        if (entry) {
          validateEntry(entry);
          var indexedCollection = isCollection(entry);
          return fn(
            indexedCollection ? entry.get(1) : entry[1],
            indexedCollection ? entry.get(0) : entry[0],
            this$1$1
          );
        }
      }, reverse5);
    };
    FromEntriesSequence3.prototype.__iterator = function __iterator3(type2, reverse5) {
      var iterator = this._iter.__iterator(ITERATE_VALUES, reverse5);
      return new Iterator(function() {
        while (true) {
          var step = iterator.next();
          if (step.done) {
            return step;
          }
          var entry = step.value;
          if (entry) {
            validateEntry(entry);
            var indexedCollection = isCollection(entry);
            return iteratorValue(
              type2,
              indexedCollection ? entry.get(0) : entry[0],
              indexedCollection ? entry.get(1) : entry[1],
              step
            );
          }
        }
      });
    };
    return FromEntriesSequence3;
  }(KeyedSeq);
  ToIndexedSequence.prototype.cacheResult = ToKeyedSequence.prototype.cacheResult = ToSetSequence.prototype.cacheResult = FromEntriesSequence.prototype.cacheResult = cacheResultThrough;
  function flipFactory(collection) {
    var flipSequence = makeSequence(collection);
    flipSequence._iter = collection;
    flipSequence.size = collection.size;
    flipSequence.flip = function() {
      return collection;
    };
    flipSequence.reverse = function() {
      var reversedSequence = collection.reverse.apply(this);
      reversedSequence.flip = function() {
        return collection.reverse();
      };
      return reversedSequence;
    };
    flipSequence.has = function(key) {
      return collection.includes(key);
    };
    flipSequence.includes = function(key) {
      return collection.has(key);
    };
    flipSequence.cacheResult = cacheResultThrough;
    flipSequence.__iterateUncached = function(fn, reverse5) {
      var this$1$1 = this;
      return collection.__iterate(function(v3, k3) {
        return fn(k3, v3, this$1$1) !== false;
      }, reverse5);
    };
    flipSequence.__iteratorUncached = function(type2, reverse5) {
      if (type2 === ITERATE_ENTRIES) {
        var iterator = collection.__iterator(type2, reverse5);
        return new Iterator(function() {
          var step = iterator.next();
          if (!step.done) {
            var k3 = step.value[0];
            step.value[0] = step.value[1];
            step.value[1] = k3;
          }
          return step;
        });
      }
      return collection.__iterator(
        type2 === ITERATE_VALUES ? ITERATE_KEYS : ITERATE_VALUES,
        reverse5
      );
    };
    return flipSequence;
  }
  function mapFactory(collection, mapper, context) {
    var mappedSequence = makeSequence(collection);
    mappedSequence.size = collection.size;
    mappedSequence.has = function(key) {
      return collection.has(key);
    };
    mappedSequence.get = function(key, notSetValue) {
      var v3 = collection.get(key, NOT_SET);
      return v3 === NOT_SET ? notSetValue : mapper.call(context, v3, key, collection);
    };
    mappedSequence.__iterateUncached = function(fn, reverse5) {
      var this$1$1 = this;
      return collection.__iterate(
        function(v3, k3, c3) {
          return fn(mapper.call(context, v3, k3, c3), k3, this$1$1) !== false;
        },
        reverse5
      );
    };
    mappedSequence.__iteratorUncached = function(type2, reverse5) {
      var iterator = collection.__iterator(ITERATE_ENTRIES, reverse5);
      return new Iterator(function() {
        var step = iterator.next();
        if (step.done) {
          return step;
        }
        var entry = step.value;
        var key = entry[0];
        return iteratorValue(
          type2,
          key,
          mapper.call(context, entry[1], key, collection),
          step
        );
      });
    };
    return mappedSequence;
  }
  function reverseFactory(collection, useKeys) {
    var this$1$1 = this;
    var reversedSequence = makeSequence(collection);
    reversedSequence._iter = collection;
    reversedSequence.size = collection.size;
    reversedSequence.reverse = function() {
      return collection;
    };
    if (collection.flip) {
      reversedSequence.flip = function() {
        var flipSequence = flipFactory(collection);
        flipSequence.reverse = function() {
          return collection.flip();
        };
        return flipSequence;
      };
    }
    reversedSequence.get = function(key, notSetValue) {
      return collection.get(useKeys ? key : -1 - key, notSetValue);
    };
    reversedSequence.has = function(key) {
      return collection.has(useKeys ? key : -1 - key);
    };
    reversedSequence.includes = function(value) {
      return collection.includes(value);
    };
    reversedSequence.cacheResult = cacheResultThrough;
    reversedSequence.__iterate = function(fn, reverse5) {
      var this$1$12 = this;
      var i4 = 0;
      reverse5 && ensureSize(collection);
      return collection.__iterate(
        function(v3, k3) {
          return fn(v3, useKeys ? k3 : reverse5 ? this$1$12.size - ++i4 : i4++, this$1$12);
        },
        !reverse5
      );
    };
    reversedSequence.__iterator = function(type2, reverse5) {
      var i4 = 0;
      reverse5 && ensureSize(collection);
      var iterator = collection.__iterator(ITERATE_ENTRIES, !reverse5);
      return new Iterator(function() {
        var step = iterator.next();
        if (step.done) {
          return step;
        }
        var entry = step.value;
        return iteratorValue(
          type2,
          useKeys ? entry[0] : reverse5 ? this$1$1.size - ++i4 : i4++,
          entry[1],
          step
        );
      });
    };
    return reversedSequence;
  }
  function filterFactory(collection, predicate, context, useKeys) {
    var filterSequence = makeSequence(collection);
    if (useKeys) {
      filterSequence.has = function(key) {
        var v3 = collection.get(key, NOT_SET);
        return v3 !== NOT_SET && !!predicate.call(context, v3, key, collection);
      };
      filterSequence.get = function(key, notSetValue) {
        var v3 = collection.get(key, NOT_SET);
        return v3 !== NOT_SET && predicate.call(context, v3, key, collection) ? v3 : notSetValue;
      };
    }
    filterSequence.__iterateUncached = function(fn, reverse5) {
      var this$1$1 = this;
      var iterations = 0;
      collection.__iterate(function(v3, k3, c3) {
        if (predicate.call(context, v3, k3, c3)) {
          iterations++;
          return fn(v3, useKeys ? k3 : iterations - 1, this$1$1);
        }
      }, reverse5);
      return iterations;
    };
    filterSequence.__iteratorUncached = function(type2, reverse5) {
      var iterator = collection.__iterator(ITERATE_ENTRIES, reverse5);
      var iterations = 0;
      return new Iterator(function() {
        while (true) {
          var step = iterator.next();
          if (step.done) {
            return step;
          }
          var entry = step.value;
          var key = entry[0];
          var value = entry[1];
          if (predicate.call(context, value, key, collection)) {
            return iteratorValue(type2, useKeys ? key : iterations++, value, step);
          }
        }
      });
    };
    return filterSequence;
  }
  function countByFactory(collection, grouper, context) {
    var groups = Map2().asMutable();
    collection.__iterate(function(v3, k3) {
      groups.update(grouper.call(context, v3, k3, collection), 0, function(a4) {
        return a4 + 1;
      });
    });
    return groups.asImmutable();
  }
  function groupByFactory(collection, grouper, context) {
    var isKeyedIter = isKeyed(collection);
    var groups = (isOrdered(collection) ? OrderedMap() : Map2()).asMutable();
    collection.__iterate(function(v3, k3) {
      groups.update(
        grouper.call(context, v3, k3, collection),
        function(a4) {
          return a4 = a4 || [], a4.push(isKeyedIter ? [k3, v3] : v3), a4;
        }
      );
    });
    var coerce = collectionClass(collection);
    return groups.map(function(arr) {
      return reify(collection, coerce(arr));
    }).asImmutable();
  }
  function partitionFactory(collection, predicate, context) {
    var isKeyedIter = isKeyed(collection);
    var groups = [[], []];
    collection.__iterate(function(v3, k3) {
      groups[predicate.call(context, v3, k3, collection) ? 1 : 0].push(
        isKeyedIter ? [k3, v3] : v3
      );
    });
    var coerce = collectionClass(collection);
    return groups.map(function(arr) {
      return reify(collection, coerce(arr));
    });
  }
  function sliceFactory(collection, begin, end, useKeys) {
    var originalSize = collection.size;
    if (wholeSlice(begin, end, originalSize)) {
      return collection;
    }
    if (typeof originalSize === "undefined" && (begin < 0 || end < 0)) {
      return sliceFactory(collection.toSeq().cacheResult(), begin, end, useKeys);
    }
    var resolvedBegin = resolveBegin(begin, originalSize);
    var resolvedEnd = resolveEnd(end, originalSize);
    var resolvedSize = resolvedEnd - resolvedBegin;
    var sliceSize;
    if (resolvedSize === resolvedSize) {
      sliceSize = resolvedSize < 0 ? 0 : resolvedSize;
    }
    var sliceSeq = makeSequence(collection);
    sliceSeq.size = sliceSize === 0 ? sliceSize : collection.size && sliceSize || void 0;
    if (!useKeys && isSeq(collection) && sliceSize >= 0) {
      sliceSeq.get = function(index, notSetValue) {
        index = wrapIndex(this, index);
        return index >= 0 && index < sliceSize ? collection.get(index + resolvedBegin, notSetValue) : notSetValue;
      };
    }
    sliceSeq.__iterateUncached = function(fn, reverse5) {
      var this$1$1 = this;
      if (sliceSize === 0) {
        return 0;
      }
      if (reverse5) {
        return this.cacheResult().__iterate(fn, reverse5);
      }
      var skipped = 0;
      var isSkipping = true;
      var iterations = 0;
      collection.__iterate(function(v3, k3) {
        if (!(isSkipping && (isSkipping = skipped++ < resolvedBegin))) {
          iterations++;
          return fn(v3, useKeys ? k3 : iterations - 1, this$1$1) !== false && iterations !== sliceSize;
        }
      });
      return iterations;
    };
    sliceSeq.__iteratorUncached = function(type2, reverse5) {
      if (sliceSize !== 0 && reverse5) {
        return this.cacheResult().__iterator(type2, reverse5);
      }
      if (sliceSize === 0) {
        return new Iterator(iteratorDone);
      }
      var iterator = collection.__iterator(type2, reverse5);
      var skipped = 0;
      var iterations = 0;
      return new Iterator(function() {
        while (skipped++ < resolvedBegin) {
          iterator.next();
        }
        if (++iterations > sliceSize) {
          return iteratorDone();
        }
        var step = iterator.next();
        if (useKeys || type2 === ITERATE_VALUES || step.done) {
          return step;
        }
        if (type2 === ITERATE_KEYS) {
          return iteratorValue(type2, iterations - 1, void 0, step);
        }
        return iteratorValue(type2, iterations - 1, step.value[1], step);
      });
    };
    return sliceSeq;
  }
  function takeWhileFactory(collection, predicate, context) {
    var takeSequence = makeSequence(collection);
    takeSequence.__iterateUncached = function(fn, reverse5) {
      var this$1$1 = this;
      if (reverse5) {
        return this.cacheResult().__iterate(fn, reverse5);
      }
      var iterations = 0;
      collection.__iterate(
        function(v3, k3, c3) {
          return predicate.call(context, v3, k3, c3) && ++iterations && fn(v3, k3, this$1$1);
        }
      );
      return iterations;
    };
    takeSequence.__iteratorUncached = function(type2, reverse5) {
      var this$1$1 = this;
      if (reverse5) {
        return this.cacheResult().__iterator(type2, reverse5);
      }
      var iterator = collection.__iterator(ITERATE_ENTRIES, reverse5);
      var iterating = true;
      return new Iterator(function() {
        if (!iterating) {
          return iteratorDone();
        }
        var step = iterator.next();
        if (step.done) {
          return step;
        }
        var entry = step.value;
        var k3 = entry[0];
        var v3 = entry[1];
        if (!predicate.call(context, v3, k3, this$1$1)) {
          iterating = false;
          return iteratorDone();
        }
        return type2 === ITERATE_ENTRIES ? step : iteratorValue(type2, k3, v3, step);
      });
    };
    return takeSequence;
  }
  function skipWhileFactory(collection, predicate, context, useKeys) {
    var skipSequence = makeSequence(collection);
    skipSequence.__iterateUncached = function(fn, reverse5) {
      var this$1$1 = this;
      if (reverse5) {
        return this.cacheResult().__iterate(fn, reverse5);
      }
      var isSkipping = true;
      var iterations = 0;
      collection.__iterate(function(v3, k3, c3) {
        if (!(isSkipping && (isSkipping = predicate.call(context, v3, k3, c3)))) {
          iterations++;
          return fn(v3, useKeys ? k3 : iterations - 1, this$1$1);
        }
      });
      return iterations;
    };
    skipSequence.__iteratorUncached = function(type2, reverse5) {
      var this$1$1 = this;
      if (reverse5) {
        return this.cacheResult().__iterator(type2, reverse5);
      }
      var iterator = collection.__iterator(ITERATE_ENTRIES, reverse5);
      var skipping = true;
      var iterations = 0;
      return new Iterator(function() {
        var step;
        var k3;
        var v3;
        do {
          step = iterator.next();
          if (step.done) {
            if (useKeys || type2 === ITERATE_VALUES) {
              return step;
            }
            if (type2 === ITERATE_KEYS) {
              return iteratorValue(type2, iterations++, void 0, step);
            }
            return iteratorValue(type2, iterations++, step.value[1], step);
          }
          var entry = step.value;
          k3 = entry[0];
          v3 = entry[1];
          skipping && (skipping = predicate.call(context, v3, k3, this$1$1));
        } while (skipping);
        return type2 === ITERATE_ENTRIES ? step : iteratorValue(type2, k3, v3, step);
      });
    };
    return skipSequence;
  }
  function concatFactory(collection, values3) {
    var isKeyedCollection = isKeyed(collection);
    var iters = [collection].concat(values3).map(function(v3) {
      if (!isCollection(v3)) {
        v3 = isKeyedCollection ? keyedSeqFromValue(v3) : indexedSeqFromValue(Array.isArray(v3) ? v3 : [v3]);
      } else if (isKeyedCollection) {
        v3 = KeyedCollection(v3);
      }
      return v3;
    }).filter(function(v3) {
      return v3.size !== 0;
    });
    if (iters.length === 0) {
      return collection;
    }
    if (iters.length === 1) {
      var singleton = iters[0];
      if (singleton === collection || isKeyedCollection && isKeyed(singleton) || isIndexed(collection) && isIndexed(singleton)) {
        return singleton;
      }
    }
    var concatSeq = new ArraySeq(iters);
    if (isKeyedCollection) {
      concatSeq = concatSeq.toKeyedSeq();
    } else if (!isIndexed(collection)) {
      concatSeq = concatSeq.toSetSeq();
    }
    concatSeq = concatSeq.flatten(true);
    concatSeq.size = iters.reduce(function(sum, seq) {
      if (sum !== void 0) {
        var size = seq.size;
        if (size !== void 0) {
          return sum + size;
        }
      }
    }, 0);
    return concatSeq;
  }
  function flattenFactory(collection, depth, useKeys) {
    var flatSequence = makeSequence(collection);
    flatSequence.__iterateUncached = function(fn, reverse5) {
      if (reverse5) {
        return this.cacheResult().__iterate(fn, reverse5);
      }
      var iterations = 0;
      var stopped = false;
      function flatDeep(iter, currentDepth) {
        iter.__iterate(function(v3, k3) {
          if ((!depth || currentDepth < depth) && isCollection(v3)) {
            flatDeep(v3, currentDepth + 1);
          } else {
            iterations++;
            if (fn(v3, useKeys ? k3 : iterations - 1, flatSequence) === false) {
              stopped = true;
            }
          }
          return !stopped;
        }, reverse5);
      }
      flatDeep(collection, 0);
      return iterations;
    };
    flatSequence.__iteratorUncached = function(type2, reverse5) {
      if (reverse5) {
        return this.cacheResult().__iterator(type2, reverse5);
      }
      var iterator = collection.__iterator(type2, reverse5);
      var stack = [];
      var iterations = 0;
      return new Iterator(function() {
        while (iterator) {
          var step = iterator.next();
          if (step.done !== false) {
            iterator = stack.pop();
            continue;
          }
          var v3 = step.value;
          if (type2 === ITERATE_ENTRIES) {
            v3 = v3[1];
          }
          if ((!depth || stack.length < depth) && isCollection(v3)) {
            stack.push(iterator);
            iterator = v3.__iterator(type2, reverse5);
          } else {
            return useKeys ? step : iteratorValue(type2, iterations++, v3, step);
          }
        }
        return iteratorDone();
      });
    };
    return flatSequence;
  }
  function flatMapFactory(collection, mapper, context) {
    var coerce = collectionClass(collection);
    return collection.toSeq().map(function(v3, k3) {
      return coerce(mapper.call(context, v3, k3, collection));
    }).flatten(true);
  }
  function interposeFactory(collection, separator) {
    var interposedSequence = makeSequence(collection);
    interposedSequence.size = collection.size && collection.size * 2 - 1;
    interposedSequence.__iterateUncached = function(fn, reverse5) {
      var this$1$1 = this;
      var iterations = 0;
      collection.__iterate(
        function(v3) {
          return (!iterations || fn(separator, iterations++, this$1$1) !== false) && fn(v3, iterations++, this$1$1) !== false;
        },
        reverse5
      );
      return iterations;
    };
    interposedSequence.__iteratorUncached = function(type2, reverse5) {
      var iterator = collection.__iterator(ITERATE_VALUES, reverse5);
      var iterations = 0;
      var step;
      return new Iterator(function() {
        if (!step || iterations % 2) {
          step = iterator.next();
          if (step.done) {
            return step;
          }
        }
        return iterations % 2 ? iteratorValue(type2, iterations++, separator) : iteratorValue(type2, iterations++, step.value, step);
      });
    };
    return interposedSequence;
  }
  function sortFactory(collection, comparator, mapper) {
    if (!comparator) {
      comparator = defaultComparator;
    }
    var isKeyedCollection = isKeyed(collection);
    var index = 0;
    var entries5 = collection.toSeq().map(function(v3, k3) {
      return [k3, v3, index++, mapper ? mapper(v3, k3, collection) : v3];
    }).valueSeq().toArray();
    entries5.sort(function(a4, b3) {
      return comparator(a4[3], b3[3]) || a4[2] - b3[2];
    }).forEach(
      isKeyedCollection ? function(v3, i4) {
        entries5[i4].length = 2;
      } : function(v3, i4) {
        entries5[i4] = v3[1];
      }
    );
    return isKeyedCollection ? KeyedSeq(entries5) : isIndexed(collection) ? IndexedSeq(entries5) : SetSeq(entries5);
  }
  function maxFactory(collection, comparator, mapper) {
    if (!comparator) {
      comparator = defaultComparator;
    }
    if (mapper) {
      var entry = collection.toSeq().map(function(v3, k3) {
        return [v3, mapper(v3, k3, collection)];
      }).reduce(function(a4, b3) {
        return maxCompare(comparator, a4[1], b3[1]) ? b3 : a4;
      });
      return entry && entry[0];
    }
    return collection.reduce(function(a4, b3) {
      return maxCompare(comparator, a4, b3) ? b3 : a4;
    });
  }
  function maxCompare(comparator, a4, b3) {
    var comp = comparator(b3, a4);
    return comp === 0 && b3 !== a4 && (b3 === void 0 || b3 === null || b3 !== b3) || comp > 0;
  }
  function zipWithFactory(keyIter, zipper, iters, zipAll3) {
    var zipSequence = makeSequence(keyIter);
    var sizes = new ArraySeq(iters).map(function(i4) {
      return i4.size;
    });
    zipSequence.size = zipAll3 ? sizes.max() : sizes.min();
    zipSequence.__iterate = function(fn, reverse5) {
      var iterator = this.__iterator(ITERATE_VALUES, reverse5);
      var step;
      var iterations = 0;
      while (!(step = iterator.next()).done) {
        if (fn(step.value, iterations++, this) === false) {
          break;
        }
      }
      return iterations;
    };
    zipSequence.__iteratorUncached = function(type2, reverse5) {
      var iterators = iters.map(
        function(i4) {
          return i4 = Collection(i4), getIterator(reverse5 ? i4.reverse() : i4);
        }
      );
      var iterations = 0;
      var isDone = false;
      return new Iterator(function() {
        var steps;
        if (!isDone) {
          steps = iterators.map(function(i4) {
            return i4.next();
          });
          isDone = zipAll3 ? steps.every(function(s3) {
            return s3.done;
          }) : steps.some(function(s3) {
            return s3.done;
          });
        }
        if (isDone) {
          return iteratorDone();
        }
        return iteratorValue(
          type2,
          iterations++,
          zipper.apply(
            null,
            steps.map(function(s3) {
              return s3.value;
            })
          )
        );
      });
    };
    return zipSequence;
  }
  function reify(iter, seq) {
    return iter === seq ? iter : isSeq(iter) ? seq : iter.constructor(seq);
  }
  function validateEntry(entry) {
    if (entry !== Object(entry)) {
      throw new TypeError("Expected [K, V] tuple: " + entry);
    }
  }
  function collectionClass(collection) {
    return isKeyed(collection) ? KeyedCollection : isIndexed(collection) ? IndexedCollection : SetCollection;
  }
  function makeSequence(collection) {
    return Object.create(
      (isKeyed(collection) ? KeyedSeq : isIndexed(collection) ? IndexedSeq : SetSeq).prototype
    );
  }
  function cacheResultThrough() {
    if (this._iter.cacheResult) {
      this._iter.cacheResult();
      this.size = this._iter.size;
      return this;
    }
    return Seq.prototype.cacheResult.call(this);
  }
  function defaultComparator(a4, b3) {
    if (a4 === void 0 && b3 === void 0) {
      return 0;
    }
    if (a4 === void 0) {
      return 1;
    }
    if (b3 === void 0) {
      return -1;
    }
    return a4 > b3 ? 1 : a4 < b3 ? -1 : 0;
  }
  function arrCopy(arr, offset) {
    offset = offset || 0;
    var len = Math.max(0, arr.length - offset);
    var newArr = new Array(len);
    for (var ii = 0; ii < len; ii++) {
      newArr[ii] = arr[ii + offset];
    }
    return newArr;
  }
  function invariant(condition, error) {
    if (!condition) {
      throw new Error(error);
    }
  }
  function assertNotInfinite(size) {
    invariant(
      size !== Infinity,
      "Cannot perform this action with an infinite size."
    );
  }
  function coerceKeyPath(keyPath) {
    if (isArrayLike(keyPath) && typeof keyPath !== "string") {
      return keyPath;
    }
    if (isOrdered(keyPath)) {
      return keyPath.toArray();
    }
    throw new TypeError(
      "Invalid keyPath: expected Ordered Collection or Array: " + keyPath
    );
  }
  var toString2 = Object.prototype.toString;
  function isPlainObject(value) {
    if (!value || typeof value !== "object" || toString2.call(value) !== "[object Object]") {
      return false;
    }
    var proto = Object.getPrototypeOf(value);
    if (proto === null) {
      return true;
    }
    var parentProto = proto;
    var nextProto = Object.getPrototypeOf(proto);
    while (nextProto !== null) {
      parentProto = nextProto;
      nextProto = Object.getPrototypeOf(parentProto);
    }
    return parentProto === proto;
  }
  function isDataStructure(value) {
    return typeof value === "object" && (isImmutable(value) || Array.isArray(value) || isPlainObject(value));
  }
  function quoteString(value) {
    try {
      return typeof value === "string" ? JSON.stringify(value) : String(value);
    } catch (_ignoreError) {
      return JSON.stringify(value);
    }
  }
  function has(collection, key) {
    return isImmutable(collection) ? collection.has(key) : isDataStructure(collection) && hasOwnProperty.call(collection, key);
  }
  function get(collection, key, notSetValue) {
    return isImmutable(collection) ? collection.get(key, notSetValue) : !has(collection, key) ? notSetValue : typeof collection.get === "function" ? collection.get(key) : collection[key];
  }
  function shallowCopy(from) {
    if (Array.isArray(from)) {
      return arrCopy(from);
    }
    var to = {};
    for (var key in from) {
      if (hasOwnProperty.call(from, key)) {
        to[key] = from[key];
      }
    }
    return to;
  }
  function remove(collection, key) {
    if (!isDataStructure(collection)) {
      throw new TypeError(
        "Cannot update non-data-structure value: " + collection
      );
    }
    if (isImmutable(collection)) {
      if (!collection.remove) {
        throw new TypeError(
          "Cannot update immutable value without .remove() method: " + collection
        );
      }
      return collection.remove(key);
    }
    if (!hasOwnProperty.call(collection, key)) {
      return collection;
    }
    var collectionCopy = shallowCopy(collection);
    if (Array.isArray(collectionCopy)) {
      collectionCopy.splice(key, 1);
    } else {
      delete collectionCopy[key];
    }
    return collectionCopy;
  }
  function set(collection, key, value) {
    if (!isDataStructure(collection)) {
      throw new TypeError(
        "Cannot update non-data-structure value: " + collection
      );
    }
    if (isImmutable(collection)) {
      if (!collection.set) {
        throw new TypeError(
          "Cannot update immutable value without .set() method: " + collection
        );
      }
      return collection.set(key, value);
    }
    if (hasOwnProperty.call(collection, key) && value === collection[key]) {
      return collection;
    }
    var collectionCopy = shallowCopy(collection);
    collectionCopy[key] = value;
    return collectionCopy;
  }
  function updateIn$1(collection, keyPath, notSetValue, updater) {
    if (!updater) {
      updater = notSetValue;
      notSetValue = void 0;
    }
    var updatedValue = updateInDeeply(
      isImmutable(collection),
      collection,
      coerceKeyPath(keyPath),
      0,
      notSetValue,
      updater
    );
    return updatedValue === NOT_SET ? notSetValue : updatedValue;
  }
  function updateInDeeply(inImmutable, existing, keyPath, i4, notSetValue, updater) {
    var wasNotSet = existing === NOT_SET;
    if (i4 === keyPath.length) {
      var existingValue = wasNotSet ? notSetValue : existing;
      var newValue = updater(existingValue);
      return newValue === existingValue ? existing : newValue;
    }
    if (!wasNotSet && !isDataStructure(existing)) {
      throw new TypeError(
        "Cannot update within non-data-structure value in path [" + keyPath.slice(0, i4).map(quoteString) + "]: " + existing
      );
    }
    var key = keyPath[i4];
    var nextExisting = wasNotSet ? NOT_SET : get(existing, key, NOT_SET);
    var nextUpdated = updateInDeeply(
      nextExisting === NOT_SET ? inImmutable : isImmutable(nextExisting),
      nextExisting,
      keyPath,
      i4 + 1,
      notSetValue,
      updater
    );
    return nextUpdated === nextExisting ? existing : nextUpdated === NOT_SET ? remove(existing, key) : set(
      wasNotSet ? inImmutable ? emptyMap() : {} : existing,
      key,
      nextUpdated
    );
  }
  function setIn$1(collection, keyPath, value) {
    return updateIn$1(collection, keyPath, NOT_SET, function() {
      return value;
    });
  }
  function setIn(keyPath, v3) {
    return setIn$1(this, keyPath, v3);
  }
  function removeIn(collection, keyPath) {
    return updateIn$1(collection, keyPath, function() {
      return NOT_SET;
    });
  }
  function deleteIn(keyPath) {
    return removeIn(this, keyPath);
  }
  function update$1(collection, key, notSetValue, updater) {
    return updateIn$1(collection, [key], notSetValue, updater);
  }
  function update(key, notSetValue, updater) {
    return arguments.length === 1 ? key(this) : update$1(this, key, notSetValue, updater);
  }
  function updateIn(keyPath, notSetValue, updater) {
    return updateIn$1(this, keyPath, notSetValue, updater);
  }
  function merge$1() {
    var iters = [], len = arguments.length;
    while (len--)
      iters[len] = arguments[len];
    return mergeIntoKeyedWith(this, iters);
  }
  function mergeWith$1(merger) {
    var iters = [], len = arguments.length - 1;
    while (len-- > 0)
      iters[len] = arguments[len + 1];
    if (typeof merger !== "function") {
      throw new TypeError("Invalid merger function: " + merger);
    }
    return mergeIntoKeyedWith(this, iters, merger);
  }
  function mergeIntoKeyedWith(collection, collections, merger) {
    var iters = [];
    for (var ii = 0; ii < collections.length; ii++) {
      var collection$1 = KeyedCollection(collections[ii]);
      if (collection$1.size !== 0) {
        iters.push(collection$1);
      }
    }
    if (iters.length === 0) {
      return collection;
    }
    if (collection.toSeq().size === 0 && !collection.__ownerID && iters.length === 1) {
      return collection.constructor(iters[0]);
    }
    return collection.withMutations(function(collection2) {
      var mergeIntoCollection = merger ? function(value, key) {
        update$1(
          collection2,
          key,
          NOT_SET,
          function(oldVal) {
            return oldVal === NOT_SET ? value : merger(oldVal, value, key);
          }
        );
      } : function(value, key) {
        collection2.set(key, value);
      };
      for (var ii2 = 0; ii2 < iters.length; ii2++) {
        iters[ii2].forEach(mergeIntoCollection);
      }
    });
  }
  function mergeDeepWithSources(collection, sources, merger) {
    return mergeWithSources(collection, sources, deepMergerWith(merger));
  }
  function mergeWithSources(collection, sources, merger) {
    if (!isDataStructure(collection)) {
      throw new TypeError(
        "Cannot merge into non-data-structure value: " + collection
      );
    }
    if (isImmutable(collection)) {
      return typeof merger === "function" && collection.mergeWith ? collection.mergeWith.apply(collection, [merger].concat(sources)) : collection.merge ? collection.merge.apply(collection, sources) : collection.concat.apply(collection, sources);
    }
    var isArray = Array.isArray(collection);
    var merged = collection;
    var Collection5 = isArray ? IndexedCollection : KeyedCollection;
    var mergeItem = isArray ? function(value) {
      if (merged === collection) {
        merged = shallowCopy(merged);
      }
      merged.push(value);
    } : function(value, key) {
      var hasVal = hasOwnProperty.call(merged, key);
      var nextVal = hasVal && merger ? merger(merged[key], value, key) : value;
      if (!hasVal || nextVal !== merged[key]) {
        if (merged === collection) {
          merged = shallowCopy(merged);
        }
        merged[key] = nextVal;
      }
    };
    for (var i4 = 0; i4 < sources.length; i4++) {
      Collection5(sources[i4]).forEach(mergeItem);
    }
    return merged;
  }
  function deepMergerWith(merger) {
    function deepMerger(oldValue, newValue, key) {
      return isDataStructure(oldValue) && isDataStructure(newValue) && areMergeable(oldValue, newValue) ? mergeWithSources(oldValue, [newValue], deepMerger) : merger ? merger(oldValue, newValue, key) : newValue;
    }
    return deepMerger;
  }
  function areMergeable(oldDataStructure, newDataStructure) {
    var oldSeq = Seq(oldDataStructure);
    var newSeq = Seq(newDataStructure);
    return isIndexed(oldSeq) === isIndexed(newSeq) && isKeyed(oldSeq) === isKeyed(newSeq);
  }
  function mergeDeep() {
    var iters = [], len = arguments.length;
    while (len--)
      iters[len] = arguments[len];
    return mergeDeepWithSources(this, iters);
  }
  function mergeDeepWith(merger) {
    var iters = [], len = arguments.length - 1;
    while (len-- > 0)
      iters[len] = arguments[len + 1];
    return mergeDeepWithSources(this, iters, merger);
  }
  function mergeIn(keyPath) {
    var iters = [], len = arguments.length - 1;
    while (len-- > 0)
      iters[len] = arguments[len + 1];
    return updateIn$1(this, keyPath, emptyMap(), function(m3) {
      return mergeWithSources(m3, iters);
    });
  }
  function mergeDeepIn(keyPath) {
    var iters = [], len = arguments.length - 1;
    while (len-- > 0)
      iters[len] = arguments[len + 1];
    return updateIn$1(
      this,
      keyPath,
      emptyMap(),
      function(m3) {
        return mergeDeepWithSources(m3, iters);
      }
    );
  }
  function withMutations(fn) {
    var mutable = this.asMutable();
    fn(mutable);
    return mutable.wasAltered() ? mutable.__ensureOwner(this.__ownerID) : this;
  }
  function asMutable() {
    return this.__ownerID ? this : this.__ensureOwner(new OwnerID());
  }
  function asImmutable() {
    return this.__ensureOwner();
  }
  function wasAltered() {
    return this.__altered;
  }
  var Map2 = /* @__PURE__ */ function(KeyedCollection3) {
    function Map4(value) {
      return value === void 0 || value === null ? emptyMap() : isMap(value) && !isOrdered(value) ? value : emptyMap().withMutations(function(map5) {
        var iter = KeyedCollection3(value);
        assertNotInfinite(iter.size);
        iter.forEach(function(v3, k3) {
          return map5.set(k3, v3);
        });
      });
    }
    if (KeyedCollection3)
      Map4.__proto__ = KeyedCollection3;
    Map4.prototype = Object.create(KeyedCollection3 && KeyedCollection3.prototype);
    Map4.prototype.constructor = Map4;
    Map4.prototype.toString = function toString8() {
      return this.__toString("Map {", "}");
    };
    Map4.prototype.get = function get24(k3, notSetValue) {
      return this._root ? this._root.get(0, void 0, k3, notSetValue) : notSetValue;
    };
    Map4.prototype.set = function set7(k3, v3) {
      return updateMap(this, k3, v3);
    };
    Map4.prototype.remove = function remove7(k3) {
      return updateMap(this, k3, NOT_SET);
    };
    Map4.prototype.deleteAll = function deleteAll(keys3) {
      var collection = Collection(keys3);
      if (collection.size === 0) {
        return this;
      }
      return this.withMutations(function(map5) {
        collection.forEach(function(key) {
          return map5.remove(key);
        });
      });
    };
    Map4.prototype.clear = function clear3() {
      if (this.size === 0) {
        return this;
      }
      if (this.__ownerID) {
        this.size = 0;
        this._root = null;
        this.__hash = void 0;
        this.__altered = true;
        return this;
      }
      return emptyMap();
    };
    Map4.prototype.sort = function sort3(comparator) {
      return OrderedMap(sortFactory(this, comparator));
    };
    Map4.prototype.sortBy = function sortBy3(mapper, comparator) {
      return OrderedMap(sortFactory(this, comparator, mapper));
    };
    Map4.prototype.map = function map5(mapper, context) {
      var this$1$1 = this;
      return this.withMutations(function(map6) {
        map6.forEach(function(value, key) {
          map6.set(key, mapper.call(context, value, key, this$1$1));
        });
      });
    };
    Map4.prototype.__iterator = function __iterator3(type2, reverse5) {
      return new MapIterator(this, type2, reverse5);
    };
    Map4.prototype.__iterate = function __iterate3(fn, reverse5) {
      var this$1$1 = this;
      var iterations = 0;
      this._root && this._root.iterate(function(entry) {
        iterations++;
        return fn(entry[1], entry[0], this$1$1);
      }, reverse5);
      return iterations;
    };
    Map4.prototype.__ensureOwner = function __ensureOwner3(ownerID) {
      if (ownerID === this.__ownerID) {
        return this;
      }
      if (!ownerID) {
        if (this.size === 0) {
          return emptyMap();
        }
        this.__ownerID = ownerID;
        this.__altered = false;
        return this;
      }
      return makeMap(this.size, this._root, ownerID, this.__hash);
    };
    return Map4;
  }(KeyedCollection);
  Map2.isMap = isMap;
  var MapPrototype = Map2.prototype;
  MapPrototype[IS_MAP_SYMBOL] = true;
  MapPrototype[DELETE] = MapPrototype.remove;
  MapPrototype.removeAll = MapPrototype.deleteAll;
  MapPrototype.setIn = setIn;
  MapPrototype.removeIn = MapPrototype.deleteIn = deleteIn;
  MapPrototype.update = update;
  MapPrototype.updateIn = updateIn;
  MapPrototype.merge = MapPrototype.concat = merge$1;
  MapPrototype.mergeWith = mergeWith$1;
  MapPrototype.mergeDeep = mergeDeep;
  MapPrototype.mergeDeepWith = mergeDeepWith;
  MapPrototype.mergeIn = mergeIn;
  MapPrototype.mergeDeepIn = mergeDeepIn;
  MapPrototype.withMutations = withMutations;
  MapPrototype.wasAltered = wasAltered;
  MapPrototype.asImmutable = asImmutable;
  MapPrototype["@@transducer/init"] = MapPrototype.asMutable = asMutable;
  MapPrototype["@@transducer/step"] = function(result, arr) {
    return result.set(arr[0], arr[1]);
  };
  MapPrototype["@@transducer/result"] = function(obj) {
    return obj.asImmutable();
  };
  var ArrayMapNode = function ArrayMapNode2(ownerID, entries5) {
    this.ownerID = ownerID;
    this.entries = entries5;
  };
  ArrayMapNode.prototype.get = function get2(shift, keyHash, key, notSetValue) {
    var entries5 = this.entries;
    for (var ii = 0, len = entries5.length; ii < len; ii++) {
      if (is(key, entries5[ii][0])) {
        return entries5[ii][1];
      }
    }
    return notSetValue;
  };
  ArrayMapNode.prototype.update = function update2(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {
    var removed = value === NOT_SET;
    var entries5 = this.entries;
    var idx = 0;
    var len = entries5.length;
    for (; idx < len; idx++) {
      if (is(key, entries5[idx][0])) {
        break;
      }
    }
    var exists = idx < len;
    if (exists ? entries5[idx][1] === value : removed) {
      return this;
    }
    SetRef(didAlter);
    (removed || !exists) && SetRef(didChangeSize);
    if (removed && entries5.length === 1) {
      return;
    }
    if (!exists && !removed && entries5.length >= MAX_ARRAY_MAP_SIZE) {
      return createNodes(ownerID, entries5, key, value);
    }
    var isEditable = ownerID && ownerID === this.ownerID;
    var newEntries = isEditable ? entries5 : arrCopy(entries5);
    if (exists) {
      if (removed) {
        idx === len - 1 ? newEntries.pop() : newEntries[idx] = newEntries.pop();
      } else {
        newEntries[idx] = [key, value];
      }
    } else {
      newEntries.push([key, value]);
    }
    if (isEditable) {
      this.entries = newEntries;
      return this;
    }
    return new ArrayMapNode(ownerID, newEntries);
  };
  var BitmapIndexedNode = function BitmapIndexedNode2(ownerID, bitmap, nodes) {
    this.ownerID = ownerID;
    this.bitmap = bitmap;
    this.nodes = nodes;
  };
  BitmapIndexedNode.prototype.get = function get3(shift, keyHash, key, notSetValue) {
    if (keyHash === void 0) {
      keyHash = hash(key);
    }
    var bit = 1 << ((shift === 0 ? keyHash : keyHash >>> shift) & MASK);
    var bitmap = this.bitmap;
    return (bitmap & bit) === 0 ? notSetValue : this.nodes[popCount(bitmap & bit - 1)].get(
      shift + SHIFT,
      keyHash,
      key,
      notSetValue
    );
  };
  BitmapIndexedNode.prototype.update = function update3(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {
    if (keyHash === void 0) {
      keyHash = hash(key);
    }
    var keyHashFrag = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;
    var bit = 1 << keyHashFrag;
    var bitmap = this.bitmap;
    var exists = (bitmap & bit) !== 0;
    if (!exists && value === NOT_SET) {
      return this;
    }
    var idx = popCount(bitmap & bit - 1);
    var nodes = this.nodes;
    var node = exists ? nodes[idx] : void 0;
    var newNode = updateNode(
      node,
      ownerID,
      shift + SHIFT,
      keyHash,
      key,
      value,
      didChangeSize,
      didAlter
    );
    if (newNode === node) {
      return this;
    }
    if (!exists && newNode && nodes.length >= MAX_BITMAP_INDEXED_SIZE) {
      return expandNodes(ownerID, nodes, bitmap, keyHashFrag, newNode);
    }
    if (exists && !newNode && nodes.length === 2 && isLeafNode(nodes[idx ^ 1])) {
      return nodes[idx ^ 1];
    }
    if (exists && newNode && nodes.length === 1 && isLeafNode(newNode)) {
      return newNode;
    }
    var isEditable = ownerID && ownerID === this.ownerID;
    var newBitmap = exists ? newNode ? bitmap : bitmap ^ bit : bitmap | bit;
    var newNodes = exists ? newNode ? setAt(nodes, idx, newNode, isEditable) : spliceOut(nodes, idx, isEditable) : spliceIn(nodes, idx, newNode, isEditable);
    if (isEditable) {
      this.bitmap = newBitmap;
      this.nodes = newNodes;
      return this;
    }
    return new BitmapIndexedNode(ownerID, newBitmap, newNodes);
  };
  var HashArrayMapNode = function HashArrayMapNode2(ownerID, count4, nodes) {
    this.ownerID = ownerID;
    this.count = count4;
    this.nodes = nodes;
  };
  HashArrayMapNode.prototype.get = function get4(shift, keyHash, key, notSetValue) {
    if (keyHash === void 0) {
      keyHash = hash(key);
    }
    var idx = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;
    var node = this.nodes[idx];
    return node ? node.get(shift + SHIFT, keyHash, key, notSetValue) : notSetValue;
  };
  HashArrayMapNode.prototype.update = function update4(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {
    if (keyHash === void 0) {
      keyHash = hash(key);
    }
    var idx = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;
    var removed = value === NOT_SET;
    var nodes = this.nodes;
    var node = nodes[idx];
    if (removed && !node) {
      return this;
    }
    var newNode = updateNode(
      node,
      ownerID,
      shift + SHIFT,
      keyHash,
      key,
      value,
      didChangeSize,
      didAlter
    );
    if (newNode === node) {
      return this;
    }
    var newCount = this.count;
    if (!node) {
      newCount++;
    } else if (!newNode) {
      newCount--;
      if (newCount < MIN_HASH_ARRAY_MAP_SIZE) {
        return packNodes(ownerID, nodes, newCount, idx);
      }
    }
    var isEditable = ownerID && ownerID === this.ownerID;
    var newNodes = setAt(nodes, idx, newNode, isEditable);
    if (isEditable) {
      this.count = newCount;
      this.nodes = newNodes;
      return this;
    }
    return new HashArrayMapNode(ownerID, newCount, newNodes);
  };
  var HashCollisionNode = function HashCollisionNode2(ownerID, keyHash, entries5) {
    this.ownerID = ownerID;
    this.keyHash = keyHash;
    this.entries = entries5;
  };
  HashCollisionNode.prototype.get = function get5(shift, keyHash, key, notSetValue) {
    var entries5 = this.entries;
    for (var ii = 0, len = entries5.length; ii < len; ii++) {
      if (is(key, entries5[ii][0])) {
        return entries5[ii][1];
      }
    }
    return notSetValue;
  };
  HashCollisionNode.prototype.update = function update5(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {
    if (keyHash === void 0) {
      keyHash = hash(key);
    }
    var removed = value === NOT_SET;
    if (keyHash !== this.keyHash) {
      if (removed) {
        return this;
      }
      SetRef(didAlter);
      SetRef(didChangeSize);
      return mergeIntoNode(this, ownerID, shift, keyHash, [key, value]);
    }
    var entries5 = this.entries;
    var idx = 0;
    var len = entries5.length;
    for (; idx < len; idx++) {
      if (is(key, entries5[idx][0])) {
        break;
      }
    }
    var exists = idx < len;
    if (exists ? entries5[idx][1] === value : removed) {
      return this;
    }
    SetRef(didAlter);
    (removed || !exists) && SetRef(didChangeSize);
    if (removed && len === 2) {
      return new ValueNode(ownerID, this.keyHash, entries5[idx ^ 1]);
    }
    var isEditable = ownerID && ownerID === this.ownerID;
    var newEntries = isEditable ? entries5 : arrCopy(entries5);
    if (exists) {
      if (removed) {
        idx === len - 1 ? newEntries.pop() : newEntries[idx] = newEntries.pop();
      } else {
        newEntries[idx] = [key, value];
      }
    } else {
      newEntries.push([key, value]);
    }
    if (isEditable) {
      this.entries = newEntries;
      return this;
    }
    return new HashCollisionNode(ownerID, this.keyHash, newEntries);
  };
  var ValueNode = function ValueNode2(ownerID, keyHash, entry) {
    this.ownerID = ownerID;
    this.keyHash = keyHash;
    this.entry = entry;
  };
  ValueNode.prototype.get = function get6(shift, keyHash, key, notSetValue) {
    return is(key, this.entry[0]) ? this.entry[1] : notSetValue;
  };
  ValueNode.prototype.update = function update6(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {
    var removed = value === NOT_SET;
    var keyMatch = is(key, this.entry[0]);
    if (keyMatch ? value === this.entry[1] : removed) {
      return this;
    }
    SetRef(didAlter);
    if (removed) {
      SetRef(didChangeSize);
      return;
    }
    if (keyMatch) {
      if (ownerID && ownerID === this.ownerID) {
        this.entry[1] = value;
        return this;
      }
      return new ValueNode(ownerID, this.keyHash, [key, value]);
    }
    SetRef(didChangeSize);
    return mergeIntoNode(this, ownerID, shift, hash(key), [key, value]);
  };
  ArrayMapNode.prototype.iterate = HashCollisionNode.prototype.iterate = function(fn, reverse5) {
    var entries5 = this.entries;
    for (var ii = 0, maxIndex = entries5.length - 1; ii <= maxIndex; ii++) {
      if (fn(entries5[reverse5 ? maxIndex - ii : ii]) === false) {
        return false;
      }
    }
  };
  BitmapIndexedNode.prototype.iterate = HashArrayMapNode.prototype.iterate = function(fn, reverse5) {
    var nodes = this.nodes;
    for (var ii = 0, maxIndex = nodes.length - 1; ii <= maxIndex; ii++) {
      var node = nodes[reverse5 ? maxIndex - ii : ii];
      if (node && node.iterate(fn, reverse5) === false) {
        return false;
      }
    }
  };
  ValueNode.prototype.iterate = function(fn, reverse5) {
    return fn(this.entry);
  };
  var MapIterator = /* @__PURE__ */ function(Iterator5) {
    function MapIterator3(map5, type2, reverse5) {
      this._type = type2;
      this._reverse = reverse5;
      this._stack = map5._root && mapIteratorFrame(map5._root);
    }
    if (Iterator5)
      MapIterator3.__proto__ = Iterator5;
    MapIterator3.prototype = Object.create(Iterator5 && Iterator5.prototype);
    MapIterator3.prototype.constructor = MapIterator3;
    MapIterator3.prototype.next = function next() {
      var type2 = this._type;
      var stack = this._stack;
      while (stack) {
        var node = stack.node;
        var index = stack.index++;
        var maxIndex = void 0;
        if (node.entry) {
          if (index === 0) {
            return mapIteratorValue(type2, node.entry);
          }
        } else if (node.entries) {
          maxIndex = node.entries.length - 1;
          if (index <= maxIndex) {
            return mapIteratorValue(
              type2,
              node.entries[this._reverse ? maxIndex - index : index]
            );
          }
        } else {
          maxIndex = node.nodes.length - 1;
          if (index <= maxIndex) {
            var subNode = node.nodes[this._reverse ? maxIndex - index : index];
            if (subNode) {
              if (subNode.entry) {
                return mapIteratorValue(type2, subNode.entry);
              }
              stack = this._stack = mapIteratorFrame(subNode, stack);
            }
            continue;
          }
        }
        stack = this._stack = this._stack.__prev;
      }
      return iteratorDone();
    };
    return MapIterator3;
  }(Iterator);
  function mapIteratorValue(type2, entry) {
    return iteratorValue(type2, entry[0], entry[1]);
  }
  function mapIteratorFrame(node, prev) {
    return {
      node,
      index: 0,
      __prev: prev
    };
  }
  function makeMap(size, root2, ownerID, hash3) {
    var map5 = Object.create(MapPrototype);
    map5.size = size;
    map5._root = root2;
    map5.__ownerID = ownerID;
    map5.__hash = hash3;
    map5.__altered = false;
    return map5;
  }
  var EMPTY_MAP;
  function emptyMap() {
    return EMPTY_MAP || (EMPTY_MAP = makeMap(0));
  }
  function updateMap(map5, k3, v3) {
    var newRoot;
    var newSize;
    if (!map5._root) {
      if (v3 === NOT_SET) {
        return map5;
      }
      newSize = 1;
      newRoot = new ArrayMapNode(map5.__ownerID, [[k3, v3]]);
    } else {
      var didChangeSize = MakeRef();
      var didAlter = MakeRef();
      newRoot = updateNode(
        map5._root,
        map5.__ownerID,
        0,
        void 0,
        k3,
        v3,
        didChangeSize,
        didAlter
      );
      if (!didAlter.value) {
        return map5;
      }
      newSize = map5.size + (didChangeSize.value ? v3 === NOT_SET ? -1 : 1 : 0);
    }
    if (map5.__ownerID) {
      map5.size = newSize;
      map5._root = newRoot;
      map5.__hash = void 0;
      map5.__altered = true;
      return map5;
    }
    return newRoot ? makeMap(newSize, newRoot) : emptyMap();
  }
  function updateNode(node, ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {
    if (!node) {
      if (value === NOT_SET) {
        return node;
      }
      SetRef(didAlter);
      SetRef(didChangeSize);
      return new ValueNode(ownerID, keyHash, [key, value]);
    }
    return node.update(
      ownerID,
      shift,
      keyHash,
      key,
      value,
      didChangeSize,
      didAlter
    );
  }
  function isLeafNode(node) {
    return node.constructor === ValueNode || node.constructor === HashCollisionNode;
  }
  function mergeIntoNode(node, ownerID, shift, keyHash, entry) {
    if (node.keyHash === keyHash) {
      return new HashCollisionNode(ownerID, keyHash, [node.entry, entry]);
    }
    var idx1 = (shift === 0 ? node.keyHash : node.keyHash >>> shift) & MASK;
    var idx2 = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;
    var newNode;
    var nodes = idx1 === idx2 ? [mergeIntoNode(node, ownerID, shift + SHIFT, keyHash, entry)] : (newNode = new ValueNode(ownerID, keyHash, entry), idx1 < idx2 ? [node, newNode] : [newNode, node]);
    return new BitmapIndexedNode(ownerID, 1 << idx1 | 1 << idx2, nodes);
  }
  function createNodes(ownerID, entries5, key, value) {
    if (!ownerID) {
      ownerID = new OwnerID();
    }
    var node = new ValueNode(ownerID, hash(key), [key, value]);
    for (var ii = 0; ii < entries5.length; ii++) {
      var entry = entries5[ii];
      node = node.update(ownerID, 0, void 0, entry[0], entry[1]);
    }
    return node;
  }
  function packNodes(ownerID, nodes, count4, excluding) {
    var bitmap = 0;
    var packedII = 0;
    var packedNodes = new Array(count4);
    for (var ii = 0, bit = 1, len = nodes.length; ii < len; ii++, bit <<= 1) {
      var node = nodes[ii];
      if (node !== void 0 && ii !== excluding) {
        bitmap |= bit;
        packedNodes[packedII++] = node;
      }
    }
    return new BitmapIndexedNode(ownerID, bitmap, packedNodes);
  }
  function expandNodes(ownerID, nodes, bitmap, including, node) {
    var count4 = 0;
    var expandedNodes = new Array(SIZE);
    for (var ii = 0; bitmap !== 0; ii++, bitmap >>>= 1) {
      expandedNodes[ii] = bitmap & 1 ? nodes[count4++] : void 0;
    }
    expandedNodes[including] = node;
    return new HashArrayMapNode(ownerID, count4 + 1, expandedNodes);
  }
  function popCount(x3) {
    x3 -= x3 >> 1 & 1431655765;
    x3 = (x3 & 858993459) + (x3 >> 2 & 858993459);
    x3 = x3 + (x3 >> 4) & 252645135;
    x3 += x3 >> 8;
    x3 += x3 >> 16;
    return x3 & 127;
  }
  function setAt(array3, idx, val, canEdit) {
    var newArray = canEdit ? array3 : arrCopy(array3);
    newArray[idx] = val;
    return newArray;
  }
  function spliceIn(array3, idx, val, canEdit) {
    var newLen = array3.length + 1;
    if (canEdit && idx + 1 === newLen) {
      array3[idx] = val;
      return array3;
    }
    var newArray = new Array(newLen);
    var after = 0;
    for (var ii = 0; ii < newLen; ii++) {
      if (ii === idx) {
        newArray[ii] = val;
        after = -1;
      } else {
        newArray[ii] = array3[ii + after];
      }
    }
    return newArray;
  }
  function spliceOut(array3, idx, canEdit) {
    var newLen = array3.length - 1;
    if (canEdit && idx === newLen) {
      array3.pop();
      return array3;
    }
    var newArray = new Array(newLen);
    var after = 0;
    for (var ii = 0; ii < newLen; ii++) {
      if (ii === idx) {
        after = 1;
      }
      newArray[ii] = array3[ii + after];
    }
    return newArray;
  }
  var MAX_ARRAY_MAP_SIZE = SIZE / 4;
  var MAX_BITMAP_INDEXED_SIZE = SIZE / 2;
  var MIN_HASH_ARRAY_MAP_SIZE = SIZE / 4;
  var IS_LIST_SYMBOL = "@@__IMMUTABLE_LIST__@@";
  function isList(maybeList) {
    return Boolean(maybeList && maybeList[IS_LIST_SYMBOL]);
  }
  var List = /* @__PURE__ */ function(IndexedCollection3) {
    function List3(value) {
      var empty2 = emptyList();
      if (value === void 0 || value === null) {
        return empty2;
      }
      if (isList(value)) {
        return value;
      }
      var iter = IndexedCollection3(value);
      var size = iter.size;
      if (size === 0) {
        return empty2;
      }
      assertNotInfinite(size);
      if (size > 0 && size < SIZE) {
        return makeList(0, size, SHIFT, null, new VNode(iter.toArray()));
      }
      return empty2.withMutations(function(list) {
        list.setSize(size);
        iter.forEach(function(v3, i4) {
          return list.set(i4, v3);
        });
      });
    }
    if (IndexedCollection3)
      List3.__proto__ = IndexedCollection3;
    List3.prototype = Object.create(IndexedCollection3 && IndexedCollection3.prototype);
    List3.prototype.constructor = List3;
    List3.of = function of() {
      return this(arguments);
    };
    List3.prototype.toString = function toString8() {
      return this.__toString("List [", "]");
    };
    List3.prototype.get = function get24(index, notSetValue) {
      index = wrapIndex(this, index);
      if (index >= 0 && index < this.size) {
        index += this._origin;
        var node = listNodeFor(this, index);
        return node && node.array[index & MASK];
      }
      return notSetValue;
    };
    List3.prototype.set = function set7(index, value) {
      return updateList(this, index, value);
    };
    List3.prototype.remove = function remove7(index) {
      return !this.has(index) ? this : index === 0 ? this.shift() : index === this.size - 1 ? this.pop() : this.splice(index, 1);
    };
    List3.prototype.insert = function insert(index, value) {
      return this.splice(index, 0, value);
    };
    List3.prototype.clear = function clear3() {
      if (this.size === 0) {
        return this;
      }
      if (this.__ownerID) {
        this.size = this._origin = this._capacity = 0;
        this._level = SHIFT;
        this._root = this._tail = this.__hash = void 0;
        this.__altered = true;
        return this;
      }
      return emptyList();
    };
    List3.prototype.push = function push() {
      var values3 = arguments;
      var oldSize = this.size;
      return this.withMutations(function(list) {
        setListBounds(list, 0, oldSize + values3.length);
        for (var ii = 0; ii < values3.length; ii++) {
          list.set(oldSize + ii, values3[ii]);
        }
      });
    };
    List3.prototype.pop = function pop() {
      return setListBounds(this, 0, -1);
    };
    List3.prototype.unshift = function unshift() {
      var values3 = arguments;
      return this.withMutations(function(list) {
        setListBounds(list, -values3.length);
        for (var ii = 0; ii < values3.length; ii++) {
          list.set(ii, values3[ii]);
        }
      });
    };
    List3.prototype.shift = function shift() {
      return setListBounds(this, 1);
    };
    List3.prototype.concat = function concat3() {
      var arguments$1 = arguments;
      var seqs = [];
      for (var i4 = 0; i4 < arguments.length; i4++) {
        var argument = arguments$1[i4];
        var seq = IndexedCollection3(
          typeof argument !== "string" && hasIterator(argument) ? argument : [argument]
        );
        if (seq.size !== 0) {
          seqs.push(seq);
        }
      }
      if (seqs.length === 0) {
        return this;
      }
      if (this.size === 0 && !this.__ownerID && seqs.length === 1) {
        return this.constructor(seqs[0]);
      }
      return this.withMutations(function(list) {
        seqs.forEach(function(seq2) {
          return seq2.forEach(function(value) {
            return list.push(value);
          });
        });
      });
    };
    List3.prototype.setSize = function setSize(size) {
      return setListBounds(this, 0, size);
    };
    List3.prototype.map = function map5(mapper, context) {
      var this$1$1 = this;
      return this.withMutations(function(list) {
        for (var i4 = 0; i4 < this$1$1.size; i4++) {
          list.set(i4, mapper.call(context, list.get(i4), i4, this$1$1));
        }
      });
    };
    List3.prototype.slice = function slice7(begin, end) {
      var size = this.size;
      if (wholeSlice(begin, end, size)) {
        return this;
      }
      return setListBounds(
        this,
        resolveBegin(begin, size),
        resolveEnd(end, size)
      );
    };
    List3.prototype.__iterator = function __iterator3(type2, reverse5) {
      var index = reverse5 ? this.size : 0;
      var values3 = iterateList(this, reverse5);
      return new Iterator(function() {
        var value = values3();
        return value === DONE ? iteratorDone() : iteratorValue(type2, reverse5 ? --index : index++, value);
      });
    };
    List3.prototype.__iterate = function __iterate3(fn, reverse5) {
      var index = reverse5 ? this.size : 0;
      var values3 = iterateList(this, reverse5);
      var value;
      while ((value = values3()) !== DONE) {
        if (fn(value, reverse5 ? --index : index++, this) === false) {
          break;
        }
      }
      return index;
    };
    List3.prototype.__ensureOwner = function __ensureOwner3(ownerID) {
      if (ownerID === this.__ownerID) {
        return this;
      }
      if (!ownerID) {
        if (this.size === 0) {
          return emptyList();
        }
        this.__ownerID = ownerID;
        this.__altered = false;
        return this;
      }
      return makeList(
        this._origin,
        this._capacity,
        this._level,
        this._root,
        this._tail,
        ownerID,
        this.__hash
      );
    };
    return List3;
  }(IndexedCollection);
  List.isList = isList;
  var ListPrototype = List.prototype;
  ListPrototype[IS_LIST_SYMBOL] = true;
  ListPrototype[DELETE] = ListPrototype.remove;
  ListPrototype.merge = ListPrototype.concat;
  ListPrototype.setIn = setIn;
  ListPrototype.deleteIn = ListPrototype.removeIn = deleteIn;
  ListPrototype.update = update;
  ListPrototype.updateIn = updateIn;
  ListPrototype.mergeIn = mergeIn;
  ListPrototype.mergeDeepIn = mergeDeepIn;
  ListPrototype.withMutations = withMutations;
  ListPrototype.wasAltered = wasAltered;
  ListPrototype.asImmutable = asImmutable;
  ListPrototype["@@transducer/init"] = ListPrototype.asMutable = asMutable;
  ListPrototype["@@transducer/step"] = function(result, arr) {
    return result.push(arr);
  };
  ListPrototype["@@transducer/result"] = function(obj) {
    return obj.asImmutable();
  };
  var VNode = function VNode2(array3, ownerID) {
    this.array = array3;
    this.ownerID = ownerID;
  };
  VNode.prototype.removeBefore = function removeBefore(ownerID, level, index) {
    if ((index & (1 << level + SHIFT) - 1) === 0 || this.array.length === 0) {
      return this;
    }
    var originIndex = index >>> level & MASK;
    if (originIndex >= this.array.length) {
      return new VNode([], ownerID);
    }
    var removingFirst = originIndex === 0;
    var newChild;
    if (level > 0) {
      var oldChild = this.array[originIndex];
      newChild = oldChild && oldChild.removeBefore(ownerID, level - SHIFT, index);
      if (newChild === oldChild && removingFirst) {
        return this;
      }
    }
    if (removingFirst && !newChild) {
      return this;
    }
    var editable = editableVNode(this, ownerID);
    if (!removingFirst) {
      for (var ii = 0; ii < originIndex; ii++) {
        editable.array[ii] = void 0;
      }
    }
    if (newChild) {
      editable.array[originIndex] = newChild;
    }
    return editable;
  };
  VNode.prototype.removeAfter = function removeAfter(ownerID, level, index) {
    if (index === (level ? 1 << level + SHIFT : SIZE) || this.array.length === 0) {
      return this;
    }
    var sizeIndex = index - 1 >>> level & MASK;
    if (sizeIndex >= this.array.length) {
      return this;
    }
    var newChild;
    if (level > 0) {
      var oldChild = this.array[sizeIndex];
      newChild = oldChild && oldChild.removeAfter(ownerID, level - SHIFT, index);
      if (newChild === oldChild && sizeIndex === this.array.length - 1) {
        return this;
      }
    }
    var editable = editableVNode(this, ownerID);
    editable.array.splice(sizeIndex + 1);
    if (newChild) {
      editable.array[sizeIndex] = newChild;
    }
    return editable;
  };
  var DONE = {};
  function iterateList(list, reverse5) {
    var left2 = list._origin;
    var right2 = list._capacity;
    var tailPos = getTailOffset(right2);
    var tail = list._tail;
    return iterateNodeOrLeaf(list._root, list._level, 0);
    function iterateNodeOrLeaf(node, level, offset) {
      return level === 0 ? iterateLeaf(node, offset) : iterateNode(node, level, offset);
    }
    function iterateLeaf(node, offset) {
      var array3 = offset === tailPos ? tail && tail.array : node && node.array;
      var from = offset > left2 ? 0 : left2 - offset;
      var to = right2 - offset;
      if (to > SIZE) {
        to = SIZE;
      }
      return function() {
        if (from === to) {
          return DONE;
        }
        var idx = reverse5 ? --to : from++;
        return array3 && array3[idx];
      };
    }
    function iterateNode(node, level, offset) {
      var values3;
      var array3 = node && node.array;
      var from = offset > left2 ? 0 : left2 - offset >> level;
      var to = (right2 - offset >> level) + 1;
      if (to > SIZE) {
        to = SIZE;
      }
      return function() {
        while (true) {
          if (values3) {
            var value = values3();
            if (value !== DONE) {
              return value;
            }
            values3 = null;
          }
          if (from === to) {
            return DONE;
          }
          var idx = reverse5 ? --to : from++;
          values3 = iterateNodeOrLeaf(
            array3 && array3[idx],
            level - SHIFT,
            offset + (idx << level)
          );
        }
      };
    }
  }
  function makeList(origin, capacity, level, root2, tail, ownerID, hash3) {
    var list = Object.create(ListPrototype);
    list.size = capacity - origin;
    list._origin = origin;
    list._capacity = capacity;
    list._level = level;
    list._root = root2;
    list._tail = tail;
    list.__ownerID = ownerID;
    list.__hash = hash3;
    list.__altered = false;
    return list;
  }
  function emptyList() {
    return makeList(0, 0, SHIFT);
  }
  function updateList(list, index, value) {
    index = wrapIndex(list, index);
    if (index !== index) {
      return list;
    }
    if (index >= list.size || index < 0) {
      return list.withMutations(function(list2) {
        index < 0 ? setListBounds(list2, index).set(0, value) : setListBounds(list2, 0, index + 1).set(index, value);
      });
    }
    index += list._origin;
    var newTail = list._tail;
    var newRoot = list._root;
    var didAlter = MakeRef();
    if (index >= getTailOffset(list._capacity)) {
      newTail = updateVNode(newTail, list.__ownerID, 0, index, value, didAlter);
    } else {
      newRoot = updateVNode(
        newRoot,
        list.__ownerID,
        list._level,
        index,
        value,
        didAlter
      );
    }
    if (!didAlter.value) {
      return list;
    }
    if (list.__ownerID) {
      list._root = newRoot;
      list._tail = newTail;
      list.__hash = void 0;
      list.__altered = true;
      return list;
    }
    return makeList(list._origin, list._capacity, list._level, newRoot, newTail);
  }
  function updateVNode(node, ownerID, level, index, value, didAlter) {
    var idx = index >>> level & MASK;
    var nodeHas = node && idx < node.array.length;
    if (!nodeHas && value === void 0) {
      return node;
    }
    var newNode;
    if (level > 0) {
      var lowerNode = node && node.array[idx];
      var newLowerNode = updateVNode(
        lowerNode,
        ownerID,
        level - SHIFT,
        index,
        value,
        didAlter
      );
      if (newLowerNode === lowerNode) {
        return node;
      }
      newNode = editableVNode(node, ownerID);
      newNode.array[idx] = newLowerNode;
      return newNode;
    }
    if (nodeHas && node.array[idx] === value) {
      return node;
    }
    if (didAlter) {
      SetRef(didAlter);
    }
    newNode = editableVNode(node, ownerID);
    if (value === void 0 && idx === newNode.array.length - 1) {
      newNode.array.pop();
    } else {
      newNode.array[idx] = value;
    }
    return newNode;
  }
  function editableVNode(node, ownerID) {
    if (ownerID && node && ownerID === node.ownerID) {
      return node;
    }
    return new VNode(node ? node.array.slice() : [], ownerID);
  }
  function listNodeFor(list, rawIndex) {
    if (rawIndex >= getTailOffset(list._capacity)) {
      return list._tail;
    }
    if (rawIndex < 1 << list._level + SHIFT) {
      var node = list._root;
      var level = list._level;
      while (node && level > 0) {
        node = node.array[rawIndex >>> level & MASK];
        level -= SHIFT;
      }
      return node;
    }
  }
  function setListBounds(list, begin, end) {
    if (begin !== void 0) {
      begin |= 0;
    }
    if (end !== void 0) {
      end |= 0;
    }
    var owner = list.__ownerID || new OwnerID();
    var oldOrigin = list._origin;
    var oldCapacity = list._capacity;
    var newOrigin = oldOrigin + begin;
    var newCapacity = end === void 0 ? oldCapacity : end < 0 ? oldCapacity + end : oldOrigin + end;
    if (newOrigin === oldOrigin && newCapacity === oldCapacity) {
      return list;
    }
    if (newOrigin >= newCapacity) {
      return list.clear();
    }
    var newLevel = list._level;
    var newRoot = list._root;
    var offsetShift = 0;
    while (newOrigin + offsetShift < 0) {
      newRoot = new VNode(
        newRoot && newRoot.array.length ? [void 0, newRoot] : [],
        owner
      );
      newLevel += SHIFT;
      offsetShift += 1 << newLevel;
    }
    if (offsetShift) {
      newOrigin += offsetShift;
      oldOrigin += offsetShift;
      newCapacity += offsetShift;
      oldCapacity += offsetShift;
    }
    var oldTailOffset = getTailOffset(oldCapacity);
    var newTailOffset = getTailOffset(newCapacity);
    while (newTailOffset >= 1 << newLevel + SHIFT) {
      newRoot = new VNode(
        newRoot && newRoot.array.length ? [newRoot] : [],
        owner
      );
      newLevel += SHIFT;
    }
    var oldTail = list._tail;
    var newTail = newTailOffset < oldTailOffset ? listNodeFor(list, newCapacity - 1) : newTailOffset > oldTailOffset ? new VNode([], owner) : oldTail;
    if (oldTail && newTailOffset > oldTailOffset && newOrigin < oldCapacity && oldTail.array.length) {
      newRoot = editableVNode(newRoot, owner);
      var node = newRoot;
      for (var level = newLevel; level > SHIFT; level -= SHIFT) {
        var idx = oldTailOffset >>> level & MASK;
        node = node.array[idx] = editableVNode(node.array[idx], owner);
      }
      node.array[oldTailOffset >>> SHIFT & MASK] = oldTail;
    }
    if (newCapacity < oldCapacity) {
      newTail = newTail && newTail.removeAfter(owner, 0, newCapacity);
    }
    if (newOrigin >= newTailOffset) {
      newOrigin -= newTailOffset;
      newCapacity -= newTailOffset;
      newLevel = SHIFT;
      newRoot = null;
      newTail = newTail && newTail.removeBefore(owner, 0, newOrigin);
    } else if (newOrigin > oldOrigin || newTailOffset < oldTailOffset) {
      offsetShift = 0;
      while (newRoot) {
        var beginIndex = newOrigin >>> newLevel & MASK;
        if (beginIndex !== newTailOffset >>> newLevel & MASK) {
          break;
        }
        if (beginIndex) {
          offsetShift += (1 << newLevel) * beginIndex;
        }
        newLevel -= SHIFT;
        newRoot = newRoot.array[beginIndex];
      }
      if (newRoot && newOrigin > oldOrigin) {
        newRoot = newRoot.removeBefore(owner, newLevel, newOrigin - offsetShift);
      }
      if (newRoot && newTailOffset < oldTailOffset) {
        newRoot = newRoot.removeAfter(
          owner,
          newLevel,
          newTailOffset - offsetShift
        );
      }
      if (offsetShift) {
        newOrigin -= offsetShift;
        newCapacity -= offsetShift;
      }
    }
    if (list.__ownerID) {
      list.size = newCapacity - newOrigin;
      list._origin = newOrigin;
      list._capacity = newCapacity;
      list._level = newLevel;
      list._root = newRoot;
      list._tail = newTail;
      list.__hash = void 0;
      list.__altered = true;
      return list;
    }
    return makeList(newOrigin, newCapacity, newLevel, newRoot, newTail);
  }
  function getTailOffset(size) {
    return size < SIZE ? 0 : size - 1 >>> SHIFT << SHIFT;
  }
  var OrderedMap = /* @__PURE__ */ function(Map4) {
    function OrderedMap3(value) {
      return value === void 0 || value === null ? emptyOrderedMap() : isOrderedMap(value) ? value : emptyOrderedMap().withMutations(function(map5) {
        var iter = KeyedCollection(value);
        assertNotInfinite(iter.size);
        iter.forEach(function(v3, k3) {
          return map5.set(k3, v3);
        });
      });
    }
    if (Map4)
      OrderedMap3.__proto__ = Map4;
    OrderedMap3.prototype = Object.create(Map4 && Map4.prototype);
    OrderedMap3.prototype.constructor = OrderedMap3;
    OrderedMap3.of = function of() {
      return this(arguments);
    };
    OrderedMap3.prototype.toString = function toString8() {
      return this.__toString("OrderedMap {", "}");
    };
    OrderedMap3.prototype.get = function get24(k3, notSetValue) {
      var index = this._map.get(k3);
      return index !== void 0 ? this._list.get(index)[1] : notSetValue;
    };
    OrderedMap3.prototype.clear = function clear3() {
      if (this.size === 0) {
        return this;
      }
      if (this.__ownerID) {
        this.size = 0;
        this._map.clear();
        this._list.clear();
        this.__altered = true;
        return this;
      }
      return emptyOrderedMap();
    };
    OrderedMap3.prototype.set = function set7(k3, v3) {
      return updateOrderedMap(this, k3, v3);
    };
    OrderedMap3.prototype.remove = function remove7(k3) {
      return updateOrderedMap(this, k3, NOT_SET);
    };
    OrderedMap3.prototype.__iterate = function __iterate3(fn, reverse5) {
      var this$1$1 = this;
      return this._list.__iterate(
        function(entry) {
          return entry && fn(entry[1], entry[0], this$1$1);
        },
        reverse5
      );
    };
    OrderedMap3.prototype.__iterator = function __iterator3(type2, reverse5) {
      return this._list.fromEntrySeq().__iterator(type2, reverse5);
    };
    OrderedMap3.prototype.__ensureOwner = function __ensureOwner3(ownerID) {
      if (ownerID === this.__ownerID) {
        return this;
      }
      var newMap = this._map.__ensureOwner(ownerID);
      var newList = this._list.__ensureOwner(ownerID);
      if (!ownerID) {
        if (this.size === 0) {
          return emptyOrderedMap();
        }
        this.__ownerID = ownerID;
        this.__altered = false;
        this._map = newMap;
        this._list = newList;
        return this;
      }
      return makeOrderedMap(newMap, newList, ownerID, this.__hash);
    };
    return OrderedMap3;
  }(Map2);
  OrderedMap.isOrderedMap = isOrderedMap;
  OrderedMap.prototype[IS_ORDERED_SYMBOL] = true;
  OrderedMap.prototype[DELETE] = OrderedMap.prototype.remove;
  function makeOrderedMap(map5, list, ownerID, hash3) {
    var omap = Object.create(OrderedMap.prototype);
    omap.size = map5 ? map5.size : 0;
    omap._map = map5;
    omap._list = list;
    omap.__ownerID = ownerID;
    omap.__hash = hash3;
    omap.__altered = false;
    return omap;
  }
  var EMPTY_ORDERED_MAP;
  function emptyOrderedMap() {
    return EMPTY_ORDERED_MAP || (EMPTY_ORDERED_MAP = makeOrderedMap(emptyMap(), emptyList()));
  }
  function updateOrderedMap(omap, k3, v3) {
    var map5 = omap._map;
    var list = omap._list;
    var i4 = map5.get(k3);
    var has9 = i4 !== void 0;
    var newMap;
    var newList;
    if (v3 === NOT_SET) {
      if (!has9) {
        return omap;
      }
      if (list.size >= SIZE && list.size >= map5.size * 2) {
        newList = list.filter(function(entry, idx) {
          return entry !== void 0 && i4 !== idx;
        });
        newMap = newList.toKeyedSeq().map(function(entry) {
          return entry[0];
        }).flip().toMap();
        if (omap.__ownerID) {
          newMap.__ownerID = newList.__ownerID = omap.__ownerID;
        }
      } else {
        newMap = map5.remove(k3);
        newList = i4 === list.size - 1 ? list.pop() : list.set(i4, void 0);
      }
    } else if (has9) {
      if (v3 === list.get(i4)[1]) {
        return omap;
      }
      newMap = map5;
      newList = list.set(i4, [k3, v3]);
    } else {
      newMap = map5.set(k3, list.size);
      newList = list.set(list.size, [k3, v3]);
    }
    if (omap.__ownerID) {
      omap.size = newMap.size;
      omap._map = newMap;
      omap._list = newList;
      omap.__hash = void 0;
      omap.__altered = true;
      return omap;
    }
    return makeOrderedMap(newMap, newList);
  }
  var IS_STACK_SYMBOL = "@@__IMMUTABLE_STACK__@@";
  function isStack(maybeStack) {
    return Boolean(maybeStack && maybeStack[IS_STACK_SYMBOL]);
  }
  var Stack = /* @__PURE__ */ function(IndexedCollection3) {
    function Stack3(value) {
      return value === void 0 || value === null ? emptyStack() : isStack(value) ? value : emptyStack().pushAll(value);
    }
    if (IndexedCollection3)
      Stack3.__proto__ = IndexedCollection3;
    Stack3.prototype = Object.create(IndexedCollection3 && IndexedCollection3.prototype);
    Stack3.prototype.constructor = Stack3;
    Stack3.of = function of() {
      return this(arguments);
    };
    Stack3.prototype.toString = function toString8() {
      return this.__toString("Stack [", "]");
    };
    Stack3.prototype.get = function get24(index, notSetValue) {
      var head = this._head;
      index = wrapIndex(this, index);
      while (head && index--) {
        head = head.next;
      }
      return head ? head.value : notSetValue;
    };
    Stack3.prototype.peek = function peek() {
      return this._head && this._head.value;
    };
    Stack3.prototype.push = function push() {
      var arguments$1 = arguments;
      if (arguments.length === 0) {
        return this;
      }
      var newSize = this.size + arguments.length;
      var head = this._head;
      for (var ii = arguments.length - 1; ii >= 0; ii--) {
        head = {
          value: arguments$1[ii],
          next: head
        };
      }
      if (this.__ownerID) {
        this.size = newSize;
        this._head = head;
        this.__hash = void 0;
        this.__altered = true;
        return this;
      }
      return makeStack(newSize, head);
    };
    Stack3.prototype.pushAll = function pushAll(iter) {
      iter = IndexedCollection3(iter);
      if (iter.size === 0) {
        return this;
      }
      if (this.size === 0 && isStack(iter)) {
        return iter;
      }
      assertNotInfinite(iter.size);
      var newSize = this.size;
      var head = this._head;
      iter.__iterate(
        function(value) {
          newSize++;
          head = {
            value,
            next: head
          };
        },
        /* reverse */
        true
      );
      if (this.__ownerID) {
        this.size = newSize;
        this._head = head;
        this.__hash = void 0;
        this.__altered = true;
        return this;
      }
      return makeStack(newSize, head);
    };
    Stack3.prototype.pop = function pop() {
      return this.slice(1);
    };
    Stack3.prototype.clear = function clear3() {
      if (this.size === 0) {
        return this;
      }
      if (this.__ownerID) {
        this.size = 0;
        this._head = void 0;
        this.__hash = void 0;
        this.__altered = true;
        return this;
      }
      return emptyStack();
    };
    Stack3.prototype.slice = function slice7(begin, end) {
      if (wholeSlice(begin, end, this.size)) {
        return this;
      }
      var resolvedBegin = resolveBegin(begin, this.size);
      var resolvedEnd = resolveEnd(end, this.size);
      if (resolvedEnd !== this.size) {
        return IndexedCollection3.prototype.slice.call(this, begin, end);
      }
      var newSize = this.size - resolvedBegin;
      var head = this._head;
      while (resolvedBegin--) {
        head = head.next;
      }
      if (this.__ownerID) {
        this.size = newSize;
        this._head = head;
        this.__hash = void 0;
        this.__altered = true;
        return this;
      }
      return makeStack(newSize, head);
    };
    Stack3.prototype.__ensureOwner = function __ensureOwner3(ownerID) {
      if (ownerID === this.__ownerID) {
        return this;
      }
      if (!ownerID) {
        if (this.size === 0) {
          return emptyStack();
        }
        this.__ownerID = ownerID;
        this.__altered = false;
        return this;
      }
      return makeStack(this.size, this._head, ownerID, this.__hash);
    };
    Stack3.prototype.__iterate = function __iterate3(fn, reverse5) {
      var this$1$1 = this;
      if (reverse5) {
        return new ArraySeq(this.toArray()).__iterate(
          function(v3, k3) {
            return fn(v3, k3, this$1$1);
          },
          reverse5
        );
      }
      var iterations = 0;
      var node = this._head;
      while (node) {
        if (fn(node.value, iterations++, this) === false) {
          break;
        }
        node = node.next;
      }
      return iterations;
    };
    Stack3.prototype.__iterator = function __iterator3(type2, reverse5) {
      if (reverse5) {
        return new ArraySeq(this.toArray()).__iterator(type2, reverse5);
      }
      var iterations = 0;
      var node = this._head;
      return new Iterator(function() {
        if (node) {
          var value = node.value;
          node = node.next;
          return iteratorValue(type2, iterations++, value);
        }
        return iteratorDone();
      });
    };
    return Stack3;
  }(IndexedCollection);
  Stack.isStack = isStack;
  var StackPrototype = Stack.prototype;
  StackPrototype[IS_STACK_SYMBOL] = true;
  StackPrototype.shift = StackPrototype.pop;
  StackPrototype.unshift = StackPrototype.push;
  StackPrototype.unshiftAll = StackPrototype.pushAll;
  StackPrototype.withMutations = withMutations;
  StackPrototype.wasAltered = wasAltered;
  StackPrototype.asImmutable = asImmutable;
  StackPrototype["@@transducer/init"] = StackPrototype.asMutable = asMutable;
  StackPrototype["@@transducer/step"] = function(result, arr) {
    return result.unshift(arr);
  };
  StackPrototype["@@transducer/result"] = function(obj) {
    return obj.asImmutable();
  };
  function makeStack(size, head, ownerID, hash3) {
    var map5 = Object.create(StackPrototype);
    map5.size = size;
    map5._head = head;
    map5.__ownerID = ownerID;
    map5.__hash = hash3;
    map5.__altered = false;
    return map5;
  }
  var EMPTY_STACK;
  function emptyStack() {
    return EMPTY_STACK || (EMPTY_STACK = makeStack(0));
  }
  var IS_SET_SYMBOL = "@@__IMMUTABLE_SET__@@";
  function isSet(maybeSet) {
    return Boolean(maybeSet && maybeSet[IS_SET_SYMBOL]);
  }
  function isOrderedSet(maybeOrderedSet) {
    return isSet(maybeOrderedSet) && isOrdered(maybeOrderedSet);
  }
  function deepEqual(a4, b3) {
    if (a4 === b3) {
      return true;
    }
    if (!isCollection(b3) || a4.size !== void 0 && b3.size !== void 0 && a4.size !== b3.size || a4.__hash !== void 0 && b3.__hash !== void 0 && a4.__hash !== b3.__hash || isKeyed(a4) !== isKeyed(b3) || isIndexed(a4) !== isIndexed(b3) || isOrdered(a4) !== isOrdered(b3)) {
      return false;
    }
    if (a4.size === 0 && b3.size === 0) {
      return true;
    }
    var notAssociative = !isAssociative(a4);
    if (isOrdered(a4)) {
      var entries5 = a4.entries();
      return b3.every(function(v3, k3) {
        var entry = entries5.next().value;
        return entry && is(entry[1], v3) && (notAssociative || is(entry[0], k3));
      }) && entries5.next().done;
    }
    var flipped = false;
    if (a4.size === void 0) {
      if (b3.size === void 0) {
        if (typeof a4.cacheResult === "function") {
          a4.cacheResult();
        }
      } else {
        flipped = true;
        var _2 = a4;
        a4 = b3;
        b3 = _2;
      }
    }
    var allEqual = true;
    var bSize = b3.__iterate(function(v3, k3) {
      if (notAssociative ? !a4.has(v3) : flipped ? !is(v3, a4.get(k3, NOT_SET)) : !is(a4.get(k3, NOT_SET), v3)) {
        allEqual = false;
        return false;
      }
    });
    return allEqual && a4.size === bSize;
  }
  function mixin(ctor, methods) {
    var keyCopier = function(key) {
      ctor.prototype[key] = methods[key];
    };
    Object.keys(methods).forEach(keyCopier);
    Object.getOwnPropertySymbols && Object.getOwnPropertySymbols(methods).forEach(keyCopier);
    return ctor;
  }
  function toJS(value) {
    if (!value || typeof value !== "object") {
      return value;
    }
    if (!isCollection(value)) {
      if (!isDataStructure(value)) {
        return value;
      }
      value = Seq(value);
    }
    if (isKeyed(value)) {
      var result$1 = {};
      value.__iterate(function(v3, k3) {
        result$1[k3] = toJS(v3);
      });
      return result$1;
    }
    var result = [];
    value.__iterate(function(v3) {
      result.push(toJS(v3));
    });
    return result;
  }
  var Set2 = /* @__PURE__ */ function(SetCollection3) {
    function Set4(value) {
      return value === void 0 || value === null ? emptySet() : isSet(value) && !isOrdered(value) ? value : emptySet().withMutations(function(set7) {
        var iter = SetCollection3(value);
        assertNotInfinite(iter.size);
        iter.forEach(function(v3) {
          return set7.add(v3);
        });
      });
    }
    if (SetCollection3)
      Set4.__proto__ = SetCollection3;
    Set4.prototype = Object.create(SetCollection3 && SetCollection3.prototype);
    Set4.prototype.constructor = Set4;
    Set4.of = function of() {
      return this(arguments);
    };
    Set4.fromKeys = function fromKeys(value) {
      return this(KeyedCollection(value).keySeq());
    };
    Set4.intersect = function intersect(sets) {
      sets = Collection(sets).toArray();
      return sets.length ? SetPrototype.intersect.apply(Set4(sets.pop()), sets) : emptySet();
    };
    Set4.union = function union(sets) {
      sets = Collection(sets).toArray();
      return sets.length ? SetPrototype.union.apply(Set4(sets.pop()), sets) : emptySet();
    };
    Set4.prototype.toString = function toString8() {
      return this.__toString("Set {", "}");
    };
    Set4.prototype.has = function has9(value) {
      return this._map.has(value);
    };
    Set4.prototype.add = function add(value) {
      return updateSet(this, this._map.set(value, value));
    };
    Set4.prototype.remove = function remove7(value) {
      return updateSet(this, this._map.remove(value));
    };
    Set4.prototype.clear = function clear3() {
      return updateSet(this, this._map.clear());
    };
    Set4.prototype.map = function map5(mapper, context) {
      var this$1$1 = this;
      var didChanges = false;
      var newMap = updateSet(
        this,
        this._map.mapEntries(function(ref) {
          var v3 = ref[1];
          var mapped = mapper.call(context, v3, v3, this$1$1);
          if (mapped !== v3) {
            didChanges = true;
          }
          return [mapped, mapped];
        }, context)
      );
      return didChanges ? newMap : this;
    };
    Set4.prototype.union = function union() {
      var iters = [], len = arguments.length;
      while (len--)
        iters[len] = arguments[len];
      iters = iters.filter(function(x3) {
        return x3.size !== 0;
      });
      if (iters.length === 0) {
        return this;
      }
      if (this.size === 0 && !this.__ownerID && iters.length === 1) {
        return this.constructor(iters[0]);
      }
      return this.withMutations(function(set7) {
        for (var ii = 0; ii < iters.length; ii++) {
          if (typeof iters[ii] === "string") {
            set7.add(iters[ii]);
          } else {
            SetCollection3(iters[ii]).forEach(function(value) {
              return set7.add(value);
            });
          }
        }
      });
    };
    Set4.prototype.intersect = function intersect() {
      var iters = [], len = arguments.length;
      while (len--)
        iters[len] = arguments[len];
      if (iters.length === 0) {
        return this;
      }
      iters = iters.map(function(iter) {
        return SetCollection3(iter);
      });
      var toRemove = [];
      this.forEach(function(value) {
        if (!iters.every(function(iter) {
          return iter.includes(value);
        })) {
          toRemove.push(value);
        }
      });
      return this.withMutations(function(set7) {
        toRemove.forEach(function(value) {
          set7.remove(value);
        });
      });
    };
    Set4.prototype.subtract = function subtract() {
      var iters = [], len = arguments.length;
      while (len--)
        iters[len] = arguments[len];
      if (iters.length === 0) {
        return this;
      }
      iters = iters.map(function(iter) {
        return SetCollection3(iter);
      });
      var toRemove = [];
      this.forEach(function(value) {
        if (iters.some(function(iter) {
          return iter.includes(value);
        })) {
          toRemove.push(value);
        }
      });
      return this.withMutations(function(set7) {
        toRemove.forEach(function(value) {
          set7.remove(value);
        });
      });
    };
    Set4.prototype.sort = function sort3(comparator) {
      return OrderedSet(sortFactory(this, comparator));
    };
    Set4.prototype.sortBy = function sortBy3(mapper, comparator) {
      return OrderedSet(sortFactory(this, comparator, mapper));
    };
    Set4.prototype.wasAltered = function wasAltered5() {
      return this._map.wasAltered();
    };
    Set4.prototype.__iterate = function __iterate3(fn, reverse5) {
      var this$1$1 = this;
      return this._map.__iterate(function(k3) {
        return fn(k3, k3, this$1$1);
      }, reverse5);
    };
    Set4.prototype.__iterator = function __iterator3(type2, reverse5) {
      return this._map.__iterator(type2, reverse5);
    };
    Set4.prototype.__ensureOwner = function __ensureOwner3(ownerID) {
      if (ownerID === this.__ownerID) {
        return this;
      }
      var newMap = this._map.__ensureOwner(ownerID);
      if (!ownerID) {
        if (this.size === 0) {
          return this.__empty();
        }
        this.__ownerID = ownerID;
        this._map = newMap;
        return this;
      }
      return this.__make(newMap, ownerID);
    };
    return Set4;
  }(SetCollection);
  Set2.isSet = isSet;
  var SetPrototype = Set2.prototype;
  SetPrototype[IS_SET_SYMBOL] = true;
  SetPrototype[DELETE] = SetPrototype.remove;
  SetPrototype.merge = SetPrototype.concat = SetPrototype.union;
  SetPrototype.withMutations = withMutations;
  SetPrototype.asImmutable = asImmutable;
  SetPrototype["@@transducer/init"] = SetPrototype.asMutable = asMutable;
  SetPrototype["@@transducer/step"] = function(result, arr) {
    return result.add(arr);
  };
  SetPrototype["@@transducer/result"] = function(obj) {
    return obj.asImmutable();
  };
  SetPrototype.__empty = emptySet;
  SetPrototype.__make = makeSet;
  function updateSet(set7, newMap) {
    if (set7.__ownerID) {
      set7.size = newMap.size;
      set7._map = newMap;
      return set7;
    }
    return newMap === set7._map ? set7 : newMap.size === 0 ? set7.__empty() : set7.__make(newMap);
  }
  function makeSet(map5, ownerID) {
    var set7 = Object.create(SetPrototype);
    set7.size = map5 ? map5.size : 0;
    set7._map = map5;
    set7.__ownerID = ownerID;
    return set7;
  }
  var EMPTY_SET;
  function emptySet() {
    return EMPTY_SET || (EMPTY_SET = makeSet(emptyMap()));
  }
  var Range = /* @__PURE__ */ function(IndexedSeq3) {
    function Range3(start2, end, step) {
      if (step === void 0)
        step = 1;
      if (!(this instanceof Range3)) {
        return new Range3(start2, end, step);
      }
      invariant(step !== 0, "Cannot step a Range by 0");
      invariant(
        start2 !== void 0,
        "You must define a start value when using Range"
      );
      invariant(
        end !== void 0,
        "You must define an end value when using Range"
      );
      step = Math.abs(step);
      if (end < start2) {
        step = -step;
      }
      this._start = start2;
      this._end = end;
      this._step = step;
      this.size = Math.max(0, Math.ceil((end - start2) / step - 1) + 1);
      if (this.size === 0) {
        if (EMPTY_RANGE) {
          return EMPTY_RANGE;
        }
        EMPTY_RANGE = this;
      }
    }
    if (IndexedSeq3)
      Range3.__proto__ = IndexedSeq3;
    Range3.prototype = Object.create(IndexedSeq3 && IndexedSeq3.prototype);
    Range3.prototype.constructor = Range3;
    Range3.prototype.toString = function toString8() {
      if (this.size === 0) {
        return "Range []";
      }
      return "Range [ " + this._start + "..." + this._end + (this._step !== 1 ? " by " + this._step : "") + " ]";
    };
    Range3.prototype.get = function get24(index, notSetValue) {
      return this.has(index) ? this._start + wrapIndex(this, index) * this._step : notSetValue;
    };
    Range3.prototype.includes = function includes5(searchValue) {
      var possibleIndex = (searchValue - this._start) / this._step;
      return possibleIndex >= 0 && possibleIndex < this.size && possibleIndex === Math.floor(possibleIndex);
    };
    Range3.prototype.slice = function slice7(begin, end) {
      if (wholeSlice(begin, end, this.size)) {
        return this;
      }
      begin = resolveBegin(begin, this.size);
      end = resolveEnd(end, this.size);
      if (end <= begin) {
        return new Range3(0, 0);
      }
      return new Range3(
        this.get(begin, this._end),
        this.get(end, this._end),
        this._step
      );
    };
    Range3.prototype.indexOf = function indexOf3(searchValue) {
      var offsetValue = searchValue - this._start;
      if (offsetValue % this._step === 0) {
        var index = offsetValue / this._step;
        if (index >= 0 && index < this.size) {
          return index;
        }
      }
      return -1;
    };
    Range3.prototype.lastIndexOf = function lastIndexOf3(searchValue) {
      return this.indexOf(searchValue);
    };
    Range3.prototype.__iterate = function __iterate3(fn, reverse5) {
      var size = this.size;
      var step = this._step;
      var value = reverse5 ? this._start + (size - 1) * step : this._start;
      var i4 = 0;
      while (i4 !== size) {
        if (fn(value, reverse5 ? size - ++i4 : i4++, this) === false) {
          break;
        }
        value += reverse5 ? -step : step;
      }
      return i4;
    };
    Range3.prototype.__iterator = function __iterator3(type2, reverse5) {
      var size = this.size;
      var step = this._step;
      var value = reverse5 ? this._start + (size - 1) * step : this._start;
      var i4 = 0;
      return new Iterator(function() {
        if (i4 === size) {
          return iteratorDone();
        }
        var v3 = value;
        value += reverse5 ? -step : step;
        return iteratorValue(type2, reverse5 ? size - ++i4 : i4++, v3);
      });
    };
    Range3.prototype.equals = function equals5(other) {
      return other instanceof Range3 ? this._start === other._start && this._end === other._end && this._step === other._step : deepEqual(this, other);
    };
    return Range3;
  }(IndexedSeq);
  var EMPTY_RANGE;
  function getIn$1(collection, searchKeyPath, notSetValue) {
    var keyPath = coerceKeyPath(searchKeyPath);
    var i4 = 0;
    while (i4 !== keyPath.length) {
      collection = get(collection, keyPath[i4++], NOT_SET);
      if (collection === NOT_SET) {
        return notSetValue;
      }
    }
    return collection;
  }
  function getIn(searchKeyPath, notSetValue) {
    return getIn$1(this, searchKeyPath, notSetValue);
  }
  function hasIn$1(collection, keyPath) {
    return getIn$1(collection, keyPath, NOT_SET) !== NOT_SET;
  }
  function hasIn(searchKeyPath) {
    return hasIn$1(this, searchKeyPath);
  }
  function toObject() {
    assertNotInfinite(this.size);
    var object = {};
    this.__iterate(function(v3, k3) {
      object[k3] = v3;
    });
    return object;
  }
  Collection.Iterator = Iterator;
  mixin(Collection, {
    // ### Conversion to other types
    toArray: function toArray() {
      assertNotInfinite(this.size);
      var array3 = new Array(this.size || 0);
      var useTuples = isKeyed(this);
      var i4 = 0;
      this.__iterate(function(v3, k3) {
        array3[i4++] = useTuples ? [k3, v3] : v3;
      });
      return array3;
    },
    toIndexedSeq: function toIndexedSeq() {
      return new ToIndexedSequence(this);
    },
    toJS: function toJS$1() {
      return toJS(this);
    },
    toKeyedSeq: function toKeyedSeq() {
      return new ToKeyedSequence(this, true);
    },
    toMap: function toMap() {
      return Map2(this.toKeyedSeq());
    },
    toObject,
    toOrderedMap: function toOrderedMap() {
      return OrderedMap(this.toKeyedSeq());
    },
    toOrderedSet: function toOrderedSet() {
      return OrderedSet(isKeyed(this) ? this.valueSeq() : this);
    },
    toSet: function toSet() {
      return Set2(isKeyed(this) ? this.valueSeq() : this);
    },
    toSetSeq: function toSetSeq() {
      return new ToSetSequence(this);
    },
    toSeq: function toSeq() {
      return isIndexed(this) ? this.toIndexedSeq() : isKeyed(this) ? this.toKeyedSeq() : this.toSetSeq();
    },
    toStack: function toStack() {
      return Stack(isKeyed(this) ? this.valueSeq() : this);
    },
    toList: function toList() {
      return List(isKeyed(this) ? this.valueSeq() : this);
    },
    // ### Common JavaScript methods and properties
    toString: function toString3() {
      return "[Collection]";
    },
    __toString: function __toString(head, tail) {
      if (this.size === 0) {
        return head + tail;
      }
      return head + " " + this.toSeq().map(this.__toStringMapper).join(", ") + " " + tail;
    },
    // ### ES6 Collection methods (ES6 Array and Map)
    concat: function concat() {
      var values3 = [], len = arguments.length;
      while (len--)
        values3[len] = arguments[len];
      return reify(this, concatFactory(this, values3));
    },
    includes: function includes(searchValue) {
      return this.some(function(value) {
        return is(value, searchValue);
      });
    },
    entries: function entries() {
      return this.__iterator(ITERATE_ENTRIES);
    },
    every: function every(predicate, context) {
      assertNotInfinite(this.size);
      var returnValue = true;
      this.__iterate(function(v3, k3, c3) {
        if (!predicate.call(context, v3, k3, c3)) {
          returnValue = false;
          return false;
        }
      });
      return returnValue;
    },
    filter: function filter(predicate, context) {
      return reify(this, filterFactory(this, predicate, context, true));
    },
    partition: function partition(predicate, context) {
      return partitionFactory(this, predicate, context);
    },
    find: function find(predicate, context, notSetValue) {
      var entry = this.findEntry(predicate, context);
      return entry ? entry[1] : notSetValue;
    },
    forEach: function forEach(sideEffect, context) {
      assertNotInfinite(this.size);
      return this.__iterate(context ? sideEffect.bind(context) : sideEffect);
    },
    join: function join(separator) {
      assertNotInfinite(this.size);
      separator = separator !== void 0 ? "" + separator : ",";
      var joined = "";
      var isFirst = true;
      this.__iterate(function(v3) {
        isFirst ? isFirst = false : joined += separator;
        joined += v3 !== null && v3 !== void 0 ? v3.toString() : "";
      });
      return joined;
    },
    keys: function keys() {
      return this.__iterator(ITERATE_KEYS);
    },
    map: function map(mapper, context) {
      return reify(this, mapFactory(this, mapper, context));
    },
    reduce: function reduce$1(reducer, initialReduction, context) {
      return reduce(
        this,
        reducer,
        initialReduction,
        context,
        arguments.length < 2,
        false
      );
    },
    reduceRight: function reduceRight(reducer, initialReduction, context) {
      return reduce(
        this,
        reducer,
        initialReduction,
        context,
        arguments.length < 2,
        true
      );
    },
    reverse: function reverse() {
      return reify(this, reverseFactory(this, true));
    },
    slice: function slice(begin, end) {
      return reify(this, sliceFactory(this, begin, end, true));
    },
    some: function some(predicate, context) {
      assertNotInfinite(this.size);
      var returnValue = false;
      this.__iterate(function(v3, k3, c3) {
        if (predicate.call(context, v3, k3, c3)) {
          returnValue = true;
          return false;
        }
      });
      return returnValue;
    },
    sort: function sort(comparator) {
      return reify(this, sortFactory(this, comparator));
    },
    values: function values() {
      return this.__iterator(ITERATE_VALUES);
    },
    // ### More sequential methods
    butLast: function butLast() {
      return this.slice(0, -1);
    },
    isEmpty: function isEmpty() {
      return this.size !== void 0 ? this.size === 0 : !this.some(function() {
        return true;
      });
    },
    count: function count(predicate, context) {
      return ensureSize(
        predicate ? this.toSeq().filter(predicate, context) : this
      );
    },
    countBy: function countBy(grouper, context) {
      return countByFactory(this, grouper, context);
    },
    equals: function equals(other) {
      return deepEqual(this, other);
    },
    entrySeq: function entrySeq() {
      var collection = this;
      if (collection._cache) {
        return new ArraySeq(collection._cache);
      }
      var entriesSequence = collection.toSeq().map(entryMapper).toIndexedSeq();
      entriesSequence.fromEntrySeq = function() {
        return collection.toSeq();
      };
      return entriesSequence;
    },
    filterNot: function filterNot(predicate, context) {
      return this.filter(not(predicate), context);
    },
    findEntry: function findEntry(predicate, context, notSetValue) {
      var found = notSetValue;
      this.__iterate(function(v3, k3, c3) {
        if (predicate.call(context, v3, k3, c3)) {
          found = [k3, v3];
          return false;
        }
      });
      return found;
    },
    findKey: function findKey(predicate, context) {
      var entry = this.findEntry(predicate, context);
      return entry && entry[0];
    },
    findLast: function findLast(predicate, context, notSetValue) {
      return this.toKeyedSeq().reverse().find(predicate, context, notSetValue);
    },
    findLastEntry: function findLastEntry(predicate, context, notSetValue) {
      return this.toKeyedSeq().reverse().findEntry(predicate, context, notSetValue);
    },
    findLastKey: function findLastKey(predicate, context) {
      return this.toKeyedSeq().reverse().findKey(predicate, context);
    },
    first: function first(notSetValue) {
      return this.find(returnTrue, null, notSetValue);
    },
    flatMap: function flatMap(mapper, context) {
      return reify(this, flatMapFactory(this, mapper, context));
    },
    flatten: function flatten(depth) {
      return reify(this, flattenFactory(this, depth, true));
    },
    fromEntrySeq: function fromEntrySeq() {
      return new FromEntriesSequence(this);
    },
    get: function get7(searchKey, notSetValue) {
      return this.find(function(_2, key) {
        return is(key, searchKey);
      }, void 0, notSetValue);
    },
    getIn,
    groupBy: function groupBy(grouper, context) {
      return groupByFactory(this, grouper, context);
    },
    has: function has2(searchKey) {
      return this.get(searchKey, NOT_SET) !== NOT_SET;
    },
    hasIn,
    isSubset: function isSubset(iter) {
      iter = typeof iter.includes === "function" ? iter : Collection(iter);
      return this.every(function(value) {
        return iter.includes(value);
      });
    },
    isSuperset: function isSuperset(iter) {
      iter = typeof iter.isSubset === "function" ? iter : Collection(iter);
      return iter.isSubset(this);
    },
    keyOf: function keyOf(searchValue) {
      return this.findKey(function(value) {
        return is(value, searchValue);
      });
    },
    keySeq: function keySeq() {
      return this.toSeq().map(keyMapper).toIndexedSeq();
    },
    last: function last(notSetValue) {
      return this.toSeq().reverse().first(notSetValue);
    },
    lastKeyOf: function lastKeyOf(searchValue) {
      return this.toKeyedSeq().reverse().keyOf(searchValue);
    },
    max: function max(comparator) {
      return maxFactory(this, comparator);
    },
    maxBy: function maxBy(mapper, comparator) {
      return maxFactory(this, comparator, mapper);
    },
    min: function min(comparator) {
      return maxFactory(
        this,
        comparator ? neg(comparator) : defaultNegComparator
      );
    },
    minBy: function minBy(mapper, comparator) {
      return maxFactory(
        this,
        comparator ? neg(comparator) : defaultNegComparator,
        mapper
      );
    },
    rest: function rest() {
      return this.slice(1);
    },
    skip: function skip(amount) {
      return amount === 0 ? this : this.slice(Math.max(0, amount));
    },
    skipLast: function skipLast(amount) {
      return amount === 0 ? this : this.slice(0, -Math.max(0, amount));
    },
    skipWhile: function skipWhile(predicate, context) {
      return reify(this, skipWhileFactory(this, predicate, context, true));
    },
    skipUntil: function skipUntil(predicate, context) {
      return this.skipWhile(not(predicate), context);
    },
    sortBy: function sortBy(mapper, comparator) {
      return reify(this, sortFactory(this, comparator, mapper));
    },
    take: function take(amount) {
      return this.slice(0, Math.max(0, amount));
    },
    takeLast: function takeLast(amount) {
      return this.slice(-Math.max(0, amount));
    },
    takeWhile: function takeWhile(predicate, context) {
      return reify(this, takeWhileFactory(this, predicate, context));
    },
    takeUntil: function takeUntil(predicate, context) {
      return this.takeWhile(not(predicate), context);
    },
    update: function update7(fn) {
      return fn(this);
    },
    valueSeq: function valueSeq() {
      return this.toIndexedSeq();
    },
    // ### Hashable Object
    hashCode: function hashCode() {
      return this.__hash || (this.__hash = hashCollection(this));
    }
    // ### Internal
    // abstract __iterate(fn, reverse)
    // abstract __iterator(type, reverse)
  });
  var CollectionPrototype = Collection.prototype;
  CollectionPrototype[IS_COLLECTION_SYMBOL] = true;
  CollectionPrototype[ITERATOR_SYMBOL] = CollectionPrototype.values;
  CollectionPrototype.toJSON = CollectionPrototype.toArray;
  CollectionPrototype.__toStringMapper = quoteString;
  CollectionPrototype.inspect = CollectionPrototype.toSource = function() {
    return this.toString();
  };
  CollectionPrototype.chain = CollectionPrototype.flatMap;
  CollectionPrototype.contains = CollectionPrototype.includes;
  mixin(KeyedCollection, {
    // ### More sequential methods
    flip: function flip() {
      return reify(this, flipFactory(this));
    },
    mapEntries: function mapEntries(mapper, context) {
      var this$1$1 = this;
      var iterations = 0;
      return reify(
        this,
        this.toSeq().map(function(v3, k3) {
          return mapper.call(context, [k3, v3], iterations++, this$1$1);
        }).fromEntrySeq()
      );
    },
    mapKeys: function mapKeys(mapper, context) {
      var this$1$1 = this;
      return reify(
        this,
        this.toSeq().flip().map(function(k3, v3) {
          return mapper.call(context, k3, v3, this$1$1);
        }).flip()
      );
    }
  });
  var KeyedCollectionPrototype = KeyedCollection.prototype;
  KeyedCollectionPrototype[IS_KEYED_SYMBOL] = true;
  KeyedCollectionPrototype[ITERATOR_SYMBOL] = CollectionPrototype.entries;
  KeyedCollectionPrototype.toJSON = toObject;
  KeyedCollectionPrototype.__toStringMapper = function(v3, k3) {
    return quoteString(k3) + ": " + quoteString(v3);
  };
  mixin(IndexedCollection, {
    // ### Conversion to other types
    toKeyedSeq: function toKeyedSeq2() {
      return new ToKeyedSequence(this, false);
    },
    // ### ES6 Collection methods (ES6 Array and Map)
    filter: function filter2(predicate, context) {
      return reify(this, filterFactory(this, predicate, context, false));
    },
    findIndex: function findIndex(predicate, context) {
      var entry = this.findEntry(predicate, context);
      return entry ? entry[0] : -1;
    },
    indexOf: function indexOf(searchValue) {
      var key = this.keyOf(searchValue);
      return key === void 0 ? -1 : key;
    },
    lastIndexOf: function lastIndexOf(searchValue) {
      var key = this.lastKeyOf(searchValue);
      return key === void 0 ? -1 : key;
    },
    reverse: function reverse2() {
      return reify(this, reverseFactory(this, false));
    },
    slice: function slice2(begin, end) {
      return reify(this, sliceFactory(this, begin, end, false));
    },
    splice: function splice(index, removeNum) {
      var numArgs = arguments.length;
      removeNum = Math.max(removeNum || 0, 0);
      if (numArgs === 0 || numArgs === 2 && !removeNum) {
        return this;
      }
      index = resolveBegin(index, index < 0 ? this.count() : this.size);
      var spliced = this.slice(0, index);
      return reify(
        this,
        numArgs === 1 ? spliced : spliced.concat(arrCopy(arguments, 2), this.slice(index + removeNum))
      );
    },
    // ### More collection methods
    findLastIndex: function findLastIndex(predicate, context) {
      var entry = this.findLastEntry(predicate, context);
      return entry ? entry[0] : -1;
    },
    first: function first2(notSetValue) {
      return this.get(0, notSetValue);
    },
    flatten: function flatten2(depth) {
      return reify(this, flattenFactory(this, depth, false));
    },
    get: function get8(index, notSetValue) {
      index = wrapIndex(this, index);
      return index < 0 || this.size === Infinity || this.size !== void 0 && index > this.size ? notSetValue : this.find(function(_2, key) {
        return key === index;
      }, void 0, notSetValue);
    },
    has: function has3(index) {
      index = wrapIndex(this, index);
      return index >= 0 && (this.size !== void 0 ? this.size === Infinity || index < this.size : this.indexOf(index) !== -1);
    },
    interpose: function interpose(separator) {
      return reify(this, interposeFactory(this, separator));
    },
    interleave: function interleave() {
      var collections = [this].concat(arrCopy(arguments));
      var zipped = zipWithFactory(this.toSeq(), IndexedSeq.of, collections);
      var interleaved = zipped.flatten(true);
      if (zipped.size) {
        interleaved.size = zipped.size * collections.length;
      }
      return reify(this, interleaved);
    },
    keySeq: function keySeq2() {
      return Range(0, this.size);
    },
    last: function last2(notSetValue) {
      return this.get(-1, notSetValue);
    },
    skipWhile: function skipWhile2(predicate, context) {
      return reify(this, skipWhileFactory(this, predicate, context, false));
    },
    zip: function zip() {
      var collections = [this].concat(arrCopy(arguments));
      return reify(this, zipWithFactory(this, defaultZipper, collections));
    },
    zipAll: function zipAll() {
      var collections = [this].concat(arrCopy(arguments));
      return reify(this, zipWithFactory(this, defaultZipper, collections, true));
    },
    zipWith: function zipWith(zipper) {
      var collections = arrCopy(arguments);
      collections[0] = this;
      return reify(this, zipWithFactory(this, zipper, collections));
    }
  });
  var IndexedCollectionPrototype = IndexedCollection.prototype;
  IndexedCollectionPrototype[IS_INDEXED_SYMBOL] = true;
  IndexedCollectionPrototype[IS_ORDERED_SYMBOL] = true;
  mixin(SetCollection, {
    // ### ES6 Collection methods (ES6 Array and Map)
    get: function get9(value, notSetValue) {
      return this.has(value) ? value : notSetValue;
    },
    includes: function includes2(value) {
      return this.has(value);
    },
    // ### More sequential methods
    keySeq: function keySeq3() {
      return this.valueSeq();
    }
  });
  var SetCollectionPrototype = SetCollection.prototype;
  SetCollectionPrototype.has = CollectionPrototype.includes;
  SetCollectionPrototype.contains = SetCollectionPrototype.includes;
  SetCollectionPrototype.keys = SetCollectionPrototype.values;
  mixin(KeyedSeq, KeyedCollectionPrototype);
  mixin(IndexedSeq, IndexedCollectionPrototype);
  mixin(SetSeq, SetCollectionPrototype);
  function reduce(collection, reducer, reduction, context, useFirst, reverse5) {
    assertNotInfinite(collection.size);
    collection.__iterate(function(v3, k3, c3) {
      if (useFirst) {
        useFirst = false;
        reduction = v3;
      } else {
        reduction = reducer.call(context, reduction, v3, k3, c3);
      }
    }, reverse5);
    return reduction;
  }
  function keyMapper(v3, k3) {
    return k3;
  }
  function entryMapper(v3, k3) {
    return [k3, v3];
  }
  function not(predicate) {
    return function() {
      return !predicate.apply(this, arguments);
    };
  }
  function neg(predicate) {
    return function() {
      return -predicate.apply(this, arguments);
    };
  }
  function defaultZipper() {
    return arrCopy(arguments);
  }
  function defaultNegComparator(a4, b3) {
    return a4 < b3 ? 1 : a4 > b3 ? -1 : 0;
  }
  function hashCollection(collection) {
    if (collection.size === Infinity) {
      return 0;
    }
    var ordered = isOrdered(collection);
    var keyed = isKeyed(collection);
    var h3 = ordered ? 1 : 0;
    collection.__iterate(
      keyed ? ordered ? function(v3, k3) {
        h3 = 31 * h3 + hashMerge(hash(v3), hash(k3)) | 0;
      } : function(v3, k3) {
        h3 = h3 + hashMerge(hash(v3), hash(k3)) | 0;
      } : ordered ? function(v3) {
        h3 = 31 * h3 + hash(v3) | 0;
      } : function(v3) {
        h3 = h3 + hash(v3) | 0;
      }
    );
    return murmurHashOfSize(collection.size, h3);
  }
  function murmurHashOfSize(size, h3) {
    h3 = imul(h3, 3432918353);
    h3 = imul(h3 << 15 | h3 >>> -15, 461845907);
    h3 = imul(h3 << 13 | h3 >>> -13, 5);
    h3 = (h3 + 3864292196 | 0) ^ size;
    h3 = imul(h3 ^ h3 >>> 16, 2246822507);
    h3 = imul(h3 ^ h3 >>> 13, 3266489909);
    h3 = smi(h3 ^ h3 >>> 16);
    return h3;
  }
  function hashMerge(a4, b3) {
    return a4 ^ b3 + 2654435769 + (a4 << 6) + (a4 >> 2) | 0;
  }
  var OrderedSet = /* @__PURE__ */ function(Set4) {
    function OrderedSet3(value) {
      return value === void 0 || value === null ? emptyOrderedSet() : isOrderedSet(value) ? value : emptyOrderedSet().withMutations(function(set7) {
        var iter = SetCollection(value);
        assertNotInfinite(iter.size);
        iter.forEach(function(v3) {
          return set7.add(v3);
        });
      });
    }
    if (Set4)
      OrderedSet3.__proto__ = Set4;
    OrderedSet3.prototype = Object.create(Set4 && Set4.prototype);
    OrderedSet3.prototype.constructor = OrderedSet3;
    OrderedSet3.of = function of() {
      return this(arguments);
    };
    OrderedSet3.fromKeys = function fromKeys(value) {
      return this(KeyedCollection(value).keySeq());
    };
    OrderedSet3.prototype.toString = function toString8() {
      return this.__toString("OrderedSet {", "}");
    };
    return OrderedSet3;
  }(Set2);
  OrderedSet.isOrderedSet = isOrderedSet;
  var OrderedSetPrototype = OrderedSet.prototype;
  OrderedSetPrototype[IS_ORDERED_SYMBOL] = true;
  OrderedSetPrototype.zip = IndexedCollectionPrototype.zip;
  OrderedSetPrototype.zipWith = IndexedCollectionPrototype.zipWith;
  OrderedSetPrototype.zipAll = IndexedCollectionPrototype.zipAll;
  OrderedSetPrototype.__empty = emptyOrderedSet;
  OrderedSetPrototype.__make = makeOrderedSet;
  function makeOrderedSet(map5, ownerID) {
    var set7 = Object.create(OrderedSetPrototype);
    set7.size = map5 ? map5.size : 0;
    set7._map = map5;
    set7.__ownerID = ownerID;
    return set7;
  }
  var EMPTY_ORDERED_SET;
  function emptyOrderedSet() {
    return EMPTY_ORDERED_SET || (EMPTY_ORDERED_SET = makeOrderedSet(emptyOrderedMap()));
  }
  function throwOnInvalidDefaultValues(defaultValues) {
    if (isRecord(defaultValues)) {
      throw new Error(
        "Can not call `Record` with an immutable Record as default values. Use a plain javascript object instead."
      );
    }
    if (isImmutable(defaultValues)) {
      throw new Error(
        "Can not call `Record` with an immutable Collection as default values. Use a plain javascript object instead."
      );
    }
    if (defaultValues === null || typeof defaultValues !== "object") {
      throw new Error(
        "Can not call `Record` with a non-object as default values. Use a plain javascript object instead."
      );
    }
  }
  var Record = function Record2(defaultValues, name) {
    var hasInitialized;
    throwOnInvalidDefaultValues(defaultValues);
    var RecordType = function Record5(values3) {
      var this$1$1 = this;
      if (values3 instanceof RecordType) {
        return values3;
      }
      if (!(this instanceof RecordType)) {
        return new RecordType(values3);
      }
      if (!hasInitialized) {
        hasInitialized = true;
        var keys3 = Object.keys(defaultValues);
        var indices = RecordTypePrototype._indices = {};
        RecordTypePrototype._name = name;
        RecordTypePrototype._keys = keys3;
        RecordTypePrototype._defaultValues = defaultValues;
        for (var i4 = 0; i4 < keys3.length; i4++) {
          var propName = keys3[i4];
          indices[propName] = i4;
          if (RecordTypePrototype[propName]) {
            typeof console === "object" && console.warn && console.warn(
              "Cannot define " + recordName(this) + ' with property "' + propName + '" since that property name is part of the Record API.'
            );
          } else {
            setProp(RecordTypePrototype, propName);
          }
        }
      }
      this.__ownerID = void 0;
      this._values = List().withMutations(function(l4) {
        l4.setSize(this$1$1._keys.length);
        KeyedCollection(values3).forEach(function(v3, k3) {
          l4.set(this$1$1._indices[k3], v3 === this$1$1._defaultValues[k3] ? void 0 : v3);
        });
      });
      return this;
    };
    var RecordTypePrototype = RecordType.prototype = Object.create(RecordPrototype);
    RecordTypePrototype.constructor = RecordType;
    if (name) {
      RecordType.displayName = name;
    }
    return RecordType;
  };
  Record.prototype.toString = function toString4() {
    var str = recordName(this) + " { ";
    var keys3 = this._keys;
    var k3;
    for (var i4 = 0, l4 = keys3.length; i4 !== l4; i4++) {
      k3 = keys3[i4];
      str += (i4 ? ", " : "") + k3 + ": " + quoteString(this.get(k3));
    }
    return str + " }";
  };
  Record.prototype.equals = function equals2(other) {
    return this === other || isRecord(other) && recordSeq(this).equals(recordSeq(other));
  };
  Record.prototype.hashCode = function hashCode2() {
    return recordSeq(this).hashCode();
  };
  Record.prototype.has = function has4(k3) {
    return this._indices.hasOwnProperty(k3);
  };
  Record.prototype.get = function get10(k3, notSetValue) {
    if (!this.has(k3)) {
      return notSetValue;
    }
    var index = this._indices[k3];
    var value = this._values.get(index);
    return value === void 0 ? this._defaultValues[k3] : value;
  };
  Record.prototype.set = function set2(k3, v3) {
    if (this.has(k3)) {
      var newValues = this._values.set(
        this._indices[k3],
        v3 === this._defaultValues[k3] ? void 0 : v3
      );
      if (newValues !== this._values && !this.__ownerID) {
        return makeRecord(this, newValues);
      }
    }
    return this;
  };
  Record.prototype.remove = function remove2(k3) {
    return this.set(k3);
  };
  Record.prototype.clear = function clear() {
    var newValues = this._values.clear().setSize(this._keys.length);
    return this.__ownerID ? this : makeRecord(this, newValues);
  };
  Record.prototype.wasAltered = function wasAltered2() {
    return this._values.wasAltered();
  };
  Record.prototype.toSeq = function toSeq2() {
    return recordSeq(this);
  };
  Record.prototype.toJS = function toJS$12() {
    return toJS(this);
  };
  Record.prototype.entries = function entries2() {
    return this.__iterator(ITERATE_ENTRIES);
  };
  Record.prototype.__iterator = function __iterator(type2, reverse5) {
    return recordSeq(this).__iterator(type2, reverse5);
  };
  Record.prototype.__iterate = function __iterate(fn, reverse5) {
    return recordSeq(this).__iterate(fn, reverse5);
  };
  Record.prototype.__ensureOwner = function __ensureOwner(ownerID) {
    if (ownerID === this.__ownerID) {
      return this;
    }
    var newValues = this._values.__ensureOwner(ownerID);
    if (!ownerID) {
      this.__ownerID = ownerID;
      this._values = newValues;
      return this;
    }
    return makeRecord(this, newValues, ownerID);
  };
  Record.isRecord = isRecord;
  Record.getDescriptiveName = recordName;
  var RecordPrototype = Record.prototype;
  RecordPrototype[IS_RECORD_SYMBOL] = true;
  RecordPrototype[DELETE] = RecordPrototype.remove;
  RecordPrototype.deleteIn = RecordPrototype.removeIn = deleteIn;
  RecordPrototype.getIn = getIn;
  RecordPrototype.hasIn = CollectionPrototype.hasIn;
  RecordPrototype.merge = merge$1;
  RecordPrototype.mergeWith = mergeWith$1;
  RecordPrototype.mergeIn = mergeIn;
  RecordPrototype.mergeDeep = mergeDeep;
  RecordPrototype.mergeDeepWith = mergeDeepWith;
  RecordPrototype.mergeDeepIn = mergeDeepIn;
  RecordPrototype.setIn = setIn;
  RecordPrototype.update = update;
  RecordPrototype.updateIn = updateIn;
  RecordPrototype.withMutations = withMutations;
  RecordPrototype.asMutable = asMutable;
  RecordPrototype.asImmutable = asImmutable;
  RecordPrototype[ITERATOR_SYMBOL] = RecordPrototype.entries;
  RecordPrototype.toJSON = RecordPrototype.toObject = CollectionPrototype.toObject;
  RecordPrototype.inspect = RecordPrototype.toSource = function() {
    return this.toString();
  };
  function makeRecord(likeRecord, values3, ownerID) {
    var record = Object.create(Object.getPrototypeOf(likeRecord));
    record._values = values3;
    record.__ownerID = ownerID;
    return record;
  }
  function recordName(record) {
    return record.constructor.displayName || record.constructor.name || "Record";
  }
  function recordSeq(record) {
    return keyedSeqFromValue(record._keys.map(function(k3) {
      return [k3, record.get(k3)];
    }));
  }
  function setProp(prototype, name) {
    try {
      Object.defineProperty(prototype, name, {
        get: function() {
          return this.get(name);
        },
        set: function(value) {
          invariant(this.__ownerID, "Cannot set on an immutable record.");
          this.set(name, value);
        }
      });
    } catch (error) {
    }
  }

  // ../node_modules/d3-array/src/ascending.js
  function ascending(a4, b3) {
    return a4 == null || b3 == null ? NaN : a4 < b3 ? -1 : a4 > b3 ? 1 : a4 >= b3 ? 0 : NaN;
  }

  // ../node_modules/d3-array/src/descending.js
  function descending(a4, b3) {
    return a4 == null || b3 == null ? NaN : b3 < a4 ? -1 : b3 > a4 ? 1 : b3 >= a4 ? 0 : NaN;
  }

  // ../node_modules/d3-array/src/bisector.js
  function bisector(f3) {
    let compare1, compare2, delta;
    if (f3.length !== 2) {
      compare1 = ascending;
      compare2 = (d3, x3) => ascending(f3(d3), x3);
      delta = (d3, x3) => f3(d3) - x3;
    } else {
      compare1 = f3 === ascending || f3 === descending ? f3 : zero;
      compare2 = f3;
      delta = f3;
    }
    function left2(a4, x3, lo = 0, hi = a4.length) {
      if (lo < hi) {
        if (compare1(x3, x3) !== 0)
          return hi;
        do {
          const mid = lo + hi >>> 1;
          if (compare2(a4[mid], x3) < 0)
            lo = mid + 1;
          else
            hi = mid;
        } while (lo < hi);
      }
      return lo;
    }
    function right2(a4, x3, lo = 0, hi = a4.length) {
      if (lo < hi) {
        if (compare1(x3, x3) !== 0)
          return hi;
        do {
          const mid = lo + hi >>> 1;
          if (compare2(a4[mid], x3) <= 0)
            lo = mid + 1;
          else
            hi = mid;
        } while (lo < hi);
      }
      return lo;
    }
    function center2(a4, x3, lo = 0, hi = a4.length) {
      const i4 = left2(a4, x3, lo, hi - 1);
      return i4 > lo && delta(a4[i4 - 1], x3) > -delta(a4[i4], x3) ? i4 - 1 : i4;
    }
    return { left: left2, center: center2, right: right2 };
  }
  function zero() {
    return 0;
  }

  // ../node_modules/d3-array/src/number.js
  function number(x3) {
    return x3 === null ? NaN : +x3;
  }

  // ../node_modules/d3-array/src/bisect.js
  var ascendingBisect = bisector(ascending);
  var bisectRight = ascendingBisect.right;
  var bisectLeft = ascendingBisect.left;
  var bisectCenter = bisector(number).center;
  var bisect_default = bisectRight;

  // ../node_modules/d3-array/src/count.js
  function count2(values3, valueof) {
    let count4 = 0;
    if (valueof === void 0) {
      for (let value of values3) {
        if (value != null && (value = +value) >= value) {
          ++count4;
        }
      }
    } else {
      let index = -1;
      for (let value of values3) {
        if ((value = valueof(value, ++index, values3)) != null && (value = +value) >= value) {
          ++count4;
        }
      }
    }
    return count4;
  }

  // ../node_modules/d3-array/src/extent.js
  function extent(values3, valueof) {
    let min4;
    let max5;
    if (valueof === void 0) {
      for (const value of values3) {
        if (value != null) {
          if (min4 === void 0) {
            if (value >= value)
              min4 = max5 = value;
          } else {
            if (min4 > value)
              min4 = value;
            if (max5 < value)
              max5 = value;
          }
        }
      }
    } else {
      let index = -1;
      for (let value of values3) {
        if ((value = valueof(value, ++index, values3)) != null) {
          if (min4 === void 0) {
            if (value >= value)
              min4 = max5 = value;
          } else {
            if (min4 > value)
              min4 = value;
            if (max5 < value)
              max5 = value;
          }
        }
      }
    }
    return [min4, max5];
  }

  // ../node_modules/d3-array/src/identity.js
  function identity(x3) {
    return x3;
  }

  // ../node_modules/d3-array/src/array.js
  var array = Array.prototype;
  var slice3 = array.slice;
  var map2 = array.map;

  // ../node_modules/d3-array/src/constant.js
  function constant(x3) {
    return () => x3;
  }

  // ../node_modules/d3-array/src/ticks.js
  var e10 = Math.sqrt(50);
  var e5 = Math.sqrt(10);
  var e22 = Math.sqrt(2);
  function tickSpec(start2, stop, count4) {
    const step = (stop - start2) / Math.max(0, count4), power = Math.floor(Math.log10(step)), error = step / Math.pow(10, power), factor = error >= e10 ? 10 : error >= e5 ? 5 : error >= e22 ? 2 : 1;
    let i1, i22, inc;
    if (power < 0) {
      inc = Math.pow(10, -power) / factor;
      i1 = Math.round(start2 * inc);
      i22 = Math.round(stop * inc);
      if (i1 / inc < start2)
        ++i1;
      if (i22 / inc > stop)
        --i22;
      inc = -inc;
    } else {
      inc = Math.pow(10, power) * factor;
      i1 = Math.round(start2 / inc);
      i22 = Math.round(stop / inc);
      if (i1 * inc < start2)
        ++i1;
      if (i22 * inc > stop)
        --i22;
    }
    if (i22 < i1 && 0.5 <= count4 && count4 < 2)
      return tickSpec(start2, stop, count4 * 2);
    return [i1, i22, inc];
  }
  function ticks(start2, stop, count4) {
    stop = +stop, start2 = +start2, count4 = +count4;
    if (!(count4 > 0))
      return [];
    if (start2 === stop)
      return [start2];
    const reverse5 = stop < start2, [i1, i22, inc] = reverse5 ? tickSpec(stop, start2, count4) : tickSpec(start2, stop, count4);
    if (!(i22 >= i1))
      return [];
    const n3 = i22 - i1 + 1, ticks2 = new Array(n3);
    if (reverse5) {
      if (inc < 0)
        for (let i4 = 0; i4 < n3; ++i4)
          ticks2[i4] = (i22 - i4) / -inc;
      else
        for (let i4 = 0; i4 < n3; ++i4)
          ticks2[i4] = (i22 - i4) * inc;
    } else {
      if (inc < 0)
        for (let i4 = 0; i4 < n3; ++i4)
          ticks2[i4] = (i1 + i4) / -inc;
      else
        for (let i4 = 0; i4 < n3; ++i4)
          ticks2[i4] = (i1 + i4) * inc;
    }
    return ticks2;
  }
  function tickIncrement(start2, stop, count4) {
    stop = +stop, start2 = +start2, count4 = +count4;
    return tickSpec(start2, stop, count4)[2];
  }
  function tickStep(start2, stop, count4) {
    stop = +stop, start2 = +start2, count4 = +count4;
    const reverse5 = stop < start2, inc = reverse5 ? tickIncrement(stop, start2, count4) : tickIncrement(start2, stop, count4);
    return (reverse5 ? -1 : 1) * (inc < 0 ? 1 / -inc : inc);
  }

  // ../node_modules/d3-array/src/nice.js
  function nice(start2, stop, count4) {
    let prestep;
    while (true) {
      const step = tickIncrement(start2, stop, count4);
      if (step === prestep || step === 0 || !isFinite(step)) {
        return [start2, stop];
      } else if (step > 0) {
        start2 = Math.floor(start2 / step) * step;
        stop = Math.ceil(stop / step) * step;
      } else if (step < 0) {
        start2 = Math.ceil(start2 * step) / step;
        stop = Math.floor(stop * step) / step;
      }
      prestep = step;
    }
  }

  // ../node_modules/d3-array/src/threshold/sturges.js
  function thresholdSturges(values3) {
    return Math.max(1, Math.ceil(Math.log(count2(values3)) / Math.LN2) + 1);
  }

  // ../node_modules/d3-array/src/bin.js
  function bin() {
    var value = identity, domain = extent, threshold = thresholdSturges;
    function histogram(data) {
      if (!Array.isArray(data))
        data = Array.from(data);
      var i4, n3 = data.length, x3, step, values3 = new Array(n3);
      for (i4 = 0; i4 < n3; ++i4) {
        values3[i4] = value(data[i4], i4, data);
      }
      var xz = domain(values3), x0 = xz[0], x1 = xz[1], tz = threshold(values3, x0, x1);
      if (!Array.isArray(tz)) {
        const max5 = x1, tn = +tz;
        if (domain === extent)
          [x0, x1] = nice(x0, x1, tn);
        tz = ticks(x0, x1, tn);
        if (tz[0] <= x0)
          step = tickIncrement(x0, x1, tn);
        if (tz[tz.length - 1] >= x1) {
          if (max5 >= x1 && domain === extent) {
            const step2 = tickIncrement(x0, x1, tn);
            if (isFinite(step2)) {
              if (step2 > 0) {
                x1 = (Math.floor(x1 / step2) + 1) * step2;
              } else if (step2 < 0) {
                x1 = (Math.ceil(x1 * -step2) + 1) / -step2;
              }
            }
          } else {
            tz.pop();
          }
        }
      }
      var m3 = tz.length, a4 = 0, b3 = m3;
      while (tz[a4] <= x0)
        ++a4;
      while (tz[b3 - 1] > x1)
        --b3;
      if (a4 || b3 < m3)
        tz = tz.slice(a4, b3), m3 = b3 - a4;
      var bins = new Array(m3 + 1), bin2;
      for (i4 = 0; i4 <= m3; ++i4) {
        bin2 = bins[i4] = [];
        bin2.x0 = i4 > 0 ? tz[i4 - 1] : x0;
        bin2.x1 = i4 < m3 ? tz[i4] : x1;
      }
      if (isFinite(step)) {
        if (step > 0) {
          for (i4 = 0; i4 < n3; ++i4) {
            if ((x3 = values3[i4]) != null && x0 <= x3 && x3 <= x1) {
              bins[Math.min(m3, Math.floor((x3 - x0) / step))].push(data[i4]);
            }
          }
        } else if (step < 0) {
          for (i4 = 0; i4 < n3; ++i4) {
            if ((x3 = values3[i4]) != null && x0 <= x3 && x3 <= x1) {
              const j3 = Math.floor((x0 - x3) * step);
              bins[Math.min(m3, j3 + (tz[j3] <= x3))].push(data[i4]);
            }
          }
        }
      } else {
        for (i4 = 0; i4 < n3; ++i4) {
          if ((x3 = values3[i4]) != null && x0 <= x3 && x3 <= x1) {
            bins[bisect_default(tz, x3, 0, m3)].push(data[i4]);
          }
        }
      }
      return bins;
    }
    histogram.value = function(_2) {
      return arguments.length ? (value = typeof _2 === "function" ? _2 : constant(_2), histogram) : value;
    };
    histogram.domain = function(_2) {
      return arguments.length ? (domain = typeof _2 === "function" ? _2 : constant([_2[0], _2[1]]), histogram) : domain;
    };
    histogram.thresholds = function(_2) {
      return arguments.length ? (threshold = typeof _2 === "function" ? _2 : constant(Array.isArray(_2) ? slice3.call(_2) : _2), histogram) : threshold;
    };
    return histogram;
  }

  // ../node_modules/d3-array/src/max.js
  function max2(values3, valueof) {
    let max5;
    if (valueof === void 0) {
      for (const value of values3) {
        if (value != null && (max5 < value || max5 === void 0 && value >= value)) {
          max5 = value;
        }
      }
    } else {
      let index = -1;
      for (let value of values3) {
        if ((value = valueof(value, ++index, values3)) != null && (max5 < value || max5 === void 0 && value >= value)) {
          max5 = value;
        }
      }
    }
    return max5;
  }

  // ../node_modules/d3-axis/src/identity.js
  function identity_default(x3) {
    return x3;
  }

  // ../node_modules/d3-axis/src/axis.js
  var top = 1;
  var right = 2;
  var bottom = 3;
  var left = 4;
  var epsilon = 1e-6;
  function translateX(x3) {
    return "translate(" + x3 + ",0)";
  }
  function translateY(y3) {
    return "translate(0," + y3 + ")";
  }
  function number2(scale) {
    return (d3) => +scale(d3);
  }
  function center(scale, offset) {
    offset = Math.max(0, scale.bandwidth() - offset * 2) / 2;
    if (scale.round())
      offset = Math.round(offset);
    return (d3) => +scale(d3) + offset;
  }
  function entering() {
    return !this.__axis;
  }
  function axis(orient, scale) {
    var tickArguments = [], tickValues = null, tickFormat2 = null, tickSizeInner = 6, tickSizeOuter = 6, tickPadding = 3, offset = typeof window !== "undefined" && window.devicePixelRatio > 1 ? 0 : 0.5, k3 = orient === top || orient === left ? -1 : 1, x3 = orient === left || orient === right ? "x" : "y", transform2 = orient === top || orient === bottom ? translateX : translateY;
    function axis2(context) {
      var values3 = tickValues == null ? scale.ticks ? scale.ticks.apply(scale, tickArguments) : scale.domain() : tickValues, format2 = tickFormat2 == null ? scale.tickFormat ? scale.tickFormat.apply(scale, tickArguments) : identity_default : tickFormat2, spacing = Math.max(tickSizeInner, 0) + tickPadding, range = scale.range(), range0 = +range[0] + offset, range1 = +range[range.length - 1] + offset, position = (scale.bandwidth ? center : number2)(scale.copy(), offset), selection2 = context.selection ? context.selection() : context, path2 = selection2.selectAll(".domain").data([null]), tick = selection2.selectAll(".tick").data(values3, scale).order(), tickExit = tick.exit(), tickEnter = tick.enter().append("g").attr("class", "tick"), line = tick.select("line"), text = tick.select("text");
      path2 = path2.merge(path2.enter().insert("path", ".tick").attr("class", "domain").attr("stroke", "currentColor"));
      tick = tick.merge(tickEnter);
      line = line.merge(tickEnter.append("line").attr("stroke", "currentColor").attr(x3 + "2", k3 * tickSizeInner));
      text = text.merge(tickEnter.append("text").attr("fill", "currentColor").attr(x3, k3 * spacing).attr("dy", orient === top ? "0em" : orient === bottom ? "0.71em" : "0.32em"));
      if (context !== selection2) {
        path2 = path2.transition(context);
        tick = tick.transition(context);
        line = line.transition(context);
        text = text.transition(context);
        tickExit = tickExit.transition(context).attr("opacity", epsilon).attr("transform", function(d3) {
          return isFinite(d3 = position(d3)) ? transform2(d3 + offset) : this.getAttribute("transform");
        });
        tickEnter.attr("opacity", epsilon).attr("transform", function(d3) {
          var p4 = this.parentNode.__axis;
          return transform2((p4 && isFinite(p4 = p4(d3)) ? p4 : position(d3)) + offset);
        });
      }
      tickExit.remove();
      path2.attr("d", orient === left || orient === right ? tickSizeOuter ? "M" + k3 * tickSizeOuter + "," + range0 + "H" + offset + "V" + range1 + "H" + k3 * tickSizeOuter : "M" + offset + "," + range0 + "V" + range1 : tickSizeOuter ? "M" + range0 + "," + k3 * tickSizeOuter + "V" + offset + "H" + range1 + "V" + k3 * tickSizeOuter : "M" + range0 + "," + offset + "H" + range1);
      tick.attr("opacity", 1).attr("transform", function(d3) {
        return transform2(position(d3) + offset);
      });
      line.attr(x3 + "2", k3 * tickSizeInner);
      text.attr(x3, k3 * spacing).text(format2);
      selection2.filter(entering).attr("fill", "none").attr("font-size", 10).attr("font-family", "sans-serif").attr("text-anchor", orient === right ? "start" : orient === left ? "end" : "middle");
      selection2.each(function() {
        this.__axis = position;
      });
    }
    axis2.scale = function(_2) {
      return arguments.length ? (scale = _2, axis2) : scale;
    };
    axis2.ticks = function() {
      return tickArguments = Array.from(arguments), axis2;
    };
    axis2.tickArguments = function(_2) {
      return arguments.length ? (tickArguments = _2 == null ? [] : Array.from(_2), axis2) : tickArguments.slice();
    };
    axis2.tickValues = function(_2) {
      return arguments.length ? (tickValues = _2 == null ? null : Array.from(_2), axis2) : tickValues && tickValues.slice();
    };
    axis2.tickFormat = function(_2) {
      return arguments.length ? (tickFormat2 = _2, axis2) : tickFormat2;
    };
    axis2.tickSize = function(_2) {
      return arguments.length ? (tickSizeInner = tickSizeOuter = +_2, axis2) : tickSizeInner;
    };
    axis2.tickSizeInner = function(_2) {
      return arguments.length ? (tickSizeInner = +_2, axis2) : tickSizeInner;
    };
    axis2.tickSizeOuter = function(_2) {
      return arguments.length ? (tickSizeOuter = +_2, axis2) : tickSizeOuter;
    };
    axis2.tickPadding = function(_2) {
      return arguments.length ? (tickPadding = +_2, axis2) : tickPadding;
    };
    axis2.offset = function(_2) {
      return arguments.length ? (offset = +_2, axis2) : offset;
    };
    return axis2;
  }
  function axisBottom(scale) {
    return axis(bottom, scale);
  }
  function axisLeft(scale) {
    return axis(left, scale);
  }

  // ../node_modules/d3-dispatch/src/dispatch.js
  var noop = { value: () => {
  } };
  function dispatch() {
    for (var i4 = 0, n3 = arguments.length, _2 = {}, t3; i4 < n3; ++i4) {
      if (!(t3 = arguments[i4] + "") || t3 in _2 || /[\s.]/.test(t3))
        throw new Error("illegal type: " + t3);
      _2[t3] = [];
    }
    return new Dispatch(_2);
  }
  function Dispatch(_2) {
    this._ = _2;
  }
  function parseTypenames(typenames, types) {
    return typenames.trim().split(/^|\s+/).map(function(t3) {
      var name = "", i4 = t3.indexOf(".");
      if (i4 >= 0)
        name = t3.slice(i4 + 1), t3 = t3.slice(0, i4);
      if (t3 && !types.hasOwnProperty(t3))
        throw new Error("unknown type: " + t3);
      return { type: t3, name };
    });
  }
  Dispatch.prototype = dispatch.prototype = {
    constructor: Dispatch,
    on: function(typename, callback) {
      var _2 = this._, T3 = parseTypenames(typename + "", _2), t3, i4 = -1, n3 = T3.length;
      if (arguments.length < 2) {
        while (++i4 < n3)
          if ((t3 = (typename = T3[i4]).type) && (t3 = get11(_2[t3], typename.name)))
            return t3;
        return;
      }
      if (callback != null && typeof callback !== "function")
        throw new Error("invalid callback: " + callback);
      while (++i4 < n3) {
        if (t3 = (typename = T3[i4]).type)
          _2[t3] = set3(_2[t3], typename.name, callback);
        else if (callback == null)
          for (t3 in _2)
            _2[t3] = set3(_2[t3], typename.name, null);
      }
      return this;
    },
    copy: function() {
      var copy2 = {}, _2 = this._;
      for (var t3 in _2)
        copy2[t3] = _2[t3].slice();
      return new Dispatch(copy2);
    },
    call: function(type2, that) {
      if ((n3 = arguments.length - 2) > 0)
        for (var args = new Array(n3), i4 = 0, n3, t3; i4 < n3; ++i4)
          args[i4] = arguments[i4 + 2];
      if (!this._.hasOwnProperty(type2))
        throw new Error("unknown type: " + type2);
      for (t3 = this._[type2], i4 = 0, n3 = t3.length; i4 < n3; ++i4)
        t3[i4].value.apply(that, args);
    },
    apply: function(type2, that, args) {
      if (!this._.hasOwnProperty(type2))
        throw new Error("unknown type: " + type2);
      for (var t3 = this._[type2], i4 = 0, n3 = t3.length; i4 < n3; ++i4)
        t3[i4].value.apply(that, args);
    }
  };
  function get11(type2, name) {
    for (var i4 = 0, n3 = type2.length, c3; i4 < n3; ++i4) {
      if ((c3 = type2[i4]).name === name) {
        return c3.value;
      }
    }
  }
  function set3(type2, name, callback) {
    for (var i4 = 0, n3 = type2.length; i4 < n3; ++i4) {
      if (type2[i4].name === name) {
        type2[i4] = noop, type2 = type2.slice(0, i4).concat(type2.slice(i4 + 1));
        break;
      }
    }
    if (callback != null)
      type2.push({ name, value: callback });
    return type2;
  }
  var dispatch_default = dispatch;

  // ../node_modules/d3-selection/src/namespaces.js
  var xhtml = "http://www.w3.org/1999/xhtml";
  var namespaces_default = {
    svg: "http://www.w3.org/2000/svg",
    xhtml,
    xlink: "http://www.w3.org/1999/xlink",
    xml: "http://www.w3.org/XML/1998/namespace",
    xmlns: "http://www.w3.org/2000/xmlns/"
  };

  // ../node_modules/d3-selection/src/namespace.js
  function namespace_default(name) {
    var prefix = name += "", i4 = prefix.indexOf(":");
    if (i4 >= 0 && (prefix = name.slice(0, i4)) !== "xmlns")
      name = name.slice(i4 + 1);
    return namespaces_default.hasOwnProperty(prefix) ? { space: namespaces_default[prefix], local: name } : name;
  }

  // ../node_modules/d3-selection/src/creator.js
  function creatorInherit(name) {
    return function() {
      var document2 = this.ownerDocument, uri = this.namespaceURI;
      return uri === xhtml && document2.documentElement.namespaceURI === xhtml ? document2.createElement(name) : document2.createElementNS(uri, name);
    };
  }
  function creatorFixed(fullname) {
    return function() {
      return this.ownerDocument.createElementNS(fullname.space, fullname.local);
    };
  }
  function creator_default(name) {
    var fullname = namespace_default(name);
    return (fullname.local ? creatorFixed : creatorInherit)(fullname);
  }

  // ../node_modules/d3-selection/src/selector.js
  function none() {
  }
  function selector_default(selector) {
    return selector == null ? none : function() {
      return this.querySelector(selector);
    };
  }

  // ../node_modules/d3-selection/src/selection/select.js
  function select_default(select2) {
    if (typeof select2 !== "function")
      select2 = selector_default(select2);
    for (var groups = this._groups, m3 = groups.length, subgroups = new Array(m3), j3 = 0; j3 < m3; ++j3) {
      for (var group = groups[j3], n3 = group.length, subgroup = subgroups[j3] = new Array(n3), node, subnode, i4 = 0; i4 < n3; ++i4) {
        if ((node = group[i4]) && (subnode = select2.call(node, node.__data__, i4, group))) {
          if ("__data__" in node)
            subnode.__data__ = node.__data__;
          subgroup[i4] = subnode;
        }
      }
    }
    return new Selection(subgroups, this._parents);
  }

  // ../node_modules/d3-selection/src/array.js
  function array2(x3) {
    return x3 == null ? [] : Array.isArray(x3) ? x3 : Array.from(x3);
  }

  // ../node_modules/d3-selection/src/selectorAll.js
  function empty() {
    return [];
  }
  function selectorAll_default(selector) {
    return selector == null ? empty : function() {
      return this.querySelectorAll(selector);
    };
  }

  // ../node_modules/d3-selection/src/selection/selectAll.js
  function arrayAll(select2) {
    return function() {
      return array2(select2.apply(this, arguments));
    };
  }
  function selectAll_default(select2) {
    if (typeof select2 === "function")
      select2 = arrayAll(select2);
    else
      select2 = selectorAll_default(select2);
    for (var groups = this._groups, m3 = groups.length, subgroups = [], parents = [], j3 = 0; j3 < m3; ++j3) {
      for (var group = groups[j3], n3 = group.length, node, i4 = 0; i4 < n3; ++i4) {
        if (node = group[i4]) {
          subgroups.push(select2.call(node, node.__data__, i4, group));
          parents.push(node);
        }
      }
    }
    return new Selection(subgroups, parents);
  }

  // ../node_modules/d3-selection/src/matcher.js
  function matcher_default(selector) {
    return function() {
      return this.matches(selector);
    };
  }
  function childMatcher(selector) {
    return function(node) {
      return node.matches(selector);
    };
  }

  // ../node_modules/d3-selection/src/selection/selectChild.js
  var find2 = Array.prototype.find;
  function childFind(match) {
    return function() {
      return find2.call(this.children, match);
    };
  }
  function childFirst() {
    return this.firstElementChild;
  }
  function selectChild_default(match) {
    return this.select(match == null ? childFirst : childFind(typeof match === "function" ? match : childMatcher(match)));
  }

  // ../node_modules/d3-selection/src/selection/selectChildren.js
  var filter3 = Array.prototype.filter;
  function children() {
    return Array.from(this.children);
  }
  function childrenFilter(match) {
    return function() {
      return filter3.call(this.children, match);
    };
  }
  function selectChildren_default(match) {
    return this.selectAll(match == null ? children : childrenFilter(typeof match === "function" ? match : childMatcher(match)));
  }

  // ../node_modules/d3-selection/src/selection/filter.js
  function filter_default(match) {
    if (typeof match !== "function")
      match = matcher_default(match);
    for (var groups = this._groups, m3 = groups.length, subgroups = new Array(m3), j3 = 0; j3 < m3; ++j3) {
      for (var group = groups[j3], n3 = group.length, subgroup = subgroups[j3] = [], node, i4 = 0; i4 < n3; ++i4) {
        if ((node = group[i4]) && match.call(node, node.__data__, i4, group)) {
          subgroup.push(node);
        }
      }
    }
    return new Selection(subgroups, this._parents);
  }

  // ../node_modules/d3-selection/src/selection/sparse.js
  function sparse_default(update9) {
    return new Array(update9.length);
  }

  // ../node_modules/d3-selection/src/selection/enter.js
  function enter_default() {
    return new Selection(this._enter || this._groups.map(sparse_default), this._parents);
  }
  function EnterNode(parent, datum2) {
    this.ownerDocument = parent.ownerDocument;
    this.namespaceURI = parent.namespaceURI;
    this._next = null;
    this._parent = parent;
    this.__data__ = datum2;
  }
  EnterNode.prototype = {
    constructor: EnterNode,
    appendChild: function(child) {
      return this._parent.insertBefore(child, this._next);
    },
    insertBefore: function(child, next) {
      return this._parent.insertBefore(child, next);
    },
    querySelector: function(selector) {
      return this._parent.querySelector(selector);
    },
    querySelectorAll: function(selector) {
      return this._parent.querySelectorAll(selector);
    }
  };

  // ../node_modules/d3-selection/src/constant.js
  function constant_default(x3) {
    return function() {
      return x3;
    };
  }

  // ../node_modules/d3-selection/src/selection/data.js
  function bindIndex(parent, group, enter, update9, exit, data) {
    var i4 = 0, node, groupLength = group.length, dataLength = data.length;
    for (; i4 < dataLength; ++i4) {
      if (node = group[i4]) {
        node.__data__ = data[i4];
        update9[i4] = node;
      } else {
        enter[i4] = new EnterNode(parent, data[i4]);
      }
    }
    for (; i4 < groupLength; ++i4) {
      if (node = group[i4]) {
        exit[i4] = node;
      }
    }
  }
  function bindKey(parent, group, enter, update9, exit, data, key) {
    var i4, node, nodeByKeyValue = /* @__PURE__ */ new Map(), groupLength = group.length, dataLength = data.length, keyValues = new Array(groupLength), keyValue;
    for (i4 = 0; i4 < groupLength; ++i4) {
      if (node = group[i4]) {
        keyValues[i4] = keyValue = key.call(node, node.__data__, i4, group) + "";
        if (nodeByKeyValue.has(keyValue)) {
          exit[i4] = node;
        } else {
          nodeByKeyValue.set(keyValue, node);
        }
      }
    }
    for (i4 = 0; i4 < dataLength; ++i4) {
      keyValue = key.call(parent, data[i4], i4, data) + "";
      if (node = nodeByKeyValue.get(keyValue)) {
        update9[i4] = node;
        node.__data__ = data[i4];
        nodeByKeyValue.delete(keyValue);
      } else {
        enter[i4] = new EnterNode(parent, data[i4]);
      }
    }
    for (i4 = 0; i4 < groupLength; ++i4) {
      if ((node = group[i4]) && nodeByKeyValue.get(keyValues[i4]) === node) {
        exit[i4] = node;
      }
    }
  }
  function datum(node) {
    return node.__data__;
  }
  function data_default(value, key) {
    if (!arguments.length)
      return Array.from(this, datum);
    var bind = key ? bindKey : bindIndex, parents = this._parents, groups = this._groups;
    if (typeof value !== "function")
      value = constant_default(value);
    for (var m3 = groups.length, update9 = new Array(m3), enter = new Array(m3), exit = new Array(m3), j3 = 0; j3 < m3; ++j3) {
      var parent = parents[j3], group = groups[j3], groupLength = group.length, data = arraylike(value.call(parent, parent && parent.__data__, j3, parents)), dataLength = data.length, enterGroup = enter[j3] = new Array(dataLength), updateGroup = update9[j3] = new Array(dataLength), exitGroup = exit[j3] = new Array(groupLength);
      bind(parent, group, enterGroup, updateGroup, exitGroup, data, key);
      for (var i0 = 0, i1 = 0, previous, next; i0 < dataLength; ++i0) {
        if (previous = enterGroup[i0]) {
          if (i0 >= i1)
            i1 = i0 + 1;
          while (!(next = updateGroup[i1]) && ++i1 < dataLength)
            ;
          previous._next = next || null;
        }
      }
    }
    update9 = new Selection(update9, parents);
    update9._enter = enter;
    update9._exit = exit;
    return update9;
  }
  function arraylike(data) {
    return typeof data === "object" && "length" in data ? data : Array.from(data);
  }

  // ../node_modules/d3-selection/src/selection/exit.js
  function exit_default() {
    return new Selection(this._exit || this._groups.map(sparse_default), this._parents);
  }

  // ../node_modules/d3-selection/src/selection/join.js
  function join_default(onenter, onupdate, onexit) {
    var enter = this.enter(), update9 = this, exit = this.exit();
    if (typeof onenter === "function") {
      enter = onenter(enter);
      if (enter)
        enter = enter.selection();
    } else {
      enter = enter.append(onenter + "");
    }
    if (onupdate != null) {
      update9 = onupdate(update9);
      if (update9)
        update9 = update9.selection();
    }
    if (onexit == null)
      exit.remove();
    else
      onexit(exit);
    return enter && update9 ? enter.merge(update9).order() : update9;
  }

  // ../node_modules/d3-selection/src/selection/merge.js
  function merge_default(context) {
    var selection2 = context.selection ? context.selection() : context;
    for (var groups0 = this._groups, groups1 = selection2._groups, m0 = groups0.length, m1 = groups1.length, m3 = Math.min(m0, m1), merges = new Array(m0), j3 = 0; j3 < m3; ++j3) {
      for (var group0 = groups0[j3], group1 = groups1[j3], n3 = group0.length, merge2 = merges[j3] = new Array(n3), node, i4 = 0; i4 < n3; ++i4) {
        if (node = group0[i4] || group1[i4]) {
          merge2[i4] = node;
        }
      }
    }
    for (; j3 < m0; ++j3) {
      merges[j3] = groups0[j3];
    }
    return new Selection(merges, this._parents);
  }

  // ../node_modules/d3-selection/src/selection/order.js
  function order_default() {
    for (var groups = this._groups, j3 = -1, m3 = groups.length; ++j3 < m3; ) {
      for (var group = groups[j3], i4 = group.length - 1, next = group[i4], node; --i4 >= 0; ) {
        if (node = group[i4]) {
          if (next && node.compareDocumentPosition(next) ^ 4)
            next.parentNode.insertBefore(node, next);
          next = node;
        }
      }
    }
    return this;
  }

  // ../node_modules/d3-selection/src/selection/sort.js
  function sort_default(compare) {
    if (!compare)
      compare = ascending2;
    function compareNode(a4, b3) {
      return a4 && b3 ? compare(a4.__data__, b3.__data__) : !a4 - !b3;
    }
    for (var groups = this._groups, m3 = groups.length, sortgroups = new Array(m3), j3 = 0; j3 < m3; ++j3) {
      for (var group = groups[j3], n3 = group.length, sortgroup = sortgroups[j3] = new Array(n3), node, i4 = 0; i4 < n3; ++i4) {
        if (node = group[i4]) {
          sortgroup[i4] = node;
        }
      }
      sortgroup.sort(compareNode);
    }
    return new Selection(sortgroups, this._parents).order();
  }
  function ascending2(a4, b3) {
    return a4 < b3 ? -1 : a4 > b3 ? 1 : a4 >= b3 ? 0 : NaN;
  }

  // ../node_modules/d3-selection/src/selection/call.js
  function call_default() {
    var callback = arguments[0];
    arguments[0] = this;
    callback.apply(null, arguments);
    return this;
  }

  // ../node_modules/d3-selection/src/selection/nodes.js
  function nodes_default() {
    return Array.from(this);
  }

  // ../node_modules/d3-selection/src/selection/node.js
  function node_default() {
    for (var groups = this._groups, j3 = 0, m3 = groups.length; j3 < m3; ++j3) {
      for (var group = groups[j3], i4 = 0, n3 = group.length; i4 < n3; ++i4) {
        var node = group[i4];
        if (node)
          return node;
      }
    }
    return null;
  }

  // ../node_modules/d3-selection/src/selection/size.js
  function size_default() {
    let size = 0;
    for (const node of this)
      ++size;
    return size;
  }

  // ../node_modules/d3-selection/src/selection/empty.js
  function empty_default() {
    return !this.node();
  }

  // ../node_modules/d3-selection/src/selection/each.js
  function each_default(callback) {
    for (var groups = this._groups, j3 = 0, m3 = groups.length; j3 < m3; ++j3) {
      for (var group = groups[j3], i4 = 0, n3 = group.length, node; i4 < n3; ++i4) {
        if (node = group[i4])
          callback.call(node, node.__data__, i4, group);
      }
    }
    return this;
  }

  // ../node_modules/d3-selection/src/selection/attr.js
  function attrRemove(name) {
    return function() {
      this.removeAttribute(name);
    };
  }
  function attrRemoveNS(fullname) {
    return function() {
      this.removeAttributeNS(fullname.space, fullname.local);
    };
  }
  function attrConstant(name, value) {
    return function() {
      this.setAttribute(name, value);
    };
  }
  function attrConstantNS(fullname, value) {
    return function() {
      this.setAttributeNS(fullname.space, fullname.local, value);
    };
  }
  function attrFunction(name, value) {
    return function() {
      var v3 = value.apply(this, arguments);
      if (v3 == null)
        this.removeAttribute(name);
      else
        this.setAttribute(name, v3);
    };
  }
  function attrFunctionNS(fullname, value) {
    return function() {
      var v3 = value.apply(this, arguments);
      if (v3 == null)
        this.removeAttributeNS(fullname.space, fullname.local);
      else
        this.setAttributeNS(fullname.space, fullname.local, v3);
    };
  }
  function attr_default(name, value) {
    var fullname = namespace_default(name);
    if (arguments.length < 2) {
      var node = this.node();
      return fullname.local ? node.getAttributeNS(fullname.space, fullname.local) : node.getAttribute(fullname);
    }
    return this.each((value == null ? fullname.local ? attrRemoveNS : attrRemove : typeof value === "function" ? fullname.local ? attrFunctionNS : attrFunction : fullname.local ? attrConstantNS : attrConstant)(fullname, value));
  }

  // ../node_modules/d3-selection/src/window.js
  function window_default(node) {
    return node.ownerDocument && node.ownerDocument.defaultView || node.document && node || node.defaultView;
  }

  // ../node_modules/d3-selection/src/selection/style.js
  function styleRemove(name) {
    return function() {
      this.style.removeProperty(name);
    };
  }
  function styleConstant(name, value, priority) {
    return function() {
      this.style.setProperty(name, value, priority);
    };
  }
  function styleFunction(name, value, priority) {
    return function() {
      var v3 = value.apply(this, arguments);
      if (v3 == null)
        this.style.removeProperty(name);
      else
        this.style.setProperty(name, v3, priority);
    };
  }
  function style_default(name, value, priority) {
    return arguments.length > 1 ? this.each((value == null ? styleRemove : typeof value === "function" ? styleFunction : styleConstant)(name, value, priority == null ? "" : priority)) : styleValue(this.node(), name);
  }
  function styleValue(node, name) {
    return node.style.getPropertyValue(name) || window_default(node).getComputedStyle(node, null).getPropertyValue(name);
  }

  // ../node_modules/d3-selection/src/selection/property.js
  function propertyRemove(name) {
    return function() {
      delete this[name];
    };
  }
  function propertyConstant(name, value) {
    return function() {
      this[name] = value;
    };
  }
  function propertyFunction(name, value) {
    return function() {
      var v3 = value.apply(this, arguments);
      if (v3 == null)
        delete this[name];
      else
        this[name] = v3;
    };
  }
  function property_default(name, value) {
    return arguments.length > 1 ? this.each((value == null ? propertyRemove : typeof value === "function" ? propertyFunction : propertyConstant)(name, value)) : this.node()[name];
  }

  // ../node_modules/d3-selection/src/selection/classed.js
  function classArray(string) {
    return string.trim().split(/^|\s+/);
  }
  function classList(node) {
    return node.classList || new ClassList(node);
  }
  function ClassList(node) {
    this._node = node;
    this._names = classArray(node.getAttribute("class") || "");
  }
  ClassList.prototype = {
    add: function(name) {
      var i4 = this._names.indexOf(name);
      if (i4 < 0) {
        this._names.push(name);
        this._node.setAttribute("class", this._names.join(" "));
      }
    },
    remove: function(name) {
      var i4 = this._names.indexOf(name);
      if (i4 >= 0) {
        this._names.splice(i4, 1);
        this._node.setAttribute("class", this._names.join(" "));
      }
    },
    contains: function(name) {
      return this._names.indexOf(name) >= 0;
    }
  };
  function classedAdd(node, names) {
    var list = classList(node), i4 = -1, n3 = names.length;
    while (++i4 < n3)
      list.add(names[i4]);
  }
  function classedRemove(node, names) {
    var list = classList(node), i4 = -1, n3 = names.length;
    while (++i4 < n3)
      list.remove(names[i4]);
  }
  function classedTrue(names) {
    return function() {
      classedAdd(this, names);
    };
  }
  function classedFalse(names) {
    return function() {
      classedRemove(this, names);
    };
  }
  function classedFunction(names, value) {
    return function() {
      (value.apply(this, arguments) ? classedAdd : classedRemove)(this, names);
    };
  }
  function classed_default(name, value) {
    var names = classArray(name + "");
    if (arguments.length < 2) {
      var list = classList(this.node()), i4 = -1, n3 = names.length;
      while (++i4 < n3)
        if (!list.contains(names[i4]))
          return false;
      return true;
    }
    return this.each((typeof value === "function" ? classedFunction : value ? classedTrue : classedFalse)(names, value));
  }

  // ../node_modules/d3-selection/src/selection/text.js
  function textRemove() {
    this.textContent = "";
  }
  function textConstant(value) {
    return function() {
      this.textContent = value;
    };
  }
  function textFunction(value) {
    return function() {
      var v3 = value.apply(this, arguments);
      this.textContent = v3 == null ? "" : v3;
    };
  }
  function text_default(value) {
    return arguments.length ? this.each(value == null ? textRemove : (typeof value === "function" ? textFunction : textConstant)(value)) : this.node().textContent;
  }

  // ../node_modules/d3-selection/src/selection/html.js
  function htmlRemove() {
    this.innerHTML = "";
  }
  function htmlConstant(value) {
    return function() {
      this.innerHTML = value;
    };
  }
  function htmlFunction(value) {
    return function() {
      var v3 = value.apply(this, arguments);
      this.innerHTML = v3 == null ? "" : v3;
    };
  }
  function html_default(value) {
    return arguments.length ? this.each(value == null ? htmlRemove : (typeof value === "function" ? htmlFunction : htmlConstant)(value)) : this.node().innerHTML;
  }

  // ../node_modules/d3-selection/src/selection/raise.js
  function raise() {
    if (this.nextSibling)
      this.parentNode.appendChild(this);
  }
  function raise_default() {
    return this.each(raise);
  }

  // ../node_modules/d3-selection/src/selection/lower.js
  function lower() {
    if (this.previousSibling)
      this.parentNode.insertBefore(this, this.parentNode.firstChild);
  }
  function lower_default() {
    return this.each(lower);
  }

  // ../node_modules/d3-selection/src/selection/append.js
  function append_default(name) {
    var create2 = typeof name === "function" ? name : creator_default(name);
    return this.select(function() {
      return this.appendChild(create2.apply(this, arguments));
    });
  }

  // ../node_modules/d3-selection/src/selection/insert.js
  function constantNull() {
    return null;
  }
  function insert_default(name, before) {
    var create2 = typeof name === "function" ? name : creator_default(name), select2 = before == null ? constantNull : typeof before === "function" ? before : selector_default(before);
    return this.select(function() {
      return this.insertBefore(create2.apply(this, arguments), select2.apply(this, arguments) || null);
    });
  }

  // ../node_modules/d3-selection/src/selection/remove.js
  function remove3() {
    var parent = this.parentNode;
    if (parent)
      parent.removeChild(this);
  }
  function remove_default() {
    return this.each(remove3);
  }

  // ../node_modules/d3-selection/src/selection/clone.js
  function selection_cloneShallow() {
    var clone2 = this.cloneNode(false), parent = this.parentNode;
    return parent ? parent.insertBefore(clone2, this.nextSibling) : clone2;
  }
  function selection_cloneDeep() {
    var clone2 = this.cloneNode(true), parent = this.parentNode;
    return parent ? parent.insertBefore(clone2, this.nextSibling) : clone2;
  }
  function clone_default(deep) {
    return this.select(deep ? selection_cloneDeep : selection_cloneShallow);
  }

  // ../node_modules/d3-selection/src/selection/datum.js
  function datum_default(value) {
    return arguments.length ? this.property("__data__", value) : this.node().__data__;
  }

  // ../node_modules/d3-selection/src/selection/on.js
  function contextListener(listener) {
    return function(event) {
      listener.call(this, event, this.__data__);
    };
  }
  function parseTypenames2(typenames) {
    return typenames.trim().split(/^|\s+/).map(function(t3) {
      var name = "", i4 = t3.indexOf(".");
      if (i4 >= 0)
        name = t3.slice(i4 + 1), t3 = t3.slice(0, i4);
      return { type: t3, name };
    });
  }
  function onRemove(typename) {
    return function() {
      var on = this.__on;
      if (!on)
        return;
      for (var j3 = 0, i4 = -1, m3 = on.length, o4; j3 < m3; ++j3) {
        if (o4 = on[j3], (!typename.type || o4.type === typename.type) && o4.name === typename.name) {
          this.removeEventListener(o4.type, o4.listener, o4.options);
        } else {
          on[++i4] = o4;
        }
      }
      if (++i4)
        on.length = i4;
      else
        delete this.__on;
    };
  }
  function onAdd(typename, value, options) {
    return function() {
      var on = this.__on, o4, listener = contextListener(value);
      if (on)
        for (var j3 = 0, m3 = on.length; j3 < m3; ++j3) {
          if ((o4 = on[j3]).type === typename.type && o4.name === typename.name) {
            this.removeEventListener(o4.type, o4.listener, o4.options);
            this.addEventListener(o4.type, o4.listener = listener, o4.options = options);
            o4.value = value;
            return;
          }
        }
      this.addEventListener(typename.type, listener, options);
      o4 = { type: typename.type, name: typename.name, value, listener, options };
      if (!on)
        this.__on = [o4];
      else
        on.push(o4);
    };
  }
  function on_default(typename, value, options) {
    var typenames = parseTypenames2(typename + ""), i4, n3 = typenames.length, t3;
    if (arguments.length < 2) {
      var on = this.node().__on;
      if (on)
        for (var j3 = 0, m3 = on.length, o4; j3 < m3; ++j3) {
          for (i4 = 0, o4 = on[j3]; i4 < n3; ++i4) {
            if ((t3 = typenames[i4]).type === o4.type && t3.name === o4.name) {
              return o4.value;
            }
          }
        }
      return;
    }
    on = value ? onAdd : onRemove;
    for (i4 = 0; i4 < n3; ++i4)
      this.each(on(typenames[i4], value, options));
    return this;
  }

  // ../node_modules/d3-selection/src/selection/dispatch.js
  function dispatchEvent(node, type2, params) {
    var window2 = window_default(node), event = window2.CustomEvent;
    if (typeof event === "function") {
      event = new event(type2, params);
    } else {
      event = window2.document.createEvent("Event");
      if (params)
        event.initEvent(type2, params.bubbles, params.cancelable), event.detail = params.detail;
      else
        event.initEvent(type2, false, false);
    }
    node.dispatchEvent(event);
  }
  function dispatchConstant(type2, params) {
    return function() {
      return dispatchEvent(this, type2, params);
    };
  }
  function dispatchFunction(type2, params) {
    return function() {
      return dispatchEvent(this, type2, params.apply(this, arguments));
    };
  }
  function dispatch_default2(type2, params) {
    return this.each((typeof params === "function" ? dispatchFunction : dispatchConstant)(type2, params));
  }

  // ../node_modules/d3-selection/src/selection/iterator.js
  function* iterator_default() {
    for (var groups = this._groups, j3 = 0, m3 = groups.length; j3 < m3; ++j3) {
      for (var group = groups[j3], i4 = 0, n3 = group.length, node; i4 < n3; ++i4) {
        if (node = group[i4])
          yield node;
      }
    }
  }

  // ../node_modules/d3-selection/src/selection/index.js
  var root = [null];
  function Selection(groups, parents) {
    this._groups = groups;
    this._parents = parents;
  }
  function selection() {
    return new Selection([[document.documentElement]], root);
  }
  function selection_selection() {
    return this;
  }
  Selection.prototype = selection.prototype = {
    constructor: Selection,
    select: select_default,
    selectAll: selectAll_default,
    selectChild: selectChild_default,
    selectChildren: selectChildren_default,
    filter: filter_default,
    data: data_default,
    enter: enter_default,
    exit: exit_default,
    join: join_default,
    merge: merge_default,
    selection: selection_selection,
    order: order_default,
    sort: sort_default,
    call: call_default,
    nodes: nodes_default,
    node: node_default,
    size: size_default,
    empty: empty_default,
    each: each_default,
    attr: attr_default,
    style: style_default,
    property: property_default,
    classed: classed_default,
    text: text_default,
    html: html_default,
    raise: raise_default,
    lower: lower_default,
    append: append_default,
    insert: insert_default,
    remove: remove_default,
    clone: clone_default,
    datum: datum_default,
    on: on_default,
    dispatch: dispatch_default2,
    [Symbol.iterator]: iterator_default
  };
  var selection_default = selection;

  // ../node_modules/d3-selection/src/select.js
  function select_default2(selector) {
    return typeof selector === "string" ? new Selection([[document.querySelector(selector)]], [document.documentElement]) : new Selection([[selector]], root);
  }

  // ../node_modules/d3-color/src/define.js
  function define_default(constructor, factory, prototype) {
    constructor.prototype = factory.prototype = prototype;
    prototype.constructor = constructor;
  }
  function extend(parent, definition) {
    var prototype = Object.create(parent.prototype);
    for (var key in definition)
      prototype[key] = definition[key];
    return prototype;
  }

  // ../node_modules/d3-color/src/color.js
  function Color() {
  }
  var darker = 0.7;
  var brighter = 1 / darker;
  var reI = "\\s*([+-]?\\d+)\\s*";
  var reN = "\\s*([+-]?(?:\\d*\\.)?\\d+(?:[eE][+-]?\\d+)?)\\s*";
  var reP = "\\s*([+-]?(?:\\d*\\.)?\\d+(?:[eE][+-]?\\d+)?)%\\s*";
  var reHex = /^#([0-9a-f]{3,8})$/;
  var reRgbInteger = new RegExp(`^rgb\\(${reI},${reI},${reI}\\)$`);
  var reRgbPercent = new RegExp(`^rgb\\(${reP},${reP},${reP}\\)$`);
  var reRgbaInteger = new RegExp(`^rgba\\(${reI},${reI},${reI},${reN}\\)$`);
  var reRgbaPercent = new RegExp(`^rgba\\(${reP},${reP},${reP},${reN}\\)$`);
  var reHslPercent = new RegExp(`^hsl\\(${reN},${reP},${reP}\\)$`);
  var reHslaPercent = new RegExp(`^hsla\\(${reN},${reP},${reP},${reN}\\)$`);
  var named = {
    aliceblue: 15792383,
    antiquewhite: 16444375,
    aqua: 65535,
    aquamarine: 8388564,
    azure: 15794175,
    beige: 16119260,
    bisque: 16770244,
    black: 0,
    blanchedalmond: 16772045,
    blue: 255,
    blueviolet: 9055202,
    brown: 10824234,
    burlywood: 14596231,
    cadetblue: 6266528,
    chartreuse: 8388352,
    chocolate: 13789470,
    coral: 16744272,
    cornflowerblue: 6591981,
    cornsilk: 16775388,
    crimson: 14423100,
    cyan: 65535,
    darkblue: 139,
    darkcyan: 35723,
    darkgoldenrod: 12092939,
    darkgray: 11119017,
    darkgreen: 25600,
    darkgrey: 11119017,
    darkkhaki: 12433259,
    darkmagenta: 9109643,
    darkolivegreen: 5597999,
    darkorange: 16747520,
    darkorchid: 10040012,
    darkred: 9109504,
    darksalmon: 15308410,
    darkseagreen: 9419919,
    darkslateblue: 4734347,
    darkslategray: 3100495,
    darkslategrey: 3100495,
    darkturquoise: 52945,
    darkviolet: 9699539,
    deeppink: 16716947,
    deepskyblue: 49151,
    dimgray: 6908265,
    dimgrey: 6908265,
    dodgerblue: 2003199,
    firebrick: 11674146,
    floralwhite: 16775920,
    forestgreen: 2263842,
    fuchsia: 16711935,
    gainsboro: 14474460,
    ghostwhite: 16316671,
    gold: 16766720,
    goldenrod: 14329120,
    gray: 8421504,
    green: 32768,
    greenyellow: 11403055,
    grey: 8421504,
    honeydew: 15794160,
    hotpink: 16738740,
    indianred: 13458524,
    indigo: 4915330,
    ivory: 16777200,
    khaki: 15787660,
    lavender: 15132410,
    lavenderblush: 16773365,
    lawngreen: 8190976,
    lemonchiffon: 16775885,
    lightblue: 11393254,
    lightcoral: 15761536,
    lightcyan: 14745599,
    lightgoldenrodyellow: 16448210,
    lightgray: 13882323,
    lightgreen: 9498256,
    lightgrey: 13882323,
    lightpink: 16758465,
    lightsalmon: 16752762,
    lightseagreen: 2142890,
    lightskyblue: 8900346,
    lightslategray: 7833753,
    lightslategrey: 7833753,
    lightsteelblue: 11584734,
    lightyellow: 16777184,
    lime: 65280,
    limegreen: 3329330,
    linen: 16445670,
    magenta: 16711935,
    maroon: 8388608,
    mediumaquamarine: 6737322,
    mediumblue: 205,
    mediumorchid: 12211667,
    mediumpurple: 9662683,
    mediumseagreen: 3978097,
    mediumslateblue: 8087790,
    mediumspringgreen: 64154,
    mediumturquoise: 4772300,
    mediumvioletred: 13047173,
    midnightblue: 1644912,
    mintcream: 16121850,
    mistyrose: 16770273,
    moccasin: 16770229,
    navajowhite: 16768685,
    navy: 128,
    oldlace: 16643558,
    olive: 8421376,
    olivedrab: 7048739,
    orange: 16753920,
    orangered: 16729344,
    orchid: 14315734,
    palegoldenrod: 15657130,
    palegreen: 10025880,
    paleturquoise: 11529966,
    palevioletred: 14381203,
    papayawhip: 16773077,
    peachpuff: 16767673,
    peru: 13468991,
    pink: 16761035,
    plum: 14524637,
    powderblue: 11591910,
    purple: 8388736,
    rebeccapurple: 6697881,
    red: 16711680,
    rosybrown: 12357519,
    royalblue: 4286945,
    saddlebrown: 9127187,
    salmon: 16416882,
    sandybrown: 16032864,
    seagreen: 3050327,
    seashell: 16774638,
    sienna: 10506797,
    silver: 12632256,
    skyblue: 8900331,
    slateblue: 6970061,
    slategray: 7372944,
    slategrey: 7372944,
    snow: 16775930,
    springgreen: 65407,
    steelblue: 4620980,
    tan: 13808780,
    teal: 32896,
    thistle: 14204888,
    tomato: 16737095,
    turquoise: 4251856,
    violet: 15631086,
    wheat: 16113331,
    white: 16777215,
    whitesmoke: 16119285,
    yellow: 16776960,
    yellowgreen: 10145074
  };
  define_default(Color, color, {
    copy(channels) {
      return Object.assign(new this.constructor(), this, channels);
    },
    displayable() {
      return this.rgb().displayable();
    },
    hex: color_formatHex,
    // Deprecated! Use color.formatHex.
    formatHex: color_formatHex,
    formatHex8: color_formatHex8,
    formatHsl: color_formatHsl,
    formatRgb: color_formatRgb,
    toString: color_formatRgb
  });
  function color_formatHex() {
    return this.rgb().formatHex();
  }
  function color_formatHex8() {
    return this.rgb().formatHex8();
  }
  function color_formatHsl() {
    return hslConvert(this).formatHsl();
  }
  function color_formatRgb() {
    return this.rgb().formatRgb();
  }
  function color(format2) {
    var m3, l4;
    format2 = (format2 + "").trim().toLowerCase();
    return (m3 = reHex.exec(format2)) ? (l4 = m3[1].length, m3 = parseInt(m3[1], 16), l4 === 6 ? rgbn(m3) : l4 === 3 ? new Rgb(m3 >> 8 & 15 | m3 >> 4 & 240, m3 >> 4 & 15 | m3 & 240, (m3 & 15) << 4 | m3 & 15, 1) : l4 === 8 ? rgba(m3 >> 24 & 255, m3 >> 16 & 255, m3 >> 8 & 255, (m3 & 255) / 255) : l4 === 4 ? rgba(m3 >> 12 & 15 | m3 >> 8 & 240, m3 >> 8 & 15 | m3 >> 4 & 240, m3 >> 4 & 15 | m3 & 240, ((m3 & 15) << 4 | m3 & 15) / 255) : null) : (m3 = reRgbInteger.exec(format2)) ? new Rgb(m3[1], m3[2], m3[3], 1) : (m3 = reRgbPercent.exec(format2)) ? new Rgb(m3[1] * 255 / 100, m3[2] * 255 / 100, m3[3] * 255 / 100, 1) : (m3 = reRgbaInteger.exec(format2)) ? rgba(m3[1], m3[2], m3[3], m3[4]) : (m3 = reRgbaPercent.exec(format2)) ? rgba(m3[1] * 255 / 100, m3[2] * 255 / 100, m3[3] * 255 / 100, m3[4]) : (m3 = reHslPercent.exec(format2)) ? hsla(m3[1], m3[2] / 100, m3[3] / 100, 1) : (m3 = reHslaPercent.exec(format2)) ? hsla(m3[1], m3[2] / 100, m3[3] / 100, m3[4]) : named.hasOwnProperty(format2) ? rgbn(named[format2]) : format2 === "transparent" ? new Rgb(NaN, NaN, NaN, 0) : null;
  }
  function rgbn(n3) {
    return new Rgb(n3 >> 16 & 255, n3 >> 8 & 255, n3 & 255, 1);
  }
  function rgba(r3, g3, b3, a4) {
    if (a4 <= 0)
      r3 = g3 = b3 = NaN;
    return new Rgb(r3, g3, b3, a4);
  }
  function rgbConvert(o4) {
    if (!(o4 instanceof Color))
      o4 = color(o4);
    if (!o4)
      return new Rgb();
    o4 = o4.rgb();
    return new Rgb(o4.r, o4.g, o4.b, o4.opacity);
  }
  function rgb(r3, g3, b3, opacity) {
    return arguments.length === 1 ? rgbConvert(r3) : new Rgb(r3, g3, b3, opacity == null ? 1 : opacity);
  }
  function Rgb(r3, g3, b3, opacity) {
    this.r = +r3;
    this.g = +g3;
    this.b = +b3;
    this.opacity = +opacity;
  }
  define_default(Rgb, rgb, extend(Color, {
    brighter(k3) {
      k3 = k3 == null ? brighter : Math.pow(brighter, k3);
      return new Rgb(this.r * k3, this.g * k3, this.b * k3, this.opacity);
    },
    darker(k3) {
      k3 = k3 == null ? darker : Math.pow(darker, k3);
      return new Rgb(this.r * k3, this.g * k3, this.b * k3, this.opacity);
    },
    rgb() {
      return this;
    },
    clamp() {
      return new Rgb(clampi(this.r), clampi(this.g), clampi(this.b), clampa(this.opacity));
    },
    displayable() {
      return -0.5 <= this.r && this.r < 255.5 && (-0.5 <= this.g && this.g < 255.5) && (-0.5 <= this.b && this.b < 255.5) && (0 <= this.opacity && this.opacity <= 1);
    },
    hex: rgb_formatHex,
    // Deprecated! Use color.formatHex.
    formatHex: rgb_formatHex,
    formatHex8: rgb_formatHex8,
    formatRgb: rgb_formatRgb,
    toString: rgb_formatRgb
  }));
  function rgb_formatHex() {
    return `#${hex(this.r)}${hex(this.g)}${hex(this.b)}`;
  }
  function rgb_formatHex8() {
    return `#${hex(this.r)}${hex(this.g)}${hex(this.b)}${hex((isNaN(this.opacity) ? 1 : this.opacity) * 255)}`;
  }
  function rgb_formatRgb() {
    const a4 = clampa(this.opacity);
    return `${a4 === 1 ? "rgb(" : "rgba("}${clampi(this.r)}, ${clampi(this.g)}, ${clampi(this.b)}${a4 === 1 ? ")" : `, ${a4})`}`;
  }
  function clampa(opacity) {
    return isNaN(opacity) ? 1 : Math.max(0, Math.min(1, opacity));
  }
  function clampi(value) {
    return Math.max(0, Math.min(255, Math.round(value) || 0));
  }
  function hex(value) {
    value = clampi(value);
    return (value < 16 ? "0" : "") + value.toString(16);
  }
  function hsla(h3, s3, l4, a4) {
    if (a4 <= 0)
      h3 = s3 = l4 = NaN;
    else if (l4 <= 0 || l4 >= 1)
      h3 = s3 = NaN;
    else if (s3 <= 0)
      h3 = NaN;
    return new Hsl(h3, s3, l4, a4);
  }
  function hslConvert(o4) {
    if (o4 instanceof Hsl)
      return new Hsl(o4.h, o4.s, o4.l, o4.opacity);
    if (!(o4 instanceof Color))
      o4 = color(o4);
    if (!o4)
      return new Hsl();
    if (o4 instanceof Hsl)
      return o4;
    o4 = o4.rgb();
    var r3 = o4.r / 255, g3 = o4.g / 255, b3 = o4.b / 255, min4 = Math.min(r3, g3, b3), max5 = Math.max(r3, g3, b3), h3 = NaN, s3 = max5 - min4, l4 = (max5 + min4) / 2;
    if (s3) {
      if (r3 === max5)
        h3 = (g3 - b3) / s3 + (g3 < b3) * 6;
      else if (g3 === max5)
        h3 = (b3 - r3) / s3 + 2;
      else
        h3 = (r3 - g3) / s3 + 4;
      s3 /= l4 < 0.5 ? max5 + min4 : 2 - max5 - min4;
      h3 *= 60;
    } else {
      s3 = l4 > 0 && l4 < 1 ? 0 : h3;
    }
    return new Hsl(h3, s3, l4, o4.opacity);
  }
  function hsl(h3, s3, l4, opacity) {
    return arguments.length === 1 ? hslConvert(h3) : new Hsl(h3, s3, l4, opacity == null ? 1 : opacity);
  }
  function Hsl(h3, s3, l4, opacity) {
    this.h = +h3;
    this.s = +s3;
    this.l = +l4;
    this.opacity = +opacity;
  }
  define_default(Hsl, hsl, extend(Color, {
    brighter(k3) {
      k3 = k3 == null ? brighter : Math.pow(brighter, k3);
      return new Hsl(this.h, this.s, this.l * k3, this.opacity);
    },
    darker(k3) {
      k3 = k3 == null ? darker : Math.pow(darker, k3);
      return new Hsl(this.h, this.s, this.l * k3, this.opacity);
    },
    rgb() {
      var h3 = this.h % 360 + (this.h < 0) * 360, s3 = isNaN(h3) || isNaN(this.s) ? 0 : this.s, l4 = this.l, m22 = l4 + (l4 < 0.5 ? l4 : 1 - l4) * s3, m1 = 2 * l4 - m22;
      return new Rgb(
        hsl2rgb(h3 >= 240 ? h3 - 240 : h3 + 120, m1, m22),
        hsl2rgb(h3, m1, m22),
        hsl2rgb(h3 < 120 ? h3 + 240 : h3 - 120, m1, m22),
        this.opacity
      );
    },
    clamp() {
      return new Hsl(clamph(this.h), clampt(this.s), clampt(this.l), clampa(this.opacity));
    },
    displayable() {
      return (0 <= this.s && this.s <= 1 || isNaN(this.s)) && (0 <= this.l && this.l <= 1) && (0 <= this.opacity && this.opacity <= 1);
    },
    formatHsl() {
      const a4 = clampa(this.opacity);
      return `${a4 === 1 ? "hsl(" : "hsla("}${clamph(this.h)}, ${clampt(this.s) * 100}%, ${clampt(this.l) * 100}%${a4 === 1 ? ")" : `, ${a4})`}`;
    }
  }));
  function clamph(value) {
    value = (value || 0) % 360;
    return value < 0 ? value + 360 : value;
  }
  function clampt(value) {
    return Math.max(0, Math.min(1, value || 0));
  }
  function hsl2rgb(h3, m1, m22) {
    return (h3 < 60 ? m1 + (m22 - m1) * h3 / 60 : h3 < 180 ? m22 : h3 < 240 ? m1 + (m22 - m1) * (240 - h3) / 60 : m1) * 255;
  }

  // ../node_modules/d3-interpolate/src/basis.js
  function basis(t1, v0, v1, v22, v3) {
    var t22 = t1 * t1, t3 = t22 * t1;
    return ((1 - 3 * t1 + 3 * t22 - t3) * v0 + (4 - 6 * t22 + 3 * t3) * v1 + (1 + 3 * t1 + 3 * t22 - 3 * t3) * v22 + t3 * v3) / 6;
  }
  function basis_default(values3) {
    var n3 = values3.length - 1;
    return function(t3) {
      var i4 = t3 <= 0 ? t3 = 0 : t3 >= 1 ? (t3 = 1, n3 - 1) : Math.floor(t3 * n3), v1 = values3[i4], v22 = values3[i4 + 1], v0 = i4 > 0 ? values3[i4 - 1] : 2 * v1 - v22, v3 = i4 < n3 - 1 ? values3[i4 + 2] : 2 * v22 - v1;
      return basis((t3 - i4 / n3) * n3, v0, v1, v22, v3);
    };
  }

  // ../node_modules/d3-interpolate/src/basisClosed.js
  function basisClosed_default(values3) {
    var n3 = values3.length;
    return function(t3) {
      var i4 = Math.floor(((t3 %= 1) < 0 ? ++t3 : t3) * n3), v0 = values3[(i4 + n3 - 1) % n3], v1 = values3[i4 % n3], v22 = values3[(i4 + 1) % n3], v3 = values3[(i4 + 2) % n3];
      return basis((t3 - i4 / n3) * n3, v0, v1, v22, v3);
    };
  }

  // ../node_modules/d3-interpolate/src/constant.js
  var constant_default2 = (x3) => () => x3;

  // ../node_modules/d3-interpolate/src/color.js
  function linear(a4, d3) {
    return function(t3) {
      return a4 + t3 * d3;
    };
  }
  function exponential(a4, b3, y3) {
    return a4 = Math.pow(a4, y3), b3 = Math.pow(b3, y3) - a4, y3 = 1 / y3, function(t3) {
      return Math.pow(a4 + t3 * b3, y3);
    };
  }
  function gamma(y3) {
    return (y3 = +y3) === 1 ? nogamma : function(a4, b3) {
      return b3 - a4 ? exponential(a4, b3, y3) : constant_default2(isNaN(a4) ? b3 : a4);
    };
  }
  function nogamma(a4, b3) {
    var d3 = b3 - a4;
    return d3 ? linear(a4, d3) : constant_default2(isNaN(a4) ? b3 : a4);
  }

  // ../node_modules/d3-interpolate/src/rgb.js
  var rgb_default = function rgbGamma(y3) {
    var color2 = gamma(y3);
    function rgb2(start2, end) {
      var r3 = color2((start2 = rgb(start2)).r, (end = rgb(end)).r), g3 = color2(start2.g, end.g), b3 = color2(start2.b, end.b), opacity = nogamma(start2.opacity, end.opacity);
      return function(t3) {
        start2.r = r3(t3);
        start2.g = g3(t3);
        start2.b = b3(t3);
        start2.opacity = opacity(t3);
        return start2 + "";
      };
    }
    rgb2.gamma = rgbGamma;
    return rgb2;
  }(1);
  function rgbSpline(spline) {
    return function(colors) {
      var n3 = colors.length, r3 = new Array(n3), g3 = new Array(n3), b3 = new Array(n3), i4, color2;
      for (i4 = 0; i4 < n3; ++i4) {
        color2 = rgb(colors[i4]);
        r3[i4] = color2.r || 0;
        g3[i4] = color2.g || 0;
        b3[i4] = color2.b || 0;
      }
      r3 = spline(r3);
      g3 = spline(g3);
      b3 = spline(b3);
      color2.opacity = 1;
      return function(t3) {
        color2.r = r3(t3);
        color2.g = g3(t3);
        color2.b = b3(t3);
        return color2 + "";
      };
    };
  }
  var rgbBasis = rgbSpline(basis_default);
  var rgbBasisClosed = rgbSpline(basisClosed_default);

  // ../node_modules/d3-interpolate/src/numberArray.js
  function numberArray_default(a4, b3) {
    if (!b3)
      b3 = [];
    var n3 = a4 ? Math.min(b3.length, a4.length) : 0, c3 = b3.slice(), i4;
    return function(t3) {
      for (i4 = 0; i4 < n3; ++i4)
        c3[i4] = a4[i4] * (1 - t3) + b3[i4] * t3;
      return c3;
    };
  }
  function isNumberArray(x3) {
    return ArrayBuffer.isView(x3) && !(x3 instanceof DataView);
  }

  // ../node_modules/d3-interpolate/src/array.js
  function genericArray(a4, b3) {
    var nb = b3 ? b3.length : 0, na = a4 ? Math.min(nb, a4.length) : 0, x3 = new Array(na), c3 = new Array(nb), i4;
    for (i4 = 0; i4 < na; ++i4)
      x3[i4] = value_default(a4[i4], b3[i4]);
    for (; i4 < nb; ++i4)
      c3[i4] = b3[i4];
    return function(t3) {
      for (i4 = 0; i4 < na; ++i4)
        c3[i4] = x3[i4](t3);
      return c3;
    };
  }

  // ../node_modules/d3-interpolate/src/date.js
  function date_default(a4, b3) {
    var d3 = /* @__PURE__ */ new Date();
    return a4 = +a4, b3 = +b3, function(t3) {
      return d3.setTime(a4 * (1 - t3) + b3 * t3), d3;
    };
  }

  // ../node_modules/d3-interpolate/src/number.js
  function number_default(a4, b3) {
    return a4 = +a4, b3 = +b3, function(t3) {
      return a4 * (1 - t3) + b3 * t3;
    };
  }

  // ../node_modules/d3-interpolate/src/object.js
  function object_default(a4, b3) {
    var i4 = {}, c3 = {}, k3;
    if (a4 === null || typeof a4 !== "object")
      a4 = {};
    if (b3 === null || typeof b3 !== "object")
      b3 = {};
    for (k3 in b3) {
      if (k3 in a4) {
        i4[k3] = value_default(a4[k3], b3[k3]);
      } else {
        c3[k3] = b3[k3];
      }
    }
    return function(t3) {
      for (k3 in i4)
        c3[k3] = i4[k3](t3);
      return c3;
    };
  }

  // ../node_modules/d3-interpolate/src/string.js
  var reA = /[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g;
  var reB = new RegExp(reA.source, "g");
  function zero2(b3) {
    return function() {
      return b3;
    };
  }
  function one(b3) {
    return function(t3) {
      return b3(t3) + "";
    };
  }
  function string_default(a4, b3) {
    var bi = reA.lastIndex = reB.lastIndex = 0, am, bm, bs, i4 = -1, s3 = [], q3 = [];
    a4 = a4 + "", b3 = b3 + "";
    while ((am = reA.exec(a4)) && (bm = reB.exec(b3))) {
      if ((bs = bm.index) > bi) {
        bs = b3.slice(bi, bs);
        if (s3[i4])
          s3[i4] += bs;
        else
          s3[++i4] = bs;
      }
      if ((am = am[0]) === (bm = bm[0])) {
        if (s3[i4])
          s3[i4] += bm;
        else
          s3[++i4] = bm;
      } else {
        s3[++i4] = null;
        q3.push({ i: i4, x: number_default(am, bm) });
      }
      bi = reB.lastIndex;
    }
    if (bi < b3.length) {
      bs = b3.slice(bi);
      if (s3[i4])
        s3[i4] += bs;
      else
        s3[++i4] = bs;
    }
    return s3.length < 2 ? q3[0] ? one(q3[0].x) : zero2(b3) : (b3 = q3.length, function(t3) {
      for (var i5 = 0, o4; i5 < b3; ++i5)
        s3[(o4 = q3[i5]).i] = o4.x(t3);
      return s3.join("");
    });
  }

  // ../node_modules/d3-interpolate/src/value.js
  function value_default(a4, b3) {
    var t3 = typeof b3, c3;
    return b3 == null || t3 === "boolean" ? constant_default2(b3) : (t3 === "number" ? number_default : t3 === "string" ? (c3 = color(b3)) ? (b3 = c3, rgb_default) : string_default : b3 instanceof color ? rgb_default : b3 instanceof Date ? date_default : isNumberArray(b3) ? numberArray_default : Array.isArray(b3) ? genericArray : typeof b3.valueOf !== "function" && typeof b3.toString !== "function" || isNaN(b3) ? object_default : number_default)(a4, b3);
  }

  // ../node_modules/d3-interpolate/src/round.js
  function round_default(a4, b3) {
    return a4 = +a4, b3 = +b3, function(t3) {
      return Math.round(a4 * (1 - t3) + b3 * t3);
    };
  }

  // ../node_modules/d3-interpolate/src/transform/decompose.js
  var degrees = 180 / Math.PI;
  var identity2 = {
    translateX: 0,
    translateY: 0,
    rotate: 0,
    skewX: 0,
    scaleX: 1,
    scaleY: 1
  };
  function decompose_default(a4, b3, c3, d3, e4, f3) {
    var scaleX, scaleY, skewX;
    if (scaleX = Math.sqrt(a4 * a4 + b3 * b3))
      a4 /= scaleX, b3 /= scaleX;
    if (skewX = a4 * c3 + b3 * d3)
      c3 -= a4 * skewX, d3 -= b3 * skewX;
    if (scaleY = Math.sqrt(c3 * c3 + d3 * d3))
      c3 /= scaleY, d3 /= scaleY, skewX /= scaleY;
    if (a4 * d3 < b3 * c3)
      a4 = -a4, b3 = -b3, skewX = -skewX, scaleX = -scaleX;
    return {
      translateX: e4,
      translateY: f3,
      rotate: Math.atan2(b3, a4) * degrees,
      skewX: Math.atan(skewX) * degrees,
      scaleX,
      scaleY
    };
  }

  // ../node_modules/d3-interpolate/src/transform/parse.js
  var svgNode;
  function parseCss(value) {
    const m3 = new (typeof DOMMatrix === "function" ? DOMMatrix : WebKitCSSMatrix)(value + "");
    return m3.isIdentity ? identity2 : decompose_default(m3.a, m3.b, m3.c, m3.d, m3.e, m3.f);
  }
  function parseSvg(value) {
    if (value == null)
      return identity2;
    if (!svgNode)
      svgNode = document.createElementNS("http://www.w3.org/2000/svg", "g");
    svgNode.setAttribute("transform", value);
    if (!(value = svgNode.transform.baseVal.consolidate()))
      return identity2;
    value = value.matrix;
    return decompose_default(value.a, value.b, value.c, value.d, value.e, value.f);
  }

  // ../node_modules/d3-interpolate/src/transform/index.js
  function interpolateTransform(parse, pxComma, pxParen, degParen) {
    function pop(s3) {
      return s3.length ? s3.pop() + " " : "";
    }
    function translate2(xa, ya, xb, yb, s3, q3) {
      if (xa !== xb || ya !== yb) {
        var i4 = s3.push("translate(", null, pxComma, null, pxParen);
        q3.push({ i: i4 - 4, x: number_default(xa, xb) }, { i: i4 - 2, x: number_default(ya, yb) });
      } else if (xb || yb) {
        s3.push("translate(" + xb + pxComma + yb + pxParen);
      }
    }
    function rotate(a4, b3, s3, q3) {
      if (a4 !== b3) {
        if (a4 - b3 > 180)
          b3 += 360;
        else if (b3 - a4 > 180)
          a4 += 360;
        q3.push({ i: s3.push(pop(s3) + "rotate(", null, degParen) - 2, x: number_default(a4, b3) });
      } else if (b3) {
        s3.push(pop(s3) + "rotate(" + b3 + degParen);
      }
    }
    function skewX(a4, b3, s3, q3) {
      if (a4 !== b3) {
        q3.push({ i: s3.push(pop(s3) + "skewX(", null, degParen) - 2, x: number_default(a4, b3) });
      } else if (b3) {
        s3.push(pop(s3) + "skewX(" + b3 + degParen);
      }
    }
    function scale(xa, ya, xb, yb, s3, q3) {
      if (xa !== xb || ya !== yb) {
        var i4 = s3.push(pop(s3) + "scale(", null, ",", null, ")");
        q3.push({ i: i4 - 4, x: number_default(xa, xb) }, { i: i4 - 2, x: number_default(ya, yb) });
      } else if (xb !== 1 || yb !== 1) {
        s3.push(pop(s3) + "scale(" + xb + "," + yb + ")");
      }
    }
    return function(a4, b3) {
      var s3 = [], q3 = [];
      a4 = parse(a4), b3 = parse(b3);
      translate2(a4.translateX, a4.translateY, b3.translateX, b3.translateY, s3, q3);
      rotate(a4.rotate, b3.rotate, s3, q3);
      skewX(a4.skewX, b3.skewX, s3, q3);
      scale(a4.scaleX, a4.scaleY, b3.scaleX, b3.scaleY, s3, q3);
      a4 = b3 = null;
      return function(t3) {
        var i4 = -1, n3 = q3.length, o4;
        while (++i4 < n3)
          s3[(o4 = q3[i4]).i] = o4.x(t3);
        return s3.join("");
      };
    };
  }
  var interpolateTransformCss = interpolateTransform(parseCss, "px, ", "px)", "deg)");
  var interpolateTransformSvg = interpolateTransform(parseSvg, ", ", ")", ")");

  // ../node_modules/d3-timer/src/timer.js
  var frame = 0;
  var timeout = 0;
  var interval = 0;
  var pokeDelay = 1e3;
  var taskHead;
  var taskTail;
  var clockLast = 0;
  var clockNow = 0;
  var clockSkew = 0;
  var clock = typeof performance === "object" && performance.now ? performance : Date;
  var setFrame = typeof window === "object" && window.requestAnimationFrame ? window.requestAnimationFrame.bind(window) : function(f3) {
    setTimeout(f3, 17);
  };
  function now() {
    return clockNow || (setFrame(clearNow), clockNow = clock.now() + clockSkew);
  }
  function clearNow() {
    clockNow = 0;
  }
  function Timer() {
    this._call = this._time = this._next = null;
  }
  Timer.prototype = timer.prototype = {
    constructor: Timer,
    restart: function(callback, delay, time) {
      if (typeof callback !== "function")
        throw new TypeError("callback is not a function");
      time = (time == null ? now() : +time) + (delay == null ? 0 : +delay);
      if (!this._next && taskTail !== this) {
        if (taskTail)
          taskTail._next = this;
        else
          taskHead = this;
        taskTail = this;
      }
      this._call = callback;
      this._time = time;
      sleep();
    },
    stop: function() {
      if (this._call) {
        this._call = null;
        this._time = Infinity;
        sleep();
      }
    }
  };
  function timer(callback, delay, time) {
    var t3 = new Timer();
    t3.restart(callback, delay, time);
    return t3;
  }
  function timerFlush() {
    now();
    ++frame;
    var t3 = taskHead, e4;
    while (t3) {
      if ((e4 = clockNow - t3._time) >= 0)
        t3._call.call(void 0, e4);
      t3 = t3._next;
    }
    --frame;
  }
  function wake() {
    clockNow = (clockLast = clock.now()) + clockSkew;
    frame = timeout = 0;
    try {
      timerFlush();
    } finally {
      frame = 0;
      nap();
      clockNow = 0;
    }
  }
  function poke() {
    var now2 = clock.now(), delay = now2 - clockLast;
    if (delay > pokeDelay)
      clockSkew -= delay, clockLast = now2;
  }
  function nap() {
    var t0, t1 = taskHead, t22, time = Infinity;
    while (t1) {
      if (t1._call) {
        if (time > t1._time)
          time = t1._time;
        t0 = t1, t1 = t1._next;
      } else {
        t22 = t1._next, t1._next = null;
        t1 = t0 ? t0._next = t22 : taskHead = t22;
      }
    }
    taskTail = t0;
    sleep(time);
  }
  function sleep(time) {
    if (frame)
      return;
    if (timeout)
      timeout = clearTimeout(timeout);
    var delay = time - clockNow;
    if (delay > 24) {
      if (time < Infinity)
        timeout = setTimeout(wake, time - clock.now() - clockSkew);
      if (interval)
        interval = clearInterval(interval);
    } else {
      if (!interval)
        clockLast = clock.now(), interval = setInterval(poke, pokeDelay);
      frame = 1, setFrame(wake);
    }
  }

  // ../node_modules/d3-timer/src/timeout.js
  function timeout_default(callback, delay, time) {
    var t3 = new Timer();
    delay = delay == null ? 0 : +delay;
    t3.restart((elapsed) => {
      t3.stop();
      callback(elapsed + delay);
    }, delay, time);
    return t3;
  }

  // ../node_modules/d3-transition/src/transition/schedule.js
  var emptyOn = dispatch_default("start", "end", "cancel", "interrupt");
  var emptyTween = [];
  var CREATED = 0;
  var SCHEDULED = 1;
  var STARTING = 2;
  var STARTED = 3;
  var RUNNING = 4;
  var ENDING = 5;
  var ENDED = 6;
  function schedule_default(node, name, id3, index, group, timing) {
    var schedules = node.__transition;
    if (!schedules)
      node.__transition = {};
    else if (id3 in schedules)
      return;
    create(node, id3, {
      name,
      index,
      // For context during callback.
      group,
      // For context during callback.
      on: emptyOn,
      tween: emptyTween,
      time: timing.time,
      delay: timing.delay,
      duration: timing.duration,
      ease: timing.ease,
      timer: null,
      state: CREATED
    });
  }
  function init(node, id3) {
    var schedule = get12(node, id3);
    if (schedule.state > CREATED)
      throw new Error("too late; already scheduled");
    return schedule;
  }
  function set4(node, id3) {
    var schedule = get12(node, id3);
    if (schedule.state > STARTED)
      throw new Error("too late; already running");
    return schedule;
  }
  function get12(node, id3) {
    var schedule = node.__transition;
    if (!schedule || !(schedule = schedule[id3]))
      throw new Error("transition not found");
    return schedule;
  }
  function create(node, id3, self) {
    var schedules = node.__transition, tween;
    schedules[id3] = self;
    self.timer = timer(schedule, 0, self.time);
    function schedule(elapsed) {
      self.state = SCHEDULED;
      self.timer.restart(start2, self.delay, self.time);
      if (self.delay <= elapsed)
        start2(elapsed - self.delay);
    }
    function start2(elapsed) {
      var i4, j3, n3, o4;
      if (self.state !== SCHEDULED)
        return stop();
      for (i4 in schedules) {
        o4 = schedules[i4];
        if (o4.name !== self.name)
          continue;
        if (o4.state === STARTED)
          return timeout_default(start2);
        if (o4.state === RUNNING) {
          o4.state = ENDED;
          o4.timer.stop();
          o4.on.call("interrupt", node, node.__data__, o4.index, o4.group);
          delete schedules[i4];
        } else if (+i4 < id3) {
          o4.state = ENDED;
          o4.timer.stop();
          o4.on.call("cancel", node, node.__data__, o4.index, o4.group);
          delete schedules[i4];
        }
      }
      timeout_default(function() {
        if (self.state === STARTED) {
          self.state = RUNNING;
          self.timer.restart(tick, self.delay, self.time);
          tick(elapsed);
        }
      });
      self.state = STARTING;
      self.on.call("start", node, node.__data__, self.index, self.group);
      if (self.state !== STARTING)
        return;
      self.state = STARTED;
      tween = new Array(n3 = self.tween.length);
      for (i4 = 0, j3 = -1; i4 < n3; ++i4) {
        if (o4 = self.tween[i4].value.call(node, node.__data__, self.index, self.group)) {
          tween[++j3] = o4;
        }
      }
      tween.length = j3 + 1;
    }
    function tick(elapsed) {
      var t3 = elapsed < self.duration ? self.ease.call(null, elapsed / self.duration) : (self.timer.restart(stop), self.state = ENDING, 1), i4 = -1, n3 = tween.length;
      while (++i4 < n3) {
        tween[i4].call(node, t3);
      }
      if (self.state === ENDING) {
        self.on.call("end", node, node.__data__, self.index, self.group);
        stop();
      }
    }
    function stop() {
      self.state = ENDED;
      self.timer.stop();
      delete schedules[id3];
      for (var i4 in schedules)
        return;
      delete node.__transition;
    }
  }

  // ../node_modules/d3-transition/src/interrupt.js
  function interrupt_default(node, name) {
    var schedules = node.__transition, schedule, active, empty2 = true, i4;
    if (!schedules)
      return;
    name = name == null ? null : name + "";
    for (i4 in schedules) {
      if ((schedule = schedules[i4]).name !== name) {
        empty2 = false;
        continue;
      }
      active = schedule.state > STARTING && schedule.state < ENDING;
      schedule.state = ENDED;
      schedule.timer.stop();
      schedule.on.call(active ? "interrupt" : "cancel", node, node.__data__, schedule.index, schedule.group);
      delete schedules[i4];
    }
    if (empty2)
      delete node.__transition;
  }

  // ../node_modules/d3-transition/src/selection/interrupt.js
  function interrupt_default2(name) {
    return this.each(function() {
      interrupt_default(this, name);
    });
  }

  // ../node_modules/d3-transition/src/transition/tween.js
  function tweenRemove(id3, name) {
    var tween0, tween1;
    return function() {
      var schedule = set4(this, id3), tween = schedule.tween;
      if (tween !== tween0) {
        tween1 = tween0 = tween;
        for (var i4 = 0, n3 = tween1.length; i4 < n3; ++i4) {
          if (tween1[i4].name === name) {
            tween1 = tween1.slice();
            tween1.splice(i4, 1);
            break;
          }
        }
      }
      schedule.tween = tween1;
    };
  }
  function tweenFunction(id3, name, value) {
    var tween0, tween1;
    if (typeof value !== "function")
      throw new Error();
    return function() {
      var schedule = set4(this, id3), tween = schedule.tween;
      if (tween !== tween0) {
        tween1 = (tween0 = tween).slice();
        for (var t3 = { name, value }, i4 = 0, n3 = tween1.length; i4 < n3; ++i4) {
          if (tween1[i4].name === name) {
            tween1[i4] = t3;
            break;
          }
        }
        if (i4 === n3)
          tween1.push(t3);
      }
      schedule.tween = tween1;
    };
  }
  function tween_default(name, value) {
    var id3 = this._id;
    name += "";
    if (arguments.length < 2) {
      var tween = get12(this.node(), id3).tween;
      for (var i4 = 0, n3 = tween.length, t3; i4 < n3; ++i4) {
        if ((t3 = tween[i4]).name === name) {
          return t3.value;
        }
      }
      return null;
    }
    return this.each((value == null ? tweenRemove : tweenFunction)(id3, name, value));
  }
  function tweenValue(transition2, name, value) {
    var id3 = transition2._id;
    transition2.each(function() {
      var schedule = set4(this, id3);
      (schedule.value || (schedule.value = {}))[name] = value.apply(this, arguments);
    });
    return function(node) {
      return get12(node, id3).value[name];
    };
  }

  // ../node_modules/d3-transition/src/transition/interpolate.js
  function interpolate_default(a4, b3) {
    var c3;
    return (typeof b3 === "number" ? number_default : b3 instanceof color ? rgb_default : (c3 = color(b3)) ? (b3 = c3, rgb_default) : string_default)(a4, b3);
  }

  // ../node_modules/d3-transition/src/transition/attr.js
  function attrRemove2(name) {
    return function() {
      this.removeAttribute(name);
    };
  }
  function attrRemoveNS2(fullname) {
    return function() {
      this.removeAttributeNS(fullname.space, fullname.local);
    };
  }
  function attrConstant2(name, interpolate, value1) {
    var string00, string1 = value1 + "", interpolate0;
    return function() {
      var string0 = this.getAttribute(name);
      return string0 === string1 ? null : string0 === string00 ? interpolate0 : interpolate0 = interpolate(string00 = string0, value1);
    };
  }
  function attrConstantNS2(fullname, interpolate, value1) {
    var string00, string1 = value1 + "", interpolate0;
    return function() {
      var string0 = this.getAttributeNS(fullname.space, fullname.local);
      return string0 === string1 ? null : string0 === string00 ? interpolate0 : interpolate0 = interpolate(string00 = string0, value1);
    };
  }
  function attrFunction2(name, interpolate, value) {
    var string00, string10, interpolate0;
    return function() {
      var string0, value1 = value(this), string1;
      if (value1 == null)
        return void this.removeAttribute(name);
      string0 = this.getAttribute(name);
      string1 = value1 + "";
      return string0 === string1 ? null : string0 === string00 && string1 === string10 ? interpolate0 : (string10 = string1, interpolate0 = interpolate(string00 = string0, value1));
    };
  }
  function attrFunctionNS2(fullname, interpolate, value) {
    var string00, string10, interpolate0;
    return function() {
      var string0, value1 = value(this), string1;
      if (value1 == null)
        return void this.removeAttributeNS(fullname.space, fullname.local);
      string0 = this.getAttributeNS(fullname.space, fullname.local);
      string1 = value1 + "";
      return string0 === string1 ? null : string0 === string00 && string1 === string10 ? interpolate0 : (string10 = string1, interpolate0 = interpolate(string00 = string0, value1));
    };
  }
  function attr_default2(name, value) {
    var fullname = namespace_default(name), i4 = fullname === "transform" ? interpolateTransformSvg : interpolate_default;
    return this.attrTween(name, typeof value === "function" ? (fullname.local ? attrFunctionNS2 : attrFunction2)(fullname, i4, tweenValue(this, "attr." + name, value)) : value == null ? (fullname.local ? attrRemoveNS2 : attrRemove2)(fullname) : (fullname.local ? attrConstantNS2 : attrConstant2)(fullname, i4, value));
  }

  // ../node_modules/d3-transition/src/transition/attrTween.js
  function attrInterpolate(name, i4) {
    return function(t3) {
      this.setAttribute(name, i4.call(this, t3));
    };
  }
  function attrInterpolateNS(fullname, i4) {
    return function(t3) {
      this.setAttributeNS(fullname.space, fullname.local, i4.call(this, t3));
    };
  }
  function attrTweenNS(fullname, value) {
    var t0, i0;
    function tween() {
      var i4 = value.apply(this, arguments);
      if (i4 !== i0)
        t0 = (i0 = i4) && attrInterpolateNS(fullname, i4);
      return t0;
    }
    tween._value = value;
    return tween;
  }
  function attrTween(name, value) {
    var t0, i0;
    function tween() {
      var i4 = value.apply(this, arguments);
      if (i4 !== i0)
        t0 = (i0 = i4) && attrInterpolate(name, i4);
      return t0;
    }
    tween._value = value;
    return tween;
  }
  function attrTween_default(name, value) {
    var key = "attr." + name;
    if (arguments.length < 2)
      return (key = this.tween(key)) && key._value;
    if (value == null)
      return this.tween(key, null);
    if (typeof value !== "function")
      throw new Error();
    var fullname = namespace_default(name);
    return this.tween(key, (fullname.local ? attrTweenNS : attrTween)(fullname, value));
  }

  // ../node_modules/d3-transition/src/transition/delay.js
  function delayFunction(id3, value) {
    return function() {
      init(this, id3).delay = +value.apply(this, arguments);
    };
  }
  function delayConstant(id3, value) {
    return value = +value, function() {
      init(this, id3).delay = value;
    };
  }
  function delay_default(value) {
    var id3 = this._id;
    return arguments.length ? this.each((typeof value === "function" ? delayFunction : delayConstant)(id3, value)) : get12(this.node(), id3).delay;
  }

  // ../node_modules/d3-transition/src/transition/duration.js
  function durationFunction(id3, value) {
    return function() {
      set4(this, id3).duration = +value.apply(this, arguments);
    };
  }
  function durationConstant(id3, value) {
    return value = +value, function() {
      set4(this, id3).duration = value;
    };
  }
  function duration_default(value) {
    var id3 = this._id;
    return arguments.length ? this.each((typeof value === "function" ? durationFunction : durationConstant)(id3, value)) : get12(this.node(), id3).duration;
  }

  // ../node_modules/d3-transition/src/transition/ease.js
  function easeConstant(id3, value) {
    if (typeof value !== "function")
      throw new Error();
    return function() {
      set4(this, id3).ease = value;
    };
  }
  function ease_default(value) {
    var id3 = this._id;
    return arguments.length ? this.each(easeConstant(id3, value)) : get12(this.node(), id3).ease;
  }

  // ../node_modules/d3-transition/src/transition/easeVarying.js
  function easeVarying(id3, value) {
    return function() {
      var v3 = value.apply(this, arguments);
      if (typeof v3 !== "function")
        throw new Error();
      set4(this, id3).ease = v3;
    };
  }
  function easeVarying_default(value) {
    if (typeof value !== "function")
      throw new Error();
    return this.each(easeVarying(this._id, value));
  }

  // ../node_modules/d3-transition/src/transition/filter.js
  function filter_default2(match) {
    if (typeof match !== "function")
      match = matcher_default(match);
    for (var groups = this._groups, m3 = groups.length, subgroups = new Array(m3), j3 = 0; j3 < m3; ++j3) {
      for (var group = groups[j3], n3 = group.length, subgroup = subgroups[j3] = [], node, i4 = 0; i4 < n3; ++i4) {
        if ((node = group[i4]) && match.call(node, node.__data__, i4, group)) {
          subgroup.push(node);
        }
      }
    }
    return new Transition(subgroups, this._parents, this._name, this._id);
  }

  // ../node_modules/d3-transition/src/transition/merge.js
  function merge_default2(transition2) {
    if (transition2._id !== this._id)
      throw new Error();
    for (var groups0 = this._groups, groups1 = transition2._groups, m0 = groups0.length, m1 = groups1.length, m3 = Math.min(m0, m1), merges = new Array(m0), j3 = 0; j3 < m3; ++j3) {
      for (var group0 = groups0[j3], group1 = groups1[j3], n3 = group0.length, merge2 = merges[j3] = new Array(n3), node, i4 = 0; i4 < n3; ++i4) {
        if (node = group0[i4] || group1[i4]) {
          merge2[i4] = node;
        }
      }
    }
    for (; j3 < m0; ++j3) {
      merges[j3] = groups0[j3];
    }
    return new Transition(merges, this._parents, this._name, this._id);
  }

  // ../node_modules/d3-transition/src/transition/on.js
  function start(name) {
    return (name + "").trim().split(/^|\s+/).every(function(t3) {
      var i4 = t3.indexOf(".");
      if (i4 >= 0)
        t3 = t3.slice(0, i4);
      return !t3 || t3 === "start";
    });
  }
  function onFunction(id3, name, listener) {
    var on0, on1, sit = start(name) ? init : set4;
    return function() {
      var schedule = sit(this, id3), on = schedule.on;
      if (on !== on0)
        (on1 = (on0 = on).copy()).on(name, listener);
      schedule.on = on1;
    };
  }
  function on_default2(name, listener) {
    var id3 = this._id;
    return arguments.length < 2 ? get12(this.node(), id3).on.on(name) : this.each(onFunction(id3, name, listener));
  }

  // ../node_modules/d3-transition/src/transition/remove.js
  function removeFunction(id3) {
    return function() {
      var parent = this.parentNode;
      for (var i4 in this.__transition)
        if (+i4 !== id3)
          return;
      if (parent)
        parent.removeChild(this);
    };
  }
  function remove_default2() {
    return this.on("end.remove", removeFunction(this._id));
  }

  // ../node_modules/d3-transition/src/transition/select.js
  function select_default3(select2) {
    var name = this._name, id3 = this._id;
    if (typeof select2 !== "function")
      select2 = selector_default(select2);
    for (var groups = this._groups, m3 = groups.length, subgroups = new Array(m3), j3 = 0; j3 < m3; ++j3) {
      for (var group = groups[j3], n3 = group.length, subgroup = subgroups[j3] = new Array(n3), node, subnode, i4 = 0; i4 < n3; ++i4) {
        if ((node = group[i4]) && (subnode = select2.call(node, node.__data__, i4, group))) {
          if ("__data__" in node)
            subnode.__data__ = node.__data__;
          subgroup[i4] = subnode;
          schedule_default(subgroup[i4], name, id3, i4, subgroup, get12(node, id3));
        }
      }
    }
    return new Transition(subgroups, this._parents, name, id3);
  }

  // ../node_modules/d3-transition/src/transition/selectAll.js
  function selectAll_default2(select2) {
    var name = this._name, id3 = this._id;
    if (typeof select2 !== "function")
      select2 = selectorAll_default(select2);
    for (var groups = this._groups, m3 = groups.length, subgroups = [], parents = [], j3 = 0; j3 < m3; ++j3) {
      for (var group = groups[j3], n3 = group.length, node, i4 = 0; i4 < n3; ++i4) {
        if (node = group[i4]) {
          for (var children2 = select2.call(node, node.__data__, i4, group), child, inherit2 = get12(node, id3), k3 = 0, l4 = children2.length; k3 < l4; ++k3) {
            if (child = children2[k3]) {
              schedule_default(child, name, id3, k3, children2, inherit2);
            }
          }
          subgroups.push(children2);
          parents.push(node);
        }
      }
    }
    return new Transition(subgroups, parents, name, id3);
  }

  // ../node_modules/d3-transition/src/transition/selection.js
  var Selection2 = selection_default.prototype.constructor;
  function selection_default2() {
    return new Selection2(this._groups, this._parents);
  }

  // ../node_modules/d3-transition/src/transition/style.js
  function styleNull(name, interpolate) {
    var string00, string10, interpolate0;
    return function() {
      var string0 = styleValue(this, name), string1 = (this.style.removeProperty(name), styleValue(this, name));
      return string0 === string1 ? null : string0 === string00 && string1 === string10 ? interpolate0 : interpolate0 = interpolate(string00 = string0, string10 = string1);
    };
  }
  function styleRemove2(name) {
    return function() {
      this.style.removeProperty(name);
    };
  }
  function styleConstant2(name, interpolate, value1) {
    var string00, string1 = value1 + "", interpolate0;
    return function() {
      var string0 = styleValue(this, name);
      return string0 === string1 ? null : string0 === string00 ? interpolate0 : interpolate0 = interpolate(string00 = string0, value1);
    };
  }
  function styleFunction2(name, interpolate, value) {
    var string00, string10, interpolate0;
    return function() {
      var string0 = styleValue(this, name), value1 = value(this), string1 = value1 + "";
      if (value1 == null)
        string1 = value1 = (this.style.removeProperty(name), styleValue(this, name));
      return string0 === string1 ? null : string0 === string00 && string1 === string10 ? interpolate0 : (string10 = string1, interpolate0 = interpolate(string00 = string0, value1));
    };
  }
  function styleMaybeRemove(id3, name) {
    var on0, on1, listener0, key = "style." + name, event = "end." + key, remove7;
    return function() {
      var schedule = set4(this, id3), on = schedule.on, listener = schedule.value[key] == null ? remove7 || (remove7 = styleRemove2(name)) : void 0;
      if (on !== on0 || listener0 !== listener)
        (on1 = (on0 = on).copy()).on(event, listener0 = listener);
      schedule.on = on1;
    };
  }
  function style_default2(name, value, priority) {
    var i4 = (name += "") === "transform" ? interpolateTransformCss : interpolate_default;
    return value == null ? this.styleTween(name, styleNull(name, i4)).on("end.style." + name, styleRemove2(name)) : typeof value === "function" ? this.styleTween(name, styleFunction2(name, i4, tweenValue(this, "style." + name, value))).each(styleMaybeRemove(this._id, name)) : this.styleTween(name, styleConstant2(name, i4, value), priority).on("end.style." + name, null);
  }

  // ../node_modules/d3-transition/src/transition/styleTween.js
  function styleInterpolate(name, i4, priority) {
    return function(t3) {
      this.style.setProperty(name, i4.call(this, t3), priority);
    };
  }
  function styleTween(name, value, priority) {
    var t3, i0;
    function tween() {
      var i4 = value.apply(this, arguments);
      if (i4 !== i0)
        t3 = (i0 = i4) && styleInterpolate(name, i4, priority);
      return t3;
    }
    tween._value = value;
    return tween;
  }
  function styleTween_default(name, value, priority) {
    var key = "style." + (name += "");
    if (arguments.length < 2)
      return (key = this.tween(key)) && key._value;
    if (value == null)
      return this.tween(key, null);
    if (typeof value !== "function")
      throw new Error();
    return this.tween(key, styleTween(name, value, priority == null ? "" : priority));
  }

  // ../node_modules/d3-transition/src/transition/text.js
  function textConstant2(value) {
    return function() {
      this.textContent = value;
    };
  }
  function textFunction2(value) {
    return function() {
      var value1 = value(this);
      this.textContent = value1 == null ? "" : value1;
    };
  }
  function text_default2(value) {
    return this.tween("text", typeof value === "function" ? textFunction2(tweenValue(this, "text", value)) : textConstant2(value == null ? "" : value + ""));
  }

  // ../node_modules/d3-transition/src/transition/textTween.js
  function textInterpolate(i4) {
    return function(t3) {
      this.textContent = i4.call(this, t3);
    };
  }
  function textTween(value) {
    var t0, i0;
    function tween() {
      var i4 = value.apply(this, arguments);
      if (i4 !== i0)
        t0 = (i0 = i4) && textInterpolate(i4);
      return t0;
    }
    tween._value = value;
    return tween;
  }
  function textTween_default(value) {
    var key = "text";
    if (arguments.length < 1)
      return (key = this.tween(key)) && key._value;
    if (value == null)
      return this.tween(key, null);
    if (typeof value !== "function")
      throw new Error();
    return this.tween(key, textTween(value));
  }

  // ../node_modules/d3-transition/src/transition/transition.js
  function transition_default() {
    var name = this._name, id0 = this._id, id1 = newId();
    for (var groups = this._groups, m3 = groups.length, j3 = 0; j3 < m3; ++j3) {
      for (var group = groups[j3], n3 = group.length, node, i4 = 0; i4 < n3; ++i4) {
        if (node = group[i4]) {
          var inherit2 = get12(node, id0);
          schedule_default(node, name, id1, i4, group, {
            time: inherit2.time + inherit2.delay + inherit2.duration,
            delay: 0,
            duration: inherit2.duration,
            ease: inherit2.ease
          });
        }
      }
    }
    return new Transition(groups, this._parents, name, id1);
  }

  // ../node_modules/d3-transition/src/transition/end.js
  function end_default() {
    var on0, on1, that = this, id3 = that._id, size = that.size();
    return new Promise(function(resolve, reject) {
      var cancel = { value: reject }, end = { value: function() {
        if (--size === 0)
          resolve();
      } };
      that.each(function() {
        var schedule = set4(this, id3), on = schedule.on;
        if (on !== on0) {
          on1 = (on0 = on).copy();
          on1._.cancel.push(cancel);
          on1._.interrupt.push(cancel);
          on1._.end.push(end);
        }
        schedule.on = on1;
      });
      if (size === 0)
        resolve();
    });
  }

  // ../node_modules/d3-transition/src/transition/index.js
  var id = 0;
  function Transition(groups, parents, name, id3) {
    this._groups = groups;
    this._parents = parents;
    this._name = name;
    this._id = id3;
  }
  function transition(name) {
    return selection_default().transition(name);
  }
  function newId() {
    return ++id;
  }
  var selection_prototype = selection_default.prototype;
  Transition.prototype = transition.prototype = {
    constructor: Transition,
    select: select_default3,
    selectAll: selectAll_default2,
    selectChild: selection_prototype.selectChild,
    selectChildren: selection_prototype.selectChildren,
    filter: filter_default2,
    merge: merge_default2,
    selection: selection_default2,
    transition: transition_default,
    call: selection_prototype.call,
    nodes: selection_prototype.nodes,
    node: selection_prototype.node,
    size: selection_prototype.size,
    empty: selection_prototype.empty,
    each: selection_prototype.each,
    on: on_default2,
    attr: attr_default2,
    attrTween: attrTween_default,
    style: style_default2,
    styleTween: styleTween_default,
    text: text_default2,
    textTween: textTween_default,
    remove: remove_default2,
    tween: tween_default,
    delay: delay_default,
    duration: duration_default,
    ease: ease_default,
    easeVarying: easeVarying_default,
    end: end_default,
    [Symbol.iterator]: selection_prototype[Symbol.iterator]
  };

  // ../node_modules/d3-ease/src/cubic.js
  function cubicInOut(t3) {
    return ((t3 *= 2) <= 1 ? t3 * t3 * t3 : (t3 -= 2) * t3 * t3 + 2) / 2;
  }

  // ../node_modules/d3-transition/src/selection/transition.js
  var defaultTiming = {
    time: null,
    // Set on use.
    delay: 0,
    duration: 250,
    ease: cubicInOut
  };
  function inherit(node, id3) {
    var timing;
    while (!(timing = node.__transition) || !(timing = timing[id3])) {
      if (!(node = node.parentNode)) {
        throw new Error(`transition ${id3} not found`);
      }
    }
    return timing;
  }
  function transition_default2(name) {
    var id3, timing;
    if (name instanceof Transition) {
      id3 = name._id, name = name._name;
    } else {
      id3 = newId(), (timing = defaultTiming).time = now(), name = name == null ? null : name + "";
    }
    for (var groups = this._groups, m3 = groups.length, j3 = 0; j3 < m3; ++j3) {
      for (var group = groups[j3], n3 = group.length, node, i4 = 0; i4 < n3; ++i4) {
        if (node = group[i4]) {
          schedule_default(node, name, id3, i4, group, timing || inherit(node, id3));
        }
      }
    }
    return new Transition(groups, this._parents, name, id3);
  }

  // ../node_modules/d3-transition/src/selection/index.js
  selection_default.prototype.interrupt = interrupt_default2;
  selection_default.prototype.transition = transition_default2;

  // ../node_modules/d3-brush/src/brush.js
  var { abs, max: max3, min: min2 } = Math;
  function number1(e4) {
    return [+e4[0], +e4[1]];
  }
  function number22(e4) {
    return [number1(e4[0]), number1(e4[1])];
  }
  var X = {
    name: "x",
    handles: ["w", "e"].map(type),
    input: function(x3, e4) {
      return x3 == null ? null : [[+x3[0], e4[0][1]], [+x3[1], e4[1][1]]];
    },
    output: function(xy) {
      return xy && [xy[0][0], xy[1][0]];
    }
  };
  var Y = {
    name: "y",
    handles: ["n", "s"].map(type),
    input: function(y3, e4) {
      return y3 == null ? null : [[e4[0][0], +y3[0]], [e4[1][0], +y3[1]]];
    },
    output: function(xy) {
      return xy && [xy[0][1], xy[1][1]];
    }
  };
  var XY = {
    name: "xy",
    handles: ["n", "w", "e", "s", "nw", "ne", "sw", "se"].map(type),
    input: function(xy) {
      return xy == null ? null : number22(xy);
    },
    output: function(xy) {
      return xy;
    }
  };
  function type(t3) {
    return { type: t3 };
  }

  // ../node_modules/d3-path/src/path.js
  var pi = Math.PI;
  var tau = 2 * pi;
  var epsilon2 = 1e-6;
  var tauEpsilon = tau - epsilon2;
  function append(strings) {
    this._ += strings[0];
    for (let i4 = 1, n3 = strings.length; i4 < n3; ++i4) {
      this._ += arguments[i4] + strings[i4];
    }
  }
  function appendRound(digits) {
    let d3 = Math.floor(digits);
    if (!(d3 >= 0))
      throw new Error(`invalid digits: ${digits}`);
    if (d3 > 15)
      return append;
    const k3 = 10 ** d3;
    return function(strings) {
      this._ += strings[0];
      for (let i4 = 1, n3 = strings.length; i4 < n3; ++i4) {
        this._ += Math.round(arguments[i4] * k3) / k3 + strings[i4];
      }
    };
  }
  var Path = class {
    constructor(digits) {
      this._x0 = this._y0 = // start of current subpath
      this._x1 = this._y1 = null;
      this._ = "";
      this._append = digits == null ? append : appendRound(digits);
    }
    moveTo(x3, y3) {
      this._append`M${this._x0 = this._x1 = +x3},${this._y0 = this._y1 = +y3}`;
    }
    closePath() {
      if (this._x1 !== null) {
        this._x1 = this._x0, this._y1 = this._y0;
        this._append`Z`;
      }
    }
    lineTo(x3, y3) {
      this._append`L${this._x1 = +x3},${this._y1 = +y3}`;
    }
    quadraticCurveTo(x1, y1, x3, y3) {
      this._append`Q${+x1},${+y1},${this._x1 = +x3},${this._y1 = +y3}`;
    }
    bezierCurveTo(x1, y1, x22, y22, x3, y3) {
      this._append`C${+x1},${+y1},${+x22},${+y22},${this._x1 = +x3},${this._y1 = +y3}`;
    }
    arcTo(x1, y1, x22, y22, r3) {
      x1 = +x1, y1 = +y1, x22 = +x22, y22 = +y22, r3 = +r3;
      if (r3 < 0)
        throw new Error(`negative radius: ${r3}`);
      let x0 = this._x1, y0 = this._y1, x21 = x22 - x1, y21 = y22 - y1, x01 = x0 - x1, y01 = y0 - y1, l01_2 = x01 * x01 + y01 * y01;
      if (this._x1 === null) {
        this._append`M${this._x1 = x1},${this._y1 = y1}`;
      } else if (!(l01_2 > epsilon2))
        ;
      else if (!(Math.abs(y01 * x21 - y21 * x01) > epsilon2) || !r3) {
        this._append`L${this._x1 = x1},${this._y1 = y1}`;
      } else {
        let x20 = x22 - x0, y20 = y22 - y0, l21_2 = x21 * x21 + y21 * y21, l20_2 = x20 * x20 + y20 * y20, l21 = Math.sqrt(l21_2), l01 = Math.sqrt(l01_2), l4 = r3 * Math.tan((pi - Math.acos((l21_2 + l01_2 - l20_2) / (2 * l21 * l01))) / 2), t01 = l4 / l01, t21 = l4 / l21;
        if (Math.abs(t01 - 1) > epsilon2) {
          this._append`L${x1 + t01 * x01},${y1 + t01 * y01}`;
        }
        this._append`A${r3},${r3},0,0,${+(y01 * x20 > x01 * y20)},${this._x1 = x1 + t21 * x21},${this._y1 = y1 + t21 * y21}`;
      }
    }
    arc(x3, y3, r3, a0, a1, ccw) {
      x3 = +x3, y3 = +y3, r3 = +r3, ccw = !!ccw;
      if (r3 < 0)
        throw new Error(`negative radius: ${r3}`);
      let dx = r3 * Math.cos(a0), dy = r3 * Math.sin(a0), x0 = x3 + dx, y0 = y3 + dy, cw = 1 ^ ccw, da = ccw ? a0 - a1 : a1 - a0;
      if (this._x1 === null) {
        this._append`M${x0},${y0}`;
      } else if (Math.abs(this._x1 - x0) > epsilon2 || Math.abs(this._y1 - y0) > epsilon2) {
        this._append`L${x0},${y0}`;
      }
      if (!r3)
        return;
      if (da < 0)
        da = da % tau + tau;
      if (da > tauEpsilon) {
        this._append`A${r3},${r3},0,1,${cw},${x3 - dx},${y3 - dy}A${r3},${r3},0,1,${cw},${this._x1 = x0},${this._y1 = y0}`;
      } else if (da > epsilon2) {
        this._append`A${r3},${r3},0,${+(da >= pi)},${cw},${this._x1 = x3 + r3 * Math.cos(a1)},${this._y1 = y3 + r3 * Math.sin(a1)}`;
      }
    }
    rect(x3, y3, w3, h3) {
      this._append`M${this._x0 = this._x1 = +x3},${this._y0 = this._y1 = +y3}h${w3 = +w3}v${+h3}h${-w3}Z`;
    }
    toString() {
      return this._;
    }
  };
  function path() {
    return new Path();
  }
  path.prototype = Path.prototype;

  // ../node_modules/d3-format/src/formatDecimal.js
  function formatDecimal_default(x3) {
    return Math.abs(x3 = Math.round(x3)) >= 1e21 ? x3.toLocaleString("en").replace(/,/g, "") : x3.toString(10);
  }
  function formatDecimalParts(x3, p4) {
    if ((i4 = (x3 = p4 ? x3.toExponential(p4 - 1) : x3.toExponential()).indexOf("e")) < 0)
      return null;
    var i4, coefficient = x3.slice(0, i4);
    return [
      coefficient.length > 1 ? coefficient[0] + coefficient.slice(2) : coefficient,
      +x3.slice(i4 + 1)
    ];
  }

  // ../node_modules/d3-format/src/exponent.js
  function exponent_default(x3) {
    return x3 = formatDecimalParts(Math.abs(x3)), x3 ? x3[1] : NaN;
  }

  // ../node_modules/d3-format/src/formatGroup.js
  function formatGroup_default(grouping, thousands) {
    return function(value, width) {
      var i4 = value.length, t3 = [], j3 = 0, g3 = grouping[0], length = 0;
      while (i4 > 0 && g3 > 0) {
        if (length + g3 + 1 > width)
          g3 = Math.max(1, width - length);
        t3.push(value.substring(i4 -= g3, i4 + g3));
        if ((length += g3 + 1) > width)
          break;
        g3 = grouping[j3 = (j3 + 1) % grouping.length];
      }
      return t3.reverse().join(thousands);
    };
  }

  // ../node_modules/d3-format/src/formatNumerals.js
  function formatNumerals_default(numerals) {
    return function(value) {
      return value.replace(/[0-9]/g, function(i4) {
        return numerals[+i4];
      });
    };
  }

  // ../node_modules/d3-format/src/formatSpecifier.js
  var re = /^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;
  function formatSpecifier(specifier) {
    if (!(match = re.exec(specifier)))
      throw new Error("invalid format: " + specifier);
    var match;
    return new FormatSpecifier({
      fill: match[1],
      align: match[2],
      sign: match[3],
      symbol: match[4],
      zero: match[5],
      width: match[6],
      comma: match[7],
      precision: match[8] && match[8].slice(1),
      trim: match[9],
      type: match[10]
    });
  }
  formatSpecifier.prototype = FormatSpecifier.prototype;
  function FormatSpecifier(specifier) {
    this.fill = specifier.fill === void 0 ? " " : specifier.fill + "";
    this.align = specifier.align === void 0 ? ">" : specifier.align + "";
    this.sign = specifier.sign === void 0 ? "-" : specifier.sign + "";
    this.symbol = specifier.symbol === void 0 ? "" : specifier.symbol + "";
    this.zero = !!specifier.zero;
    this.width = specifier.width === void 0 ? void 0 : +specifier.width;
    this.comma = !!specifier.comma;
    this.precision = specifier.precision === void 0 ? void 0 : +specifier.precision;
    this.trim = !!specifier.trim;
    this.type = specifier.type === void 0 ? "" : specifier.type + "";
  }
  FormatSpecifier.prototype.toString = function() {
    return this.fill + this.align + this.sign + this.symbol + (this.zero ? "0" : "") + (this.width === void 0 ? "" : Math.max(1, this.width | 0)) + (this.comma ? "," : "") + (this.precision === void 0 ? "" : "." + Math.max(0, this.precision | 0)) + (this.trim ? "~" : "") + this.type;
  };

  // ../node_modules/d3-format/src/formatTrim.js
  function formatTrim_default(s3) {
    out:
      for (var n3 = s3.length, i4 = 1, i0 = -1, i1; i4 < n3; ++i4) {
        switch (s3[i4]) {
          case ".":
            i0 = i1 = i4;
            break;
          case "0":
            if (i0 === 0)
              i0 = i4;
            i1 = i4;
            break;
          default:
            if (!+s3[i4])
              break out;
            if (i0 > 0)
              i0 = 0;
            break;
        }
      }
    return i0 > 0 ? s3.slice(0, i0) + s3.slice(i1 + 1) : s3;
  }

  // ../node_modules/d3-format/src/formatPrefixAuto.js
  var prefixExponent;
  function formatPrefixAuto_default(x3, p4) {
    var d3 = formatDecimalParts(x3, p4);
    if (!d3)
      return x3 + "";
    var coefficient = d3[0], exponent = d3[1], i4 = exponent - (prefixExponent = Math.max(-8, Math.min(8, Math.floor(exponent / 3))) * 3) + 1, n3 = coefficient.length;
    return i4 === n3 ? coefficient : i4 > n3 ? coefficient + new Array(i4 - n3 + 1).join("0") : i4 > 0 ? coefficient.slice(0, i4) + "." + coefficient.slice(i4) : "0." + new Array(1 - i4).join("0") + formatDecimalParts(x3, Math.max(0, p4 + i4 - 1))[0];
  }

  // ../node_modules/d3-format/src/formatRounded.js
  function formatRounded_default(x3, p4) {
    var d3 = formatDecimalParts(x3, p4);
    if (!d3)
      return x3 + "";
    var coefficient = d3[0], exponent = d3[1];
    return exponent < 0 ? "0." + new Array(-exponent).join("0") + coefficient : coefficient.length > exponent + 1 ? coefficient.slice(0, exponent + 1) + "." + coefficient.slice(exponent + 1) : coefficient + new Array(exponent - coefficient.length + 2).join("0");
  }

  // ../node_modules/d3-format/src/formatTypes.js
  var formatTypes_default = {
    "%": (x3, p4) => (x3 * 100).toFixed(p4),
    "b": (x3) => Math.round(x3).toString(2),
    "c": (x3) => x3 + "",
    "d": formatDecimal_default,
    "e": (x3, p4) => x3.toExponential(p4),
    "f": (x3, p4) => x3.toFixed(p4),
    "g": (x3, p4) => x3.toPrecision(p4),
    "o": (x3) => Math.round(x3).toString(8),
    "p": (x3, p4) => formatRounded_default(x3 * 100, p4),
    "r": formatRounded_default,
    "s": formatPrefixAuto_default,
    "X": (x3) => Math.round(x3).toString(16).toUpperCase(),
    "x": (x3) => Math.round(x3).toString(16)
  };

  // ../node_modules/d3-format/src/identity.js
  function identity_default2(x3) {
    return x3;
  }

  // ../node_modules/d3-format/src/locale.js
  var map3 = Array.prototype.map;
  var prefixes = ["y", "z", "a", "f", "p", "n", "\xB5", "m", "", "k", "M", "G", "T", "P", "E", "Z", "Y"];
  function locale_default(locale2) {
    var group = locale2.grouping === void 0 || locale2.thousands === void 0 ? identity_default2 : formatGroup_default(map3.call(locale2.grouping, Number), locale2.thousands + ""), currencyPrefix = locale2.currency === void 0 ? "" : locale2.currency[0] + "", currencySuffix = locale2.currency === void 0 ? "" : locale2.currency[1] + "", decimal = locale2.decimal === void 0 ? "." : locale2.decimal + "", numerals = locale2.numerals === void 0 ? identity_default2 : formatNumerals_default(map3.call(locale2.numerals, String)), percent = locale2.percent === void 0 ? "%" : locale2.percent + "", minus = locale2.minus === void 0 ? "\u2212" : locale2.minus + "", nan = locale2.nan === void 0 ? "NaN" : locale2.nan + "";
    function newFormat(specifier) {
      specifier = formatSpecifier(specifier);
      var fill = specifier.fill, align = specifier.align, sign = specifier.sign, symbol = specifier.symbol, zero3 = specifier.zero, width = specifier.width, comma = specifier.comma, precision = specifier.precision, trim = specifier.trim, type2 = specifier.type;
      if (type2 === "n")
        comma = true, type2 = "g";
      else if (!formatTypes_default[type2])
        precision === void 0 && (precision = 12), trim = true, type2 = "g";
      if (zero3 || fill === "0" && align === "=")
        zero3 = true, fill = "0", align = "=";
      var prefix = symbol === "$" ? currencyPrefix : symbol === "#" && /[boxX]/.test(type2) ? "0" + type2.toLowerCase() : "", suffix = symbol === "$" ? currencySuffix : /[%p]/.test(type2) ? percent : "";
      var formatType = formatTypes_default[type2], maybeSuffix = /[defgprs%]/.test(type2);
      precision = precision === void 0 ? 6 : /[gprs]/.test(type2) ? Math.max(1, Math.min(21, precision)) : Math.max(0, Math.min(20, precision));
      function format2(value) {
        var valuePrefix = prefix, valueSuffix = suffix, i4, n3, c3;
        if (type2 === "c") {
          valueSuffix = formatType(value) + valueSuffix;
          value = "";
        } else {
          value = +value;
          var valueNegative = value < 0 || 1 / value < 0;
          value = isNaN(value) ? nan : formatType(Math.abs(value), precision);
          if (trim)
            value = formatTrim_default(value);
          if (valueNegative && +value === 0 && sign !== "+")
            valueNegative = false;
          valuePrefix = (valueNegative ? sign === "(" ? sign : minus : sign === "-" || sign === "(" ? "" : sign) + valuePrefix;
          valueSuffix = (type2 === "s" ? prefixes[8 + prefixExponent / 3] : "") + valueSuffix + (valueNegative && sign === "(" ? ")" : "");
          if (maybeSuffix) {
            i4 = -1, n3 = value.length;
            while (++i4 < n3) {
              if (c3 = value.charCodeAt(i4), 48 > c3 || c3 > 57) {
                valueSuffix = (c3 === 46 ? decimal + value.slice(i4 + 1) : value.slice(i4)) + valueSuffix;
                value = value.slice(0, i4);
                break;
              }
            }
          }
        }
        if (comma && !zero3)
          value = group(value, Infinity);
        var length = valuePrefix.length + value.length + valueSuffix.length, padding = length < width ? new Array(width - length + 1).join(fill) : "";
        if (comma && zero3)
          value = group(padding + value, padding.length ? width - valueSuffix.length : Infinity), padding = "";
        switch (align) {
          case "<":
            value = valuePrefix + value + valueSuffix + padding;
            break;
          case "=":
            value = valuePrefix + padding + value + valueSuffix;
            break;
          case "^":
            value = padding.slice(0, length = padding.length >> 1) + valuePrefix + value + valueSuffix + padding.slice(length);
            break;
          default:
            value = padding + valuePrefix + value + valueSuffix;
            break;
        }
        return numerals(value);
      }
      format2.toString = function() {
        return specifier + "";
      };
      return format2;
    }
    function formatPrefix2(specifier, value) {
      var f3 = newFormat((specifier = formatSpecifier(specifier), specifier.type = "f", specifier)), e4 = Math.max(-8, Math.min(8, Math.floor(exponent_default(value) / 3))) * 3, k3 = Math.pow(10, -e4), prefix = prefixes[8 + e4 / 3];
      return function(value2) {
        return f3(k3 * value2) + prefix;
      };
    }
    return {
      format: newFormat,
      formatPrefix: formatPrefix2
    };
  }

  // ../node_modules/d3-format/src/defaultLocale.js
  var locale;
  var format;
  var formatPrefix;
  defaultLocale({
    thousands: ",",
    grouping: [3],
    currency: ["$", ""]
  });
  function defaultLocale(definition) {
    locale = locale_default(definition);
    format = locale.format;
    formatPrefix = locale.formatPrefix;
    return locale;
  }

  // ../node_modules/d3-format/src/precisionFixed.js
  function precisionFixed_default(step) {
    return Math.max(0, -exponent_default(Math.abs(step)));
  }

  // ../node_modules/d3-format/src/precisionPrefix.js
  function precisionPrefix_default(step, value) {
    return Math.max(0, Math.max(-8, Math.min(8, Math.floor(exponent_default(value) / 3))) * 3 - exponent_default(Math.abs(step)));
  }

  // ../node_modules/d3-format/src/precisionRound.js
  function precisionRound_default(step, max5) {
    step = Math.abs(step), max5 = Math.abs(max5) - step;
    return Math.max(0, exponent_default(max5) - exponent_default(step)) + 1;
  }

  // ../node_modules/d3-scale/src/init.js
  function initRange(domain, range) {
    switch (arguments.length) {
      case 0:
        break;
      case 1:
        this.range(domain);
        break;
      default:
        this.range(range).domain(domain);
        break;
    }
    return this;
  }

  // ../node_modules/d3-scale/src/constant.js
  function constants(x3) {
    return function() {
      return x3;
    };
  }

  // ../node_modules/d3-scale/src/number.js
  function number3(x3) {
    return +x3;
  }

  // ../node_modules/d3-scale/src/continuous.js
  var unit = [0, 1];
  function identity3(x3) {
    return x3;
  }
  function normalize(a4, b3) {
    return (b3 -= a4 = +a4) ? function(x3) {
      return (x3 - a4) / b3;
    } : constants(isNaN(b3) ? NaN : 0.5);
  }
  function clamper(a4, b3) {
    var t3;
    if (a4 > b3)
      t3 = a4, a4 = b3, b3 = t3;
    return function(x3) {
      return Math.max(a4, Math.min(b3, x3));
    };
  }
  function bimap(domain, range, interpolate) {
    var d0 = domain[0], d1 = domain[1], r0 = range[0], r1 = range[1];
    if (d1 < d0)
      d0 = normalize(d1, d0), r0 = interpolate(r1, r0);
    else
      d0 = normalize(d0, d1), r0 = interpolate(r0, r1);
    return function(x3) {
      return r0(d0(x3));
    };
  }
  function polymap(domain, range, interpolate) {
    var j3 = Math.min(domain.length, range.length) - 1, d3 = new Array(j3), r3 = new Array(j3), i4 = -1;
    if (domain[j3] < domain[0]) {
      domain = domain.slice().reverse();
      range = range.slice().reverse();
    }
    while (++i4 < j3) {
      d3[i4] = normalize(domain[i4], domain[i4 + 1]);
      r3[i4] = interpolate(range[i4], range[i4 + 1]);
    }
    return function(x3) {
      var i5 = bisect_default(domain, x3, 1, j3) - 1;
      return r3[i5](d3[i5](x3));
    };
  }
  function copy(source, target) {
    return target.domain(source.domain()).range(source.range()).interpolate(source.interpolate()).clamp(source.clamp()).unknown(source.unknown());
  }
  function transformer() {
    var domain = unit, range = unit, interpolate = value_default, transform2, untransform, unknown, clamp = identity3, piecewise, output, input;
    function rescale() {
      var n3 = Math.min(domain.length, range.length);
      if (clamp !== identity3)
        clamp = clamper(domain[0], domain[n3 - 1]);
      piecewise = n3 > 2 ? polymap : bimap;
      output = input = null;
      return scale;
    }
    function scale(x3) {
      return x3 == null || isNaN(x3 = +x3) ? unknown : (output || (output = piecewise(domain.map(transform2), range, interpolate)))(transform2(clamp(x3)));
    }
    scale.invert = function(y3) {
      return clamp(untransform((input || (input = piecewise(range, domain.map(transform2), number_default)))(y3)));
    };
    scale.domain = function(_2) {
      return arguments.length ? (domain = Array.from(_2, number3), rescale()) : domain.slice();
    };
    scale.range = function(_2) {
      return arguments.length ? (range = Array.from(_2), rescale()) : range.slice();
    };
    scale.rangeRound = function(_2) {
      return range = Array.from(_2), interpolate = round_default, rescale();
    };
    scale.clamp = function(_2) {
      return arguments.length ? (clamp = _2 ? true : identity3, rescale()) : clamp !== identity3;
    };
    scale.interpolate = function(_2) {
      return arguments.length ? (interpolate = _2, rescale()) : interpolate;
    };
    scale.unknown = function(_2) {
      return arguments.length ? (unknown = _2, scale) : unknown;
    };
    return function(t3, u3) {
      transform2 = t3, untransform = u3;
      return rescale();
    };
  }
  function continuous() {
    return transformer()(identity3, identity3);
  }

  // ../node_modules/d3-scale/src/tickFormat.js
  function tickFormat(start2, stop, count4, specifier) {
    var step = tickStep(start2, stop, count4), precision;
    specifier = formatSpecifier(specifier == null ? ",f" : specifier);
    switch (specifier.type) {
      case "s": {
        var value = Math.max(Math.abs(start2), Math.abs(stop));
        if (specifier.precision == null && !isNaN(precision = precisionPrefix_default(step, value)))
          specifier.precision = precision;
        return formatPrefix(specifier, value);
      }
      case "":
      case "e":
      case "g":
      case "p":
      case "r": {
        if (specifier.precision == null && !isNaN(precision = precisionRound_default(step, Math.max(Math.abs(start2), Math.abs(stop)))))
          specifier.precision = precision - (specifier.type === "e");
        break;
      }
      case "f":
      case "%": {
        if (specifier.precision == null && !isNaN(precision = precisionFixed_default(step)))
          specifier.precision = precision - (specifier.type === "%") * 2;
        break;
      }
    }
    return format(specifier);
  }

  // ../node_modules/d3-scale/src/linear.js
  function linearish(scale) {
    var domain = scale.domain;
    scale.ticks = function(count4) {
      var d3 = domain();
      return ticks(d3[0], d3[d3.length - 1], count4 == null ? 10 : count4);
    };
    scale.tickFormat = function(count4, specifier) {
      var d3 = domain();
      return tickFormat(d3[0], d3[d3.length - 1], count4 == null ? 10 : count4, specifier);
    };
    scale.nice = function(count4) {
      if (count4 == null)
        count4 = 10;
      var d3 = domain();
      var i0 = 0;
      var i1 = d3.length - 1;
      var start2 = d3[i0];
      var stop = d3[i1];
      var prestep;
      var step;
      var maxIter = 10;
      if (stop < start2) {
        step = start2, start2 = stop, stop = step;
        step = i0, i0 = i1, i1 = step;
      }
      while (maxIter-- > 0) {
        step = tickIncrement(start2, stop, count4);
        if (step === prestep) {
          d3[i0] = start2;
          d3[i1] = stop;
          return domain(d3);
        } else if (step > 0) {
          start2 = Math.floor(start2 / step) * step;
          stop = Math.ceil(stop / step) * step;
        } else if (step < 0) {
          start2 = Math.ceil(start2 * step) / step;
          stop = Math.floor(stop * step) / step;
        } else {
          break;
        }
        prestep = step;
      }
      return scale;
    };
    return scale;
  }
  function linear2() {
    var scale = continuous();
    scale.copy = function() {
      return copy(scale, linear2());
    };
    initRange.apply(scale, arguments);
    return linearish(scale);
  }

  // ../node_modules/d3-shape/src/constant.js
  function constant_default4(x3) {
    return function constant2() {
      return x3;
    };
  }

  // ../node_modules/d3-shape/src/path.js
  function withPath(shape) {
    let digits = 3;
    shape.digits = function(_2) {
      if (!arguments.length)
        return digits;
      if (_2 == null) {
        digits = null;
      } else {
        const d3 = Math.floor(_2);
        if (!(d3 >= 0))
          throw new RangeError(`invalid digits: ${_2}`);
        digits = d3;
      }
      return shape;
    };
    return () => new Path(digits);
  }

  // ../node_modules/d3-shape/src/array.js
  var slice4 = Array.prototype.slice;
  function array_default(x3) {
    return typeof x3 === "object" && "length" in x3 ? x3 : Array.from(x3);
  }

  // ../node_modules/d3-shape/src/curve/linear.js
  function Linear(context) {
    this._context = context;
  }
  Linear.prototype = {
    areaStart: function() {
      this._line = 0;
    },
    areaEnd: function() {
      this._line = NaN;
    },
    lineStart: function() {
      this._point = 0;
    },
    lineEnd: function() {
      if (this._line || this._line !== 0 && this._point === 1)
        this._context.closePath();
      this._line = 1 - this._line;
    },
    point: function(x3, y3) {
      x3 = +x3, y3 = +y3;
      switch (this._point) {
        case 0:
          this._point = 1;
          this._line ? this._context.lineTo(x3, y3) : this._context.moveTo(x3, y3);
          break;
        case 1:
          this._point = 2;
        default:
          this._context.lineTo(x3, y3);
          break;
      }
    }
  };
  function linear_default(context) {
    return new Linear(context);
  }

  // ../node_modules/d3-shape/src/point.js
  function x2(p4) {
    return p4[0];
  }
  function y2(p4) {
    return p4[1];
  }

  // ../node_modules/d3-shape/src/line.js
  function line_default(x3, y3) {
    var defined2 = constant_default4(true), context = null, curve = linear_default, output = null, path2 = withPath(line);
    x3 = typeof x3 === "function" ? x3 : x3 === void 0 ? x2 : constant_default4(x3);
    y3 = typeof y3 === "function" ? y3 : y3 === void 0 ? y2 : constant_default4(y3);
    function line(data) {
      var i4, n3 = (data = array_default(data)).length, d3, defined0 = false, buffer;
      if (context == null)
        output = curve(buffer = path2());
      for (i4 = 0; i4 <= n3; ++i4) {
        if (!(i4 < n3 && defined2(d3 = data[i4], i4, data)) === defined0) {
          if (defined0 = !defined0)
            output.lineStart();
          else
            output.lineEnd();
        }
        if (defined0)
          output.point(+x3(d3, i4, data), +y3(d3, i4, data));
      }
      if (buffer)
        return output = null, buffer + "" || null;
    }
    line.x = function(_2) {
      return arguments.length ? (x3 = typeof _2 === "function" ? _2 : constant_default4(+_2), line) : x3;
    };
    line.y = function(_2) {
      return arguments.length ? (y3 = typeof _2 === "function" ? _2 : constant_default4(+_2), line) : y3;
    };
    line.defined = function(_2) {
      return arguments.length ? (defined2 = typeof _2 === "function" ? _2 : constant_default4(!!_2), line) : defined2;
    };
    line.curve = function(_2) {
      return arguments.length ? (curve = _2, context != null && (output = curve(context)), line) : curve;
    };
    line.context = function(_2) {
      return arguments.length ? (_2 == null ? context = output = null : output = curve(context = _2), line) : context;
    };
    return line;
  }

  // ../node_modules/d3-zoom/src/transform.js
  function Transform(k3, x3, y3) {
    this.k = k3;
    this.x = x3;
    this.y = y3;
  }
  Transform.prototype = {
    constructor: Transform,
    scale: function(k3) {
      return k3 === 1 ? this : new Transform(this.k * k3, this.x, this.y);
    },
    translate: function(x3, y3) {
      return x3 === 0 & y3 === 0 ? this : new Transform(this.k, this.x + this.k * x3, this.y + this.k * y3);
    },
    apply: function(point) {
      return [point[0] * this.k + this.x, point[1] * this.k + this.y];
    },
    applyX: function(x3) {
      return x3 * this.k + this.x;
    },
    applyY: function(y3) {
      return y3 * this.k + this.y;
    },
    invert: function(location2) {
      return [(location2[0] - this.x) / this.k, (location2[1] - this.y) / this.k];
    },
    invertX: function(x3) {
      return (x3 - this.x) / this.k;
    },
    invertY: function(y3) {
      return (y3 - this.y) / this.k;
    },
    rescaleX: function(x3) {
      return x3.copy().domain(x3.range().map(this.invertX, this).map(x3.invert, x3));
    },
    rescaleY: function(y3) {
      return y3.copy().domain(y3.range().map(this.invertY, this).map(y3.invert, y3));
    },
    toString: function() {
      return "translate(" + this.x + "," + this.y + ") scale(" + this.k + ")";
    }
  };
  var identity4 = new Transform(1, 0, 0);
  transform.prototype = Transform.prototype;
  function transform(node) {
    while (!node.__zoom)
      if (!(node = node.parentNode))
        return identity4;
    return node.__zoom;
  }

  // ../../skilltool/data/course_data.json
  var course_data_default = { "10101": { corners: [{ length: 275, start: 400 }, { length: 259, start: 675 }], course: 1, courseSetStatus: [], distance: 1200, distanceType: 1, finishTimeMax: 71e4, finishTimeMin: 675e3, laneMax: 13500, raceTrackId: 10001, slopes: [], straights: [{ end: 400, frontType: 2, start: 0 }, { end: 1200, frontType: 1, start: 934 }], surface: 1, turn: 1 }, "10102": { corners: [{ length: 275, start: 150 }, { length: 275, start: 700 }, { length: 259, start: 975 }], course: 1, courseSetStatus: [], distance: 1500, distanceType: 2, finishTimeMax: 95e4, finishTimeMin: 879e3, laneMax: 13500, raceTrackId: 10001, slopes: [], straights: [{ end: 700, frontType: 2, start: 425 }, { end: 1500, frontType: 1, start: 1234 }], surface: 1, turn: 1 }, "10103": { corners: [{ length: 275, start: 175 }, { length: 275, start: 450 }, { length: 275, start: 1e3 }, { length: 259, start: 1275 }], course: 1, courseSetStatus: [], distance: 1800, distanceType: 2, finishTimeMax: 11e5, finishTimeMin: 1044e3, laneMax: 13500, raceTrackId: 10001, slopes: [], straights: [{ end: 175, frontType: 1, start: 0 }, { end: 1e3, frontType: 2, start: 725 }, { end: 1800, frontType: 1, start: 1534 }], surface: 1, turn: 1 }, "10104": { corners: [{ length: 275, start: 375 }, { length: 275, start: 650 }, { length: 275, start: 1200 }, { length: 259, start: 1475 }], course: 1, courseSetStatus: [3], distance: 2e3, distanceType: 3, finishTimeMax: 123e4, finishTimeMin: 1171e3, laneMax: 13500, raceTrackId: 10001, slopes: [], straights: [{ end: 375, frontType: 1, start: 0 }, { end: 1200, frontType: 2, start: 925 }, { end: 2e3, frontType: 1, start: 1734 }], surface: 1, turn: 1 }, "10105": { corners: [{ length: 275, start: 175 }, { length: 275, start: 450 }, { length: 275, start: 975 }, { length: 275, start: 1250 }, { length: 275, start: 1800 }, { length: 259, start: 2075 }], course: 1, courseSetStatus: [2], distance: 2600, distanceType: 4, finishTimeMax: 165e4, finishTimeMin: 1576e3, laneMax: 13500, raceTrackId: 10001, slopes: [], straights: [{ end: 175, frontType: 2, start: 0 }, { end: 975, frontType: 1, start: 725 }, { end: 1800, frontType: 2, start: 1525 }, { end: 2600, frontType: 1, start: 2334 }], surface: 1, turn: 1 }, "10106": { corners: [{ length: 230, start: 280 }, { length: 226, start: 510 }], course: 1, courseSetStatus: [], distance: 1e3, distanceType: 1, finishTimeMax: 63e4, finishTimeMin: 574e3, laneMax: 11e3, raceTrackId: 10001, slopes: [], straights: [{ end: 280, frontType: 2, start: 0 }, { end: 1e3, frontType: 1, start: 736 }], surface: 2, turn: 1 }, "10107": { corners: [{ length: 230, start: 240 }, { length: 230, start: 470 }, { length: 230, start: 980 }, { length: 226, start: 1210 }], course: 1, courseSetStatus: [1], distance: 1700, distanceType: 2, finishTimeMax: 113e4, finishTimeMin: 1014e3, laneMax: 11e3, raceTrackId: 10001, slopes: [], straights: [{ end: 240, frontType: 1, start: 0 }, { end: 980, frontType: 2, start: 700 }, { end: 1700, frontType: 1, start: 1436 }], surface: 2, turn: 1 }, "10108": { corners: [{ length: 230, start: 200 }, { length: 230, start: 430 }, { length: 230, start: 940 }, { length: 230, start: 1170 }, { length: 230, start: 1680 }, { length: 226, start: 1910 }], course: 1, courseSetStatus: [], distance: 2400, distanceType: 3, finishTimeMax: 156e4, finishTimeMin: 1491e3, laneMax: 11e3, raceTrackId: 10001, slopes: [], straights: [{ end: 200, frontType: 2, start: 0 }, { end: 940, frontType: 1, start: 660 }, { end: 1680, frontType: 2, start: 1408 }, { end: 2400, frontType: 1, start: 2136 }], surface: 2, turn: 1 }, "10201": { corners: [{ length: 220, start: 310 }, { length: 208, start: 530 }], course: 1, courseSetStatus: [], distance: 1e3, distanceType: 1, finishTimeMax: 57e4, finishTimeMin: 547e3, laneMax: 14700, raceTrackId: 10002, slopes: [{ length: 555, slope: 1e4, start: 0 }], straights: [{ end: 310, frontType: 2, start: 0 }, { end: 1e3, frontType: 1, start: 738 }], surface: 1, turn: 1 }, "10202": { corners: [{ length: 220, start: 510 }, { length: 208, start: 730 }], course: 1, courseSetStatus: [], distance: 1200, distanceType: 1, finishTimeMax: 71e4, finishTimeMin: 675e3, laneMax: 14700, raceTrackId: 10002, slopes: [{ length: 755, slope: 1e4, start: 0 }], straights: [{ end: 510, frontType: 2, start: 0 }, { end: 1200, frontType: 1, start: 938 }], surface: 1, turn: 1 }, "10203": { corners: [{ length: 220, start: 320 }, { length: 220, start: 540 }, { length: 220, start: 1110 }, { length: 208, start: 1330 }], course: 1, courseSetStatus: [3], distance: 1800, distanceType: 2, finishTimeMax: 11e5, finishTimeMin: 1044e3, laneMax: 14700, raceTrackId: 10002, slopes: [{ length: 200, slope: -1e4, start: 220 }, { length: 720, slope: 1e4, start: 665 }], straights: [{ end: 320, frontType: 1, start: 0 }, { end: 1110, frontType: 2, start: 760 }, { end: 1800, frontType: 1, start: 1538 }], surface: 1, turn: 1 }, "10204": { corners: [{ length: 220, start: 520 }, { length: 220, start: 740 }, { length: 220, start: 1310 }, { length: 208, start: 1530 }], course: 1, courseSetStatus: [1], distance: 2e3, distanceType: 3, finishTimeMax: 123e4, finishTimeMin: 1171e3, laneMax: 14700, raceTrackId: 10002, slopes: [{ length: 200, slope: -1e4, start: 420 }, { length: 720, slope: 1e4, start: 865 }], straights: [{ end: 520, frontType: 1, start: 0 }, { end: 1310, frontType: 2, start: 960 }, { end: 2e3, frontType: 1, start: 1738 }], surface: 1, turn: 1 }, "10205": { corners: [{ length: 240, start: 260 }, { length: 230, start: 500 }, { length: 220, start: 1120 }, { length: 220, start: 1340 }, { length: 220, start: 1910 }, { length: 208, start: 2130 }], course: 1, courseSetStatus: [2], distance: 2600, distanceType: 4, finishTimeMax: 165e4, finishTimeMin: 1576e3, laneMax: 14700, raceTrackId: 10002, slopes: [{ length: 495, slope: 1e4, start: 0 }, { length: 200, slope: -1e4, start: 970 }, { length: 720, slope: 1e4, start: 1425 }], straights: [{ end: 260, frontType: 2, start: 0 }, { end: 1120, frontType: 1, start: 730 }, { end: 1910, frontType: 2, start: 1560 }, { end: 2600, frontType: 1, start: 2338 }], surface: 1, turn: 1 }, "10206": { corners: [{ length: 190, start: 370 }, { length: 180, start: 560 }], course: 1, courseSetStatus: [], distance: 1e3, distanceType: 1, finishTimeMax: 63e4, finishTimeMin: 574e3, laneMax: 11e3, raceTrackId: 10002, slopes: [], straights: [{ end: 370, frontType: 2, start: 0 }, { end: 1e3, frontType: 1, start: 740 }], surface: 2, turn: 1 }, "10207": { corners: [{ length: 190, start: 350 }, { length: 190, start: 540 }, { length: 190, start: 1070 }, { length: 180, start: 1260 }], course: 1, courseSetStatus: [], distance: 1700, distanceType: 2, finishTimeMax: 113e4, finishTimeMin: 1014e3, laneMax: 11e3, raceTrackId: 10002, slopes: [{ length: 340, slope: -1e4, start: 275 }, { length: 670, slope: 1e4, start: 615 }], straights: [{ end: 350, frontType: 1, start: 0 }, { end: 1070, frontType: 2, start: 730 }, { end: 1700, frontType: 1, start: 1440 }], surface: 2, turn: 1 }, "10208": { corners: [{ length: 190, start: 292 }, { length: 190, start: 482 }, { length: 190, start: 1040 }, { length: 190, start: 1230 }, { length: 190, start: 1770 }, { length: 180, start: 1960 }], course: 1, courseSetStatus: [2], distance: 2400, distanceType: 3, finishTimeMax: 156e4, finishTimeMin: 1491e3, laneMax: 11e3, raceTrackId: 10002, slopes: [], straights: [{ end: 292, frontType: 2, start: 0 }, { end: 1040, frontType: 1, start: 672 }, { end: 1770, frontType: 2, start: 1420 }, { end: 2400, frontType: 1, start: 2140 }], surface: 2, turn: 1 }, "10301": { corners: [], course: 1, courseSetStatus: [3], distance: 1e3, distanceType: 1, finishTimeMax: 57e4, finishTimeMin: 547e3, laneMax: 23500, raceTrackId: 10003, slopes: [{ length: 240, slope: 1e4, start: 0 }, { length: 60, slope: -1e4, start: 240 }], straights: [{ end: 1e3, frontType: 1, start: 0 }], surface: 1, turn: 4 }, "10302": { corners: [{ length: 200, start: 450 }, { length: 192, start: 650 }], course: 2, courseSetStatus: [], distance: 1200, distanceType: 1, finishTimeMax: 71e4, finishTimeMin: 675e3, laneMax: 13500, raceTrackId: 10003, slopes: [], straights: [{ end: 450, frontType: 2, start: 0 }, { end: 1200, frontType: 1, start: 842 }], surface: 1, turn: 2 }, "10303": { corners: [{ length: 200, start: 650 }, { length: 192, start: 850 }], course: 2, courseSetStatus: [], distance: 1400, distanceType: 1, finishTimeMax: 84e4, finishTimeMin: 8e5, laneMax: 13500, raceTrackId: 10003, slopes: [], straights: [{ end: 650, frontType: 2, start: 0 }, { end: 1400, frontType: 1, start: 1042 }], surface: 1, turn: 2 }, "10304": { corners: [{ length: 200, start: 550 }, { length: 192, start: 750 }], course: 3, courseSetStatus: [], distance: 1600, distanceType: 2, finishTimeMax: 95e4, finishTimeMin: 908e3, laneMax: 13500, raceTrackId: 10003, slopes: [{ length: 350, slope: 1e4, start: 250 }, { length: 300, slope: -15e3, start: 600 }], straights: [{ end: 550, frontType: 2, start: 0 }, { end: 1600, frontType: 1, start: 942 }], surface: 1, turn: 2 }, "10305": { corners: [{ length: 200, start: 750 }, { length: 192, start: 950 }], course: 3, courseSetStatus: [3], distance: 1800, distanceType: 2, finishTimeMax: 11e5, finishTimeMin: 1044e3, laneMax: 13500, raceTrackId: 10003, slopes: [{ length: 350, slope: 1e4, start: 450 }, { length: 300, slope: -15e3, start: 800 }], straights: [{ end: 750, frontType: 2, start: 0 }, { end: 1800, frontType: 1, start: 1142 }], surface: 1, turn: 2 }, "10306": { corners: [{ length: 200, start: 420 }, { length: 200, start: 620 }, { length: 200, start: 1250 }, { length: 192, start: 1450 }], course: 2, courseSetStatus: [2, 3], distance: 2e3, distanceType: 3, finishTimeMax: 123e4, finishTimeMin: 1171e3, laneMax: 13500, raceTrackId: 10003, slopes: [], straights: [{ end: 420, frontType: 1, start: 0 }, { end: 1250, frontType: 2, start: 820 }, { end: 2e3, frontType: 1, start: 1642 }], surface: 1, turn: 2 }, "10307": { corners: [{ length: 200, start: 950 }, { length: 192, start: 1150 }], course: 3, courseSetStatus: [2, 3], distance: 2e3, distanceType: 3, finishTimeMax: 123e4, finishTimeMin: 1171e3, laneMax: 13500, raceTrackId: 10003, slopes: [{ length: 350, slope: 1e4, start: 650 }, { length: 300, slope: -15e3, start: 1e3 }], straights: [{ end: 950, frontType: 2, start: 0 }, { end: 2e3, frontType: 1, start: 1342 }], surface: 1, turn: 2 }, "10308": { corners: [{ length: 200, start: 650 }, { length: 200, start: 850 }, { length: 200, start: 1450 }, { length: 192, start: 1650 }], course: 2, courseSetStatus: [1], distance: 2200, distanceType: 3, finishTimeMax: 135e4, finishTimeMin: 1302e3, laneMax: 13500, raceTrackId: 10003, slopes: [], straights: [{ end: 650, frontType: 1, start: 0 }, { end: 1450, frontType: 2, start: 1050 }, { end: 2200, frontType: 1, start: 1842 }], surface: 1, turn: 2 }, "10309": { corners: [{ length: 200, start: 810 }, { length: 200, start: 1010 }, { length: 200, start: 1650 }, { length: 192, start: 1850 }], course: 2, courseSetStatus: [], distance: 2400, distanceType: 3, finishTimeMax: 149e4, finishTimeMin: 1416e3, laneMax: 13500, raceTrackId: 10003, slopes: [], straights: [{ end: 810, frontType: 1, start: 0 }, { end: 1650, frontType: 2, start: 1210 }, { end: 2400, frontType: 1, start: 2042 }], surface: 1, turn: 2 }, "10310": { corners: [{ length: 160, start: 540 }, { length: 147, start: 700 }], course: 1, courseSetStatus: [], distance: 1200, distanceType: 1, finishTimeMax: 77e4, finishTimeMin: 69e4, laneMax: 11e3, raceTrackId: 10003, slopes: [], straights: [{ end: 540, frontType: 2, start: 0 }, { end: 1200, frontType: 1, start: 847 }], surface: 2, turn: 2 }, "10311": { corners: [{ length: 160, start: 400 }, { length: 160, start: 560 }, { length: 160, start: 1140 }, { length: 147, start: 1300 }], course: 1, courseSetStatus: [5], distance: 1800, distanceType: 2, finishTimeMax: 118e4, finishTimeMin: 1081e3, laneMax: 11e3, raceTrackId: 10003, slopes: [], straights: [{ end: 400, frontType: 1, start: 0 }, { end: 1140, frontType: 2, start: 720 }, { end: 1800, frontType: 1, start: 1447 }], surface: 2, turn: 2 }, "10312": { corners: [{ length: 160, start: 380 }, { length: 160, start: 540 }, { length: 160, start: 1120 }, { length: 160, start: 1280 }, { length: 160, start: 1850 }, { length: 160, start: 2010 }], course: 1, courseSetStatus: [], distance: 2500, distanceType: 4, finishTimeMax: 164e4, finishTimeMin: 1591e3, laneMax: 11e3, raceTrackId: 10003, slopes: [], straights: [{ end: 380, frontType: 2, start: 0 }, { end: 1120, frontType: 1, start: 700 }, { end: 1850, frontType: 2, start: 1440 }, { end: 2500, frontType: 1, start: 2170 }], surface: 2, turn: 2 }, "10401": { corners: [{ length: 300, start: 420 }, { length: 188, start: 720 }], course: 1, courseSetStatus: [], distance: 1200, distanceType: 1, finishTimeMax: 71e4, finishTimeMin: 675e3, laneMax: 13e3, raceTrackId: 10004, slopes: [{ length: 100, slope: 15e3, start: 180 }], straights: [{ end: 420, frontType: 2, start: 0 }, { end: 1200, frontType: 1, start: 908 }], surface: 1, turn: 1 }, "10402": { corners: [{ length: 200, start: 330 }, { length: 200, start: 530 }, { length: 300, start: 1020 }, { length: 188, start: 1320 }], course: 1, courseSetStatus: [2], distance: 1800, distanceType: 2, finishTimeMax: 11e5, finishTimeMin: 1044e3, laneMax: 13e3, raceTrackId: 10004, slopes: [{ length: 100, slope: 15e3, start: 780 }], straights: [{ end: 330, frontType: 1, start: 0 }, { end: 1020, frontType: 2, start: 730 }, { end: 1800, frontType: 1, start: 1508 }], surface: 1, turn: 1 }, "10403": { corners: [{ length: 200, start: 530 }, { length: 200, start: 730 }, { length: 300, start: 1220 }, { length: 188, start: 1520 }], course: 1, courseSetStatus: [2], distance: 2e3, distanceType: 3, finishTimeMax: 123e4, finishTimeMin: 1171e3, laneMax: 13e3, raceTrackId: 10004, slopes: [{ length: 100, slope: 15e3, start: 980 }], straights: [{ end: 530, frontType: 1, start: 0 }, { end: 1220, frontType: 2, start: 930 }, { end: 2e3, frontType: 1, start: 1708 }], surface: 1, turn: 1 }, "10404": { corners: [{ length: 300, start: 220 }, { length: 200, start: 520 }, { length: 200, start: 1130 }, { length: 200, start: 1330 }, { length: 300, start: 1820 }, { length: 188, start: 2120 }], course: 1, courseSetStatus: [], distance: 2600, distanceType: 4, finishTimeMax: 165e4, finishTimeMin: 1576e3, laneMax: 13e3, raceTrackId: 10004, slopes: [{ length: 80, slope: 15e3, start: 0 }, { length: 100, slope: 15e3, start: 1580 }], straights: [{ end: 220, frontType: 2, start: 0 }, { end: 1130, frontType: 1, start: 720 }, { end: 1820, frontType: 2, start: 1530 }, { end: 2600, frontType: 1, start: 2308 }], surface: 1, turn: 1 }, "10405": { corners: [{ length: 210, start: 500 }, { length: 145, start: 710 }], course: 1, courseSetStatus: [], distance: 1150, distanceType: 1, finishTimeMax: 72e4, finishTimeMin: 666e3, laneMax: 11500, raceTrackId: 10004, slopes: [], straights: [{ end: 500, frontType: 2, start: 0 }, { end: 1150, frontType: 1, start: 855 }], surface: 2, turn: 1 }, "10406": { corners: [{ length: 170, start: 360 }, { length: 170, start: 530 }, { length: 210, start: 1050 }, { length: 145, start: 1260 }], course: 1, courseSetStatus: [3], distance: 1700, distanceType: 2, finishTimeMax: 113e4, finishTimeMin: 1014e3, laneMax: 11500, raceTrackId: 10004, slopes: [{ length: 320, slope: -1e4, start: 285 }], straights: [{ end: 360, frontType: 1, start: 0 }, { end: 1050, frontType: 2, start: 700 }, { end: 1700, frontType: 1, start: 1405 }], surface: 2, turn: 1 }, "10407": { corners: [{ length: 210, start: 310 }, { length: 160, start: 520 }, { length: 170, start: 1060 }, { length: 170, start: 1230 }, { length: 210, start: 1750 }, { length: 145, start: 1960 }], course: 1, courseSetStatus: [2], distance: 2400, distanceType: 3, finishTimeMax: 156e4, finishTimeMin: 1491e3, laneMax: 11500, raceTrackId: 10004, slopes: [], straights: [{ end: 310, frontType: 2, start: 0 }, { end: 1060, frontType: 1, start: 680 }, { end: 1750, frontType: 2, start: 1400 }, { end: 2400, frontType: 1, start: 2105 }], surface: 2, turn: 1 }, "10501": { corners: [{ length: 350, start: 300 }, { length: 240, start: 650 }], course: 3, courseSetStatus: [], distance: 1200, distanceType: 1, finishTimeMax: 71e4, finishTimeMin: 675e3, laneMax: 12e3, raceTrackId: 10005, slopes: [{ length: 200, slope: -15e3, start: 0 }, { length: 110, slope: 2e4, start: 1025 }], straights: [{ end: 1200, frontType: 1, start: 890 }], surface: 1, turn: 1 }, "10502": { corners: [{ length: 450, start: 50 }, { length: 350, start: 700 }, { length: 240, start: 1050 }], course: 3, courseSetStatus: [3], distance: 1600, distanceType: 2, finishTimeMax: 95e4, finishTimeMin: 908e3, laneMax: 12e3, raceTrackId: 10005, slopes: [{ length: 300, slope: -15e3, start: 300 }, { length: 110, slope: 2e4, start: 1425 }], straights: [{ end: 1600, frontType: 1, start: 1290 }], surface: 1, turn: 1 }, "10503": { corners: [{ length: 250, start: 175 }, { length: 250, start: 425 }, { length: 250, start: 1e3 }, { length: 240, start: 1250 }], course: 2, courseSetStatus: [], distance: 1800, distanceType: 2, finishTimeMax: 11e5, finishTimeMin: 1044e3, laneMax: 12e3, raceTrackId: 10005, slopes: [{ length: 35, slope: 2e4, start: 1 }, { length: 200, slope: 15e3, start: 125 }, { length: 400, slope: -15e3, start: 425 }, { length: 110, slope: 2e4, start: 1625 }], straights: [{ end: 175, frontType: 1, start: 0 }, { end: 1e3, frontType: 2, start: 675 }, { end: 1800, frontType: 1, start: 1490 }], surface: 1, turn: 1 }, "10504": { corners: [{ length: 250, start: 375 }, { length: 250, start: 625 }, { length: 250, start: 1200 }, { length: 240, start: 1450 }], course: 2, courseSetStatus: [1], distance: 2e3, distanceType: 3, finishTimeMax: 123e4, finishTimeMin: 1171e3, laneMax: 12e3, raceTrackId: 10005, slopes: [{ length: 110, slope: 2e4, start: 125 }, { length: 200, slope: 15e3, start: 325 }, { length: 400, slope: -15e3, start: 625 }, { length: 110, slope: 2e4, start: 1825 }], straights: [{ end: 375, frontType: 1, start: 0 }, { end: 1200, frontType: 2, start: 875 }, { end: 2e3, frontType: 1, start: 1690 }], surface: 1, turn: 1 }, "10505": { corners: [{ length: 247, start: 403 }, { length: 450, start: 650 }, { length: 350, start: 1300 }, { length: 240, start: 1650 }], course: 3, courseSetStatus: [2, 4], distance: 2200, distanceType: 3, finishTimeMax: 135e4, finishTimeMin: 1302e3, laneMax: 12e3, raceTrackId: 10005, slopes: [{ length: 110, slope: 2e4, start: 153 }, { length: 200, slope: 15e3, start: 353 }, { length: 300, slope: -15e3, start: 900 }, { length: 110, slope: 2e4, start: 2025 }], straights: [{ end: 403, frontType: 1, start: 0 }, { end: 2200, frontType: 1, start: 1890 }], surface: 1, turn: 1 }, "10506": { corners: [{ length: 146, start: 100 }, { length: 250, start: 246 }, { length: 250, start: 875 }, { length: 250, start: 1125 }, { length: 250, start: 1700 }, { length: 240, start: 1950 }], course: 2, courseSetStatus: [2, 4], distance: 2500, distanceType: 4, finishTimeMax: 157e4, finishTimeMin: 1487e3, laneMax: 12e3, raceTrackId: 10005, slopes: [{ length: 110, slope: 2e4, start: 621 }, { length: 200, slope: 15e3, start: 825 }, { length: 400, slope: -15e3, start: 1125 }, { length: 110, slope: 2e4, start: 2325 }], straights: [{ end: 875, frontType: 1, start: 496 }, { end: 1700, frontType: 2, start: 1375 }, { end: 2500, frontType: 1, start: 2190 }], surface: 1, turn: 1 }, "10507": { corners: [{ length: 250, start: 290 }, { length: 250, start: 540 }, { length: 250, start: 1115 }, { length: 250, start: 1365 }, { length: 250, start: 1975 }, { length: 250, start: 2225 }, { length: 250, start: 2800 }, { length: 240, start: 3050 }], course: 2, courseSetStatus: [2], distance: 3600, distanceType: 4, finishTimeMax: 227e4, finishTimeMin: 2231e3, laneMax: 12e3, raceTrackId: 10005, slopes: [{ length: 110, slope: 2e4, start: 40 }, { length: 200, slope: 15e3, start: 240 }, { length: 400, slope: -15e3, start: 540 }, { length: 110, slope: 2e4, start: 1740 }, { length: 200, slope: 15e3, start: 1925 }, { length: 400, slope: -15e3, start: 2225 }, { length: 110, slope: 2e4, start: 3425 }], straights: [{ end: 290, frontType: 1, start: 0 }, { end: 1115, frontType: 2, start: 790 }, { end: 1975, frontType: 1, start: 1615 }, { end: 2800, frontType: 2, start: 2475 }, { end: 3600, frontType: 1, start: 3290 }], surface: 1, turn: 1 }, "10508": { corners: [{ length: 200, start: 500 }, { length: 192, start: 700 }], course: 1, courseSetStatus: [3], distance: 1200, distanceType: 1, finishTimeMax: 77e4, finishTimeMin: 69e4, laneMax: 12e3, raceTrackId: 10005, slopes: [{ length: 175, slope: -15e3, start: 175 }, { length: 175, slope: 15e3, start: 1e3 }], straights: [{ end: 500, frontType: 2, start: 0 }, { end: 1200, frontType: 1, start: 892 }], surface: 2, turn: 1 }, "10509": { corners: [{ length: 200, start: 350 }, { length: 200, start: 550 }, { length: 200, start: 1100 }, { length: 192, start: 1300 }], course: 1, courseSetStatus: [3], distance: 1800, distanceType: 2, finishTimeMax: 118e4, finishTimeMin: 1081e3, laneMax: 12e3, raceTrackId: 10005, slopes: [{ length: 175, slope: 15e3, start: 100 }, { length: 175, slope: 1e4, start: 350 }, { length: 175, slope: -15e3, start: 775 }, { length: 175, slope: 15e3, start: 1600 }], straights: [{ end: 350, frontType: 1, start: 0 }, { end: 1100, frontType: 1, start: 750 }, { end: 1800, frontType: 1, start: 1492 }], surface: 2, turn: 1 }, "10510": { corners: [{ length: 200, start: 200 }, { length: 200, start: 400 }, { length: 200, start: 950 }, { length: 200, start: 1150 }, { length: 200, start: 1700 }, { length: 192, start: 1900 }], course: 1, courseSetStatus: [2], distance: 2400, distanceType: 3, finishTimeMax: 156e4, finishTimeMin: 1491e3, laneMax: 12e3, raceTrackId: 10005, slopes: [], straights: [{ end: 200, frontType: 2, start: 0 }, { end: 950, frontType: 1, start: 600 }, { end: 1700, frontType: 2, start: 1350 }, { end: 2400, frontType: 1, start: 2092 }], surface: 2, turn: 1 }, "10511": { corners: [{ length: 200, start: 300 }, { length: 200, start: 500 }, { length: 200, start: 1050 }, { length: 200, start: 1250 }, { length: 200, start: 1800 }, { length: 192, start: 2e3 }], course: 1, courseSetStatus: [], distance: 2500, distanceType: 4, finishTimeMax: 164e4, finishTimeMin: 1591e3, laneMax: 12e3, raceTrackId: 10005, slopes: [], straights: [{ end: 300, frontType: 2, start: 0 }, { end: 1050, frontType: 1, start: 700 }, { end: 1800, frontType: 2, start: 1450 }, { end: 2500, frontType: 1, start: 2192 }], surface: 2, turn: 1 }, "10601": { corners: [{ length: 275, start: 350 }, { length: 250, start: 625 }], course: 1, courseSetStatus: [2, 3], distance: 1400, distanceType: 1, finishTimeMax: 84e4, finishTimeMin: 8e5, laneMax: 15e3, raceTrackId: 10006, slopes: [{ length: 75, slope: 2e4, start: 125 }, { length: 250, slope: -15e3, start: 250 }, { length: 150, slope: 15e3, start: 950 }], straights: [{ end: 350, frontType: 2, start: 0 }, { end: 1400, frontType: 1, start: 875 }], surface: 1, turn: 2 }, "10602": { corners: [{ length: 275, start: 550 }, { length: 250, start: 825 }], course: 1, courseSetStatus: [2, 4], distance: 1600, distanceType: 2, finishTimeMax: 95e4, finishTimeMin: 908e3, laneMax: 15e3, raceTrackId: 10006, slopes: [{ length: 75, slope: 2e4, start: 325 }, { length: 250, slope: -15e3, start: 450 }, { length: 150, slope: 15e3, start: 1150 }], straights: [{ end: 550, frontType: 2, start: 0 }, { end: 1600, frontType: 1, start: 1075 }], surface: 1, turn: 2 }, "10603": { corners: [{ length: 250, start: 75 }, { length: 275, start: 750 }, { length: 250, start: 1025 }], course: 1, courseSetStatus: [1], distance: 1800, distanceType: 2, finishTimeMax: 11e5, finishTimeMin: 1044e3, laneMax: 15e3, raceTrackId: 10006, slopes: [{ length: 75, slope: 2e4, start: 525 }, { length: 250, slope: -15e3, start: 650 }, { length: 150, slope: 15e3, start: 1350 }], straights: [{ end: 750, frontType: 2, start: 325 }, { end: 1800, frontType: 1, start: 1275 }], surface: 1, turn: 2 }, "10604": { corners: [{ length: 200, start: 200 }, { length: 275, start: 950 }, { length: 250, start: 1225 }], course: 1, courseSetStatus: [], distance: 2e3, distanceType: 3, finishTimeMax: 123e4, finishTimeMin: 1171e3, laneMax: 15e3, raceTrackId: 10006, slopes: [{ length: 75, slope: 2e4, start: 725 }, { length: 250, slope: -15e3, start: 850 }, { length: 150, slope: 15e3, start: 1550 }], straights: [{ end: 950, frontType: 2, start: 400 }, { end: 2e3, frontType: 1, start: 1475 }], surface: 1, turn: 2 }, "10605": { corners: [{ length: 250, start: 225 }, { length: 325, start: 475 }, { length: 275, start: 1250 }, { length: 250, start: 1525 }], course: 1, courseSetStatus: [3], distance: 2300, distanceType: 3, finishTimeMax: 143e4, finishTimeMin: 1393e3, laneMax: 15e3, raceTrackId: 10006, slopes: [{ length: 75, slope: 2e4, start: 1025 }, { length: 250, slope: -15e3, start: 1150 }, { length: 150, slope: 15e3, start: 1850 }], straights: [{ end: 225, frontType: 1, start: 0 }, { end: 1250, frontType: 2, start: 800 }, { end: 2300, frontType: 1, start: 1775 }], surface: 1, turn: 2 }, "10606": { corners: [{ length: 250, start: 325 }, { length: 325, start: 575 }, { length: 275, start: 1350 }, { length: 250, start: 1625 }], course: 1, courseSetStatus: [], distance: 2400, distanceType: 3, finishTimeMax: 149e4, finishTimeMin: 1416e3, laneMax: 15e3, raceTrackId: 10006, slopes: [{ length: 40, slope: 15e3, start: 0 }, { length: 75, slope: 2e4, start: 1125 }, { length: 250, slope: -15e3, start: 1250 }, { length: 150, slope: 15e3, start: 1950 }], straights: [{ end: 325, frontType: 1, start: 0 }, { end: 1350, frontType: 2, start: 900 }, { end: 2400, frontType: 1, start: 1875 }], surface: 1, turn: 2 }, "10607": { corners: [{ length: 250, start: 425 }, { length: 325, start: 675 }, { length: 275, start: 1450 }, { length: 250, start: 1725 }], course: 1, courseSetStatus: [2], distance: 2500, distanceType: 4, finishTimeMax: 157e4, finishTimeMin: 1487e3, laneMax: 15e3, raceTrackId: 10006, slopes: [{ length: 140, slope: 15e3, start: 0 }, { length: 75, slope: 2e4, start: 1225 }, { length: 250, slope: -15e3, start: 1350 }, { length: 150, slope: 15e3, start: 2050 }], straights: [{ end: 425, frontType: 1, start: 0 }, { end: 1450, frontType: 2, start: 1e3 }, { end: 2500, frontType: 1, start: 1975 }], surface: 1, turn: 2 }, "10608": { corners: [{ length: 275, start: 292 }, { length: 275, start: 567 }, { length: 250, start: 1325 }, { length: 325, start: 1575 }, { length: 275, start: 2350 }, { length: 250, start: 2625 }], course: 1, courseSetStatus: [], distance: 3400, distanceType: 4, finishTimeMax: 214e4, finishTimeMin: 2099e3, laneMax: 15e3, raceTrackId: 10006, slopes: [{ length: 75, slope: 2e4, start: 67 }, { length: 250, slope: -15e3, start: 192 }, { length: 150, slope: 15e3, start: 892 }, { length: 75, slope: 2e4, start: 2125 }, { length: 250, slope: -15e3, start: 2250 }, { length: 150, slope: 15e3, start: 2950 }], straights: [{ end: 292, frontType: 2, start: 0 }, { end: 1325, frontType: 1, start: 842 }, { end: 2350, frontType: 2, start: 1900 }, { end: 3400, frontType: 1, start: 2875 }], surface: 1, turn: 2 }, "10609": { corners: [{ length: 225, start: 350 }, { length: 224, start: 575 }], course: 1, courseSetStatus: [1], distance: 1300, distanceType: 1, finishTimeMax: 82e4, finishTimeMin: 766e3, laneMax: 12500, raceTrackId: 10006, slopes: [{ length: 200, slope: -1e4, start: 275 }, { length: 250, slope: 15e3, start: 800 }], straights: [{ end: 350, frontType: 2, start: 0 }, { end: 1300, frontType: 1, start: 799 }], surface: 2, turn: 2 }, "10610": { corners: [{ length: 225, start: 450 }, { length: 224, start: 675 }], course: 1, courseSetStatus: [2], distance: 1400, distanceType: 1, finishTimeMax: 94e4, finishTimeMin: 808e3, laneMax: 12500, raceTrackId: 10006, slopes: [{ length: 200, slope: -1e4, start: 375 }, { length: 250, slope: 15e3, start: 900 }], straights: [{ end: 450, frontType: 2, start: 0 }, { end: 1400, frontType: 1, start: 899 }], surface: 2, turn: 2 }, "10611": { corners: [{ length: 225, start: 650 }, { length: 224, start: 875 }], course: 1, courseSetStatus: [1, 2], distance: 1600, distanceType: 2, finishTimeMax: 108e4, finishTimeMin: 941e3, laneMax: 12500, raceTrackId: 10006, slopes: [{ length: 200, slope: -1e4, start: 575 }, { length: 250, slope: 15e3, start: 1100 }], straights: [{ end: 650, frontType: 2, start: 0 }, { end: 1600, frontType: 1, start: 1099 }], surface: 2, turn: 2 }, "10612": { corners: [{ length: 250, start: 200 }, { length: 250, start: 450 }, { length: 225, start: 1150 }, { length: 224, start: 1375 }], course: 1, courseSetStatus: [], distance: 2100, distanceType: 3, finishTimeMax: 133e4, finishTimeMin: 1274e3, laneMax: 12500, raceTrackId: 10006, slopes: [{ length: 200, slope: -1e4, start: 1075 }, { length: 250, slope: 15e3, start: 1600 }], straights: [{ end: 200, frontType: 1, start: 0 }, { end: 1150, frontType: 2, start: 700 }, { end: 2100, frontType: 1, start: 1599 }], surface: 2, turn: 2 }, "10613": { corners: [{ length: 250, start: 500 }, { length: 250, start: 750 }, { length: 225, start: 1450 }, { length: 225, start: 1675 }, { length: 500, start: 2348 }], course: 1, courseSetStatus: [2], distance: 2400, distanceType: 3, finishTimeMax: 156e4, finishTimeMin: 1491e3, laneMax: 12500, raceTrackId: 10006, slopes: [], straights: [{ end: 500, frontType: 1, start: 0 }, { end: 1450, frontType: 2, start: 1e3 }, { end: 2400, frontType: 1, start: 1900 }], surface: 2, turn: 2 }, "10701": { corners: [{ length: 250, start: 300 }, { length: 238, start: 550 }], course: 1, courseSetStatus: [], distance: 1200, distanceType: 1, finishTimeMax: 71e4, finishTimeMin: 675e3, laneMax: 14400, raceTrackId: 10007, slopes: [{ length: 775, slope: -1e4, start: 100 }, { length: 100, slope: 2e4, start: 875 }], straights: [{ end: 300, frontType: 2, start: 0 }, { end: 1200, frontType: 1, start: 788 }], surface: 1, turn: 2 }, "10702": { corners: [{ length: 250, start: 500 }, { length: 238, start: 750 }], course: 1, courseSetStatus: [], distance: 1400, distanceType: 1, finishTimeMax: 84e4, finishTimeMin: 8e5, laneMax: 14400, raceTrackId: 10007, slopes: [{ length: 775, slope: -1e4, start: 300 }, { length: 100, slope: 2e4, start: 1075 }], straights: [{ end: 500, frontType: 2, start: 0 }, { end: 1400, frontType: 1, start: 988 }], surface: 1, turn: 2 }, "10703": { corners: [{ length: 150, start: 150 }, { length: 250, start: 700 }, { length: 238, start: 950 }], course: 1, courseSetStatus: [1], distance: 1600, distanceType: 2, finishTimeMax: 95e4, finishTimeMin: 908e3, laneMax: 14400, raceTrackId: 10007, slopes: [{ length: 775, slope: -1e4, start: 500 }, { length: 100, slope: 2e4, start: 1275 }], straights: [{ end: 700, frontType: 2, start: 300 }, { end: 1600, frontType: 1, start: 1188 }], surface: 1, turn: 2 }, "10704": { corners: [{ length: 200, start: 300 }, { length: 200, start: 500 }, { length: 250, start: 1100 }, { length: 238, start: 1350 }], course: 1, courseSetStatus: [], distance: 2e3, distanceType: 3, finishTimeMax: 123e4, finishTimeMin: 1171e3, laneMax: 14400, raceTrackId: 10007, slopes: [{ length: 50, slope: 2e4, start: 0 }, { length: 775, slope: -1e4, start: 900 }, { length: 100, slope: 2e4, start: 1675 }], straights: [{ end: 300, frontType: 1, start: 0 }, { end: 1100, frontType: 2, start: 700 }, { end: 2e3, frontType: 1, start: 1588 }], surface: 1, turn: 2 }, "10705": { corners: [{ length: 200, start: 500 }, { length: 200, start: 700 }, { length: 250, start: 1300 }, { length: 238, start: 1550 }], course: 1, courseSetStatus: [2], distance: 2200, distanceType: 3, finishTimeMax: 135e4, finishTimeMin: 1302e3, laneMax: 14400, raceTrackId: 10007, slopes: [{ length: 150, slope: -1e4, start: 0 }, { length: 100, slope: 2e4, start: 150 }, { length: 775, slope: -1e4, start: 1100 }, { length: 100, slope: 2e4, start: 1875 }], straights: [{ end: 500, frontType: 1, start: 0 }, { end: 1300, frontType: 2, start: 900 }, { end: 2200, frontType: 1, start: 1788 }], surface: 1, turn: 2 }, "10706": { corners: [{ length: 200, start: 400 }, { length: 190, start: 600 }], course: 1, courseSetStatus: [], distance: 1200, distanceType: 1, finishTimeMax: 77e4, finishTimeMin: 69e4, laneMax: 13e3, raceTrackId: 10007, slopes: [], straights: [{ end: 400, frontType: 2, start: 0 }, { end: 1200, frontType: 1, start: 790 }], surface: 2, turn: 2 }, "10707": { corners: [{ length: 200, start: 600 }, { length: 190, start: 800 }], course: 1, courseSetStatus: [], distance: 1400, distanceType: 1, finishTimeMax: 94e4, finishTimeMin: 808e3, laneMax: 13e3, raceTrackId: 10007, slopes: [{ length: 600, slope: -15e3, start: 425 }, { length: 150, slope: 15e3, start: 1025 }], straights: [{ end: 600, frontType: 2, start: 0 }, { end: 1400, frontType: 1, start: 990 }], surface: 2, turn: 2 }, "10708": { corners: [{ length: 165, start: 270 }, { length: 165, start: 435 }, { length: 200, start: 1e3 }, { length: 190, start: 1200 }], course: 1, courseSetStatus: [2], distance: 1800, distanceType: 2, finishTimeMax: 118e4, finishTimeMin: 1081e3, laneMax: 13e3, raceTrackId: 10007, slopes: [{ length: 50, slope: 15e3, start: 0 }, { length: 600, slope: -15e3, start: 825 }, { length: 150, slope: 15e3, start: 1425 }], straights: [{ end: 270, frontType: 1, start: 0 }, { end: 1e3, frontType: 2, start: 600 }, { end: 1800, frontType: 1, start: 1390 }], surface: 2, turn: 2 }, "10709": { corners: [{ length: 165, start: 370 }, { length: 165, start: 535 }, { length: 200, start: 1100 }, { length: 190, start: 1300 }], course: 1, courseSetStatus: [], distance: 1900, distanceType: 3, finishTimeMax: 123e4, finishTimeMin: 1142e3, laneMax: 13e3, raceTrackId: 10007, slopes: [], straights: [{ end: 370, frontType: 1, start: 0 }, { end: 1100, frontType: 2, start: 700 }, { end: 1900, frontType: 1, start: 1490 }], surface: 2, turn: 2 }, "10801": { corners: [{ length: 275, start: 320 }, { length: 277, start: 595 }], course: 2, courseSetStatus: [], distance: 1200, distanceType: 1, finishTimeMax: 71e4, finishTimeMin: 675e3, laneMax: 14100, raceTrackId: 10008, slopes: [{ length: 175, slope: 15e3, start: 120 }, { length: 150, slope: -15e3, start: 420 }], straights: [{ end: 320, frontType: 2, start: 0 }, { end: 1200, frontType: 1, start: 872 }], surface: 1, turn: 1 }, "10802": { corners: [{ length: 275, start: 520 }, { length: 277, start: 795 }], course: 2, courseSetStatus: [], distance: 1400, distanceType: 1, finishTimeMax: 84e4, finishTimeMin: 8e5, laneMax: 14100, raceTrackId: 10008, slopes: [{ length: 175, slope: 15e3, start: 320 }, { length: 150, slope: -15e3, start: 620 }], straights: [{ end: 520, frontType: 2, start: 0 }, { end: 1400, frontType: 1, start: 1072 }], surface: 1, turn: 1 }, "10803": { corners: [{ length: 250, start: 500 }, { length: 247, start: 750 }], course: 3, courseSetStatus: [], distance: 1400, distanceType: 1, finishTimeMax: 84e4, finishTimeMin: 8e5, laneMax: 14100, raceTrackId: 10008, slopes: [{ length: 100, slope: 2e4, start: 250 }, { length: 225, slope: 1e4, start: 350 }, { length: 150, slope: -2e4, start: 575 }], straights: [{ end: 500, frontType: 2, start: 0 }, { end: 1400, frontType: 1, start: 997 }], surface: 1, turn: 1 }, "10804": { corners: [{ length: 275, start: 720 }, { length: 277, start: 995 }], course: 2, courseSetStatus: [1], distance: 1600, distanceType: 2, finishTimeMax: 95e4, finishTimeMin: 908e3, laneMax: 14100, raceTrackId: 10008, slopes: [{ length: 175, slope: 15e3, start: 520 }, { length: 150, slope: -15e3, start: 820 }], straights: [{ end: 720, frontType: 2, start: 200 }, { end: 1600, frontType: 1, start: 1272 }], surface: 1, turn: 1 }, "10805": { corners: [{ length: 250, start: 700 }, { length: 247, start: 950 }], course: 3, courseSetStatus: [1], distance: 1600, distanceType: 2, finishTimeMax: 95e4, finishTimeMin: 908e3, laneMax: 14100, raceTrackId: 10008, slopes: [{ length: 100, slope: 2e4, start: 450 }, { length: 225, slope: 1e4, start: 550 }, { length: 150, slope: -2e4, start: 775 }], straights: [{ end: 700, frontType: 2, start: 200 }, { end: 1600, frontType: 1, start: 1197 }], surface: 1, turn: 1 }, "10806": { corners: [{ length: 250, start: 900 }, { length: 247, start: 1150 }], course: 3, courseSetStatus: [], distance: 1800, distanceType: 2, finishTimeMax: 11e5, finishTimeMin: 1044e3, laneMax: 14100, raceTrackId: 10008, slopes: [{ length: 100, slope: 2e4, start: 650 }, { length: 225, slope: 1e4, start: 750 }, { length: 150, slope: -2e4, start: 975 }], straights: [{ end: 900, frontType: 2, start: 400 }, { end: 1800, frontType: 1, start: 1397 }], surface: 1, turn: 1 }, "10807": { corners: [{ length: 185, start: 400 }, { length: 185, start: 585 }, { length: 275, start: 1120 }, { length: 277, start: 1395 }], course: 2, courseSetStatus: [3], distance: 2e3, distanceType: 3, finishTimeMax: 123e4, finishTimeMin: 1171e3, laneMax: 14100, raceTrackId: 10008, slopes: [{ length: 175, slope: 15e3, start: 970 }, { length: 150, slope: -15e3, start: 1270 }], straights: [{ end: 400, frontType: 1, start: 0 }, { end: 1120, frontType: 2, start: 770 }, { end: 2e3, frontType: 1, start: 1672 }], surface: 1, turn: 1 }, "10808": { corners: [{ length: 200, start: 400 }, { length: 200, start: 600 }, { length: 250, start: 1300 }, { length: 247, start: 1550 }], course: 3, courseSetStatus: [1], distance: 2200, distanceType: 3, finishTimeMax: 135e4, finishTimeMin: 1302e3, laneMax: 14100, raceTrackId: 10008, slopes: [{ length: 100, slope: 2e4, start: 1050 }, { length: 225, slope: 1e4, start: 1150 }, { length: 150, slope: -2e4, start: 1375 }], straights: [{ end: 400, frontType: 1, start: 0 }, { end: 1300, frontType: 2, start: 800 }, { end: 2200, frontType: 1, start: 1797 }], surface: 1, turn: 1 }, "10809": { corners: [{ length: 200, start: 600 }, { length: 200, start: 800 }, { length: 250, start: 1500 }, { length: 247, start: 1750 }], course: 3, courseSetStatus: [3], distance: 2400, distanceType: 3, finishTimeMax: 149e4, finishTimeMin: 1416e3, laneMax: 14100, raceTrackId: 10008, slopes: [{ length: 100, slope: 2e4, start: 1250 }, { length: 225, slope: 1e4, start: 1350 }, { length: 150, slope: -2e4, start: 1575 }], straights: [{ end: 600, frontType: 1, start: 0 }, { end: 1500, frontType: 2, start: 1e3 }, { end: 2400, frontType: 1, start: 1997 }], surface: 1, turn: 1 }, "10810": { corners: [{ length: 250, start: 261 }, { length: 250, start: 511 }, { length: 200, start: 1250 }, { length: 200, start: 1450 }, { length: 250, start: 2100 }, { length: 247, start: 2350 }], course: 3, courseSetStatus: [3, 5], distance: 3e3, distanceType: 4, finishTimeMax: 19e5, finishTimeMin: 1815e3, laneMax: 14100, raceTrackId: 10008, slopes: [{ length: 100, slope: 2e4, start: 11 }, { length: 225, slope: 1e4, start: 111 }, { length: 150, slope: -2e4, start: 336 }, { length: 100, slope: 2e4, start: 1850 }, { length: 225, slope: 1e4, start: 1950 }, { length: 150, slope: -2e4, start: 2175 }], straights: [{ end: 261, frontType: 2, start: 0 }, { end: 1250, frontType: 1, start: 761 }, { end: 2100, frontType: 2, start: 1650 }, { end: 3e3, frontType: 1, start: 2597 }], surface: 1, turn: 1 }, "10811": { corners: [{ length: 250, start: 458 }, { length: 250, start: 708 }, { length: 200, start: 1450 }, { length: 200, start: 1650 }, { length: 250, start: 2300 }, { length: 247, start: 2550 }], course: 3, courseSetStatus: [], distance: 3200, distanceType: 4, finishTimeMax: 204e4, finishTimeMin: 193e4, laneMax: 14100, raceTrackId: 10008, slopes: [{ length: 100, slope: 2e4, start: 208 }, { length: 225, slope: 1e4, start: 308 }, { length: 150, slope: -2e4, start: 533 }, { length: 100, slope: 2e4, start: 2050 }, { length: 225, slope: 1e4, start: 2150 }, { length: 150, slope: -2e4, start: 2375 }], straights: [{ end: 458, frontType: 2, start: 0 }, { end: 1450, frontType: 1, start: 958 }, { end: 2300, frontType: 2, start: 1850 }, { end: 3200, frontType: 1, start: 2797 }], surface: 1, turn: 1 }, "10812": { corners: [{ length: 225, start: 400 }, { length: 246, start: 625 }], course: 1, courseSetStatus: [], distance: 1200, distanceType: 1, finishTimeMax: 77e4, finishTimeMin: 69e4, laneMax: 13e3, raceTrackId: 10008, slopes: [{ length: 200, slope: 15e3, start: 175 }, { length: 200, slope: -15e3, start: 475 }], straights: [{ end: 400, frontType: 2, start: 0 }, { end: 1200, frontType: 1, start: 871 }], surface: 2, turn: 1 }, "10813": { corners: [{ length: 225, start: 600 }, { length: 246, start: 825 }], course: 1, courseSetStatus: [], distance: 1400, distanceType: 1, finishTimeMax: 94e4, finishTimeMin: 808e3, laneMax: 13e3, raceTrackId: 10008, slopes: [{ length: 200, slope: 15e3, start: 375 }, { length: 200, slope: -15e3, start: 675 }], straights: [{ end: 600, frontType: 2, start: 100 }, { end: 1400, frontType: 1, start: 1071 }], surface: 2, turn: 1 }, "10814": { corners: [{ length: 150, start: 300 }, { length: 150, start: 450 }, { length: 225, start: 1e3 }, { length: 246, start: 1225 }], course: 1, courseSetStatus: [], distance: 1800, distanceType: 2, finishTimeMax: 118e4, finishTimeMin: 1081e3, laneMax: 13e3, raceTrackId: 10008, slopes: [{ length: 200, slope: 15e3, start: 775 }, { length: 200, slope: -15e3, start: 1075 }], straights: [{ end: 300, frontType: 1, start: 0 }, { end: 1e3, frontType: 2, start: 600 }, { end: 1800, frontType: 1, start: 1471 }], surface: 2, turn: 1 }, "10815": { corners: [{ length: 150, start: 400 }, { length: 150, start: 550 }, { length: 225, start: 1100 }, { length: 246, start: 1325 }], course: 1, courseSetStatus: [], distance: 1900, distanceType: 3, finishTimeMax: 123e4, finishTimeMin: 1142e3, laneMax: 13e3, raceTrackId: 10008, slopes: [{ length: 200, slope: 15e3, start: 875 }, { length: 200, slope: -15e3, start: 1175 }], straights: [{ end: 400, frontType: 1, start: 0 }, { end: 1100, frontType: 2, start: 700 }, { end: 1900, frontType: 1, start: 1571 }], surface: 2, turn: 1 }, "10901": { corners: [{ length: 300, start: 250 }, { length: 294, start: 550 }], course: 2, courseSetStatus: [], distance: 1200, distanceType: 1, finishTimeMax: 71e4, finishTimeMin: 675e3, laneMax: 12500, raceTrackId: 10009, slopes: [{ length: 595, slope: -1e4, start: 400 }, { length: 125, slope: 2e4, start: 1e3 }], straights: [{ end: 250, frontType: 2, start: 0 }, { end: 1200, frontType: 1, start: 844 }], surface: 1, turn: 1 }, "10902": { corners: [{ length: 300, start: 450 }, { length: 294, start: 750 }], course: 2, courseSetStatus: [], distance: 1400, distanceType: 1, finishTimeMax: 84e4, finishTimeMin: 8e5, laneMax: 12500, raceTrackId: 10009, slopes: [{ length: 595, slope: -1e4, start: 600 }, { length: 125, slope: 2e4, start: 1200 }], straights: [{ end: 450, frontType: 2, start: 0 }, { end: 1400, frontType: 1, start: 1044 }], surface: 1, turn: 1 }, "10903": { corners: [{ length: 350, start: 450 }, { length: 327, start: 800 }], course: 3, courseSetStatus: [3], distance: 1600, distanceType: 2, finishTimeMax: 95e4, finishTimeMin: 908e3, laneMax: 12500, raceTrackId: 10009, slopes: [{ length: 400, slope: -1e4, start: 950 }, { length: 120, slope: 2e4, start: 1405 }], straights: [{ end: 450, frontType: 2, start: 0 }, { end: 1600, frontType: 1, start: 1127 }], surface: 1, turn: 1 }, "10904": { corners: [{ length: 350, start: 650 }, { length: 327, start: 1e3 }], course: 3, courseSetStatus: [3], distance: 1800, distanceType: 2, finishTimeMax: 11e5, finishTimeMin: 1044e3, laneMax: 12500, raceTrackId: 10009, slopes: [{ length: 400, slope: -1e4, start: 1150 }, { length: 120, slope: 2e4, start: 1605 }], straights: [{ end: 650, frontType: 2, start: 0 }, { end: 1800, frontType: 1, start: 1327 }], surface: 1, turn: 1 }, "10905": { corners: [{ length: 190, start: 320 }, { length: 190, start: 510 }, { length: 300, start: 1050 }, { length: 294, start: 1350 }], course: 2, courseSetStatus: [4], distance: 2e3, distanceType: 3, finishTimeMax: 123e4, finishTimeMin: 1171e3, laneMax: 12500, raceTrackId: 10009, slopes: [{ length: 90, slope: -1e4, start: 0 }, { length: 125, slope: 2e4, start: 95 }, { length: 595, slope: -1e4, start: 1200 }, { length: 125, slope: 2e4, start: 1800 }], straights: [{ end: 320, frontType: 1, start: 0 }, { end: 1050, frontType: 2, start: 700 }, { end: 2e3, frontType: 1, start: 1644 }], surface: 1, turn: 1 }, "10906": { corners: [{ length: 190, start: 520 }, { length: 190, start: 710 }, { length: 300, start: 1250 }, { length: 294, start: 1550 }], course: 2, courseSetStatus: [1], distance: 2200, distanceType: 3, finishTimeMax: 135e4, finishTimeMin: 1302e3, laneMax: 12500, raceTrackId: 10009, slopes: [{ length: 290, slope: -1e4, start: 0 }, { length: 125, slope: 2e4, start: 295 }, { length: 595, slope: -1e4, start: 1400 }, { length: 125, slope: 2e4, start: 2e3 }], straights: [{ end: 520, frontType: 1, start: 0 }, { end: 1250, frontType: 2, start: 900 }, { end: 2200, frontType: 1, start: 1844 }], surface: 1, turn: 1 }, "10907": { corners: [{ length: 190, start: 370 }, { length: 190, start: 560 }, { length: 350, start: 1250 }, { length: 327, start: 1600 }], course: 3, courseSetStatus: [3], distance: 2400, distanceType: 3, finishTimeMax: 149e4, finishTimeMin: 1416e3, laneMax: 12500, raceTrackId: 10009, slopes: [{ length: 115, slope: -1e4, start: 0 }, { length: 120, slope: 2e4, start: 170 }, { length: 400, slope: -1e4, start: 1750 }, { length: 120, slope: 2e4, start: 2205 }], straights: [{ end: 370, frontType: 1, start: 0 }, { end: 1250, frontType: 2, start: 750 }, { end: 2400, frontType: 1, start: 1927 }], surface: 1, turn: 1 }, "10908": { corners: [{ length: 190, start: 570 }, { length: 190, start: 760 }, { length: 350, start: 1450 }, { length: 327, start: 1800 }], course: 3, courseSetStatus: [], distance: 2600, distanceType: 4, finishTimeMax: 165e4, finishTimeMin: 1576e3, laneMax: 12500, raceTrackId: 10009, slopes: [{ length: 315, slope: -1e4, start: 0 }, { length: 120, slope: 2e4, start: 370 }, { length: 400, slope: -1e4, start: 1950 }, { length: 120, slope: 2e4, start: 2405 }], straights: [{ end: 570, frontType: 1, start: 0 }, { end: 1450, frontType: 2, start: 950 }, { end: 2600, frontType: 1, start: 2127 }], surface: 1, turn: 1 }, "10909": { corners: [{ length: 300, start: 345 }, { length: 294, start: 645 }, { length: 190, start: 1320 }, { length: 190, start: 1510 }, { length: 300, start: 2050 }, { length: 294, start: 2350 }], course: 2, courseSetStatus: [3], distance: 3e3, distanceType: 4, finishTimeMax: 19e5, finishTimeMin: 1815e3, laneMax: 12500, raceTrackId: 10009, slopes: [{ length: 595, slope: -1e4, start: 495 }, { length: 125, slope: 2e4, start: 1095 }, { length: 595, slope: -1e4, start: 2200 }, { length: 125, slope: 2e4, start: 2800 }], straights: [{ end: 345, frontType: 2, start: 0 }, { end: 1320, frontType: 1, start: 939 }, { end: 2050, frontType: 2, start: 1700 }, { end: 3e3, frontType: 1, start: 2644 }], surface: 1, turn: 1 }, "10910": { corners: [{ length: 250, start: 350 }, { length: 248, start: 600 }], course: 1, courseSetStatus: [], distance: 1200, distanceType: 1, finishTimeMax: 77e4, finishTimeMin: 69e4, laneMax: 12e3, raceTrackId: 10009, slopes: [{ length: 800, slope: -1e4, start: 200 }, { length: 125, slope: 15e3, start: 1e3 }], straights: [{ end: 350, frontType: 2, start: 0 }, { end: 1200, frontType: 1, start: 848 }], surface: 2, turn: 1 }, "10911": { corners: [{ length: 250, start: 550 }, { length: 248, start: 800 }], course: 1, courseSetStatus: [], distance: 1400, distanceType: 1, finishTimeMax: 94e4, finishTimeMin: 808e3, laneMax: 12e3, raceTrackId: 10009, slopes: [{ length: 800, slope: -1e4, start: 400 }, { length: 125, slope: 15e3, start: 1200 }], straights: [{ end: 550, frontType: 2, start: 0 }, { end: 1400, frontType: 1, start: 1048 }], surface: 2, turn: 1 }, "10912": { corners: [{ length: 150, start: 300 }, { length: 150, start: 450 }, { length: 250, start: 950 }, { length: 248, start: 1200 }], course: 1, courseSetStatus: [], distance: 1800, distanceType: 2, finishTimeMax: 118e4, finishTimeMin: 1081e3, laneMax: 12e3, raceTrackId: 10009, slopes: [{ length: 125, slope: 15e3, start: 75 }, { length: 800, slope: -1e4, start: 800 }, { length: 125, slope: 15e3, start: 1600 }], straights: [{ end: 300, frontType: 1, start: 0 }, { end: 950, frontType: 2, start: 600 }, { end: 1800, frontType: 1, start: 1448 }], surface: 2, turn: 1 }, "10913": { corners: [{ length: 150, start: 500 }, { length: 150, start: 650 }, { length: 250, start: 1150 }, { length: 248, start: 1400 }], course: 1, courseSetStatus: [2, 3], distance: 2e3, distanceType: 3, finishTimeMax: 129e4, finishTimeMin: 1219e3, laneMax: 12e3, raceTrackId: 10009, slopes: [{ length: 275, slope: -1e4, start: 0 }, { length: 125, slope: 15e3, start: 275 }, { length: 800, slope: -1e4, start: 1e3 }, { length: 125, slope: 15e3, start: 1800 }], straights: [{ end: 500, frontType: 1, start: 0 }, { end: 1150, frontType: 2, start: 800 }, { end: 2e3, frontType: 1, start: 1648 }], surface: 2, turn: 1 }, "10914": { corners: [{ length: 350, start: 370 }, { length: 350, start: 720 }, { length: 190, start: 1520 }, { length: 190, start: 1710 }, { length: 300, start: 2250 }, { length: 294, start: 2550 }], course: 4, courseSetStatus: [], distance: 3200, distanceType: 4, finishTimeMax: 204e4, finishTimeMin: 193e4, laneMax: 12500, raceTrackId: 10009, slopes: [{ length: 400, slope: -1e4, start: 870 }, { length: 120, slope: 2e4, start: 1325 }, { length: 595, slope: -1e4, start: 2400 }, { length: 125, slope: 2e4, start: 3e3 }], straights: [{ end: 370, frontType: 2, start: 0 }, { end: 1520, frontType: 1, start: 1070 }, { end: 2250, frontType: 2, start: 1900 }, { end: 3200, frontType: 1, start: 2844 }], surface: 1, turn: 1 }, "11001": { corners: [{ length: 205, start: 500 }, { length: 202, start: 705 }], course: 1, courseSetStatus: [1], distance: 1200, distanceType: 1, finishTimeMax: 71e4, finishTimeMin: 675e3, laneMax: 14500, raceTrackId: 10010, slopes: [{ length: 60, slope: -15e3, start: 0 }], straights: [{ end: 500, frontType: 2, start: 0 }, { end: 1200, frontType: 1, start: 907 }], surface: 1, turn: 1 }, "11002": { corners: [{ length: 205, start: 290 }, { length: 205, start: 495 }, { length: 205, start: 1100 }, { length: 202, start: 1305 }], course: 1, courseSetStatus: [], distance: 1800, distanceType: 2, finishTimeMax: 11e5, finishTimeMin: 1044e3, laneMax: 14500, raceTrackId: 10010, slopes: [{ length: 255, slope: 15e3, start: 280 }], straights: [{ end: 290, frontType: 1, start: 0 }, { end: 1100, frontType: 2, start: 700 }, { end: 1800, frontType: 1, start: 1507 }], surface: 1, turn: 1 }, "11003": { corners: [{ length: 205, start: 490 }, { length: 205, start: 695 }, { length: 205, start: 1300 }, { length: 202, start: 1505 }], course: 1, courseSetStatus: [3], distance: 2e3, distanceType: 3, finishTimeMax: 123e4, finishTimeMin: 1171e3, laneMax: 14500, raceTrackId: 10010, slopes: [{ length: 255, slope: 15e3, start: 480 }], straights: [{ end: 490, frontType: 1, start: 0 }, { end: 1300, frontType: 2, start: 900 }, { end: 2e3, frontType: 1, start: 1707 }], surface: 1, turn: 1 }, "11004": { corners: [{ length: 205, start: 309 }, { length: 205, start: 514 }, { length: 205, start: 1110 }, { length: 205, start: 1315 }, { length: 205, start: 1900 }, { length: 202, start: 2105 }], course: 1, courseSetStatus: [2], distance: 2600, distanceType: 4, finishTimeMax: 165e4, finishTimeMin: 1576e3, laneMax: 14500, raceTrackId: 10010, slopes: [{ length: 255, slope: 15e3, start: 1100 }], straights: [{ end: 309, frontType: 2, start: 0 }, { end: 1110, frontType: 1, start: 719 }, { end: 1900, frontType: 2, start: 1520 }, { end: 2600, frontType: 1, start: 2307 }], surface: 1, turn: 1 }, "11005": { corners: [{ length: 180, start: 360 }, { length: 169, start: 540 }], course: 1, courseSetStatus: [1], distance: 1e3, distanceType: 1, finishTimeMax: 63e4, finishTimeMin: 574e3, laneMax: 12e3, raceTrackId: 10010, slopes: [], straights: [{ end: 360, frontType: 2, start: 0 }, { end: 1e3, frontType: 1, start: 709 }], surface: 2, turn: 1 }, "11006": { corners: [{ length: 180, start: 340 }, { length: 180, start: 520 }, { length: 180, start: 1060 }, { length: 169, start: 1240 }], course: 1, courseSetStatus: [], distance: 1700, distanceType: 2, finishTimeMax: 113e4, finishTimeMin: 1014e3, laneMax: 12e3, raceTrackId: 10010, slopes: [{ length: 150, slope: 15e3, start: 370 }], straights: [{ end: 340, frontType: 1, start: 0 }, { end: 1060, frontType: 2, start: 700 }, { end: 1700, frontType: 1, start: 1409 }], surface: 2, turn: 1 }, "11007": { corners: [{ length: 180, start: 312 }, { length: 180, start: 492 }, { length: 180, start: 1040 }, { length: 180, start: 1220 }, { length: 180, start: 1760 }, { length: 169, start: 1940 }], course: 1, courseSetStatus: [], distance: 2400, distanceType: 3, finishTimeMax: 156e4, finishTimeMin: 1491e3, laneMax: 12e3, raceTrackId: 10010, slopes: [], straights: [{ end: 312, frontType: 2, start: 0 }, { end: 1040, frontType: 1, start: 672 }, { end: 1760, frontType: 2, start: 1400 }, { end: 2400, frontType: 1, start: 2109 }], surface: 2, turn: 1 }, "11101": { corners: [{ length: 150, start: 500 }, { length: 164, start: 650 }], course: 1, courseSetStatus: [4, 5], distance: 1200, distanceType: 1, finishTimeMax: 77e4, finishTimeMin: 69e4, laneMax: 12e3, raceTrackId: 10101, slopes: [], straights: [{ end: 500, frontType: 2, start: 0 }, { end: 1200, frontType: 1, start: 814 }], surface: 2, turn: 1 }, "11102": { corners: [{ length: 150, start: 300 }, { length: 150, start: 500 }, { length: 150, start: 1100 }, { length: 164, start: 1250 }], course: 1, courseSetStatus: [3], distance: 1800, distanceType: 2, finishTimeMax: 118e4, finishTimeMin: 1081e3, laneMax: 12e3, raceTrackId: 10101, slopes: [], straights: [{ end: 301, frontType: 1, start: 0 }, { end: 1100.23, frontType: 2, start: 600 }, { end: 1800, frontType: 1, start: 1414 }], surface: 2, turn: 1 }, "11103": { corners: [{ length: 150, start: 500 }, { length: 150, start: 650 }, { length: 150, start: 1300 }, { length: 164, start: 1450 }], course: 1, courseSetStatus: [2], distance: 2e3, distanceType: 3, finishTimeMax: 129e4, finishTimeMin: 1219e3, laneMax: 12e3, raceTrackId: 10101, slopes: [], straights: [{ end: 500, frontType: 1, start: 0 }, { end: 1300, frontType: 2, start: 800 }, { end: 2e3, frontType: 1, start: 1614 }], surface: 2, turn: 1 }, "11203": { corners: [{ length: 417, start: 1e3 }, { length: 200, start: 1417 }], course: 1, courseSetStatus: [2, 3], distance: 2400, distanceType: 3, finishTimeMax: 165e4, finishTimeMin: 145e4, laneMax: 12e3, raceTrackId: 10201, slopes: [{ length: 600, slope: 2e4, start: 400 }, { length: 383, slope: -2e4, start: 1017 }, { length: 217, slope: -15e3, start: 1400 }], straights: [{ end: 1e3, frontType: 2, start: 0 }, { end: 1866, frontType: 3, start: 1617 }, { end: 2400, frontType: 1, start: 1867 }], surface: 1, turn: 1 }, "11301": { corners: [{ length: 100, start: 300 }, { length: 100, start: 400 }, { length: 100, start: 900 }, { length: 100, start: 1e3 }], course: 1, courseSetStatus: [5], distance: 1400, distanceType: 1, finishTimeMax: 94e4, finishTimeMin: 87e4, laneMax: 13500, raceTrackId: 10103, slopes: [], straights: [{ end: 300, frontType: 1, start: 0 }, { end: 900, frontType: 2, start: 500 }, { end: 1400, frontType: 1, start: 1100 }], surface: 2, turn: 2 }, "11302": { corners: [{ length: 100, start: 500 }, { length: 100, start: 600 }, { length: 100, start: 1100 }, { length: 100, start: 1200 }], course: 1, courseSetStatus: [5], distance: 1600, distanceType: 2, finishTimeMax: 108e4, finishTimeMin: 98e4, laneMax: 13500, raceTrackId: 10103, slopes: [], straights: [{ end: 500, frontType: 1, start: 100 }, { end: 1100, frontType: 2, start: 700 }, { end: 1600, frontType: 1, start: 1300 }], surface: 2, turn: 2 }, "11303": { corners: [{ length: 100, start: 400 }, { length: 100, start: 500 }, { length: 100, start: 1e3 }, { length: 100, start: 1100 }, { length: 100, start: 1600 }, { length: 100, start: 1700 }], course: 1, courseSetStatus: [2, 5], distance: 2100, distanceType: 3, finishTimeMax: 14e5, finishTimeMin: 131e4, laneMax: 13500, raceTrackId: 10103, slopes: [], straights: [{ end: 400, frontType: 2, start: 0 }, { end: 1e3, frontType: 1, start: 600 }, { end: 1600, frontType: 2, start: 1200 }, { end: 2100, frontType: 1, start: 1800 }], surface: 2, turn: 2 }, "11401": { corners: [{ length: 170, start: 370 }, { length: 152, start: 540 }], course: 1, courseSetStatus: [1], distance: 1e3, distanceType: 1, finishTimeMax: 63e4, finishTimeMin: 58e4, laneMax: 13500, raceTrackId: 10104, slopes: [], straights: [{ end: 370, frontType: 2, start: 0 }, { end: 1e3, frontType: 1, start: 692 }], surface: 2, turn: 2 }, "11402": { corners: [{ length: 180, start: 260 }, { length: 160, start: 440 }, { length: 170, start: 970 }, { length: 152, start: 1140 }], course: 1, courseSetStatus: [], distance: 1600, distanceType: 2, finishTimeMax: 108e4, finishTimeMin: 96e4, laneMax: 13500, raceTrackId: 10104, slopes: [], straights: [{ end: 260, frontType: 1, start: 0 }, { end: 970, frontType: 2, start: 600 }, { end: 1600, frontType: 1, start: 1292 }], surface: 2, turn: 2 }, "11403": { corners: [{ length: 180, start: 460 }, { length: 160, start: 640 }, { length: 170, start: 1170 }, { length: 152, start: 1340 }], course: 1, courseSetStatus: [], distance: 1800, distanceType: 2, finishTimeMax: 118e4, finishTimeMin: 108e4, laneMax: 13500, raceTrackId: 10104, slopes: [], straights: [{ end: 460, frontType: 1, start: 90 }, { end: 1170, frontType: 2, start: 800 }, { end: 1800, frontType: 1, start: 1492 }], surface: 2, turn: 2 }, "11404": { corners: [{ length: 170, start: 370 }, { length: 150, start: 540 }, { length: 180, start: 1060 }, { length: 160, start: 1240 }, { length: 170, start: 1770 }, { length: 152, start: 1940 }], course: 1, courseSetStatus: [2], distance: 2400, distanceType: 3, finishTimeMax: 156e4, finishTimeMin: 15e5, laneMax: 13500, raceTrackId: 10104, slopes: [], straights: [{ end: 370, frontType: 2, start: 0 }, { end: 1060, frontType: 1, start: 690 }, { end: 1770, frontType: 2, start: 1400 }, { end: 2400, frontType: 1, start: 2092 }], surface: 2, turn: 2 }, "11501": { corners: [{ length: 200, start: 500 }, { length: 200, start: 700 }], course: 1, courseSetStatus: [2], distance: 1200, distanceType: 1, finishTimeMax: 77e4, finishTimeMin: 69e4, laneMax: 13500, raceTrackId: 10105, slopes: [{ length: 375, slope: 1e4, start: 100 }, { length: 450, slope: -15e3, start: 475 }, { length: 175, slope: 1e4, start: 975 }], straights: [{ end: 500, frontType: 2, start: 100 }, { end: 1200, frontType: 1, start: 900 }], surface: 2, turn: 2 }, "11502": { corners: [{ length: 200, start: 900 }, { length: 200, start: 1100 }], course: 1, courseSetStatus: [2, 5], distance: 1600, distanceType: 2, finishTimeMax: 108e4, finishTimeMin: 93e4, laneMax: 13500, raceTrackId: 10105, slopes: [{ length: 375, slope: 1e4, start: 500 }, { length: 450, slope: -15e3, start: 875 }, { length: 175, slope: 1e4, start: 1375 }], straights: [{ end: 900, frontType: 2, start: 500 }, { end: 1600, frontType: 1, start: 1300 }], surface: 2, turn: 2 }, "11503": { corners: [{ length: 200, start: 300 }, { length: 200, start: 500 }, { length: 200, start: 1100 }, { length: 200, start: 1300 }], course: 1, courseSetStatus: [2, 5], distance: 1800, distanceType: 2, finishTimeMax: 118e4, finishTimeMin: 11e5, laneMax: 13500, raceTrackId: 10105, slopes: [{ length: 150, slope: 1e4, start: 0 }, { length: 450, slope: -15e3, start: 700 }, { length: 175, slope: 1e4, start: 1575 }], straights: [{ end: 300, frontType: 1, start: 0 }, { end: 1100, frontType: 2, start: 700 }, { end: 1800, frontType: 1, start: 1500 }], surface: 2, turn: 2 }, "11504": { corners: [{ length: 200, start: 500 }, { length: 200, start: 700 }, { length: 200, start: 1300 }, { length: 200, start: 1500 }], course: 1, courseSetStatus: [2], distance: 2e3, distanceType: 3, finishTimeMax: 129e4, finishTimeMin: 121e4, laneMax: 13500, raceTrackId: 10105, slopes: [{ length: 175, slope: 1e4, start: 175 }, { length: 375, slope: 1e4, start: 900 }, { length: 450, slope: -15e3, start: 1275 }, { length: 175, slope: 1e4, start: 1775 }], straights: [{ end: 500, frontType: 1, start: 100 }, { end: 1300, frontType: 2, start: 900 }, { end: 2e3, frontType: 1, start: 1700 }], surface: 2, turn: 2 }, "11605": { corners: [{ length: 150, start: 700 }, { length: 150, start: 850 }, { length: 150, start: 1400 }, { length: 150, start: 1550 }], course: 1, courseSetStatus: [], distance: 2e3, distanceType: 3, finishTimeMax: 1232e3, finishTimeMin: 1172e3, laneMax: 12e3, raceTrackId: 10202, slopes: [{ length: 150, slope: -2e4, start: 0 }], straights: [{ end: 700, frontType: 1, start: 300 }, { end: 1400, frontType: 2, start: 1e3 }, { end: 2e3, frontType: 1, start: 1700 }], surface: 1, turn: 2 }, "11612": { corners: [{ length: 200, start: 500 }, { length: 200, start: 700 }, { length: 200, start: 1300 }, { length: 200, start: 1500 }], course: 1, courseSetStatus: [2], distance: 2e3, distanceType: 3, finishTimeMax: 129e4, finishTimeMin: 121e4, laneMax: 135e3, raceTrackId: 10202, slopes: [{ length: 175, slope: 1e4, start: 175 }, { length: 375, slope: 1e4, start: 900 }, { length: 450, slope: -15e3, start: 1275 }, { length: 175, slope: 1e4, start: 1775 }], straights: [{ end: 500, frontType: 1, start: 100 }, { end: 1300, frontType: 2, start: 900 }, { end: 2e3, frontType: 1, start: 1700 }], surface: 1, turn: 2 } };

  // ../../skilltool/CourseData.ts
  var assert = __require("assert").strict;
  var Surface = /* @__PURE__ */ ((Surface2) => {
    Surface2[Surface2["Turf"] = 1] = "Turf";
    Surface2[Surface2["Dirt"] = 2] = "Dirt";
    return Surface2;
  })(Surface || {});
  var DistanceType = /* @__PURE__ */ ((DistanceType3) => {
    DistanceType3[DistanceType3["Short"] = 1] = "Short";
    DistanceType3[DistanceType3["Mile"] = 2] = "Mile";
    DistanceType3[DistanceType3["Mid"] = 3] = "Mid";
    DistanceType3[DistanceType3["Long"] = 4] = "Long";
    return DistanceType3;
  })(DistanceType || {});
  var Orientation = /* @__PURE__ */ ((Orientation3) => {
    Orientation3[Orientation3["Clockwise"] = 1] = "Clockwise";
    Orientation3[Orientation3["Counterclockwise"] = 2] = "Counterclockwise";
    Orientation3[Orientation3["UnusedOrientation"] = 3] = "UnusedOrientation";
    Orientation3[Orientation3["NoTurns"] = 4] = "NoTurns";
    return Orientation3;
  })(Orientation || {});
  var CourseHelpers;
  ((CourseHelpers2) => {
    function assertIsPhase(phase) {
      assert(phase == 0 || phase == 1 || phase == 2 || phase == 3);
    }
    CourseHelpers2.assertIsPhase = assertIsPhase;
    function assertIsSurface(surface) {
      assert(Surface.hasOwnProperty(surface));
    }
    CourseHelpers2.assertIsSurface = assertIsSurface;
    function assertIsDistanceType(distanceType) {
      assert(DistanceType.hasOwnProperty(distanceType));
    }
    CourseHelpers2.assertIsDistanceType = assertIsDistanceType;
    function assertIsOrientation(orientation) {
      assert(Orientation.hasOwnProperty(orientation));
    }
    CourseHelpers2.assertIsOrientation = assertIsOrientation;
    function isSortedByStart(arr) {
      const init2 = [true, -1];
      function isSorted2(a4, b3) {
        return [a4[0] && b3.start > a4[1], b3.start];
      }
      return arr.reduce(isSorted2, init2)[0];
    }
    CourseHelpers2.isSortedByStart = isSortedByStart;
    function phaseStart(distance, phase) {
      switch (phase) {
        case 0:
          return 0;
        case 1:
          return distance * 1 / 6;
        case 2:
          return distance * 2 / 3;
        case 3:
          return distance * 5 / 6;
      }
    }
    CourseHelpers2.phaseStart = phaseStart;
    function phaseEnd(distance, phase) {
      switch (phase) {
        case 0:
          return distance * 1 / 6;
        case 1:
          return distance * 2 / 3;
        case 2:
          return distance * 5 / 6;
        case 3:
          return distance;
      }
    }
    CourseHelpers2.phaseEnd = phaseEnd;
    function courseSpeedModifier(course, stats) {
      const statvalues = [0, stats.speed, stats.stamina, stats.power, stats.guts, stats.wisdom].map((x3) => Math.min(x3, 901));
      return 1 + course.courseSetStatus.map(
        (stat) => (1 + Math.floor(statvalues[stat] / 300.01)) * 0.05
      ).reduce((a4, b3) => a4 + b3, 0) / Math.max(course.courseSetStatus.length, 1);
    }
    CourseHelpers2.courseSpeedModifier = courseSpeedModifier;
    function getCourse(courseId) {
      const course = course_data_default[courseId];
      if (!isSortedByStart(course.slopes))
        course.slopes.sort((a4, b3) => a4.start - b3.start);
      Object.keys(course).forEach((k3) => Object.freeze(course[k3]));
      return Object.freeze(course);
    }
    CourseHelpers2.getCourse = getCourse;
  })(CourseHelpers || (CourseHelpers = {}));

  // ../../skilltool/HorseTypes.ts
  var assert2 = __require("assert").strict;
  var Strategy = /* @__PURE__ */ ((Strategy2) => {
    Strategy2[Strategy2["Nige"] = 1] = "Nige";
    Strategy2[Strategy2["Senkou"] = 2] = "Senkou";
    Strategy2[Strategy2["Sasi"] = 3] = "Sasi";
    Strategy2[Strategy2["Oikomi"] = 4] = "Oikomi";
    Strategy2[Strategy2["Oonige"] = 5] = "Oonige";
    return Strategy2;
  })(Strategy || {});
  var StrategyHelpers;
  ((StrategyHelpers2) => {
    function assertIsStrategy(strategy) {
      assert2(Strategy.hasOwnProperty(strategy));
    }
    StrategyHelpers2.assertIsStrategy = assertIsStrategy;
    function strategyMatches(s1, s22) {
      return s1 == s22 || s1 == 1 /* Nige */ && s22 == 5 /* Oonige */ || s1 == 5 /* Oonige */ && s22 == 1 /* Nige */;
    }
    StrategyHelpers2.strategyMatches = strategyMatches;
  })(StrategyHelpers || (StrategyHelpers = {}));

  // ../../skilltool/Region.ts
  var Region = class _Region {
    constructor(start2, end) {
      this.start = start2;
      this.end = end;
    }
    intersect(other) {
      const start2 = Math.max(this.start, other.start);
      const end = Math.min(this.end, other.end);
      if (end <= start2) {
        return new _Region(-1, -1);
      } else {
        return new _Region(start2, end);
      }
    }
    fullyContains(other) {
      return this.start <= other.start && this.end >= other.end;
    }
  };
  var RegionList = class _RegionList extends Array {
    rmap(f3) {
      const out = new _RegionList();
      this.forEach((r3) => {
        const newr = f3(r3);
        if (Array.isArray(newr)) {
          newr.forEach((nr) => {
            if (nr.start > -1) {
              out.push(nr);
            }
          });
        } else if (newr.start > -1) {
          out.push(newr);
        }
      });
      return out;
    }
    union(other) {
      const u3 = [];
      const r3 = new _RegionList();
      u3.push.apply(u3, this);
      u3.push.apply(u3, other);
      if (u3.length == 0) {
        return r3;
      }
      u3.sort((a4, b3) => a4.start - b3.start);
      r3.push(u3.reduce((a4, b3) => {
        if (a4.fullyContains(b3)) {
          return a4;
        } else if (a4.start <= b3.start && b3.start < a4.end) {
          return new Region(a4.start, b3.end);
        } else if (a4.start < b3.end && b3.end <= a4.end) {
          return new Region(b3.start, a4.end);
        } else {
          r3.push(a4);
          return b3;
        }
      }));
      return r3;
    }
  };

  // ../../skilltool/Random.ts
  var Rule30CARng = class {
    constructor(seedLo, seedHi = 0) {
      // for very slightly better statistical properties
      //
      //     int32() {
      //         let k = 0;
      //         for (let i = 0; i < 32; ++i) {
      //             k = (k << 1) | (this.lo & 1);
      //             this.step();
      //         }
      //         return k >>> 0;
      //     }
      //
      // (obviously, would also have to also change random() to use int32())
      // this is about 3× slower
      this.int32 = this.int32_first;
      this.hi = seedHi >>> 0;
      this.lo = seedLo >>> 0;
    }
    step() {
      let rot = this.hi >>> 31;
      const rolhi = this.hi << 1 | this.lo >>> 31;
      const rollo = this.lo << 1 | rot;
      rot = this.hi << 31;
      const rorhi = this.hi >>> 1 | this.lo << 31;
      const rorlo = this.lo >>> 1 | rot;
      this.hi = rorhi ^ (this.hi | rolhi);
      this.lo = rorlo ^ (this.lo | rollo);
    }
    // NB. when sampling multiple bits it is MUCH BETTER to generate two integers at once like this
    // generating just `x` fails a PractRand FPF test at 4mb while using both is good until Node runs out of memory (“suspicious” DC6
    // result at 16mb)
    // why? i have no idea. it's convenient for the floats, at least. but you'd think it would be worse since the output should be more
    // correlated this way. who knows.
    // incidentally, there's a huge amount of design space here to explore which i have barely scratched the surface of. what bits to
    // sample, whether to sample both halves (hi and lo) of the state or just one, etc.
    // the current implementation has been arrived at experimentally using PractRand but is by no means the optimal design
    // oddly enough trying to make use of both hi and lo tends to make the results significantly worse, but it doesn't seem to matter much
    // which one is used. my initial thought was to use only lo since the right half of rule 30 is well-known to be more chaotic than the
    // left half. however hi does slightly better in practice, with no anomalies until 16mb. i suppose since it's circular the usual
    // left/right separation of rule 30 doesn't really apply?
    // ideally, it would be nice to get down to something that has good enough randomness but generates 8 bits per CA step instead of 4
    pair() {
      let x3 = 0 >>> 0, y3 = 0 >>> 0;
      for (let i4 = 0; i4 < 16; ++i4) {
        x3 = x3 << 2 | (this.hi & 65536) >>> 15 | this.hi & 1;
        y3 = y3 << 2 | (this.hi & 16777216) >>> 23 | (this.hi & 256) >>> 8;
        this.step();
      }
      return [x3, y3];
    }
    int32_first() {
      let [x3, y3] = this.pair();
      this.next = y3;
      this.int32 = this.int32_second;
      return x3;
    }
    int32_second() {
      this.int32 = this.int32_first;
      return this.next;
    }
    random() {
      const MASK_HI = 67108863 >>> 0;
      const MASK_LO = 134217727 >>> 0;
      const EXP = 134217728;
      const MANT = 9007199254740992;
      const [hi, lo] = this.pair();
      return ((hi & MASK_HI) * EXP + (lo & MASK_LO)) / MANT;
    }
    uniform(upper) {
      const mask = -1 >>> Math.clz32(upper - 1 | 1);
      let n3 = 0;
      do {
        n3 = this.int32() & mask;
      } while (n3 >= upper);
      return n3;
    }
  };

  // ../../skilltool/ActivationSamplePolicy.ts
  var ImmediatePolicy = Object.freeze({
    sample(regions, _0, _1) {
      return regions.slice(0, 1);
    },
    reconcile(other) {
      return other.reconcileImmediate(this);
    },
    reconcileImmediate(other) {
      return other;
    },
    reconcileDistributionRandom(other) {
      return other;
    },
    reconcileRandom(other) {
      return other;
    },
    reconcileStraightRandom(other) {
      return other;
    },
    reconcileAllCornerRandom(other) {
      return other;
    }
  });
  var RandomPolicy = Object.freeze({
    sample(regions, nsamples, rng) {
      if (regions.length == 0) {
        return [];
      }
      let acc = 0;
      const weights = regions.map((r3) => acc += r3.end - r3.start);
      const samples = [];
      for (let i4 = 0; i4 < nsamples; ++i4) {
        const threshold = rng.uniform(acc);
        const region = regions.find((_2, i5) => weights[i5] > threshold);
        samples.push(region.start + rng.uniform(region.end - region.start - 10));
      }
      return samples.map((pos) => new Region(pos, pos + 10));
    },
    reconcile(other) {
      return other.reconcileRandom(this);
    },
    reconcileImmediate(_2) {
      return this;
    },
    reconcileDistributionRandom(other) {
      return this;
    },
    reconcileRandom(other) {
      return other;
    },
    reconcileStraightRandom(other) {
      return other;
    },
    reconcileAllCornerRandom(other) {
      return other;
    }
  });
  var DistributionRandomPolicy = class {
    sample(regions, nsamples, rng) {
      if (regions.length == 0) {
        return [];
      }
      const range = regions.reduce((acc, r3) => acc + r3.end - r3.start, 0);
      const rs = regions.slice().sort((a4, b3) => a4.start - b3.start);
      const randoms = this.distribution(range, nsamples, rng);
      const samples = [];
      for (let i4 = 0; i4 < nsamples; ++i4) {
        let pos = randoms[i4];
        for (let j3 = 0; ; j3++) {
          pos += rs[j3].start;
          if (pos > rs[j3].end) {
            pos -= rs[j3].end;
          } else {
            samples.push(new Region(pos, rs[j3].end));
            break;
          }
        }
      }
      return samples;
    }
    reconcile(other) {
      return other.reconcileDistributionRandom(this);
    }
    reconcileImmediate(_2) {
      return this;
    }
    reconcileDistributionRandom(other) {
      return this;
    }
    // this is probably not exactly the right thing to do either, but the true random conditions do need to place a fixed trigger
    // statically ahead of time, uninfluenced by us. this means that the only alternatives are 1) this condition is coincidentally
    // fulfilled during the static random trigger or 2) the skill does not activate at all.
    // since the latter is not particularly interesting, it's safe to just ignore this sample policy and use only the true random one.
    reconcileRandom(other) {
      return other;
    }
    reconcileStraightRandom(other) {
      return other;
    }
    reconcileAllCornerRandom(other) {
      return other;
    }
  };
  var UniformRandomPolicy = class extends DistributionRandomPolicy {
    constructor() {
      super();
    }
    distribution(upper, nsamples, rng) {
      const nums = [];
      for (let i4 = 0; i4 < nsamples; ++i4) {
        nums.push(rng.uniform(upper));
      }
      return nums;
    }
  };
  var LogNormalRandomPolicy = class extends DistributionRandomPolicy {
    constructor(mu, sigma) {
      super();
      this.mu = mu;
      this.sigma = sigma;
    }
    distribution(upper, nsamples, rng) {
      let nums = [], min4 = Infinity, max5 = 0;
      const halfn = Math.ceil(nsamples / 2);
      for (let i4 = 0; i4 < halfn; ++i4) {
        let x3, y3, r22;
        do {
          x3 = rng.random() * 2 - 1;
          y3 = rng.random() * 2 - 1;
          r22 = x3 * x3 + y3 * y3;
        } while (r22 == 0 || r22 >= 1);
        const m3 = Math.sqrt(-2 * Math.log(r22) / r22) * this.sigma;
        const a4 = Math.exp(x3 * m3 + this.mu);
        const b3 = Math.exp(y3 * m3 + this.mu);
        min4 = Math.min(min4, a4, b3);
        max5 = Math.max(max5, a4, b3);
        nums.push(a4, b3);
      }
      const range = max5 - min4;
      return nums.map((n3) => Math.floor(upper * (n3 - min4) / range));
    }
  };
  var ErlangRandomPolicy = class extends DistributionRandomPolicy {
    constructor(k3, lambda) {
      super();
      this.k = k3;
      this.lambda = lambda;
    }
    distribution(upper, nsamples, rng) {
      const nums = [];
      let min4 = Infinity, max5 = 0;
      for (let i4 = 0; i4 < nsamples; ++i4) {
        let u3 = 1;
        for (let j3 = 0; j3 < this.k; ++j3) {
          u3 *= rng.random();
        }
        const n3 = -Math.log(u3) / this.lambda;
        min4 = Math.min(min4, n3);
        max5 = Math.max(max5, n3);
        nums.push(n3);
      }
      const range = nsamples == 1 ? 18 : max5 - min4;
      return nums.map((n3) => Math.floor(upper * (n3 - min4) / range));
    }
  };
  var StraightRandomPolicy = Object.freeze({
    sample(regions, nsamples, rng) {
      if (regions.length == 0) {
        return [];
      }
      const samples = [];
      for (let i4 = 0; i4 < nsamples; ++i4) {
        const r3 = regions[rng.uniform(regions.length)];
        samples.push(r3.start + rng.uniform(r3.end - r3.start - 10));
      }
      return samples.map((pos) => new Region(pos, pos + 10));
    },
    reconcile(other) {
      return other.reconcileStraightRandom(this);
    },
    reconcileImmediate(_2) {
      return this;
    },
    reconcileDistributionRandom(_2) {
      return this;
    },
    reconcileRandom(_2) {
      return this;
    },
    reconcileStraightRandom(other) {
      return other;
    },
    reconcileAllCornerRandom(other) {
      throw new Error("cannot reconcile StraightRandomPolicy with AllCornerRandomPolicy");
    }
  });
  var AllCornerRandomPolicy = Object.freeze({
    placeTriggers(regions, rng) {
      const triggers = [];
      const candidates = regions.slice();
      candidates.sort((a4, b3) => a4.start - b3.start);
      while (triggers.length < 4 && candidates.length > 0) {
        const ci = rng.uniform(candidates.length);
        const c3 = candidates[ci];
        const start2 = c3.start + rng.uniform(c3.end - c3.start - 10);
        if (start2 + 20 <= c3.end) {
          candidates.splice(ci, 1, new Region(start2 + 10, c3.end));
        } else {
          candidates.splice(ci, 1);
        }
        candidates.splice(0, ci);
        triggers.push(start2);
      }
      return new Region(triggers[0], triggers[0] + 10);
    },
    sample(regions, nsamples, rng) {
      const samples = [];
      for (let i4 = 0; i4 < nsamples; ++i4) {
        samples.push(this.placeTriggers(regions, rng));
      }
      return samples;
    },
    reconcile(other) {
      return other.reconcileAllCornerRandom(this);
    },
    reconcileImmediate(_2) {
      return this;
    },
    reconcileDistributionRandom(_2) {
      return this;
    },
    reconcileRandom(_2) {
      return this;
    },
    reconcileStraightRandom(_2) {
      throw new Error("cannot reconcile StraightRandomPolicy with AllCornerRandomPolicy");
    },
    reconcileAllCornerRandom(_2) {
      return this;
    }
  });

  // ../../skilltool/ActivationConditions.ts
  var assert3 = __require("assert").strict;
  function kTrue(_2) {
    return true;
  }
  function withDefaultCond(r3) {
    if (r3 instanceof RegionList) {
      return [r3, kTrue];
    }
    return r3;
  }
  var EqOperator = class {
    constructor(condition, argument) {
      this.condition = condition;
      this.argument = argument;
      this.samplePolicy = condition.samplePolicy;
    }
    apply(regions, course, horse, extra) {
      return withDefaultCond(this.condition.filterEq(regions, this.argument, course, horse, extra));
    }
  };
  var NeqOperator = class {
    constructor(condition, argument) {
      this.condition = condition;
      this.argument = argument;
      this.samplePolicy = condition.samplePolicy;
    }
    apply(regions, course, horse, extra) {
      return withDefaultCond(this.condition.filterNeq(regions, this.argument, course, horse, extra));
    }
  };
  var LtOperator = class {
    constructor(condition, argument) {
      this.condition = condition;
      this.argument = argument;
      this.samplePolicy = condition.samplePolicy;
    }
    apply(regions, course, horse, extra) {
      return withDefaultCond(this.condition.filterLt(regions, this.argument, course, horse, extra));
    }
  };
  var LteOperator = class {
    constructor(condition, argument) {
      this.condition = condition;
      this.argument = argument;
      this.samplePolicy = condition.samplePolicy;
    }
    apply(regions, course, horse, extra) {
      return withDefaultCond(this.condition.filterLte(regions, this.argument, course, horse, extra));
    }
  };
  var GtOperator = class {
    constructor(condition, argument) {
      this.condition = condition;
      this.argument = argument;
      this.samplePolicy = condition.samplePolicy;
    }
    apply(regions, course, horse, extra) {
      return withDefaultCond(this.condition.filterGt(regions, this.argument, course, horse, extra));
    }
  };
  var GteOperator = class {
    constructor(condition, argument) {
      this.condition = condition;
      this.argument = argument;
      this.samplePolicy = condition.samplePolicy;
    }
    apply(regions, course, horse, extra) {
      return withDefaultCond(this.condition.filterGte(regions, this.argument, course, horse, extra));
    }
  };
  var AndOperator = class {
    constructor(left2, right2) {
      this.left = left2;
      this.right = right2;
      this.samplePolicy = left2.samplePolicy.reconcile(right2.samplePolicy);
    }
    apply(regions, course, horse, extra) {
      const [leftval, leftcond] = this.left.apply(regions, course, horse, extra);
      const [rightval, rightcond] = this.right.apply(leftval, course, horse, extra);
      if (leftcond === kTrue && rightcond === kTrue) {
        return [rightval, kTrue];
      }
      return [rightval, (s3) => leftcond(s3) && rightcond(s3)];
    }
  };
  var OrOperator = class {
    constructor(left2, right2) {
      this.left = left2;
      this.right = right2;
      this.samplePolicy = left2.samplePolicy.reconcile(right2.samplePolicy);
    }
    apply(regions, course, horse, extra) {
      const [leftval, leftcond] = this.left.apply(regions, course, horse, extra);
      const [rightval, rightcond] = this.right.apply(regions, course, horse, extra);
      return [leftval.union(rightval), (s3) => leftcond(s3) || rightcond(s3)];
    }
  };
  function notSupported(_0, _1, _2, _3, extra) {
    assert3(false, "unsupported comparison");
    throw 0;
  }
  function noop2(regions, _1, _2, _3, extra) {
    return regions;
  }
  var noopAll = Object.freeze({
    filterEq: noop2,
    filterNeq: noop2,
    filterLt: noop2,
    filterLte: noop2,
    filterGt: noop2,
    filterGte: noop2
  });
  var noopImmediate = Object.freeze(Object.assign({ samplePolicy: ImmediatePolicy }, noopAll));
  var noopRandom = Object.freeze(Object.assign({ samplePolicy: RandomPolicy }, noopAll));
  var defaultImmediate = Object.freeze({
    samplePolicy: ImmediatePolicy,
    filterEq: notSupported,
    filterNeq: notSupported,
    filterLt: notSupported,
    filterLte: notSupported,
    filterGt: notSupported,
    filterGte: notSupported
  });
  function immediate(o4) {
    return Object.assign({}, defaultImmediate, o4);
  }
  var defaultRandom = Object.freeze({
    samplePolicy: RandomPolicy,
    filterEq: notSupported,
    filterNeq: notSupported,
    filterLt: notSupported,
    filterLte: notSupported,
    filterGt: notSupported,
    filterGte: notSupported
  });
  function random(o4) {
    return Object.assign({}, defaultRandom, o4);
  }
  function distributionRandomFactory(cls) {
    const cache = /* @__PURE__ */ Object.create(null);
    return function(...args) {
      const o4 = args.pop();
      const key = args.join(",");
      const policy = key in cache ? cache[key] : cache[key] = Object.freeze(new cls(...args));
      return Object.assign({
        samplePolicy: policy,
        filterEq: notSupported,
        filterNeq: notSupported,
        filterLt: notSupported,
        filterLte: notSupported,
        filterGt: notSupported,
        filterGte: notSupported
      }, o4);
    };
  }
  var logNormalRandom = distributionRandomFactory(LogNormalRandomPolicy);
  var erlangRandom = distributionRandomFactory(ErlangRandomPolicy);
  var uniformRandom = distributionRandomFactory(UniformRandomPolicy);
  function noopErlangRandom(k3, lambda) {
    return erlangRandom(k3, lambda, noopAll);
  }
  var noopUniformRandom = uniformRandom(noopAll);
  function valueFilter(getValue) {
    return immediate({
      filterEq(regions, value, course, horse, extra) {
        return getValue(course, horse, extra) == value ? regions : new RegionList();
      },
      filterNeq(regions, value, course, horse, extra) {
        return getValue(course, horse, extra) != value ? regions : new RegionList();
      },
      filterLt(regions, value, course, horse, extra) {
        return getValue(course, horse, extra) < value ? regions : new RegionList();
      },
      filterLte(regions, value, course, horse, extra) {
        return getValue(course, horse, extra) <= value ? regions : new RegionList();
      },
      filterGt(regions, value, course, horse, extra) {
        return getValue(course, horse, extra) > value ? regions : new RegionList();
      },
      filterGte(regions, value, course, horse, extra) {
        return getValue(course, horse, extra) >= value ? regions : new RegionList();
      }
    });
  }
  var Conditions = Object.freeze({
    accumulatetime: immediate({
      filterGte(regions, t3, _0, _1, extra) {
        return [regions, (s3) => s3.accumulatetime.t >= t3];
      }
    }),
    activate_count_all: immediate({
      filterLte(regions, n3, _0, _1, extra) {
        return [regions, (s3) => s3.activateCount.reduce((a4, b3) => a4 + b3) <= n3];
      },
      filterGte(regions, n3, _0, _1, extra) {
        return [regions, (s3) => s3.activateCount.reduce((a4, b3) => a4 + b3) >= n3];
      }
    }),
    activate_count_end_after: immediate({
      filterGte(regions, n3, _0, _1, extra) {
        return [regions, (s3) => s3.activateCount[2] >= n3];
      }
    }),
    activate_count_heal: immediate({
      filterGte(regions, n3, _0, _1, extra) {
        return [regions, (s3) => s3.activateCountHeal >= n3];
      }
    }),
    activate_count_middle: immediate({
      filterGte(regions, n3, _0, _1, extra) {
        return [regions, (s3) => s3.activateCount[1] >= n3];
      }
    }),
    activate_count_start: immediate({
      filterGte(regions, n3, _0, _1, extra) {
        return [regions, (s3) => s3.activateCount[0] >= n3];
      }
    }),
    all_corner_random: {
      samplePolicy: AllCornerRandomPolicy,
      filterEq(regions, one2, course, _2, extra) {
        assert3(one2 == 1, "must be all_corner_random==1");
        const corners = course.corners.map((c3) => new Region(c3.start, c3.start + c3.length));
        return regions.rmap((r3) => corners.map((c3) => r3.intersect(c3)));
      },
      filterNeq: notSupported,
      filterLt: notSupported,
      filterLte: notSupported,
      filterGt: notSupported,
      filterGte: notSupported
    },
    always: noopImmediate,
    // NB. since skill conditions are processed before any skill activations, stats here are base stats (i.e. greens are not included)
    base_power: valueFilter((_2, horse, extra) => horse.power),
    base_speed: valueFilter((_2, horse, extra) => horse.speed),
    base_stamina: valueFilter((_2, horse, extra) => horse.stamina),
    base_guts: valueFilter((_2, horse, extra) => horse.guts),
    base_wiz: valueFilter((_2, horse, extra) => horse.wisdom),
    bashin_diff_behind: noopErlangRandom(3, 2),
    bashin_diff_infront: noopErlangRandom(3, 2),
    behind_near_lane_time: noopErlangRandom(3, 2),
    // NB. at least in theory _set1 should have a slightly more early-biased distribution since it's technically easier to activate, but I don't
    // really think it makes much of a difference. Same with blocked_front vs blocked_front_continuetime I suppose.
    behind_near_lane_time_set1: noopErlangRandom(3, 2),
    blocked_all_continuetime: noopErlangRandom(3, 2),
    blocked_front: noopErlangRandom(3, 2),
    blocked_front_continuetime: noopErlangRandom(3, 2),
    blocked_side_continuetime: noopErlangRandom(3, 2),
    change_order_onetime: noopErlangRandom(3, 2),
    change_order_up_end_after: erlangRandom(3, 2, {
      filterGte(regions, _0, course, _1, extra) {
        const bounds = new Region(CourseHelpers.phaseStart(course.distance, 2), course.distance);
        return regions.rmap((r3) => r3.intersect(bounds));
      }
    }),
    change_order_up_finalcorner_after: erlangRandom(3, 2, {
      filterGte(regions, _0, course, _1, extra) {
        assert3(CourseHelpers.isSortedByStart(course.corners), "course corners must be sorted by start");
        if (course.corners.length == 0) {
          return new RegionList();
        }
        const finalCornerStart = course.corners[course.corners.length - 1].start;
        const bounds = new Region(finalCornerStart, course.distance);
        return regions.rmap((r3) => r3.intersect(bounds));
      }
    }),
    change_order_up_middle: erlangRandom(3, 2, {
      filterGte(regions, _0, course, _1, extra) {
        const bounds = new Region(CourseHelpers.phaseStart(course.distance, 1), CourseHelpers.phaseEnd(course.distance, 1));
        return regions.rmap((r3) => r3.intersect(bounds));
      }
    }),
    compete_fight_count: uniformRandom({
      filterGt(regions, _0, course, _1, extra) {
        assert3(CourseHelpers.isSortedByStart(course.straights), "course straights must be sorted by start");
        const lastStraight = course.straights[course.straights.length - 1];
        return regions.rmap((r3) => r3.intersect(lastStraight));
      }
    }),
    corner: immediate({
      filterEq(regions, cornerNum, course, _2, extra) {
        assert3(CourseHelpers.isSortedByStart(course.corners), "course corners must be sorted by start");
        if (cornerNum == 0) {
          let lastEnd = 0;
          const nonCorners = course.corners.map((c3) => {
            const r3 = new Region(lastEnd, c3.start);
            lastEnd = c3.start + c3.length;
            return r3;
          });
          if (lastEnd != course.distance) {
            nonCorners.push(new Region(lastEnd, course.distance));
          }
          return regions.rmap((r3) => nonCorners.map((s3) => r3.intersect(s3)));
        } else if (course.corners.length + cornerNum >= 5) {
          const corners = [];
          for (let cornerIdx = course.corners.length + cornerNum - 5; cornerIdx >= 0; cornerIdx -= 4) {
            const corner = course.corners[cornerIdx];
            corners.push(new Region(corner.start, corner.start + corner.length));
          }
          corners.reverse();
          return regions.rmap((r3) => corners.map((c3) => r3.intersect(c3)));
        } else {
          return new RegionList();
        }
      },
      filterNeq(regions, cornerNum, course, _2, extra) {
        assert3(cornerNum == 0, "only supports corner!=0");
        const corners = course.corners.map((c3) => new Region(c3.start, c3.start + c3.length));
        return regions.rmap((r3) => corners.map((c3) => r3.intersect(c3)));
      }
    }),
    corner_count: valueFilter((course, _2, extra) => course.corners.length),
    // FIXME this shouldn't actually be random, since in cases like corner_random==1@corner_random==2 it should sample
    // only from the first corner and not from the combined regions, so it needs its own sample policy
    // actually, that's slightly annoying to handle since corners come in back-to-back pairs, so their regions will
    // get merged by the union operation.
    // the real way to fix this is to finally allow placing multiple triggers, then each branch of an @ can simply
    // place its own trigger and the problem goes away.
    corner_random: random({
      filterEq(regions, cornerNum, course, _2, extra) {
        assert3(CourseHelpers.isSortedByStart(course.corners), "course corners must be sorted by start");
        if (course.corners.length + cornerNum >= 5) {
          const corner = course.corners[course.corners.length + cornerNum - 5];
          const cornerBounds = new Region(corner.start, corner.start + corner.length);
          return regions.rmap((r3) => r3.intersect(cornerBounds));
        } else {
          return new RegionList();
        }
      }
    }),
    course_distance: valueFilter((course, _2, extra) => course.distance),
    distance_diff_rate: noopImmediate,
    distance_diff_top: noopImmediate,
    distance_diff_top_float: noopImmediate,
    distance_rate: immediate({
      filterLte(regions, rate, course, _2, extra) {
        const bounds = new Region(0, course.distance * rate / 100);
        return regions.rmap((r3) => r3.intersect(bounds));
      },
      filterGte(regions, rate, course, _2, extra) {
        const bounds = new Region(course.distance * rate / 100, course.distance);
        return regions.rmap((r3) => r3.intersect(bounds));
      }
    }),
    distance_rate_after_random: random({
      filterEq(regions, rate, course, _2, extra) {
        const bounds = new Region(course.distance * rate / 100, course.distance);
        return regions.rmap((r3) => r3.intersect(bounds));
      }
    }),
    distance_type: immediate({
      filterEq(regions, distanceType, course, _2, extra) {
        CourseHelpers.assertIsDistanceType(distanceType);
        if (course.distanceType == distanceType) {
          return regions;
        } else {
          return new RegionList();
        }
      },
      filterNeq(regions, distanceType, course, _2, extra) {
        CourseHelpers.assertIsDistanceType(distanceType);
        if (course.distanceType != distanceType) {
          return regions;
        } else {
          return new RegionList();
        }
      }
    }),
    down_slope_random: random({
      filterEq(regions, one2, course, _2, extra) {
        assert3(one2 == 1, "must be down_slope_random==1");
        const slopes = course.slopes.filter((s3) => s3.slope < 0).map((s3) => new Region(s3.start, s3.start + s3.length));
        return regions.rmap((r3) => slopes.map((s3) => r3.intersect(s3)));
      }
    }),
    grade: valueFilter((_0, _1, extra) => extra.grade),
    ground_condition: valueFilter((_0, _1, extra) => extra.groundCondition),
    ground_type: valueFilter((course, _2, extra) => course.surface),
    // TODO in order to properly simulate skills that depend on hp_per this condition should pass a dynamic condition on to the
    // race solver. This is a bit more long-term since that would require simulating stamina, and therefore recoveries, and honestly
    // would be kind of a pain in general, and probably impossible to do accurately due to things like 位置取り争い that depend on other
    // umas, as well as random factors like downhill accel mode.
    // The only skill likely severely affected by this is Akebono's unique.
    hp_per: function() {
      const StrategyHpCoefficient = Object.freeze([0, 0.95, 0.89, 1, 0.995, 0.86]);
      function baseSpeed2(distance) {
        return 20 - (distance - 2e3) / 1e3;
      }
      return immediate({
        // for <= we do have to make some sort of guess as to when hp will drop below the threshold.
        // this is almost entirely for the skill 火事場のバ鹿力 for which the only conditions are distance_type==4&hp_per<=30,
        // so if we don't make this estimate it will activate out of the gate, which screws up the numbers a lot.
        filterLte(regions, hpPer, course, horse, extra) {
          const maxHp = 0.8 * StrategyHpCoefficient[horse.strategy] * horse.stamina + course.distance;
          const bounds = new Region(maxHp * (hpPer - 100) / 100 / -20 * baseSpeed2(course.distance), course.distance);
          return regions.rmap((r3) => r3.intersect(bounds));
        },
        filterGte(regions, _0, _1, _2, extra) {
          return regions;
        }
      });
    }(),
    infront_near_lane_time: noopErlangRandom(3, 2),
    //is_activate_other_skill_detail: noopImmediate,  // TODO FIXME
    is_basis_distance: immediate({
      filterEq(regions, flag, course, _2, extra) {
        assert3(flag == 0 || flag == 1, "must be is_basis_distance==0 or is_basis_distance==1");
        return Math.min(course.distance % 400, 1) != flag ? regions : new RegionList();
      }
    }),
    is_badstart: noopImmediate,
    is_behind_in: noopImmediate,
    is_dirtgrade: immediate({
      filterEq(regions, flag, course, _2, extra) {
        assert3(flag == 1, "must be is_dirtgrade==1");
        return [10101, 10103, 10104, 10105].indexOf(course.raceTrackId) > -1 ? regions : new RegionList();
      }
    }),
    is_finalcorner: immediate({
      filterEq(regions, flag, course, _2, extra) {
        assert3(flag == 0 || flag == 1, "must be is_finalcorner==0 or is_finalcorner==1");
        assert3(CourseHelpers.isSortedByStart(course.corners), "course corners must be sorted by start");
        if (course.corners.length == 0) {
          return new RegionList();
        }
        const finalCornerStart = course.corners[course.corners.length - 1].start;
        const bounds = flag ? new Region(finalCornerStart, course.distance) : new Region(0, finalCornerStart);
        return regions.rmap((r3) => r3.intersect(bounds));
      }
    }),
    is_finalcorner_laterhalf: immediate({
      filterEq(regions, one2, course, _2, extra) {
        assert3(one2 == 1, "must be is_finalcorner_laterhalf==1");
        assert3(CourseHelpers.isSortedByStart(course.corners), "course corners must be sorted by start");
        if (course.corners.length == 0) {
          return new RegionList();
        }
        const fc = course.corners[course.corners.length - 1];
        const bounds = new Region((fc.start + fc.start + fc.length) / 2, fc.start + fc.length);
        return regions.rmap((r3) => r3.intersect(bounds));
      }
    }),
    is_finalcorner_random: random({
      filterEq(regions, one2, course, _2, extra) {
        assert3(one2 == 1, "must be is_finalcorner_random==1");
        assert3(CourseHelpers.isSortedByStart(course.corners), "course corners must be sorted by start");
        if (course.corners.length == 0) {
          return new RegionList();
        }
        const fc = course.corners[course.corners.length - 1];
        const bounds = new Region(fc.start, fc.start + fc.length);
        return regions.rmap((r3) => r3.intersect(bounds));
      }
    }),
    is_lastspurt: immediate({
      filterEq(regions, one2, course, _2, extra) {
        assert3(one2 == 1, "must be is_lastspurt==1");
        const bounds = new Region(CourseHelpers.phaseStart(course.distance, 2), course.distance);
        return regions.rmap((r3) => r3.intersect(bounds));
      }
    }),
    is_last_straight: immediate({
      filterEq(regions, one2, course, _2, extra) {
        assert3(one2 == 1, "must be is_last_straight_onetime==1");
        assert3(CourseHelpers.isSortedByStart(course.straights), "course straights must be sorted by start");
        const lastStraight = course.straights[course.straights.length - 1];
        return regions.rmap((r3) => r3.intersect(lastStraight));
      }
    }),
    is_last_straight_onetime: immediate({
      filterEq(regions, one2, course, _2, extra) {
        assert3(one2 == 1, "must be is_last_straight_onetime==1");
        assert3(CourseHelpers.isSortedByStart(course.straights), "course straights must be sorted by start");
        const lastStraightStart = course.straights[course.straights.length - 1].start;
        const trigger = new Region(lastStraightStart, lastStraightStart + 10);
        return regions.rmap((r3) => r3.intersect(trigger));
      }
    }),
    is_move_lane: noopErlangRandom(5, 1),
    is_overtake: noopErlangRandom(1, 2),
    is_surrounded: noopErlangRandom(3, 2),
    lane_type: noopImmediate,
    lastspurt: noopImmediate,
    motivation: valueFilter((_0, _1, extra) => extra.mood + 3),
    // go from -2 to 2 to 1-5 scale
    near_count: noopErlangRandom(3, 2),
    order: noopImmediate,
    order_rate: noopImmediate,
    order_rate_in20_continue: noopImmediate,
    order_rate_in40_continue: noopImmediate,
    order_rate_in80_continue: noopImmediate,
    order_rate_out20_continue: noopImmediate,
    order_rate_out40_continue: noopImmediate,
    order_rate_out50_continue: noopImmediate,
    order_rate_out70_continue: noopImmediate,
    overtake_target_no_order_up_time: noopErlangRandom(3, 2),
    overtake_target_time: noopErlangRandom(3, 2),
    phase: {
      samplePolicy: ImmediatePolicy,
      filterEq(regions, phase, course, _2, extra) {
        CourseHelpers.assertIsPhase(phase);
        const fudge = ["100591", "900591", "110261", "910261", "110191", "910191", "120451", "920451", "101502121"].indexOf(extra.skillId) > -1 ? 10 : 0;
        const bounds = new Region(CourseHelpers.phaseStart(course.distance, phase), CourseHelpers.phaseEnd(course.distance, phase) + fudge);
        return regions.rmap((r3) => r3.intersect(bounds));
      },
      filterNeq: notSupported,
      filterLt(regions, phase, course, _2, extra) {
        CourseHelpers.assertIsPhase(phase);
        assert3(phase > 0, "phase == 0");
        const bounds = new Region(0, CourseHelpers.phaseStart(course.distance, phase));
        return regions.rmap((r3) => r3.intersect(bounds));
      },
      filterLte(regions, phase, course, _2, extra) {
        CourseHelpers.assertIsPhase(phase);
        const bounds = new Region(0, CourseHelpers.phaseEnd(course.distance, phase));
        return regions.rmap((r3) => r3.intersect(bounds));
      },
      filterGt(regions, phase, course, _2, extra) {
        CourseHelpers.assertIsPhase(phase);
        assert3(phase < 3, "phase > 2");
        const bounds = new Region(CourseHelpers.phaseStart(course.distance, phase + 1), course.distance);
        return regions.rmap((r3) => r3.intersect(bounds));
      },
      filterGte(regions, phase, course, _2, extra) {
        CourseHelpers.assertIsPhase(phase);
        const bounds = new Region(CourseHelpers.phaseStart(course.distance, phase), course.distance);
        return regions.rmap((r3) => r3.intersect(bounds));
      }
    },
    phase_corner_random: random({
      filterEq(regions, phase, course, _2, extra) {
        CourseHelpers.assertIsPhase(phase);
        const phaseStart = CourseHelpers.phaseStart(course.distance, phase);
        const phaseEnd = CourseHelpers.phaseEnd(course.distance, phase);
        const corners = course.corners.filter((c3) => c3.start >= phaseStart && c3.start < phaseEnd || c3.start + c3.length >= phaseStart && c3.start + c3.length < phaseEnd).map((c3) => new Region(Math.max(c3.start, phaseStart), Math.min(c3.start + c3.length, phaseEnd)));
        return regions.rmap((r3) => corners.map((c3) => r3.intersect(c3)));
      }
    }),
    phase_firsthalf_random: random({
      filterEq(regions, phase, course, _2, extra) {
        CourseHelpers.assertIsPhase(phase);
        const start2 = CourseHelpers.phaseStart(course.distance, phase);
        const end = CourseHelpers.phaseEnd(course.distance, phase);
        const bounds = new Region(start2, start2 + (end - start2) / 2);
        return regions.rmap((r3) => r3.intersect(bounds));
      }
    }),
    phase_firstquarter_random: random({
      filterEq(regions, phase, course, _2, extra) {
        CourseHelpers.assertIsPhase(phase);
        const start2 = CourseHelpers.phaseStart(course.distance, phase);
        const end = CourseHelpers.phaseEnd(course.distance, phase);
        const bounds = new Region(start2, start2 + (end - start2) / 4);
        return regions.rmap((r3) => r3.intersect(bounds));
      }
    }),
    phase_laterhalf_random: random({
      filterEq(regions, phase, course, _2, extra) {
        CourseHelpers.assertIsPhase(phase);
        const start2 = CourseHelpers.phaseStart(course.distance, phase);
        const end = CourseHelpers.phaseEnd(course.distance, phase);
        const bounds = new Region((start2 + end) / 2, end);
        return regions.rmap((r3) => r3.intersect(bounds));
      }
    }),
    phase_random: random({
      filterEq(regions, phase, course, _2, extra) {
        CourseHelpers.assertIsPhase(phase);
        const bounds = new Region(CourseHelpers.phaseStart(course.distance, phase), CourseHelpers.phaseEnd(course.distance, phase));
        return regions.rmap((r3) => r3.intersect(bounds));
      }
    }),
    phase_straight_random: {
      samplePolicy: StraightRandomPolicy,
      filterEq(regions, phase, course, _2, extra) {
        CourseHelpers.assertIsPhase(phase);
        const phaseBounds = new Region(CourseHelpers.phaseStart(course.distance, phase), CourseHelpers.phaseEnd(course.distance, phase));
        return regions.rmap((r3) => course.straights.map((s3) => r3.intersect(s3))).rmap((r3) => r3.intersect(phaseBounds));
      },
      filterNeq: notSupported,
      filterLt: notSupported,
      filterLte: notSupported,
      filterGt: notSupported,
      filterGte: notSupported
    },
    popularity: noopImmediate,
    post_number: noopImmediate,
    remain_distance: immediate({
      filterLte(regions, remain, course, _2, extra) {
        const bounds = new Region(course.distance - remain, course.distance);
        return regions.rmap((r3) => r3.intersect(bounds));
      },
      filterGte(regions, remain, course, _2, extra) {
        const bounds = new Region(0, course.distance - remain);
        return regions.rmap((r3) => r3.intersect(bounds));
      }
    }),
    rotation: valueFilter((course, _2, extra) => course.turn),
    running_style: immediate({
      filterEq(regions, strategy, _2, horse, extra) {
        StrategyHelpers.assertIsStrategy(strategy);
        if (StrategyHelpers.strategyMatches(horse.strategy, strategy)) {
          return regions;
        } else {
          return new RegionList();
        }
      }
    }),
    running_style_count_same: noopImmediate,
    running_style_count_same_rate: noopImmediate,
    running_style_equal_popularity_one: noopImmediate,
    same_skill_horse_count: noopImmediate,
    season: valueFilter((_0, _1, extra) => extra.season),
    slope: immediate({
      filterEq(regions, slopeType, course, _2, extra) {
        assert3(slopeType == 0 || slopeType == 1 || slopeType == 2, "slopeType");
        assert3(CourseHelpers.isSortedByStart(course.slopes), "course slopes must be sorted by slope start");
        let lastEnd = 0;
        const slopes = course.slopes.filter((s3) => slopeType != 2 && s3.slope > 0 || slopeType != 1 && s3.slope < 0);
        const slopeR = slopeType == 0 ? slopes.map((s3) => {
          const r3 = new Region(lastEnd, s3.start);
          lastEnd = s3.start + s3.length;
          return r3;
        }) : slopes.map((s3) => new Region(s3.start, s3.start + s3.length));
        if (slopeType == 0 && lastEnd != course.distance) {
          slopeR.push(new Region(lastEnd, course.distance));
        }
        return regions.rmap((r3) => slopeR.map((s3) => r3.intersect(s3)));
      }
    }),
    straight_front_type: immediate({
      filterEq(regions, frontType, course, _2, extra) {
        assert3(frontType == 1 || frontType == 2, "frontType");
        const straights = course.straights.filter((s3) => s3.frontType == frontType);
        return regions.rmap((r3) => straights.map((s3) => r3.intersect(s3)));
      }
    }),
    straight_random: {
      samplePolicy: StraightRandomPolicy,
      filterEq(regions, one2, course, _2, extra) {
        assert3(one2 == 1, "must be straight_random==1");
        return regions.rmap((r3) => course.straights.map((s3) => r3.intersect(s3)));
      },
      filterNeq: notSupported,
      filterLt: notSupported,
      filterLte: notSupported,
      filterGt: notSupported,
      filterGte: notSupported
    },
    temptation_count: noopImmediate,
    time: valueFilter((_0, _1, extra) => extra.time),
    track_id: valueFilter((course, _2, extra) => course.raceTrackId),
    up_slope_random: random({
      filterEq(regions, one2, course, _2, extra) {
        assert3(one2 == 1, "must be up_slope_random==1");
        const slopes = course.slopes.filter((s3) => s3.slope > 0).map((s3) => new Region(s3.start, s3.start + s3.length));
        return regions.rmap((r3) => slopes.map((s3) => r3.intersect(s3)));
      }
    }),
    visiblehorse: noopImmediate,
    weather: valueFilter((_0, _1, extra) => extra.weather)
  });

  // ../../skilltool/ConditionParser.ts
  var ParseError = class extends Error {
    constructor(msg) {
      super(msg);
    }
  };
  function isId(c3) {
    return "a".charCodeAt(0) <= c3 && c3 <= "z".charCodeAt(0) || "0".charCodeAt(0) <= c3 && c3 <= "9".charCodeAt(0) || c3 == "_".charCodeAt(0);
  }
  var IntValue = class {
    constructor(value) {
      this.lbp = 0;
      this.value = value;
    }
    led(state, left2) {
      throw new ParseError("unexpected integer literal");
    }
    nud(state) {
      return { type: 0 /* Int */, value: this.value };
    }
  };
  function getParser(conditions = Conditions, operators = {
    and: AndOperator,
    // this is really stupid
    or: OrOperator,
    eq: EqOperator,
    neq: NeqOperator,
    lt: LtOperator,
    lte: LteOperator,
    gt: GtOperator,
    gte: GteOperator
  }) {
    const Eof = Object.freeze({
      lbp: 0,
      led: (state, left2) => {
        throw new ParseError("unexpected eof");
      },
      nud: (state) => {
        throw new ParseError("unexpected eof");
      }
    });
    class Identifier {
      constructor(value) {
        this.lbp = 0;
        this.value = value;
      }
      led(state, left2) {
        throw new ParseError("unexpected identifier");
      }
      nud(state) {
        return { type: 1 /* Cond */, cond: conditions[this.value] };
      }
    }
    class CmpOp {
      constructor(lbp, opclass) {
        this.lbp = lbp;
        this.opclass = opclass;
      }
      led(state, left2) {
        if (left2.type != 1 /* Cond */)
          throw new ParseError("expected condition on left hand side of comparison");
        const right2 = expression(state, this.lbp);
        if (right2.type != 0 /* Int */)
          throw new ParseError("expected number on right hand side of comparison");
        return { type: 2 /* Op */, op: new this.opclass(left2.cond, right2.value) };
      }
      nud(state) {
        throw new ParseError("expected expression");
      }
    }
    class LogicalOp {
      constructor(lbp, opclass) {
        this.lbp = lbp;
        this.opclass = opclass;
      }
      led(state, left2) {
        if (left2.type != 2 /* Op */)
          throw new ParseError("expected comparison on left hand side of operator");
        const right2 = expression(state, this.lbp);
        if (right2.type != 2 /* Op */)
          throw new ParseError("expected comparison on right hand side of operator");
        return { type: 2 /* Op */, op: new this.opclass(left2.op, right2.op) };
      }
      nud(state) {
        throw new ParseError("expected expression");
      }
    }
    const OperatorEq = Object.freeze(new CmpOp(30, operators.eq));
    const OperatorNeq = Object.freeze(new CmpOp(30, operators.neq));
    const OperatorLt = Object.freeze(new CmpOp(30, operators.lt));
    const OperatorLte = Object.freeze(new CmpOp(30, operators.lte));
    const OperatorGt = Object.freeze(new CmpOp(30, operators.gt));
    const OperatorGte = Object.freeze(new CmpOp(30, operators.gte));
    const OperatorAnd = Object.freeze(new LogicalOp(20, operators.and));
    const OperatorOr = Object.freeze(new LogicalOp(10, operators.or));
    function* tokenize(s3) {
      var i4 = 0;
      while (i4 < s3.length) {
        var c3 = s3.charCodeAt(i4);
        if ("0".charCodeAt(0) <= c3 && c3 <= "9".charCodeAt(0)) {
          var n3 = 0;
          while ("0".charCodeAt(0) <= c3 && c3 <= "9".charCodeAt(0)) {
            n3 *= 10;
            n3 += c3 - "0".charCodeAt(0);
            c3 = s3.charCodeAt(++i4);
          }
          yield new IntValue(n3);
        } else if (isId(c3)) {
          var idstart = i4;
          while (isId(c3)) {
            c3 = s3.charCodeAt(++i4);
          }
          yield new Identifier(s3.slice(idstart, i4));
        } else
          switch (s3[i4]) {
            case "=":
              if (s3[++i4] != "=")
                throw new ParseError("expected =");
              ++i4;
              yield OperatorEq;
              break;
            case "!":
              if (s3[++i4] != "=")
                throw new ParseError("expected =");
              ++i4;
              yield OperatorNeq;
              break;
            case "<":
              if (s3[++i4] == "=") {
                ++i4;
                yield OperatorLte;
              } else {
                yield OperatorLt;
              }
              break;
            case ">":
              if (s3[++i4] == "=") {
                ++i4;
                yield OperatorGte;
              } else {
                yield OperatorGt;
              }
              break;
            case "@":
              yield OperatorOr;
              ++i4;
              break;
            case "&":
              yield OperatorAnd;
              ++i4;
              break;
            default:
              throw new ParseError("invalid character");
          }
      }
      return Eof;
    }
    function parseAny(tokens) {
      const state = { current: Eof, next: tokens.next().value, tokens };
      return expression(state, 0);
    }
    function parse(tokens) {
      const node = parseAny(tokens);
      if (node.type != 2 /* Op */) {
        throw new ParseError("expected comparison or operator");
      }
      return node.op;
    }
    function expression(state, rbp) {
      state.current = state.next;
      state.next = state.tokens.next().value;
      var left2 = state.current.nud(state);
      while (rbp < state.next.lbp) {
        state.current = state.next;
        state.next = state.tokens.next().value;
        left2 = state.current.led(state, left2);
      }
      return left2;
    }
    return { tokenize, parse, parseAny };
  }

  // ../../skilltool/RaceSolver.ts
  var assert4 = __require("assert").strict;
  var Speed;
  ((Speed2) => {
    Speed2.StrategyPhaseCoefficient = Object.freeze([
      [],
      // strategies start numbered at 1
      [1, 0.98, 0.962],
      [0.978, 0.991, 0.975],
      [0.938, 0.998, 0.994],
      [0.931, 1, 1],
      [1.063, 0.962, 0.95]
    ].map((a4) => Object.freeze(a4)));
    Speed2.DistanceProficiencyModifier = Object.freeze([1.05, 1, 0.9, 0.8, 0.6, 0.4, 0.2, 0.1]);
  })(Speed || (Speed = {}));
  function baseSpeed(course) {
    return 20 - (course.distance - 2e3) / 1e3;
  }
  function baseTargetSpeed(horse, course, phase) {
    return baseSpeed(course) * Speed.StrategyPhaseCoefficient[horse.strategy][phase] + +(phase == 2) * Math.sqrt(500 * horse.speed) * Speed.DistanceProficiencyModifier[horse.distanceAptitude] * 2e-3;
  }
  function lastSpurtSpeed(horse, course) {
    return (baseTargetSpeed(horse, course, 2) + 0.01 * baseSpeed(course)) * 1.05 + Math.sqrt(500 * horse.speed) * Speed.DistanceProficiencyModifier[horse.distanceAptitude] * 2e-3 + Math.pow(450 * horse.guts, 0.597) * 1e-4;
  }
  function staminaSyoubuDistanceFactor(distance) {
    if (distance < 2101)
      return 0;
    else if (distance < 2201)
      return 0.5;
    else if (distance < 2401)
      return 1;
    else if (distance < 2601)
      return 1.2;
    else
      return 1.5;
  }
  function staminaSyoubuBonus(horse, course) {
    const randomFactor = 1;
    return Math.sqrt(horse.rawStamina - 1200) * 85e-4 * staminaSyoubuDistanceFactor(course.distance) * randomFactor;
  }
  var Acceleration;
  ((Acceleration2) => {
    Acceleration2.StrategyPhaseCoefficient = Object.freeze([
      [],
      [1, 1, 0.996],
      [0.985, 1, 0.996],
      [0.975, 1, 1],
      [0.945, 1, 0.997],
      [1.17, 0.94, 0.956]
    ].map((a4) => Object.freeze(a4)));
    Acceleration2.GroundTypeProficiencyModifier = Object.freeze([1.05, 1, 0.9, 0.8, 0.7, 0.5, 0.3, 0.1]);
    Acceleration2.DistanceProficiencyModifier = Object.freeze([1, 1, 1, 1, 1, 0.6, 0.5, 0.4]);
  })(Acceleration || (Acceleration = {}));
  var BaseAccel = 6e-4;
  var UphillBaseAccel = 4e-4;
  function baseAccel(baseAccel2, horse, phase) {
    return baseAccel2 * Math.sqrt(500 * horse.power) * Acceleration.StrategyPhaseCoefficient[horse.strategy][phase] * Acceleration.GroundTypeProficiencyModifier[horse.surfaceAptitude] * Acceleration.DistanceProficiencyModifier[horse.distanceAptitude];
  }
  var PhaseDeceleration = [-1.2, -0.8, -1];
  var PositionKeep;
  ((PositionKeep2) => {
    PositionKeep2.BaseMinimumThreshold = Object.freeze([0, 0, 3, 6.5, 7.5]);
    PositionKeep2.BaseMaximumThreshold = Object.freeze([0, 0, 5, 7, 8]);
    function courseFactor(distance) {
      return 8e-4 * (distance - 1e3) + 1;
    }
    PositionKeep2.courseFactor = courseFactor;
    function minThreshold(strategy, distance) {
      return PositionKeep2.BaseMinimumThreshold[strategy] * (strategy == 2 /* Senkou */ ? 1 : courseFactor(distance));
    }
    PositionKeep2.minThreshold = minThreshold;
    function maxThreshold(strategy, distance) {
      return PositionKeep2.BaseMaximumThreshold[strategy] * courseFactor(distance);
    }
    PositionKeep2.maxThreshold = maxThreshold;
  })(PositionKeep || (PositionKeep = {}));
  var Timer2 = class {
    constructor(t3) {
      this.t = t3;
    }
  };
  var CompensatedAccumulator = class {
    constructor(acc, err = 0) {
      this.acc = acc;
      this.err = err;
    }
    add(n3) {
      const t3 = this.acc + n3;
      if (Math.abs(this.acc) >= Math.abs(n3)) {
        this.err += this.acc - t3 + n3;
      } else {
        this.err += n3 - t3 + this.acc;
      }
      this.acc = t3;
    }
  };
  var SkillType = /* @__PURE__ */ ((SkillType2) => {
    SkillType2[SkillType2["SpeedUp"] = 1] = "SpeedUp";
    SkillType2[SkillType2["StaminaUp"] = 2] = "StaminaUp";
    SkillType2[SkillType2["PowerUp"] = 3] = "PowerUp";
    SkillType2[SkillType2["GutsUp"] = 4] = "GutsUp";
    SkillType2[SkillType2["WisdomUp"] = 5] = "WisdomUp";
    SkillType2[SkillType2["Recovery"] = 9] = "Recovery";
    SkillType2[SkillType2["CurrentSpeed"] = 21] = "CurrentSpeed";
    SkillType2[SkillType2["CurrentSpeedWithNaturalDeceleration"] = 22] = "CurrentSpeedWithNaturalDeceleration";
    SkillType2[SkillType2["TargetSpeed"] = 27] = "TargetSpeed";
    SkillType2[SkillType2["Accel"] = 31] = "Accel";
    SkillType2[SkillType2["ActivateRandomGold"] = 37] = "ActivateRandomGold";
    return SkillType2;
  })(SkillType || {});
  function noop3(x3) {
  }
  var RaceSolver = class {
    constructor(params) {
      this.horse = Object.assign({}, params.horse);
      this.course = params.course;
      this.pacer = params.pacer || null;
      this.rng = params.rng;
      this.pendingSkills = params.skills.slice();
      this.gorosiRng = new Rule30CARng(this.rng.int32());
      this.paceEffectRng = new Rule30CARng(this.rng.int32());
      this.timers = [];
      this.accumulatetime = this.getNewTimer();
      this.phase = 0;
      this.nextPhaseTransition = CourseHelpers.phaseStart(this.course.distance, 1);
      this.activeTargetSpeedSkills = [];
      this.activeCurrentSpeedSkills = [];
      this.activeAccelSkills = [];
      this.activateCount = [0, 0, 0];
      this.activateCountHeal = 0;
      this.onSkillActivate = params.onSkillActivate || noop3;
      this.onSkillDeactivate = params.onSkillDeactivate || noop3;
      this.sectionLength = this.course.distance / 24;
      this.isPaceDown = false;
      this.posKeepMinThreshold = PositionKeep.minThreshold(this.horse.strategy, this.course.distance);
      this.posKeepMaxThreshold = PositionKeep.maxThreshold(this.horse.strategy, this.course.distance);
      this.posKeepCooldown = this.getNewTimer();
      this.posKeepEnd = this.sectionLength * 5;
      this.posKeepSpeedCoef = 1;
      if (StrategyHelpers.strategyMatches(this.horse.strategy, 1 /* Nige */) || this.pacer == null) {
        this.updatePositionKeep = noop3;
      } else {
        this.updatePositionKeep = this.updatePositionKeepNonNige;
      }
      this.modifiers = {
        targetSpeed: new CompensatedAccumulator(0),
        currentSpeed: new CompensatedAccumulator(0),
        accel: new CompensatedAccumulator(0),
        oneFrameAccel: 0
      };
      this.initHills();
      this.pos = 0;
      this.accel = 0;
      this.currentSpeed = 3;
      this.targetSpeed = 0.85 * baseSpeed(this.course);
      this.processSkillActivations();
      this.minSpeed = 0.85 * baseSpeed(this.course) + Math.sqrt(200 * this.horse.guts) * 1e-3;
      this.startDash = true;
      this.modifiers.accel.add(24);
      this.baseTargetSpeed = [0, 1, 2].map((phase) => baseTargetSpeed(this.horse, this.course, phase));
      this.lastSpurtSpeed = lastSpurtSpeed(this.horse, this.course);
      if (this.horse.rawStamina > 1200) {
        this.lastSpurtSpeed += staminaSyoubuBonus(this.horse, this.course);
      }
      this.baseAccel = [0, 1, 2, 0, 1, 2].map((phase, i4) => baseAccel(i4 > 2 ? UphillBaseAccel : BaseAccel, this.horse, phase));
    }
    initHills() {
      assert4(CourseHelpers.isSortedByStart(this.course.slopes), "slopes must be sorted by start location");
      this.nHills = this.course.slopes.length;
      this.hillStart = this.course.slopes.map((s3) => s3.start).reverse();
      this.hillEnd = this.course.slopes.map((s3) => s3.start + s3.length).reverse();
      this.hillIdx = -1;
      if (this.hillStart.length > 0 && this.hillStart[this.hillStart.length - 1] == 0) {
        if (this.course.slopes[0].slope > 0) {
          this.hillIdx = 0;
        } else {
          this.hillEnd.pop();
        }
        this.hillStart.pop();
      }
    }
    getNewTimer(t3 = 0) {
      const tm = new Timer2(t3);
      this.timers.push(tm);
      return tm;
    }
    getMaxSpeed() {
      if (this.startDash) {
        return Math.min(this.targetSpeed, 0.85 * baseSpeed(this.course));
      } else if (this.currentSpeed + this.modifiers.oneFrameAccel > this.targetSpeed) {
        return 9999;
      } else {
        return this.targetSpeed;
      }
    }
    step(dt) {
      if (this.pos < this.posKeepEnd && this.pacer != null) {
        this.pacer.step(dt);
      }
      const halfv = Math.min(this.currentSpeed + 0.5 * dt * this.accel, this.getMaxSpeed());
      const displacement = halfv + this.modifiers.currentSpeed.acc + this.modifiers.currentSpeed.err;
      this.pos += displacement * dt;
      this.timers.forEach((tm) => tm.t += dt);
      this.updateHills();
      this.updatePhase();
      this.processSkillActivations();
      this.updatePositionKeep();
      this.updateTargetSpeed();
      this.applyForces();
      this.currentSpeed = Math.min(halfv + 0.5 * dt * this.accel + this.modifiers.oneFrameAccel, this.getMaxSpeed());
      if (!this.startDash && this.currentSpeed < this.minSpeed) {
        this.currentSpeed = this.minSpeed;
      } else if (this.startDash && this.currentSpeed >= 0.85 * baseSpeed(this.course)) {
        this.startDash = false;
        this.modifiers.accel.add(-24);
      }
      this.modifiers.oneFrameAccel = 0;
    }
    updatePositionKeepNonNige() {
      if (this.pos >= this.posKeepEnd) {
        this.isPaceDown = false;
        this.posKeepSpeedCoef = 1;
        this.updatePositionKeep = noop3;
      } else if (this.isPaceDown) {
        if (this.pacer.pos - this.pos > this.posKeepEffectExitDistance || this.pos - this.posKeepEffectStart > this.sectionLength || this.activeTargetSpeedSkills.length > 0 || this.activeCurrentSpeedSkills.length > 0) {
          this.isPaceDown = false;
          this.posKeepCooldown.t = -3;
          this.posKeepSpeedCoef = 1;
        }
      } else if (this.pacer.pos - this.pos < this.posKeepMinThreshold && this.activeTargetSpeedSkills.length == 0 && this.activeCurrentSpeedSkills.length == 0 && this.posKeepCooldown.t >= 0) {
        this.isPaceDown = true;
        this.posKeepEffectStart = this.pos;
        const min4 = this.posKeepMinThreshold;
        const max5 = this.phase == 1 ? min4 + 0.5 * (this.posKeepMaxThreshold - min4) : this.posKeepMaxThreshold;
        this.posKeepEffectExitDistance = min4 + this.paceEffectRng.random() * (max5 - min4);
        this.posKeepSpeedCoef = this.phase == 1 ? 0.945 : 0.915;
      }
    }
    updateTargetSpeed() {
      if (this.phase == 2) {
        this.targetSpeed = this.lastSpurtSpeed;
      } else {
        this.targetSpeed = this.baseTargetSpeed[this.phase] * this.posKeepSpeedCoef;
      }
      this.targetSpeed += this.modifiers.targetSpeed.acc + this.modifiers.targetSpeed.err;
      if (this.hillIdx != -1) {
        this.targetSpeed -= this.course.slopes[this.hillIdx].slope / 1e4 * 200 / this.horse.power;
        this.targetSpeed = Math.max(this.targetSpeed, this.minSpeed);
      }
    }
    applyForces() {
      if (this.currentSpeed > this.targetSpeed) {
        this.accel = this.isPaceDown ? -0.5 : PhaseDeceleration[this.phase];
        return;
      }
      this.accel = this.baseAccel[+(this.hillIdx != -1) * 3 + this.phase];
      this.accel += this.modifiers.accel.acc + this.modifiers.accel.err;
    }
    updateHills() {
      if (this.hillIdx == -1 && this.hillStart.length > 0 && this.pos >= this.hillStart[this.hillStart.length - 1]) {
        if (this.course.slopes[this.nHills - this.hillStart.length].slope > 0) {
          this.hillIdx = this.nHills - this.hillStart.length;
        } else {
          this.hillEnd.pop();
        }
        this.hillStart.pop();
      } else if (this.hillIdx != -1 && this.hillEnd.length > 0 && this.pos > this.hillEnd[this.hillEnd.length - 1]) {
        this.hillIdx = -1;
        this.hillEnd.pop();
      }
    }
    updatePhase() {
      if (this.pos >= this.nextPhaseTransition && this.phase < 2) {
        ++this.phase;
        this.nextPhaseTransition = CourseHelpers.phaseStart(this.course.distance, this.phase + 1);
      }
    }
    processSkillActivations() {
      for (let i4 = this.activeTargetSpeedSkills.length; --i4 >= 0; ) {
        const s3 = this.activeTargetSpeedSkills[i4];
        if (s3.durationTimer.t >= 0) {
          this.activeTargetSpeedSkills.splice(i4, 1);
          this.modifiers.targetSpeed.add(-s3.modifier);
          this.onSkillDeactivate(this, s3.skillId);
        }
      }
      for (let i4 = this.activeCurrentSpeedSkills.length; --i4 >= 0; ) {
        const s3 = this.activeCurrentSpeedSkills[i4];
        if (s3.durationTimer.t >= 0) {
          this.activeCurrentSpeedSkills.splice(i4, 1);
          this.modifiers.currentSpeed.add(-s3.modifier);
          if (s3.naturalDeceleration) {
            this.modifiers.oneFrameAccel += s3.modifier;
          }
          this.onSkillDeactivate(this, s3.skillId);
        }
      }
      for (let i4 = this.activeAccelSkills.length; --i4 >= 0; ) {
        const s3 = this.activeAccelSkills[i4];
        if (s3.durationTimer.t >= 0) {
          this.activeAccelSkills.splice(i4, 1);
          this.modifiers.accel.add(-s3.modifier);
          this.onSkillDeactivate(this, s3.skillId);
        }
      }
      for (let i4 = this.pendingSkills.length; --i4 >= 0; ) {
        const s3 = this.pendingSkills[i4];
        if (this.pos >= s3.trigger.end) {
          this.pendingSkills.splice(i4, 1);
        } else if (this.pos >= s3.trigger.start && s3.extraCondition(this)) {
          this.activateSkill(s3);
          this.pendingSkills.splice(i4, 1);
        }
      }
    }
    activateSkill(s3) {
      s3.effects.forEach((ef) => {
        const scaledDuration = ef.baseDuration * this.course.distance / 1e3;
        switch (ef.type) {
          case 1 /* SpeedUp */:
            this.horse.speed = Math.max(this.horse.speed + ef.modifier, 1);
            break;
          case 2 /* StaminaUp */:
            this.horse.stamina = Math.max(this.horse.stamina + ef.modifier, 1);
            this.horse.rawStamina = Math.max(this.horse.rawStamina + ef.modifier, 1);
            break;
          case 3 /* PowerUp */:
            this.horse.power = Math.max(this.horse.power + ef.modifier, 1);
            break;
          case 4 /* GutsUp */:
            this.horse.guts = Math.max(this.horse.guts + ef.modifier, 1);
            break;
          case 5 /* WisdomUp */:
            this.horse.wisdom = Math.max(this.horse.wisdom + ef.modifier, 1);
            break;
          case 27 /* TargetSpeed */:
            this.modifiers.targetSpeed.add(ef.modifier);
            this.activeTargetSpeedSkills.push({ skillId: s3.skillId, durationTimer: this.getNewTimer(-scaledDuration), modifier: ef.modifier });
            break;
          case 31 /* Accel */:
            this.modifiers.accel.add(ef.modifier);
            this.activeAccelSkills.push({ skillId: s3.skillId, durationTimer: this.getNewTimer(-scaledDuration), modifier: ef.modifier });
            break;
          case 21 /* CurrentSpeed */:
          case 22 /* CurrentSpeedWithNaturalDeceleration */:
            this.modifiers.currentSpeed.add(ef.modifier);
            this.activeCurrentSpeedSkills.push({
              skillId: s3.skillId,
              durationTimer: this.getNewTimer(-scaledDuration),
              modifier: ef.modifier,
              naturalDeceleration: ef.type == 22 /* CurrentSpeedWithNaturalDeceleration */
            });
            break;
          case 9 /* Recovery */:
            ++this.activateCountHeal;
            break;
          case 37 /* ActivateRandomGold */:
            this.doActivateRandomGold(ef.modifier);
            break;
        }
      });
      ++this.activateCount[this.phase];
      this.onSkillActivate(this, s3.skillId);
    }
    doActivateRandomGold(ngolds) {
      const goldIndices = this.pendingSkills.reduce((acc, skill, i4) => {
        if ((skill.rarity == 2 /* Gold */ || skill.rarity == 6 /* Evolution */) && skill.effects.every((ef) => ef.type > 5 /* WisdomUp */))
          acc.push(i4);
        return acc;
      }, []);
      for (let i4 = goldIndices.length; --i4 >= 0; ) {
        const j3 = this.gorosiRng.uniform(i4 + 1);
        [goldIndices[i4], goldIndices[j3]] = [goldIndices[j3], goldIndices[i4]];
      }
      for (let i4 = 0; i4 < Math.min(ngolds, goldIndices.length); ++i4) {
        this.activateSkill(this.pendingSkills[goldIndices[i4]]);
        this.pendingSkills[goldIndices[i4]].trigger = new Region(0, 0);
      }
    }
  };

  // ../../skilltool/data/skill_data.json
  var skill_data_default = { "100011": { alternatives: [{ baseDuration: 5e4, condition: "phase>=2&order>=1&order_rate<=50&change_order_onetime<0", effects: [{ modifier: 3500, type: 22 }, { modifier: 1e3, type: 31 }], precondition: "" }], rarity: 5 }, "100021": { alternatives: [{ baseDuration: 5e4, condition: "distance_rate>=50&order==1&bashin_diff_behind>=1", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 5 }, "100031": { alternatives: [{ baseDuration: 5e4, condition: "is_last_straight==1", effects: [{ modifier: 4500, type: 27 }], precondition: "phase>=2&order<=3&bashin_diff_infront<=1&is_overtake==1" }], rarity: 5 }, "100041": { alternatives: [{ baseDuration: 4e4, condition: "is_finalcorner==1&order<=5&order_rate<=50", effects: [{ modifier: 4e3, type: 31 }], precondition: "" }], rarity: 5 }, "100051": { alternatives: [{ baseDuration: 5e4, condition: "remain_distance<=300", effects: [{ modifier: 4500, type: 27 }], precondition: "phase>=2&order_rate<=40&behind_near_lane_time_set1>=1" }], rarity: 5 }, "100061": { alternatives: [{ baseDuration: 5e4, condition: "order>=2&order<=5&order_rate<=50&remain_distance<=201&remain_distance>=199", effects: [{ modifier: 4500, type: 27 }], precondition: "" }], rarity: 5 }, "100071": { alternatives: [{ baseDuration: 6e4, condition: "distance_rate>=50&distance_rate<=60&order_rate>50", effects: [{ modifier: 2500, type: 27 }], precondition: "" }], rarity: 4 }, "100081": { alternatives: [{ baseDuration: 5e4, condition: "order>=3&order_rate<=50&remain_distance<=200&bashin_diff_infront<=1@order>=3&order_rate<=50&remain_distance<=200&bashin_diff_behind<=1", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 4 }, "100091": { alternatives: [{ baseDuration: 5e4, condition: "distance_rate>=50&order==1&bashin_diff_behind<=1@distance_rate>=50&order==2&is_overtake==1", effects: [{ modifier: 2500, type: 27 }, { modifier: 3e3, type: 31 }], precondition: "" }], rarity: 4 }, "100101": { alternatives: [{ baseDuration: 5e4, condition: "is_finalcorner_laterhalf==1&corner!=0&order>=3&order_rate<=40", effects: [{ modifier: 4e3, type: 31 }], precondition: "" }], rarity: 5 }, "100101111": { alternatives: [{ baseDuration: 3e4, condition: "running_style==2&phase_random==1", effects: [{ modifier: 550, type: 9 }, { modifier: 1500, type: 27 }], precondition: "" }], rarity: 6 }, "100101211": { alternatives: [{ baseDuration: 24e3, condition: "is_lastspurt==1&phase_firsthalf_random==3", effects: [{ modifier: 4500, type: 27 }], precondition: "" }], rarity: 6 }, "100102111": { alternatives: [{ baseDuration: 4e4, condition: "running_style==3&phase_random==1&order_rate>=40", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 6 }, "100102211": { alternatives: [{ baseDuration: 4e4, condition: "phase==1&change_order_onetime<0", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 6 }, "100103111": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==4&phase==2&change_order_onetime<0", effects: [{ modifier: 3500, type: 27 }, { modifier: 1e3, type: 31 }, { modifier: 150, type: 9 }], precondition: "" }], rarity: 6 }, "100103211": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==4&is_finalcorner_random==1", effects: [{ modifier: 4500, type: 27 }], precondition: "" }], rarity: 6 }, "100111": { alternatives: [{ baseDuration: 5e4, condition: "is_last_straight==1&change_order_onetime<0&order>=3", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 4 }, "100121": { alternatives: [{ baseDuration: 5e4, condition: "is_last_straight==1", effects: [{ modifier: 3500, type: 27 }], precondition: "is_finalcorner==1&is_behind_in==1&change_order_onetime<0&order_rate>=40" }], rarity: 5 }, "100131": { alternatives: [{ baseDuration: 5e4, condition: "is_finalcorner==1&corner!=0&distance_diff_rate<=30&distance_type==4&lastspurt==2", effects: [{ modifier: 4500, type: 27 }], precondition: "" }, { baseDuration: 5e4, condition: "is_finalcorner==1&corner!=0&distance_diff_rate<=30", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 5 }, "100141": { alternatives: [{ baseDuration: 5e4, condition: "is_last_straight==1&hp_per>=30&order<=2", effects: [{ modifier: 2500, type: 27 }, { modifier: 3e3, type: 31 }], precondition: "" }], rarity: 4 }, "100151": { alternatives: [{ baseDuration: 5e4, condition: "is_finalcorner==1&bashin_diff_behind<=1&order<=4@is_finalcorner==1&bashin_diff_infront<=1&order<=4", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 5 }, "100161": { alternatives: [{ baseDuration: 5e4, condition: "is_finalcorner==1&order>=2&order_rate<=75&is_behind_in==1&change_order_onetime<0", effects: [{ modifier: 4500, type: 27 }], precondition: "phase==1&blocked_side_continuetime>=2" }, { baseDuration: 5e4, condition: "is_finalcorner==1&order>=2&order_rate<=75&is_behind_in==1&change_order_onetime<0", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 5 }, "100171": { alternatives: [{ baseDuration: 5e4, condition: "is_last_straight==1&change_order_up_end_after>=3", effects: [{ modifier: 4500, type: 27 }], precondition: "" }], rarity: 5 }, "100181": { alternatives: [{ baseDuration: 5e4, condition: "is_finalcorner==1&corner!=0&order>=3&change_order_onetime<0", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 4 }, "100191": { alternatives: [{ baseDuration: 5e4, condition: "change_order_up_end_after>=2", effects: [{ modifier: 3500, type: 27 }, { modifier: 350, type: 28 }], precondition: "" }], rarity: 5 }, "100201": { alternatives: [{ baseDuration: 4e4, condition: "phase>=2&corner!=0&order==1", effects: [{ modifier: 4e3, type: 31 }], precondition: "" }], rarity: 5 }, "100201111": { alternatives: [{ baseDuration: 3e4, condition: "always==1", effects: [{ modifier: 4e3, type: 10 }, { modifier: 2e3, type: 31 }], precondition: "" }], rarity: 6 }, "100201211": { alternatives: [{ baseDuration: 3e4, condition: "running_style==1&is_finalcorner_random==1&order==1", effects: [{ modifier: 4e3, type: 31 }, { modifier: 1500, type: 22 }], precondition: "" }], rarity: 6 }, "100202111": { alternatives: [{ baseDuration: 3e4, condition: "running_style==1&phase_random==1&order_rate<=50", effects: [{ modifier: 4500, type: 27 }], precondition: "" }], rarity: 6 }, "100202121": { alternatives: [{ baseDuration: 4e4, condition: "running_style==1&phase_laterhalf_random==1&order==1&course_distance==2200", effects: [{ modifier: 4500, type: 27 }], precondition: "" }], rarity: 6 }, "100202211": { alternatives: [{ baseDuration: 15e3, condition: "distance_type==3&phase==0", effects: [{ modifier: 5e3, type: 31 }], precondition: "" }], rarity: 6 }, "100211": { alternatives: [{ baseDuration: 5e4, condition: "distance_rate>=50&corner==0&order_rate>=70&order_rate<=75&is_overtake==1@distance_rate>=50&corner==0&order_rate<=30&order_rate>=20", effects: [{ modifier: 3500, type: 27 }, { modifier: 1e3, type: 31 }], precondition: "" }], rarity: 5 }, "100221": { alternatives: [{ baseDuration: 5e4, condition: "distance_rate>=50&order>=2&order_rate<=40&blocked_side_continuetime>=2", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 5 }, "100231": { alternatives: [{ baseDuration: 5e4, condition: "phase>=2&is_finalcorner==1&order<=4&temptation_count==0", effects: [{ modifier: 4500, type: 27 }], precondition: "" }, { baseDuration: 5e4, condition: "phase>=2&is_finalcorner==1&order<=4", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 5 }, "100241": { alternatives: [{ baseDuration: 5e4, condition: "is_finalcorner==1&blocked_side_continuetime>=2&order<=3", effects: [{ modifier: 2500, type: 27 }, { modifier: 3e3, type: 31 }], precondition: "" }], rarity: 4 }, "100251": { alternatives: [{ baseDuration: 6e4, condition: "distance_rate>=50&order_rate>=40&order_rate<=70", effects: [{ modifier: 2500, type: 27 }, { modifier: -500, type: 21 }], precondition: "" }], rarity: 5 }, "100261": { alternatives: [{ baseDuration: 5e4, condition: "is_badstart==0&order<=3&is_last_straight==1&order_rate_in20_continue==1", effects: [{ modifier: 4500, type: 27 }], precondition: "" }, { baseDuration: 5e4, condition: "is_badstart==0&order<=3&is_last_straight==1", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 5 }, "100271": { alternatives: [{ baseDuration: 4e4, condition: "phase>=2&corner!=0&order_rate>=65&order_rate<=70", effects: [{ modifier: 4e3, type: 31 }], precondition: "" }], rarity: 4 }, "100281": { alternatives: [{ baseDuration: 5e4, condition: "distance_rate>=45&distance_rate<=60&order>=2&order_rate<=50&is_overtake==1&distance_type==1", effects: [{ modifier: 2500, type: 22 }], precondition: "" }, { baseDuration: 5e4, condition: "distance_rate>=45&distance_rate<=60&order>=2&order_rate<=50&is_overtake==1", effects: [{ modifier: 2500, type: 27 }], precondition: "" }], rarity: 5 }, "100291": { alternatives: [{ baseDuration: 5e4, condition: "distance_diff_top<=5&remain_distance<=300&order_rate<=40", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 5 }, "100301": { alternatives: [{ baseDuration: 5e4, condition: "is_last_straight==1", effects: [{ modifier: 3500, type: 27 }], precondition: "phase>=2&order<=4&change_order_onetime<0" }], rarity: 5 }, "100301111": { alternatives: [{ baseDuration: 3e4, condition: "running_style==2&is_move_lane==1@running_style==2&is_move_lane==2", effects: [{ modifier: 4e3, type: 31 }, { modifier: 2500, type: 27 }], precondition: "" }], rarity: 6 }, "100301211": { alternatives: [{ baseDuration: 4e4, condition: "distance_type==3&phase_random==1", effects: [{ modifier: 350, type: 28 }, { modifier: 3e3, type: 31 }, { modifier: 2500, type: 27 }], precondition: "" }], rarity: 6 }, "100302111": { alternatives: [{ baseDuration: 3e4, condition: "running_style==2&phase_random==1&order_rate<=50", effects: [{ modifier: 550, type: 9 }, { modifier: 1500, type: 27 }], precondition: "" }], rarity: 6 }, "100302211": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==3&is_move_lane==1&accumulatetime>=10@distance_type==3&is_move_lane==2&accumulatetime>=10", effects: [{ modifier: 550, type: 9 }, { modifier: 1500, type: 27 }], precondition: "" }], rarity: 6 }, "100303111": { alternatives: [{ baseDuration: 18e3, condition: "running_style==2&course_distance>=2400&course_distance<=2500&phase_firstquarter_random==2&order_rate<=50&base_stamina>=1000", effects: [{ modifier: 5e3, type: 31 }], precondition: "" }, { baseDuration: 18e3, condition: "running_style==2&course_distance<2400&phase_firsthalf_random==2&order_rate<=50@running_style==2&course_distance>2500&phase_firsthalf_random==2&order_rate<=50@running_style==2&course_distance>=2400&course_distance<=2500&phase_firsthalf_random==2&order_rate<=50&base_stamina<1000", effects: [{ modifier: 4e3, type: 31 }], precondition: "" }], rarity: 6 }, "100303211": { alternatives: [{ baseDuration: 3e4, condition: "running_style==2&order_rate<=50&phase_laterhalf_random==1", effects: [{ modifier: 350, type: 9 }, { modifier: 2500, type: 27 }], precondition: "" }], rarity: 6 }, "100303221": { alternatives: [{ baseDuration: 3e4, condition: "running_style==2&phase_firsthalf_random==1&order_rate<=50", effects: [{ modifier: 4500, type: 27 }, { modifier: -100, type: 9 }], precondition: "" }], rarity: 6 }, "100311": { alternatives: [{ baseDuration: 5e4, condition: "remain_distance<=299&remain_distance>=295&order<=2&slope==0@remain_distance<=299&remain_distance>=295&order<=2&slope==2", effects: [{ modifier: 4500, type: 27 }], precondition: "remain_distance<=305&remain_distance>=300&slope==1" }, { baseDuration: 5e4, condition: "remain_distance<=299&remain_distance>=295&order<=2", effects: [{ modifier: 2500, type: 27 }], precondition: "" }], rarity: 5 }, "100321": { alternatives: [{ baseDuration: 4e4, condition: "distance_rate>=50&corner!=0&order>=3&order_rate<=40", effects: [{ modifier: 550, type: 9 }, { modifier: 2500, type: 27 }], precondition: "" }], rarity: 4 }, "100331": { alternatives: [{ baseDuration: 5e4, condition: "is_last_straight==1&distance_diff_top>=5&order_rate<80", effects: [{ modifier: 3500, type: 27 }], precondition: "" }, { baseDuration: 5e4, condition: "is_last_straight==1&distance_diff_top>=5&order_rate>=80", effects: [{ modifier: 4500, type: 27 }], precondition: "" }], rarity: 5 }, "100341": { alternatives: [{ baseDuration: 5e4, condition: "compete_fight_count>0", effects: [{ modifier: 4500, type: 27 }], precondition: "distance_rate>=50&order_rate_out40_continue==1" }], rarity: 5 }, "100351": { alternatives: [{ baseDuration: 5e4, condition: "is_last_straight==1&order<=5", effects: [{ modifier: 3500, type: 27 }], precondition: "is_finalcorner==1&blocked_side_continuetime>=2" }], rarity: 4 }, "100361": { alternatives: [{ baseDuration: 5e4, condition: "is_last_straight==1", effects: [{ modifier: 3500, type: 27 }, { modifier: 350, type: 28 }], precondition: "is_finalcorner==1&order_rate>=40&order_rate<=75&lane_type==0" }], rarity: 5 }, "100371": { alternatives: [{ baseDuration: 5e4, condition: "temptation_count==0&order>=3&is_last_straight==1&order_rate_in80_continue==1&order_rate_out40_continue==1", effects: [{ modifier: 4500, type: 27 }], precondition: "" }, { baseDuration: 5e4, condition: "temptation_count==0&order>=3&is_last_straight==1", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 5 }, "100381": { alternatives: [{ baseDuration: 5e4, condition: "distance_rate>=50&distance_rate<=65&order>=2&order_rate<=50&change_order_onetime<0", effects: [{ modifier: 2500, type: 27 }, { modifier: 3e3, type: 31 }], precondition: "" }], rarity: 5 }, "100391": { alternatives: [{ baseDuration: 5e4, condition: "is_last_straight==1&blocked_side_continuetime>=2", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 5 }, "100401": { alternatives: [{ baseDuration: 6e4, condition: "distance_rate>=50&order_rate>=40&order_rate<=80&is_overtake==1", effects: [{ modifier: 2500, type: 27 }], precondition: "" }], rarity: 5 }, "100401111": { alternatives: [{ baseDuration: 24e3, condition: "distance_type==2&phase_random==1&order_rate<=50", effects: [{ modifier: 4500, type: 27 }], precondition: "" }], rarity: 6 }, "100401211": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==2&distance_rate>=50&order==1", effects: [{ modifier: 4500, type: 27 }], precondition: "" }], rarity: 6 }, "100402111": { alternatives: [{ baseDuration: 0, condition: "running_style==1&slope==1&accumulatetime>=10", effects: [{ modifier: 750, type: 9 }], precondition: "" }], rarity: 6 }, "100402211": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==2&phase_laterhalf_random==0&order_rate<=50", effects: [{ modifier: 4500, type: 27 }], precondition: "" }], rarity: 6 }, "100403111": { alternatives: [{ baseDuration: 24e3, condition: "running_style==1&distance_type==2&is_overtake==1&accumulatetime>=5@running_style==1&distance_type==2&overtake_target_time>=1&accumulatetime>=5", effects: [{ modifier: 4500, type: 22 }], precondition: "" }], rarity: 6 }, "100403211": { alternatives: [{ baseDuration: 24e3, condition: "running_style==1&distance_type==2&distance_rate>=50&overtake_target_time>=1", effects: [{ modifier: 4500, type: 22 }], precondition: "" }], rarity: 6 }, "100411": { alternatives: [{ baseDuration: 5e4, condition: "distance_rate>=50&order<=3&blocked_side_continuetime>=2", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 4 }, "100421": { alternatives: [{ baseDuration: 5e4, condition: "remain_distance<=201&remain_distance>=199&distance_diff_top<=5&order>=2", effects: [{ modifier: 4500, type: 27 }], precondition: "" }, { baseDuration: 5e4, condition: "remain_distance<=201&remain_distance>=199&distance_diff_top<=10&order>=2", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 5 }, "100431": { alternatives: [{ baseDuration: 5e4, condition: "compete_fight_count>0&ground_type==2", effects: [{ modifier: 2500, type: 27 }, { modifier: 4e3, type: 31 }], precondition: "" }, { baseDuration: 5e4, condition: "compete_fight_count>0", effects: [{ modifier: 2500, type: 27 }], precondition: "" }], rarity: 5 }, "100441": { alternatives: [{ baseDuration: 6e4, condition: "remain_distance<=300", effects: [{ modifier: 3500, type: 27 }], precondition: "order_rate_out50_continue==1&temptation_count==0&is_finalcorner==1" }], rarity: 5 }, "100451": { alternatives: [{ baseDuration: 0, condition: "phase_random==1&order>=2&order_rate<=40", effects: [{ modifier: 750, type: 9 }], precondition: "" }], rarity: 4 }, "100461": { alternatives: [{ baseDuration: 5e4, condition: "phase==1&corner==0&order<=2&bashin_diff_behind<=1", effects: [{ modifier: 2500, type: 27 }, { modifier: 3e3, type: 31 }], precondition: "" }], rarity: 5 }, "100471": { alternatives: [{ baseDuration: 5e4, condition: "phase>=2&remain_distance<=401&remain_distance>=399&order_rate<=40&grade==100&popularity<=3", effects: [{ modifier: 4500, type: 27 }], precondition: "" }, { baseDuration: 5e4, condition: "phase>=2&remain_distance<=401&remain_distance>=399&order_rate<=40", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 5 }, "100481": { alternatives: [{ baseDuration: 5e4, condition: "is_last_straight==1&order_rate<=40&overtake_target_time>=1@is_last_straight==1&order_rate<=40&is_overtake==1", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 5 }, "100491": { alternatives: [{ baseDuration: 5e4, condition: "remain_distance<=400&order_rate>=30&order_rate<=50&popularity>=4", effects: [{ modifier: 4500, type: 27 }], precondition: "is_finalcorner==1&is_overtake==1" }, { baseDuration: 5e4, condition: "remain_distance<=400&order_rate>=30&order_rate<=50&popularity<4", effects: [{ modifier: 3500, type: 27 }], precondition: "is_finalcorner==1&is_overtake==1" }], rarity: 5 }, "100501": { alternatives: [{ baseDuration: 5e4, condition: "is_finalcorner==1&order_rate>=40&order_rate<=75&is_overtake==1", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 5 }, "100501111": { alternatives: [{ baseDuration: 24e3, condition: "distance_type==2&is_overtake==1&accumulatetime>=5", effects: [{ modifier: 4500, type: 27 }], precondition: "" }], rarity: 6 }, "100501211": { alternatives: [{ baseDuration: 3e4, condition: "running_style==2&phase_random==1&order_rate<=50", effects: [{ modifier: 550, type: 9 }, { modifier: 1500, type: 27 }], precondition: "" }], rarity: 6 }, "100501221": { alternatives: [{ baseDuration: 3e4, condition: "running_style==2&phase_random==1&order_rate<=50", effects: [{ modifier: 150, type: 9 }, { modifier: 3500, type: 27 }], precondition: "" }], rarity: 6 }, "100502111": { alternatives: [{ baseDuration: 3e4, condition: "phase==1&order_rate<=50&temptation_opponent_count_behind>=1", effects: [{ modifier: -300, type: 9 }, { modifier: 3500, type: 27 }], precondition: "" }], rarity: 6 }, "100502121": { alternatives: [{ baseDuration: 24e3, condition: "is_finalcorner_random==1", effects: [{ modifier: 4500, type: 27 }], precondition: "" }], rarity: 6 }, "100502211": { alternatives: [{ baseDuration: 18e3, condition: "running_style==2&is_finalcorner_random==1&order_rate<=50", effects: [{ modifier: 4500, type: 27 }], precondition: "" }], rarity: 6 }, "100511": { alternatives: [{ baseDuration: 4e4, condition: "phase>=2&is_finalcorner_laterhalf==1&order>=3&order_rate<=40@phase>=2&is_finalcorner==1&corner==0&order>=3&order_rate<=40", effects: [{ modifier: 4e3, type: 31 }], precondition: "phase==1&blocked_side_continuetime>=2&corner!=0" }], rarity: 5 }, "100521": { alternatives: [{ baseDuration: 0, condition: "is_finalcorner==1&corner!=0&order_rate>50&near_count>=1", effects: [{ modifier: 550, type: 9 }], precondition: "" }], rarity: 4 }, "100531": { alternatives: [{ baseDuration: 2e4, condition: "phase>=2&order_rate>=50&is_finalcorner==1&bashin_diff_infront<=1", effects: [{ modifier: 1e3, type: 31 }, { modifier: 1e3, type: 31 }], precondition: "" }], rarity: 5 }, "100541": { alternatives: [{ baseDuration: 4e4, condition: "remain_distance<=150&order_rate<=50", effects: [{ modifier: 4500, type: 27 }], precondition: "order_rate>=45&distance_rate>=50&change_order_onetime<0" }], rarity: 4 }, "100551": { alternatives: [{ baseDuration: 5e4, condition: "distance_rate<=50&distance_rate>=40&order_rate<=80&order_rate>=50&near_count>=1&visiblehorse>=4", effects: [{ modifier: 4e3, type: 27 }], precondition: "" }, { baseDuration: 5e4, condition: "distance_rate<=50&distance_rate>=40&order_rate<=80&order_rate>=50&near_count>=1", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 5 }, "100561": { alternatives: [{ baseDuration: 5e4, condition: "phase>=2&order>=3&blocked_front==1", effects: [{ modifier: 3500, type: 27 }, { modifier: 1e3, type: 31 }], precondition: "" }], rarity: 4 }, "100571": { alternatives: [{ baseDuration: 6e4, condition: "distance_type==3&phase_laterhalf_random==1&order_rate>50@distance_type==4&phase_laterhalf_random==1&order_rate>50", effects: [{ modifier: 2500, type: 27 }], precondition: "" }, { baseDuration: 6e4, condition: "distance_type==1&phase_laterhalf_random==1&order_rate>50@distance_type==2&phase_laterhalf_random==1&order_rate>50", effects: [{ modifier: 2500, type: 27 }], precondition: "" }], rarity: 5 }, "100581": { alternatives: [{ baseDuration: 5e4, condition: "phase>=2&change_order_onetime<0", effects: [{ modifier: 2500, type: 27 }, { modifier: 3e3, type: 31 }], precondition: "" }], rarity: 5 }, "100591": { alternatives: [{ baseDuration: 4e4, condition: "phase>=2&corner!=0&is_finalcorner==0&temptation_count==0&order_rate>=50&order_rate<=70@phase==1&corner!=0&is_finalcorner==1&temptation_count==0&order_rate>=50&order_rate<=70", effects: [{ modifier: 4e3, type: 31 }], precondition: "" }], rarity: 5 }, "100601": { alternatives: [{ baseDuration: 5e4, condition: "phase>=2&order==3&bashin_diff_behind<=1", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 4 }, "100601111": { alternatives: [{ baseDuration: 0, condition: "running_style==2&phase_random==1", effects: [{ modifier: 750, type: 9 }], precondition: "" }], rarity: 6 }, "100601121": { alternatives: [{ baseDuration: 3e4, condition: "running_style==2&phase_random==1", effects: [{ modifier: 150, type: 9 }, { modifier: 3500, type: 27 }], precondition: "" }], rarity: 6 }, "100601211": { alternatives: [{ baseDuration: 3e4, condition: "all_corner_random==1", effects: [{ modifier: 4e3, type: 31 }, { modifier: 150, type: 9 }], precondition: "" }], rarity: 6 }, "100602111": { alternatives: [{ baseDuration: 0, condition: "running_style==2&phase_random==1", effects: [{ modifier: 750, type: 9 }], precondition: "" }], rarity: 6 }, "100602211": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==4&is_finalcorner==1&corner!=0&lane_type==0", effects: [{ modifier: 3500, type: 27 }, { modifier: 150, type: 9 }], precondition: "" }], rarity: 6 }, "100611": { alternatives: [{ baseDuration: 5e4, condition: "temptation_count==0&remain_distance<=201&remain_distance>=199&order>=4&order_rate<=70", effects: [{ modifier: 4500, type: 27 }], precondition: "" }], rarity: 4 }, "100621": { alternatives: [{ baseDuration: 5e4, condition: "distance_rate>=50&phase==1&order>=3&order_rate<=70", effects: [{ modifier: 550, type: 9 }, { modifier: 2500, type: 27 }], precondition: "" }], rarity: 4 }, "100631": { alternatives: [{ baseDuration: 6e4, condition: "is_lastspurt==1&phase==3&temptation_count==0", effects: [{ modifier: 2500, type: 27 }], precondition: "" }], rarity: 4 }, "100641": { alternatives: [{ baseDuration: 6e4, condition: "distance_rate>=50&order_rate_in20_continue==1", effects: [{ modifier: 550, type: 9 }, { modifier: 2500, type: 27 }], precondition: "" }], rarity: 5 }, "100651": { alternatives: [{ baseDuration: 6e4, condition: "distance_type==1&phase_laterhalf_random==1&order_rate<=50@distance_type==2&phase_laterhalf_random==1&order_rate<=50", effects: [{ modifier: 2500, type: 27 }], precondition: "" }, { baseDuration: 5e4, condition: "distance_type==3&phase_laterhalf_random==1&order_rate<=50@distance_type==4&phase_laterhalf_random==1&order_rate<=50", effects: [{ modifier: 2500, type: 27 }], precondition: "" }], rarity: 5 }, "100661": { alternatives: [{ baseDuration: 13e4, condition: "distance_rate>=34&distance_rate<=36&order==1&bashin_diff_behind>=1", effects: [{ modifier: 1500, type: 27 }], precondition: "" }, { baseDuration: 5e6, condition: "phase==3&is_activate_other_skill_detail==1", effects: [{ modifier: -500, type: 21 }], precondition: "" }], rarity: 4 }, "100671": { alternatives: [{ baseDuration: 5e4, condition: "is_last_straight_onetime==1&order>=2&order<=5&distance_diff_top<=5", effects: [{ modifier: 4500, type: 27 }], precondition: "" }, { baseDuration: 5e4, condition: "is_last_straight_onetime==1&order>=2&order<=5&distance_diff_top>5", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 5 }, "100681": { alternatives: [{ baseDuration: 5e4, condition: "phase==2&straight_front_type==2&order<=2", effects: [{ modifier: 2500, type: 27 }, { modifier: 3e3, type: 31 }], precondition: "" }, { baseDuration: 5e4, condition: "distance_rate>=50&corner==3&order<=2", effects: [{ modifier: 2500, type: 27 }], precondition: "" }], rarity: 5 }, "100691": { alternatives: [{ baseDuration: 5e4, condition: "remain_distance<=300&order_rate<=40&bashin_diff_infront<=1", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 5 }, "100701": { alternatives: [{ baseDuration: 4e4, condition: "remain_distance>=799&remain_distance<=801&order_rate>=30&order_rate<=60&course_distance==2400&popularity<=3", effects: [{ modifier: 5e3, type: 31 }], precondition: "" }], rarity: 5 }, "100701-1": { alternatives: [{ baseDuration: 4e4, condition: "remain_distance>=799&remain_distance<=801&order_rate>=30&order_rate<=60", effects: [{ modifier: 2e3, type: 31 }], precondition: "" }], rarity: 5 }, "100701111": { alternatives: [{ baseDuration: 3e4, condition: "running_style==4&is_move_lane==1@running_style==4&is_move_lane==2", effects: [{ modifier: 1e5, type: 8 }, { modifier: 150, type: 9 }], precondition: "" }], rarity: 6 }, "100701211": { alternatives: [{ baseDuration: 3e4, condition: "running_style==4&slope==2&accumulatetime>=10", effects: [{ modifier: 550, type: 9 }, { modifier: 1500, type: 27 }], precondition: "" }], rarity: 6 }, "100702111": { alternatives: [{ baseDuration: 4e4, condition: "distance_type==4&is_finalcorner==1&corner!=0&lane_type==0", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 6 }, "100702211": { alternatives: [{ baseDuration: 4e4, condition: "distance_type==3&phase_random==1&order_rate>=50", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 6 }, "100702221": { alternatives: [{ baseDuration: 24e3, condition: "distance_type==4&phase_random==1&order_rate>=50", effects: [{ modifier: 4500, type: 27 }], precondition: "" }], rarity: 6 }, "100703111": { alternatives: [{ baseDuration: 9e3, condition: "running_style==4&is_lastspurt==1&corner==0", effects: [{ modifier: 4e3, type: 31 }], precondition: "" }, { baseDuration: 3e4, condition: "is_activate_other_skill_detail==1&is_last_straight==1", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 6 }, "100703211": { alternatives: [{ baseDuration: -1, condition: "ground_condition==2@ground_condition==3@ground_condition==4", effects: [{ modifier: 1e3, type: 14 }, { modifier: 8e5, type: 3 }, { modifier: 8e5, type: 1 }], precondition: "" }], rarity: 6 }, "10071": { alternatives: [{ baseDuration: 6e4, condition: "distance_rate>=50&distance_rate<=60&order_rate>50", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 3 }, "100711": { alternatives: [{ baseDuration: 4e4, condition: "is_last_straight==1&bashin_diff_behind<=1", effects: [{ modifier: 4500, type: 27 }, { modifier: -100, type: 9 }], precondition: "" }], rarity: 5 }, "100721": { alternatives: [{ baseDuration: 5e4, condition: "remain_distance<=300&order_rate<=40", effects: [{ modifier: 3500, type: 27 }], precondition: "is_finalcorner==1&change_order_onetime<0" }], rarity: 5 }, "100731": { alternatives: [{ baseDuration: 5e4, condition: "is_last_straight==1&change_order_up_end_after>=1", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 4 }, "100741": { alternatives: [{ baseDuration: 5e4, condition: "distance_rate>=50&order_rate>=40&order_rate<=80", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 5 }, "100761": { alternatives: [{ baseDuration: 6e4, condition: "distance_type==4&distance_rate>=50&distance_rate<=51&order_rate>=30&order_rate<=80", effects: [{ modifier: 2500, type: 27 }, { modifier: 750, type: 9 }], precondition: "" }, { baseDuration: 5e4, condition: "distance_rate>=50&distance_rate<=51&order_rate>=30&order_rate<=80", effects: [{ modifier: 2500, type: 27 }], precondition: "" }], rarity: 5 }, "100771": { alternatives: [{ baseDuration: 5e4, condition: "remain_distance<=401&remain_distance>=399&distance_diff_top_float<=25&distance_type==4", effects: [{ modifier: 5500, type: 27 }], precondition: "distance_rate>=60&phase==1&order>=2&order_rate<=40" }, { baseDuration: 5e4, condition: "remain_distance<=401&remain_distance>=399", effects: [{ modifier: 4500, type: 27 }], precondition: "distance_rate>=60&phase==1&order>=2&order_rate<=40" }], rarity: 5 }, "100781": { alternatives: [{ baseDuration: 8e4, condition: "is_finalcorner_laterhalf==1&distance_diff_rate<=50&order==2", effects: [{ modifier: 2e3, type: 31 }], precondition: "distance_rate>=50&order_rate_out20_continue==1" }, { baseDuration: 8e4, condition: "is_finalcorner_laterhalf==1&distance_diff_rate<=50", effects: [{ modifier: 1e3, type: 31 }], precondition: "distance_rate>=50&order_rate_out20_continue==1" }], rarity: 5 }, "100791": { alternatives: [{ baseDuration: 6e4, condition: "distance_rate>=50&track_id==10101@distance_rate>=50&track_id==10103@distance_rate>=50&track_id==10104", effects: [{ modifier: 3500, type: 27 }], precondition: "phase==1&order_rate<=50&blocked_side_continuetime>=2" }, { baseDuration: 4e4, condition: "distance_rate>=50", effects: [{ modifier: 3500, type: 27 }], precondition: "phase==1&order_rate<=50&blocked_side_continuetime>=2" }], rarity: 5 }, "100801": { alternatives: [{ baseDuration: 5e4, condition: "is_other_character_activate_advantage_skill==31", effects: [{ modifier: 2500, type: 22 }, { modifier: 1500, type: 27 }], precondition: "distance_rate>=50&order_rate_in20_continue==1&track_id>=10001&track_id<=10010&ground_type==2" }, { baseDuration: 5e4, condition: "is_other_character_activate_advantage_skill==31", effects: [{ modifier: 2500, type: 22 }], precondition: "distance_rate>=50&order_rate_in20_continue==1" }], rarity: 5 }, "100801111": { alternatives: [{ baseDuration: 3e4, condition: "phase==1&corner==0", effects: [{ modifier: 550, type: 9 }, { modifier: 1500, type: 27 }], precondition: "" }], rarity: 6 }, "100801211": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==2&phase_random==2&order_rate>50", effects: [{ modifier: 5e3, type: 31 }], precondition: "" }], rarity: 6 }, "100802111": { alternatives: [{ baseDuration: 3e4, condition: "infront_near_lane_time>=1&is_lastspurt==1&hp_per>=1", effects: [{ modifier: 4e3, type: 31 }, { modifier: 250, type: 28 }, { modifier: 150, type: 9 }], precondition: "" }], rarity: 6 }, "100802211": { alternatives: [{ baseDuration: 24e3, condition: "running_style==3&is_last_straight==1&order>=2&distance_diff_top<=10", effects: [{ modifier: 5500, type: 27 }], precondition: "" }], rarity: 6 }, "10081": { alternatives: [{ baseDuration: 5e4, condition: "order>=3&order_rate<=50&remain_distance<=200&bashin_diff_infront<=1@order>=3&order_rate<=50&remain_distance<=200&bashin_diff_behind<=1", effects: [{ modifier: 2500, type: 27 }], precondition: "" }], rarity: 3 }, "100821": { alternatives: [{ baseDuration: 5e4, condition: "distance_type==2&is_finalcorner==1&corner!=0&order_rate<=50&order_rate>=20", effects: [{ modifier: 3500, type: 27 }], precondition: "" }, { baseDuration: 4e4, condition: "is_finalcorner==1&corner!=0&order_rate<=50&order_rate>=20", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 5 }, "100831": { alternatives: [{ baseDuration: 6e4, condition: "distance_rate>=40&corner==0&slope==2&order_rate>=40&order_rate<=80", effects: [{ modifier: 3500, type: 27 }], precondition: "" }, { baseDuration: 5e4, condition: "distance_rate>=40&corner==0&order_rate>=40&order_rate<=80", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 5 }, "100841": { alternatives: [{ baseDuration: 5e4, condition: "is_last_straight==1&track_id==10006&distance_type==3", effects: [{ modifier: 5500, type: 22 }], precondition: "phase>=2&order_rate>=50" }, { baseDuration: 5e4, condition: "is_last_straight==1", effects: [{ modifier: 3500, type: 22 }], precondition: "phase>=2&order_rate>=50" }], rarity: 5 }, "100851": { alternatives: [{ baseDuration: 5e4, condition: "distance_rate>=66&distance_rate<=68&order_rate>=60&order_rate<=90&temptation_count==0", effects: [{ modifier: 2500, type: 22 }, { modifier: -500, type: 21 }], precondition: "" }], rarity: 5 }, "100861": { alternatives: [{ baseDuration: 5e4, condition: "remain_distance>=999&remain_distance<=1001&order_rate>=20&order_rate<=50", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 5 }, "100871": { alternatives: [{ baseDuration: 5e4, condition: "remain_distance<=400&order<=2&overtake_target_time>=1", effects: [{ modifier: 2500, type: 27 }, { modifier: 3e3, type: 31 }], precondition: "" }], rarity: 5 }, "100881": { alternatives: [{ baseDuration: 5e4, condition: "distance_type==3&remain_distance<=400", effects: [{ modifier: 4500, type: 27 }], precondition: "change_order_up_middle>=1&is_finalcorner==1&corner!=0&order_rate<=70&order_rate>=40" }, { baseDuration: 5e4, condition: "remain_distance<=400", effects: [{ modifier: 3500, type: 27 }], precondition: "is_finalcorner==1&corner!=0&order_rate<=70&order_rate>=40" }], rarity: 5 }, "100891": { alternatives: [{ baseDuration: 5e4, condition: "distance_rate>=45&distance_rate<=55&order_rate>=20&order_rate<=50&course_distance>=2400", effects: [{ modifier: 3500, type: 27 }, { modifier: 350, type: 9 }], precondition: "" }, { baseDuration: 5e4, condition: "distance_rate>=45&distance_rate<=55&order_rate>=20&order_rate<=50", effects: [{ modifier: 3500, type: 27 }, { modifier: 150, type: 9 }], precondition: "" }], rarity: 5 }, "100901111": { alternatives: [{ baseDuration: 24e3, condition: "distance_type==3&phase_random==1&order_rate<=50", effects: [{ modifier: 3500, type: 27 }, { modifier: 150, type: 9 }], precondition: "" }], rarity: 6 }, "100901211": { alternatives: [{ baseDuration: 3e4, condition: "running_style==2&phase_random==1&order_rate<=50", effects: [{ modifier: 550, type: 9 }, { modifier: 1500, type: 27 }], precondition: "" }], rarity: 6 }, "100902111": { alternatives: [{ baseDuration: 0, condition: "running_style==1&slope==1&accumulatetime>=10", effects: [{ modifier: 750, type: 9 }], precondition: "" }], rarity: 6 }, "100902211": { alternatives: [{ baseDuration: 24e3, condition: "running_style==1&is_last_straight==1&order==1&bashin_diff_behind<=1", effects: [{ modifier: 5500, type: 27 }], precondition: "" }], rarity: 6 }, "10091": { alternatives: [{ baseDuration: 5e4, condition: "distance_rate>=50&order==1&bashin_diff_behind<=1@distance_rate>=50&order==2&is_overtake==1", effects: [{ modifier: 1500, type: 27 }, { modifier: 2e3, type: 31 }], precondition: "" }], rarity: 3 }, "100911": { alternatives: [{ baseDuration: 5e4, condition: "remain_distance<=300", effects: [{ modifier: 4500, type: 27 }], precondition: "phase>=2&is_last_straight_onetime==1&order_rate>=30&order_rate<=70&temptation_count==0" }, { baseDuration: 5e4, condition: "remain_distance<=300", effects: [{ modifier: 2500, type: 27 }], precondition: "phase>=2&is_last_straight_onetime==1&order_rate>=30&order_rate<=70" }], rarity: 5 }, "100931": { alternatives: [{ baseDuration: 5e4, condition: "distance_type==1&phase_firsthalf_random==2&order_rate<=50&order_rate>=20@distance_type==2&phase_firsthalf_random==2&order_rate<=50&order_rate>=20", effects: [{ modifier: 3500, type: 22 }], precondition: "" }, { baseDuration: 5e4, condition: "distance_type==3&phase_firsthalf_random==2&order_rate<=50&order_rate>=20@distance_type==4&phase_firsthalf_random==2&order_rate<=50&order_rate>=20", effects: [{ modifier: 2500, type: 22 }], precondition: "" }], rarity: 5 }, "100941": { alternatives: [{ baseDuration: 5e4, condition: "distance_rate>=50&distance_rate<=51&order_rate<=80&order_rate>=40&distance_type==3", effects: [{ modifier: 4500, type: 27 }], precondition: "" }, { baseDuration: 5e4, condition: "distance_rate>=50&distance_rate<=51&order_rate<=80&order_rate>=40", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 5 }, "100981": { alternatives: [{ baseDuration: 5e4, condition: "phase_laterhalf_random==1", effects: [{ modifier: 2500, type: 27 }, { modifier: 500, type: 27 }, { modifier: 500, type: 31 }], precondition: "" }], rarity: 5 }, "100991": { alternatives: [{ baseDuration: 4e4, condition: "is_lastspurt==1&order_rate<=40&order_rate>=30&ground_type==2&lastspurt==2", effects: [{ modifier: 4e3, type: 31 }], precondition: "phase==1&blocked_side_continuetime>=2&corner!=0" }, { baseDuration: 4e4, condition: "is_lastspurt==1&order_rate<=40&order_rate>=30&ground_type==2", effects: [{ modifier: 2e3, type: 31 }], precondition: "phase==1&blocked_side_continuetime>=2&corner!=0" }], rarity: 5 }, "101001": { alternatives: [{ baseDuration: 5e4, condition: "remain_distance>=299&remain_distance<=301&order_rate>=20&order_rate<=40&distance_diff_top<=5&ground_type==2", effects: [{ modifier: 2500, type: 27 }, { modifier: 2500, type: 22 }], precondition: "" }, { baseDuration: 5e4, condition: "remain_distance>=299&remain_distance<=301&order_rate>=20&order_rate<=40", effects: [{ modifier: 2500, type: 27 }], precondition: "" }], rarity: 5 }, "101001111": { alternatives: [{ baseDuration: 24e3, condition: "distance_type==2&phase_random==1&order_rate<=50", effects: [{ modifier: 4500, type: 27 }], precondition: "" }], rarity: 6 }, "101001211": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==2&phase_laterhalf_random==0&accumulatetime>=5&order_rate<=50", effects: [{ modifier: 4500, type: 27 }], precondition: "" }], rarity: 6 }, "101002111": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==2&phase_laterhalf_random==0&accumulatetime>=5&order_rate<=50", effects: [{ modifier: 4500, type: 27 }], precondition: "" }], rarity: 6 }, "101002211": { alternatives: [{ baseDuration: 18e3, condition: "running_style==2&phase_firsthalf_random==2&order_rate<=50", effects: [{ modifier: 4e3, type: 31 }, { modifier: 5e4, type: 8 }], precondition: "" }], rarity: 6 }, "101021": { alternatives: [{ baseDuration: 0, condition: "distance_rate<=50&order_rate>=40&order_rate<=80&infront_near_lane_time>=3&accumulatetime>=10@distance_rate<=50&order_rate>=40&order_rate<=80&behind_near_lane_time>=3&accumulatetime>=10", effects: [{ modifier: 150, type: 9 }], precondition: "" }, { baseDuration: 4e4, condition: "distance_rate<=60&distance_rate>=45&corner==0&is_activate_other_skill_detail==1", effects: [{ modifier: 4500, type: 27 }], precondition: "" }], rarity: 5 }, "101041": { alternatives: [{ baseDuration: 6e4, condition: "corner==3&order==1&track_id==10006&distance_type==3", effects: [{ modifier: 2500, type: 27 }, { modifier: 350, type: 9 }], precondition: "" }, { baseDuration: 5e4, condition: "corner==3&order==1", effects: [{ modifier: 2500, type: 27 }, { modifier: 350, type: 9 }], precondition: "" }], rarity: 5 }, "101051": { alternatives: [{ baseDuration: 5e4, condition: "distance_rate>=50&distance_rate<=55&order_rate>=40&order_rate<=80&distance_type==3&activate_count_all>=7", effects: [{ modifier: 4500, type: 27 }], precondition: "" }, { baseDuration: 5e4, condition: "distance_rate>=50&distance_rate<=55&order_rate>=40&order_rate<=80", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 5 }, "101061": { alternatives: [{ baseDuration: 6e4, condition: "distance_type==4&order_rate>=40&order_rate<=70&is_finalcorner_laterhalf==1&popularity>=4", effects: [{ modifier: 4500, type: 27 }], precondition: "" }, { baseDuration: 6e4, condition: "order_rate>=40&order_rate<=70&is_finalcorner_laterhalf==1", effects: [{ modifier: 2500, type: 27 }], precondition: "" }], rarity: 5 }, "101071": { alternatives: [{ baseDuration: 5e4, condition: "phase>=2&is_last_straight==1&order==1", effects: [{ modifier: 2500, type: 27 }], precondition: "" }], rarity: 5 }, "101081": { alternatives: [{ baseDuration: 5e4, condition: "distance_rate>=50&distance_rate<=51&order_rate>=50", effects: [{ modifier: 3500, type: 27 }], precondition: "" }, { baseDuration: 3e4, condition: "phase>=2&is_activate_other_skill_detail==1&is_finalcorner==1&corner!=0&is_overtake==1", effects: [{ modifier: 1500, type: 22 }], precondition: "" }], rarity: 5 }, "101091": { alternatives: [{ baseDuration: 6e4, condition: "distance_type==1&distance_rate<=50&corner!=0&order>=3&order_rate<=70@distance_type==2&distance_rate<=50&corner!=0&order>=3&order_rate<=70", effects: [{ modifier: 2500, type: 27 }], precondition: "" }, { baseDuration: 5e4, condition: "distance_rate<=50&corner!=0&order>=3&order_rate<=70", effects: [{ modifier: 2500, type: 27 }], precondition: "" }], rarity: 5 }, "101101": { alternatives: [{ baseDuration: 4e4, condition: "remain_distance>=799&remain_distance<=801&is_basis_distance==1&order_rate>=70&order_rate<=80", effects: [{ modifier: 2500, type: 22 }, { modifier: 1e3, type: 31 }, { modifier: 2e3, type: 31 }], precondition: "" }, { baseDuration: 4e4, condition: "remain_distance>=799&remain_distance<=801&order_rate>=50&order_rate<=80", effects: [{ modifier: 2500, type: 22 }, { modifier: 1e3, type: 31 }], precondition: "" }], rarity: 5 }, "101101111": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==3&phase_random==2", effects: [{ modifier: 4500, type: 27 }], precondition: "" }], rarity: 6 }, "101101211": { alternatives: [{ baseDuration: 18e3, condition: "running_style==3&phase_firsthalf_random==2&order_rate>=40", effects: [{ modifier: 4e3, type: 31 }, { modifier: 5e4, type: 8 }], precondition: "" }], rarity: 6 }, "101102111": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==4&phase_random==1", effects: [{ modifier: 550, type: 9 }, { modifier: 1500, type: 27 }], precondition: "" }], rarity: 6 }, "101102211": { alternatives: [{ baseDuration: 3e4, condition: "running_style==3&phase_random==1&order_rate>=40", effects: [{ modifier: 550, type: 9 }, { modifier: 1500, type: 27 }], precondition: "" }], rarity: 6 }, "101103111": { alternatives: [{ baseDuration: 24e3, condition: "running_style==3&phase_straight_random==1&distance_type==4&track_id==10005", effects: [{ modifier: 6e3, type: 27 }], precondition: "" }, { baseDuration: 24e3, condition: "running_style==3&phase_straight_random==1", effects: [{ modifier: 5500, type: 27 }, { modifier: -300, type: 9 }], precondition: "" }], rarity: 6 }, "101103211": { alternatives: [{ baseDuration: 4e4, condition: "distance_type==3&phase>=2&is_finalcorner==1&is_other_character_activate_advantage_skill==27@distance_type==4&phase>=2&is_finalcorner==1&is_other_character_activate_advantage_skill==27@distance_type==3&phase>=2&is_finalcorner==1&is_other_character_activate_advantage_skill==22@distance_type==4&phase>=2&is_finalcorner==1&is_other_character_activate_advantage_skill==22", effects: [{ modifier: 3500, type: 22 }], precondition: "" }], rarity: 6 }, "10111": { alternatives: [{ baseDuration: 5e4, condition: "is_last_straight==1&change_order_onetime<0&order>=3", effects: [{ modifier: 2500, type: 27 }], precondition: "" }], rarity: 3 }, "101111": { alternatives: [{ baseDuration: 6e4, condition: "distance_rate>=49&distance_rate<=50&order_rate>=40&order_rate<=90&slope==1", effects: [{ modifier: 3500, type: 27 }], precondition: "" }, { baseDuration: 6e4, condition: "distance_rate>=49&distance_rate<=50&order_rate>=40&order_rate<=90", effects: [{ modifier: 2500, type: 27 }], precondition: "" }], rarity: 5 }, "101151": { alternatives: [{ baseDuration: 6e4, condition: "running_style==4&remain_distance>=999&remain_distance<=1001&base_speed>=1000&base_stamina>=1000&base_power>=1000&base_guts>=1000&base_wiz>=1000", effects: [{ modifier: 3500, type: 22 }], precondition: "distance_type==3@distance_type==4" }, { baseDuration: 6e4, condition: "running_style==4&remain_distance>=999&remain_distance<=1001", effects: [{ modifier: 2500, type: 22 }], precondition: "" }], rarity: 5 }, "101161": { alternatives: [{ baseDuration: 5e4, condition: "distance_rate<=50&corner!=0&order_rate<=50", effects: [{ modifier: 2500, type: 27 }], precondition: "" }, { baseDuration: 3e4, condition: "is_activate_other_skill_detail==1&order_rate<=40&phase>=2&is_last_straight==1", effects: [{ modifier: 4500, type: 27 }], precondition: "" }], rarity: 5 }, "101171": { alternatives: [{ baseDuration: 4e4, condition: "is_last_straight_onetime==1&change_order_up_end_after>=3@is_last_straight_onetime==1&change_order_up_end_after>=2&change_order_up_middle>=1@is_last_straight_onetime==1&change_order_up_end_after>=1&change_order_up_middle>=2@is_last_straight_onetime==1&change_order_up_middle>=3", effects: [{ modifier: 5500, type: 27 }], precondition: "running_style==4&phase>=2" }, { baseDuration: 4e4, condition: "is_last_straight_onetime==1&change_order_up_end_after>=1@is_last_straight_onetime==1&change_order_up_middle>=1", effects: [{ modifier: 3500, type: 27 }], precondition: "phase>=2" }], rarity: 5 }, "101191": { alternatives: [{ baseDuration: 3e4, condition: "distance_rate>=66&distance_rate<=68&order_rate>=50&remain_distance>=500", effects: [{ modifier: 2500, type: 22 }], precondition: "" }, { baseDuration: 3e4, condition: "is_activate_other_skill_detail==1&corner==0&track_id==10005&distance_type==3@is_activate_other_skill_detail==1&corner==0&track_id==10005&distance_type==4@is_activate_other_skill_detail==1&corner==0&track_id==10009&distance_type==3@is_activate_other_skill_detail==1&corner==0&track_id==10009&distance_type==4", effects: [{ modifier: 4500, type: 22 }], precondition: "" }], rarity: 5 }, "101201": { alternatives: [{ baseDuration: 4e4, condition: "furlong==3&order_rate<=50&is_used_skill_id==203061&is_used_skill_id==203071", effects: [{ modifier: 6500, type: 27 }], precondition: "" }, { baseDuration: 4e4, condition: "furlong==3&order_rate<=50", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 5 }, "101201111": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==3&is_finalcorner==1&corner!=0&is_overtake==1", effects: [{ modifier: 4500, type: 27 }, { modifier: 1e3, type: 31 }], precondition: "" }], rarity: 6 }, "101201121": { alternatives: [{ baseDuration: 3e4, condition: "remain_distance<=201&remain_distance>=199&distance_type==3", effects: [{ modifier: 4500, type: 27 }], precondition: "is_finalcorner==1&change_order_onetime<0" }], rarity: 6 }, "101201211": { alternatives: [{ baseDuration: 3e4, condition: "running_style==4&phase_firsthalf_random==3&is_lastspurt==1", effects: [{ modifier: 4500, type: 27 }], precondition: "phase>=2&distance_diff_rate>=50" }], rarity: 6 }, "101202111": { alternatives: [{ baseDuration: 4e4, condition: "running_style==4&phase_random==1&order_rate>=50", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 6 }, "101202211": { alternatives: [{ baseDuration: 4e4, condition: "running_style==4&distance_type==3&phase_firsthalf_random==2", effects: [{ modifier: 4e3, type: 31 }], precondition: "distance_rate>=66&temptation_count==0" }], rarity: 6 }, "101211": { alternatives: [{ baseDuration: 5e4, condition: "is_lastspurt==1&phase==3&order_rate>=40&order_rate<=80&distance_type==1@is_lastspurt==1&phase==3&order_rate>=40&order_rate<=80&distance_type==2", effects: [{ modifier: 4500, type: 27 }], precondition: "is_finalcorner==1&corner!=0&change_order_onetime<0" }, { baseDuration: 5e4, condition: "is_lastspurt==1&phase==3", effects: [{ modifier: 3500, type: 27 }], precondition: "is_finalcorner==1&corner!=0&change_order_onetime<0" }], rarity: 5 }, "101241": { alternatives: [{ baseDuration: 5e4, condition: "phase_laterhalf_random==1&order_rate<=50&course_distance>=1600&course_distance<=2000&distance_diff_top<=10", effects: [{ modifier: 4500, type: 27 }], precondition: "" }, { baseDuration: 5e4, condition: "phase_laterhalf_random==1&order_rate<=50", effects: [{ modifier: 2500, type: 27 }], precondition: "" }], rarity: 5 }, "101301111": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==4&phase_random==1&order_rate<=50", effects: [{ modifier: 4500, type: 27 }], precondition: "" }], rarity: 6 }, "101301211": { alternatives: [{ baseDuration: 3e4, condition: "running_style==2&phase_laterhalf_random==0&order_rate<=50", effects: [{ modifier: 550, type: 9 }, { modifier: 1500, type: 27 }], precondition: "" }], rarity: 6 }, "101302111": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==4&phase_random==1", effects: [{ modifier: 550, type: 9 }, { modifier: 1500, type: 27 }], precondition: "" }], rarity: 6 }, "101302211": { alternatives: [{ baseDuration: 3e4, condition: "straight_random==1", effects: [{ modifier: 4500, type: 27 }], precondition: "" }], rarity: 6 }, "101303111": { alternatives: [{ baseDuration: 4e4, condition: "distance_type==4&phase_laterhalf_random==1&order_rate<=50", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 6 }, "101303211": { alternatives: [{ baseDuration: 0, condition: "is_badstart==0&running_style==2&distance_type==4&phase_firsthalf_random==1", effects: [{ modifier: 950, type: 9 }], precondition: "" }], rarity: 6 }, "101311": { alternatives: [{ baseDuration: 3e4, condition: "distance_rate>=50&distance_rate<=51&order_rate>=40", effects: [{ modifier: 3500, type: 22 }], precondition: "" }, { baseDuration: 3e4, condition: "distance_type==1&is_activate_other_skill_detail==1&phase==3&is_lastspurt==1@distance_type==2&is_activate_other_skill_detail==1&phase==3&is_lastspurt==1", effects: [{ modifier: 4500, type: 22 }], precondition: "" }], rarity: 5 }, "101401111": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==3&phase_random==0", effects: [{ modifier: 15e4, type: 8 }, { modifier: 1500, type: 27 }], precondition: "" }], rarity: 6 }, "101401211": { alternatives: [{ baseDuration: 3e4, condition: "running_style==2&phase_laterhalf_random==0&order_rate<=50", effects: [{ modifier: 550, type: 9 }, { modifier: 1500, type: 27 }], precondition: "" }], rarity: 6 }, "101402111": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==2&phase_random==2&order_rate>50", effects: [{ modifier: 5e3, type: 31 }], precondition: "" }], rarity: 6 }, "101402121": { alternatives: [{ baseDuration: 4e4, condition: "distance_type==2&phase_random==2", effects: [{ modifier: 3500, type: 22 }], precondition: "" }], rarity: 6 }, "101402211": { alternatives: [{ baseDuration: 4e4, condition: "running_style==3&is_finalcorner==1&corner!=0&is_behind_in==1&change_order_onetime<0", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 6 }, "10141": { alternatives: [{ baseDuration: 5e4, condition: "is_last_straight==1&hp_per>=30&order<=2", effects: [{ modifier: 1500, type: 27 }, { modifier: 2e3, type: 31 }], precondition: "" }], rarity: 3 }, "101501111": { alternatives: [{ baseDuration: 4e4, condition: "running_style==2&is_finalcorner_random==1&order_rate<=50", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 6 }, "101501211": { alternatives: [{ baseDuration: 24e3, condition: "distance_type==3&phase_random==1&order_rate<=50", effects: [{ modifier: 4500, type: 27 }], precondition: "" }], rarity: 6 }, "101502111": { alternatives: [{ baseDuration: 0, condition: "corner_random==1@corner_random==2@corner_random==3@corner_random==4", effects: [{ modifier: 750, type: 9 }], precondition: "" }], rarity: 6 }, "101502121": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==4&phase==1&corner!=0", effects: [{ modifier: 150, type: 9 }, { modifier: 3500, type: 27 }], precondition: "" }], rarity: 6 }, "101502211": { alternatives: [{ baseDuration: 24e3, condition: "distance_type==4&phase_laterhalf_random==1&order_rate<=50", effects: [{ modifier: 4500, type: 27 }], precondition: "" }], rarity: 6 }, "101601111": { alternatives: [{ baseDuration: 3e4, condition: "straight_random==1", effects: [{ modifier: 4500, type: 27 }], precondition: "" }], rarity: 6 }, "101601211": { alternatives: [{ baseDuration: 24e3, condition: "is_lastspurt==1&phase_firsthalf_random==3", effects: [{ modifier: 4500, type: 27 }], precondition: "" }], rarity: 6 }, "101602111": { alternatives: [{ baseDuration: 4e4, condition: "running_style==2&distance_rate>=50&is_overtake==1@running_style==3&distance_rate>=50&is_overtake==1", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 6 }, "101602211": { alternatives: [{ baseDuration: 12e3, condition: "distance_type==4&running_style==2&phase==2", effects: [{ modifier: 5e3, type: 31 }], precondition: "distance_diff_top<=10&distance_rate>=60&phase==1" }], rarity: 6 }, "101701111": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==3&phase_random==2", effects: [{ modifier: 4500, type: 22 }], precondition: "" }], rarity: 6 }, "101701211": { alternatives: [{ baseDuration: 4e4, condition: "all_corner_random==1", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 6 }, "101702111": { alternatives: [{ baseDuration: 0, condition: "running_style==2&phase_laterhalf_random==0&order_rate<=50", effects: [{ modifier: 750, type: 9 }], precondition: "" }], rarity: 6 }, "101702211": { alternatives: [{ baseDuration: -1, condition: "season==3", effects: [{ modifier: 8e5, type: 1 }, { modifier: 8e5, type: 3 }], precondition: "" }], rarity: 6 }, "101801111": { alternatives: [{ baseDuration: 4e4, condition: "running_style==2&phase_random==2&order_rate<=50", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 6 }, "101801211": { alternatives: [{ baseDuration: 3e4, condition: "phase_random==2", effects: [{ modifier: 350, type: 28 }, { modifier: 1500, type: 22 }], precondition: "" }], rarity: 6 }, "101802111": { alternatives: [{ baseDuration: 4e4, condition: "distance_type==2&is_overtake==1&accumulatetime>=5", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 6 }, "101802211": { alternatives: [{ baseDuration: 3e4, condition: "all_corner_random==1", effects: [{ modifier: 4e3, type: 31 }, { modifier: 1500, type: 22 }], precondition: "" }], rarity: 6 }, "10181": { alternatives: [{ baseDuration: 5e4, condition: "is_finalcorner==1&corner!=0&order>=3&change_order_onetime<0", effects: [{ modifier: 2500, type: 27 }], precondition: "" }], rarity: 3 }, "101901111": { alternatives: [{ baseDuration: 3e4, condition: "near_count>=3&accumulatetime>=5", effects: [{ modifier: 3500, type: 27 }, { modifier: 150, type: 9 }], precondition: "" }], rarity: 6 }, "101901211": { alternatives: [{ baseDuration: 4e4, condition: "ground_type==2&phase_random==2", effects: [{ modifier: 350, type: 28 }, { modifier: 3e3, type: 31 }], precondition: "" }], rarity: 6 }, "101901221": { alternatives: [{ baseDuration: 4e4, condition: "ground_type==1&phase_random==2&distance_type==3", effects: [{ modifier: 3e3, type: 22 }], precondition: "" }, { baseDuration: 4e4, condition: "ground_type==2&phase_random==2&distance_type==3", effects: [{ modifier: 2500, type: 22 }], precondition: "" }], rarity: 6 }, "101902111": { alternatives: [{ baseDuration: 18e3, condition: "phase==1&change_order_onetime<0", effects: [{ modifier: 3500, type: 27 }, { modifier: 150, type: 9 }], precondition: "" }], rarity: 6 }, "101902121": { alternatives: [{ baseDuration: 4e4, condition: "ground_type==2&phase==1&change_order_onetime<0", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 6 }, "101902211": { alternatives: [{ baseDuration: 24e3, condition: "ground_type==2&phase_random==1&order_rate>=50", effects: [{ modifier: 3500, type: 27 }, { modifier: 150, type: 9 }], precondition: "" }], rarity: 6 }, "102001111": { alternatives: [{ baseDuration: 4e4, condition: "distance_type==4&phase_random==1&bashin_diff_behind>=1&order==1", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 6 }, "102001121": { alternatives: [{ baseDuration: 0, condition: "distance_type==3&phase_random==1", effects: [{ modifier: 750, type: 9 }], precondition: "" }], rarity: 6 }, "102001211": { alternatives: [{ baseDuration: 4e4, condition: "running_style==1&phase_random==1&order_rate<=50", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 6 }, "102002111": { alternatives: [{ baseDuration: 3e4, condition: "running_style==1&phase_random==1&order_rate<=50", effects: [{ modifier: 3500, type: 27 }, { modifier: 150, type: 9 }], precondition: "" }], rarity: 6 }, "102002121": { alternatives: [{ baseDuration: 3e4, condition: "running_style==1&phase_random==1&order_rate<=50", effects: [{ modifier: 4500, type: 27 }], precondition: "" }], rarity: 6 }, "102002211": { alternatives: [{ baseDuration: 3e4, condition: "running_style==1&phase<=1&change_order_onetime>0&accumulatetime>=5@running_style==1&phase<=1&blocked_side_continuetime>=2&accumulatetime>=5", effects: [{ modifier: 3500, type: 27 }, { modifier: 150, type: 9 }], precondition: "" }], rarity: 6 }, "102101111": { alternatives: [{ baseDuration: 24e3, condition: "running_style==3&phase_random==1&order_rate>=40", effects: [{ modifier: 4500, type: 27 }], precondition: "" }], rarity: 6 }, "102101121": { alternatives: [{ baseDuration: 24e3, condition: "running_style==3&phase_random==1&order_rate>=40", effects: [{ modifier: 2500, type: 27 }, { modifier: 350, type: 9 }], precondition: "" }], rarity: 6 }, "102101211": { alternatives: [{ baseDuration: 3e4, condition: "activate_count_middle>=3", effects: [{ modifier: 4500, type: 27 }], precondition: "" }], rarity: 6 }, "102102111": { alternatives: [{ baseDuration: 24e3, condition: "distance_type==3&phase_random==1&order_rate<=50", effects: [{ modifier: 4500, type: 27 }], precondition: "" }], rarity: 6 }, "102102211": { alternatives: [{ baseDuration: 18e3, condition: "phase==1&change_order_onetime<0", effects: [{ modifier: 4500, type: 27 }], precondition: "" }], rarity: 6 }, "102102221": { alternatives: [{ baseDuration: 4e4, condition: "phase==1&change_order_onetime<0", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 6 }, "102201111": { alternatives: [{ baseDuration: 18e3, condition: "running_style==2&is_finalcorner_random==1&order_rate<=50", effects: [{ modifier: 4500, type: 27 }], precondition: "" }], rarity: 6 }, "102201211": { alternatives: [{ baseDuration: 3e4, condition: "running_style==2&down_slope_random==1", effects: [{ modifier: 4e3, type: 31 }], precondition: "" }], rarity: 6 }, "102202111": { alternatives: [{ baseDuration: 24e3, condition: "distance_type==2&phase_random==1&order_rate<=50", effects: [{ modifier: 4500, type: 27 }], precondition: "" }], rarity: 6 }, "102202211": { alternatives: [{ baseDuration: 18e3, condition: "running_style==2&phase_firsthalf_random==2&order_rate<=50", effects: [{ modifier: 4e3, type: 31 }, { modifier: 5e4, type: 8 }], precondition: "" }], rarity: 6 }, "102202221": { alternatives: [{ baseDuration: 18e3, condition: "running_style==2&phase_firsthalf_random==2&order_rate<=50", effects: [{ modifier: 4e3, type: 31 }], precondition: "" }, { baseDuration: 3e4, condition: "is_activate_other_skill_detail==1&remain_distance<=300", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 6 }, "102301111": { alternatives: [{ baseDuration: 0, condition: "running_style==2&phase_laterhalf_random==0&order_rate<=50", effects: [{ modifier: 750, type: 9 }], precondition: "" }], rarity: 6 }, "102301211": { alternatives: [{ baseDuration: 0, condition: "distance_type==4&phase_random==1", effects: [{ modifier: 750, type: 9 }], precondition: "" }], rarity: 6 }, "102302111": { alternatives: [{ baseDuration: 0, condition: "distance_type==4&is_overtake==1&accumulatetime>=5", effects: [{ modifier: 750, type: 9 }], precondition: "" }], rarity: 6 }, "102302211": { alternatives: [{ baseDuration: 24e3, condition: "is_lastspurt==1&phase_firsthalf_random==3", effects: [{ modifier: 4500, type: 27 }], precondition: "" }], rarity: 6 }, "102303111": { alternatives: [{ baseDuration: 12e3, condition: "running_style==2&distance_type==4&phase_firstquarter_random==2", effects: [{ modifier: 6e3, type: 31 }, { modifier: -200, type: 9 }], precondition: "" }], rarity: 6 }, "102303211": { alternatives: [{ baseDuration: 0, condition: "distance_type==4&running_style==2&phase_firsthalf_random==1", effects: [{ modifier: 550, type: 9 }], precondition: "" }, { baseDuration: 4e4, condition: "is_activate_other_skill_detail==1&phase_laterhalf_random==1", effects: [{ modifier: 2500, type: 27 }], precondition: "" }], rarity: 6 }, "102401111": { alternatives: [{ baseDuration: 0, condition: "phase==1&corner==0", effects: [{ modifier: 750, type: 9 }], precondition: "" }], rarity: 6 }, "102401211": { alternatives: [{ baseDuration: 3e4, condition: "infront_near_lane_time>=1&is_lastspurt==1&hp_per>=1", effects: [{ modifier: 4e3, type: 31 }, { modifier: 250, type: 28 }, { modifier: 150, type: 9 }], precondition: "" }], rarity: 6 }, "102402111": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==3&phase==1&blocked_front_continuetime>=1", effects: [{ modifier: -300, type: 9 }, { modifier: 1500, type: 27 }], precondition: "" }], rarity: 6 }, "102402211": { alternatives: [{ baseDuration: 0, condition: "corner_random==1@corner_random==2@corner_random==3@corner_random==4", effects: [{ modifier: 750, type: 9 }], precondition: "" }], rarity: 6 }, "102403111": { alternatives: [{ baseDuration: 18e3, condition: "distance_type==4&running_style==1&is_lastspurt==1&corner==0&order==1", effects: [{ modifier: 4e3, type: 31 }, { modifier: -200, type: 9 }], precondition: "" }, { baseDuration: 9e3, condition: "distance_type==4&running_style==1&is_lastspurt==1&corner==0&order<=3", effects: [{ modifier: 4e3, type: 31 }], precondition: "" }], rarity: 6 }, "102403211": { alternatives: [{ baseDuration: 4e4, condition: "running_style==1&phase_random==1&order_rate<=50", effects: [{ modifier: 2500, type: 27 }], precondition: "" }, { baseDuration: 3e4, condition: "is_activate_other_skill_detail==1&is_last_straight==1", effects: [{ modifier: 1500, type: 22 }], precondition: "" }], rarity: 6 }, "10241": { alternatives: [{ baseDuration: 5e4, condition: "is_finalcorner==1&blocked_side_continuetime>=2&order<=3", effects: [{ modifier: 1500, type: 27 }, { modifier: 2e3, type: 31 }], precondition: "" }], rarity: 3 }, "102501111": { alternatives: [{ baseDuration: 3e4, condition: "running_style==3&phase_random==1&order_rate>=40", effects: [{ modifier: 550, type: 9 }, { modifier: 1500, type: 27 }], precondition: "" }], rarity: 6 }, "102501211": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==4&phase_random==1&order>=5", effects: [{ modifier: -100, type: 9 }, { modifier: 350, type: 9 }, { modifier: 1500, type: 27 }], precondition: "" }], rarity: 6 }, "102502111": { alternatives: [{ baseDuration: 9e3, condition: "running_style==4&is_lastspurt==1&corner==0", effects: [{ modifier: 4e3, type: 31 }], precondition: "" }, { baseDuration: 3e4, condition: "is_activate_other_skill_detail==1&is_last_straight==1", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 6 }, "102502211": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==4&running_style==4&phase_firsthalf_random==2&lastspurt==2", effects: [{ modifier: 4500, type: 22 }], precondition: "" }], rarity: 6 }, "102601111": { alternatives: [{ baseDuration: 12e3, condition: "running_style==1&phase==0", effects: [{ modifier: 5e3, type: 31 }], precondition: "" }], rarity: 6 }, "102601211": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==3&phase_random==1&order<=3", effects: [{ modifier: 550, type: 9 }, { modifier: 1500, type: 27 }], precondition: "" }], rarity: 6 }, "102602111": { alternatives: [{ baseDuration: 3e4, condition: "running_style==1&phase_random==1&order_rate<=50", effects: [{ modifier: 3500, type: 27 }, { modifier: 150, type: 9 }], precondition: "" }], rarity: 6 }, "102602121": { alternatives: [{ baseDuration: 4e4, condition: "running_style==1&phase_laterhalf_random==1&order_rate<=50&base_wiz>=1200", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 6 }, "102602211": { alternatives: [{ baseDuration: -1, condition: "always==1", effects: [{ modifier: 4e3, type: 10 }, { modifier: 1e5, type: 32 }], precondition: "" }], rarity: 6 }, "102701111": { alternatives: [{ baseDuration: 24e3, condition: "distance_type==3&phase_random==1&order_rate<=50", effects: [{ modifier: 4500, type: 27 }], precondition: "" }], rarity: 6 }, "102701211": { alternatives: [{ baseDuration: 3e4, condition: "running_style==3&is_finalcorner==1&corner!=0&is_behind_in==1&change_order_onetime<0", effects: [{ modifier: 4500, type: 27 }], precondition: "" }], rarity: 6 }, "102702111": { alternatives: [{ baseDuration: 3e4, condition: "running_style==2&down_slope_random==1", effects: [{ modifier: 4e3, type: 31 }], precondition: "" }], rarity: 6 }, "102702211": { alternatives: [{ baseDuration: 24e3, condition: "down_slope_random==1", effects: [{ modifier: 4500, type: 27 }], precondition: "" }], rarity: 6 }, "10271": { alternatives: [{ baseDuration: 4e4, condition: "phase>=2&corner!=0&order_rate>=65&order_rate<=70", effects: [{ modifier: 3e3, type: 31 }], precondition: "" }], rarity: 3 }, "102801111": { alternatives: [{ baseDuration: 4e4, condition: "distance_type==1&phase_random==1", effects: [{ modifier: 350, type: 28 }, { modifier: 3e3, type: 31 }, { modifier: 1500, type: 27 }], precondition: "" }], rarity: 6 }, "102801211": { alternatives: [{ baseDuration: 4e4, condition: "running_style==2&phase_laterhalf_random==1", effects: [{ modifier: 350, type: 9 }, { modifier: 2500, type: 27 }], precondition: "" }], rarity: 6 }, "102801221": { alternatives: [{ baseDuration: 24e3, condition: "running_style==2&phase_random==1&distance_type==1", effects: [{ modifier: 5500, type: 27 }, { modifier: -200, type: 9 }], precondition: "" }], rarity: 6 }, "102901111": { alternatives: [{ baseDuration: 4e4, condition: "infront_near_lane_time>=1&is_lastspurt==1&hp_per>=1", effects: [{ modifier: 4e3, type: 31 }, { modifier: 250, type: 28 }], precondition: "" }], rarity: 6 }, "102901211": { alternatives: [{ baseDuration: 4e4, condition: "running_style==2&down_slope_random==1", effects: [{ modifier: 3e3, type: 31 }], precondition: "" }], rarity: 6 }, "102901221": { alternatives: [{ baseDuration: 3e4, condition: "running_style==2&down_slope_random==1", effects: [{ modifier: 3e3, type: 31 }], precondition: "" }, { baseDuration: 3e4, condition: "is_activate_other_skill_detail==1&remain_distance<=300", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 6 }, "102902111": { alternatives: [{ baseDuration: 24e3, condition: "phase_random==1&running_style==2", effects: [{ modifier: 4500, type: 27 }], precondition: "" }], rarity: 6 }, "102902211": { alternatives: [{ baseDuration: 3e4, condition: "all_corner_random==1", effects: [{ modifier: 4e3, type: 31 }, { modifier: 1500, type: 27 }], precondition: "" }], rarity: 6 }, "102902221": { alternatives: [{ baseDuration: 4e4, condition: "ground_type==1&distance_type==2&is_finalcorner_random==1", effects: [{ modifier: 4e3, type: 31 }], precondition: "" }, { baseDuration: 3e4, condition: "distance_type==2&is_finalcorner_random==1", effects: [{ modifier: 4e3, type: 31 }], precondition: "" }], rarity: 6 }, "103001111": { alternatives: [{ baseDuration: 3e4, condition: "running_style==2&down_slope_random==1", effects: [{ modifier: 3e3, type: 31 }, { modifier: 1500, type: 22 }], precondition: "" }], rarity: 6 }, "103001211": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==4&phase_random==1", effects: [{ modifier: 550, type: 9 }, { modifier: 1500, type: 27 }], precondition: "" }], rarity: 6 }, "103002111": { alternatives: [{ baseDuration: 3e4, condition: "running_style==2&phase_laterhalf_random==0&order_rate<=50", effects: [{ modifier: 550, type: 9 }, { modifier: 1500, type: 27 }], precondition: "" }], rarity: 6 }, "103002211": { alternatives: [{ baseDuration: 3e4, condition: "phase==1&order_rate<=50&temptation_opponent_count_behind>=1", effects: [{ modifier: -300, type: 9 }, { modifier: 3500, type: 27 }], precondition: "" }], rarity: 6 }, "103003111": { alternatives: [{ baseDuration: 3e4, condition: "up_slope_random_later_half==1&running_style==2", effects: [{ modifier: 4e3, type: 31 }], precondition: "" }], rarity: 6 }, "103003211": { alternatives: [{ baseDuration: -1, condition: "track_id==10008", effects: [{ modifier: 8e5, type: 2 }, { modifier: 8e5, type: 5 }, { modifier: 8e5, type: 1 }], precondition: "" }], rarity: 6 }, "103101111": { alternatives: [{ baseDuration: 3e4, condition: "running_style==1&slope==1&accumulatetime>=10", effects: [{ modifier: 550, type: 9 }, { modifier: 1500, type: 27 }], precondition: "" }], rarity: 6 }, "103101211": { alternatives: [{ baseDuration: 4e4, condition: "distance_type==3&phase_random==1&order<=3", effects: [{ modifier: 3500, type: 27 }, { modifier: -1500, type: 21 }], precondition: "" }], rarity: 6 }, "103102111": { alternatives: [{ baseDuration: -1, condition: "always==1", effects: [{ modifier: 4e3, type: 10 }, { modifier: 1e5, type: 32 }], precondition: "" }], rarity: 6 }, "103102211": { alternatives: [{ baseDuration: 3e4, condition: "running_style==1&all_corner_random==1", effects: [{ modifier: 3500, type: 27 }, { modifier: 2e3, type: 31 }], precondition: "" }], rarity: 6 }, "103201111": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==3&phase_random==2", effects: [{ modifier: 4500, type: 27 }], precondition: "" }], rarity: 6 }, "103201211": { alternatives: [{ baseDuration: 3e4, condition: "running_style==2&phase_random==1&order_rate<=50", effects: [{ modifier: 550, type: 9 }, { modifier: 1500, type: 27 }], precondition: "" }], rarity: 6 }, "103202111": { alternatives: [{ baseDuration: -1, condition: "running_style==2&distance_type==3&base_speed>=1200&base_wiz>=1200", effects: [{ modifier: 1e6, type: 1 }], precondition: "" }, { baseDuration: -1, condition: "running_style==2&distance_type==3&base_speed>=1200&base_wiz<1200", effects: [{ modifier: 8e5, type: 1 }], precondition: "" }], rarity: 6 }, "103202211": { alternatives: [{ baseDuration: 24e3, condition: "phase_random==1&running_style==2", effects: [{ modifier: 3500, type: 27 }, { modifier: 500, type: 27 }], precondition: "" }], rarity: 6 }, "103203111": { alternatives: [{ baseDuration: 24e3, condition: "running_style==2&phase_laterhalf_random==1&order_rate<=50&distance_type==3", effects: [{ modifier: 5e3, type: 27 }], precondition: "" }, { baseDuration: 24e3, condition: "running_style==2&phase_laterhalf_random==1&order_rate<=50", effects: [{ modifier: 4500, type: 27 }], precondition: "" }], rarity: 6 }, "103203211": { alternatives: [{ baseDuration: 3e4, condition: "near_count>=3&accumulatetime>=5&course_distance==2000", effects: [{ modifier: 1500, type: 27 }, { modifier: 3e3, type: 27 }], precondition: "" }, { baseDuration: 3e4, condition: "near_count>=3&accumulatetime>=5", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 6 }, "10321": { alternatives: [{ baseDuration: 4e4, condition: "distance_rate>=50&corner!=0&order>=3&order_rate<=40", effects: [{ modifier: 350, type: 9 }, { modifier: 1500, type: 27 }], precondition: "" }], rarity: 3 }, "103301111": { alternatives: [{ baseDuration: 3e4, condition: "running_style==4&infront_near_lane_time>=1&accumulatetime>=10", effects: [{ modifier: 550, type: 9 }, { modifier: 1500, type: 27 }], precondition: "" }], rarity: 6 }, "103301211": { alternatives: [{ baseDuration: 3e4, condition: "running_style==4&phase_firsthalf_random==3&is_lastspurt==1", effects: [{ modifier: 4500, type: 27 }], precondition: "phase>=2&distance_diff_rate>=50" }], rarity: 6 }, "103302111": { alternatives: [{ baseDuration: 4e4, condition: "running_style==4&distance_type==3&phase_random==1&order_rate>=40&course_distance==2400", effects: [{ modifier: 4500, type: 27 }], precondition: "" }, { baseDuration: 3e4, condition: "running_style==4&distance_type==3&phase_random==1&order_rate>=40", effects: [{ modifier: 4500, type: 27 }], precondition: "" }], rarity: 6 }, "103302211": { alternatives: [{ baseDuration: 4e4, condition: "distance_type==3&phase_firsthalf_random==2&course_distance==2400", effects: [{ modifier: 4500, type: 22 }], precondition: "" }, { baseDuration: 24e3, condition: "distance_type==3&phase_firsthalf_random==2", effects: [{ modifier: 4500, type: 22 }], precondition: "" }], rarity: 6 }, "103401111": { alternatives: [{ baseDuration: 3e4, condition: "activate_count_middle>=3", effects: [{ modifier: 4500, type: 27 }], precondition: "" }], rarity: 6 }, "103401211": { alternatives: [{ baseDuration: 18e3, condition: "ground_type==2&phase_random==1&order_rate>=50", effects: [{ modifier: 750, type: 9 }, { modifier: 3500, type: 27 }], precondition: "" }], rarity: 6 }, "103401221": { alternatives: [{ baseDuration: 18e3, condition: "distance_type==3&phase_random==1&order_rate>=50", effects: [{ modifier: 350, type: 9 }, { modifier: 4500, type: 27 }], precondition: "" }], rarity: 6 }, "103402111": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==4&is_finalcorner==1&corner!=0&lane_type==0", effects: [{ modifier: 4500, type: 27 }], precondition: "" }], rarity: 6 }, "103402211": { alternatives: [{ baseDuration: 9e3, condition: "running_style==4&is_lastspurt==1&corner==0", effects: [{ modifier: 4e3, type: 31 }, { modifier: 5e4, type: 8 }], precondition: "" }], rarity: 6 }, "103501111": { alternatives: [{ baseDuration: 4e4, condition: "running_style==3&is_overtake==1&accumulatetime>=5", effects: [{ modifier: 3e3, type: 31 }, { modifier: 1500, type: 27 }], precondition: "" }], rarity: 6 }, "103501211": { alternatives: [{ baseDuration: 24e3, condition: "running_style==3&phase_random==1&order_rate>=40", effects: [{ modifier: 3500, type: 27 }, { modifier: 150, type: 9 }], precondition: "" }], rarity: 6 }, "103502111": { alternatives: [{ baseDuration: 4e4, condition: "running_style==3&up_slope_random==1", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 6 }, "103502211": { alternatives: [{ baseDuration: 4e4, condition: "distance_type==3&is_last_straight==1&phase>=2&order_rate>=20&order_rate<=60", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 6 }, "103503111": { alternatives: [{ baseDuration: 24e3, condition: "distance_type==3&phase_laterhalf_random==1&order>=4&track_id==10006&course_distance==2400", effects: [{ modifier: 4500, type: 27 }], precondition: "" }, { baseDuration: 24e3, condition: "distance_type==3&phase_laterhalf_random==1&order>=4", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 6 }, "103503211": { alternatives: [{ baseDuration: 4e4, condition: "running_style==3&phase_random==1&order_rate>=40&order_rate<=90", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 6 }, "10351": { alternatives: [{ baseDuration: 5e4, condition: "is_last_straight==1&order<=5", effects: [{ modifier: 2500, type: 27 }], precondition: "is_finalcorner==1&blocked_side_continuetime>=2" }], rarity: 3 }, "103601111": { alternatives: [{ baseDuration: 24e3, condition: "distance_type==3&phase_random==1&order_rate>=50", effects: [{ modifier: 3500, type: 27 }, { modifier: 150, type: 9 }], precondition: "" }], rarity: 6 }, "103601211": { alternatives: [{ baseDuration: 3e4, condition: "running_style==4&straight_random==1", effects: [{ modifier: 3500, type: 27 }, { modifier: 1500, type: 22 }], precondition: "" }], rarity: 6 }, "103602111": { alternatives: [{ baseDuration: 0, condition: "distance_type==4&phase_random==1", effects: [{ modifier: -100, type: 9 }, { modifier: 550, type: 9 }], precondition: "" }], rarity: 6 }, "103602121": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==4&phase==1&change_order_onetime>0&order_rate>=50&order_rate<=80", effects: [{ modifier: -100, type: 9 }, { modifier: 3500, type: 22 }], precondition: "" }], rarity: 6 }, "103602211": { alternatives: [{ baseDuration: 4e4, condition: "distance_type==4&is_finalcorner==1&corner!=0&lane_type==0", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 6 }, "103701111": { alternatives: [{ baseDuration: 3e4, condition: "phase_random==2", effects: [{ modifier: 350, type: 28 }, { modifier: 2500, type: 22 }], precondition: "" }], rarity: 6 }, "103701211": { alternatives: [{ baseDuration: 24e3, condition: "is_lastspurt==1&phase_firsthalf_random==3", effects: [{ modifier: 4500, type: 27 }], precondition: "" }], rarity: 6 }, "103702111": { alternatives: [{ baseDuration: 4e4, condition: "distance_type==3&phase_random==2", effects: [{ modifier: 3500, type: 22 }], precondition: "" }], rarity: 6 }, "103702121": { alternatives: [{ baseDuration: 0, condition: "distance_type==3&phase_random==1", effects: [{ modifier: 750, type: 9 }], precondition: "" }], rarity: 6 }, "103702211": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==3&straight_random==1", effects: [{ modifier: 4500, type: 27 }], precondition: "" }], rarity: 6 }, "103703111": { alternatives: [{ baseDuration: -1, condition: "track_id==10006", effects: [{ modifier: 8e5, type: 2 }, { modifier: 8e5, type: 5 }, { modifier: 8e5, type: 1 }], precondition: "" }], rarity: 6 }, "103703211": { alternatives: [{ baseDuration: 4e4, condition: "running_style==3&phase_random==1&track_id==10006", effects: [{ modifier: 4500, type: 27 }, { modifier: 150, type: 9 }], precondition: "" }, { baseDuration: 4e4, condition: "running_style==3&phase_random==1", effects: [{ modifier: 4500, type: 27 }, { modifier: -300, type: 9 }], precondition: "" }], rarity: 6 }, "103801111": { alternatives: [{ baseDuration: 3e4, condition: "running_style==2&phase_random==2&order_rate<=50", effects: [{ modifier: -5e4, type: 8 }, { modifier: 1500, type: 22 }], precondition: "" }], rarity: 6 }, "103801211": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==1&phase_random==0&order_rate<=50&accumulatetime>=5", effects: [{ modifier: -2500, type: 21 }, { modifier: 1500, type: 27 }], precondition: "" }], rarity: 6 }, "103802111": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==1&phase_random==0&order_rate<=50&accumulatetime>=5", effects: [{ modifier: -2500, type: 21 }, { modifier: 1500, type: 27 }], precondition: "" }], rarity: 6 }, "103802121": { alternatives: [{ baseDuration: 4e4, condition: "distance_type==1&phase_laterhalf_random==0&order_rate<=50&accumulatetime>=5", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 6 }, "103802211": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==1&phase_random==2", effects: [{ modifier: 4e3, type: 31 }, { modifier: 5e4, type: 8 }], precondition: "" }], rarity: 6 }, "103901111": { alternatives: [{ baseDuration: 3e4, condition: "infront_near_lane_time>=1&is_lastspurt==1&hp_per>=1", effects: [{ modifier: 5e3, type: 31 }, { modifier: 250, type: 28 }], precondition: "" }], rarity: 6 }, "103901211": { alternatives: [{ baseDuration: 3e4, condition: "running_style==3&is_finalcorner==1&corner!=0&is_behind_in==1&change_order_onetime<0", effects: [{ modifier: 3500, type: 27 }, { modifier: 2e3, type: 31 }], precondition: "" }], rarity: 6 }, "103902111": { alternatives: [{ baseDuration: 24e3, condition: "running_style==3&is_last_straight==1&order>=2&distance_diff_top<=10", effects: [{ modifier: 5500, type: 27 }], precondition: "" }], rarity: 6 }, "103902211": { alternatives: [{ baseDuration: 24e3, condition: "distance_type==2&down_slope_random==1@distance_type==3&down_slope_random==1", effects: [{ modifier: 3500, type: 27 }, { modifier: 2e3, type: 31 }], precondition: "" }], rarity: 6 }, "104001111": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==2&phase_laterhalf_random==0&order_rate>50", effects: [{ modifier: 550, type: 9 }, { modifier: -2e3, type: 21 }, { modifier: 2500, type: 27 }], precondition: "" }], rarity: 6 }, "104001211": { alternatives: [{ baseDuration: 18e3, condition: "running_style==3&phase_firsthalf_random==2&order_rate>=40", effects: [{ modifier: 4e3, type: 31 }, { modifier: 5e4, type: 8 }], precondition: "" }], rarity: 6 }, "104001221": { alternatives: [{ baseDuration: 18e3, condition: "running_style==3&phase_firsthalf_random==2&order_rate>=40", effects: [{ modifier: 4e3, type: 31 }], precondition: "" }, { baseDuration: 3e4, condition: "is_activate_other_skill_detail==1&remain_distance<=201&remain_distance>=199", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 6 }, "104002111": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==2&phase_random==0&order_rate>50&accumulatetime>=3", effects: [{ modifier: -3e3, type: 31 }, { modifier: 150, type: 9 }], precondition: "" }], rarity: 6 }, "104002211": { alternatives: [{ baseDuration: 3e4, condition: "running_style==3&phase_laterhalf_random==0&order_rate>=40", effects: [{ modifier: 550, type: 9 }, { modifier: 1500, type: 27 }], precondition: "" }], rarity: 6 }, "104101111": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==1&phase_random==2", effects: [{ modifier: 4e3, type: 31 }, { modifier: 1500, type: 27 }], precondition: "" }], rarity: 6 }, "104101211": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==1&phase==1&bashin_diff_behind>=3&order==1", effects: [{ modifier: 4500, type: 27 }], precondition: "" }], rarity: 6 }, "104102111": { alternatives: [{ baseDuration: 24e3, condition: "distance_type==1&phase_laterhalf_random==1&order_rate<=50", effects: [{ modifier: 4500, type: 27 }], precondition: "" }], rarity: 6 }, "104102211": { alternatives: [{ baseDuration: 4e4, condition: "distance_type==1&straight_random==1", effects: [{ modifier: 3500, type: 22 }], precondition: "" }], rarity: 6 }, "10411": { alternatives: [{ baseDuration: 5e4, condition: "distance_rate>=50&order<=3&blocked_side_continuetime>=2", effects: [{ modifier: 2500, type: 27 }], precondition: "" }], rarity: 3 }, "104201111": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==1&straight_random==1@distance_type==2&straight_random==1", effects: [{ modifier: 3500, type: 27 }, { modifier: 1500, type: 22 }], precondition: "" }], rarity: 6 }, "104201211": { alternatives: [{ baseDuration: 4e4, condition: "distance_type==2&is_overtake==1&accumulatetime>=5@distance_type==1&is_overtake==1&accumulatetime>=5", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 6 }, "104202111": { alternatives: [{ baseDuration: 3e4, condition: "phase_first_half_straight_random==2&track_id==10006&distance_type==1@phase_first_half_straight_random==2&track_id==10006&distance_type==2", effects: [{ modifier: 4e3, type: 31 }, { modifier: 1500, type: 27 }], precondition: "" }, { baseDuration: 3e4, condition: "phase_straight_random==2&track_id!=10006&distance_type==1@phase_straight_random==2&track_id!=10006&distance_type==2", effects: [{ modifier: 4e3, type: 31 }, { modifier: 1500, type: 27 }], precondition: "" }], rarity: 6 }, "104202211": { alternatives: [{ baseDuration: 4e4, condition: "phase_corner_random==1&is_finalcorner==1&corner!=0&distance_type==1@phase_corner_random==1&is_finalcorner==1&corner!=0&distance_type==2", effects: [{ modifier: 4500, type: 27 }], precondition: "" }, { baseDuration: 4e4, condition: "phase_corner_random==1&distance_type==1@phase_corner_random==1&distance_type==2", effects: [{ modifier: 2500, type: 27 }], precondition: "" }], rarity: 6 }, "104301111": { alternatives: [{ baseDuration: 3e4, condition: "ground_type==2&phase_random==3&order_rate<=50&is_lastspurt==1", effects: [{ modifier: 4500, type: 27 }], precondition: "" }], rarity: 6 }, "104301211": { alternatives: [{ baseDuration: -1, condition: "ground_type==2&ground_condition==3@ground_type==2&ground_condition==4", effects: [{ modifier: 8e5, type: 1 }, { modifier: 8e5, type: 3 }], precondition: "" }], rarity: 6 }, "104301221": { alternatives: [{ baseDuration: -1, condition: "ground_type==2&ground_condition>=3", effects: [{ modifier: 4e5, type: 1 }, { modifier: 4e5, type: 3 }, { modifier: 2e5, type: 32 }], precondition: "" }, { baseDuration: -1, condition: "ground_type==2&ground_condition<=2", effects: [{ modifier: 4e5, type: 1 }, { modifier: 4e5, type: 3 }], precondition: "" }], rarity: 6 }, "104401111": { alternatives: [{ baseDuration: 3e4, condition: "running_style==4&slope==2&accumulatetime>=10", effects: [{ modifier: 550, type: 9 }, { modifier: 1500, type: 27 }], precondition: "" }], rarity: 6 }, "104401211": { alternatives: [{ baseDuration: 3e4, condition: "running_style==4&phase_random==2&order>=2", effects: [{ modifier: -2500, type: 21 }, { modifier: 1500, type: 22 }], precondition: "" }], rarity: 6 }, "104401221": { alternatives: [{ baseDuration: 4e4, condition: "running_style==4&phase_random==2", effects: [{ modifier: 3500, type: 22 }], precondition: "" }], rarity: 6 }, "104402111": { alternatives: [{ baseDuration: 12e3, condition: "course_distance==2200&running_style==4&phase_firstquarter_random==2", effects: [{ modifier: 5e3, type: 31 }, { modifier: -200, type: 9 }], precondition: "" }, { baseDuration: 12e3, condition: "course_distance!=2200&running_style==4&phase_firsthalf_random==2", effects: [{ modifier: 4e3, type: 31 }], precondition: "" }], rarity: 6 }, "104402211": { alternatives: [{ baseDuration: 24e3, condition: "running_style==4&phase_random==1", effects: [{ modifier: 4500, type: 27 }, { modifier: -200, type: 9 }], precondition: "" }, { baseDuration: 3e4, condition: "is_activate_other_skill_detail==1&phase>=2&is_last_straight==1", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 6 }, "104501111": { alternatives: [{ baseDuration: 4e4, condition: "running_style==2&phase_random==2&order_rate<=50", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 6 }, "104501211": { alternatives: [{ baseDuration: 0, condition: "corner_random==1@corner_random==2@corner_random==3@corner_random==4", effects: [{ modifier: 750, type: 9 }], precondition: "" }], rarity: 6 }, "104502111": { alternatives: [{ baseDuration: 24e3, condition: "all_corner_random==1", effects: [{ modifier: 3500, type: 27 }, { modifier: 150, type: 9 }], precondition: "" }], rarity: 6 }, "104502211": { alternatives: [{ baseDuration: 0, condition: "distance_type==3&phase==1&blocked_front_continuetime>=1", effects: [{ modifier: -300, type: 9 }, { modifier: 150, type: 9 }], precondition: "" }], rarity: 6 }, "104503111": { alternatives: [{ baseDuration: 24e3, condition: "phase_random==1&running_style==2", effects: [{ modifier: 4500, type: 27 }], precondition: "" }], rarity: 6 }, "104503211": { alternatives: [{ baseDuration: 12e3, condition: "distance_type==4&running_style==2&phase==2", effects: [{ modifier: 4e3, type: 31 }], precondition: "distance_diff_top<=15&distance_rate>=60&phase==1" }], rarity: 6 }, "10451": { alternatives: [{ baseDuration: 0, condition: "phase_random==1&order>=2&order_rate<=40", effects: [{ modifier: 550, type: 9 }], precondition: "" }], rarity: 3 }, "104601111": { alternatives: [{ baseDuration: 4e4, condition: "phase_random==0", effects: [{ modifier: 450, type: 28 }], precondition: "" }], rarity: 6 }, "104601121": { alternatives: [{ baseDuration: 4e4, condition: "phase_random==2", effects: [{ modifier: 2500, type: 22 }], precondition: "" }], rarity: 6 }, "104601211": { alternatives: [{ baseDuration: 24e3, condition: "ground_type==2&phase==1&blocked_side_continuetime>=2", effects: [{ modifier: 3500, type: 27 }, { modifier: 150, type: 9 }], precondition: "" }], rarity: 6 }, "104602111": { alternatives: [{ baseDuration: 24e3, condition: "ground_type==2&phase==1&blocked_side_continuetime>=2", effects: [{ modifier: 3500, type: 27 }, { modifier: 150, type: 9 }], precondition: "" }], rarity: 6 }, "104602121": { alternatives: [{ baseDuration: 24e3, condition: "ground_type==2&phase==1&blocked_side_continuetime>=2", effects: [{ modifier: 4500, type: 27 }], precondition: "" }], rarity: 6 }, "104602211": { alternatives: [{ baseDuration: 3e4, condition: "ground_type==2&phase_random==2&order_rate<=50", effects: [{ modifier: 5e3, type: 31 }], precondition: "" }], rarity: 6 }, "104701111": { alternatives: [{ baseDuration: 0, condition: "running_style==2&phase_random==1&order_rate<=50", effects: [{ modifier: 750, type: 9 }], precondition: "" }], rarity: 6 }, "104701121": { alternatives: [{ baseDuration: 3e4, condition: "running_style==2&phase_random==1&order_rate<=50", effects: [{ modifier: 150, type: 9 }, { modifier: 3500, type: 27 }], precondition: "" }], rarity: 6 }, "104701211": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==3&all_corner_random==1@distance_type==4&all_corner_random==1", effects: [{ modifier: 4500, type: 27 }], precondition: "" }], rarity: 6 }, "104702111": { alternatives: [{ baseDuration: 3e4, condition: "phase_latter_half_straight_random==1&running_style==2", effects: [{ modifier: 4500, type: 27 }], precondition: "" }], rarity: 6 }, "104702211": { alternatives: [{ baseDuration: -1, condition: "season==3@season==4", effects: [{ modifier: 8e5, type: 1 }, { modifier: 8e5, type: 3 }], precondition: "" }], rarity: 6 }, "104801111": { alternatives: [{ baseDuration: 18e3, condition: "running_style==3&phase_firsthalf_random==2@running_style==2&phase_firsthalf_random==2", effects: [{ modifier: 4e3, type: 31 }, { modifier: 150, type: 9 }], precondition: "" }], rarity: 6 }, "104801211": { alternatives: [{ baseDuration: 3e4, condition: "running_style==2&phase_random==1@running_style==3&phase_random==1", effects: [{ modifier: 550, type: 9 }, { modifier: 1500, type: 27 }], precondition: "" }], rarity: 6 }, "104802111": { alternatives: [{ baseDuration: 18e3, condition: "distance_type==3&is_finalcorner_random==1&order_rate>=40&track_id==10006", effects: [{ modifier: 4e3, type: 31 }, { modifier: 2500, type: 27 }], precondition: "" }, { baseDuration: 18e3, condition: "distance_type==3&is_finalcorner_random==1&order_rate>=40&track_id!=10006", effects: [{ modifier: 4e3, type: 31 }], precondition: "" }], rarity: 6 }, "104802211": { alternatives: [{ baseDuration: 24e3, condition: "running_style==3&distance_type==3&is_finalcorner_random==1&order_rate>=30&order_rate<=80&track_id==10006", effects: [{ modifier: 3500, type: 27 }, { modifier: 2e3, type: 31 }], precondition: "" }, { baseDuration: 24e3, condition: "running_style==3&is_finalcorner_random==1&order_rate>=30&order_rate<=80&track_id!=10006&distance_type!=3@running_style==3&is_finalcorner_random==1&order_rate>=30&order_rate<=80&track_id==10006&distance_type!=3@running_style==3&is_finalcorner_random==1&order_rate>=30&order_rate<=80&track_id!=10006&distance_type==3", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 6 }, "104802221": { alternatives: [{ baseDuration: 24e3, condition: "running_style==3&distance_type==3&phase_firsthalf_random==2&order_rate>=30&order_rate<=80&track_id==10006", effects: [{ modifier: 5500, type: 22 }], precondition: "" }, { baseDuration: 24e3, condition: "running_style==3&distance_type==3&phase_firsthalf_random==2&order_rate>=30&order_rate<=80", effects: [{ modifier: 4500, type: 22 }], precondition: "" }], rarity: 6 }, "104901111": { alternatives: [{ baseDuration: 18e3, condition: "distance_rate_after_random==50", effects: [{ modifier: 5500, type: 27 }, { modifier: -1e4, type: 9 }], precondition: "" }], rarity: 6 }, "104901211": { alternatives: [{ baseDuration: -1, condition: "popularity<=3&random_lot==30", effects: [{ modifier: 1e6, type: 1 }, { modifier: 1e6, type: 3 }, { modifier: 1e6, type: 4 }], precondition: "" }, { baseDuration: -1, condition: "popularity>=4&random_lot==60", effects: [{ modifier: 1e6, type: 1 }, { modifier: 1e6, type: 3 }, { modifier: 1e6, type: 4 }], precondition: "" }], rarity: 6 }, "105001111": { alternatives: [{ baseDuration: 3e4, condition: "running_style==4&phase_random==1&distance_diff_rate>=75", effects: [{ modifier: 550, type: 9 }, { modifier: 1500, type: 27 }], precondition: "" }], rarity: 6 }, "105001211": { alternatives: [{ baseDuration: 9e3, condition: "running_style==4&is_lastspurt==1&corner==0", effects: [{ modifier: 4e3, type: 31 }, { modifier: 5e4, type: 8 }], precondition: "" }], rarity: 6 }, "105002111": { alternatives: [{ baseDuration: 4e4, condition: "phase_random==1&running_style==4&order_rate>=50", effects: [{ modifier: 3500, type: 27 }, { modifier: 350, type: 28 }], precondition: "" }], rarity: 6 }, "105002211": { alternatives: [{ baseDuration: 4e4, condition: "distance_type==3&phase_firsthalf_random==2&order_rate>=40", effects: [{ modifier: 4e3, type: 31 }], precondition: "" }], rarity: 6 }, "105003111": { alternatives: [{ baseDuration: 4e4, condition: "running_style==4&phase_laterhalf_random==1&order_rate>=40", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 6 }, "105003211": { alternatives: [{ baseDuration: 24e3, condition: "running_style==4&is_last_straight==1&order>=2&distance_diff_top<=10", effects: [{ modifier: 5500, type: 27 }], precondition: "" }], rarity: 6 }, "105101111": { alternatives: [{ baseDuration: 3e4, condition: "straight_random==1", effects: [{ modifier: 3500, type: 27 }, { modifier: 150, type: 9 }], precondition: "" }], rarity: 6 }, "105101121": { alternatives: [{ baseDuration: 3e4, condition: "straight_random==1", effects: [{ modifier: 4500, type: 27 }], precondition: "" }], rarity: 6 }, "105101211": { alternatives: [{ baseDuration: 3e4, condition: "running_style==2&down_slope_random==1", effects: [{ modifier: 4e3, type: 31 }], precondition: "" }], rarity: 6 }, "105102111": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==2&all_corner_random==1", effects: [{ modifier: 1500, type: 27 }, { modifier: 3e3, type: 27 }], precondition: "" }], rarity: 6 }, "105102211": { alternatives: [{ baseDuration: 24e3, condition: "distance_type==1&down_slope_random==1@distance_type==2&down_slope_random==1", effects: [{ modifier: 3500, type: 27 }, { modifier: 2e3, type: 31 }], precondition: "" }], rarity: 6 }, "105102221": { alternatives: [{ baseDuration: 24e3, condition: "distance_type==2&down_slope_random==1", effects: [{ modifier: 1500, type: 27 }, { modifier: 3e3, type: 27 }], precondition: "" }], rarity: 6 }, "105201111": { alternatives: [{ baseDuration: 2e4, condition: "phase<=1&accumulatetime>=5&blocked_front_continuetime>=1", effects: [{ modifier: 750, type: 9 }, { modifier: 350, type: 28 }], precondition: "" }], rarity: 6 }, "105201211": { alternatives: [{ baseDuration: 3e4, condition: "phase==1&change_order_onetime>0", effects: [{ modifier: 550, type: 9 }, { modifier: 1500, type: 27 }], precondition: "" }], rarity: 6 }, "105202111": { alternatives: [{ baseDuration: 3e4, condition: "phase_random==0", effects: [{ modifier: 450, type: 28 }, { modifier: 1500, type: 27 }], precondition: "" }], rarity: 6 }, "105202121": { alternatives: [{ baseDuration: 3e4, condition: "phase_random==2", effects: [{ modifier: 450, type: 28 }, { modifier: 3e3, type: 31 }], precondition: "" }], rarity: 6 }, "105202211": { alternatives: [{ baseDuration: 4e4, condition: "running_style==3&is_overtake==1&accumulatetime>=5", effects: [{ modifier: 3e3, type: 31 }, { modifier: 1500, type: 27 }], precondition: "" }], rarity: 6 }, "10521": { alternatives: [{ baseDuration: 0, condition: "is_finalcorner==1&corner!=0&order_rate>50&near_count>=1", effects: [{ modifier: 350, type: 9 }], precondition: "" }], rarity: 3 }, "105301111": { alternatives: [{ baseDuration: 3e4, condition: "running_style==3&is_finalcorner==1&corner!=0&is_behind_in==1&change_order_onetime<0", effects: [{ modifier: 3500, type: 27 }, { modifier: 2e3, type: 31 }], precondition: "" }], rarity: 6 }, "105301121": { alternatives: [{ baseDuration: 4e4, condition: "distance_type==2&running_style==3&is_finalcorner==1&corner!=0&change_order_onetime<0", effects: [{ modifier: 3500, type: 22 }], precondition: "" }], rarity: 6 }, "105301211": { alternatives: [{ baseDuration: 18e3, condition: "distance_type==2&is_finalcorner_random==1&order_rate>=50", effects: [{ modifier: 3500, type: 27 }, { modifier: 2e3, type: 31 }], precondition: "" }], rarity: 6 }, "105302111": { alternatives: [{ baseDuration: 18e3, condition: "running_style==3&phase_firsthalf_random==2&order_rate>=40", effects: [{ modifier: 4e3, type: 31 }], precondition: "" }, { baseDuration: 3e4, condition: "is_activate_other_skill_detail==1&remain_distance<=201&remain_distance>=199", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 6 }, "105302211": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==1&phase_random==2", effects: [{ modifier: 4e3, type: 31 }], precondition: "" }, { baseDuration: 3e4, condition: "is_activate_other_skill_detail==1&remain_distance<=201&remain_distance>=199", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 6 }, "105401111": { alternatives: [{ baseDuration: 24e3, condition: "running_style==3&phase_random==1&order_rate>=40", effects: [{ modifier: 4500, type: 27 }], precondition: "" }], rarity: 6 }, "105401211": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==1&phase_random==2&order_rate>50", effects: [{ modifier: 3500, type: 27 }, { modifier: 2e3, type: 31 }], precondition: "" }], rarity: 6 }, "10541": { alternatives: [{ baseDuration: 4e4, condition: "remain_distance<=150&order_rate<=50", effects: [{ modifier: 3500, type: 27 }], precondition: "order_rate>=45&distance_rate>=50&change_order_onetime<0" }], rarity: 3 }, "105501111": { alternatives: [{ baseDuration: 24e3, condition: "distance_type==3&phase_random==1&order_rate>=50", effects: [{ modifier: 4500, type: 27 }], precondition: "" }], rarity: 6 }, "105501121": { alternatives: [{ baseDuration: 4e4, condition: "running_style==3&phase_random==1&order_rate>=50", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 6 }, "105501211": { alternatives: [{ baseDuration: 3e4, condition: "infront_near_lane_time>=1&is_lastspurt==1&hp_per>=1&remain_distance>=600", effects: [{ modifier: 4e3, type: 31 }, { modifier: 250, type: 28 }, { modifier: 1500, type: 22 }], precondition: "" }, { baseDuration: 3e4, condition: "infront_near_lane_time>=1&is_lastspurt==1&hp_per>=1", effects: [{ modifier: 4e3, type: 31 }, { modifier: 250, type: 28 }], precondition: "" }], rarity: 6 }, "105601111": { alternatives: [{ baseDuration: 4e4, condition: "distance_type==4&phase_random==2", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 6 }, "105601211": { alternatives: [{ baseDuration: -1, condition: "post_number==7", effects: [{ modifier: 8e5, type: 1 }, { modifier: 8e5, type: 2 }, { modifier: 8e5, type: 3 }], precondition: "" }], rarity: 6 }, "105602111": { alternatives: [{ baseDuration: 4e4, condition: "distance_type==4&phase==2&change_order_onetime<0", effects: [{ modifier: 3500, type: 27 }, { modifier: 1e3, type: 31 }], precondition: "" }], rarity: 6 }, "105602211": { alternatives: [{ baseDuration: 4e4, condition: "distance_type==4&is_finalcorner==1&corner!=0&lane_type==0", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 6 }, "10561": { alternatives: [{ baseDuration: 5e4, condition: "phase>=2&order>=3&blocked_front==1", effects: [{ modifier: 2500, type: 27 }, { modifier: 1e3, type: 31 }], precondition: "" }], rarity: 3 }, "105701111": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==3&corner_random==3&order_rate>=50@distance_type==4&corner_random==3&order_rate>=50", effects: [{ modifier: 4500, type: 22 }], precondition: "" }], rarity: 6 }, "105701211": { alternatives: [{ baseDuration: 9e3, condition: "running_style==4&is_lastspurt==1&corner==0", effects: [{ modifier: 4e3, type: 31 }, { modifier: 5e4, type: 8 }], precondition: "" }], rarity: 6 }, "105702111": { alternatives: [{ baseDuration: 4e4, condition: "distance_type==3&corner_random==3@distance_type==4&corner_random==3", effects: [{ modifier: 3500, type: 22 }], precondition: "distance_rate>=50&change_order_onetime<0" }, { baseDuration: 3e4, condition: "distance_type==3&corner_random==3@distance_type==4&corner_random==3", effects: [{ modifier: 3500, type: 22 }], precondition: "" }], rarity: 6 }, "105702211": { alternatives: [{ baseDuration: 12e3, condition: "running_style==4&distance_type==4&phase_firstquarter_random==2&order_rate>=40", effects: [{ modifier: 5e3, type: 31 }], precondition: "" }, { baseDuration: 12e3, condition: "running_style==4&distance_type==4&phase_firstquarter_random==2", effects: [{ modifier: 4e3, type: 31 }], precondition: "" }], rarity: 6 }, "105801111": { alternatives: [{ baseDuration: 4e4, condition: "running_style==2&is_finalcorner_random==1&order_rate<=50", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 6 }, "105801211": { alternatives: [{ baseDuration: 3e4, condition: "phase==1&change_order_onetime>0", effects: [{ modifier: 550, type: 9 }, { modifier: 1500, type: 27 }], precondition: "" }], rarity: 6 }, "105802111": { alternatives: [{ baseDuration: 18e3, condition: "running_style==2&phase_firsthalf_random==2&order_rate<=50", effects: [{ modifier: 4e3, type: 31 }, { modifier: 150, type: 9 }], precondition: "" }], rarity: 6 }, "105802121": { alternatives: [{ baseDuration: 18e3, condition: "running_style==2&phase_firsthalf_random==2&order_rate<=50", effects: [{ modifier: 4e3, type: 31 }], precondition: "" }, { baseDuration: 3e4, condition: "is_activate_other_skill_detail==1&is_last_straight==1", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 6 }, "105802211": { alternatives: [{ baseDuration: 3e4, condition: "corner_random==1@corner_random==2@corner_random==3@corner_random==4", effects: [{ modifier: 550, type: 9 }, { modifier: 1500, type: 27 }], precondition: "" }], rarity: 6 }, "105901111": { alternatives: [{ baseDuration: 3e4, condition: "running_style==3&phase_random==2&order_rate>50", effects: [{ modifier: -300, type: 9 }, { modifier: 1500, type: 22 }], precondition: "" }], rarity: 6 }, "105901121": { alternatives: [{ baseDuration: 4e4, condition: "running_style==3&phase_random==2", effects: [{ modifier: 3500, type: 22 }], precondition: "" }], rarity: 6 }, "105901211": { alternatives: [{ baseDuration: -1, condition: "track_id==10008", effects: [{ modifier: 8e5, type: 2 }, { modifier: 8e5, type: 5 }, { modifier: 8e5, type: 1 }], precondition: "" }], rarity: 6 }, "105902111": { alternatives: [{ baseDuration: 4e4, condition: "running_style==3&distance_rate_after_random==50&order_rate>=30&order_rate<=80", effects: [{ modifier: 3500, type: 27 }, { modifier: 1e3, type: 31 }], precondition: "" }], rarity: 6 }, "105902121": { alternatives: [{ baseDuration: 24e3, condition: "running_style==3&distance_rate_after_random==50", effects: [{ modifier: 4500, type: 22 }], precondition: "" }], rarity: 6 }, "105902211": { alternatives: [{ baseDuration: 4e4, condition: "distance_type==3&phase_firsthalf_random==2&order_rate>=40", effects: [{ modifier: 4e3, type: 31 }], precondition: "" }], rarity: 6 }, "106001111": { alternatives: [{ baseDuration: 4e4, condition: "distance_type==3&phase>=2&blocked_front_continuetime>=1", effects: [{ modifier: 4e3, type: 31 }], precondition: "" }], rarity: 6 }, "106001211": { alternatives: [{ baseDuration: 4e4, condition: "running_style==3&phase_random==2", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 6 }, "106002111": { alternatives: [{ baseDuration: 4e4, condition: "distance_type==3&phase_random==2", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 6 }, "106002211": { alternatives: [{ baseDuration: 3e4, condition: "infront_near_lane_time>=1&is_lastspurt==1&hp_per>=1", effects: [{ modifier: 4e3, type: 31 }, { modifier: 250, type: 28 }, { modifier: 150, type: 9 }], precondition: "" }], rarity: 6 }, "106003111": { alternatives: [{ baseDuration: 3e4, condition: "infront_near_lane_time>=3&accumulatetime>=10", effects: [{ modifier: 4500, type: 27 }], precondition: "" }], rarity: 6 }, "106003211": { alternatives: [{ baseDuration: 4e4, condition: "distance_type==3&running_style==3&phase_firsthalf_random==2&order_rate>=40", effects: [{ modifier: 4e3, type: 31 }], precondition: "" }], rarity: 6 }, "10601": { alternatives: [{ baseDuration: 5e4, condition: "phase>=2&order==3&bashin_diff_behind<=1", effects: [{ modifier: 2500, type: 27 }], precondition: "" }], rarity: 3 }, "106101111": { alternatives: [{ baseDuration: 4e4, condition: "distance_type==1&phase_random==2&order_rate>50", effects: [{ modifier: 3500, type: 27 }, { modifier: 1e3, type: 31 }], precondition: "" }], rarity: 6 }, "106101211": { alternatives: [{ baseDuration: 3e4, condition: "running_style==3&phase_random==1", effects: [{ modifier: 15e4, type: 8 }, { modifier: 1500, type: 27 }], precondition: "" }], rarity: 6 }, "106102111": { alternatives: [{ baseDuration: 4e4, condition: "running_style==3&is_finalcorner==1&corner!=0&is_behind_in==1&change_order_onetime<0", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 6 }, "106102211": { alternatives: [{ baseDuration: -1, condition: "season==1@season==5", effects: [{ modifier: 8e5, type: 1 }, { modifier: 8e5, type: 3 }], precondition: "" }], rarity: 6 }, "106103111": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==1&phase_random==2@distance_type==2&phase_random==2", effects: [{ modifier: 4e3, type: 31 }], precondition: "" }], rarity: 6 }, "106103211": { alternatives: [{ baseDuration: 24e3, condition: "distance_type==1&phase_laterhalf_random==1&order_rate>=40@distance_type==2&phase_laterhalf_random==1&order_rate>=40", effects: [{ modifier: 4500, type: 27 }], precondition: "" }], rarity: 6 }, "106103221": { alternatives: [{ baseDuration: 4e4, condition: "distance_type==1&phase_laterhalf_random==1&order_rate>=40", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 6 }, "10611": { alternatives: [{ baseDuration: 5e4, condition: "temptation_count==0&remain_distance<=201&remain_distance>=199&order>=4&order_rate<=70", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 3 }, "106201111": { alternatives: [{ baseDuration: 3e4, condition: "phase==1&is_surrounded==1", effects: [{ modifier: 550, type: 9 }, { modifier: 1500, type: 27 }], precondition: "" }], rarity: 6 }, "106201211": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==4&phase==2&change_order_onetime<0", effects: [{ modifier: 3500, type: 27 }, { modifier: 1e3, type: 31 }, { modifier: 150, type: 9 }], precondition: "" }], rarity: 6 }, "106202111": { alternatives: [{ baseDuration: 0, condition: "running_style==3&phase_firsthalf_random==1", effects: [{ modifier: 750, type: 9 }], precondition: "" }], rarity: 6 }, "106202211": { alternatives: [{ baseDuration: 4e4, condition: "distance_type==3&phase_firsthalf_random==2&order_rate>=40", effects: [{ modifier: 4e3, type: 31 }], precondition: "" }], rarity: 6 }, "106202221": { alternatives: [{ baseDuration: 18e3, condition: "distance_type==3&phase_firsthalf_random==2&order_rate>=40", effects: [{ modifier: 4e3, type: 31 }], precondition: "" }, { baseDuration: 3e4, condition: "is_activate_other_skill_detail==1&remain_distance<=300", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 6 }, "10621": { alternatives: [{ baseDuration: 5e4, condition: "distance_rate>=50&phase==1&order>=3&order_rate<=70", effects: [{ modifier: 350, type: 9 }, { modifier: 1500, type: 27 }], precondition: "" }], rarity: 3 }, "106301111": { alternatives: [{ baseDuration: 0, condition: "running_style==2&distance_rate>=50&distance_rate<=51@running_style==3&distance_rate>=50&distance_rate<=51", effects: [{ modifier: 750, type: 9 }], precondition: "" }], rarity: 6 }, "106301211": { alternatives: [{ baseDuration: 24e3, condition: "running_style==2&distance_rate>=50&distance_rate<=51@running_style==3&distance_rate>=50&distance_rate<=51", effects: [{ modifier: 5500, type: 27 }, { modifier: -200, type: 9 }], precondition: "" }], rarity: 6 }, "10631": { alternatives: [{ baseDuration: 6e4, condition: "is_lastspurt==1&phase==3&temptation_count==0", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 3 }, "106401111": { alternatives: [{ baseDuration: 4e4, condition: "behind_near_lane_time>=3&accumulatetime>=10", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 6 }, "106401211": { alternatives: [{ baseDuration: 4e4, condition: "distance_type==4&phase_random==1&bashin_diff_behind>=1&order==1", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 6 }, "106401221": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==4&phase==1&blocked_side_continuetime>=2", effects: [{ modifier: 4500, type: 27 }], precondition: "" }], rarity: 6 }, "106402111": { alternatives: [{ baseDuration: 4e4, condition: "distance_type==4&straight_random==1", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 6 }, "106402211": { alternatives: [{ baseDuration: 24e3, condition: "distance_type==4&phase_random==1&track_id==10005&motivation==5&is_used_skill_id==202051", effects: [{ modifier: 4500, type: 27 }, { modifier: 550, type: 9 }], precondition: "" }, { baseDuration: 24e3, condition: "distance_type==4&phase_random==1&track_id==10005&motivation<=4&is_used_skill_id==202051@distance_type==4&phase_random==1&track_id!=10005&is_used_skill_id==202051", effects: [{ modifier: 4500, type: 27 }, { modifier: 350, type: 9 }], precondition: "" }], rarity: 6 }, "106501111": { alternatives: [{ baseDuration: 4e4, condition: "distance_type==2&phase_random==1&order_rate<=50", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 6 }, "106501211": { alternatives: [{ baseDuration: 4e4, condition: "distance_type==2&phase_laterhalf_random==1&order_rate<=50", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 6 }, "106502111": { alternatives: [{ baseDuration: 12e3, condition: "running_style==1&phase==0", effects: [{ modifier: 5e3, type: 31 }], precondition: "" }], rarity: 6 }, "106502211": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==2&phase_laterhalf_random==0&order_rate<=50", effects: [{ modifier: 4500, type: 27 }], precondition: "" }], rarity: 6 }, "106601111": { alternatives: [{ baseDuration: 27e3, condition: "phase_firsthalf_random==1&running_style==1", effects: [{ modifier: 5500, type: 27 }, { modifier: -400, type: 9 }], precondition: "" }], rarity: 6 }, "106601211": { alternatives: [{ baseDuration: 12e3, condition: "running_style==1&phase==0", effects: [{ modifier: 5e3, type: 31 }], precondition: "" }], rarity: 6 }, "10661": { alternatives: [{ baseDuration: 13e4, condition: "distance_rate>=34&distance_rate<=36&order==1&bashin_diff_behind>=1", effects: [{ modifier: 500, type: 27 }], precondition: "" }, { baseDuration: 5e6, condition: "phase==3&is_activate_other_skill_detail==1", effects: [{ modifier: -500, type: 21 }], precondition: "" }], rarity: 3 }, "106701111": { alternatives: [{ baseDuration: 3e4, condition: "running_style==3&phase_laterhalf_random==0&order_rate>=40", effects: [{ modifier: 550, type: 9 }, { modifier: 1500, type: 27 }], precondition: "" }], rarity: 6 }, "106701121": { alternatives: [{ baseDuration: 3e4, condition: "running_style==3&phase_laterhalf_random==0&order_rate>=40", effects: [{ modifier: 150, type: 9 }, { modifier: 3500, type: 27 }], precondition: "" }], rarity: 6 }, "106701211": { alternatives: [{ baseDuration: -1, condition: "rotation==1", effects: [{ modifier: 8e5, type: 1 }, { modifier: 8e5, type: 3 }], precondition: "" }], rarity: 6 }, "106702111": { alternatives: [{ baseDuration: 15e3, condition: "distance_type==4&running_style==3&is_lastspurt==1&order_rate>=40", effects: [{ modifier: 4e3, type: 31 }, { modifier: -50, type: 9 }], precondition: "" }], rarity: 6 }, "106702211": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==4&phase_random==1&order>=5", effects: [{ modifier: -100, type: 9 }, { modifier: 350, type: 9 }, { modifier: 1500, type: 27 }], precondition: "" }], rarity: 6 }, "106703111": { alternatives: [{ baseDuration: 4e4, condition: "distance_type==3&phase_firsthalf_random==2&order_rate>=40", effects: [{ modifier: 4e3, type: 31 }], precondition: "" }], rarity: 6 }, "106703211": { alternatives: [{ baseDuration: 4e4, condition: "track_id==10201&distance_type==3&all_corner_random==1&motivation==5", effects: [{ modifier: 4500, type: 27 }], precondition: "" }, { baseDuration: 3e4, condition: "track_id!=10201&distance_type==3&all_corner_random==1@track_id==10201&all_corner_random==1&motivation<=4&distance_type==3", effects: [{ modifier: 4500, type: 27 }], precondition: "" }], rarity: 6 }, "106801111": { alternatives: [{ baseDuration: 12e3, condition: "running_style==1&phase==0", effects: [{ modifier: 5e3, type: 31 }], precondition: "" }], rarity: 6 }, "106801211": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==4&straight_random==1", effects: [{ modifier: 4500, type: 27 }], precondition: "" }], rarity: 6 }, "106802111": { alternatives: [{ baseDuration: 4e4, condition: "running_style==1&phase_random==1&order_rate<=50", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 6 }, "106802211": { alternatives: [{ baseDuration: 12e3, condition: "running_style==1&phase==0", effects: [{ modifier: 5e3, type: 31 }], precondition: "" }], rarity: 6 }, "106803111": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==4&running_style==1&phase_firsthalf_random==2&lastspurt==2", effects: [{ modifier: 3500, type: 22 }], precondition: "" }, { baseDuration: 3e4, condition: "is_activate_other_skill_detail==1&is_last_straight==1", effects: [{ modifier: 1500, type: 22 }], precondition: "" }], rarity: 6 }, "106803211": { alternatives: [{ baseDuration: 9e3, condition: "distance_type==4&running_style==1&is_lastspurt==1&corner==0&order<=3", effects: [{ modifier: 4e3, type: 31 }], precondition: "" }, { baseDuration: 3e4, condition: "is_activate_other_skill_detail==1&is_last_straight==1", effects: [{ modifier: 1500, type: 22 }], precondition: "" }], rarity: 6 }, "106901111": { alternatives: [{ baseDuration: 4e4, condition: "running_style==2&is_finalcorner_random==1&order_rate<=50", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 6 }, "106901121": { alternatives: [{ baseDuration: 18e3, condition: "distance_type==3&running_style==2&phase_corner_random==1", effects: [{ modifier: 4500, type: 22 }], precondition: "" }], rarity: 6 }, "106901211": { alternatives: [{ baseDuration: -1, condition: "season==1@season==5", effects: [{ modifier: 8e5, type: 1 }, { modifier: 8e5, type: 3 }], precondition: "" }], rarity: 6 }, "106902111": { alternatives: [{ baseDuration: 3e4, condition: "straight_random==1", effects: [{ modifier: 4500, type: 27 }], precondition: "" }], rarity: 6 }, "106902211": { alternatives: [{ baseDuration: 24e3, condition: "distance_type==3&phase==1&order_rate<=80&order_rate>=30&blocked_side_continuetime>=2", effects: [{ modifier: 3500, type: 27 }, { modifier: 550, type: 9 }], precondition: "" }], rarity: 6 }, "107001111": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==3&phase>=2&is_last_straight==1&order_rate>=20&order_rate<=60", effects: [{ modifier: 4500, type: 27 }], precondition: "" }], rarity: 6 }, "107001211": { alternatives: [{ baseDuration: 24e3, condition: "distance_type==3&phase_random==1&order_rate<=50", effects: [{ modifier: 4500, type: 27 }], precondition: "" }], rarity: 6 }, "107001221": { alternatives: [{ baseDuration: 24e3, condition: "distance_type==3&phase_firsthalf_random==1&order_rate<=50", effects: [{ modifier: 1500, type: 27 }, { modifier: 550, type: 9 }], precondition: "" }], rarity: 6 }, "107101111": { alternatives: [{ baseDuration: 3e4, condition: "running_style==2&phase_random==1&order_rate<=50", effects: [{ modifier: 550, type: 9 }, { modifier: 1500, type: 27 }], precondition: "" }], rarity: 6 }, "107101211": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==3&is_last_straight==1&phase>=2&order_rate>=20&order_rate<=60", effects: [{ modifier: 4500, type: 27 }], precondition: "" }], rarity: 6 }, "107102111": { alternatives: [{ baseDuration: 3e4, condition: "running_style==2&phase_laterhalf_random==1", effects: [{ modifier: 550, type: 9 }, { modifier: 1500, type: 27 }], precondition: "" }], rarity: 6 }, "107102121": { alternatives: [{ baseDuration: 3e4, condition: "running_style==2&phase_firsthalf_random==1", effects: [{ modifier: 350, type: 9 }, { modifier: 2500, type: 27 }], precondition: "" }], rarity: 6 }, "107102211": { alternatives: [{ baseDuration: 3e4, condition: "running_style==2&distance_type==3&is_last_straight==1&phase>=2", effects: [{ modifier: 5500, type: 27 }, { modifier: -200, type: 9 }], precondition: "" }], rarity: 6 }, "107201111": { alternatives: [{ baseDuration: 4e4, condition: "phase==1&change_order_onetime<0", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 6 }, "107201211": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==3&is_finalcorner==1&overtake_target_time>=2", effects: [{ modifier: 4500, type: 27 }, { modifier: 1e3, type: 31 }], precondition: "" }], rarity: 6 }, "107201221": { alternatives: [{ baseDuration: 4e4, condition: "phase>=2&is_finalcorner==1&is_overtake==1&distance_type==3", effects: [{ modifier: 3500, type: 22 }], precondition: "" }], rarity: 6 }, "107202111": { alternatives: [{ baseDuration: 9e3, condition: "running_style==2&phase>=2&is_finalcorner==1&corner!=0&remain_distance>=600&order_rate<=70@running_style==3&phase>=2&is_finalcorner==1&corner!=0&remain_distance>=600&order_rate<=70", effects: [{ modifier: 4e3, type: 31 }], precondition: "" }, { baseDuration: 3e4, condition: "is_activate_other_skill_detail==1&is_lastspurt==1&phase_firsthalf_random==3", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 6 }, "107202211": { alternatives: [{ baseDuration: 24e3, condition: "running_style==2&distance_rate>=50&is_overtake==1&lane_type==0@running_style==3&distance_rate>=50&is_overtake==1&lane_type==0", effects: [{ modifier: 4500, type: 22 }], precondition: "" }, { baseDuration: 24e3, condition: "running_style==2&distance_rate>=50&is_overtake==1@running_style==3&distance_rate>=50&is_overtake==1", effects: [{ modifier: 3500, type: 22 }], precondition: "" }], rarity: 6 }, "107301111": { alternatives: [{ baseDuration: 3e4, condition: "running_style==2&all_corner_random==1", effects: [{ modifier: 4500, type: 27 }], precondition: "" }], rarity: 6 }, "107301211": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==3&all_corner_random==1", effects: [{ modifier: 3500, type: 22 }, { modifier: 150, type: 9 }], precondition: "" }], rarity: 6 }, "10731": { alternatives: [{ baseDuration: 5e4, condition: "is_last_straight==1&change_order_up_end_after>=1", effects: [{ modifier: 2500, type: 27 }], precondition: "" }], rarity: 3 }, "107401111": { alternatives: [{ baseDuration: 0, condition: "phase==1&change_order_onetime>0", effects: [{ modifier: 750, type: 9 }], precondition: "" }], rarity: 6 }, "107401211": { alternatives: [{ baseDuration: 12e3, condition: "distance_type==4&phase_firsthalf_random==1&order_rate>=40&order_rate<=80", effects: [{ modifier: 950, type: 9 }, { modifier: -1500, type: 21 }], precondition: "" }], rarity: 6 }, "107402111": { alternatives: [{ baseDuration: 5e4, condition: "running_style==3&phase_random==1&base_stamina>=1200", effects: [{ modifier: 2500, type: 27 }], precondition: "" }, { baseDuration: 4e4, condition: "running_style==3&phase_random==1&base_stamina<1200", effects: [{ modifier: 2500, type: 27 }], precondition: "" }], rarity: 6 }, "107402211": { alternatives: [{ baseDuration: 5e4, condition: "distance_type==4&phase==2&change_order_onetime<0&base_stamina>=1200", effects: [{ modifier: 3500, type: 22 }], precondition: "" }, { baseDuration: 4e4, condition: "distance_type==4&phase==2&change_order_onetime<0", effects: [{ modifier: 3500, type: 22 }], precondition: "" }], rarity: 6 }, "107601111": { alternatives: [{ baseDuration: 24e3, condition: "running_style==3&phase_random==1", effects: [{ modifier: 4500, type: 27 }], precondition: "" }], rarity: 6 }, "107601211": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==4&running_style==3&phase_firsthalf_random==2&lastspurt==2", effects: [{ modifier: 4500, type: 22 }], precondition: "" }], rarity: 6 }, "107701111": { alternatives: [{ baseDuration: -1, condition: "ground_condition==1&ground_type==1", effects: [{ modifier: 8e5, type: 3 }, { modifier: 8e5, type: 1 }], precondition: "" }, { baseDuration: -1, condition: "ground_condition!=1&ground_type==1", effects: [{ modifier: 4e5, type: 3 }, { modifier: 4e5, type: 1 }], precondition: "" }], rarity: 6 }, "107701211": { alternatives: [{ baseDuration: 24e3, condition: "distance_type==4&phase_laterhalf_random==1&order_rate<=50", effects: [{ modifier: 3500, type: 27 }], precondition: "" }, { baseDuration: 9e3, condition: "is_activate_other_skill_detail==1&is_lastspurt==1", effects: [{ modifier: 2e3, type: 31 }], precondition: "" }], rarity: 6 }, "107702111": { alternatives: [{ baseDuration: 0, condition: "running_style==2&phase_firsthalf_random==1", effects: [{ modifier: 750, type: 9 }], precondition: "" }], rarity: 6 }, "107702211": { alternatives: [{ baseDuration: 4e4, condition: "running_style==2&phase_laterhalf_random==1", effects: [{ modifier: 4500, type: 27 }, { modifier: -400, type: 9 }], precondition: "" }], rarity: 6 }, "107801111": { alternatives: [{ baseDuration: 4e4, condition: "distance_type==2&phase_random==1&order_rate<=50", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 6 }, "107801211": { alternatives: [{ baseDuration: 4e4, condition: "running_style==2&order>=2&distance_diff_top<=5&distance_rate>=60&phase==1", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 6 }, "107801221": { alternatives: [{ baseDuration: 4e4, condition: "running_style==2&order>=3&distance_rate>=50", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 6 }, "107802111": { alternatives: [{ baseDuration: 4e4, condition: "running_style==2&phase_random==1&order_rate<=50", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 6 }, "107802211": { alternatives: [{ baseDuration: 4e4, condition: "running_style==2&distance_type==2&distance_diff_top<=10&distance_rate>=60", effects: [{ modifier: 2500, type: 27 }], precondition: "" }], rarity: 6 }, "107901111": { alternatives: [{ baseDuration: 4e4, condition: "distance_type==2&phase_straight_random==1&ground_type==2@distance_type==3&phase_straight_random==1&ground_type==2", effects: [{ modifier: 3500, type: 27 }], precondition: "" }, { baseDuration: 24e3, condition: "distance_type==2&phase_straight_random==1@distance_type==3&phase_straight_random==1", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 6 }, "107901211": { alternatives: [{ baseDuration: 24e3, condition: "running_style==1&remain_distance<=200@running_style==2&remain_distance<=200", effects: [{ modifier: 4500, type: 22 }], precondition: "compete_fight_count>0" }], rarity: 6 }, "108001111": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==2&activate_count_start>=3@distance_type==3&activate_count_start>=3", effects: [{ modifier: 5e3, type: 31 }], precondition: "" }, { baseDuration: 3e4, condition: "distance_type==1&activate_count_start>=3@distance_type==4&activate_count_start>=3", effects: [{ modifier: 4e3, type: 31 }], precondition: "" }], rarity: 6 }, "108001211": { alternatives: [{ baseDuration: 3e4, condition: "ground_type==2&phase_laterhalf_random==0&order_rate<=50", effects: [{ modifier: 4500, type: 27 }], precondition: "" }], rarity: 6 }, "108201111": { alternatives: [{ baseDuration: 4e4, condition: "phase==1&change_order_onetime<0&base_wiz>=1200", effects: [{ modifier: 4e3, type: 27 }], precondition: "" }, { baseDuration: 4e4, condition: "phase==1&change_order_onetime<0", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 6 }, "108201211": { alternatives: [{ baseDuration: 18e3, condition: "distance_type==2&phase_firsthalf_random==2&order_rate<=50", effects: [{ modifier: 4e3, type: 31 }], precondition: "" }, { baseDuration: 3e4, condition: "is_activate_other_skill_detail==1&remain_distance<=201&remain_distance>=199", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 6 }, "108301111": { alternatives: [{ baseDuration: 15e3, condition: "distance_type==4&running_style==3&is_lastspurt==1&order_rate>=40&track_id==10005", effects: [{ modifier: 4e3, type: 31 }, { modifier: 150, type: 9 }], precondition: "" }, { baseDuration: 15e3, condition: "distance_type==4&running_style==3&is_lastspurt==1&order_rate>=40", effects: [{ modifier: 4e3, type: 31 }, { modifier: -200, type: 9 }], precondition: "" }], rarity: 6 }, "108301211": { alternatives: [{ baseDuration: 24e3, condition: "distance_type==3&phase_laterhalf_random==1&order_rate>=50@distance_type==4&phase_laterhalf_random==1&order_rate>=50", effects: [{ modifier: 3500, type: 27 }, { modifier: 150, type: 9 }], precondition: "" }], rarity: 6 }, "108302111": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==3&phase==1&order_rate<=80&order_rate>=30&blocked_side_continuetime>=2", effects: [{ modifier: 1500, type: 27 }, { modifier: 3e3, type: 27 }, { modifier: 350, type: 9 }], precondition: "" }], rarity: 6 }, "108302211": { alternatives: [{ baseDuration: 4e4, condition: "distance_type==3&running_style==3&phase_firsthalf_random==2&order_rate>=40", effects: [{ modifier: 4e3, type: 31 }], precondition: "" }], rarity: 6 }, "108401111": { alternatives: [{ baseDuration: 3e4, condition: "running_style==4&phase_firsthalf_random==3&is_lastspurt==1", effects: [{ modifier: 4500, type: 27 }], precondition: "phase>=2&distance_diff_rate>=50" }], rarity: 6 }, "108401211": { alternatives: [{ baseDuration: -1, condition: "base_speed>=1000&base_power>=1000&distance_type==2@base_speed>=1000&base_power>=1000&distance_type==3", effects: [{ modifier: 8e5, type: 1 }, { modifier: 8e5, type: 3 }], precondition: "" }], rarity: 6 }, "108501111": { alternatives: [{ baseDuration: 18e3, condition: "running_style==3&order_rate>=40&is_finalcorner_random==1", effects: [{ modifier: 4500, type: 27 }, { modifier: -1500, type: 21 }, { modifier: -1500, type: 21 }], precondition: "" }], rarity: 6 }, "108501211": { alternatives: [{ baseDuration: 2e4, condition: "distance_type==1&phase>=2&order_rate>=50&is_overtake==1@distance_type==2&phase>=2&order_rate>=50&is_overtake==1", effects: [{ modifier: 4e3, type: 31 }, { modifier: -1500, type: 21 }], precondition: "" }], rarity: 6 }, "108502111": { alternatives: [{ baseDuration: 2e4, condition: "running_style==3&distance_type==2&phase>=2&is_overtake==1&distance_rate<=75@running_style==3&distance_type==2&phase_firsthalf_random==2", effects: [{ modifier: 4e3, type: 31 }], precondition: "" }], rarity: 6 }, "108502211": { alternatives: [{ baseDuration: 4e4, condition: "distance_type==2&phase_laterhalf_random==1&order_rate>=40", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 6 }, "108601111": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==2&corner_random==3&order_rate<=50@distance_type==3&corner_random==3&order_rate<=50", effects: [{ modifier: 4500, type: 22 }], precondition: "" }], rarity: 6 }, "108601211": { alternatives: [{ baseDuration: 4e4, condition: "distance_type==2&phase_random==1@distance_type==3&phase_random==1", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 6 }, "108701111": { alternatives: [{ baseDuration: 4e4, condition: "running_style==1&phase==0", effects: [{ modifier: 4e3, type: 31 }], precondition: "" }], rarity: 6 }, "108701211": { alternatives: [{ baseDuration: 24e3, condition: "distance_type==1&phase_laterhalf_random==1&order_rate<=50", effects: [{ modifier: 3500, type: 27 }, { modifier: 2e3, type: 31 }], precondition: "" }], rarity: 6 }, "108702111": { alternatives: [{ baseDuration: 3e4, condition: "running_style==1&distance_type==1", effects: [{ modifier: 2e3, type: 31 }], precondition: "" }, { baseDuration: 4e4, condition: "is_activate_other_skill_detail==1&phase_random==1&order_rate<=50&is_badstart==0", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 6 }, "108702211": { alternatives: [{ baseDuration: 18e3, condition: "running_style==1&distance_type==1&phase_firstquarter_random==2&order_rate<=50", effects: [{ modifier: 4e3, type: 31 }], precondition: "" }], rarity: 6 }, "108801111": { alternatives: [{ baseDuration: 24e3, condition: "running_style==3&phase_random==1&order_rate>=40", effects: [{ modifier: 4500, type: 27 }], precondition: "" }], rarity: 6 }, "108801211": { alternatives: [{ baseDuration: 18e3, condition: "distance_type==3&course_distance>=2200&course_distance<=2400&phase_firstquarter_random==2&order_rate>=40", effects: [{ modifier: 5e3, type: 31 }, { modifier: -200, type: 9 }], precondition: "" }, { baseDuration: 18e3, condition: "distance_type==3&course_distance<2200&phase_firsthalf_random==2&order_rate>=40@distance_type==3&course_distance>2400&phase_firsthalf_random==2&order_rate>=40", effects: [{ modifier: 4e3, type: 31 }], precondition: "" }], rarity: 6 }, "108901111": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==3&running_style==2&phase_laterhalf_random==1&order_rate<=50&course_distance==2400", effects: [{ modifier: 3500, type: 27 }, { modifier: 3e3, type: 31 }], precondition: "" }, { baseDuration: 3e4, condition: "distance_type==3&running_style==2&phase_laterhalf_random==1&order_rate<=50&course_distance!=2400", effects: [{ modifier: 2500, type: 27 }, { modifier: 3e3, type: 31 }], precondition: "" }], rarity: 6 }, "108901211": { alternatives: [{ baseDuration: 24e3, condition: "is_lastspurt==1&phase_firsthalf_random==3", effects: [{ modifier: 4500, type: 27 }], precondition: "" }], rarity: 6 }, "109101111": { alternatives: [{ baseDuration: 24e3, condition: "distance_type==2&down_slope_random==1@distance_type==3&down_slope_random==1", effects: [{ modifier: 3500, type: 27 }, { modifier: 2e3, type: 31 }], precondition: "" }], rarity: 6 }, "109101211": { alternatives: [{ baseDuration: 4e4, condition: "running_style==3&distance_rate_after_random==50&order_rate>=30&order_rate<=80", effects: [{ modifier: 3500, type: 27 }, { modifier: 1e3, type: 31 }], precondition: "" }], rarity: 6 }, "109301111": { alternatives: [{ baseDuration: 18e3, condition: "distance_type==1&running_style==2&is_finalcorner_random==1&order_rate<=50", effects: [{ modifier: 3500, type: 27 }, { modifier: 1500, type: 22 }], precondition: "" }, { baseDuration: 18e3, condition: "distance_type!=1&running_style==2&is_finalcorner_random==1&order_rate<=50", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 6 }, "109301211": { alternatives: [{ baseDuration: 18e3, condition: "running_style==2&phase_firsthalf_random==2&order_rate<=50", effects: [{ modifier: 4e3, type: 31 }], precondition: "" }, { baseDuration: 3e4, condition: "is_activate_other_skill_detail==1&remain_distance<=201&remain_distance>=199", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 6 }, "109401111": { alternatives: [{ baseDuration: 4e4, condition: "distance_type==3&running_style==3&phase_laterhalf_random==1&order_rate>=40&base_power>=1200", effects: [{ modifier: 4e3, type: 27 }], precondition: "" }, { baseDuration: 4e4, condition: "distance_type==3&running_style==3&phase_laterhalf_random==1&order_rate>=40", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 6 }, "109401211": { alternatives: [{ baseDuration: 4e4, condition: "distance_type==3&phase_firsthalf_random==2&track_id==10006", effects: [{ modifier: 3500, type: 22 }, { modifier: 1e3, type: 31 }], precondition: "" }], rarity: 6 }, "109401221": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==3&phase_firsthalf_random==2", effects: [{ modifier: 4500, type: 22 }], precondition: "" }], rarity: 6 }, "109801111": { alternatives: [{ baseDuration: 24e3, condition: "ground_type==2&phase_laterhalf_random==1&order_rate<=50", effects: [{ modifier: 4500, type: 27 }], precondition: "" }], rarity: 6 }, "109801211": { alternatives: [{ baseDuration: -1, condition: "ground_type==2&base_power>=1200", effects: [{ modifier: 1e6, type: 1 }], precondition: "" }, { baseDuration: -1, condition: "ground_type==2&base_power>=1000&base_power<1200", effects: [{ modifier: 8e5, type: 1 }], precondition: "" }], rarity: 6 }, "109901111": { alternatives: [{ baseDuration: 3e4, condition: "running_style==2&phase_laterhalf_random==0&order_rate<=50", effects: [{ modifier: 550, type: 9 }, { modifier: 1500, type: 27 }], precondition: "" }], rarity: 6 }, "109901211": { alternatives: [{ baseDuration: 24e3, condition: "ground_type==2&phase==1&blocked_side_continuetime>=2", effects: [{ modifier: 4500, type: 27 }], precondition: "" }], rarity: 6 }, "109902111": { alternatives: [{ baseDuration: 24e3, condition: "ground_type==2&running_style==2&phase==1&is_activate_any_skill==1", effects: [{ modifier: 4500, type: 27 }], precondition: "" }, { baseDuration: 24e3, condition: "is_activate_other_skill_detail==1&phase>=2&is_activate_any_skill==1", effects: [{ modifier: 2e3, type: 31 }], precondition: "" }], rarity: 6 }, "109902211": { alternatives: [{ baseDuration: 18e3, condition: "ground_type==2&running_style==2&phase_firstquarter_random==2&course_distance>=1800", effects: [{ modifier: 4e3, type: 31 }], precondition: "" }, { baseDuration: 18e3, condition: "ground_type==2&running_style==2&phase_firsthalf_random==2&course_distance<1800", effects: [{ modifier: 4e3, type: 31 }], precondition: "" }], rarity: 6 }, "110001111": { alternatives: [{ baseDuration: 4e4, condition: "distance_type==2&is_overtake==1&accumulatetime>=5", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 6 }, "110001121": { alternatives: [{ baseDuration: 24e3, condition: "ground_type==2&is_overtake==1&accumulatetime>=5", effects: [{ modifier: 4500, type: 27 }, { modifier: 150, type: 9 }], precondition: "" }], rarity: 6 }, "110001211": { alternatives: [{ baseDuration: 4e4, condition: "ground_type==2&accumulatetime>=5&infront_near_lane_time>=3", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 6 }, "110011": { alternatives: [{ baseDuration: 5e4, condition: "phase==1&order>=2&order_rate<=80&activate_count_middle>=2", effects: [{ modifier: 550, type: 9 }, { modifier: 2500, type: 27 }], precondition: "" }], rarity: 5 }, "110021": { alternatives: [{ baseDuration: 5e4, condition: "distance_rate>=66&distance_rate<=68&corner==3&order==1", effects: [{ modifier: 4500, type: 22 }], precondition: "phase==1&bashin_diff_behind>=3&order==1" }, { baseDuration: 5e4, condition: "distance_rate>=66&distance_rate<=68&order==1", effects: [{ modifier: 2500, type: 22 }], precondition: "" }], rarity: 5 }, "110031": { alternatives: [{ baseDuration: 5e4, condition: "is_last_straight==1", effects: [{ modifier: 4500, type: 27 }], precondition: "is_finalcorner==1&is_overtake==1&order<=5&order_rate<=50&overtake_target_no_order_up_time>=2" }], rarity: 5 }, "110041": { alternatives: [{ baseDuration: 5e4, condition: "distance_rate>=50&activate_count_heal>=1&order<=3", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 5 }, "110051": { alternatives: [{ baseDuration: 4e4, condition: "is_finalcorner==1&change_order_onetime<0&order_rate<=40", effects: [{ modifier: 4500, type: 27 }], precondition: "" }], rarity: 5 }, "110061": { alternatives: [{ baseDuration: 5e4, condition: "activate_count_heal>=3&distance_rate>=50", effects: [{ modifier: 2500, type: 27 }, { modifier: 3e3, type: 31 }, { modifier: 350, type: 9 }], precondition: "" }], rarity: 5 }, "110071": { alternatives: [{ baseDuration: 5e4, condition: "distance_rate_after_random==50", effects: [{ modifier: 1500, type: 27 }, { modifier: 2e4, type: 37 }], precondition: "" }], rarity: 5 }, "110081": { alternatives: [{ baseDuration: 5e4, condition: "slope==0@slope==1", effects: [{ modifier: 3500, type: 27 }, { modifier: 1e3, type: 31 }], precondition: "phase>=1&slope==2&order_rate>=50&order_rate<=80&track_id==10006" }, { baseDuration: 4e4, condition: "slope==0@slope==1", effects: [{ modifier: 3500, type: 27 }], precondition: "phase>=1&slope==2&order_rate>=50&order_rate<=80" }], rarity: 5 }, "110091": { alternatives: [{ baseDuration: 6e4, condition: "distance_rate>=50&corner==0&order==1&bashin_diff_behind<=1", effects: [{ modifier: 3500, type: 27 }], precondition: "" }, { baseDuration: 6e4, condition: "distance_rate>=50&corner==0&order<=2", effects: [{ modifier: 2500, type: 27 }], precondition: "" }], rarity: 5 }, "110101": { alternatives: [{ baseDuration: 5e4, condition: "distance_diff_top<=5&order>=2&order_rate<=40&remain_distance<=201&remain_distance>=199", effects: [{ modifier: 3500, type: 27 }, { modifier: 1500, type: 22 }], precondition: "" }, { baseDuration: 5e4, condition: "order>=2&order_rate<=40&remain_distance<=201&remain_distance>=199", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 5 }, "110111": { alternatives: [{ baseDuration: 0, condition: "phase==1&change_order_onetime>0&order_rate>=40", effects: [{ modifier: 750, type: 9 }], precondition: "" }], rarity: 5 }, "110121": { alternatives: [{ baseDuration: 4e4, condition: "distance_rate>=60&phase==1&slope==2&order_rate>=50", effects: [{ modifier: 3500, type: 27 }, { modifier: 1e3, type: 31 }], precondition: "change_order_up_middle>=3" }], rarity: 5 }, "110131": { alternatives: [{ baseDuration: 6e4, condition: "phase>=2&is_finalcorner==1&order<=4&overtake_target_time>=1", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 5 }, "110141": { alternatives: [{ baseDuration: 4e4, condition: "is_finalcorner==1&corner!=0&is_overtake==1&order>=4&order_rate<=75", effects: [{ modifier: 4e3, type: 31 }], precondition: "" }], rarity: 5 }, "110151": { alternatives: [{ baseDuration: 5e4, condition: "remain_distance<=401&remain_distance>=399&order_rate<=40&activate_count_all>=7", effects: [{ modifier: 4500, type: 27 }], precondition: "" }, { baseDuration: 5e4, condition: "remain_distance<=401&remain_distance>=399&order_rate<=40&activate_count_all<=6", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 5 }, "110161": { alternatives: [{ baseDuration: 5e4, condition: "distance_type==4&phase>=2&is_finalcorner_laterhalf==1&order_rate<=40", effects: [{ modifier: 5500, type: 27 }], precondition: "phase==1&blocked_side_continuetime>=2" }, { baseDuration: 5e4, condition: "phase>=2&is_finalcorner_laterhalf==1&order_rate<=40", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 5 }, "110171": { alternatives: [{ baseDuration: 6e4, condition: "is_finalcorner==1", effects: [{ modifier: 3500, type: 27 }], precondition: "phase>=2&order_rate<=50&overtake_target_time>=2" }], rarity: 5 }, "110181": { alternatives: [{ baseDuration: 5e4, condition: "phase==1&order>=3&order_rate<=50&is_overtake==1", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 5 }, "110191": { alternatives: [{ baseDuration: 5e4, condition: "near_count>=3&phase==1&corner!=0&order_rate>=40", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 5 }, "110201": { alternatives: [{ baseDuration: 5e4, condition: "phase>=2&corner==0&order<=2&straight_front_type==2", effects: [{ modifier: 3500, type: 27 }, { modifier: 2e3, type: 31 }], precondition: "" }, { baseDuration: 5e4, condition: "phase>=2&corner==0&order<=2", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 5 }, "110201111": { alternatives: [{ baseDuration: 3e4, condition: "phase==1&corner==0", effects: [{ modifier: 550, type: 9 }, { modifier: 1500, type: 27 }], precondition: "" }], rarity: 6 }, "110201211": { alternatives: [{ baseDuration: 18e3, condition: "running_style==3&phase_laterhalf_random==1&order_rate>=40", effects: [{ modifier: 4500, type: 27 }, { modifier: -1500, type: 21 }, { modifier: -1500, type: 21 }], precondition: "" }], rarity: 6 }, "110211": { alternatives: [{ baseDuration: 6e4, condition: "activate_count_middle>=2", effects: [{ modifier: 2500, type: 27 }, { modifier: 250, type: 27 }], precondition: "" }], rarity: 5 }, "110221": { alternatives: [{ baseDuration: 5e4, condition: "remain_distance>=401&phase>=2&is_finalcorner==1&order_rate>=20&order_rate<=40", effects: [{ modifier: 3500, type: 27 }, { modifier: 1e3, type: 31 }], precondition: "" }, { baseDuration: 5e4, condition: "phase>=2&is_finalcorner==1&order_rate>=20&order_rate<=40", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 5 }, "110231": { alternatives: [{ baseDuration: 5e4, condition: "order_rate_in50_continue==1&phase==1&distance_rate>=50&order>=2&order_rate<=40", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 5 }, "110241": { alternatives: [{ baseDuration: 5e4, condition: "is_finalcorner==1&order_rate<=40&change_order_onetime<0", effects: [{ modifier: 3500, type: 27 }], precondition: "" }, { baseDuration: 4e4, condition: "is_finalcorner==1&order_rate>=50&order_rate<=80&change_order_onetime<0", effects: [{ modifier: 4e3, type: 31 }], precondition: "" }], rarity: 5 }, "110251": { alternatives: [{ baseDuration: 5e4, condition: "distance_type==4&phase>=2&is_finalcorner==1", effects: [{ modifier: 3500, type: 22 }], precondition: "distance_rate>=50&order_rate_out40_continue==1" }, { baseDuration: 5e4, condition: "phase>=2&is_finalcorner==1", effects: [{ modifier: 2500, type: 22 }], precondition: "distance_rate>=50&order_rate_out40_continue==1" }], rarity: 5 }, "110261": { alternatives: [{ baseDuration: 5e4, condition: "order<=4&phase==1&corner!=0&bashin_diff_behind<=3", effects: [{ modifier: 3500, type: 27 }, { modifier: 150, type: 9 }], precondition: "" }], rarity: 5 }, "110271": { alternatives: [{ baseDuration: 4e4, condition: "distance_rate>=60&slope==2&phase==1&order>=2&distance_diff_top<=10&distance_type==3", effects: [{ modifier: 3500, type: 27 }, { modifier: 1e3, type: 31 }], precondition: "" }, { baseDuration: 4e4, condition: "distance_rate>=60&slope==2&phase==1&order>=2&distance_diff_top<=10&distance_type!=3", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 5 }, "110291": { alternatives: [{ baseDuration: 4e4, condition: "distance_rate>=45&distance_rate<=55&order_rate>=20&order_rate<=50&is_overtake==1&distance_type==2", effects: [{ modifier: 4500, type: 27 }], precondition: "" }, { baseDuration: 4e4, condition: "distance_rate>=45&distance_rate<=55&order_rate>=20&order_rate<=50&is_overtake==1", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 5 }, "110301": { alternatives: [{ baseDuration: 5e4, condition: "phase==1&order>=2&order_rate<=50", effects: [{ modifier: 550, type: 9 }, { modifier: -50, type: 9 }, { modifier: 2500, type: 27 }], precondition: "" }], rarity: 5 }, "110311": { alternatives: [{ baseDuration: 6e4, condition: "phase_firsthalf_random==1&order_rate<=30", effects: [{ modifier: 2500, type: 27 }, { modifier: 350, type: 9 }], precondition: "" }], rarity: 5 }, "110321": { alternatives: [{ baseDuration: 4e4, condition: "distance_rate>=50&corner!=0&order_rate>=20&order_rate<=50&track_id==10005", effects: [{ modifier: 4500, type: 27 }, { modifier: 500, type: 31 }], precondition: "" }, { baseDuration: 4e4, condition: "distance_rate>=50&corner!=0&order_rate>=20&order_rate<=50", effects: [{ modifier: 4500, type: 27 }], precondition: "" }], rarity: 5 }, "110331": { alternatives: [{ baseDuration: 4e4, condition: "running_style==4&is_finalcorner==1&order_rate>=40&course_distance==2400", effects: [{ modifier: 5e3, type: 31 }], precondition: "" }, { baseDuration: 4e4, condition: "running_style==4&is_finalcorner==1&order_rate>=40", effects: [{ modifier: 4e3, type: 31 }], precondition: "" }], rarity: 5 }, "110341": { alternatives: [{ baseDuration: 5e4, condition: "is_last_straight_onetime==1", effects: [{ modifier: 3500, type: 27 }], precondition: "phase>=2&corner!=0&order_rate>=60&is_overtake==1" }], rarity: 5 }, "110351": { alternatives: [{ baseDuration: 6e4, condition: "is_lastspurt==1&is_last_straight==1&order_rate>=40", effects: [{ modifier: 2500, type: 27 }, { modifier: 500, type: 27 }], precondition: "" }], rarity: 5 }, "110361": { alternatives: [{ baseDuration: 5e4, condition: "phase>=2&is_finalcorner_laterhalf==1&is_overtake==1@phase>=2&is_finalcorner==1&corner==0&is_overtake==1", effects: [{ modifier: 4500, type: 27 }], precondition: "phase==1&change_order_onetime>0&order_rate>=50&order_rate<=80" }, { baseDuration: 5e4, condition: "phase>=2&is_finalcorner_laterhalf==1&is_overtake==1@phase>=2&is_finalcorner==1&corner==0&is_overtake==1", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 5 }, "110371": { alternatives: [{ baseDuration: 6e4, condition: "change_order_up_finalcorner_after>=2&is_last_straight==1", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 5 }, "110381": { alternatives: [{ baseDuration: 5e4, condition: "remain_distance<=350&order_rate<=40&order_rate>=20&bashin_diff_behind<=1", effects: [{ modifier: 2500, type: 27 }, { modifier: 3e3, type: 31 }], precondition: "" }], rarity: 5 }, "110391": { alternatives: [{ baseDuration: 5e4, condition: "slope==0@slope==2", effects: [{ modifier: 3500, type: 27 }], precondition: "phase>=1&slope==1&order_rate>=40&order_rate<=80" }], rarity: 5 }, "110401": { alternatives: [{ baseDuration: 5e4, condition: "is_finalcorner==1&corner!=0&order_rate>=30&order_rate<=70&blocked_side_continuetime>=2", effects: [{ modifier: 2500, type: 27 }, { modifier: 3e3, type: 31 }], precondition: "" }], rarity: 5 }, "110401111": { alternatives: [{ baseDuration: 12e3, condition: "running_style==1&phase==0", effects: [{ modifier: 5e3, type: 31 }], precondition: "" }], rarity: 6 }, "110401211": { alternatives: [{ baseDuration: 24e3, condition: "running_style==1&is_last_straight==1&order==1&track_id==10006&distance_type==3", effects: [{ modifier: 5500, type: 27 }], precondition: "phase==1&bashin_diff_behind>=3&order==1" }, { baseDuration: 24e3, condition: "running_style==1&is_last_straight==1&order==1", effects: [{ modifier: 4500, type: 27 }], precondition: "phase==1&bashin_diff_behind>=3&order==1" }], rarity: 6 }, "110402111": { alternatives: [{ baseDuration: 9e3, condition: "distance_type==3&running_style==1&phase>=2&is_finalcorner==1&corner!=0&order<=3", effects: [{ modifier: 4e3, type: 31 }, { modifier: 3500, type: 22 }], precondition: "" }], rarity: 6 }, "110402211": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==3&running_style==1&corner_random==3&order_rate<=50", effects: [{ modifier: 4500, type: 22 }], precondition: "" }], rarity: 6 }, "110411": { alternatives: [{ baseDuration: 1e4, condition: "order<=3&remain_distance<=401&remain_distance>=399", effects: [{ modifier: 1e3, type: 31 }], precondition: "" }], rarity: 5 }, "110421": { alternatives: [{ baseDuration: 5e4, condition: "distance_rate>=50&order_rate<=50&is_overtake==1", effects: [{ modifier: 2500, type: 22 }], precondition: "" }, { baseDuration: 5e4, condition: "is_activate_other_skill_detail==1&is_finalcorner==1&corner!=0&change_order_onetime<0&distance_type==1@is_activate_other_skill_detail==1&is_finalcorner==1&corner!=0&change_order_onetime<0&distance_type==2", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 5 }, "110441": { alternatives: [{ baseDuration: 3e4, condition: "phase>=1&slope==2&order_rate>=50", effects: [{ modifier: 3500, type: 22 }, { modifier: -200, type: 9 }], precondition: "" }, { baseDuration: 3e4, condition: "is_activate_other_skill_detail==1&phase>=2&is_last_straight==1&motivation>=4", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 5 }, "110451": { alternatives: [{ baseDuration: 5e4, condition: "is_last_straight==1&order<=4&bashin_diff_infront<=1", effects: [{ modifier: 2500, type: 27 }, { modifier: 3e3, type: 31 }], precondition: "" }], rarity: 5 }, "110461": { alternatives: [{ baseDuration: 6e4, condition: "distance_rate>=40&distance_rate<=50&distance_diff_rate<=10&ground_type==2", effects: [{ modifier: 2500, type: 27 }, { modifier: 350, type: 9 }], precondition: "" }, { baseDuration: 6e4, condition: "distance_rate>=40&distance_rate<=50&distance_diff_rate<=10", effects: [{ modifier: 2500, type: 27 }], precondition: "" }], rarity: 5 }, "110471": { alternatives: [{ baseDuration: 5e4, condition: "phase>=2&is_last_straight==1&order_rate<=40&track_id==10005&course_distance==2500@phase>=2&is_last_straight==1&order_rate<=40&track_id==10006&distance_type==3", effects: [{ modifier: 2500, type: 27 }, { modifier: 2500, type: 22 }], precondition: "" }, { baseDuration: 5e4, condition: "phase>=2&is_last_straight==1&order_rate<=40", effects: [{ modifier: 2500, type: 27 }], precondition: "" }], rarity: 5 }, "110481": { alternatives: [{ baseDuration: 6e4, condition: "distance_rate>=40&distance_rate<=50&order_rate>=40&order_rate<=80&motivation==5", effects: [{ modifier: 3e3, type: 27 }], precondition: "" }, { baseDuration: 6e4, condition: "distance_rate>=40&distance_rate<=50&order_rate>=40&order_rate<=80", effects: [{ modifier: 2500, type: 27 }], precondition: "" }], rarity: 5 }, "110501": { alternatives: [{ baseDuration: 5e4, condition: "phase>=2&is_finalcorner_laterhalf==1&order_rate<=75&order_rate>=40", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 5 }, "110501111": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==3&phase>=2&is_last_straight==1&order_rate>=20&order_rate<=60", effects: [{ modifier: 4500, type: 27 }], precondition: "" }], rarity: 6 }, "110501211": { alternatives: [{ baseDuration: 4e4, condition: "distance_type==3&activate_count_all>=13", effects: [{ modifier: 3500, type: 22 }], precondition: "" }], rarity: 6 }, "110502111": { alternatives: [{ baseDuration: 24e3, condition: "distance_type==3&activate_count_all>=13", effects: [{ modifier: 1500, type: 22 }, { modifier: 3500, type: 22 }], precondition: "" }], rarity: 6 }, "110502211": { alternatives: [{ baseDuration: -1, condition: "ground_type==1&distance_type==3&is_exist_skill_id==201631", effects: [{ modifier: 1e6, type: 1 }, { modifier: 0, type: 41 }], precondition: "" }], rarity: 6 }, "110511": { alternatives: [{ baseDuration: 5e4, condition: "order>=2&order_rate<=70&remain_distance<=201&remain_distance>=199&near_count>=3", effects: [{ modifier: 3500, type: 27 }, { modifier: 1500, type: 22 }], precondition: "" }, { baseDuration: 5e4, condition: "order>=2&order_rate<=70&remain_distance<=201&remain_distance>=199", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 5 }, "110521": { alternatives: [{ baseDuration: 5e4, condition: "is_finalcorner==1&corner!=0&distance_diff_top>=7", effects: [{ modifier: 2500, type: 27 }], precondition: "" }], rarity: 5 }, "110531": { alternatives: [{ baseDuration: 5e4, condition: "distance_type==1&remain_distance<=201&remain_distance>=199&order_rate>=20&order_rate<=50&change_order_up_end_after>=1", effects: [{ modifier: 4500, type: 27 }], precondition: "" }, { baseDuration: 5e4, condition: "remain_distance<=201&remain_distance>=199&order_rate>=20&order_rate<=50", effects: [{ modifier: 2500, type: 27 }], precondition: "" }], rarity: 5 }, "110561": { alternatives: [{ baseDuration: 5e4, condition: "distance_rate>=50&order_rate>=40&overtake_target_time>=2", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 5 }, "110571": { alternatives: [{ baseDuration: 5e4, condition: "distance_rate>=50&order_rate>=50", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 5 }, "110581": { alternatives: [{ baseDuration: 5e4, condition: "is_last_straight_onetime==1&order_rate<=40", effects: [{ modifier: 3500, type: 27 }, { modifier: -500, type: 21 }, { modifier: -500, type: 21 }], precondition: "" }], rarity: 5 }, "110591": { alternatives: [{ baseDuration: 5e4, condition: "distance_rate>=60&slope==2&phase==1&order_rate>=40&order_rate<=80&remain_distance>=500", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 5 }, "110601": { alternatives: [{ baseDuration: 6e4, condition: "is_last_straight==1&order_rate>=40&order_rate<=70&popularity>=4", effects: [{ modifier: 3500, type: 27 }], precondition: "is_finalcorner==1&change_order_onetime<0" }, { baseDuration: 5e4, condition: "is_last_straight==1&order_rate>=40&order_rate<=70&popularity<4", effects: [{ modifier: 3500, type: 27 }], precondition: "is_finalcorner==1&change_order_onetime<0" }], rarity: 5 }, "110601111": { alternatives: [{ baseDuration: 0, condition: "running_style==3&phase_random==1&order_rate>=40", effects: [{ modifier: 750, type: 9 }], precondition: "" }], rarity: 6 }, "110601121": { alternatives: [{ baseDuration: 3e4, condition: "running_style==3&phase_random==1&order_rate>=40", effects: [{ modifier: 150, type: 9 }, { modifier: 3500, type: 27 }], precondition: "" }], rarity: 6 }, "110601211": { alternatives: [{ baseDuration: 4e4, condition: "running_style==3&phase_random==1&order_rate>=40&order_rate<=90", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 6 }, "110611": { alternatives: [{ baseDuration: 4e4, condition: "is_last_straight==1", effects: [{ modifier: 4e3, type: 31 }], precondition: "distance_rate>=50&order_rate_out70_continue==1&temptation_count==0" }], rarity: 5 }, "110621": { alternatives: [{ baseDuration: 2e4, condition: "distance_rate>=50&corner!=0&order_rate>=40&order_rate<=80&distance_type==3", effects: [{ modifier: 2500, type: 27 }, { modifier: 1e3, type: 31 }], precondition: "" }, { baseDuration: 2e4, condition: "distance_rate>=50&corner!=0&order_rate>=40&order_rate<=80", effects: [{ modifier: 2500, type: 27 }], precondition: "" }], rarity: 5 }, "110641": { alternatives: [{ baseDuration: 7e4, condition: "distance_rate>=40&corner==0&order==1&track_id==10005&is_used_skill_id==202051", effects: [{ modifier: 2500, type: 27 }, { modifier: 1e3, type: 31 }], precondition: "" }, { baseDuration: 7e4, condition: "distance_rate>=40&corner==0&order==1", effects: [{ modifier: 2500, type: 27 }], precondition: "" }], rarity: 5 }, "110651": { alternatives: [{ baseDuration: 5e4, condition: "distance_type==2&blocked_side_continuetime>=2&order_rate<=50&phase==0&accumulatetime>=5", effects: [{ modifier: 4500, type: 27 }, { modifier: -300, type: 9 }], precondition: "" }, { baseDuration: 5e4, condition: "blocked_side_continuetime>=2&order_rate<=50&phase==0&accumulatetime>=5", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 5 }, "110671": { alternatives: [{ baseDuration: 5e4, condition: "distance_rate>=40&distance_rate<=50&order_rate>=40&order_rate<=80", effects: [{ modifier: 3500, type: 27 }, { modifier: 350, type: 9 }], precondition: "" }], rarity: 5 }, "110681": { alternatives: [{ baseDuration: 4e4, condition: "phase>=2&corner!=0&remain_distance>=600&order<=3", effects: [{ modifier: 3500, type: 22 }, { modifier: 1e3, type: 31 }], precondition: "" }], rarity: 5 }, "110691": { alternatives: [{ baseDuration: 5e4, condition: "remain_distance<=651&remain_distance>=649&order_rate<=40&order_rate>=30", effects: [{ modifier: 4e3, type: 31 }], precondition: "phase==1&blocked_side_continuetime>=2" }], rarity: 5 }, "110701111": { alternatives: [{ baseDuration: 3e4, condition: "running_style==1&phase_random==1&order==1", effects: [{ modifier: 4500, type: 27 }], precondition: "" }], rarity: 6 }, "110701211": { alternatives: [{ baseDuration: 3e4, condition: "activate_count_middle>=3&order==1", effects: [{ modifier: 4500, type: 27 }], precondition: "" }], rarity: 6 }, "110711": { alternatives: [{ baseDuration: 5e4, condition: "phase>=2&is_last_straight==1&order_rate>=20&order_rate<=40&bashin_diff_behind<=1", effects: [{ modifier: 3500, type: 27 }, { modifier: 1500, type: 22 }, { modifier: -300, type: 9 }], precondition: "" }], rarity: 5 }, "110721": { alternatives: [{ baseDuration: 5e4, condition: "distance_rate_after_random==50&lane_type==0", effects: [{ modifier: 4500, type: 27 }], precondition: "distance_rate>=40&distance_rate<=50&blocked_side_continuetime>=2" }, { baseDuration: 5e4, condition: "distance_rate_after_random==50", effects: [{ modifier: 3500, type: 27 }], precondition: "distance_rate>=40&distance_rate<=50&blocked_side_continuetime>=2" }], rarity: 5 }, "110741": { alternatives: [{ baseDuration: 12e3, condition: "phase==1&order_rate>=40&order_rate<=80", effects: [{ modifier: 750, type: 9 }, { modifier: -1500, type: 21 }], precondition: "" }, { baseDuration: 8e4, condition: "is_activate_other_skill_detail==1&base_stamina>=1200&phase>=2", effects: [{ modifier: 1500, type: 22 }], precondition: "" }], rarity: 5 }, "110771": { alternatives: [{ baseDuration: 5e4, condition: "distance_rate>=45&order_rate>=20&order_rate<=50&remain_distance>=1000", effects: [{ modifier: 4500, type: 27 }], precondition: "phase_firsthalf==1&is_activate_heal_skill==1" }, { baseDuration: 5e4, condition: "distance_rate>=45&order_rate>=20&order_rate<=50", effects: [{ modifier: 2500, type: 27 }], precondition: "phase_firsthalf==1&is_activate_heal_skill==1" }], rarity: 5 }, "110781": { alternatives: [{ baseDuration: 4e4, condition: "distance_type==2&remain_distance<=351&remain_distance>=349&order_rate<=50", effects: [{ modifier: 3500, type: 22 }, { modifier: 1500, type: 27 }], precondition: "" }, { baseDuration: 4e4, condition: "remain_distance<=351&remain_distance>=349&order_rate<=50", effects: [{ modifier: 3500, type: 22 }], precondition: "" }], rarity: 5 }, "110801111": { alternatives: [{ baseDuration: 4e4, condition: "phase_corner_random==1", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 6 }, "110801211": { alternatives: [{ baseDuration: 9e3, condition: "distance_type==3&track_id!=10005&running_style==4&phase>=2&is_finalcorner==1&corner!=0&order_rate>=40@distance_type==3&track_id==10005&running_style==4&phase>=2&corner!=0&order_rate>=40", effects: [{ modifier: 4e3, type: 31 }], precondition: "" }, { baseDuration: 3e4, condition: "is_activate_other_skill_detail==1&is_last_straight==1", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 6 }, "110831": { alternatives: [{ baseDuration: 5e4, condition: "is_last_straight==1&track_id==10005&distance_type==3", effects: [{ modifier: 5500, type: 27 }], precondition: "distance_rate>=50&distance_rate<=51&order_rate>=40&order_rate<=80" }, { baseDuration: 5e4, condition: "is_last_straight==1", effects: [{ modifier: 3500, type: 27 }], precondition: "distance_rate>=50&distance_rate<=51&order_rate>=40&order_rate<=80" }], rarity: 5 }, "110851": { alternatives: [{ baseDuration: 6e4, condition: "distance_rate<=50&distance_rate>=45&order_rate<=90&order_rate>=40&distance_type==2", effects: [{ modifier: 3500, type: 27 }], precondition: "" }, { baseDuration: 5e4, condition: "distance_rate<=50&distance_rate>=45&order_rate<=90&order_rate>=40", effects: [{ modifier: 2500, type: 27 }], precondition: "" }], rarity: 5 }, "110871": { alternatives: [{ baseDuration: 5e4, condition: "distance_type==1&distance_rate<=50&distance_rate>=45&order_rate<=30&base_wiz>=1200", effects: [{ modifier: 4500, type: 27 }], precondition: "" }, { baseDuration: 5e4, condition: "distance_type==1&distance_rate<=50&distance_rate>=45&order_rate<=30", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 5 }, "110901111": { alternatives: [{ baseDuration: 24e3, condition: "distance_type==2&phase_laterhalf_random==1&order_rate<=50", effects: [{ modifier: 4500, type: 27 }], precondition: "" }], rarity: 6 }, "110901211": { alternatives: [{ baseDuration: 18e3, condition: "running_style==2&phase_firsthalf_random==2&order_rate<=50", effects: [{ modifier: 4e3, type: 31 }], precondition: "" }, { baseDuration: 3e4, condition: "is_activate_other_skill_detail==1&remain_distance<=201&remain_distance>=199", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 6 }, "110991": { alternatives: [{ baseDuration: 5e4, condition: "distance_rate>=50&distance_rate<=51&ground_type==2&corner!=3", effects: [{ modifier: 2500, type: 27 }, { modifier: 1500, type: 27 }], precondition: "" }, { baseDuration: 5e4, condition: "distance_rate>=50&distance_rate<=51", effects: [{ modifier: 2500, type: 27 }], precondition: "" }], rarity: 5 }, "111001111": { alternatives: [{ baseDuration: 4e4, condition: "distance_type==3&is_last_straight==1&order_rate>=20&order_rate<=60&phase>=2", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 6 }, "111001211": { alternatives: [{ baseDuration: 12e3, condition: "distance_type==3&phase_laterhalf_random==0", effects: [{ modifier: -1500, type: 21 }], precondition: "" }, { baseDuration: 24e3, condition: "is_activate_other_skill_detail==1&phase_firsthalf_random==2", effects: [{ modifier: 5500, type: 22 }], precondition: "" }], rarity: 6 }, "111041": { alternatives: [{ baseDuration: 0, condition: "distance_type==3&distance_rate>=50&order_rate_in40_continue==1&is_used_skill_id==202051", effects: [{ modifier: 750, type: 9 }], precondition: "" }, { baseDuration: 8e4, condition: "distance_type==3&distance_rate>=50&order_rate_in40_continue==1", effects: [{ modifier: 2500, type: 27 }], precondition: "" }], rarity: 5 }, "111051": { alternatives: [{ baseDuration: 5e4, condition: "is_last_straight==1&phase>=2&order>=2&activate_count_middle==7@is_last_straight==1&phase>=2&order>=2&activate_count_middle==13", effects: [{ modifier: 5500, type: 27 }], precondition: "" }, { baseDuration: 5e4, condition: "is_last_straight==1&phase>=2&order>=2", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 5 }, "111101111": { alternatives: [{ baseDuration: 24e3, condition: "distance_type==3&phase_random==1&base_wiz>=1200", effects: [{ modifier: 5e3, type: 27 }], precondition: "" }, { baseDuration: 24e3, condition: "distance_type==3&phase_random==1", effects: [{ modifier: 4500, type: 27 }], precondition: "" }], rarity: 6 }, "111101211": { alternatives: [{ baseDuration: 24e3, condition: "running_style==3&phase_firsthalf_random==1&order_rate>=40", effects: [{ modifier: 3500, type: 27 }], precondition: "" }, { baseDuration: 24e3, condition: "is_activate_other_skill_detail==1&slope==2&distance_rate>=50", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 6 }, "111501111": { alternatives: [{ baseDuration: 9e3, condition: "running_style==4&course_distance>=2000&is_lastspurt==1&ground_type==1", effects: [{ modifier: 4e3, type: 31 }], precondition: "" }], rarity: 6 }, "111501211": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==3&phase_firsthalf_random==1&order_rate>=40", effects: [{ modifier: 3500, type: 27 }], precondition: "" }, { baseDuration: 3e4, condition: "is_activate_other_skill_detail==1&phase_laterhalf_random==1", effects: [{ modifier: 2500, type: 22 }], precondition: "" }], rarity: 6 }, "111501221": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==3&phase_firsthalf_random==1&order_rate>=40@distance_type==4&phase_firsthalf_random==1&order_rate>=40", effects: [{ modifier: 4500, type: 27 }, { modifier: 350, type: 9 }], precondition: "" }], rarity: 6 }, "111601111": { alternatives: [{ baseDuration: 3e4, condition: "running_style==2&course_distance>=2000&infront_near_lane_time>=1&phase_firstquarter==2@running_style==2&course_distance>=2000&phase_firstquarter_random==2", effects: [{ modifier: 4e3, type: 31 }, { modifier: 250, type: 28 }], precondition: "" }], rarity: 6 }, "111601211": { alternatives: [{ baseDuration: 3e4, condition: "phase_random==1&running_style==2&distance_type==3", effects: [{ modifier: 4500, type: 27 }], precondition: "" }], rarity: 6 }, "111601221": { alternatives: [{ baseDuration: 3e4, condition: "phase_laterhalf_random==1&running_style==2&course_distance>=2400&course_distance<=2500&base_power>=1200", effects: [{ modifier: 5500, type: 27 }], precondition: "" }, { baseDuration: 3e4, condition: "phase_laterhalf_random==1&running_style==2&course_distance>=2400&course_distance<=2500", effects: [{ modifier: 4500, type: 27 }], precondition: "" }], rarity: 6 }, "111701111": { alternatives: [{ baseDuration: 24e3, condition: "running_style==4&distance_rate>=50&is_overtake==1", effects: [{ modifier: 4500, type: 27 }], precondition: "" }], rarity: 6 }, "111701211": { alternatives: [{ baseDuration: 4e4, condition: "phase_corner_random==1", effects: [{ modifier: 2500, type: 22 }], precondition: "" }, { baseDuration: 3e4, condition: "is_activate_other_skill_detail==1&is_last_straight==1", effects: [{ modifier: 1500, type: 22 }], precondition: "" }], rarity: 6 }, "111901111": { alternatives: [{ baseDuration: -1, condition: "rotation==1", effects: [{ modifier: 8e5, type: 1 }, { modifier: 8e5, type: 3 }], precondition: "" }], rarity: 6 }, "111901211": { alternatives: [{ baseDuration: 4e4, condition: "running_style==4&phase>=2&corner!=0&is_overtake==1&track_id==10005&base_wiz>=1200", effects: [{ modifier: 4e3, type: 22 }], precondition: "" }, { baseDuration: 4e4, condition: "running_style==4&phase>=2&corner!=0&is_overtake==1", effects: [{ modifier: 3500, type: 22 }], precondition: "" }], rarity: 6 }, "112001111": { alternatives: [{ baseDuration: 12e3, condition: "distance_type==1&running_style==1&phase==0", effects: [{ modifier: 1e3, type: 31 }], precondition: "" }, { baseDuration: 3e4, condition: "is_activate_other_skill_detail==1&straight_random==1", effects: [{ modifier: 3500, type: 22 }], precondition: "" }], rarity: 6 }, "112001211": { alternatives: [{ baseDuration: 12e3, condition: "distance_type==1&running_style==1&phase==0", effects: [{ modifier: 1e3, type: 31 }], precondition: "" }, { baseDuration: 3e4, condition: "is_activate_other_skill_detail==1&straight_random==1", effects: [{ modifier: 3500, type: 22 }], precondition: "" }], rarity: 6 }, "112101111": { alternatives: [{ baseDuration: 24e3, condition: "phase_laterhalf_random==1&running_style==4", effects: [{ modifier: 5500, type: 27 }, { modifier: -300, type: 9 }], precondition: "" }], rarity: 6 }, "112101211": { alternatives: [{ baseDuration: 2e4, condition: "distance_type==1&phase>=2&is_overtake==1&is_finalcorner==1&corner!=0@distance_type==2&phase>=2&is_overtake==1&is_finalcorner==1&corner!=0", effects: [{ modifier: 5e3, type: 31 }], precondition: "" }, { baseDuration: 2e4, condition: "distance_type==1&phase>=2&is_overtake==1@distance_type==2&phase>=2&is_overtake==1", effects: [{ modifier: 4e3, type: 31 }], precondition: "" }], rarity: 6 }, "112401111": { alternatives: [{ baseDuration: 4e4, condition: "running_style==2&distance_rate>=60&phase==1&distance_diff_top<=5&distance_type==2@running_style==2&distance_rate>=60&phase==1&distance_diff_top<=5&distance_type==3", effects: [{ modifier: 3500, type: 27 }], precondition: "" }, { baseDuration: 4e4, condition: "running_style==2&distance_rate>=60&phase==1", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 6 }, "112401211": { alternatives: [{ baseDuration: 24e3, condition: "running_style==2&is_last_straight==1&distance_diff_top_float<=25&distance_type==2@running_style==2&is_last_straight==1&distance_diff_top_float<=25&distance_type==3", effects: [{ modifier: 5500, type: 22 }], precondition: "" }, { baseDuration: 24e3, condition: "running_style==2&remain_distance<=201&remain_distance>=199", effects: [{ modifier: 2500, type: 27 }], precondition: "" }], rarity: 6 }, "113101111": { alternatives: [{ baseDuration: 4e4, condition: "distance_type==2&phase_firsthalf_random==2", effects: [{ modifier: 4500, type: 22 }], precondition: "" }, { baseDuration: 4e4, condition: "distance_type==1&phase_firsthalf_random==2", effects: [{ modifier: 3500, type: 22 }], precondition: "" }], rarity: 6 }, "113101211": { alternatives: [{ baseDuration: 18e3, condition: "distance_type==2&phase_firstquarter_random==2&order_rate>=40&ground_type==1", effects: [{ modifier: 5e3, type: 31 }, { modifier: -200, type: 9 }], precondition: "" }, { baseDuration: 18e3, condition: "distance_type!=2&phase_firsthalf_random==2&order_rate>=40&ground_type==1", effects: [{ modifier: 4e3, type: 31 }, { modifier: -200, type: 9 }], precondition: "" }], rarity: 6 }, "120011": { alternatives: [{ baseDuration: 5e4, condition: "phase>=2&is_finalcorner==1&corner!=0&is_activate_any_skill==1", effects: [{ modifier: 4500, type: 27 }], precondition: "track_id==10005" }, { baseDuration: 5e4, condition: "phase>=2&is_finalcorner==1&corner!=0&is_activate_any_skill==1", effects: [{ modifier: 2500, type: 27 }], precondition: "" }], rarity: 5 }, "120031": { alternatives: [{ baseDuration: 5e4, condition: "phase>=2&is_finalcorner_laterhalf==1&course_distance>=2400&course_distance<=2500@phase>=2&is_finalcorner==1&corner==0&course_distance>=2400&course_distance<=2500", effects: [{ modifier: 3500, type: 27 }, { modifier: 1500, type: 22 }], precondition: "distance_rate>=50&order_rate<=50&overtake_target_time>=2" }, { baseDuration: 5e4, condition: "phase>=2&is_finalcorner_laterhalf==1@phase>=2&is_finalcorner==1&corner==0", effects: [{ modifier: 3500, type: 27 }], precondition: "distance_rate>=50&order_rate<=50&overtake_target_time>=2" }], rarity: 5 }, "120041": { alternatives: [{ baseDuration: 4e4, condition: "phase_firsthalf==1&is_overtake==1&order_rate<=30&distance_type==2@phase_firsthalf==1&overtake_target_time>=1&order_rate<=30&distance_type==2", effects: [{ modifier: 4500, type: 22 }], precondition: "" }, { baseDuration: 4e4, condition: "phase_firsthalf==1&is_overtake==1&order_rate<=30@phase_firsthalf==1&overtake_target_time>=1&order_rate<=30", effects: [{ modifier: 2500, type: 22 }], precondition: "" }], rarity: 5 }, "120071": { alternatives: [{ baseDuration: 5e4, condition: "distance_type==3&is_finalcorner==1&is_overtake==1&order_rate>=50&is_badstart==1@distance_type==4&is_finalcorner==1&is_overtake==1&order_rate>=50&is_badstart==1", effects: [{ modifier: 4500, type: 27 }], precondition: "" }, { baseDuration: 5e4, condition: "distance_type==3&is_finalcorner==1&is_overtake==1&order_rate>=50@distance_type==4&is_finalcorner==1&is_overtake==1&order_rate>=50", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 5 }, "120111": { alternatives: [{ baseDuration: 5e4, condition: "remain_distance<=401&remain_distance>=399&is_basis_distance==0", effects: [{ modifier: 4500, type: 27 }], precondition: "distance_rate>=50&order_rate<=70&order_rate>=30&overtake_target_time>=1@distance_rate>=50&order_rate<=70&order_rate>=30&is_overtake==1" }, { baseDuration: 5e4, condition: "remain_distance<=401&remain_distance>=399", effects: [{ modifier: 3500, type: 27 }], precondition: "distance_rate>=50&order_rate<=70&order_rate>=30&overtake_target_time>=1@distance_rate>=50&order_rate<=70&order_rate>=30&is_overtake==1" }], rarity: 5 }, "120131": { alternatives: [{ baseDuration: 5e4, condition: "distance_rate>=50&order_rate<=40", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 5 }, "120231": { alternatives: [{ baseDuration: 5e4, condition: "distance_rate>=50&distance_rate<=51&distance_type==4&order_rate<=50", effects: [{ modifier: 5500, type: 27 }], precondition: "blocked_side_continuetime>=2&corner!=0" }, { baseDuration: 5e4, condition: "distance_rate>=50&distance_rate<=51&order_rate<=50", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 5 }, "120241": { alternatives: [{ baseDuration: 6e4, condition: "phase>=1&order==1@phase>=1&order<=3&is_overtake==1", effects: [{ modifier: 750, type: 9 }, { modifier: 2500, type: 22 }], precondition: "" }], rarity: 5 }, "120301": { alternatives: [{ baseDuration: 5e4, condition: "order_rate<=40&phase>=2&corner!=0&is_finalcorner==1&track_id==10008&distance_type==4", effects: [{ modifier: 5500, type: 27 }], precondition: "" }, { baseDuration: 5e4, condition: "order_rate<=40&phase>=2&corner!=0&is_finalcorner==1", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 5 }, "120321": { alternatives: [{ baseDuration: 4e4, condition: "phase>=2&is_finalcorner==1&order_rate<=50&distance_type==3", effects: [{ modifier: 4500, type: 22 }], precondition: "" }, { baseDuration: 4e4, condition: "phase>=2&is_finalcorner==1&order_rate<=50", effects: [{ modifier: 4500, type: 27 }], precondition: "" }], rarity: 5 }, "120351": { alternatives: [{ baseDuration: 6e4, condition: "corner==3&course_distance==2400&popularity<=3", effects: [{ modifier: 3500, type: 27 }], precondition: "phase==1&change_order_onetime<0&order_rate>=40&order_rate<=80" }, { baseDuration: 4e4, condition: "corner==3", effects: [{ modifier: 3500, type: 27 }], precondition: "phase==1&change_order_onetime<0&order_rate>=40&order_rate<=80" }], rarity: 5 }, "120371": { alternatives: [{ baseDuration: 5e4, condition: "is_finalcorner==1&corner!=0&order_rate<=80&order_rate>=40&distance_type==3&track_id==10006", effects: [{ modifier: 4500, type: 22 }], precondition: "" }, { baseDuration: 5e4, condition: "is_finalcorner==1&corner!=0&order_rate<=80&order_rate>=40&distance_type==3", effects: [{ modifier: 3500, type: 22 }], precondition: "" }], rarity: 5 }, "120451": { alternatives: [{ baseDuration: 6e4, condition: "phase==1&distance_type==3&corner!=0&order_rate>=20&order_rate<=50@phase==1&distance_type==4&corner!=0&order_rate>=20&order_rate<=50", effects: [{ modifier: 550, type: 9 }, { modifier: 2500, type: 27 }], precondition: "" }, { baseDuration: 0, condition: "phase==1&corner!=0&order_rate>=20&order_rate<=50", effects: [{ modifier: 550, type: 9 }], precondition: "" }], rarity: 5 }, "120501": { alternatives: [{ baseDuration: 4e4, condition: "phase>=2&corner!=0&remain_distance>=600&order_rate>=50&distance_type==3&track_id==10005", effects: [{ modifier: 4500, type: 22 }, { modifier: 1e3, type: 31 }], precondition: "" }, { baseDuration: 4e4, condition: "phase>=2&corner!=0&remain_distance>=600&order_rate>=50", effects: [{ modifier: 3500, type: 22 }], precondition: "" }], rarity: 5 }, "120601": { alternatives: [{ baseDuration: 4e4, condition: "phase>=2&is_finalcorner==1&order_rate>=40&distance_type==3", effects: [{ modifier: 4500, type: 22 }], precondition: "" }, { baseDuration: 4e4, condition: "phase>=2&is_finalcorner==1&order_rate>=40", effects: [{ modifier: 4500, type: 27 }], precondition: "" }], rarity: 5 }, "120611": { alternatives: [{ baseDuration: 6e4, condition: "is_lastspurt==1&phase==3", effects: [{ modifier: 3500, type: 27 }], precondition: "remain_distance<=600&order_rate>=40&order_rate<=80&is_behind_in==1&change_order_onetime<0" }], rarity: 5 }, "120671": { alternatives: [{ baseDuration: 5e4, condition: "phase_laterhalf_random==1&order_rate>=40&order_rate<=80&distance_type==3", effects: [{ modifier: 3500, type: 27 }], precondition: "" }, { baseDuration: 5e4, condition: "phase_laterhalf_random==1&order_rate>=40&order_rate<=80&distance_type!=3", effects: [{ modifier: 2500, type: 27 }], precondition: "" }], rarity: 5 }, "120681": { alternatives: [{ baseDuration: 3e4, condition: "phase<=1&change_order_onetime>0&accumulatetime>=5&order_rate<=50@phase<=1&blocked_side_continuetime>=2&accumulatetime>=5&order_rate<=50", effects: [{ modifier: 3500, type: 27 }], precondition: "" }, { baseDuration: 6e4, condition: "is_activate_other_skill_detail==1&order<=2&distance_rate>=50&distance_type==4", effects: [{ modifier: 2500, type: 27 }], precondition: "" }], rarity: 5 }, "1400011": { alternatives: [{ baseDuration: 5e4, condition: "is_lastspurt==1&phase==3", effects: [{ modifier: 4500, type: 27 }], precondition: "" }], rarity: 5 }, "200011": { alternatives: [{ baseDuration: -1, condition: "rotation==1", effects: [{ modifier: 6e5, type: 1 }], precondition: "" }], rarity: 1 }, "200012": { alternatives: [{ baseDuration: -1, condition: "rotation==1", effects: [{ modifier: 4e5, type: 1 }], precondition: "" }], rarity: 1 }, "200013": { alternatives: [{ baseDuration: -1, condition: "rotation==1", effects: [{ modifier: -4e5, type: 1 }], precondition: "" }], rarity: 1 }, "200014": { alternatives: [{ baseDuration: -1, condition: "rotation==1", effects: [{ modifier: 6e5, type: 1 }, { modifier: 6e5, type: 3 }], precondition: "" }], rarity: 2 }, "200021": { alternatives: [{ baseDuration: -1, condition: "rotation==2", effects: [{ modifier: 6e5, type: 1 }], precondition: "" }], rarity: 1 }, "200022": { alternatives: [{ baseDuration: -1, condition: "rotation==2", effects: [{ modifier: 4e5, type: 1 }], precondition: "" }], rarity: 1 }, "200023": { alternatives: [{ baseDuration: -1, condition: "rotation==2", effects: [{ modifier: -4e5, type: 1 }], precondition: "" }], rarity: 1 }, "200031": { alternatives: [{ baseDuration: -1, condition: "track_id==10006", effects: [{ modifier: 6e5, type: 2 }], precondition: "" }], rarity: 1 }, "200032": { alternatives: [{ baseDuration: -1, condition: "track_id==10006", effects: [{ modifier: 4e5, type: 2 }], precondition: "" }], rarity: 1 }, "200033": { alternatives: [{ baseDuration: -1, condition: "track_id==10006", effects: [{ modifier: -4e5, type: 2 }], precondition: "" }], rarity: 1 }, "200034": { alternatives: [{ baseDuration: -1, condition: "track_id==10006", effects: [{ modifier: 6e5, type: 2 }, { modifier: 6e5, type: 5 }, { modifier: 6e5, type: 1 }], precondition: "" }], rarity: 2 }, "200041": { alternatives: [{ baseDuration: -1, condition: "track_id==10005", effects: [{ modifier: 6e5, type: 2 }], precondition: "" }], rarity: 1 }, "200042": { alternatives: [{ baseDuration: -1, condition: "track_id==10005", effects: [{ modifier: 4e5, type: 2 }], precondition: "" }], rarity: 1 }, "200043": { alternatives: [{ baseDuration: -1, condition: "track_id==10005", effects: [{ modifier: -4e5, type: 2 }], precondition: "" }], rarity: 1 }, "200051": { alternatives: [{ baseDuration: -1, condition: "track_id==10009", effects: [{ modifier: 6e5, type: 2 }], precondition: "" }], rarity: 1 }, "200052": { alternatives: [{ baseDuration: -1, condition: "track_id==10009", effects: [{ modifier: 4e5, type: 2 }], precondition: "" }], rarity: 1 }, "200053": { alternatives: [{ baseDuration: -1, condition: "track_id==10009", effects: [{ modifier: -4e5, type: 2 }], precondition: "" }], rarity: 1 }, "200061": { alternatives: [{ baseDuration: -1, condition: "track_id==10008", effects: [{ modifier: 6e5, type: 2 }], precondition: "" }], rarity: 1 }, "200062": { alternatives: [{ baseDuration: -1, condition: "track_id==10008", effects: [{ modifier: 4e5, type: 2 }], precondition: "" }], rarity: 1 }, "200063": { alternatives: [{ baseDuration: -1, condition: "track_id==10008", effects: [{ modifier: -4e5, type: 2 }], precondition: "" }], rarity: 1 }, "200064": { alternatives: [{ baseDuration: -1, condition: "track_id==10008", effects: [{ modifier: 6e5, type: 2 }, { modifier: 6e5, type: 5 }, { modifier: 6e5, type: 1 }], precondition: "" }], rarity: 2 }, "200071": { alternatives: [{ baseDuration: -1, condition: "track_id==10007", effects: [{ modifier: 6e5, type: 2 }], precondition: "" }], rarity: 1 }, "200072": { alternatives: [{ baseDuration: -1, condition: "track_id==10007", effects: [{ modifier: 4e5, type: 2 }], precondition: "" }], rarity: 1 }, "200073": { alternatives: [{ baseDuration: -1, condition: "track_id==10007", effects: [{ modifier: -4e5, type: 2 }], precondition: "" }], rarity: 1 }, "200081": { alternatives: [{ baseDuration: -1, condition: "track_id==10001", effects: [{ modifier: 6e5, type: 2 }], precondition: "" }], rarity: 1 }, "200082": { alternatives: [{ baseDuration: -1, condition: "track_id==10001", effects: [{ modifier: 4e5, type: 2 }], precondition: "" }], rarity: 1 }, "200083": { alternatives: [{ baseDuration: -1, condition: "track_id==10001", effects: [{ modifier: -4e5, type: 2 }], precondition: "" }], rarity: 1 }, "200091": { alternatives: [{ baseDuration: -1, condition: "track_id==10002", effects: [{ modifier: 6e5, type: 2 }], precondition: "" }], rarity: 1 }, "200092": { alternatives: [{ baseDuration: -1, condition: "track_id==10002", effects: [{ modifier: 4e5, type: 2 }], precondition: "" }], rarity: 1 }, "200093": { alternatives: [{ baseDuration: -1, condition: "track_id==10002", effects: [{ modifier: -4e5, type: 2 }], precondition: "" }], rarity: 1 }, "200101": { alternatives: [{ baseDuration: -1, condition: "track_id==10004", effects: [{ modifier: 6e5, type: 2 }], precondition: "" }], rarity: 1 }, "200102": { alternatives: [{ baseDuration: -1, condition: "track_id==10004", effects: [{ modifier: 4e5, type: 2 }], precondition: "" }], rarity: 1 }, "200103": { alternatives: [{ baseDuration: -1, condition: "track_id==10004", effects: [{ modifier: -4e5, type: 2 }], precondition: "" }], rarity: 1 }, "200111": { alternatives: [{ baseDuration: -1, condition: "track_id==10003", effects: [{ modifier: 6e5, type: 2 }], precondition: "" }], rarity: 1 }, "200112": { alternatives: [{ baseDuration: -1, condition: "track_id==10003", effects: [{ modifier: 4e5, type: 2 }], precondition: "" }], rarity: 1 }, "200113": { alternatives: [{ baseDuration: -1, condition: "track_id==10003", effects: [{ modifier: -4e5, type: 2 }], precondition: "" }], rarity: 1 }, "200121": { alternatives: [{ baseDuration: -1, condition: "track_id==10010", effects: [{ modifier: 6e5, type: 2 }], precondition: "" }], rarity: 1 }, "200122": { alternatives: [{ baseDuration: -1, condition: "track_id==10010", effects: [{ modifier: 4e5, type: 2 }], precondition: "" }], rarity: 1 }, "200123": { alternatives: [{ baseDuration: -1, condition: "track_id==10010", effects: [{ modifier: -4e5, type: 2 }], precondition: "" }], rarity: 1 }, "200131": { alternatives: [{ baseDuration: -1, condition: "is_basis_distance==1", effects: [{ modifier: 6e5, type: 2 }], precondition: "" }], rarity: 1 }, "200132": { alternatives: [{ baseDuration: -1, condition: "is_basis_distance==1", effects: [{ modifier: 4e5, type: 2 }], precondition: "" }], rarity: 1 }, "200133": { alternatives: [{ baseDuration: -1, condition: "is_basis_distance==1", effects: [{ modifier: -4e5, type: 2 }], precondition: "" }], rarity: 1 }, "200141": { alternatives: [{ baseDuration: -1, condition: "is_basis_distance==0", effects: [{ modifier: 6e5, type: 2 }], precondition: "" }], rarity: 1 }, "200142": { alternatives: [{ baseDuration: -1, condition: "is_basis_distance==0", effects: [{ modifier: 4e5, type: 2 }], precondition: "" }], rarity: 1 }, "200143": { alternatives: [{ baseDuration: -1, condition: "is_basis_distance==0", effects: [{ modifier: -4e5, type: 2 }], precondition: "" }], rarity: 1 }, "200151": { alternatives: [{ baseDuration: -1, condition: "ground_condition==1", effects: [{ modifier: 6e5, type: 3 }], precondition: "" }], rarity: 1 }, "200152": { alternatives: [{ baseDuration: -1, condition: "ground_condition==1", effects: [{ modifier: 4e5, type: 3 }], precondition: "" }], rarity: 1 }, "200153": { alternatives: [{ baseDuration: -1, condition: "ground_condition==1", effects: [{ modifier: -4e5, type: 3 }], precondition: "" }], rarity: 1 }, "200154": { alternatives: [{ baseDuration: -1, condition: "ground_condition==1", effects: [{ modifier: 6e5, type: 3 }, { modifier: 6e5, type: 1 }], precondition: "" }], rarity: 2 }, "200161": { alternatives: [{ baseDuration: -1, condition: "ground_condition==2@ground_condition==3@ground_condition==4", effects: [{ modifier: 6e5, type: 3 }], precondition: "" }], rarity: 1 }, "200162": { alternatives: [{ baseDuration: -1, condition: "ground_condition==2@ground_condition==3@ground_condition==4", effects: [{ modifier: 4e5, type: 3 }], precondition: "" }], rarity: 1 }, "200163": { alternatives: [{ baseDuration: -1, condition: "ground_condition==2@ground_condition==3@ground_condition==4", effects: [{ modifier: -4e5, type: 3 }], precondition: "" }], rarity: 1 }, "200164": { alternatives: [{ baseDuration: -1, condition: "ground_condition==2@ground_condition==3@ground_condition==4", effects: [{ modifier: 6e5, type: 3 }, { modifier: 6e5, type: 1 }], precondition: "" }], rarity: 2 }, "200171": { alternatives: [{ baseDuration: -1, condition: "season==1@season==5", effects: [{ modifier: 6e5, type: 1 }], precondition: "" }], rarity: 1 }, "200172": { alternatives: [{ baseDuration: -1, condition: "season==1@season==5", effects: [{ modifier: 4e5, type: 1 }], precondition: "" }], rarity: 1 }, "200173": { alternatives: [{ baseDuration: -1, condition: "season==1@season==5", effects: [{ modifier: -4e5, type: 1 }], precondition: "" }], rarity: 1 }, "200174": { alternatives: [{ baseDuration: -1, condition: "season==1@season==5", effects: [{ modifier: 6e5, type: 1 }, { modifier: 6e5, type: 3 }], precondition: "" }], rarity: 2 }, "200181": { alternatives: [{ baseDuration: -1, condition: "season==2", effects: [{ modifier: 6e5, type: 1 }], precondition: "" }], rarity: 1 }, "200182": { alternatives: [{ baseDuration: -1, condition: "season==2", effects: [{ modifier: 4e5, type: 1 }], precondition: "" }], rarity: 1 }, "200183": { alternatives: [{ baseDuration: -1, condition: "season==2", effects: [{ modifier: -4e5, type: 1 }], precondition: "" }], rarity: 1 }, "200184": { alternatives: [{ baseDuration: -1, condition: "season==2", effects: [{ modifier: 6e5, type: 1 }, { modifier: 6e5, type: 3 }], precondition: "" }], rarity: 2 }, "200191": { alternatives: [{ baseDuration: -1, condition: "season==3", effects: [{ modifier: 6e5, type: 1 }], precondition: "" }], rarity: 1 }, "200192": { alternatives: [{ baseDuration: -1, condition: "season==3", effects: [{ modifier: 4e5, type: 1 }], precondition: "" }], rarity: 1 }, "200193": { alternatives: [{ baseDuration: -1, condition: "season==3", effects: [{ modifier: -4e5, type: 1 }], precondition: "" }], rarity: 1 }, "200194": { alternatives: [{ baseDuration: -1, condition: "season==3", effects: [{ modifier: 6e5, type: 1 }, { modifier: 6e5, type: 3 }], precondition: "" }], rarity: 2 }, "200201": { alternatives: [{ baseDuration: -1, condition: "season==4", effects: [{ modifier: 6e5, type: 1 }], precondition: "" }], rarity: 1 }, "200202": { alternatives: [{ baseDuration: -1, condition: "season==4", effects: [{ modifier: 4e5, type: 1 }], precondition: "" }], rarity: 1 }, "200203": { alternatives: [{ baseDuration: -1, condition: "season==4", effects: [{ modifier: -4e5, type: 1 }], precondition: "" }], rarity: 1 }, "200204": { alternatives: [{ baseDuration: -1, condition: "season==4", effects: [{ modifier: 6e5, type: 1 }, { modifier: 6e5, type: 3 }], precondition: "" }], rarity: 2 }, "200211": { alternatives: [{ baseDuration: -1, condition: "weather==1", effects: [{ modifier: 6e5, type: 4 }], precondition: "" }], rarity: 1 }, "200212": { alternatives: [{ baseDuration: -1, condition: "weather==1", effects: [{ modifier: 4e5, type: 4 }], precondition: "" }], rarity: 1 }, "200221": { alternatives: [{ baseDuration: -1, condition: "weather==2", effects: [{ modifier: 6e5, type: 4 }], precondition: "" }], rarity: 1 }, "200222": { alternatives: [{ baseDuration: -1, condition: "weather==2", effects: [{ modifier: 4e5, type: 4 }], precondition: "" }], rarity: 1 }, "200231": { alternatives: [{ baseDuration: -1, condition: "weather==3", effects: [{ modifier: 6e5, type: 4 }], precondition: "" }], rarity: 1 }, "200232": { alternatives: [{ baseDuration: -1, condition: "weather==3", effects: [{ modifier: 4e5, type: 4 }], precondition: "" }], rarity: 1 }, "200233": { alternatives: [{ baseDuration: -1, condition: "weather==3", effects: [{ modifier: -4e5, type: 4 }], precondition: "" }], rarity: 1 }, "200241": { alternatives: [{ baseDuration: -1, condition: "weather==4", effects: [{ modifier: 6e5, type: 4 }], precondition: "" }], rarity: 1 }, "200242": { alternatives: [{ baseDuration: -1, condition: "weather==4", effects: [{ modifier: 4e5, type: 4 }], precondition: "" }], rarity: 1 }, "200251": { alternatives: [{ baseDuration: -1, condition: "post_number<=3", effects: [{ modifier: 6e5, type: 5 }], precondition: "" }], rarity: 1 }, "200252": { alternatives: [{ baseDuration: -1, condition: "post_number<=3", effects: [{ modifier: 4e5, type: 5 }], precondition: "" }], rarity: 1 }, "200253": { alternatives: [{ baseDuration: -1, condition: "post_number<=3", effects: [{ modifier: -4e5, type: 5 }], precondition: "" }], rarity: 1 }, "200261": { alternatives: [{ baseDuration: -1, condition: "post_number>=6", effects: [{ modifier: 6e5, type: 1 }], precondition: "" }], rarity: 1 }, "200262": { alternatives: [{ baseDuration: -1, condition: "post_number>=6", effects: [{ modifier: 4e5, type: 1 }], precondition: "" }], rarity: 1 }, "200263": { alternatives: [{ baseDuration: -1, condition: "post_number>=6", effects: [{ modifier: -4e5, type: 1 }], precondition: "" }], rarity: 1 }, "200271": { alternatives: [{ baseDuration: -1, condition: "running_style_count_same<=1", effects: [{ modifier: 8e5, type: 1 }], precondition: "" }], rarity: 1 }, "200272": { alternatives: [{ baseDuration: -1, condition: "running_style_count_same<=1", effects: [{ modifier: 6e5, type: 1 }], precondition: "" }], rarity: 1 }, "200281": { alternatives: [{ baseDuration: -1, condition: "running_style_count_same_rate>=40", effects: [{ modifier: 6e5, type: 3 }], precondition: "" }], rarity: 1 }, "200282": { alternatives: [{ baseDuration: -1, condition: "running_style_count_same_rate>=40", effects: [{ modifier: 4e5, type: 3 }], precondition: "" }], rarity: 1 }, "200283": { alternatives: [{ baseDuration: -1, condition: "running_style_count_same_rate>=40", effects: [{ modifier: -4e5, type: 3 }], precondition: "" }], rarity: 1 }, "200291": { alternatives: [{ baseDuration: -1, condition: "running_style_equal_popularity_one==1", effects: [{ modifier: 6e5, type: 4 }], precondition: "" }], rarity: 1 }, "200292": { alternatives: [{ baseDuration: -1, condition: "running_style_equal_popularity_one==1", effects: [{ modifier: 4e5, type: 4 }], precondition: "" }], rarity: 1 }, "200301": { alternatives: [{ baseDuration: -1, condition: "popularity>=4", effects: [{ modifier: 6e5, type: 1 }], precondition: "" }], rarity: 1 }, "200302": { alternatives: [{ baseDuration: -1, condition: "popularity>=4", effects: [{ modifier: 4e5, type: 1 }], precondition: "" }], rarity: 1 }, "200311": { alternatives: [{ baseDuration: -1, condition: "grade==100", effects: [{ modifier: -4e5, type: 1 }], precondition: "" }], rarity: 1 }, "200321": { alternatives: [{ baseDuration: -1, condition: "popularity==1", effects: [{ modifier: -4e5, type: 2 }], precondition: "" }], rarity: 1 }, "200331": { alternatives: [{ baseDuration: 24e3, condition: "all_corner_random==1", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 2 }, "200332": { alternatives: [{ baseDuration: 24e3, condition: "all_corner_random==1", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "200333": { alternatives: [{ baseDuration: 24e3, condition: "all_corner_random==1", effects: [{ modifier: -2e3, type: 21 }], precondition: "" }], rarity: 1 }, "200341": { alternatives: [{ baseDuration: 3e4, condition: "all_corner_random==1", effects: [{ modifier: 4e3, type: 31 }], precondition: "" }], rarity: 2 }, "200342": { alternatives: [{ baseDuration: 3e4, condition: "all_corner_random==1", effects: [{ modifier: 2e3, type: 31 }], precondition: "" }], rarity: 1 }, "200343": { alternatives: [{ baseDuration: 3e4, condition: "all_corner_random==1", effects: [{ modifier: -2e3, type: 31 }], precondition: "" }], rarity: 1 }, "200351": { alternatives: [{ baseDuration: 0, condition: "corner_random==1@corner_random==2@corner_random==3@corner_random==4", effects: [{ modifier: 550, type: 9 }], precondition: "" }], rarity: 2 }, "200352": { alternatives: [{ baseDuration: 0, condition: "corner_random==1@corner_random==2@corner_random==3@corner_random==4", effects: [{ modifier: 150, type: 9 }], precondition: "" }], rarity: 1 }, "200353": { alternatives: [{ baseDuration: 0, condition: "corner_random==1@corner_random==2@corner_random==3@corner_random==4", effects: [{ modifier: -200, type: 9 }], precondition: "" }], rarity: 1 }, "200361": { alternatives: [{ baseDuration: 3e4, condition: "straight_random==1", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 2 }, "200362": { alternatives: [{ baseDuration: 3e4, condition: "straight_random==1", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "200371": { alternatives: [{ baseDuration: 3e4, condition: "straight_random==1", effects: [{ modifier: 4e3, type: 31 }, { modifier: 1500, type: 27 }], precondition: "" }], rarity: 2 }, "200372": { alternatives: [{ baseDuration: 3e4, condition: "straight_random==1", effects: [{ modifier: 2e3, type: 31 }], precondition: "" }], rarity: 1 }, "200381": { alternatives: [{ baseDuration: 0, condition: "phase==1&corner==0", effects: [{ modifier: 550, type: 9 }], precondition: "" }], rarity: 2 }, "200382": { alternatives: [{ baseDuration: 0, condition: "phase==1&corner==0", effects: [{ modifier: 150, type: 9 }], precondition: "" }], rarity: 1 }, "200391": { alternatives: [{ baseDuration: 0, condition: "up_slope_random==1", effects: [{ modifier: -200, type: 9 }], precondition: "" }], rarity: 1 }, "200401": { alternatives: [{ baseDuration: 0, condition: "accumulatetime>=2&is_surrounded==1", effects: [{ modifier: -200, type: 9 }], precondition: "" }], rarity: 1 }, "200411": { alternatives: [{ baseDuration: 3e4, condition: "last_straight_random==1&distance_diff_rate>=75", effects: [{ modifier: -2e3, type: 21 }], precondition: "" }], rarity: 1 }, "200421": { alternatives: [{ baseDuration: 3e4, condition: "remain_distance==200&order==1&bashin_diff_behind>=1", effects: [{ modifier: -2e3, type: 21 }], precondition: "" }], rarity: 1 }, "200431": { alternatives: [{ baseDuration: 0, condition: "always==1", effects: [{ modifier: 4e3, type: 10 }], precondition: "" }], rarity: 2 }, "200432": { alternatives: [{ baseDuration: 0, condition: "always==1", effects: [{ modifier: 9e3, type: 10 }], precondition: "" }], rarity: 1 }, "200433": { alternatives: [{ baseDuration: 0, condition: "always==1", effects: [{ modifier: 15e3, type: 10 }], precondition: "" }], rarity: 1 }, "200441": { alternatives: [{ baseDuration: 2e4, condition: "phase<=1&accumulatetime>=5&blocked_front_continuetime>=1", effects: [{ modifier: 550, type: 9 }, { modifier: 350, type: 28 }], precondition: "" }], rarity: 2 }, "200442": { alternatives: [{ baseDuration: 2e4, condition: "phase<=1&accumulatetime>=5&blocked_front_continuetime>=1", effects: [{ modifier: 150, type: 9 }, { modifier: 150, type: 28 }], precondition: "" }], rarity: 1 }, "200451": { alternatives: [{ baseDuration: 3e4, condition: "phase_random==0", effects: [{ modifier: 450, type: 28 }], precondition: "" }], rarity: 2 }, "200452": { alternatives: [{ baseDuration: 3e4, condition: "phase_random==0", effects: [{ modifier: 350, type: 28 }], precondition: "" }], rarity: 1 }, "200461": { alternatives: [{ baseDuration: 18e3, condition: "phase==1&change_order_onetime<0", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 2 }, "200462": { alternatives: [{ baseDuration: 18e3, condition: "phase==1&change_order_onetime<0", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "200471": { alternatives: [{ baseDuration: 0, condition: "phase==1&change_order_onetime>0", effects: [{ modifier: 550, type: 9 }], precondition: "" }], rarity: 2 }, "200472": { alternatives: [{ baseDuration: 0, condition: "phase==1&change_order_onetime>0", effects: [{ modifier: 150, type: 9 }], precondition: "" }], rarity: 1 }, "200481": { alternatives: [{ baseDuration: 0, condition: "phase==1&is_surrounded==1", effects: [{ modifier: 550, type: 9 }], precondition: "" }], rarity: 2 }, "200482": { alternatives: [{ baseDuration: 0, condition: "phase==1&is_surrounded==1", effects: [{ modifier: 150, type: 9 }], precondition: "" }], rarity: 1 }, "200491": { alternatives: [{ baseDuration: 3e4, condition: "infront_near_lane_time>=1&is_lastspurt==1&hp_per>=1", effects: [{ modifier: 4e3, type: 31 }, { modifier: 250, type: 28 }], precondition: "" }], rarity: 2 }, "200492": { alternatives: [{ baseDuration: 3e4, condition: "infront_near_lane_time>=1&is_lastspurt==1&hp_per>=1", effects: [{ modifier: 2e3, type: 31 }, { modifier: 50, type: 28 }], precondition: "" }], rarity: 1 }, "200501": { alternatives: [{ baseDuration: 3e4, condition: "phase_random==2", effects: [{ modifier: 350, type: 28 }], precondition: "" }], rarity: 2 }, "200502": { alternatives: [{ baseDuration: 3e4, condition: "phase_random==2", effects: [{ modifier: 250, type: 28 }], precondition: "" }], rarity: 1 }, "200511": { alternatives: [{ baseDuration: 24e3, condition: "is_lastspurt==1&phase_firsthalf_random==3", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 2 }, "200512": { alternatives: [{ baseDuration: 24e3, condition: "is_lastspurt==1&phase_firsthalf_random==3", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "200521": { alternatives: [{ baseDuration: 0, condition: "accumulatetime>=2&order==1&bashin_diff_behind>=1", effects: [{ modifier: -200, type: 9 }], precondition: "" }], rarity: 1 }, "200531": { alternatives: [{ baseDuration: 12e3, condition: "running_style==1&phase==0", effects: [{ modifier: 4e3, type: 31 }], precondition: "" }], rarity: 2 }, "200532": { alternatives: [{ baseDuration: 12e3, condition: "running_style==1&phase==0", effects: [{ modifier: 2e3, type: 31 }], precondition: "" }], rarity: 1 }, "200541": { alternatives: [{ baseDuration: 3e4, condition: "running_style==1&phase_random==1&order_rate<=50", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 2 }, "200542": { alternatives: [{ baseDuration: 3e4, condition: "running_style==1&phase_random==1&order_rate<=50", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "200551": { alternatives: [{ baseDuration: 3e4, condition: "running_style==1&is_finalcorner_random==1&order==1", effects: [{ modifier: 4e3, type: 31 }], precondition: "" }], rarity: 2 }, "200552": { alternatives: [{ baseDuration: 3e4, condition: "running_style==1&is_finalcorner_random==1&order==1", effects: [{ modifier: 2e3, type: 31 }], precondition: "" }], rarity: 1 }, "200561": { alternatives: [{ baseDuration: 0, condition: "running_style==2&phase_laterhalf_random==0&order_rate<=50", effects: [{ modifier: 550, type: 9 }], precondition: "" }], rarity: 2 }, "200562": { alternatives: [{ baseDuration: 0, condition: "running_style==2&phase_laterhalf_random==0&order_rate<=50", effects: [{ modifier: 150, type: 9 }], precondition: "" }], rarity: 1 }, "200571": { alternatives: [{ baseDuration: 0, condition: "running_style==2&phase_random==1&order_rate<=50", effects: [{ modifier: 550, type: 9 }], precondition: "" }], rarity: 2 }, "200572": { alternatives: [{ baseDuration: 0, condition: "running_style==2&phase_random==1&order_rate<=50", effects: [{ modifier: 150, type: 9 }], precondition: "" }], rarity: 1 }, "200581": { alternatives: [{ baseDuration: 18e3, condition: "running_style==2&is_finalcorner_random==1&order_rate<=50", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 2 }, "200582": { alternatives: [{ baseDuration: 18e3, condition: "running_style==2&is_finalcorner_random==1&order_rate<=50", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "200591": { alternatives: [{ baseDuration: 24e3, condition: "running_style==3&phase_random==1&order_rate>=40", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 2 }, "200592": { alternatives: [{ baseDuration: 24e3, condition: "running_style==3&phase_random==1&order_rate>=40", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "200601": { alternatives: [{ baseDuration: 18e3, condition: "running_style==3&phase_firsthalf_random==2&order_rate>=40", effects: [{ modifier: 4e3, type: 31 }], precondition: "" }], rarity: 2 }, "200602": { alternatives: [{ baseDuration: 18e3, condition: "running_style==3&phase_firsthalf_random==2&order_rate>=40", effects: [{ modifier: 2e3, type: 31 }], precondition: "" }], rarity: 1 }, "200611": { alternatives: [{ baseDuration: 3e4, condition: "running_style==3&is_finalcorner==1&corner!=0&is_behind_in==1&change_order_onetime<0", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 2 }, "200612": { alternatives: [{ baseDuration: 3e4, condition: "running_style==3&is_finalcorner==1&corner!=0&is_behind_in==1&change_order_onetime<0", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "200621": { alternatives: [{ baseDuration: 0, condition: "running_style==4&phase_random==1&distance_diff_rate>=75", effects: [{ modifier: 550, type: 9 }], precondition: "" }], rarity: 2 }, "200622": { alternatives: [{ baseDuration: 0, condition: "running_style==4&phase_random==1&distance_diff_rate>=75", effects: [{ modifier: 150, type: 9 }], precondition: "" }], rarity: 1 }, "200631": { alternatives: [{ baseDuration: 3e4, condition: "running_style==4&phase_firsthalf_random==3&is_lastspurt==1", effects: [{ modifier: 3500, type: 27 }], precondition: "phase==2&distance_diff_rate>=50" }], rarity: 2 }, "200632": { alternatives: [{ baseDuration: 3e4, condition: "running_style==4&phase_firsthalf_random==3&is_lastspurt==1", effects: [{ modifier: 1500, type: 27 }], precondition: "phase==2&distance_diff_rate>=50" }], rarity: 1 }, "200641": { alternatives: [{ baseDuration: 9e3, condition: "running_style==4&is_lastspurt==1&corner==0", effects: [{ modifier: 4e3, type: 31 }], precondition: "" }], rarity: 2 }, "200642": { alternatives: [{ baseDuration: 9e3, condition: "running_style==4&is_lastspurt==1&corner==0", effects: [{ modifier: 2e3, type: 31 }], precondition: "" }], rarity: 1 }, "200651": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==1&phase_random==2", effects: [{ modifier: 4e3, type: 31 }], precondition: "" }], rarity: 2 }, "200652": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==1&phase_random==2", effects: [{ modifier: 2e3, type: 31 }], precondition: "" }], rarity: 1 }, "200662": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==1&phase_random==1&order_rate>50", effects: [{ modifier: 150, type: 9 }, { modifier: 1e3, type: 31 }], precondition: "" }], rarity: 1 }, "200671": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==1&phase_random==2&order_rate>50", effects: [{ modifier: 3500, type: 27 }, { modifier: 1e3, type: 31 }], precondition: "" }], rarity: 2 }, "200672": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==1&phase_random==2&order_rate>50", effects: [{ modifier: 1500, type: 27 }, { modifier: 500, type: 31 }], precondition: "" }], rarity: 1 }, "200681": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==2&phase_laterhalf_random==0&order_rate<=50", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 2 }, "200682": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==2&phase_laterhalf_random==0&order_rate<=50", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "200691": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==2&phase_laterhalf_random==0&order_rate>50", effects: [{ modifier: 550, type: 9 }, { modifier: -2e3, type: 21 }], precondition: "" }], rarity: 2 }, "200692": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==2&phase_laterhalf_random==0&order_rate>50", effects: [{ modifier: 150, type: 9 }, { modifier: -500, type: 21 }], precondition: "" }], rarity: 1 }, "200701": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==2&phase_random==2&order_rate>50", effects: [{ modifier: 4e3, type: 31 }], precondition: "" }], rarity: 2 }, "200702": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==2&phase_random==2&order_rate>50", effects: [{ modifier: 2e3, type: 31 }], precondition: "" }], rarity: 1 }, "200711": { alternatives: [{ baseDuration: 0, condition: "distance_type==3&phase_random==1&order<=3", effects: [{ modifier: 550, type: 9 }], precondition: "" }], rarity: 2 }, "200712": { alternatives: [{ baseDuration: 0, condition: "distance_type==3&phase_random==1&order<=3", effects: [{ modifier: 150, type: 9 }], precondition: "" }], rarity: 1 }, "200721": { alternatives: [{ baseDuration: 24e3, condition: "distance_type==3&phase_random==1&order_rate<=50", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 2 }, "200722": { alternatives: [{ baseDuration: 24e3, condition: "distance_type==3&phase_random==1&order_rate<=50", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "200731": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==3&is_finalcorner==1&overtake_target_time>=2", effects: [{ modifier: 3500, type: 27 }, { modifier: 1e3, type: 31 }], precondition: "" }], rarity: 2 }, "200732": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==3&is_finalcorner==1&overtake_target_time>=2", effects: [{ modifier: 1500, type: 27 }, { modifier: 500, type: 31 }], precondition: "" }], rarity: 1 }, "200741": { alternatives: [{ baseDuration: 0, condition: "distance_type==4&phase_random==1", effects: [{ modifier: 550, type: 9 }], precondition: "" }], rarity: 2 }, "200742": { alternatives: [{ baseDuration: 0, condition: "distance_type==4&phase_random==1", effects: [{ modifier: 150, type: 9 }], precondition: "" }], rarity: 1 }, "200751": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==4&is_finalcorner==1&corner!=0&lane_type==0", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 2 }, "200752": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==4&is_finalcorner==1&corner!=0&lane_type==0", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "200761": { alternatives: [{ baseDuration: 18e3, condition: "distance_type==4&hp_per<=30", effects: [{ modifier: 550, type: 9 }, { modifier: 3500, type: 27 }], precondition: "" }], rarity: 2 }, "200762": { alternatives: [{ baseDuration: 0, condition: "distance_type==4&hp_per<=30", effects: [{ modifier: 150, type: 9 }], precondition: "" }], rarity: 1 }, "200771": { alternatives: [{ baseDuration: 0, condition: "phase==1&order_rate<=50&temptation_opponent_count_behind>=1", effects: [{ modifier: -100, type: 9 }], precondition: "" }], rarity: 1 }, "200772": { alternatives: [{ baseDuration: 0, condition: "phase==1&order_rate<=50&temptation_opponent_count_behind>=1", effects: [{ modifier: -300, type: 9 }], precondition: "" }], rarity: 2 }, "200781": { alternatives: [{ baseDuration: 0, condition: "phase==1&order_rate>50&temptation_opponent_count_infront>=1", effects: [{ modifier: -100, type: 9 }], precondition: "" }], rarity: 1 }, "200791": { alternatives: [{ baseDuration: 0, condition: "running_style_temptation_opponent_count_nige>=1&is_temptation==0", effects: [{ modifier: 5e4, type: 13 }], precondition: "" }], rarity: 1 }, "200801": { alternatives: [{ baseDuration: 0, condition: "running_style_temptation_opponent_count_senko>=1&is_temptation==0", effects: [{ modifier: 5e4, type: 13 }], precondition: "" }], rarity: 1 }, "200811": { alternatives: [{ baseDuration: 0, condition: "running_style_temptation_opponent_count_sashi>=1&is_temptation==0", effects: [{ modifier: 5e4, type: 13 }], precondition: "" }], rarity: 1 }, "200821": { alternatives: [{ baseDuration: 0, condition: "running_style_temptation_opponent_count_oikomi>=1&is_temptation==0", effects: [{ modifier: 5e4, type: 13 }], precondition: "" }], rarity: 1 }, "200831": { alternatives: [{ baseDuration: 0, condition: "running_style_count_nige_otherself>=1&phase_random==0&accumulatetime>=5", effects: [{ modifier: -100, type: 9 }], precondition: "" }], rarity: 1 }, "200841": { alternatives: [{ baseDuration: 0, condition: "running_style_count_nige_otherself>=1&phase_random==1", effects: [{ modifier: -100, type: 9 }], precondition: "" }], rarity: 1 }, "200851": { alternatives: [{ baseDuration: 3e4, condition: "running_style_count_nige_otherself>=1&phase_random==2", effects: [{ modifier: -1500, type: 21 }], precondition: "" }], rarity: 1 }, "200861": { alternatives: [{ baseDuration: 0, condition: "running_style_count_senko_otherself>=1&phase_random==0&accumulatetime>=5", effects: [{ modifier: -100, type: 9 }], precondition: "" }], rarity: 1 }, "200871": { alternatives: [{ baseDuration: 0, condition: "running_style_count_senko_otherself>=1&phase_random==1", effects: [{ modifier: -100, type: 9 }], precondition: "" }], rarity: 1 }, "200881": { alternatives: [{ baseDuration: 3e4, condition: "running_style_count_senko_otherself>=1&phase_random==2", effects: [{ modifier: -1500, type: 21 }], precondition: "" }], rarity: 1 }, "200891": { alternatives: [{ baseDuration: 0, condition: "running_style_count_sashi_otherself>=1&phase_random==0&accumulatetime>=5", effects: [{ modifier: -100, type: 9 }], precondition: "" }], rarity: 1 }, "200901": { alternatives: [{ baseDuration: 0, condition: "running_style_count_sashi_otherself>=1&phase_random==1", effects: [{ modifier: -100, type: 9 }], precondition: "" }], rarity: 1 }, "200911": { alternatives: [{ baseDuration: 3e4, condition: "running_style_count_sashi_otherself>=1&phase_random==2", effects: [{ modifier: -1500, type: 21 }], precondition: "" }], rarity: 1 }, "200921": { alternatives: [{ baseDuration: 0, condition: "running_style_count_oikomi_otherself>=1&phase_random==0&accumulatetime>=5", effects: [{ modifier: -100, type: 9 }], precondition: "" }], rarity: 1 }, "200931": { alternatives: [{ baseDuration: 0, condition: "running_style_count_oikomi_otherself>=1&phase_random==1", effects: [{ modifier: -100, type: 9 }], precondition: "" }], rarity: 1 }, "200941": { alternatives: [{ baseDuration: 3e4, condition: "running_style_count_oikomi_otherself>=1&phase_random==2", effects: [{ modifier: -1500, type: 21 }], precondition: "" }], rarity: 1 }, "200951": { alternatives: [{ baseDuration: -1, condition: "track_id==10101", effects: [{ modifier: 6e5, type: 2 }], precondition: "" }], rarity: 1 }, "200952": { alternatives: [{ baseDuration: -1, condition: "track_id==10101", effects: [{ modifier: 4e5, type: 2 }], precondition: "" }], rarity: 1 }, "200953": { alternatives: [{ baseDuration: -1, condition: "track_id==10101", effects: [{ modifier: -4e5, type: 2 }], precondition: "" }], rarity: 1 }, "200961": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==1&straight_random==1", effects: [{ modifier: 2500, type: 27 }], precondition: "" }], rarity: 1 }, "200962": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==1&straight_random==1", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "200963": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==1&straight_random==1", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 2 }, "200971": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==1&all_corner_random==1", effects: [{ modifier: 2500, type: 27 }], precondition: "" }], rarity: 1 }, "200972": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==1&all_corner_random==1", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "200973": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==1&all_corner_random==1", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 2 }, "200981": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==1&phase==1&bashin_diff_behind>=3&order==1", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 2 }, "200982": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==1&phase==1&bashin_diff_behind>=3&order==1", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "200991": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==1&phase_laterhalf_random==1&order>=2&order_rate<=50", effects: [{ modifier: 4e3, type: 31 }], precondition: "" }], rarity: 2 }, "200992": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==1&phase_laterhalf_random==1&order>=2&order_rate<=50", effects: [{ modifier: 2e3, type: 31 }], precondition: "" }], rarity: 1 }, "201001": { alternatives: [{ baseDuration: 4e4, condition: "distance_type==1&phase_random==1", effects: [{ modifier: 350, type: 28 }, { modifier: 3e3, type: 31 }], precondition: "" }], rarity: 2 }, "201002": { alternatives: [{ baseDuration: 4e4, condition: "distance_type==1&phase_random==1", effects: [{ modifier: 250, type: 28 }, { modifier: 2e3, type: 31 }], precondition: "" }], rarity: 1 }, "201011": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==1&phase_random==0&order_rate<=50&accumulatetime>=5", effects: [{ modifier: -2500, type: 21 }], precondition: "" }], rarity: 2 }, "201012": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==1&phase_random==0&order_rate<=50&accumulatetime>=5", effects: [{ modifier: -2e3, type: 21 }], precondition: "" }], rarity: 1 }, "201021": { alternatives: [{ baseDuration: 12e3, condition: "distance_type==1&phase_random==0&order_rate>50&accumulatetime>=5", effects: [{ modifier: -300, type: 9 }, { modifier: -2e3, type: 31 }], precondition: "" }], rarity: 2 }, "201022": { alternatives: [{ baseDuration: 12e3, condition: "distance_type==1&phase_random==0&order_rate>50&accumulatetime>=5", effects: [{ modifier: -100, type: 9 }, { modifier: -500, type: 31 }], precondition: "" }], rarity: 1 }, "201031": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==2&straight_random==1", effects: [{ modifier: 2500, type: 27 }], precondition: "" }], rarity: 1 }, "201032": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==2&straight_random==1", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "201033": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==2&straight_random==1", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 2 }, "201041": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==2&all_corner_random==1", effects: [{ modifier: 2500, type: 27 }], precondition: "" }], rarity: 1 }, "201042": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==2&all_corner_random==1", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "201043": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==2&all_corner_random==1", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 2 }, "201051": { alternatives: [{ baseDuration: 24e3, condition: "distance_type==2&phase_random==1&order_rate<=50", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 2 }, "201052": { alternatives: [{ baseDuration: 24e3, condition: "distance_type==2&phase_random==1&order_rate<=50", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "201061": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==2&distance_rate>=50&change_order_onetime<0", effects: [{ modifier: 4e3, type: 31 }], precondition: "" }], rarity: 2 }, "201062": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==2&distance_rate>=50&change_order_onetime<0", effects: [{ modifier: 2e3, type: 31 }], precondition: "" }], rarity: 1 }, "201071": { alternatives: [{ baseDuration: 24e3, condition: "distance_type==2&is_overtake==1&accumulatetime>=5", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 2 }, "201072": { alternatives: [{ baseDuration: 24e3, condition: "distance_type==2&is_overtake==1&accumulatetime>=5", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "201081": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==2&phase_random==1&order<=3", effects: [{ modifier: -2e3, type: 21 }, { modifier: 2500, type: 27 }], precondition: "" }], rarity: 2 }, "201082": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==2&phase_random==1&order<=3", effects: [{ modifier: -1500, type: 21 }, { modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "201091": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==2&phase_random==0&order_rate>50&accumulatetime>=3", effects: [{ modifier: -3e3, type: 31 }], precondition: "" }], rarity: 2 }, "201092": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==2&phase_random==0&order_rate>50&accumulatetime>=3", effects: [{ modifier: -1e3, type: 31 }], precondition: "" }], rarity: 1 }, "201101": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==3&straight_random==1", effects: [{ modifier: 2500, type: 27 }], precondition: "" }], rarity: 1 }, "201102": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==3&straight_random==1", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "201103": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==3&straight_random==1", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 2 }, "201111": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==3&all_corner_random==1", effects: [{ modifier: 2500, type: 27 }], precondition: "" }], rarity: 1 }, "201112": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==3&all_corner_random==1", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "201113": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==3&all_corner_random==1", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 2 }, "201121": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==3&phase_random==0", effects: [{ modifier: 15e4, type: 8 }], precondition: "" }], rarity: 2 }, "201122": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==3&phase_random==0", effects: [{ modifier: 1e5, type: 8 }], precondition: "" }], rarity: 1 }, "201131": { alternatives: [{ baseDuration: 4e4, condition: "distance_type==3&phase_random==1", effects: [{ modifier: 350, type: 28 }, { modifier: 3e3, type: 31 }], precondition: "" }], rarity: 2 }, "201132": { alternatives: [{ baseDuration: 4e4, condition: "distance_type==3&phase_random==1", effects: [{ modifier: 250, type: 28 }, { modifier: 2e3, type: 31 }], precondition: "" }], rarity: 1 }, "201141": { alternatives: [{ baseDuration: 0, condition: "distance_type==3&is_move_lane==1&accumulatetime>=10@distance_type==3&is_move_lane==2&accumulatetime>=10", effects: [{ modifier: 550, type: 9 }], precondition: "" }], rarity: 2 }, "201142": { alternatives: [{ baseDuration: 0, condition: "distance_type==3&is_move_lane==1&accumulatetime>=10@distance_type==3&is_move_lane==2&accumulatetime>=10", effects: [{ modifier: 150, type: 9 }], precondition: "" }], rarity: 1 }, "201151": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==3&phase_random==2&order_rate>50", effects: [{ modifier: -2500, type: 21 }], precondition: "" }], rarity: 2 }, "201152": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==3&phase_random==2&order_rate>50", effects: [{ modifier: -1500, type: 21 }], precondition: "" }], rarity: 1 }, "201161": { alternatives: [{ baseDuration: 0, condition: "distance_type==3&phase==1&blocked_front_continuetime>=1", effects: [{ modifier: -300, type: 9 }], precondition: "" }], rarity: 2 }, "201162": { alternatives: [{ baseDuration: 0, condition: "distance_type==3&phase==1&blocked_front_continuetime>=1", effects: [{ modifier: -100, type: 9 }], precondition: "" }], rarity: 1 }, "201171": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==4&straight_random==1", effects: [{ modifier: 2500, type: 27 }], precondition: "" }], rarity: 1 }, "201172": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==4&straight_random==1", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "201173": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==4&straight_random==1", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 2 }, "201181": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==4&all_corner_random==1", effects: [{ modifier: 2500, type: 27 }], precondition: "" }], rarity: 1 }, "201182": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==4&all_corner_random==1", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "201191": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==4&phase_random==1&bashin_diff_behind>=1&order==1", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 2 }, "201192": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==4&phase_random==1&bashin_diff_behind>=1&order==1", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "201201": { alternatives: [{ baseDuration: 0, condition: "distance_type==4&is_overtake==1&accumulatetime>=5", effects: [{ modifier: 550, type: 9 }], precondition: "" }], rarity: 2 }, "201202": { alternatives: [{ baseDuration: 0, condition: "distance_type==4&is_overtake==1&accumulatetime>=5", effects: [{ modifier: 150, type: 9 }], precondition: "" }], rarity: 1 }, "201211": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==4&phase==2&change_order_onetime<0", effects: [{ modifier: 3500, type: 27 }, { modifier: 1e3, type: 31 }], precondition: "" }], rarity: 2 }, "201212": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==4&phase==2&change_order_onetime<0", effects: [{ modifier: 1500, type: 27 }, { modifier: 500, type: 31 }], precondition: "" }], rarity: 1 }, "201221": { alternatives: [{ baseDuration: 0, condition: "distance_type==4&phase_random==1&order>=5", effects: [{ modifier: -100, type: 9 }, { modifier: 350, type: 9 }], precondition: "" }], rarity: 2 }, "201222": { alternatives: [{ baseDuration: 0, condition: "distance_type==4&phase_random==1&order>=5", effects: [{ modifier: -50, type: 9 }, { modifier: 150, type: 9 }], precondition: "" }], rarity: 1 }, "201231": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==4&phase_random==2", effects: [{ modifier: -1e5, type: 8 }], precondition: "" }], rarity: 2 }, "201232": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==4&phase_random==2", effects: [{ modifier: -5e4, type: 8 }], precondition: "" }], rarity: 1 }, "201241": { alternatives: [{ baseDuration: 3e4, condition: "running_style==1&straight_random==1", effects: [{ modifier: 2500, type: 27 }], precondition: "" }], rarity: 1 }, "201242": { alternatives: [{ baseDuration: 3e4, condition: "running_style==1&straight_random==1", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "201243": { alternatives: [{ baseDuration: 3e4, condition: "running_style==1&straight_random==1", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 2 }, "201251": { alternatives: [{ baseDuration: 3e4, condition: "running_style==1&all_corner_random==1", effects: [{ modifier: 2500, type: 27 }], precondition: "" }], rarity: 1 }, "201252": { alternatives: [{ baseDuration: 3e4, condition: "running_style==1&all_corner_random==1", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "201253": { alternatives: [{ baseDuration: 3e4, condition: "running_style==1&all_corner_random==1", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 2 }, "201261": { alternatives: [{ baseDuration: 3e4, condition: "running_style==1&phase==0&blocked_front_continuetime>=1@running_style==1&phase==0&blocked_side_continuetime>=1", effects: [{ modifier: 350, type: 28 }, { modifier: 5e3, type: 35 }], precondition: "" }], rarity: 2 }, "201262": { alternatives: [{ baseDuration: 3e4, condition: "running_style==1&phase==0&blocked_front_continuetime>=1@running_style==1&phase==0&blocked_side_continuetime>=1", effects: [{ modifier: 250, type: 28 }, { modifier: 5e3, type: 35 }], precondition: "" }], rarity: 1 }, "201271": { alternatives: [{ baseDuration: 3e4, condition: "running_style==1&phase<=1&change_order_onetime>0&accumulatetime>=5@running_style==1&phase<=1&blocked_side_continuetime>=2&accumulatetime>=5", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 2 }, "201272": { alternatives: [{ baseDuration: 3e4, condition: "running_style==1&phase<=1&change_order_onetime>0&accumulatetime>=5@running_style==1&phase<=1&blocked_side_continuetime>=2&accumulatetime>=5", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "201281": { alternatives: [{ baseDuration: 0, condition: "running_style==1&slope==1&accumulatetime>=10", effects: [{ modifier: 550, type: 9 }], precondition: "" }], rarity: 2 }, "201282": { alternatives: [{ baseDuration: 0, condition: "running_style==1&slope==1&accumulatetime>=10", effects: [{ modifier: 150, type: 9 }], precondition: "" }], rarity: 1 }, "201291": { alternatives: [{ baseDuration: 3e4, condition: "running_style==1&phase_random==2", effects: [{ modifier: 4e3, type: 31 }, { modifier: -200, type: 9 }], precondition: "" }], rarity: 2 }, "201292": { alternatives: [{ baseDuration: 3e4, condition: "running_style==1&phase_random==2", effects: [{ modifier: 2e3, type: 31 }, { modifier: -200, type: 9 }], precondition: "" }], rarity: 1 }, "201302": { alternatives: [{ baseDuration: 3e4, condition: "running_style==1&phase_random==0&order>=2&accumulatetime>=5", effects: [{ modifier: -1e3, type: 31 }], precondition: "" }], rarity: 1 }, "201311": { alternatives: [{ baseDuration: 3e4, condition: "running_style==2&straight_random==1", effects: [{ modifier: 2500, type: 27 }], precondition: "" }], rarity: 1 }, "201312": { alternatives: [{ baseDuration: 3e4, condition: "running_style==2&straight_random==1", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "201313": { alternatives: [{ baseDuration: 3e4, condition: "running_style==2&straight_random==1", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 2 }, "201321": { alternatives: [{ baseDuration: 3e4, condition: "running_style==2&all_corner_random==1", effects: [{ modifier: 2500, type: 27 }], precondition: "" }], rarity: 1 }, "201322": { alternatives: [{ baseDuration: 3e4, condition: "running_style==2&all_corner_random==1", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "201323": { alternatives: [{ baseDuration: 3e4, condition: "running_style==2&all_corner_random==1", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 2 }, "201331": { alternatives: [{ baseDuration: 3e4, condition: "running_style==2&is_move_lane==1@running_style==2&is_move_lane==2", effects: [{ modifier: 3e3, type: 31 }], precondition: "" }], rarity: 2 }, "201332": { alternatives: [{ baseDuration: 3e4, condition: "running_style==2&is_move_lane==1@running_style==2&is_move_lane==2", effects: [{ modifier: 2e3, type: 31 }], precondition: "" }], rarity: 1 }, "201341": { alternatives: [{ baseDuration: 3e4, condition: "running_style==2&down_slope_random==1", effects: [{ modifier: 3e3, type: 31 }], precondition: "" }], rarity: 2 }, "201342": { alternatives: [{ baseDuration: 3e4, condition: "running_style==2&down_slope_random==1", effects: [{ modifier: 2e3, type: 31 }], precondition: "" }], rarity: 1 }, "201351": { alternatives: [{ baseDuration: 0, condition: "running_style==2&phase_random==1", effects: [{ modifier: 550, type: 9 }], precondition: "" }], rarity: 2 }, "201352": { alternatives: [{ baseDuration: 0, condition: "running_style==2&phase_random==1", effects: [{ modifier: 150, type: 9 }], precondition: "" }], rarity: 1 }, "201361": { alternatives: [{ baseDuration: 3e4, condition: "running_style==2&phase_random==1&order_rate>40", effects: [{ modifier: 3e3, type: 31 }], precondition: "" }], rarity: 2 }, "201362": { alternatives: [{ baseDuration: 3e4, condition: "running_style==2&phase_random==1&order_rate>40", effects: [{ modifier: 2e3, type: 31 }], precondition: "" }], rarity: 1 }, "201371": { alternatives: [{ baseDuration: 3e4, condition: "running_style==2&phase_random==2&order_rate<=50", effects: [{ modifier: -5e4, type: 8 }], precondition: "" }], rarity: 2 }, "201372": { alternatives: [{ baseDuration: 3e4, condition: "running_style==2&phase_random==2&order_rate<=50", effects: [{ modifier: -3e4, type: 8 }], precondition: "" }], rarity: 1 }, "201381": { alternatives: [{ baseDuration: 3e4, condition: "running_style==3&straight_random==1", effects: [{ modifier: 2500, type: 27 }], precondition: "" }], rarity: 1 }, "201382": { alternatives: [{ baseDuration: 3e4, condition: "running_style==3&straight_random==1", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "201383": { alternatives: [{ baseDuration: 3e4, condition: "running_style==3&straight_random==1", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 2 }, "201391": { alternatives: [{ baseDuration: 3e4, condition: "running_style==3&all_corner_random==1", effects: [{ modifier: 2500, type: 27 }], precondition: "" }], rarity: 1 }, "201392": { alternatives: [{ baseDuration: 3e4, condition: "running_style==3&all_corner_random==1", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "201393": { alternatives: [{ baseDuration: 3e4, condition: "running_style==3&all_corner_random==1", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 2 }, "201401": { alternatives: [{ baseDuration: 4e4, condition: "running_style==3&is_overtake==1&accumulatetime>=5", effects: [{ modifier: 3e3, type: 31 }], precondition: "" }], rarity: 2 }, "201402": { alternatives: [{ baseDuration: 4e4, condition: "running_style==3&is_overtake==1&accumulatetime>=5", effects: [{ modifier: 2e3, type: 31 }], precondition: "" }], rarity: 1 }, "201411": { alternatives: [{ baseDuration: 24e3, condition: "running_style==3&up_slope_random==1", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 2 }, "201412": { alternatives: [{ baseDuration: 24e3, condition: "running_style==3&up_slope_random==1", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "201421": { alternatives: [{ baseDuration: 0, condition: "running_style==3&phase_random==1&order_rate>=40", effects: [{ modifier: 550, type: 9 }], precondition: "" }], rarity: 2 }, "201422": { alternatives: [{ baseDuration: 0, condition: "running_style==3&phase_random==1&order_rate>=40", effects: [{ modifier: 150, type: 9 }], precondition: "" }], rarity: 1 }, "201431": { alternatives: [{ baseDuration: 3e4, condition: "running_style==3&phase_random==1", effects: [{ modifier: 15e4, type: 8 }], precondition: "" }], rarity: 2 }, "201432": { alternatives: [{ baseDuration: 3e4, condition: "running_style==3&phase_random==1", effects: [{ modifier: 5e4, type: 8 }], precondition: "" }], rarity: 1 }, "201441": { alternatives: [{ baseDuration: 0, condition: "running_style==3&phase_random==2&order_rate>50", effects: [{ modifier: -300, type: 9 }], precondition: "" }], rarity: 2 }, "201442": { alternatives: [{ baseDuration: 0, condition: "running_style==3&phase_random==2&order_rate>50", effects: [{ modifier: -100, type: 9 }], precondition: "" }], rarity: 1 }, "201451": { alternatives: [{ baseDuration: 3e4, condition: "running_style==4&straight_random==1", effects: [{ modifier: 2500, type: 27 }], precondition: "" }], rarity: 1 }, "201452": { alternatives: [{ baseDuration: 3e4, condition: "running_style==4&straight_random==1", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "201453": { alternatives: [{ baseDuration: 3e4, condition: "running_style==4&straight_random==1", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 2 }, "201461": { alternatives: [{ baseDuration: 3e4, condition: "running_style==4&all_corner_random==1", effects: [{ modifier: 2500, type: 27 }], precondition: "" }], rarity: 1 }, "201462": { alternatives: [{ baseDuration: 3e4, condition: "running_style==4&all_corner_random==1", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "201463": { alternatives: [{ baseDuration: 3e4, condition: "running_style==4&all_corner_random==1", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 2 }, "201471": { alternatives: [{ baseDuration: 3e4, condition: "running_style==4&is_move_lane==1@running_style==4&is_move_lane==2", effects: [{ modifier: 1e5, type: 8 }], precondition: "" }], rarity: 2 }, "201472": { alternatives: [{ baseDuration: 3e4, condition: "running_style==4&is_move_lane==1@running_style==4&is_move_lane==2", effects: [{ modifier: 5e4, type: 8 }], precondition: "" }], rarity: 1 }, "201481": { alternatives: [{ baseDuration: 0, condition: "running_style==4&slope==2&accumulatetime>=10", effects: [{ modifier: 550, type: 9 }], precondition: "" }], rarity: 2 }, "201482": { alternatives: [{ baseDuration: 0, condition: "running_style==4&slope==2&accumulatetime>=10", effects: [{ modifier: 150, type: 9 }], precondition: "" }], rarity: 1 }, "201491": { alternatives: [{ baseDuration: 0, condition: "running_style==4&infront_near_lane_time>=1&accumulatetime>=10", effects: [{ modifier: 550, type: 9 }], precondition: "" }], rarity: 2 }, "201492": { alternatives: [{ baseDuration: 0, condition: "running_style==4&infront_near_lane_time>=1&accumulatetime>=10", effects: [{ modifier: 150, type: 9 }], precondition: "" }], rarity: 1 }, "201501": { alternatives: [{ baseDuration: 3e4, condition: "running_style==4&phase_random==2&order_rate>50", effects: [{ modifier: 15e4, type: 8 }], precondition: "" }], rarity: 2 }, "201502": { alternatives: [{ baseDuration: 3e4, condition: "running_style==4&phase_random==2&order_rate>50", effects: [{ modifier: 5e4, type: 8 }], precondition: "" }], rarity: 1 }, "201511": { alternatives: [{ baseDuration: 3e4, condition: "running_style==4&phase_random==2&order>=2", effects: [{ modifier: -2500, type: 21 }], precondition: "" }], rarity: 2 }, "201512": { alternatives: [{ baseDuration: 3e4, condition: "running_style==4&phase_random==2&order>=2", effects: [{ modifier: -1500, type: 21 }], precondition: "" }], rarity: 1 }, "201521": { alternatives: [{ baseDuration: -1, condition: "running_style==1", effects: [{ modifier: 6e5, type: 5 }, { modifier: 1e5, type: 8 }], precondition: "" }], rarity: 1 }, "201522": { alternatives: [{ baseDuration: -1, condition: "running_style==1", effects: [{ modifier: 4e5, type: 5 }, { modifier: 5e4, type: 8 }], precondition: "" }], rarity: 1 }, "201531": { alternatives: [{ baseDuration: -1, condition: "running_style==2", effects: [{ modifier: 6e5, type: 5 }, { modifier: 1e5, type: 8 }], precondition: "" }], rarity: 1 }, "201532": { alternatives: [{ baseDuration: -1, condition: "running_style==2", effects: [{ modifier: 4e5, type: 5 }, { modifier: 5e4, type: 8 }], precondition: "" }], rarity: 1 }, "201541": { alternatives: [{ baseDuration: -1, condition: "running_style==3", effects: [{ modifier: 6e5, type: 5 }, { modifier: 1e5, type: 8 }], precondition: "" }], rarity: 1 }, "201542": { alternatives: [{ baseDuration: -1, condition: "running_style==3", effects: [{ modifier: 4e5, type: 5 }, { modifier: 5e4, type: 8 }], precondition: "" }], rarity: 1 }, "201551": { alternatives: [{ baseDuration: -1, condition: "running_style==4", effects: [{ modifier: 6e5, type: 5 }, { modifier: 1e5, type: 8 }], precondition: "" }], rarity: 1 }, "201552": { alternatives: [{ baseDuration: -1, condition: "running_style==4", effects: [{ modifier: 4e5, type: 5 }, { modifier: 5e4, type: 8 }], precondition: "" }], rarity: 1 }, "201561": { alternatives: [{ baseDuration: -1, condition: "random_lot==50&post_number==7", effects: [{ modifier: 6e5, type: 1 }, { modifier: 6e5, type: 2 }, { modifier: 6e5, type: 3 }], precondition: "" }], rarity: 2 }, "201562": { alternatives: [{ baseDuration: -1, condition: "random_lot==50&post_number==7", effects: [{ modifier: 4e5, type: 1 }, { modifier: 4e5, type: 2 }, { modifier: 4e5, type: 3 }], precondition: "" }], rarity: 1 }, "201571": { alternatives: [{ baseDuration: 0, condition: "remain_distance<=778&remain_distance>=776", effects: [{ modifier: 150, type: 9 }], precondition: "" }], rarity: 1 }, "201581": { alternatives: [{ baseDuration: 3e4, condition: "up_slope_random==1", effects: [{ modifier: 2e3, type: 31 }], precondition: "" }], rarity: 1 }, "201582": { alternatives: [{ baseDuration: 3e4, condition: "up_slope_random==1", effects: [{ modifier: 4e3, type: 31 }], precondition: "" }], rarity: 2 }, "201591": { alternatives: [{ baseDuration: 3e4, condition: "near_count>=3&accumulatetime>=5", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "201592": { alternatives: [{ baseDuration: 3e4, condition: "near_count>=3&accumulatetime>=5", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 2 }, "201601": { alternatives: [{ baseDuration: 3e4, condition: "activate_count_start>=3", effects: [{ modifier: 2e3, type: 31 }], precondition: "" }], rarity: 1 }, "201602": { alternatives: [{ baseDuration: 3e4, condition: "activate_count_start>=3", effects: [{ modifier: 4e3, type: 31 }], precondition: "" }], rarity: 2 }, "201611": { alternatives: [{ baseDuration: 3e4, condition: "activate_count_middle>=3", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "201612": { alternatives: [{ baseDuration: 3e4, condition: "activate_count_middle>=3", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 2 }, "201621": { alternatives: [{ baseDuration: 0, condition: "activate_count_end_after>=3", effects: [{ modifier: 150, type: 9 }], precondition: "" }], rarity: 1 }, "201631": { alternatives: [{ baseDuration: -1, condition: "same_skill_horse_count>=5", effects: [{ modifier: 4e5, type: 1 }], precondition: "" }], rarity: 1 }, "201632": { alternatives: [{ baseDuration: -1, condition: "ground_type==1&is_exist_skill_id==201631", effects: [{ modifier: 6e5, type: 1 }, { modifier: 0, type: 41 }], precondition: "" }], rarity: 2 }, "201641": { alternatives: [{ baseDuration: -1, condition: "same_skill_horse_count==1", effects: [{ modifier: 4e5, type: 1 }], precondition: "" }], rarity: 1 }, "201651": { alternatives: [{ baseDuration: 3e4, condition: "infront_near_lane_time>=3&accumulatetime>=10", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "201652": { alternatives: [{ baseDuration: 3e4, condition: "infront_near_lane_time>=3&accumulatetime>=10", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 2 }, "201661": { alternatives: [{ baseDuration: 3e4, condition: "behind_near_lane_time>=3&accumulatetime>=10", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "201662": { alternatives: [{ baseDuration: 3e4, condition: "behind_near_lane_time>=3&accumulatetime>=10", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 2 }, "201671": { alternatives: [{ baseDuration: 24e3, condition: "ground_type==2&phase==1&blocked_side_continuetime>=2", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 2 }, "201672": { alternatives: [{ baseDuration: 24e3, condition: "ground_type==2&phase==1&blocked_side_continuetime>=2", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "201681": { alternatives: [{ baseDuration: 3e4, condition: "ground_type==2&phase_random==2", effects: [{ modifier: 350, type: 28 }, { modifier: 3e3, type: 31 }], precondition: "" }], rarity: 2 }, "201682": { alternatives: [{ baseDuration: 3e4, condition: "ground_type==2&phase_random==2", effects: [{ modifier: 250, type: 28 }, { modifier: 2e3, type: 31 }], precondition: "" }], rarity: 1 }, "201691": { alternatives: [{ baseDuration: 0, condition: "running_style==3&phase_laterhalf_random==0&order_rate>=40", effects: [{ modifier: 550, type: 9 }], precondition: "" }], rarity: 2 }, "201692": { alternatives: [{ baseDuration: 0, condition: "running_style==3&phase_laterhalf_random==0&order_rate>=40", effects: [{ modifier: 150, type: 9 }], precondition: "" }], rarity: 1 }, "201701": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==3&is_last_straight==1&order_rate>=20&order_rate<=60&phase>=2", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 2 }, "201702": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==3&is_last_straight==1&order_rate>=20&order_rate<=60&phase>=2", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "201801": { alternatives: [{ baseDuration: -1, condition: "ground_condition==1", effects: [{ modifier: -4e5, type: 1 }], precondition: "" }], rarity: 1 }, "201901": { alternatives: [{ baseDuration: 18e3, condition: "running_style==2&phase_firsthalf_random==2&order_rate<=50", effects: [{ modifier: 4e3, type: 31 }], precondition: "" }], rarity: 2 }, "201902": { alternatives: [{ baseDuration: 18e3, condition: "running_style==2&phase_firsthalf_random==2&order_rate<=50", effects: [{ modifier: 2e3, type: 31 }], precondition: "" }], rarity: 1 }, "202001": { alternatives: [{ baseDuration: 18e3, condition: "ground_type==2&phase_random==1&order_rate>=50", effects: [{ modifier: 550, type: 9 }, { modifier: 3500, type: 27 }], precondition: "" }], rarity: 2 }, "202002": { alternatives: [{ baseDuration: 0, condition: "ground_type==2&phase_random==1&order_rate>=50", effects: [{ modifier: 150, type: 9 }], precondition: "" }], rarity: 1 }, "202011": { alternatives: [{ baseDuration: 24e3, condition: "distance_type==4&phase_laterhalf_random==1&order_rate<=50", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 2 }, "202012": { alternatives: [{ baseDuration: 24e3, condition: "distance_type==4&phase_laterhalf_random==1&order_rate<=50", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "202021": { alternatives: [{ baseDuration: 4e4, condition: "running_style==4&phase_random==1&order_rate>=50", effects: [{ modifier: 2500, type: 27 }], precondition: "" }], rarity: 2 }, "202022": { alternatives: [{ baseDuration: 4e4, condition: "running_style==4&phase_random==1&order_rate>=50", effects: [{ modifier: 500, type: 27 }], precondition: "" }], rarity: 1 }, "202031": { alternatives: [{ baseDuration: 18e3, condition: "distance_rate_after_random==50", effects: [{ modifier: 4500, type: 27 }, { modifier: -1e4, type: 9 }], precondition: "" }], rarity: 2 }, "202032": { alternatives: [{ baseDuration: 18e3, condition: "distance_rate_after_random==50", effects: [{ modifier: 2500, type: 27 }, { modifier: -1e4, type: 9 }], precondition: "" }], rarity: 1 }, "202041": { alternatives: [{ baseDuration: 24e3, condition: "distance_type==1&phase_laterhalf_random==1&order_rate<=50", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 2 }, "202042": { alternatives: [{ baseDuration: 24e3, condition: "distance_type==1&phase_laterhalf_random==1&order_rate<=50", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "202051": { alternatives: [{ baseDuration: -1, condition: "running_style==1", effects: [{ modifier: 0, type: 6 }], precondition: "" }], rarity: 2 }, "202061": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==4&is_finalcorner_random==1", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 2 }, "202071": { alternatives: [{ baseDuration: 12e3, condition: "distance_type==4&phase_firsthalf_random==1&order_rate>=40&order_rate<=80", effects: [{ modifier: 750, type: 9 }, { modifier: -1500, type: 21 }], precondition: "" }], rarity: 2 }, "202072": { alternatives: [{ baseDuration: 12e3, condition: "distance_type==4&phase_firsthalf_random==1&order_rate>=40&order_rate<=80", effects: [{ modifier: 350, type: 9 }, { modifier: -1500, type: 21 }], precondition: "" }], rarity: 1 }, "202081": { alternatives: [{ baseDuration: 18e3, condition: "distance_type==3&phase_firsthalf_random==2&order_rate>=40", effects: [{ modifier: 4e3, type: 31 }], precondition: "" }], rarity: 2 }, "202082": { alternatives: [{ baseDuration: 18e3, condition: "distance_type==3&phase_firsthalf_random==2&order_rate>=40", effects: [{ modifier: 2e3, type: 31 }], precondition: "" }], rarity: 1 }, "202091": { alternatives: [{ baseDuration: 24e3, condition: "distance_type==3&phase==1&order_rate<=80&order_rate>=30&blocked_side_continuetime>=2", effects: [{ modifier: 3500, type: 27 }, { modifier: 350, type: 9 }], precondition: "" }], rarity: 2 }, "202092": { alternatives: [{ baseDuration: 24e3, condition: "distance_type==3&phase==1&order_rate<=80&order_rate>=30&blocked_side_continuetime>=2", effects: [{ modifier: 1500, type: 27 }, { modifier: 50, type: 9 }], precondition: "" }], rarity: 1 }, "202101": { alternatives: [{ baseDuration: 24e3, condition: "distance_type==3&phase_random==1&order_rate>=50", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 2 }, "202102": { alternatives: [{ baseDuration: 24e3, condition: "distance_type==3&phase_random==1&order_rate>=50", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "202111": { alternatives: [{ baseDuration: 18e3, condition: "distance_type==2&is_finalcorner_random==1&order_rate>=50", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 2 }, "202112": { alternatives: [{ baseDuration: 18e3, condition: "distance_type==2&is_finalcorner_random==1&order_rate>=50", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "202121": { alternatives: [{ baseDuration: 24e3, condition: "running_style==3&distance_rate_after_random==50&order_rate>=30&order_rate<=80", effects: [{ modifier: 3500, type: 27 }, { modifier: 1e3, type: 31 }], precondition: "" }], rarity: 2 }, "202122": { alternatives: [{ baseDuration: 24e3, condition: "running_style==3&distance_rate_after_random==50&order_rate>=30&order_rate<=80", effects: [{ modifier: 1500, type: 27 }, { modifier: 500, type: 31 }], precondition: "" }], rarity: 1 }, "202131": { alternatives: [{ baseDuration: 18e3, condition: "distance_type==3&phase_random==1&order<=3", effects: [{ modifier: 3500, type: 27 }, { modifier: -1500, type: 21 }], precondition: "" }], rarity: 2 }, "202132": { alternatives: [{ baseDuration: 18e3, condition: "distance_type==3&phase_random==1&order<=3", effects: [{ modifier: 1500, type: 27 }, { modifier: -350, type: 21 }], precondition: "" }], rarity: 1 }, "202141": { alternatives: [{ baseDuration: -1, condition: "always==1", effects: [{ modifier: 850, type: 14 }, { modifier: -4e5, type: 5 }], precondition: "" }], rarity: 1 }, "202151": { alternatives: [{ baseDuration: 24e3, condition: "running_style==3&phase_random==1", effects: [{ modifier: 4500, type: 27 }, { modifier: -200, type: 9 }], precondition: "" }], rarity: 2 }, "202152": { alternatives: [{ baseDuration: 24e3, condition: "running_style==3&phase_random==1", effects: [{ modifier: 2500, type: 27 }, { modifier: -200, type: 9 }], precondition: "" }], rarity: 1 }, "202161": { alternatives: [{ baseDuration: -1, condition: "always==1", effects: [{ modifier: 6e5, type: 5 }, { modifier: -3e4, type: 29 }], precondition: "" }], rarity: 1 }, "202171": { alternatives: [{ baseDuration: 24e3, condition: "down_slope_random==1", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 2 }, "202172": { alternatives: [{ baseDuration: 24e3, condition: "down_slope_random==1", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "202181": { alternatives: [{ baseDuration: -1, condition: "always==1", effects: [{ modifier: -4e5, type: 4 }, { modifier: -4e5, type: 5 }], precondition: "" }], rarity: 1 }, "202191": { alternatives: [{ baseDuration: 0, condition: "is_badstart==0&running_style==2&distance_type==4&phase_firsthalf_random==1", effects: [{ modifier: 750, type: 9 }], precondition: "" }], rarity: 2 }, "202192": { alternatives: [{ baseDuration: 0, condition: "is_badstart==0&running_style==2&distance_type==4&phase_firsthalf_random==1", effects: [{ modifier: 350, type: 9 }], precondition: "" }], rarity: 1 }, "202201": { alternatives: [{ baseDuration: -1, condition: "track_id==10103", effects: [{ modifier: 6e5, type: 2 }], precondition: "" }], rarity: 1 }, "202202": { alternatives: [{ baseDuration: -1, condition: "track_id==10103", effects: [{ modifier: 4e5, type: 2 }], precondition: "" }], rarity: 1 }, "202203": { alternatives: [{ baseDuration: -1, condition: "track_id==10103", effects: [{ modifier: -4e5, type: 2 }], precondition: "" }], rarity: 1 }, "202211": { alternatives: [{ baseDuration: -1, condition: "track_id==10104", effects: [{ modifier: 6e5, type: 2 }], precondition: "" }], rarity: 1 }, "202212": { alternatives: [{ baseDuration: -1, condition: "track_id==10104", effects: [{ modifier: 4e5, type: 2 }], precondition: "" }], rarity: 1 }, "202213": { alternatives: [{ baseDuration: -1, condition: "track_id==10104", effects: [{ modifier: -4e5, type: 2 }], precondition: "" }], rarity: 1 }, "202221": { alternatives: [{ baseDuration: -1, condition: "track_id==10105", effects: [{ modifier: 6e5, type: 2 }], precondition: "" }], rarity: 1 }, "202222": { alternatives: [{ baseDuration: -1, condition: "track_id==10105", effects: [{ modifier: 4e5, type: 2 }], precondition: "" }], rarity: 1 }, "202223": { alternatives: [{ baseDuration: -1, condition: "track_id==10105", effects: [{ modifier: -4e5, type: 2 }], precondition: "" }], rarity: 1 }, "202231": { alternatives: [{ baseDuration: -1, condition: "time==4", effects: [{ modifier: 6e5, type: 5 }], precondition: "" }], rarity: 1 }, "202232": { alternatives: [{ baseDuration: -1, condition: "time==4", effects: [{ modifier: 4e5, type: 5 }], precondition: "" }], rarity: 1 }, "202233": { alternatives: [{ baseDuration: -1, condition: "time==4", effects: [{ modifier: -4e5, type: 5 }], precondition: "" }], rarity: 1 }, "202241": { alternatives: [{ baseDuration: -1, condition: "track_id==10001@track_id==10002@track_id==10004@track_id==10010@track_id==10103@track_id==10104", effects: [{ modifier: 6e5, type: 5 }], precondition: "" }], rarity: 1 }, "202242": { alternatives: [{ baseDuration: -1, condition: "track_id==10001@track_id==10002@track_id==10004@track_id==10010@track_id==10103@track_id==10104", effects: [{ modifier: 4e5, type: 5 }], precondition: "" }], rarity: 1 }, "202243": { alternatives: [{ baseDuration: -1, condition: "track_id==10001@track_id==10002@track_id==10004@track_id==10010@track_id==10103@track_id==10104", effects: [{ modifier: -4e5, type: 5 }], precondition: "" }], rarity: 1 }, "202251": { alternatives: [{ baseDuration: -1, condition: "is_dirtgrade==1", effects: [{ modifier: 6e5, type: 1 }], precondition: "" }], rarity: 1 }, "202252": { alternatives: [{ baseDuration: -1, condition: "is_dirtgrade==1", effects: [{ modifier: 4e5, type: 1 }], precondition: "" }], rarity: 1 }, "202253": { alternatives: [{ baseDuration: -1, condition: "is_dirtgrade==1", effects: [{ modifier: -4e5, type: 1 }], precondition: "" }], rarity: 1 }, "202261": { alternatives: [{ baseDuration: 24e3, condition: "ground_type==2&phase_laterhalf_random==1&order_rate<=50", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 2 }, "202262": { alternatives: [{ baseDuration: 24e3, condition: "ground_type==2&phase_laterhalf_random==1&order_rate<=50", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "202271": { alternatives: [{ baseDuration: 24e3, condition: "ground_type==2&phase_random==1&order_rate>=50", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 2 }, "202272": { alternatives: [{ baseDuration: 24e3, condition: "ground_type==2&phase_random==1&order_rate>=50", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "202281": { alternatives: [{ baseDuration: 3e4, condition: "ground_type==2&phase_random==3&order_rate<=50&is_lastspurt==1", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 2 }, "202282": { alternatives: [{ baseDuration: 3e4, condition: "ground_type==2&phase_random==3&order_rate<=50&is_lastspurt==1", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "202291": { alternatives: [{ baseDuration: 18e3, condition: "ground_type==2&order_rate>=50&activate_count_heal>=1&distance_rate<=42&phase==1", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 2 }, "202292": { alternatives: [{ baseDuration: 18e3, condition: "ground_type==2&order_rate>=50&activate_count_heal>=1&distance_rate<=42&phase==1", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "202301": { alternatives: [{ baseDuration: 3e4, condition: "ground_type==2&accumulatetime>=5&infront_near_lane_time>=3", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 2 }, "202302": { alternatives: [{ baseDuration: 3e4, condition: "ground_type==2&accumulatetime>=5&infront_near_lane_time>=3", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "202303": { alternatives: [{ baseDuration: 3e4, condition: "ground_type==2&accumulatetime>=5&infront_near_lane_time>=3", effects: [{ modifier: -2e3, type: 21 }], precondition: "" }], rarity: 1 }, "202311": { alternatives: [{ baseDuration: 3e4, condition: "ground_type==2&phase_random==2&order_rate<=50", effects: [{ modifier: 4e3, type: 31 }], precondition: "" }], rarity: 2 }, "202312": { alternatives: [{ baseDuration: 3e4, condition: "ground_type==2&phase_random==2&order_rate<=50", effects: [{ modifier: 2e3, type: 31 }], precondition: "" }], rarity: 1 }, "202321": { alternatives: [{ baseDuration: 3e4, condition: "ground_type==2&phase_random==2&order_rate>=50", effects: [{ modifier: 4e3, type: 31 }], precondition: "" }], rarity: 2 }, "202322": { alternatives: [{ baseDuration: 3e4, condition: "ground_type==2&phase_random==2&order_rate>=50", effects: [{ modifier: 2e3, type: 31 }], precondition: "" }], rarity: 1 }, "202331": { alternatives: [{ baseDuration: -1, condition: "ground_type==2&base_power>=1200", effects: [{ modifier: 8e5, type: 1 }], precondition: "" }, { baseDuration: -1, condition: "ground_type==2&base_power>=1000&base_power<1200", effects: [{ modifier: 6e5, type: 1 }], precondition: "" }], rarity: 2 }, "202332": { alternatives: [{ baseDuration: -1, condition: "ground_type==2&base_power>=1200", effects: [{ modifier: 4e5, type: 1 }], precondition: "" }, { baseDuration: -1, condition: "ground_type==2&base_power>=1000&base_power<1200", effects: [{ modifier: 2e5, type: 1 }], precondition: "" }], rarity: 1 }, "202341": { alternatives: [{ baseDuration: -1, condition: "ground_type==2&ground_condition==3@ground_type==2&ground_condition==4", effects: [{ modifier: 6e5, type: 1 }, { modifier: 6e5, type: 3 }], precondition: "" }], rarity: 2 }, "202342": { alternatives: [{ baseDuration: -1, condition: "ground_type==2&ground_condition==3@ground_type==2&ground_condition==4", effects: [{ modifier: 6e5, type: 1 }], precondition: "" }], rarity: 1 }, "202343": { alternatives: [{ baseDuration: -1, condition: "ground_type==2&ground_condition==3@ground_type==2&ground_condition==4", effects: [{ modifier: 4e5, type: 1 }], precondition: "" }], rarity: 1 }, "202344": { alternatives: [{ baseDuration: -1, condition: "ground_type==2&ground_condition==3@ground_type==2&ground_condition==4", effects: [{ modifier: -4e5, type: 1 }], precondition: "" }], rarity: 1 }, "202351": { alternatives: [{ baseDuration: 3e4, condition: "ground_type==2&accumulatetime>=10&phase==0&order<=1&bashin_diff_behind<=1", effects: [{ modifier: -2500, type: 21 }], precondition: "" }], rarity: 2 }, "202352": { alternatives: [{ baseDuration: 3e4, condition: "ground_type==2&accumulatetime>=10&phase==0&order<=1&bashin_diff_behind<=1", effects: [{ modifier: -1500, type: 21 }], precondition: "" }], rarity: 1 }, "202361": { alternatives: [{ baseDuration: 3e4, condition: "ground_type==2&distance_rate>=50&is_other_character_activate_advantage_skill==9", effects: [{ modifier: -2500, type: 21 }], precondition: "" }], rarity: 2 }, "202362": { alternatives: [{ baseDuration: 3e4, condition: "ground_type==2&distance_rate>=50&is_other_character_activate_advantage_skill==9", effects: [{ modifier: -1500, type: 21 }], precondition: "" }], rarity: 1 }, "202371": { alternatives: [{ baseDuration: 24e3, condition: "phase_random==1&running_style==2", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 2 }, "202372": { alternatives: [{ baseDuration: 24e3, condition: "phase_random==1&running_style==2", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "202381": { alternatives: [{ baseDuration: 24e3, condition: "phase_random==1&running_style==4&order_rate>=50", effects: [{ modifier: 3500, type: 27 }, { modifier: 350, type: 28 }], precondition: "" }], rarity: 2 }, "202382": { alternatives: [{ baseDuration: 24e3, condition: "phase_random==1&running_style==4&order_rate>=50", effects: [{ modifier: 1500, type: 27 }, { modifier: 150, type: 28 }], precondition: "" }], rarity: 1 }, "202391": { alternatives: [{ baseDuration: 27e3, condition: "phase_firsthalf_random==1&running_style==1", effects: [{ modifier: 4500, type: 27 }, { modifier: -400, type: 9 }], precondition: "" }], rarity: 2 }, "202392": { alternatives: [{ baseDuration: 27e3, condition: "phase_firsthalf_random==1&running_style==1", effects: [{ modifier: 2500, type: 27 }, { modifier: -400, type: 9 }], precondition: "" }], rarity: 1 }, "202401": { alternatives: [{ baseDuration: 2e4, condition: "distance_type==1&phase>=2&order_rate>=50&is_overtake==1@distance_type==2&phase>=2&order_rate>=50&is_overtake==1", effects: [{ modifier: 4e3, type: 31 }], precondition: "" }], rarity: 2 }, "202402": { alternatives: [{ baseDuration: 2e4, condition: "distance_type==1&phase>=2&order_rate>=50&is_overtake==1@distance_type==2&phase>=2&order_rate>=50&is_overtake==1", effects: [{ modifier: 2e3, type: 31 }], precondition: "" }], rarity: 1 }, "202411": { alternatives: [{ baseDuration: 4e4, condition: "running_style==2&order>=2&distance_diff_top<=5&distance_rate>=60&phase==1", effects: [{ modifier: 2500, type: 27 }], precondition: "" }], rarity: 2 }, "202412": { alternatives: [{ baseDuration: 4e4, condition: "running_style==2&order>=2&distance_diff_top<=5&distance_rate>=60&phase==1", effects: [{ modifier: 500, type: 27 }], precondition: "" }], rarity: 1 }, "202421": { alternatives: [{ baseDuration: 15e3, condition: "distance_type==4&running_style==3&is_lastspurt==1&order_rate>=40", effects: [{ modifier: 4e3, type: 31 }, { modifier: -200, type: 9 }], precondition: "" }], rarity: 2 }, "202422": { alternatives: [{ baseDuration: 15e3, condition: "distance_type==4&running_style==3&is_lastspurt==1&order_rate>=40", effects: [{ modifier: 2e3, type: 31 }, { modifier: -200, type: 9 }], precondition: "" }], rarity: 1 }, "202431": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==3&running_style==2&phase_laterhalf_random==1&distance_diff_top<=10", effects: [{ modifier: 2500, type: 27 }, { modifier: 3e3, type: 31 }], precondition: "" }], rarity: 2 }, "202432": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==3&running_style==2&phase_laterhalf_random==1&distance_diff_top<=10", effects: [{ modifier: 500, type: 27 }, { modifier: 1e3, type: 31 }], precondition: "" }], rarity: 1 }, "202441": { alternatives: [{ baseDuration: -1, condition: "popularity<=3&random_lot==30", effects: [{ modifier: 8e5, type: 1 }, { modifier: 8e5, type: 3 }, { modifier: 8e5, type: 4 }], precondition: "" }, { baseDuration: -1, condition: "popularity>=4&random_lot==60", effects: [{ modifier: 8e5, type: 1 }, { modifier: 8e5, type: 3 }, { modifier: 8e5, type: 4 }], precondition: "" }], rarity: 2 }, "202442": { alternatives: [{ baseDuration: -1, condition: "popularity<=3&random_lot==15", effects: [{ modifier: 4e5, type: 1 }, { modifier: 4e5, type: 3 }, { modifier: 4e5, type: 4 }], precondition: "" }, { baseDuration: -1, condition: "popularity>=4&random_lot==30", effects: [{ modifier: 4e5, type: 1 }, { modifier: 4e5, type: 3 }, { modifier: 4e5, type: 4 }], precondition: "" }], rarity: 1 }, "202451": { alternatives: [{ baseDuration: 24e3, condition: "running_style==3&is_last_straight==1&order>=2&distance_diff_top<=10", effects: [{ modifier: 4500, type: 27 }], precondition: "" }], rarity: 2 }, "202452": { alternatives: [{ baseDuration: 24e3, condition: "running_style==3&is_last_straight==1&order>=2&distance_diff_top<=10", effects: [{ modifier: 2500, type: 27 }], precondition: "" }], rarity: 1 }, "202461": { alternatives: [{ baseDuration: 24e3, condition: "running_style==1&is_last_straight==1&order==1&bashin_diff_behind<=1", effects: [{ modifier: 4500, type: 27 }], precondition: "" }], rarity: 2 }, "202462": { alternatives: [{ baseDuration: 24e3, condition: "running_style==1&is_last_straight==1&order==1&bashin_diff_behind<=1", effects: [{ modifier: 2500, type: 27 }], precondition: "" }], rarity: 1 }, "202471": { alternatives: [{ baseDuration: 24e3, condition: "running_style==2&distance_rate>=50&is_overtake==1@running_style==3&distance_rate>=50&is_overtake==1", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 2 }, "202472": { alternatives: [{ baseDuration: 24e3, condition: "running_style==2&distance_rate>=50&is_overtake==1@running_style==3&distance_rate>=50&is_overtake==1", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "202481": { alternatives: [{ baseDuration: 12e3, condition: "distance_type==4&running_style==2&phase==2", effects: [{ modifier: 4e3, type: 31 }], precondition: "distance_diff_top<=10&distance_rate>=60&phase==1" }], rarity: 2 }, "202482": { alternatives: [{ baseDuration: 12e3, condition: "distance_type==4&running_style==2&phase==2", effects: [{ modifier: 2e3, type: 31 }], precondition: "distance_diff_top<=10&distance_rate>=60&phase==1" }], rarity: 1 }, "202491": { alternatives: [{ baseDuration: 12e3, condition: "running_style==4&phase_firsthalf_random==2", effects: [{ modifier: 4e3, type: 31 }], precondition: "distance_rate>=66&order_rate_out50_continue==1&temptation_count==0" }], rarity: 2 }, "202492": { alternatives: [{ baseDuration: 12e3, condition: "running_style==4&phase_firsthalf_random==2", effects: [{ modifier: 2e3, type: 31 }], precondition: "distance_rate>=66&order_rate_out50_continue==1&temptation_count==0" }], rarity: 1 }, "202501": { alternatives: [{ baseDuration: 24e3, condition: "distance_type==2&phase_laterhalf_random==1&order_rate<=50", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 2 }, "202502": { alternatives: [{ baseDuration: 24e3, condition: "distance_type==2&phase_laterhalf_random==1&order_rate<=50", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "202511": { alternatives: [{ baseDuration: -1, condition: "always==1", effects: [{ modifier: 1e5, type: 29 }], precondition: "" }], rarity: 1 }, "202521": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==3&corner_random==3&order_rate>=50@distance_type==4&corner_random==3&order_rate>=50", effects: [{ modifier: 3500, type: 22 }], precondition: "" }], rarity: 2 }, "202522": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==3&corner_random==3&order_rate>=50@distance_type==4&corner_random==3&order_rate>=50", effects: [{ modifier: 1500, type: 22 }], precondition: "" }], rarity: 1 }, "202531": { alternatives: [{ baseDuration: 24e3, condition: "distance_type==2&phase_random==1@distance_type==3&phase_random==1", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 2 }, "202532": { alternatives: [{ baseDuration: 24e3, condition: "distance_type==2&phase_random==1@distance_type==3&phase_random==1", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "202541": { alternatives: [{ baseDuration: 18e3, condition: "running_style==3&order_rate>=40&is_finalcorner_random==1", effects: [{ modifier: 3500, type: 27 }, { modifier: -1500, type: 21 }, { modifier: -1500, type: 21 }], precondition: "" }], rarity: 2 }, "202542": { alternatives: [{ baseDuration: 18e3, condition: "running_style==3&order_rate>=40&is_finalcorner_random==1", effects: [{ modifier: 1500, type: 27 }, { modifier: -350, type: 21 }, { modifier: -350, type: 21 }], precondition: "" }], rarity: 1 }, "202551": { alternatives: [{ baseDuration: 3e4, condition: "distance_rate_after_random==50", effects: [{ modifier: 3500, type: 22 }, { modifier: 150, type: 9 }], precondition: "" }], rarity: 2 }, "202552": { alternatives: [{ baseDuration: 3e4, condition: "distance_rate_after_random==50", effects: [{ modifier: 1500, type: 22 }, { modifier: 35, type: 9 }], precondition: "" }], rarity: 1 }, "202561": { alternatives: [{ baseDuration: 24e3, condition: "distance_type==4&phase_laterhalf_random==1&order_rate>=50", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 2 }, "202562": { alternatives: [{ baseDuration: 24e3, condition: "distance_type==4&phase_laterhalf_random==1&order_rate>=50", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "202571": { alternatives: [{ baseDuration: 18e3, condition: "distance_type==1&phase_random==2", effects: [{ modifier: 4e3, type: 31 }], precondition: "" }], rarity: 2 }, "202581": { alternatives: [{ baseDuration: 24e3, condition: "distance_type==4&phase_random==1", effects: [{ modifier: 550, type: 9 }, { modifier: 2500, type: 27 }], precondition: "" }], rarity: 2 }, "202582": { alternatives: [{ baseDuration: 24e3, condition: "distance_type==4&phase_random==1", effects: [{ modifier: 150, type: 9 }, { modifier: 500, type: 27 }], precondition: "" }], rarity: 1 }, "202591": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==4&running_style==3&phase_firsthalf_random==2&lastspurt==2", effects: [{ modifier: 3500, type: 22 }], precondition: "" }], rarity: 2 }, "202592": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==4&running_style==3&phase_firsthalf_random==2&lastspurt==2", effects: [{ modifier: 1500, type: 22 }], precondition: "" }], rarity: 1 }, "202601": { alternatives: [{ baseDuration: 24e3, condition: "distance_type==3&activate_count_all>=13", effects: [{ modifier: 3500, type: 22 }], precondition: "" }], rarity: 2 }, "202602": { alternatives: [{ baseDuration: 24e3, condition: "distance_type==3&activate_count_all>=13", effects: [{ modifier: 1500, type: 22 }], precondition: "" }], rarity: 1 }, "202612": { alternatives: [{ baseDuration: 24e3, condition: "running_style==3&phase_laterhalf_random==0&order_rate>=40", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "202621": { alternatives: [{ baseDuration: 24e3, condition: "running_style==3&phase_laterhalf_random==1&order_rate>=40", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 2 }, "202622": { alternatives: [{ baseDuration: 24e3, condition: "running_style==3&phase_laterhalf_random==1&order_rate>=40", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "202641": { alternatives: [{ baseDuration: 4e4, condition: "running_style==3&phase_random==1&order_rate>=40&order_rate<=90", effects: [{ modifier: 2500, type: 27 }], precondition: "" }], rarity: 2 }, "202642": { alternatives: [{ baseDuration: 4e4, condition: "running_style==3&phase_random==1&order_rate>=40&order_rate<=90", effects: [{ modifier: 500, type: 27 }], precondition: "" }], rarity: 1 }, "202651": { alternatives: [{ baseDuration: -1, condition: "base_speed>=1000&base_power>=1000&distance_type==2@base_speed>=1000&base_power>=1000&distance_type==3", effects: [{ modifier: 6e5, type: 1 }, { modifier: 6e5, type: 3 }], precondition: "" }], rarity: 2 }, "202652": { alternatives: [{ baseDuration: -1, condition: "base_speed>=1000&base_power>=1000&distance_type==2@base_speed>=1000&base_power>=1000&distance_type==3", effects: [{ modifier: 2e5, type: 1 }, { modifier: 2e5, type: 3 }], precondition: "" }], rarity: 1 }, "202661": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==3&phase_firsthalf_random==2&order_rate>=30&order_rate<=80@distance_type==4&phase_firsthalf_random==2&order_rate>=30&order_rate<=80", effects: [{ modifier: 3500, type: 22 }], precondition: "" }], rarity: 2 }, "202662": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==3&phase_firsthalf_random==2&order_rate>=30&order_rate<=80@distance_type==4&phase_firsthalf_random==2&order_rate>=30&order_rate<=80", effects: [{ modifier: 1500, type: 22 }], precondition: "" }], rarity: 1 }, "202671": { alternatives: [{ baseDuration: 18e3, condition: "distance_type==2&phase_firsthalf_random==2&order_rate<=50", effects: [{ modifier: 4e3, type: 31 }], precondition: "" }], rarity: 2 }, "202672": { alternatives: [{ baseDuration: 18e3, condition: "distance_type==2&phase_firsthalf_random==2&order_rate<=50", effects: [{ modifier: 2e3, type: 31 }], precondition: "" }], rarity: 1 }, "202681": { alternatives: [{ baseDuration: 24e3, condition: "distance_type==4&phase_random==1", effects: [{ modifier: 3500, type: 27 }, { modifier: 350, type: 9 }], precondition: "" }], rarity: 2 }, "202682": { alternatives: [{ baseDuration: 24e3, condition: "distance_type==4&phase_random==1", effects: [{ modifier: 1500, type: 27 }, { modifier: 50, type: 9 }], precondition: "" }], rarity: 1 }, "202691": { alternatives: [{ baseDuration: 15e3, condition: "distance_type==3&phase==0", effects: [{ modifier: 4e3, type: 31 }], precondition: "" }], rarity: 2 }, "202692": { alternatives: [{ baseDuration: 15e3, condition: "distance_type==3&phase==0", effects: [{ modifier: 2e3, type: 31 }], precondition: "" }], rarity: 1 }, "202701": { alternatives: [{ baseDuration: -1, condition: "running_style==2&distance_type==3&base_speed>=1200&base_wiz>=1200", effects: [{ modifier: 8e5, type: 1 }], precondition: "" }, { baseDuration: -1, condition: "running_style==2&distance_type==3&base_speed>=1200&base_wiz<1200", effects: [{ modifier: 6e5, type: 1 }], precondition: "" }], rarity: 2 }, "202702": { alternatives: [{ baseDuration: -1, condition: "running_style==2&distance_type==3&base_speed>=1200&base_wiz>=1200", effects: [{ modifier: 4e5, type: 1 }], precondition: "" }, { baseDuration: -1, condition: "running_style==2&distance_type==3&base_speed>=1200&base_wiz<1200", effects: [{ modifier: 2e5, type: 1 }], precondition: "" }], rarity: 1 }, "202711": { alternatives: [{ baseDuration: 9e3, condition: "running_style==2&phase>=2&is_finalcorner==1&corner!=0&remain_distance>=600&order_rate<=70@running_style==3&phase>=2&is_finalcorner==1&corner!=0&remain_distance>=600&order_rate<=70", effects: [{ modifier: 4e3, type: 31 }], precondition: "" }], rarity: 2 }, "202712": { alternatives: [{ baseDuration: 9e3, condition: "running_style==2&phase>=2&is_finalcorner==1&corner!=0&remain_distance>=600&order_rate<=70@running_style==3&phase>=2&is_finalcorner==1&corner!=0&remain_distance>=600&order_rate<=70", effects: [{ modifier: 2e3, type: 31 }], precondition: "" }], rarity: 1 }, "202721": { alternatives: [{ baseDuration: 4e4, condition: "phase_corner_random==1", effects: [{ modifier: 2500, type: 27 }], precondition: "" }], rarity: 2 }, "202722": { alternatives: [{ baseDuration: 4e4, condition: "phase_corner_random==1", effects: [{ modifier: 500, type: 27 }], precondition: "" }], rarity: 1 }, "202731": { alternatives: [{ baseDuration: -1, condition: "track_id==10201", effects: [{ modifier: 6e5, type: 2 }], precondition: "" }], rarity: 1 }, "202732": { alternatives: [{ baseDuration: -1, condition: "track_id==10201", effects: [{ modifier: 4e5, type: 2 }], precondition: "" }], rarity: 1 }, "202733": { alternatives: [{ baseDuration: -1, condition: "track_id==10201", effects: [{ modifier: -4e5, type: 2 }], precondition: "" }], rarity: 1 }, "202734": { alternatives: [{ baseDuration: -1, condition: "track_id==10201", effects: [{ modifier: 6e5, type: 2 }, { modifier: 6e5, type: 5 }, { modifier: 6e5, type: 1 }], precondition: "" }], rarity: 2 }, "202741": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==2&corner_random==3&order_rate<=50@distance_type==3&corner_random==3&order_rate<=50", effects: [{ modifier: 3500, type: 22 }], precondition: "" }], rarity: 2 }, "202742": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==2&corner_random==3&order_rate<=50@distance_type==3&corner_random==3&order_rate<=50", effects: [{ modifier: 1500, type: 22 }], precondition: "" }], rarity: 1 }, "202751": { alternatives: [{ baseDuration: 24e3, condition: "distance_type==1&phase_laterhalf_random==1&order_rate>=40", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 2 }, "202752": { alternatives: [{ baseDuration: 24e3, condition: "distance_type==1&phase_laterhalf_random==1&order_rate>=40", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "202761": { alternatives: [{ baseDuration: 4e4, condition: "running_style==2&phase_random==1&order_rate<=50", effects: [{ modifier: 2500, type: 27 }], precondition: "" }], rarity: 2 }, "202762": { alternatives: [{ baseDuration: 4e4, condition: "running_style==2&phase_random==1&order_rate<=50", effects: [{ modifier: 500, type: 27 }], precondition: "" }], rarity: 1 }, "202771": { alternatives: [{ baseDuration: 12e3, condition: "running_style==2&distance_type==4&phase_firstquarter_random==2&order_rate<=50", effects: [{ modifier: 4e3, type: 31 }], precondition: "" }], rarity: 2 }, "202772": { alternatives: [{ baseDuration: 12e3, condition: "running_style==2&distance_type==4&phase_firstquarter_random==2&order_rate<=50", effects: [{ modifier: 2e3, type: 31 }], precondition: "" }], rarity: 1 }, "202791": { alternatives: [{ baseDuration: 18e3, condition: "phase_random==1", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 2 }, "202792": { alternatives: [{ baseDuration: 18e3, condition: "phase_random==1", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "202801": { alternatives: [{ baseDuration: 18e3, condition: "phase_laterhalf_random==0", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 2 }, "202802": { alternatives: [{ baseDuration: 18e3, condition: "phase_laterhalf_random==0", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "202811": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==4&running_style==1&phase_firsthalf_random==2&lastspurt==2", effects: [{ modifier: 3500, type: 22 }], precondition: "" }], rarity: 2 }, "202812": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==4&running_style==1&phase_firsthalf_random==2&lastspurt==2", effects: [{ modifier: 1500, type: 22 }], precondition: "" }], rarity: 1 }, "202821": { alternatives: [{ baseDuration: 9e3, condition: "distance_type==4&running_style==1&is_lastspurt==1&corner==0&order<=3", effects: [{ modifier: 4e3, type: 31 }], precondition: "" }], rarity: 2 }, "202822": { alternatives: [{ baseDuration: 9e3, condition: "distance_type==4&running_style==1&is_lastspurt==1&corner==0&order<=3", effects: [{ modifier: 2e3, type: 31 }], precondition: "" }], rarity: 1 }, "202831": { alternatives: [{ baseDuration: 24e3, condition: "ground_type==2&phase==1&is_activate_any_skill==1", effects: [{ modifier: 2500, type: 27 }], precondition: "" }, { baseDuration: 24e3, condition: "is_activate_other_skill_detail==1&phase>=2&is_activate_any_skill==1", effects: [{ modifier: 2500, type: 22 }], precondition: "" }], rarity: 2 }, "202832": { alternatives: [{ baseDuration: 24e3, condition: "ground_type==2&phase==1&is_activate_any_skill==1", effects: [{ modifier: 500, type: 27 }], precondition: "" }, { baseDuration: 24e3, condition: "is_activate_other_skill_detail==1&phase>=2&is_activate_any_skill==1", effects: [{ modifier: 500, type: 22 }], precondition: "" }], rarity: 1 }, "202841": { alternatives: [{ baseDuration: 18e3, condition: "ground_type==2&phase_random==1&order_rate<=50", effects: [{ modifier: 550, type: 9 }, { modifier: 3500, type: 27 }], precondition: "" }], rarity: 2 }, "202842": { alternatives: [{ baseDuration: 0, condition: "ground_type==2&phase_random==1&order_rate<=50", effects: [{ modifier: 150, type: 9 }], precondition: "" }], rarity: 1 }, "202851": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==4&running_style==4&phase_firsthalf_random==2&lastspurt==2", effects: [{ modifier: 3500, type: 22 }], precondition: "" }], rarity: 2 }, "202852": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==4&running_style==4&phase_firsthalf_random==2&lastspurt==2", effects: [{ modifier: 1500, type: 22 }], precondition: "" }], rarity: 1 }, "202861": { alternatives: [{ baseDuration: 15e3, condition: "distance_type==1&phase==0", effects: [{ modifier: 4e3, type: 31 }], precondition: "" }], rarity: 2 }, "202862": { alternatives: [{ baseDuration: 15e3, condition: "distance_type==1&phase==0", effects: [{ modifier: 2e3, type: 31 }], precondition: "" }], rarity: 1 }, "202871": { alternatives: [{ baseDuration: 9e3, condition: "distance_type==3&running_style==4&phase>=2&is_finalcorner==1&corner!=0&order_rate>=40", effects: [{ modifier: 4e3, type: 31 }], precondition: "" }], rarity: 2 }, "202872": { alternatives: [{ baseDuration: 9e3, condition: "distance_type==3&running_style==4&phase>=2&is_finalcorner==1&corner!=0&order_rate>=40", effects: [{ modifier: 2e3, type: 31 }], precondition: "" }], rarity: 1 }, "202881": { alternatives: [{ baseDuration: 24e3, condition: "running_style==4&is_last_straight==1&order>=2&distance_diff_top<=10", effects: [{ modifier: 4500, type: 27 }], precondition: "" }], rarity: 2 }, "202882": { alternatives: [{ baseDuration: 24e3, condition: "running_style==4&is_last_straight==1&order>=2&distance_diff_top<=10", effects: [{ modifier: 2500, type: 27 }], precondition: "" }], rarity: 1 }, "202892": { alternatives: [{ baseDuration: 0, condition: "running_style==4&phase_laterhalf_random==0&order_rate>=50", effects: [{ modifier: 150, type: 9 }], precondition: "" }], rarity: 1 }, "202901": { alternatives: [{ baseDuration: 24e3, condition: "running_style==4&phase_laterhalf_random==1&order_rate>=40", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 2 }, "202902": { alternatives: [{ baseDuration: 24e3, condition: "running_style==4&phase_laterhalf_random==1&order_rate>=40", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "202912": { alternatives: [{ baseDuration: 18e3, condition: "running_style==4&order_rate>=50&is_finalcorner_random==1", effects: [{ modifier: 1500, type: 27 }, { modifier: -350, type: 21 }, { modifier: -350, type: 21 }], precondition: "" }], rarity: 1 }, "202921": { alternatives: [{ baseDuration: 24e3, condition: "running_style==4&phase_random==1", effects: [{ modifier: 4500, type: 27 }, { modifier: -200, type: 9 }], precondition: "" }], rarity: 2 }, "202922": { alternatives: [{ baseDuration: 24e3, condition: "running_style==4&phase_random==1", effects: [{ modifier: 2500, type: 27 }, { modifier: -200, type: 9 }], precondition: "" }], rarity: 1 }, "202931": { alternatives: [{ baseDuration: 24e3, condition: "running_style==4&distance_rate>=50&is_overtake==1", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 2 }, "202932": { alternatives: [{ baseDuration: 24e3, condition: "running_style==4&distance_rate>=50&is_overtake==1", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "202942": { alternatives: [{ baseDuration: 18e3, condition: "distance_type==3&running_style==4&phase_random==1&order_rate>=50", effects: [{ modifier: 1500, type: 27 }, { modifier: -350, type: 21 }], precondition: "" }], rarity: 1 }, "202951": { alternatives: [{ baseDuration: 3e4, condition: "ground_type==2&phase_laterhalf_random==0&order_rate<=50", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 2 }, "202952": { alternatives: [{ baseDuration: 3e4, condition: "ground_type==2&phase_laterhalf_random==0&order_rate<=50", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "202961": { alternatives: [{ baseDuration: 24e3, condition: "distance_type==2&phase_laterhalf_random==1&order_rate>=40", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 2 }, "202962": { alternatives: [{ baseDuration: 24e3, condition: "distance_type==2&phase_laterhalf_random==1&order_rate>=40", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "202971": { alternatives: [{ baseDuration: 12e3, condition: "running_style==4&distance_type==4&phase_firstquarter_random==2&order_rate>=40", effects: [{ modifier: 4e3, type: 31 }], precondition: "" }], rarity: 2 }, "202972": { alternatives: [{ baseDuration: 12e3, condition: "running_style==4&distance_type==4&phase_firstquarter_random==2&order_rate>=40", effects: [{ modifier: 2e3, type: 31 }], precondition: "" }], rarity: 1 }, "202981": { alternatives: [{ baseDuration: 24e3, condition: "running_style==2&phase_laterhalf_random==1&order_rate<=50", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 2 }, "202982": { alternatives: [{ baseDuration: 24e3, condition: "running_style==2&phase_laterhalf_random==1&order_rate<=50", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "202991": { alternatives: [{ baseDuration: -1, condition: "corner_count==0", effects: [{ modifier: 6e5, type: 1 }], precondition: "" }], rarity: 1 }, "202992": { alternatives: [{ baseDuration: -1, condition: "corner_count==0", effects: [{ modifier: 4e5, type: 1 }], precondition: "" }], rarity: 1 }, "202993": { alternatives: [{ baseDuration: -1, condition: "corner_count==0", effects: [{ modifier: -4e5, type: 1 }], precondition: "" }], rarity: 1 }, "203001": { alternatives: [{ baseDuration: 4e4, condition: "running_style==4&phase>=2&corner!=0&is_overtake==1", effects: [{ modifier: 2500, type: 22 }], precondition: "" }], rarity: 2 }, "203002": { alternatives: [{ baseDuration: 4e4, condition: "running_style==4&phase>=2&corner!=0&is_overtake==1", effects: [{ modifier: 500, type: 22 }], precondition: "" }], rarity: 1 }, "203011": { alternatives: [{ baseDuration: 18e3, condition: "distance_type==1&phase_random==1", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 2 }, "203012": { alternatives: [{ baseDuration: 18e3, condition: "distance_type==1&phase_random==1", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "203021": { alternatives: [{ baseDuration: 18e3, condition: "distance_type==2&phase_random==1", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 2 }, "203022": { alternatives: [{ baseDuration: 18e3, condition: "distance_type==2&phase_random==1", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "203031": { alternatives: [{ baseDuration: 24e3, condition: "phase_random==1&order_rate<=50", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 2 }, "203032": { alternatives: [{ baseDuration: 24e3, condition: "phase_random==1&order_rate<=50", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "203041": { alternatives: [{ baseDuration: 24e3, condition: "distance_type==1&phase_firsthalf_random==2@distance_type==2&phase_firsthalf_random==2", effects: [{ modifier: 3500, type: 22 }], precondition: "" }], rarity: 2 }, "203042": { alternatives: [{ baseDuration: 24e3, condition: "distance_type==1&phase_firsthalf_random==2@distance_type==2&phase_firsthalf_random==2", effects: [{ modifier: 1500, type: 22 }], precondition: "" }], rarity: 1 }, "203051": { alternatives: [{ baseDuration: 24e3, condition: "distance_type==3&phase_laterhalf_random==1&order_rate<=50", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 2 }, "203052": { alternatives: [{ baseDuration: 24e3, condition: "distance_type==3&phase_laterhalf_random==1&order_rate<=50", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "203061": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==1&furlong==1&near_infront_count==0&corner==0", effects: [{ modifier: 1500, type: 27 }], precondition: "" }, { baseDuration: 3e4, condition: "distance_type==1&furlong==1&near_infront_count==0", effects: [{ modifier: 500, type: 27 }], precondition: "" }], rarity: 1 }, "203071": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==1&furlong==2&near_infront_count==0&corner==0", effects: [{ modifier: 1500, type: 27 }], precondition: "" }, { baseDuration: 3e4, condition: "distance_type==1&furlong==2&near_infront_count==0", effects: [{ modifier: 500, type: 27 }], precondition: "" }], rarity: 1 }, "203081": { alternatives: [{ baseDuration: 18e3, condition: "ground_type==2&running_style==2&phase_firsthalf_random==2&order_rate<=50", effects: [{ modifier: 4e3, type: 31 }], precondition: "" }], rarity: 2 }, "203082": { alternatives: [{ baseDuration: 18e3, condition: "ground_type==2&running_style==2&phase_firsthalf_random==2&order_rate<=50", effects: [{ modifier: 2e3, type: 31 }], precondition: "" }], rarity: 1 }, "203092": { alternatives: [{ baseDuration: 3e4, condition: "ground_type==2&straight_random==1", effects: [{ modifier: 2500, type: 27 }], precondition: "" }], rarity: 1 }, "203093": { alternatives: [{ baseDuration: 3e4, condition: "ground_type==2&straight_random==1", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "203101": { alternatives: [{ baseDuration: 3e4, condition: "ground_type==2&all_corner_random==1", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 2 }, "203102": { alternatives: [{ baseDuration: 3e4, condition: "ground_type==2&all_corner_random==1", effects: [{ modifier: 2500, type: 27 }], precondition: "" }], rarity: 1 }, "203103": { alternatives: [{ baseDuration: 3e4, condition: "ground_type==2&all_corner_random==1", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "203111": { alternatives: [{ baseDuration: 18e3, condition: "distance_type==3&phase_firsthalf_random==2&order_rate<=50", effects: [{ modifier: 4e3, type: 31 }], precondition: "" }], rarity: 2 }, "203112": { alternatives: [{ baseDuration: 18e3, condition: "distance_type==3&phase_firsthalf_random==2&order_rate<=50", effects: [{ modifier: 2e3, type: 31 }], precondition: "" }], rarity: 1 }, "203121": { alternatives: [{ baseDuration: 3e4, condition: "phase_random==1&running_style==2&distance_type==3&order_rate<=50", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 2 }, "203122": { alternatives: [{ baseDuration: 3e4, condition: "phase_random==1&running_style==2&distance_type==3&order_rate<=50", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "203131": { alternatives: [{ baseDuration: 24e3, condition: "running_style==2&is_last_straight==1&distance_diff_top_float<=25", effects: [{ modifier: 4500, type: 27 }], precondition: "" }], rarity: 2 }, "203132": { alternatives: [{ baseDuration: 24e3, condition: "running_style==2&is_last_straight==1&distance_diff_top_float<=25", effects: [{ modifier: 2500, type: 27 }], precondition: "" }], rarity: 1 }, "203141": { alternatives: [{ baseDuration: 4e4, condition: "distance_type==3&phase_random==1", effects: [{ modifier: 2500, type: 27 }, { modifier: 350, type: 9 }], precondition: "" }], rarity: 2 }, "203142": { alternatives: [{ baseDuration: 4e4, condition: "distance_type==3&phase_random==1", effects: [{ modifier: 500, type: 27 }, { modifier: 50, type: 9 }], precondition: "" }], rarity: 1 }, "203151": { alternatives: [{ baseDuration: 24e3, condition: "running_style==3&remain_distance<=200@running_style==4&remain_distance<=200", effects: [{ modifier: 3500, type: 22 }], precondition: "compete_fight_count>0" }], rarity: 2 }, "203152": { alternatives: [{ baseDuration: 24e3, condition: "running_style==3&remain_distance<=200@running_style==4&remain_distance<=200", effects: [{ modifier: 1500, type: 22 }], precondition: "compete_fight_count>0" }], rarity: 1 }, "203161": { alternatives: [{ baseDuration: 24e3, condition: "distance_type==2&order_rate<=50&phase_random==1", effects: [{ modifier: 4500, type: 27 }, { modifier: -200, type: 9 }], precondition: "" }], rarity: 2 }, "203162": { alternatives: [{ baseDuration: 24e3, condition: "distance_type==2&order_rate<=50&phase_random==1", effects: [{ modifier: 2500, type: 27 }, { modifier: -200, type: 9 }], precondition: "" }], rarity: 1 }, "203171": { alternatives: [{ baseDuration: 12e3, condition: "distance_type==3&phase_laterhalf_random==0", effects: [{ modifier: -1500, type: 21 }], precondition: "" }, { baseDuration: 24e3, condition: "is_activate_other_skill_detail==1&phase_firsthalf_random==2", effects: [{ modifier: 4500, type: 22 }], precondition: "" }], rarity: 2 }, "203172": { alternatives: [{ baseDuration: 12e3, condition: "distance_type==3&phase_laterhalf_random==0", effects: [{ modifier: -1500, type: 21 }], precondition: "" }, { baseDuration: 24e3, condition: "is_activate_other_skill_detail==1&phase_firsthalf_random==2", effects: [{ modifier: 2500, type: 22 }], precondition: "" }], rarity: 1 }, "203181": { alternatives: [{ baseDuration: 24e3, condition: "ground_type==2&phase_random==1", effects: [{ modifier: 3500, type: 27 }, { modifier: 350, type: 9 }], precondition: "" }], rarity: 2 }, "203182": { alternatives: [{ baseDuration: 24e3, condition: "ground_type==2&phase_random==1", effects: [{ modifier: 1500, type: 27 }, { modifier: 50, type: 9 }], precondition: "" }], rarity: 1 }, "203201": { alternatives: [{ baseDuration: 4e4, condition: "running_style==1&phase_random==1&order_rate<=50", effects: [{ modifier: 2500, type: 27 }], precondition: "" }], rarity: 2 }, "203202": { alternatives: [{ baseDuration: 4e4, condition: "running_style==1&phase_random==1&order_rate<=50", effects: [{ modifier: 500, type: 27 }], precondition: "" }], rarity: 1 }, "203212": { alternatives: [{ baseDuration: 24e3, condition: "distance_type==4&running_style==1&is_last_straight==1&order<=3&motivation>=4", effects: [{ modifier: 2500, type: 22 }], precondition: "" }, { baseDuration: 24e3, condition: "distance_type==4&running_style==1&is_last_straight==1&order<=3", effects: [{ modifier: 500, type: 22 }], precondition: "" }], rarity: 1 }, "203221": { alternatives: [{ baseDuration: 24e3, condition: "running_style==2&phase_random==1", effects: [{ modifier: 4500, type: 27 }, { modifier: -200, type: 9 }], precondition: "" }], rarity: 2 }, "203222": { alternatives: [{ baseDuration: 24e3, condition: "running_style==2&phase_random==1", effects: [{ modifier: 2500, type: 27 }, { modifier: -200, type: 9 }], precondition: "" }], rarity: 1 }, "203232": { alternatives: [{ baseDuration: 24e3, condition: "running_style==2&phase_laterhalf_random==0", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "203241": { alternatives: [{ baseDuration: 24e3, condition: "phase==1&corner==0", effects: [{ modifier: 550, type: 9 }, { modifier: 1500, type: 22 }], precondition: "" }], rarity: 2 }, "203242": { alternatives: [{ baseDuration: 24e3, condition: "phase==1&corner==0", effects: [{ modifier: 150, type: 9 }, { modifier: 350, type: 22 }], precondition: "" }], rarity: 1 }, "203251": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==3&phase_firsthalf_random==2&order_rate>=40@distance_type==4&phase_firsthalf_random==2&order_rate>=40", effects: [{ modifier: 3500, type: 22 }], precondition: "" }], rarity: 2 }, "203252": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==3&phase_firsthalf_random==2&order_rate>=40@distance_type==4&phase_firsthalf_random==2&order_rate>=40", effects: [{ modifier: 1500, type: 22 }], precondition: "" }], rarity: 1 }, "203262": { alternatives: [{ baseDuration: 12e3, condition: "running_style==1&distance_type==4&phase_firstquarter_random==2&order_rate<=50", effects: [{ modifier: 2e3, type: 31 }], precondition: "" }], rarity: 1 }, "203272": { alternatives: [{ baseDuration: 24e3, condition: "running_style==1&phase_laterhalf_random==0", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "203281": { alternatives: [{ baseDuration: -1, condition: "always==1", effects: [{ modifier: -1e6, type: 1 }, { modifier: -1e6, type: 2 }, { modifier: -1e6, type: 5 }], precondition: "" }], rarity: 1 }, "203301": { alternatives: [{ baseDuration: 18e3, condition: "distance_type==4&phase_random==1", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 2 }, "203302": { alternatives: [{ baseDuration: 18e3, condition: "distance_type==4&phase_random==1", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "203311": { alternatives: [{ baseDuration: 18e3, condition: "distance_type==3&phase_random==1", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 2 }, "203312": { alternatives: [{ baseDuration: 18e3, condition: "distance_type==3&phase_random==1", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "203322": { alternatives: [{ baseDuration: 3e4, condition: "running_style==3&down_slope_random==1", effects: [{ modifier: 2e3, type: 31 }], precondition: "" }], rarity: 1 }, "203331": { alternatives: [{ baseDuration: 24e3, condition: "running_style==3&phase_firsthalf_random==1&order_rate>=40", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 2 }, "203332": { alternatives: [{ baseDuration: 24e3, condition: "running_style==3&phase_firsthalf_random==1&order_rate>=40", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "203341": { alternatives: [{ baseDuration: 3e4, condition: "running_style==4&distance_type==3&phase_random==1&order_rate>=40", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 2 }, "203342": { alternatives: [{ baseDuration: 3e4, condition: "running_style==4&distance_type==3&phase_random==1&order_rate>=40", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "203351": { alternatives: [{ baseDuration: 24e3, condition: "distance_type==2&order_rate>=40&phase_random==1", effects: [{ modifier: 4500, type: 27 }, { modifier: -200, type: 9 }], precondition: "" }], rarity: 2 }, "203352": { alternatives: [{ baseDuration: 24e3, condition: "distance_type==2&order_rate>=40&phase_random==1", effects: [{ modifier: 2500, type: 27 }, { modifier: -200, type: 9 }], precondition: "" }], rarity: 1 }, "203362": { alternatives: [{ baseDuration: 24e3, condition: "phase_random==1&order_rate>=40", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "203371": { alternatives: [{ baseDuration: 4e4, condition: "distance_type==3&phase>=2&is_finalcorner==1&is_other_character_activate_advantage_skill==27@distance_type==4&phase>=2&is_finalcorner==1&is_other_character_activate_advantage_skill==27@distance_type==3&phase>=2&is_finalcorner==1&is_other_character_activate_advantage_skill==22@distance_type==4&phase>=2&is_finalcorner==1&is_other_character_activate_advantage_skill==22", effects: [{ modifier: 2500, type: 22 }], precondition: "" }], rarity: 2 }, "203372": { alternatives: [{ baseDuration: 4e4, condition: "distance_type==3&phase>=2&is_finalcorner==1&is_other_character_activate_advantage_skill==27@distance_type==4&phase>=2&is_finalcorner==1&is_other_character_activate_advantage_skill==27@distance_type==3&phase>=2&is_finalcorner==1&is_other_character_activate_advantage_skill==22@distance_type==4&phase>=2&is_finalcorner==1&is_other_character_activate_advantage_skill==22", effects: [{ modifier: 500, type: 22 }], precondition: "" }], rarity: 1 }, "203381": { alternatives: [{ baseDuration: 9e3, condition: "distance_type==3&running_style==1&phase>=2&is_finalcorner==1&corner!=0&order<=3", effects: [{ modifier: 4e3, type: 31 }], precondition: "" }], rarity: 2 }, "203382": { alternatives: [{ baseDuration: 9e3, condition: "distance_type==3&running_style==1&phase>=2&is_finalcorner==1&corner!=0&order<=3", effects: [{ modifier: 2e3, type: 31 }], precondition: "" }], rarity: 1 }, "203391": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==3&running_style==1&corner_random==3&order_rate<=50", effects: [{ modifier: 3500, type: 22 }], precondition: "" }], rarity: 2 }, "203392": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==3&running_style==1&corner_random==3&order_rate<=50", effects: [{ modifier: 1500, type: 22 }], precondition: "" }], rarity: 1 }, "203402": { alternatives: [{ baseDuration: 12e3, condition: "running_style==1&distance_type==3&phase_firstquarter_random==2&order_rate<=50", effects: [{ modifier: 2e3, type: 31 }], precondition: "" }], rarity: 1 }, "203411": { alternatives: [{ baseDuration: 3e4, condition: "phase_random==1&running_style==2&distance_type==4&order_rate<=50", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 2 }, "203412": { alternatives: [{ baseDuration: 3e4, condition: "phase_random==1&running_style==2&distance_type==4&order_rate<=50", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "203421": { alternatives: [{ baseDuration: 3e4, condition: "running_style==2&is_lastspurt==1&phase_firsthalf_random==3", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 2 }, "203422": { alternatives: [{ baseDuration: 3e4, condition: "running_style==2&is_lastspurt==1&phase_firsthalf_random==3", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "203431": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==3&is_lastspurt==1&phase_firsthalf_random==3", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 2 }, "203432": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==3&is_lastspurt==1&phase_firsthalf_random==3", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "203442": { alternatives: [{ baseDuration: 12e3, condition: "running_style==2&distance_type==3&phase_firstquarter_random==2&order_rate<=50", effects: [{ modifier: 2e3, type: 31 }], precondition: "" }], rarity: 1 }, "203452": { alternatives: [{ baseDuration: 18e3, condition: "running_style==3&distance_type==1&phase_firsthalf_random==2&order_rate>=40", effects: [{ modifier: 2e3, type: 31 }], precondition: "" }], rarity: 1 }, "203461": { alternatives: [{ baseDuration: 24e3, condition: "running_style==1&distance_rate>=50&overtake_target_time>=1", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 2 }, "203462": { alternatives: [{ baseDuration: 24e3, condition: "running_style==1&distance_rate>=50&overtake_target_time>=1", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "203471": { alternatives: [{ baseDuration: 24e3, condition: "running_style==1&remain_distance<=200@running_style==2&remain_distance<=200", effects: [{ modifier: 3500, type: 22 }], precondition: "compete_fight_count>0" }], rarity: 2 }, "203472": { alternatives: [{ baseDuration: 24e3, condition: "running_style==1&remain_distance<=200@running_style==2&remain_distance<=200", effects: [{ modifier: 1500, type: 22 }], precondition: "compete_fight_count>0" }], rarity: 1 }, "203481": { alternatives: [{ baseDuration: 18e3, condition: "running_style==1&distance_type==1&phase_firsthalf_random==2&order_rate<=50", effects: [{ modifier: 4e3, type: 31 }], precondition: "" }], rarity: 2 }, "203482": { alternatives: [{ baseDuration: 18e3, condition: "running_style==1&distance_type==1&phase_firsthalf_random==2&order_rate<=50", effects: [{ modifier: 2e3, type: 31 }], precondition: "" }], rarity: 1 }, "203491": { alternatives: [{ baseDuration: 18e3, condition: "running_style==2&distance_type==1&phase_firsthalf_random==2&order_rate<=50", effects: [{ modifier: 4e3, type: 31 }], precondition: "" }], rarity: 2 }, "203492": { alternatives: [{ baseDuration: 18e3, condition: "running_style==2&distance_type==1&phase_firsthalf_random==2&order_rate<=50", effects: [{ modifier: 2e3, type: 31 }], precondition: "" }], rarity: 1 }, "203501": { alternatives: [{ baseDuration: 3e4, condition: "phase_random==1", effects: [{ modifier: 3500, type: 22 }], precondition: "" }], rarity: 2 }, "203502": { alternatives: [{ baseDuration: 3e4, condition: "phase_random==1", effects: [{ modifier: 1500, type: 22 }], precondition: "" }], rarity: 1 }, "203511": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==3&phase_firsthalf_random==1&order_rate>=40@distance_type==4&phase_firsthalf_random==1&order_rate>=40", effects: [{ modifier: 3500, type: 27 }, { modifier: 150, type: 9 }], precondition: "" }], rarity: 2 }, "203512": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==3&phase_firsthalf_random==1&order_rate>=40@distance_type==4&phase_firsthalf_random==1&order_rate>=40", effects: [{ modifier: 1500, type: 27 }, { modifier: 35, type: 9 }], precondition: "" }], rarity: 1 }, "203522": { alternatives: [{ baseDuration: 12e3, condition: "running_style==4&distance_type==3&phase_firstquarter_random==2&order_rate>=40", effects: [{ modifier: 2e3, type: 31 }], precondition: "" }], rarity: 1 }, "203532": { alternatives: [{ baseDuration: 24e3, condition: "running_style==4&up_slope_random==1", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "203541": { alternatives: [{ baseDuration: 18e3, condition: "distance_type==2&phase_firsthalf_random==2&order_rate>=40", effects: [{ modifier: 4e3, type: 31 }], precondition: "" }], rarity: 2 }, "203542": { alternatives: [{ baseDuration: 18e3, condition: "distance_type==2&phase_firsthalf_random==2&order_rate>=40", effects: [{ modifier: 2e3, type: 31 }], precondition: "" }], rarity: 1 }, "203552": { alternatives: [{ baseDuration: 24e3, condition: "distance_type==2&phase_random==1&order_rate>=40", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "203562": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==4&is_lastspurt==1&phase_firsthalf_random==3", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "210011": { alternatives: [{ baseDuration: 18e3, condition: "phase_random==1", effects: [{ modifier: 4200, type: 27 }], precondition: "" }], rarity: 2 }, "210012": { alternatives: [{ baseDuration: 18e3, condition: "phase_random==1", effects: [{ modifier: 1800, type: 27 }], precondition: "" }], rarity: 1 }, "210021": { alternatives: [{ baseDuration: 0, condition: "phase_random==1", effects: [{ modifier: 660, type: 9 }], precondition: "" }], rarity: 2 }, "210022": { alternatives: [{ baseDuration: 0, condition: "phase_random==1", effects: [{ modifier: 180, type: 9 }], precondition: "" }], rarity: 1 }, "210031": { alternatives: [{ baseDuration: 12e3, condition: "phase_random==2", effects: [{ modifier: 4800, type: 31 }], precondition: "" }], rarity: 2 }, "210032": { alternatives: [{ baseDuration: 12e3, condition: "phase_random==2", effects: [{ modifier: 2400, type: 31 }], precondition: "" }], rarity: 1 }, "210041": { alternatives: [{ baseDuration: 18e3, condition: "phase_random==2", effects: [{ modifier: 3e3, type: 27 }, { modifier: 3600, type: 31 }], precondition: "" }], rarity: 2 }, "210042": { alternatives: [{ baseDuration: 18e3, condition: "phase_random==2", effects: [{ modifier: 600, type: 27 }, { modifier: 1200, type: 31 }], precondition: "" }], rarity: 1 }, "210051": { alternatives: [{ baseDuration: 4e4, condition: "phase_random==0", effects: [{ modifier: 420, type: 28 }, { modifier: 18e4, type: 8 }], precondition: "" }], rarity: 2 }, "210052": { alternatives: [{ baseDuration: 4e4, condition: "phase_random==0", effects: [{ modifier: 180, type: 28 }, { modifier: 6e4, type: 8 }], precondition: "" }], rarity: 1 }, "210061": { alternatives: [{ baseDuration: 12e3, condition: "distance_rate_after_random==50", effects: [{ modifier: 3e3, type: 27 }, { modifier: 3600, type: 31 }, { modifier: 420, type: 9 }], precondition: "" }], rarity: 2 }, "210062": { alternatives: [{ baseDuration: 12e3, condition: "distance_rate_after_random==50", effects: [{ modifier: 600, type: 27 }, { modifier: 1200, type: 31 }, { modifier: 60, type: 9 }], precondition: "" }], rarity: 1 }, "210071": { alternatives: [{ baseDuration: 12e3, condition: "distance_rate_after_random==50&order_rate<=65", effects: [{ modifier: 4200, type: 27 }, { modifier: 2400, type: 31 }], precondition: "" }], rarity: 2 }, "210072": { alternatives: [{ baseDuration: 12e3, condition: "distance_rate_after_random==50&order_rate<=65", effects: [{ modifier: 1800, type: 27 }, { modifier: 840, type: 31 }], precondition: "" }], rarity: 1 }, "210081": { alternatives: [{ baseDuration: 24e3, condition: "is_lastspurt==1&phase_random==3", effects: [{ modifier: 4200, type: 27 }], precondition: "" }], rarity: 2 }, "210082": { alternatives: [{ baseDuration: 24e3, condition: "is_lastspurt==1&phase_random==3", effects: [{ modifier: 1800, type: 27 }], precondition: "" }], rarity: 1 }, "210091": { alternatives: [{ baseDuration: 2e4, condition: "phase_laterhalf_random==1", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "210101": { alternatives: [{ baseDuration: 3e4, condition: "phase_random==3&hp_per>=2&is_lastspurt==1", effects: [{ modifier: 2500, type: 27 }, { modifier: -200, type: 9 }], precondition: "" }], rarity: 1 }, "210111": { alternatives: [{ baseDuration: 4e4, condition: "phase==3&is_overtake==1&is_lastspurt==1", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "210121": { alternatives: [{ baseDuration: 12e3, condition: "compete_fight_count>0", effects: [{ modifier: 2e3, type: 31 }], precondition: "" }], rarity: 1 }, "210131": { alternatives: [{ baseDuration: 2e4, condition: "activate_count_later_half>=2", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "210141": { alternatives: [{ baseDuration: -1, condition: "motivation>=4", effects: [{ modifier: 4e5, type: 2 }, { modifier: 4e5, type: 4 }, { modifier: 4e5, type: 5 }], precondition: "" }], rarity: 1 }, "210261": { alternatives: [{ baseDuration: 18e3, condition: "phase==1&blocked_side_continuetime>=2", effects: [{ modifier: 4200, type: 27 }], precondition: "" }], rarity: 2 }, "210262": { alternatives: [{ baseDuration: 18e3, condition: "phase==1&blocked_side_continuetime>=2", effects: [{ modifier: 1800, type: 27 }], precondition: "" }], rarity: 1 }, "210271": { alternatives: [{ baseDuration: 15e3, condition: "phase_firsthalf_random==0", effects: [{ modifier: 4800, type: 31 }], precondition: "" }], rarity: 2 }, "210272": { alternatives: [{ baseDuration: 15e3, condition: "phase_firsthalf_random==0", effects: [{ modifier: 2400, type: 31 }], precondition: "" }], rarity: 1 }, "210281": { alternatives: [{ baseDuration: 24e3, condition: "phase_laterhalf_random==2", effects: [{ modifier: 4200, type: 27 }], precondition: "" }], rarity: 2 }, "210282": { alternatives: [{ baseDuration: 24e3, condition: "phase_laterhalf_random==2", effects: [{ modifier: 1800, type: 27 }], precondition: "" }], rarity: 1 }, "210291": { alternatives: [{ baseDuration: 24e3, condition: "is_last_straight==1", effects: [{ modifier: 4200, type: 27 }], precondition: "" }], rarity: 2 }, "210292": { alternatives: [{ baseDuration: 24e3, condition: "is_last_straight==1", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "210301": { alternatives: [{ baseDuration: 18e3, condition: "distance_type==2&phase_random==1@distance_type==3&phase_random==1", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 2 }, "210302": { alternatives: [{ baseDuration: 18e3, condition: "distance_type==2&phase_random==1@distance_type==3&phase_random==1", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "210311": { alternatives: [{ baseDuration: 12e3, condition: "distance_type==2&distance_rate_after_random==50&base_guts>=1200@distance_type==3&distance_rate_after_random==50&base_guts>=1200", effects: [{ modifier: 2500, type: 22 }], precondition: "" }, { baseDuration: 12e3, condition: "distance_type==2&distance_rate_after_random==50&base_guts<1200@distance_type==3&distance_rate_after_random==50&base_guts<1200", effects: [{ modifier: 1500, type: 22 }], precondition: "" }], rarity: 1 }, "210321": { alternatives: [{ baseDuration: 24e3, condition: "distance_type==1&is_lastspurt==1&phase_random==3@distance_type==2&is_lastspurt==1&phase_random==3", effects: [{ modifier: 3500, type: 22 }], precondition: "" }], rarity: 2 }, "210322": { alternatives: [{ baseDuration: 24e3, condition: "distance_type==1&is_lastspurt==1&phase_random==3@distance_type==2&is_lastspurt==1&phase_random==3", effects: [{ modifier: 1500, type: 22 }], precondition: "" }], rarity: 1 }, "210331": { alternatives: [{ baseDuration: 12e3, condition: "distance_type==1&phase_random==1&base_power>=1200@distance_type==2&phase_random==1&base_power>=1200", effects: [{ modifier: 2500, type: 22 }], precondition: "" }, { baseDuration: 12e3, condition: "distance_type==1&phase_random==1@distance_type==2&phase_random==1", effects: [{ modifier: 1500, type: 22 }], precondition: "" }], rarity: 1 }, "210341": { alternatives: [{ baseDuration: 24e3, condition: "distance_type==3&is_last_straight==1@distance_type==4&is_last_straight==1", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 2 }, "210342": { alternatives: [{ baseDuration: 24e3, condition: "distance_type==3&is_last_straight==1@distance_type==4&is_last_straight==1", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "210351": { alternatives: [{ baseDuration: 24e3, condition: "is_lastspurt==1&phase_firsthalf_random==3", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 2 }, "210352": { alternatives: [{ baseDuration: 24e3, condition: "is_lastspurt==1&phase_firsthalf_random==3", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "300131": { alternatives: [{ baseDuration: 3e4, condition: "remain_distance>=350&remain_distance<=400", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 5 }, "300141": { alternatives: [{ baseDuration: 3e4, condition: "remain_distance>=350&remain_distance<=400", effects: [{ modifier: 3500, type: 27 }], precondition: "" }], rarity: 5 }, "407011": { alternatives: [{ baseDuration: 18e3, condition: "distance_type==2&phase_laterhalf_random==0@distance_type==3&phase_laterhalf_random==0", effects: [{ modifier: 4500, type: 27 }], precondition: "" }], rarity: 6 }, "407021": { alternatives: [{ baseDuration: 18e3, condition: "distance_type==2&phase==1&change_order_onetime<0@distance_type==3&phase==1&change_order_onetime<0", effects: [{ modifier: 4500, type: 27 }], precondition: "" }], rarity: 6 }, "407031": { alternatives: [{ baseDuration: 24e3, condition: "distance_type==2&is_lastspurt==1&phase_firsthalf_random==3@distance_type==3&is_lastspurt==1&phase_firsthalf_random==3", effects: [{ modifier: 4500, type: 27 }], precondition: "" }], rarity: 6 }, "407041": { alternatives: [{ baseDuration: 24e3, condition: "distance_type==2&phase_laterhalf_random==1&order_rate<=70", effects: [{ modifier: 4500, type: 27 }], precondition: "" }], rarity: 6 }, "407051": { alternatives: [{ baseDuration: 18e3, condition: "distance_type==2&is_finalcorner_random==1&order_rate>=25", effects: [{ modifier: 4500, type: 27 }], precondition: "" }], rarity: 6 }, "407061": { alternatives: [{ baseDuration: 24e3, condition: "distance_type==3&phase_random==1&order_rate<=70", effects: [{ modifier: 4500, type: 27 }], precondition: "" }], rarity: 6 }, "407071": { alternatives: [{ baseDuration: 24e3, condition: "distance_type==3&phase_random==1&order_rate>=25", effects: [{ modifier: 4500, type: 27 }], precondition: "" }], rarity: 6 }, "408011": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==1&near_count>=3&accumulatetime>=5@distance_type==2&near_count>=3&accumulatetime>=5", effects: [{ modifier: 4500, type: 27 }], precondition: "" }], rarity: 6 }, "408021": { alternatives: [{ baseDuration: 2e4, condition: "distance_type==1&phase>=2&order_rate>=50&is_overtake==1@distance_type==2&phase>=2&order_rate>=50&is_overtake==1", effects: [{ modifier: 4e3, type: 31 }], precondition: "" }, { baseDuration: 3e4, condition: "is_activate_other_skill_detail==1&remain_distance<=200", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 6 }, "408031": { alternatives: [{ baseDuration: 18e3, condition: "distance_type==1&phase_random==1@distance_type==2&phase_random==1", effects: [{ modifier: 4500, type: 27 }], precondition: "" }], rarity: 6 }, "408041": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==1&all_corner_random==1", effects: [{ modifier: 4500, type: 27 }], precondition: "" }], rarity: 6 }, "408051": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==1&phase_random==2", effects: [{ modifier: 4e3, type: 31 }], precondition: "" }, { baseDuration: 3e4, condition: "is_activate_other_skill_detail==1&remain_distance<=200", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 6 }, "408061": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==1&all_corner_random==1@distance_type==2&all_corner_random==1", effects: [{ modifier: 4e3, type: 31 }], precondition: "" }, { baseDuration: 3e4, condition: "is_activate_other_skill_detail==1&remain_distance<=200", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 6 }, "409011": { alternatives: [{ baseDuration: 12e3, condition: "distance_type==4&running_style==2&phase==2", effects: [{ modifier: 4e3, type: 31 }], precondition: "distance_diff_top<=10&distance_rate>=60&phase==1" }, { baseDuration: 3e4, condition: "is_activate_other_skill_detail==1&is_last_straight==1", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 6 }, "409021": { alternatives: [{ baseDuration: 24e3, condition: "distance_type==3&phase==1&corner==0@distance_type==4&phase==1&corner==0", effects: [{ modifier: 550, type: 9 }, { modifier: 2500, type: 22 }], precondition: "" }], rarity: 6 }, "409031": { alternatives: [{ baseDuration: 4e4, condition: "distance_type==3&phase_random==1", effects: [{ modifier: 3500, type: 27 }, { modifier: 350, type: 9 }], precondition: "" }], rarity: 6 }, "409041": { alternatives: [{ baseDuration: 24e3, condition: "distance_type==3&is_lastspurt==1&phase_firsthalf_random==3@distance_type==4&is_lastspurt==1&phase_firsthalf_random==3", effects: [{ modifier: 4500, type: 27 }], precondition: "" }], rarity: 6 }, "409051": { alternatives: [{ baseDuration: 3e4, condition: "course_distance>=2000&running_style==1&phase<=1&change_order_onetime>0&accumulatetime>=5@course_distance>=2000&running_style==1&phase<=1&blocked_side_continuetime>=2&accumulatetime>=5", effects: [{ modifier: 4500, type: 27 }], precondition: "" }], rarity: 6 }, "409061": { alternatives: [{ baseDuration: 24e3, condition: "distance_type==3&all_corner_random==1@distance_type==4&all_corner_random==1", effects: [{ modifier: 4500, type: 27 }], precondition: "" }], rarity: 6 }, "410011": { alternatives: [{ baseDuration: 4e4, condition: "phase_random==1", effects: [{ modifier: 3500, type: 22 }], precondition: "" }], rarity: 6 }, "410021": { alternatives: [{ baseDuration: 3e4, condition: "straight_random==1", effects: [{ modifier: 4500, type: 27 }], precondition: "" }], rarity: 6 }, "410031": { alternatives: [{ baseDuration: 18e3, condition: "phase_random==1", effects: [{ modifier: 4500, type: 27 }], precondition: "" }], rarity: 6 }, "410041": { alternatives: [{ baseDuration: 12e3, condition: "running_style==1&phase==0", effects: [{ modifier: 4e3, type: 31 }], precondition: "" }, { baseDuration: 24e3, condition: "is_activate_other_skill_detail==1&is_lastspurt==1&phase_firsthalf_random==3", effects: [{ modifier: 1500, type: 22 }], precondition: "" }], rarity: 6 }, "410051": { alternatives: [{ baseDuration: 9e3, condition: "running_style==2&phase>=2&is_finalcorner==1&corner!=0&remain_distance>=600&order_rate<=70@running_style==3&phase>=2&is_finalcorner==1&corner!=0&remain_distance>=600&order_rate<=70", effects: [{ modifier: 4e3, type: 31 }], precondition: "" }, { baseDuration: 24e3, condition: "is_activate_other_skill_detail==1&is_last_straight==1", effects: [{ modifier: 1500, type: 22 }], precondition: "" }], rarity: 6 }, "410061": { alternatives: [{ baseDuration: 24e3, condition: "running_style==4&phase_laterhalf_random==1&order_rate>=40", effects: [{ modifier: 3500, type: 27 }], precondition: "" }, { baseDuration: 24e3, condition: "is_activate_other_skill_detail==1&is_lastspurt==1&phase_firsthalf_random==3", effects: [{ modifier: 1500, type: 22 }], precondition: "" }], rarity: 6 }, "900011": { alternatives: [{ baseDuration: 3e4, condition: "phase>=2&order>=1&order_rate<=50&change_order_onetime<0", effects: [{ modifier: 1500, type: 22 }, { modifier: 500, type: 31 }], precondition: "" }], rarity: 1 }, "900021": { alternatives: [{ baseDuration: 3e4, condition: "distance_rate>=50&order==1&bashin_diff_behind>=1", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "900031": { alternatives: [{ baseDuration: 3e4, condition: "is_last_straight==1", effects: [{ modifier: 2500, type: 27 }], precondition: "phase>=2&order<=3&bashin_diff_infront<=1&is_overtake==1" }], rarity: 1 }, "900041": { alternatives: [{ baseDuration: 24e3, condition: "is_finalcorner==1&order<=5&order_rate<=50", effects: [{ modifier: 2e3, type: 31 }], precondition: "" }], rarity: 1 }, "900051": { alternatives: [{ baseDuration: 3e4, condition: "remain_distance<=300", effects: [{ modifier: 2500, type: 27 }], precondition: "phase>=2&order_rate<=40&behind_near_lane_time_set1>=1" }], rarity: 1 }, "900061": { alternatives: [{ baseDuration: 3e4, condition: "order>=2&order<=5&order_rate<=50&remain_distance<=201&remain_distance>=199", effects: [{ modifier: 2500, type: 27 }], precondition: "" }], rarity: 1 }, "900071": { alternatives: [{ baseDuration: 36e3, condition: "distance_rate>=50&distance_rate<=60&order_rate>50", effects: [{ modifier: 500, type: 27 }], precondition: "" }], rarity: 1 }, "900081": { alternatives: [{ baseDuration: 3e4, condition: "order>=3&order_rate<=50&remain_distance<=200&bashin_diff_infront<=1@order>=3&order_rate<=50&remain_distance<=200&bashin_diff_behind<=1", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "900091": { alternatives: [{ baseDuration: 3e4, condition: "distance_rate>=50&order==1&bashin_diff_behind<=1@distance_rate>=50&order==2&is_overtake==1", effects: [{ modifier: 500, type: 27 }, { modifier: 1e3, type: 31 }], precondition: "" }], rarity: 1 }, "900101": { alternatives: [{ baseDuration: 3e4, condition: "is_finalcorner_laterhalf==1&corner!=0&order>=3&order_rate<=40", effects: [{ modifier: 2e3, type: 31 }], precondition: "" }], rarity: 1 }, "900111": { alternatives: [{ baseDuration: 3e4, condition: "is_last_straight==1&change_order_onetime<0&order>=3", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "900121": { alternatives: [{ baseDuration: 3e4, condition: "is_last_straight==1", effects: [{ modifier: 1500, type: 27 }], precondition: "is_finalcorner==1&is_behind_in==1&change_order_onetime<0&order_rate>=40" }], rarity: 1 }, "900131": { alternatives: [{ baseDuration: 3e4, condition: "is_finalcorner==1&corner!=0&distance_diff_rate<=30&distance_type==4&lastspurt==2", effects: [{ modifier: 2500, type: 27 }], precondition: "" }, { baseDuration: 3e4, condition: "is_finalcorner==1&corner!=0&distance_diff_rate<=30", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "900141": { alternatives: [{ baseDuration: 3e4, condition: "is_last_straight==1&hp_per>=30&order<=2", effects: [{ modifier: 500, type: 27 }, { modifier: 1e3, type: 31 }], precondition: "" }], rarity: 1 }, "900151": { alternatives: [{ baseDuration: 3e4, condition: "is_finalcorner==1&bashin_diff_behind<=1&order<=4@is_finalcorner==1&bashin_diff_infront<=1&order<=4", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "900161": { alternatives: [{ baseDuration: 3e4, condition: "is_finalcorner==1&order>=2&order_rate<=75&is_behind_in==1&change_order_onetime<0", effects: [{ modifier: 2500, type: 27 }], precondition: "phase==1&blocked_side_continuetime>=2" }, { baseDuration: 3e4, condition: "is_finalcorner==1&order>=2&order_rate<=75&is_behind_in==1&change_order_onetime<0", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "900171": { alternatives: [{ baseDuration: 3e4, condition: "is_last_straight==1&change_order_up_end_after>=3", effects: [{ modifier: 2500, type: 27 }], precondition: "" }], rarity: 1 }, "900181": { alternatives: [{ baseDuration: 3e4, condition: "is_finalcorner==1&corner!=0&order>=3&change_order_onetime<0", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "900191": { alternatives: [{ baseDuration: 3e4, condition: "change_order_up_end_after>=2", effects: [{ modifier: 1500, type: 27 }, { modifier: 150, type: 28 }], precondition: "" }], rarity: 1 }, "900201": { alternatives: [{ baseDuration: 24e3, condition: "phase>=2&corner!=0&order==1", effects: [{ modifier: 2e3, type: 31 }], precondition: "" }], rarity: 1 }, "900211": { alternatives: [{ baseDuration: 3e4, condition: "distance_rate>=50&corner==0&order_rate>=70&order_rate<=75&is_overtake==1@distance_rate>=50&corner==0&order_rate<=30&order_rate>=20", effects: [{ modifier: 1500, type: 27 }, { modifier: 500, type: 31 }], precondition: "" }], rarity: 1 }, "900221": { alternatives: [{ baseDuration: 3e4, condition: "distance_rate>=50&order>=2&order_rate<=40&blocked_side_continuetime>=2", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "900231": { alternatives: [{ baseDuration: 3e4, condition: "phase>=2&is_finalcorner==1&order<=4&temptation_count==0", effects: [{ modifier: 2500, type: 27 }], precondition: "" }, { baseDuration: 3e4, condition: "phase>=2&is_finalcorner==1&order<=4", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "900241": { alternatives: [{ baseDuration: 3e4, condition: "is_finalcorner==1&blocked_side_continuetime>=2&order<=3", effects: [{ modifier: 500, type: 27 }, { modifier: 1e3, type: 31 }], precondition: "" }], rarity: 1 }, "900251": { alternatives: [{ baseDuration: 36e3, condition: "distance_rate>=50&order_rate>=40&order_rate<=70", effects: [{ modifier: 500, type: 27 }, { modifier: -250, type: 21 }], precondition: "" }], rarity: 1 }, "900261": { alternatives: [{ baseDuration: 3e4, condition: "is_badstart==0&order<=3&is_last_straight==1&order_rate_in20_continue==1", effects: [{ modifier: 2500, type: 27 }], precondition: "" }, { baseDuration: 3e4, condition: "is_badstart==0&order<=3&is_last_straight==1", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "900271": { alternatives: [{ baseDuration: 24e3, condition: "phase>=2&corner!=0&order_rate>=65&order_rate<=70", effects: [{ modifier: 2e3, type: 31 }], precondition: "" }], rarity: 1 }, "900281": { alternatives: [{ baseDuration: 3e4, condition: "distance_rate>=45&distance_rate<=60&order>=2&order_rate<=50&is_overtake==1&distance_type==1", effects: [{ modifier: 500, type: 22 }], precondition: "" }, { baseDuration: 3e4, condition: "distance_rate>=45&distance_rate<=60&order>=2&order_rate<=50&is_overtake==1", effects: [{ modifier: 500, type: 27 }], precondition: "" }], rarity: 1 }, "900291": { alternatives: [{ baseDuration: 3e4, condition: "distance_diff_top<=5&remain_distance<=300&order_rate<=40", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "900301": { alternatives: [{ baseDuration: 3e4, condition: "is_last_straight==1", effects: [{ modifier: 1500, type: 27 }], precondition: "phase>=2&order<=4&change_order_onetime<0" }], rarity: 1 }, "900311": { alternatives: [{ baseDuration: 3e4, condition: "remain_distance<=299&remain_distance>=295&order<=2&slope==0@remain_distance<=299&remain_distance>=295&order<=2&slope==2", effects: [{ modifier: 2500, type: 27 }], precondition: "remain_distance<=305&remain_distance>=300&slope==1" }, { baseDuration: 3e4, condition: "remain_distance<=299&remain_distance>=295&order<=2", effects: [{ modifier: 500, type: 27 }], precondition: "" }], rarity: 1 }, "900321": { alternatives: [{ baseDuration: 24e3, condition: "distance_rate>=50&corner!=0&order>=3&order_rate<=40", effects: [{ modifier: 150, type: 9 }, { modifier: 500, type: 27 }], precondition: "" }], rarity: 1 }, "900331": { alternatives: [{ baseDuration: 3e4, condition: "is_last_straight==1&distance_diff_top>=5&order_rate<80", effects: [{ modifier: 1500, type: 27 }], precondition: "" }, { baseDuration: 3e4, condition: "is_last_straight==1&distance_diff_top>=5&order_rate>=80", effects: [{ modifier: 2500, type: 27 }], precondition: "" }], rarity: 1 }, "900341": { alternatives: [{ baseDuration: 3e4, condition: "compete_fight_count>0", effects: [{ modifier: 2500, type: 27 }], precondition: "distance_rate>=50&order_rate_out40_continue==1" }], rarity: 1 }, "900351": { alternatives: [{ baseDuration: 3e4, condition: "is_last_straight==1&order<=5", effects: [{ modifier: 1500, type: 27 }], precondition: "is_finalcorner==1&blocked_side_continuetime>=2" }], rarity: 1 }, "900361": { alternatives: [{ baseDuration: 3e4, condition: "is_last_straight==1", effects: [{ modifier: 1500, type: 27 }, { modifier: 150, type: 28 }], precondition: "is_finalcorner==1&order_rate>=40&order_rate<=75&lane_type==0" }], rarity: 1 }, "900371": { alternatives: [{ baseDuration: 3e4, condition: "temptation_count==0&order>=3&is_last_straight==1&order_rate_in80_continue==1&order_rate_out40_continue==1", effects: [{ modifier: 2500, type: 27 }], precondition: "" }, { baseDuration: 3e4, condition: "temptation_count==0&order>=3&is_last_straight==1", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "900381": { alternatives: [{ baseDuration: 3e4, condition: "distance_rate>=50&distance_rate<=65&order>=2&order_rate<=50&change_order_onetime<0", effects: [{ modifier: 500, type: 27 }, { modifier: 1e3, type: 31 }], precondition: "" }], rarity: 1 }, "900391": { alternatives: [{ baseDuration: 3e4, condition: "is_last_straight==1&blocked_side_continuetime>=2", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "900401": { alternatives: [{ baseDuration: 36e3, condition: "distance_rate>=50&order_rate>=40&order_rate<=80&is_overtake==1", effects: [{ modifier: 500, type: 27 }], precondition: "" }], rarity: 1 }, "900411": { alternatives: [{ baseDuration: 3e4, condition: "distance_rate>=50&order<=3&blocked_side_continuetime>=2", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "900421": { alternatives: [{ baseDuration: 3e4, condition: "remain_distance<=201&remain_distance>=199&distance_diff_top<=5&order>=2", effects: [{ modifier: 2500, type: 27 }], precondition: "" }, { baseDuration: 3e4, condition: "remain_distance<=201&remain_distance>=199&distance_diff_top<=10&order>=2", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "900431": { alternatives: [{ baseDuration: 3e4, condition: "compete_fight_count>0&ground_type==2", effects: [{ modifier: 500, type: 27 }, { modifier: 2e3, type: 31 }], precondition: "" }, { baseDuration: 3e4, condition: "compete_fight_count>0", effects: [{ modifier: 500, type: 27 }], precondition: "" }], rarity: 1 }, "900441": { alternatives: [{ baseDuration: 36e3, condition: "remain_distance<=300", effects: [{ modifier: 1500, type: 27 }], precondition: "order_rate_out50_continue==1&temptation_count==0&is_finalcorner==1" }], rarity: 1 }, "900451": { alternatives: [{ baseDuration: 0, condition: "phase_random==1&order>=2&order_rate<=40", effects: [{ modifier: 350, type: 9 }], precondition: "" }], rarity: 1 }, "900461": { alternatives: [{ baseDuration: 3e4, condition: "phase==1&corner==0&order<=2&bashin_diff_behind<=1", effects: [{ modifier: 500, type: 27 }, { modifier: 1e3, type: 31 }], precondition: "" }], rarity: 1 }, "900471": { alternatives: [{ baseDuration: 3e4, condition: "phase>=2&remain_distance<=401&remain_distance>=399&order_rate<=40&grade==100&popularity<=3", effects: [{ modifier: 2500, type: 27 }], precondition: "" }, { baseDuration: 3e4, condition: "phase>=2&remain_distance<=401&remain_distance>=399&order_rate<=40", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "900481": { alternatives: [{ baseDuration: 3e4, condition: "is_last_straight==1&order_rate<=40&overtake_target_time>=1@is_last_straight==1&order_rate<=40&is_overtake==1", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "900491": { alternatives: [{ baseDuration: 3e4, condition: "remain_distance<=400&order_rate>=30&order_rate<=50&popularity>=4", effects: [{ modifier: 2500, type: 27 }], precondition: "is_finalcorner==1&is_overtake==1" }, { baseDuration: 3e4, condition: "remain_distance<=400&order_rate>=30&order_rate<=50&popularity<4", effects: [{ modifier: 1500, type: 27 }], precondition: "is_finalcorner==1&is_overtake==1" }], rarity: 1 }, "900501": { alternatives: [{ baseDuration: 3e4, condition: "is_finalcorner==1&order_rate>=40&order_rate<=75&is_overtake==1", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "900511": { alternatives: [{ baseDuration: 24e3, condition: "phase>=2&is_finalcorner_laterhalf==1&order>=3&order_rate<=40@phase>=2&is_finalcorner==1&corner==0&order>=3&order_rate<=40", effects: [{ modifier: 2e3, type: 31 }], precondition: "phase==1&blocked_side_continuetime>=2&corner!=0" }], rarity: 1 }, "900521": { alternatives: [{ baseDuration: 0, condition: "is_finalcorner==1&corner!=0&order_rate>50&near_count>=1", effects: [{ modifier: 150, type: 9 }], precondition: "" }], rarity: 1 }, "900531": { alternatives: [{ baseDuration: 12e3, condition: "phase>=2&order_rate>=50&is_finalcorner==1&bashin_diff_infront<=1", effects: [{ modifier: 500, type: 31 }, { modifier: 500, type: 31 }], precondition: "" }], rarity: 1 }, "900541": { alternatives: [{ baseDuration: 24e3, condition: "remain_distance<=150&order_rate<=50", effects: [{ modifier: 2500, type: 27 }], precondition: "order_rate>=45&distance_rate>=50&change_order_onetime<0" }], rarity: 1 }, "900551": { alternatives: [{ baseDuration: 3e4, condition: "distance_rate<=50&distance_rate>=40&order_rate<=80&order_rate>=50&near_count>=1&visiblehorse>=4", effects: [{ modifier: 2e3, type: 27 }], precondition: "" }, { baseDuration: 3e4, condition: "distance_rate<=50&distance_rate>=40&order_rate<=80&order_rate>=50&near_count>=1", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "900561": { alternatives: [{ baseDuration: 3e4, condition: "phase>=2&order>=3&blocked_front==1", effects: [{ modifier: 1500, type: 27 }, { modifier: 500, type: 31 }], precondition: "" }], rarity: 1 }, "900571": { alternatives: [{ baseDuration: 36e3, condition: "distance_type==3&phase_laterhalf_random==1&order_rate>50@distance_type==4&phase_laterhalf_random==1&order_rate>50", effects: [{ modifier: 500, type: 27 }], precondition: "" }, { baseDuration: 36e3, condition: "distance_type==1&phase_laterhalf_random==1&order_rate>50@distance_type==2&phase_laterhalf_random==1&order_rate>50", effects: [{ modifier: 500, type: 27 }], precondition: "" }], rarity: 1 }, "900581": { alternatives: [{ baseDuration: 3e4, condition: "phase>=2&change_order_onetime<0", effects: [{ modifier: 500, type: 27 }, { modifier: 1e3, type: 31 }], precondition: "" }], rarity: 1 }, "900591": { alternatives: [{ baseDuration: 24e3, condition: "phase>=2&corner!=0&is_finalcorner==0&temptation_count==0&order_rate>=50&order_rate<=70@phase==1&corner!=0&is_finalcorner==1&temptation_count==0&order_rate>=50&order_rate<=70", effects: [{ modifier: 2e3, type: 31 }], precondition: "" }], rarity: 1 }, "900601": { alternatives: [{ baseDuration: 3e4, condition: "phase>=2&order==3&bashin_diff_behind<=1", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "900611": { alternatives: [{ baseDuration: 3e4, condition: "temptation_count==0&remain_distance<=201&remain_distance>=199&order>=4&order_rate<=70", effects: [{ modifier: 2500, type: 27 }], precondition: "" }], rarity: 1 }, "900621": { alternatives: [{ baseDuration: 3e4, condition: "distance_rate>=50&phase==1&order>=3&order_rate<=70", effects: [{ modifier: 150, type: 9 }, { modifier: 500, type: 27 }], precondition: "" }], rarity: 1 }, "900631": { alternatives: [{ baseDuration: 36e3, condition: "is_lastspurt==1&phase==3&temptation_count==0", effects: [{ modifier: 500, type: 27 }], precondition: "" }], rarity: 1 }, "900641": { alternatives: [{ baseDuration: 36e3, condition: "distance_rate>=50&order_rate_in20_continue==1", effects: [{ modifier: 150, type: 9 }, { modifier: 500, type: 27 }], precondition: "" }], rarity: 1 }, "900651": { alternatives: [{ baseDuration: 36e3, condition: "distance_type==1&phase_laterhalf_random==1&order_rate<=50@distance_type==2&phase_laterhalf_random==1&order_rate<=50", effects: [{ modifier: 500, type: 27 }], precondition: "" }, { baseDuration: 3e4, condition: "distance_type==3&phase_laterhalf_random==1&order_rate<=50@distance_type==4&phase_laterhalf_random==1&order_rate<=50", effects: [{ modifier: 500, type: 27 }], precondition: "" }], rarity: 1 }, "900661": { alternatives: [{ baseDuration: 104e3, condition: "distance_rate>=34&distance_rate<=36&order==1&bashin_diff_behind>=1", effects: [{ modifier: 350, type: 27 }], precondition: "" }, { baseDuration: 5e6, condition: "phase==3&is_activate_other_skill_detail==1", effects: [{ modifier: -500, type: 21 }], precondition: "" }], rarity: 1 }, "900671": { alternatives: [{ baseDuration: 3e4, condition: "is_last_straight_onetime==1&order>=2&order<=5&distance_diff_top<=5", effects: [{ modifier: 2500, type: 27 }], precondition: "" }, { baseDuration: 3e4, condition: "is_last_straight_onetime==1&order>=2&order<=5&distance_diff_top>5", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "900681": { alternatives: [{ baseDuration: 3e4, condition: "phase==2&straight_front_type==2&order<=2", effects: [{ modifier: 500, type: 27 }, { modifier: 1e3, type: 31 }], precondition: "" }, { baseDuration: 3e4, condition: "distance_rate>=50&corner==3&order<=2", effects: [{ modifier: 500, type: 27 }], precondition: "" }], rarity: 1 }, "900691": { alternatives: [{ baseDuration: 3e4, condition: "remain_distance<=300&order_rate<=40&bashin_diff_infront<=1", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "900701": { alternatives: [{ baseDuration: 24e3, condition: "remain_distance>=799&remain_distance<=801&order_rate>=30&order_rate<=60&course_distance==2400&popularity<=3", effects: [{ modifier: 3e3, type: 31 }], precondition: "" }], rarity: 1 }, "900701-1": { alternatives: [{ baseDuration: 24e3, condition: "remain_distance>=799&remain_distance<=801&order_rate>=30&order_rate<=60", effects: [{ modifier: 700, type: 31 }], precondition: "" }], rarity: 1 }, "900711": { alternatives: [{ baseDuration: 24e3, condition: "is_last_straight==1&bashin_diff_behind<=1", effects: [{ modifier: 2500, type: 27 }, { modifier: -100, type: 9 }], precondition: "" }], rarity: 1 }, "900721": { alternatives: [{ baseDuration: 3e4, condition: "remain_distance<=300&order_rate<=40", effects: [{ modifier: 1500, type: 27 }], precondition: "is_finalcorner==1&change_order_onetime<0" }], rarity: 1 }, "900731": { alternatives: [{ baseDuration: 3e4, condition: "is_last_straight==1&change_order_up_end_after>=1", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "900741": { alternatives: [{ baseDuration: 3e4, condition: "distance_rate>=50&order_rate>=40&order_rate<=80", effects: [{ modifier: 350, type: 27 }], precondition: "" }], rarity: 1 }, "900761": { alternatives: [{ baseDuration: 36e3, condition: "distance_type==4&distance_rate>=50&distance_rate<=51&order_rate>=30&order_rate<=80", effects: [{ modifier: 500, type: 27 }, { modifier: 350, type: 9 }], precondition: "" }, { baseDuration: 3e4, condition: "distance_rate>=50&distance_rate<=51&order_rate>=30&order_rate<=80", effects: [{ modifier: 500, type: 27 }], precondition: "" }], rarity: 1 }, "900771": { alternatives: [{ baseDuration: 3e4, condition: "remain_distance<=401&remain_distance>=399", effects: [{ modifier: 2500, type: 27 }], precondition: "distance_rate>=60&phase==1&order>=2&order_rate<=40" }], rarity: 1 }, "900781": { alternatives: [{ baseDuration: 48e3, condition: "is_finalcorner_laterhalf==1&distance_diff_rate<=50&order==2", effects: [{ modifier: 700, type: 31 }], precondition: "distance_rate>=50&order_rate_out20_continue==1" }, { baseDuration: 48e3, condition: "is_finalcorner_laterhalf==1&distance_diff_rate<=50", effects: [{ modifier: 500, type: 31 }], precondition: "distance_rate>=50&order_rate_out20_continue==1" }], rarity: 1 }, "900791": { alternatives: [{ baseDuration: 36e3, condition: "distance_rate>=50&track_id==10101@distance_rate>=50&track_id==10103@distance_rate>=50&track_id==10104", effects: [{ modifier: 1500, type: 27 }], precondition: "phase==1&order_rate<=50&blocked_side_continuetime>=2" }, { baseDuration: 24e3, condition: "distance_rate>=50", effects: [{ modifier: 1500, type: 27 }], precondition: "phase==1&order_rate<=50&blocked_side_continuetime>=2" }], rarity: 1 }, "900801": { alternatives: [{ baseDuration: 3e4, condition: "is_other_character_activate_advantage_skill==31", effects: [{ modifier: 500, type: 22 }], precondition: "distance_rate>=50&order_rate_in20_continue==1" }], rarity: 1 }, "900821": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==2&is_finalcorner==1&corner!=0&order_rate<=50&order_rate>=20", effects: [{ modifier: 1500, type: 27 }], precondition: "" }, { baseDuration: 24e3, condition: "is_finalcorner==1&corner!=0&order_rate<=50&order_rate>=20", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "900831": { alternatives: [{ baseDuration: 36e3, condition: "distance_rate>=40&corner==0&slope==2&order_rate>=40&order_rate<=80", effects: [{ modifier: 1500, type: 27 }], precondition: "" }, { baseDuration: 3e4, condition: "distance_rate>=40&corner==0&order_rate>=40&order_rate<=80", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "900841": { alternatives: [{ baseDuration: 3e4, condition: "is_last_straight==1", effects: [{ modifier: 1500, type: 22 }], precondition: "phase>=2&order_rate>=50" }], rarity: 1 }, "900851": { alternatives: [{ baseDuration: 3e4, condition: "distance_rate>=66&distance_rate<=68&order_rate>=60&order_rate<=90&temptation_count==0", effects: [{ modifier: 500, type: 22 }, { modifier: -250, type: 21 }], precondition: "" }], rarity: 1 }, "900861": { alternatives: [{ baseDuration: 3e4, condition: "remain_distance>=999&remain_distance<=1001&order_rate>=20&order_rate<=50", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "900871": { alternatives: [{ baseDuration: 3e4, condition: "remain_distance<=400&order<=2&overtake_target_time>=1", effects: [{ modifier: 500, type: 27 }, { modifier: 1e3, type: 31 }], precondition: "" }], rarity: 1 }, "900881": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==3&remain_distance<=400", effects: [{ modifier: 2500, type: 27 }], precondition: "change_order_up_middle>=1&is_finalcorner==1&corner!=0&order_rate<=70&order_rate>=40" }, { baseDuration: 3e4, condition: "remain_distance<=400", effects: [{ modifier: 1500, type: 27 }], precondition: "is_finalcorner==1&corner!=0&order_rate<=70&order_rate>=40" }], rarity: 1 }, "900891": { alternatives: [{ baseDuration: 3e4, condition: "distance_rate>=45&distance_rate<=55&order_rate>=20&order_rate<=50&course_distance>=2400", effects: [{ modifier: 1500, type: 27 }, { modifier: 50, type: 9 }], precondition: "" }, { baseDuration: 3e4, condition: "distance_rate>=45&distance_rate<=55&order_rate>=20&order_rate<=50", effects: [{ modifier: 1500, type: 27 }, { modifier: 35, type: 9 }], precondition: "" }], rarity: 1 }, "900911": { alternatives: [{ baseDuration: 3e4, condition: "remain_distance<=300", effects: [{ modifier: 2500, type: 27 }], precondition: "phase>=2&is_last_straight_onetime==1&order_rate>=30&order_rate<=70&temptation_count==0" }, { baseDuration: 3e4, condition: "remain_distance<=300", effects: [{ modifier: 500, type: 27 }], precondition: "phase>=2&is_last_straight_onetime==1&order_rate>=30&order_rate<=70" }], rarity: 1 }, "900931": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==1&phase_firsthalf_random==2&order_rate<=50&order_rate>=20@distance_type==2&phase_firsthalf_random==2&order_rate<=50&order_rate>=20", effects: [{ modifier: 1500, type: 22 }], precondition: "" }, { baseDuration: 3e4, condition: "distance_type==3&phase_firsthalf_random==2&order_rate<=50&order_rate>=20@distance_type==4&phase_firsthalf_random==2&order_rate<=50&order_rate>=20", effects: [{ modifier: 500, type: 22 }], precondition: "" }], rarity: 1 }, "900941": { alternatives: [{ baseDuration: 3e4, condition: "distance_rate>=50&distance_rate<=51&order_rate<=80&order_rate>=40&distance_type==3", effects: [{ modifier: 2500, type: 27 }], precondition: "" }, { baseDuration: 3e4, condition: "distance_rate>=50&distance_rate<=51&order_rate<=80&order_rate>=40", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "900981": { alternatives: [{ baseDuration: 3e4, condition: "phase_laterhalf_random==1", effects: [{ modifier: 500, type: 27 }], precondition: "" }], rarity: 1 }, "900991": { alternatives: [{ baseDuration: 24e3, condition: "is_lastspurt==1&order_rate<=40&order_rate>=30&ground_type==2", effects: [{ modifier: 700, type: 31 }], precondition: "phase==1&blocked_side_continuetime>=2&corner!=0" }], rarity: 1 }, "901001": { alternatives: [{ baseDuration: 3e4, condition: "remain_distance>=299&remain_distance<=301&order_rate>=20&order_rate<=40&distance_diff_top<=5&ground_type==2", effects: [{ modifier: 500, type: 27 }, { modifier: 500, type: 22 }], precondition: "" }, { baseDuration: 3e4, condition: "remain_distance>=299&remain_distance<=301&order_rate>=20&order_rate<=40", effects: [{ modifier: 500, type: 27 }], precondition: "" }], rarity: 1 }, "901021": { alternatives: [{ baseDuration: 0, condition: "distance_rate<=50&order_rate>=40&order_rate<=80&infront_near_lane_time>=3&accumulatetime>=10@distance_rate<=50&order_rate>=40&order_rate<=80&behind_near_lane_time>=3&accumulatetime>=10", effects: [{ modifier: 35, type: 9 }], precondition: "" }, { baseDuration: 24e3, condition: "distance_rate<=60&distance_rate>=45&corner==0&is_activate_other_skill_detail==1", effects: [{ modifier: 2500, type: 27 }], precondition: "" }], rarity: 1 }, "901041": { alternatives: [{ baseDuration: 36e3, condition: "corner==3&order==1&track_id==10006&distance_type==3", effects: [{ modifier: 500, type: 27 }, { modifier: 50, type: 9 }], precondition: "" }, { baseDuration: 3e4, condition: "corner==3&order==1", effects: [{ modifier: 500, type: 27 }, { modifier: 50, type: 9 }], precondition: "" }], rarity: 1 }, "901051": { alternatives: [{ baseDuration: 3e4, condition: "distance_rate>=50&distance_rate<=55&order_rate>=40&order_rate<=80&distance_type==3&activate_count_all>=7", effects: [{ modifier: 2500, type: 27 }], precondition: "" }, { baseDuration: 3e4, condition: "distance_rate>=50&distance_rate<=55&order_rate>=40&order_rate<=80", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "901061": { alternatives: [{ baseDuration: 36e3, condition: "distance_type==4&order_rate>=40&order_rate<=70&is_finalcorner_laterhalf==1&popularity>=4", effects: [{ modifier: 2500, type: 27 }], precondition: "" }, { baseDuration: 36e3, condition: "order_rate>=40&order_rate<=70&is_finalcorner_laterhalf==1", effects: [{ modifier: 500, type: 27 }], precondition: "" }], rarity: 1 }, "901071": { alternatives: [{ baseDuration: 3e4, condition: "phase>=2&is_last_straight==1&order==1", effects: [{ modifier: 500, type: 27 }], precondition: "" }], rarity: 1 }, "901081": { alternatives: [{ baseDuration: 3e4, condition: "distance_rate>=50&distance_rate<=51&order_rate>=50", effects: [{ modifier: 1500, type: 27 }], precondition: "" }, { baseDuration: 18e3, condition: "phase>=2&is_activate_other_skill_detail==1&is_finalcorner==1&corner!=0&is_overtake==1", effects: [{ modifier: 350, type: 22 }], precondition: "" }], rarity: 1 }, "901091": { alternatives: [{ baseDuration: 36e3, condition: "distance_type==1&distance_rate<=50&corner!=0&order>=3&order_rate<=70@distance_type==2&distance_rate<=50&corner!=0&order>=3&order_rate<=70", effects: [{ modifier: 500, type: 27 }], precondition: "" }, { baseDuration: 3e4, condition: "distance_rate<=50&corner!=0&order>=3&order_rate<=70", effects: [{ modifier: 500, type: 27 }], precondition: "" }], rarity: 1 }, "901101": { alternatives: [{ baseDuration: 24e3, condition: "remain_distance>=799&remain_distance<=801&is_basis_distance==1&order_rate>=70&order_rate<=80", effects: [{ modifier: 500, type: 22 }, { modifier: 500, type: 31 }, { modifier: 700, type: 31 }], precondition: "" }, { baseDuration: 24e3, condition: "remain_distance>=799&remain_distance<=801&order_rate>=50&order_rate<=80", effects: [{ modifier: 500, type: 22 }, { modifier: 500, type: 31 }], precondition: "" }], rarity: 1 }, "901111": { alternatives: [{ baseDuration: 36e3, condition: "distance_rate>=49&distance_rate<=50&order_rate>=40&order_rate<=90&slope==1", effects: [{ modifier: 1500, type: 27 }], precondition: "" }, { baseDuration: 36e3, condition: "distance_rate>=49&distance_rate<=50&order_rate>=40&order_rate<=90", effects: [{ modifier: 500, type: 27 }], precondition: "" }], rarity: 1 }, "901151": { alternatives: [{ baseDuration: 36e3, condition: "running_style==4&remain_distance>=999&remain_distance<=1001", effects: [{ modifier: 500, type: 22 }], precondition: "" }], rarity: 1 }, "901161": { alternatives: [{ baseDuration: 3e4, condition: "distance_rate<=50&corner!=0&order_rate<=50", effects: [{ modifier: 500, type: 27 }], precondition: "" }, { baseDuration: 18e3, condition: "is_activate_other_skill_detail==1&order_rate<=40&phase>=2&is_last_straight==1", effects: [{ modifier: 2500, type: 27 }], precondition: "" }], rarity: 1 }, "901171": { alternatives: [{ baseDuration: 24e3, condition: "is_last_straight_onetime==1&change_order_up_end_after>=3@is_last_straight_onetime==1&change_order_up_end_after>=2&change_order_up_middle>=1@is_last_straight_onetime==1&change_order_up_end_after>=1&change_order_up_middle>=2@is_last_straight_onetime==1&change_order_up_middle>=3", effects: [{ modifier: 3500, type: 27 }], precondition: "running_style==4&phase>=2" }, { baseDuration: 24e3, condition: "is_last_straight_onetime==1&change_order_up_end_after>=1@is_last_straight_onetime==1&change_order_up_middle>=1", effects: [{ modifier: 1500, type: 27 }], precondition: "phase>=2" }], rarity: 1 }, "901191": { alternatives: [{ baseDuration: 18e3, condition: "distance_rate>=66&distance_rate<=68&order_rate>=50&remain_distance>=500", effects: [{ modifier: 500, type: 22 }], precondition: "" }, { baseDuration: 18e3, condition: "is_activate_other_skill_detail==1&corner==0&track_id==10005&distance_type==3@is_activate_other_skill_detail==1&corner==0&track_id==10005&distance_type==4@is_activate_other_skill_detail==1&corner==0&track_id==10009&distance_type==3@is_activate_other_skill_detail==1&corner==0&track_id==10009&distance_type==4", effects: [{ modifier: 2500, type: 22 }], precondition: "" }], rarity: 1 }, "901201": { alternatives: [{ baseDuration: 24e3, condition: "furlong==3&order_rate<=50", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "901211": { alternatives: [{ baseDuration: 3e4, condition: "is_lastspurt==1&phase==3&order_rate>=40&order_rate<=80&distance_type==1@is_lastspurt==1&phase==3&order_rate>=40&order_rate<=80&distance_type==2", effects: [{ modifier: 2500, type: 27 }], precondition: "is_finalcorner==1&corner!=0&change_order_onetime<0" }, { baseDuration: 3e4, condition: "is_lastspurt==1&phase==3", effects: [{ modifier: 1500, type: 27 }], precondition: "is_finalcorner==1&corner!=0&change_order_onetime<0" }], rarity: 1 }, "901241": { alternatives: [{ baseDuration: 3e4, condition: "phase_laterhalf_random==1&order_rate<=50", effects: [{ modifier: 500, type: 27 }], precondition: "" }], rarity: 1 }, "901311": { alternatives: [{ baseDuration: 18e3, condition: "distance_rate>=50&distance_rate<=51&order_rate>=40", effects: [{ modifier: 1500, type: 22 }], precondition: "" }, { baseDuration: 18e3, condition: "distance_type==1&is_activate_other_skill_detail==1&phase==3&is_lastspurt==1@distance_type==2&is_activate_other_skill_detail==1&phase==3&is_lastspurt==1", effects: [{ modifier: 2500, type: 22 }], precondition: "" }], rarity: 1 }, "910011": { alternatives: [{ baseDuration: 3e4, condition: "phase==1&order>=2&order_rate<=80&activate_count_middle>=2", effects: [{ modifier: 150, type: 9 }, { modifier: 500, type: 27 }], precondition: "" }], rarity: 1 }, "910021": { alternatives: [{ baseDuration: 3e4, condition: "distance_rate>=66&distance_rate<=68&corner==3&order==1", effects: [{ modifier: 2500, type: 22 }], precondition: "phase==1&bashin_diff_behind>=3&order==1" }, { baseDuration: 3e4, condition: "distance_rate>=66&distance_rate<=68&order==1", effects: [{ modifier: 500, type: 22 }], precondition: "" }], rarity: 1 }, "910031": { alternatives: [{ baseDuration: 3e4, condition: "is_last_straight==1", effects: [{ modifier: 2500, type: 27 }], precondition: "is_finalcorner==1&is_overtake==1&order<=5&order_rate<=50&overtake_target_no_order_up_time>=2" }], rarity: 1 }, "910041": { alternatives: [{ baseDuration: 3e4, condition: "distance_rate>=50&activate_count_heal>=1&order<=3", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "910051": { alternatives: [{ baseDuration: 24e3, condition: "is_finalcorner==1&change_order_onetime<0&order_rate<=40", effects: [{ modifier: 2500, type: 27 }], precondition: "" }], rarity: 1 }, "910061": { alternatives: [{ baseDuration: 3e4, condition: "activate_count_heal>=3&distance_rate>=50", effects: [{ modifier: 500, type: 27 }, { modifier: 1e3, type: 31 }, { modifier: 50, type: 9 }], precondition: "" }], rarity: 1 }, "910071": { alternatives: [{ baseDuration: 3e4, condition: "distance_rate_after_random==50", effects: [{ modifier: 350, type: 27 }, { modifier: 1e4, type: 37 }], precondition: "" }], rarity: 1 }, "910081": { alternatives: [{ baseDuration: 3e4, condition: "slope==0@slope==1", effects: [{ modifier: 1500, type: 27 }, { modifier: 500, type: 31 }], precondition: "phase>=1&slope==2&order_rate>=50&order_rate<=80&track_id==10006" }, { baseDuration: 24e3, condition: "slope==0@slope==1", effects: [{ modifier: 1500, type: 27 }], precondition: "phase>=1&slope==2&order_rate>=50&order_rate<=80" }], rarity: 1 }, "910091": { alternatives: [{ baseDuration: 36e3, condition: "distance_rate>=50&corner==0&order==1&bashin_diff_behind<=1", effects: [{ modifier: 1500, type: 27 }], precondition: "" }, { baseDuration: 36e3, condition: "distance_rate>=50&corner==0&order<=2", effects: [{ modifier: 500, type: 27 }], precondition: "" }], rarity: 1 }, "910101": { alternatives: [{ baseDuration: 3e4, condition: "distance_diff_top<=5&order>=2&order_rate<=40&remain_distance<=201&remain_distance>=199", effects: [{ modifier: 1500, type: 27 }, { modifier: 350, type: 22 }], precondition: "" }, { baseDuration: 3e4, condition: "order>=2&order_rate<=40&remain_distance<=201&remain_distance>=199", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "910111": { alternatives: [{ baseDuration: 0, condition: "phase==1&change_order_onetime>0&order_rate>=40", effects: [{ modifier: 350, type: 9 }], precondition: "" }], rarity: 1 }, "910121": { alternatives: [{ baseDuration: 24e3, condition: "distance_rate>=60&phase==1&slope==2&order_rate>=50", effects: [{ modifier: 1500, type: 27 }, { modifier: 500, type: 31 }], precondition: "change_order_up_middle>=3" }], rarity: 1 }, "910131": { alternatives: [{ baseDuration: 36e3, condition: "phase>=2&is_finalcorner==1&order<=4&overtake_target_time>=1", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "910141": { alternatives: [{ baseDuration: 24e3, condition: "is_finalcorner==1&corner!=0&is_overtake==1&order>=4&order_rate<=75", effects: [{ modifier: 2e3, type: 31 }], precondition: "" }], rarity: 1 }, "910151": { alternatives: [{ baseDuration: 3e4, condition: "remain_distance<=401&remain_distance>=399&order_rate<=40&activate_count_all>=7", effects: [{ modifier: 2500, type: 27 }], precondition: "" }, { baseDuration: 3e4, condition: "remain_distance<=401&remain_distance>=399&order_rate<=40&activate_count_all<=6", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "910161": { alternatives: [{ baseDuration: 3e4, condition: "phase>=2&is_finalcorner_laterhalf==1&order_rate<=40", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "910171": { alternatives: [{ baseDuration: 36e3, condition: "is_finalcorner==1", effects: [{ modifier: 1500, type: 27 }], precondition: "phase>=2&order_rate<=50&overtake_target_time>=2" }], rarity: 1 }, "910181": { alternatives: [{ baseDuration: 3e4, condition: "phase==1&order>=3&order_rate<=50&is_overtake==1", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "910191": { alternatives: [{ baseDuration: 3e4, condition: "near_count>=3&phase==1&corner!=0&order_rate>=40", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "910201": { alternatives: [{ baseDuration: 3e4, condition: "phase>=2&corner==0&order<=2&straight_front_type==2", effects: [{ modifier: 1500, type: 27 }, { modifier: 700, type: 31 }], precondition: "" }, { baseDuration: 3e4, condition: "phase>=2&corner==0&order<=2", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "910211": { alternatives: [{ baseDuration: 36e3, condition: "activate_count_middle>=2", effects: [{ modifier: 500, type: 27 }, { modifier: 250, type: 27 }], precondition: "" }], rarity: 1 }, "910221": { alternatives: [{ baseDuration: 3e4, condition: "remain_distance>=401&phase>=2&is_finalcorner==1&order_rate>=20&order_rate<=40", effects: [{ modifier: 1500, type: 27 }, { modifier: 500, type: 31 }], precondition: "" }, { baseDuration: 3e4, condition: "phase>=2&is_finalcorner==1&order_rate>=20&order_rate<=40", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "910231": { alternatives: [{ baseDuration: 3e4, condition: "order_rate_in50_continue==1&phase==1&distance_rate>=50&order>=2&order_rate<=40", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "910241": { alternatives: [{ baseDuration: 3e4, condition: "is_finalcorner==1&order_rate<=40&change_order_onetime<0", effects: [{ modifier: 1500, type: 27 }], precondition: "" }, { baseDuration: 24e3, condition: "is_finalcorner==1&order_rate>=50&order_rate<=80&change_order_onetime<0", effects: [{ modifier: 2e3, type: 31 }], precondition: "" }], rarity: 1 }, "910251": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==4&phase>=2&is_finalcorner==1", effects: [{ modifier: 1500, type: 22 }], precondition: "distance_rate>=50&order_rate_out40_continue==1" }, { baseDuration: 3e4, condition: "phase>=2&is_finalcorner==1", effects: [{ modifier: 500, type: 22 }], precondition: "distance_rate>=50&order_rate_out40_continue==1" }], rarity: 1 }, "910261": { alternatives: [{ baseDuration: 3e4, condition: "order<=4&phase==1&corner!=0&bashin_diff_behind<=3", effects: [{ modifier: 1500, type: 27 }, { modifier: 35, type: 9 }], precondition: "" }], rarity: 1 }, "910271": { alternatives: [{ baseDuration: 24e3, condition: "distance_rate>=60&slope==2&phase==1&order>=2&distance_diff_top<=10&distance_type==3", effects: [{ modifier: 1500, type: 27 }, { modifier: 500, type: 31 }], precondition: "" }, { baseDuration: 24e3, condition: "distance_rate>=60&slope==2&phase==1&order>=2&distance_diff_top<=10&distance_type!=3", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "910291": { alternatives: [{ baseDuration: 24e3, condition: "distance_rate>=45&distance_rate<=55&order_rate>=20&order_rate<=50&is_overtake==1&distance_type==2", effects: [{ modifier: 2500, type: 27 }], precondition: "" }, { baseDuration: 24e3, condition: "distance_rate>=45&distance_rate<=55&order_rate>=20&order_rate<=50&is_overtake==1", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "910301": { alternatives: [{ baseDuration: 3e4, condition: "phase==1&order>=2&order_rate<=50", effects: [{ modifier: 150, type: 9 }, { modifier: -25, type: 9 }, { modifier: 500, type: 27 }], precondition: "" }], rarity: 1 }, "910311": { alternatives: [{ baseDuration: 36e3, condition: "phase_firsthalf_random==1&order_rate<=30", effects: [{ modifier: 500, type: 27 }, { modifier: 50, type: 9 }], precondition: "" }], rarity: 1 }, "910321": { alternatives: [{ baseDuration: 24e3, condition: "distance_rate>=50&corner!=0&order_rate>=20&order_rate<=50&track_id==10005", effects: [{ modifier: 2500, type: 27 }, { modifier: 250, type: 31 }], precondition: "" }, { baseDuration: 24e3, condition: "distance_rate>=50&corner!=0&order_rate>=20&order_rate<=50", effects: [{ modifier: 2500, type: 27 }], precondition: "" }], rarity: 1 }, "910331": { alternatives: [{ baseDuration: 24e3, condition: "running_style==4&is_finalcorner==1&order_rate>=40", effects: [{ modifier: 2e3, type: 31 }], precondition: "" }], rarity: 1 }, "910341": { alternatives: [{ baseDuration: 3e4, condition: "is_last_straight_onetime==1", effects: [{ modifier: 1500, type: 27 }], precondition: "phase>=2&corner!=0&order_rate>=60&is_overtake==1" }], rarity: 1 }, "910351": { alternatives: [{ baseDuration: 36e3, condition: "is_lastspurt==1&is_last_straight==1&order_rate>=40", effects: [{ modifier: 500, type: 27 }, { modifier: 500, type: 27 }], precondition: "" }], rarity: 1 }, "910361": { alternatives: [{ baseDuration: 3e4, condition: "phase>=2&is_finalcorner_laterhalf==1&is_overtake==1@phase>=2&is_finalcorner==1&corner==0&is_overtake==1", effects: [{ modifier: 2500, type: 27 }], precondition: "phase==1&change_order_onetime>0&order_rate>=50&order_rate<=80" }, { baseDuration: 3e4, condition: "phase>=2&is_finalcorner_laterhalf==1&is_overtake==1@phase>=2&is_finalcorner==1&corner==0&is_overtake==1", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "910371": { alternatives: [{ baseDuration: 36e3, condition: "change_order_up_finalcorner_after>=2&is_last_straight==1", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "910381": { alternatives: [{ baseDuration: 3e4, condition: "remain_distance<=350&order_rate<=40&order_rate>=20&bashin_diff_behind<=1", effects: [{ modifier: 500, type: 27 }, { modifier: 1e3, type: 31 }], precondition: "" }], rarity: 1 }, "910391": { alternatives: [{ baseDuration: 3e4, condition: "slope==0@slope==2", effects: [{ modifier: 1500, type: 27 }], precondition: "phase>=1&slope==1&order_rate>=40&order_rate<=80" }], rarity: 1 }, "910401": { alternatives: [{ baseDuration: 3e4, condition: "is_finalcorner==1&corner!=0&order_rate>=30&order_rate<=70&blocked_side_continuetime>=2", effects: [{ modifier: 500, type: 27 }, { modifier: 1e3, type: 31 }], precondition: "" }], rarity: 1 }, "910411": { alternatives: [{ baseDuration: 6e3, condition: "order<=3&remain_distance<=401&remain_distance>=399", effects: [{ modifier: 500, type: 31 }], precondition: "" }], rarity: 1 }, "910421": { alternatives: [{ baseDuration: 3e4, condition: "distance_rate>=50&order_rate<=50&is_overtake==1", effects: [{ modifier: 500, type: 22 }], precondition: "" }, { baseDuration: 3e4, condition: "is_activate_other_skill_detail==1&is_finalcorner==1&corner!=0&change_order_onetime<0&distance_type==1@is_activate_other_skill_detail==1&is_finalcorner==1&corner!=0&change_order_onetime<0&distance_type==2", effects: [{ modifier: 350, type: 27 }], precondition: "" }], rarity: 1 }, "910441": { alternatives: [{ baseDuration: 18e3, condition: "phase>=1&slope==2&order_rate>=50", effects: [{ modifier: 1500, type: 22 }, { modifier: -200, type: 9 }], precondition: "" }], rarity: 1 }, "910451": { alternatives: [{ baseDuration: 3e4, condition: "is_last_straight==1&order<=4&bashin_diff_infront<=1", effects: [{ modifier: 500, type: 27 }, { modifier: 1e3, type: 31 }], precondition: "" }], rarity: 1 }, "910461": { alternatives: [{ baseDuration: 36e3, condition: "distance_rate>=40&distance_rate<=50&distance_diff_rate<=10&ground_type==2", effects: [{ modifier: 500, type: 27 }, { modifier: 50, type: 9 }], precondition: "" }, { baseDuration: 36e3, condition: "distance_rate>=40&distance_rate<=50&distance_diff_rate<=10", effects: [{ modifier: 500, type: 27 }], precondition: "" }], rarity: 1 }, "910471": { alternatives: [{ baseDuration: 3e4, condition: "phase>=2&is_last_straight==1&order_rate<=40&track_id==10005&course_distance==2500@phase>=2&is_last_straight==1&order_rate<=40&track_id==10006&distance_type==3", effects: [{ modifier: 500, type: 27 }, { modifier: 500, type: 22 }], precondition: "" }, { baseDuration: 3e4, condition: "phase>=2&is_last_straight==1&order_rate<=40", effects: [{ modifier: 500, type: 27 }], precondition: "" }], rarity: 1 }, "910481": { alternatives: [{ baseDuration: 36e3, condition: "distance_rate>=40&distance_rate<=50&order_rate>=40&order_rate<=80&motivation==5", effects: [{ modifier: 1e3, type: 27 }], precondition: "" }, { baseDuration: 36e3, condition: "distance_rate>=40&distance_rate<=50&order_rate>=40&order_rate<=80", effects: [{ modifier: 500, type: 27 }], precondition: "" }], rarity: 1 }, "910501": { alternatives: [{ baseDuration: 3e4, condition: "phase>=2&is_finalcorner_laterhalf==1&order_rate<=75&order_rate>=40", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "910511": { alternatives: [{ baseDuration: 3e4, condition: "order>=2&order_rate<=70&remain_distance<=201&remain_distance>=199&near_count>=3", effects: [{ modifier: 1500, type: 27 }, { modifier: 350, type: 22 }], precondition: "" }, { baseDuration: 3e4, condition: "order>=2&order_rate<=70&remain_distance<=201&remain_distance>=199", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "910521": { alternatives: [{ baseDuration: 3e4, condition: "is_finalcorner==1&corner!=0&distance_diff_top>=7", effects: [{ modifier: 500, type: 27 }], precondition: "" }], rarity: 1 }, "910531": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==1&remain_distance<=201&remain_distance>=199&order_rate>=20&order_rate<=50&change_order_up_end_after>=1", effects: [{ modifier: 2500, type: 27 }], precondition: "" }, { baseDuration: 3e4, condition: "remain_distance<=201&remain_distance>=199&order_rate>=20&order_rate<=50", effects: [{ modifier: 500, type: 27 }], precondition: "" }], rarity: 1 }, "910561": { alternatives: [{ baseDuration: 3e4, condition: "distance_rate>=50&order_rate>=40&overtake_target_time>=2", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "910571": { alternatives: [{ baseDuration: 3e4, condition: "distance_rate>=50&order_rate>=50", effects: [{ modifier: 350, type: 27 }], precondition: "" }], rarity: 1 }, "910581": { alternatives: [{ baseDuration: 3e4, condition: "is_last_straight_onetime==1&order_rate<=40", effects: [{ modifier: 1500, type: 27 }, { modifier: -250, type: 21 }, { modifier: -250, type: 21 }], precondition: "" }], rarity: 1 }, "910591": { alternatives: [{ baseDuration: 3e4, condition: "distance_rate>=60&slope==2&phase==1&order_rate>=40&order_rate<=80&remain_distance>=500", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "910601": { alternatives: [{ baseDuration: 36e3, condition: "is_last_straight==1&order_rate>=40&order_rate<=70&popularity>=4", effects: [{ modifier: 1500, type: 27 }], precondition: "is_finalcorner==1&change_order_onetime<0" }, { baseDuration: 3e4, condition: "is_last_straight==1&order_rate>=40&order_rate<=70&popularity<4", effects: [{ modifier: 1500, type: 27 }], precondition: "is_finalcorner==1&change_order_onetime<0" }], rarity: 1 }, "910611": { alternatives: [{ baseDuration: 24e3, condition: "is_last_straight==1", effects: [{ modifier: 2e3, type: 31 }], precondition: "distance_rate>=50&order_rate_out70_continue==1&temptation_count==0" }], rarity: 1 }, "910621": { alternatives: [{ baseDuration: 12e3, condition: "distance_rate>=50&corner!=0&order_rate>=40&order_rate<=80&distance_type==3", effects: [{ modifier: 500, type: 27 }, { modifier: 500, type: 31 }], precondition: "" }, { baseDuration: 12e3, condition: "distance_rate>=50&corner!=0&order_rate>=40&order_rate<=80", effects: [{ modifier: 500, type: 27 }], precondition: "" }], rarity: 1 }, "910641": { alternatives: [{ baseDuration: 42e3, condition: "distance_rate>=40&corner==0&order==1", effects: [{ modifier: 500, type: 27 }], precondition: "" }], rarity: 1 }, "910651": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==2&blocked_side_continuetime>=2&order_rate<=50&phase==0&accumulatetime>=5", effects: [{ modifier: 2500, type: 27 }, { modifier: -300, type: 9 }], precondition: "" }, { baseDuration: 3e4, condition: "blocked_side_continuetime>=2&order_rate<=50&phase==0&accumulatetime>=5", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "910671": { alternatives: [{ baseDuration: 3e4, condition: "distance_rate>=40&distance_rate<=50&order_rate>=40&order_rate<=80", effects: [{ modifier: 1500, type: 27 }, { modifier: 50, type: 9 }], precondition: "" }], rarity: 1 }, "910681": { alternatives: [{ baseDuration: 24e3, condition: "phase>=2&corner!=0&remain_distance>=600&order<=3", effects: [{ modifier: 1500, type: 22 }, { modifier: 500, type: 31 }], precondition: "" }], rarity: 1 }, "910691": { alternatives: [{ baseDuration: 3e4, condition: "remain_distance<=651&remain_distance>=649&order_rate<=40&order_rate>=30", effects: [{ modifier: 2e3, type: 31 }], precondition: "phase==1&blocked_side_continuetime>=2" }], rarity: 1 }, "910711": { alternatives: [{ baseDuration: 3e4, condition: "phase>=2&is_last_straight==1&order_rate>=20&order_rate<=40&bashin_diff_behind<=1", effects: [{ modifier: 1500, type: 27 }, { modifier: 350, type: 22 }, { modifier: -300, type: 9 }], precondition: "" }], rarity: 1 }, "910721": { alternatives: [{ baseDuration: 3e4, condition: "distance_rate_after_random==50", effects: [{ modifier: 1500, type: 27 }], precondition: "distance_rate>=40&distance_rate<=50&blocked_side_continuetime>=2" }], rarity: 1 }, "910741": { alternatives: [{ baseDuration: 12e3, condition: "phase==1&order_rate>=40&order_rate<=80", effects: [{ modifier: 350, type: 9 }, { modifier: -1500, type: 21 }], precondition: "" }, { baseDuration: 48e3, condition: "is_activate_other_skill_detail==1&base_stamina>=1200&phase>=2", effects: [{ modifier: 350, type: 22 }], precondition: "" }], rarity: 1 }, "910771": { alternatives: [{ baseDuration: 3e4, condition: "distance_rate>=45&order_rate>=20&order_rate<=50&remain_distance>=1000", effects: [{ modifier: 2500, type: 27 }], precondition: "phase_firsthalf==1&is_activate_heal_skill==1" }, { baseDuration: 3e4, condition: "distance_rate>=45&order_rate>=20&order_rate<=50", effects: [{ modifier: 500, type: 27 }], precondition: "phase_firsthalf==1&is_activate_heal_skill==1" }], rarity: 1 }, "910781": { alternatives: [{ baseDuration: 24e3, condition: "distance_type==2&remain_distance<=351&remain_distance>=349&order_rate<=50", effects: [{ modifier: 1500, type: 22 }, { modifier: 350, type: 27 }], precondition: "" }, { baseDuration: 24e3, condition: "remain_distance<=351&remain_distance>=349&order_rate<=50", effects: [{ modifier: 1500, type: 22 }], precondition: "" }], rarity: 1 }, "910831": { alternatives: [{ baseDuration: 3e4, condition: "is_last_straight==1", effects: [{ modifier: 1500, type: 27 }], precondition: "distance_rate>=50&distance_rate<=51&order_rate>=40&order_rate<=80" }], rarity: 1 }, "910851": { alternatives: [{ baseDuration: 36e3, condition: "distance_rate<=50&distance_rate>=45&order_rate<=90&order_rate>=40&distance_type==2", effects: [{ modifier: 1500, type: 27 }], precondition: "" }, { baseDuration: 3e4, condition: "distance_rate<=50&distance_rate>=45&order_rate<=90&order_rate>=40", effects: [{ modifier: 500, type: 27 }], precondition: "" }], rarity: 1 }, "910871": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==1&distance_rate<=50&distance_rate>=45&order_rate<=30&base_wiz>=1200", effects: [{ modifier: 2500, type: 27 }], precondition: "" }, { baseDuration: 3e4, condition: "distance_type==1&distance_rate<=50&distance_rate>=45&order_rate<=30", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "910991": { alternatives: [{ baseDuration: 3e4, condition: "distance_rate>=50&distance_rate<=51&ground_type==2&corner!=3", effects: [{ modifier: 500, type: 27 }, { modifier: 350, type: 27 }], precondition: "" }, { baseDuration: 3e4, condition: "distance_rate>=50&distance_rate<=51", effects: [{ modifier: 500, type: 27 }], precondition: "" }], rarity: 1 }, "911041": { alternatives: [{ baseDuration: 48e3, condition: "distance_type==3&distance_rate>=50&order_rate_in40_continue==1", effects: [{ modifier: 500, type: 27 }], precondition: "" }], rarity: 1 }, "911051": { alternatives: [{ baseDuration: 3e4, condition: "is_last_straight==1&phase>=2&order>=2", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "920011": { alternatives: [{ baseDuration: 3e4, condition: "phase>=2&is_finalcorner==1&corner!=0&is_activate_any_skill==1", effects: [{ modifier: 2500, type: 27 }], precondition: "track_id==10005" }, { baseDuration: 3e4, condition: "phase>=2&is_finalcorner==1&corner!=0&is_activate_any_skill==1", effects: [{ modifier: 500, type: 27 }], precondition: "" }], rarity: 1 }, "920031": { alternatives: [{ baseDuration: 3e4, condition: "phase>=2&is_finalcorner_laterhalf==1&course_distance>=2400&course_distance<=2500@phase>=2&is_finalcorner==1&corner==0&course_distance>=2400&course_distance<=2500", effects: [{ modifier: 1500, type: 27 }, { modifier: 350, type: 22 }], precondition: "distance_rate>=50&order_rate<=50&overtake_target_time>=2" }, { baseDuration: 3e4, condition: "phase>=2&is_finalcorner_laterhalf==1@phase>=2&is_finalcorner==1&corner==0", effects: [{ modifier: 1500, type: 27 }], precondition: "distance_rate>=50&order_rate<=50&overtake_target_time>=2" }], rarity: 1 }, "920041": { alternatives: [{ baseDuration: 24e3, condition: "phase_firsthalf==1&is_overtake==1&order_rate<=30&distance_type==2@phase_firsthalf==1&overtake_target_time>=1&order_rate<=30&distance_type==2", effects: [{ modifier: 2500, type: 22 }], precondition: "" }, { baseDuration: 24e3, condition: "phase_firsthalf==1&is_overtake==1&order_rate<=30@phase_firsthalf==1&overtake_target_time>=1&order_rate<=30", effects: [{ modifier: 500, type: 22 }], precondition: "" }], rarity: 1 }, "920071": { alternatives: [{ baseDuration: 3e4, condition: "distance_type==3&is_finalcorner==1&is_overtake==1&order_rate>=50&is_badstart==1@distance_type==4&is_finalcorner==1&is_overtake==1&order_rate>=50&is_badstart==1", effects: [{ modifier: 2500, type: 27 }], precondition: "" }, { baseDuration: 3e4, condition: "distance_type==3&is_finalcorner==1&is_overtake==1&order_rate>=50@distance_type==4&is_finalcorner==1&is_overtake==1&order_rate>=50", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "920111": { alternatives: [{ baseDuration: 3e4, condition: "remain_distance<=401&remain_distance>=399&is_basis_distance==0", effects: [{ modifier: 2500, type: 27 }], precondition: "distance_rate>=50&order_rate<=70&order_rate>=30&overtake_target_time>=1@distance_rate>=50&order_rate<=70&order_rate>=30&is_overtake==1" }, { baseDuration: 3e4, condition: "remain_distance<=401&remain_distance>=399", effects: [{ modifier: 1500, type: 27 }], precondition: "distance_rate>=50&order_rate<=70&order_rate>=30&overtake_target_time>=1@distance_rate>=50&order_rate<=70&order_rate>=30&is_overtake==1" }], rarity: 1 }, "920131": { alternatives: [{ baseDuration: 3e4, condition: "distance_rate>=50&order_rate<=40", effects: [{ modifier: 350, type: 27 }], precondition: "" }], rarity: 1 }, "920231": { alternatives: [{ baseDuration: 3e4, condition: "distance_rate>=50&distance_rate<=51&order_rate<=50", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "920241": { alternatives: [{ baseDuration: 36e3, condition: "phase>=1&order==1@phase>=1&order<=3&is_overtake==1", effects: [{ modifier: 350, type: 9 }, { modifier: 500, type: 22 }], precondition: "" }], rarity: 1 }, "920301": { alternatives: [{ baseDuration: 3e4, condition: "order_rate<=40&phase>=2&corner!=0&is_finalcorner==1", effects: [{ modifier: 1500, type: 27 }], precondition: "" }], rarity: 1 }, "920321": { alternatives: [{ baseDuration: 24e3, condition: "phase>=2&is_finalcorner==1&order_rate<=50&distance_type==3", effects: [{ modifier: 2500, type: 22 }], precondition: "" }, { baseDuration: 24e3, condition: "phase>=2&is_finalcorner==1&order_rate<=50", effects: [{ modifier: 2500, type: 27 }], precondition: "" }], rarity: 1 }, "920351": { alternatives: [{ baseDuration: 36e3, condition: "corner==3&course_distance==2400&popularity<=3", effects: [{ modifier: 1500, type: 27 }], precondition: "phase==1&change_order_onetime<0&order_rate>=40&order_rate<=80" }, { baseDuration: 24e3, condition: "corner==3", effects: [{ modifier: 1500, type: 27 }], precondition: "phase==1&change_order_onetime<0&order_rate>=40&order_rate<=80" }], rarity: 1 }, "920371": { alternatives: [{ baseDuration: 3e4, condition: "is_finalcorner==1&corner!=0&order_rate<=80&order_rate>=40&distance_type==3", effects: [{ modifier: 1500, type: 22 }], precondition: "" }], rarity: 1 }, "920451": { alternatives: [{ baseDuration: 36e3, condition: "phase==1&distance_type==3&corner!=0&order_rate>=20&order_rate<=50@phase==1&distance_type==4&corner!=0&order_rate>=20&order_rate<=50", effects: [{ modifier: 150, type: 9 }, { modifier: 500, type: 27 }], precondition: "" }, { baseDuration: 0, condition: "phase==1&corner!=0&order_rate>=20&order_rate<=50", effects: [{ modifier: 150, type: 9 }], precondition: "" }], rarity: 1 }, "920501": { alternatives: [{ baseDuration: 24e3, condition: "phase>=2&corner!=0&remain_distance>=600&order_rate>=50", effects: [{ modifier: 1500, type: 22 }], precondition: "" }], rarity: 1 }, "920601": { alternatives: [{ baseDuration: 24e3, condition: "phase>=2&is_finalcorner==1&order_rate>=40&distance_type==3", effects: [{ modifier: 2500, type: 22 }], precondition: "" }, { baseDuration: 24e3, condition: "phase>=2&is_finalcorner==1&order_rate>=40", effects: [{ modifier: 2500, type: 27 }], precondition: "" }], rarity: 1 }, "920611": { alternatives: [{ baseDuration: 36e3, condition: "is_lastspurt==1&phase==3", effects: [{ modifier: 1500, type: 27 }], precondition: "remain_distance<=600&order_rate>=40&order_rate<=80&is_behind_in==1&change_order_onetime<0" }], rarity: 1 }, "920671": { alternatives: [{ baseDuration: 3e4, condition: "phase_laterhalf_random==1&order_rate>=40&order_rate<=80&distance_type==3", effects: [{ modifier: 1500, type: 27 }], precondition: "" }, { baseDuration: 3e4, condition: "phase_laterhalf_random==1&order_rate>=40&order_rate<=80&distance_type!=3", effects: [{ modifier: 500, type: 27 }], precondition: "" }], rarity: 1 }, "920681": { alternatives: [{ baseDuration: 18e3, condition: "phase<=1&change_order_onetime>0&accumulatetime>=5&order_rate<=50@phase<=1&blocked_side_continuetime>=2&accumulatetime>=5&order_rate<=50", effects: [{ modifier: 1500, type: 27 }], precondition: "" }, { baseDuration: 36e3, condition: "is_activate_other_skill_detail==1&order<=2&distance_rate>=50&distance_type==4", effects: [{ modifier: 500, type: 27 }], precondition: "" }], rarity: 1 } };

  // ../../skilltool/RaceSolverBuilder.ts
  var GroundSpeedModifier = Object.freeze([
    null,
    // ground types started at 1
    [0, 0, 0, 0, -50],
    [0, 0, 0, 0, -50]
  ].map((o4) => Object.freeze(o4)));
  var GroundPowerModifier = Object.freeze([
    null,
    [0, 0, -50, -50, -50],
    [0, -100, -50, -100, -100]
  ].map((o4) => Object.freeze(o4)));
  var StrategyProficiencyModifier = Object.freeze([1.1, 1, 0.85, 0.75, 0.6, 0.4, 0.2, 0.1]);
  var Asitame;
  ((Asitame2) => {
    Asitame2.StrategyDistanceCoefficient = Object.freeze([
      [],
      // distances are 1-indexed (as are strategies, hence the 0 in the first column for every row)
      [0, 1, 0.7, 0.75, 0.7, 1],
      // short (nige, senkou, sasi, oikomi, oonige)
      [0, 1, 0.8, 0.7, 0.75, 1],
      // mile
      [0, 1, 0.9, 0.875, 0.86, 1],
      // medium
      [0, 1, 0.9, 1, 0.9, 1]
      // long
    ]);
    Asitame2.BaseModifier = 875e-5;
    function calcApproximateModifier(power, strategy, distance) {
      return Asitame2.BaseModifier * Math.sqrt(power - 1200) * Asitame2.StrategyDistanceCoefficient[distance][strategy];
    }
    Asitame2.calcApproximateModifier = calcApproximateModifier;
  })(Asitame || (Asitame = {}));
  function parseStrategy(s3) {
    if (typeof s3 != "string") {
      return s3;
    }
    switch (s3.toUpperCase()) {
      case "NIGE":
        return 1 /* Nige */;
      case "SENKOU":
        return 2 /* Senkou */;
      case "SASI":
      case "SASHI":
        return 3 /* Sasi */;
      case "OIKOMI":
        return 4 /* Oikomi */;
      case "OONIGE":
        return 5 /* Oonige */;
      default:
        throw new Error("Invalid running strategy.");
    }
  }
  function parseAptitude(a4, type2) {
    if (typeof a4 != "string") {
      return a4;
    }
    switch (a4.toUpperCase()) {
      case "S":
        return 0 /* S */;
      case "A":
        return 1 /* A */;
      case "B":
        return 2 /* B */;
      case "C":
        return 3 /* C */;
      case "D":
        return 4 /* D */;
      case "E":
        return 5 /* E */;
      case "F":
        return 6 /* F */;
      case "G":
        return 7 /* G */;
      default:
        throw new Error("Invalid " + type2 + " aptitude.");
    }
  }
  function parseGroundCondition(g3) {
    if (typeof g3 != "string") {
      return g3;
    }
    switch (g3.toUpperCase()) {
      case "GOOD":
        return 1 /* Good */;
      case "YIELDING":
        return 2 /* Yielding */;
      case "SOFT":
        return 3 /* Soft */;
      case "HEAVY":
        return 4 /* Heavy */;
      default:
        throw new Error("Invalid ground condition.");
    }
  }
  function parseWeather(w3) {
    if (typeof w3 != "string") {
      return w3;
    }
    switch (w3.toUpperCase()) {
      case "SUNNY":
        return 1 /* Sunny */;
      case "CLOUDY":
        return 2 /* Cloudy */;
      case "RAINY":
        return 3 /* Rainy */;
      case "SNOWY":
        return 4 /* Snowy */;
      default:
        throw new Error("Invalid weather.");
    }
  }
  function parseSeason(s3) {
    if (typeof s3 != "string") {
      return s3;
    }
    switch (s3.toUpperCase()) {
      case "SPRING":
        return 1 /* Spring */;
      case "SUMMER":
        return 2 /* Summer */;
      case "AUTUMN":
        return 3 /* Autumn */;
      case "WINTER":
        return 4 /* Winter */;
      case "SAKURA":
        return 5 /* Sakura */;
      default:
        throw new Error("Invalid season.");
    }
  }
  function parseTime(t3) {
    if (typeof t3 != "string") {
      return t3;
    }
    switch (t3.toUpperCase()) {
      case "NONE":
      case "NOTIME":
        return 0 /* NoTime */;
      case "MORNING":
        return 1 /* Morning */;
      case "MIDDAY":
        return 2 /* Midday */;
      case "EVENING":
        return 3 /* Evening */;
      case "NIGHT":
        return 4 /* Night */;
      default:
        throw new Error("Invalid race time.");
    }
  }
  function parseGrade(g3) {
    if (typeof g3 != "string") {
      return g3;
    }
    switch (g3.toUpperCase()) {
      case "G1":
        return 100 /* G1 */;
      case "G2":
        return 200 /* G2 */;
      case "G3":
        return 300 /* G3 */;
      case "OP":
        return 400 /* OP */;
      case "PRE-OP":
      case "PREOP":
        return 700 /* PreOP */;
      case "MAIDEN":
        return 800 /* Maiden */;
      case "DEBUT":
        return 900 /* Debut */;
      case "DAILY":
        return 999 /* Daily */;
      default:
        throw new Error("Invalid race grade.");
    }
  }
  function adjustOvercap(stat) {
    return stat > 1200 ? 1200 + Math.floor((stat - 1200) / 2) : stat;
  }
  function buildBaseStats(horseDesc, mood) {
    const motivCoef = 1 + 0.02 * mood;
    return Object.freeze({
      speed: adjustOvercap(horseDesc.speed) * motivCoef,
      stamina: adjustOvercap(horseDesc.stamina) * motivCoef,
      power: adjustOvercap(horseDesc.power) * motivCoef,
      guts: adjustOvercap(horseDesc.guts) * motivCoef,
      wisdom: adjustOvercap(horseDesc.wisdom) * motivCoef,
      strategy: parseStrategy(horseDesc.strategy),
      distanceAptitude: parseAptitude(horseDesc.distanceAptitude, "distance"),
      surfaceAptitude: parseAptitude(horseDesc.surfaceAptitude, "surface"),
      strategyAptitude: parseAptitude(horseDesc.strategyAptitude, "strategy"),
      rawStamina: horseDesc.stamina * motivCoef
    });
  }
  function buildAdjustedStats(baseStats, course, ground) {
    const raceCourseModifier = CourseHelpers.courseSpeedModifier(course, baseStats);
    return Object.freeze({
      speed: Math.max(baseStats.speed * raceCourseModifier + GroundSpeedModifier[course.surface][ground], 1),
      stamina: baseStats.stamina,
      power: Math.max(baseStats.power + GroundPowerModifier[course.surface][ground], 1),
      guts: baseStats.guts,
      wisdom: baseStats.wisdom * StrategyProficiencyModifier[baseStats.strategyAptitude],
      strategy: baseStats.strategy,
      distanceAptitude: baseStats.distanceAptitude,
      surfaceAptitude: baseStats.surfaceAptitude,
      strategyAptitude: baseStats.strategyAptitude,
      rawStamina: baseStats.rawStamina
    });
  }
  function buildSkillEffects(skill) {
    return skill.effects.reduce((acc, ef) => {
      if (SkillType.hasOwnProperty(ef.type) && ef.modifier > 0) {
        acc.push({ type: ef.type, baseDuration: skill.baseDuration / 1e4, modifier: ef.modifier / 1e4 });
      }
      return acc;
    }, []);
  }
  function buildSkillData(horse, raceParams, course, wholeCourse, parser, skillId, ignoreNullEffects = false) {
    if (!(skillId in skill_data_default)) {
      throw new Error("bad skill ID " + skillId);
    }
    const extra = Object.assign({ skillId }, raceParams);
    const alternatives = skill_data_default[skillId].alternatives;
    for (let i4 = 0; i4 < alternatives.length; ++i4) {
      const skill = alternatives[i4];
      let full = new RegionList();
      wholeCourse.forEach((r3) => full.push(r3));
      if (skill.precondition) {
        const pre = parser.parse(parser.tokenize(skill.precondition));
        const preRegions = pre.apply(wholeCourse, course, horse, extra)[0];
        if (preRegions.length == 0) {
          continue;
        } else {
          const bounds = new Region(preRegions[0].start, wholeCourse[wholeCourse.length - 1].end);
          full = full.rmap((r3) => r3.intersect(bounds));
        }
      }
      const op = parser.parse(parser.tokenize(skill.condition));
      const [regions, extraCondition] = op.apply(full, course, horse, extra);
      if (regions.length == 0) {
        continue;
      }
      const effects2 = buildSkillEffects(skill);
      if (effects2.length > 0 || ignoreNullEffects) {
        const rarity = skill_data_default[skillId].rarity;
        return {
          skillId,
          // for some reason 1*/2* uniques, 1*/2* upgraded to 3*, and naturally 3* uniques all have different rarity (3, 4, 5 respectively)
          rarity: rarity >= 3 && rarity <= 5 ? 3 : rarity,
          samplePolicy: op.samplePolicy,
          regions,
          extraCondition,
          effects: effects2
        };
      } else {
        return null;
      }
    }
    const effects = buildSkillEffects(alternatives[0]);
    if (effects.length == 0 && !ignoreNullEffects) {
      return null;
    } else {
      const afterEnd = new RegionList();
      afterEnd.push(new Region(9999, 9999));
      return {
        skillId,
        rarity: Math.min(skill_data_default[skillId].rarity, 3),
        samplePolicy: ImmediatePolicy,
        regions: afterEnd,
        extraCondition: (_2) => false,
        effects
      };
    }
  }
  var conditionsWithActivateCountsAsRandom = Object.freeze(Object.assign({}, Conditions, {
    activate_count_all: random({
      filterGte(regions, n3, course, _1, extra) {
        if (n3 == 7) {
          const rl = new RegionList();
          regions.forEach((r3) => rl.push(new Region(r3.start, r3.start + 11)));
          return rl;
        }
        const bounds = new Region(Math.min(n3 / 23 - 0.2, 0.6) * course.distance, Math.min(n3 / 23 + 0.2, 1) * course.distance);
        return regions.rmap((r3) => r3.intersect(bounds));
      }
    }),
    activate_count_end_after: random({
      filterGte(regions, _0, course, _1, extra) {
        const bounds = new Region(CourseHelpers.phaseStart(course.distance, 2), CourseHelpers.phaseEnd(course.distance, 3));
        return regions.rmap((r3) => r3.intersect(bounds));
      }
    }),
    activate_count_heal: noopRandom,
    activate_count_later_half: random({
      filterGte(regions, _0, course, _1, extra) {
        const bounds = new Region(course.distance / 2, course.distance);
        return regions.rmap((r3) => r3.intersect(bounds));
      }
    }),
    activate_count_middle: random({
      filterGte(regions, n3, course, _1, extra) {
        const start2 = CourseHelpers.phaseStart(course.distance, 1), end = CourseHelpers.phaseEnd(course.distance, 1);
        const bounds = new Region(start2, start2 + n3 / 10 * (end - start2));
        return regions.rmap((r3) => r3.intersect(bounds));
      }
    }),
    activate_count_start: immediate({
      // for 地固め
      filterGte(regions, _0, course, _1, extra) {
        const bounds = new Region(CourseHelpers.phaseStart(course.distance, 0), CourseHelpers.phaseEnd(course.distance, 0));
        return regions.rmap((r3) => r3.intersect(bounds));
      }
    })
  }));
  var defaultParser = getParser();
  var acrParser = getParser(conditionsWithActivateCountsAsRandom);
  var RaceSolverBuilder = class _RaceSolverBuilder {
    constructor(nsamples) {
      this.nsamples = nsamples;
      this._course = null;
      this._raceParams = {
        mood: 2,
        groundCondition: 1 /* Good */,
        weather: 1 /* Sunny */,
        season: 1 /* Spring */,
        time: 2 /* Midday */,
        grade: 100 /* G1 */,
        popularity: 1
      };
      this._horse = null;
      this._pacer = null;
      this._pacerSkills = [];
      this._rng = new Rule30CARng(Math.floor(Math.random() * (-1 >>> 0)) >>> 0);
      this._parser = defaultParser;
      this._skills = [];
      this._extraSkillHooks = [];
    }
    seed(seed) {
      this._rng = new Rule30CARng(seed);
      return this;
    }
    course(course) {
      if (typeof course == "number") {
        this._course = CourseHelpers.getCourse(course);
      } else {
        this._course = course;
      }
      return this;
    }
    mood(mood) {
      this._raceParams.mood = mood;
      return this;
    }
    ground(ground) {
      this._raceParams.groundCondition = parseGroundCondition(ground);
      return this;
    }
    weather(weather) {
      this._raceParams.weather = parseWeather(weather);
      return this;
    }
    season(season) {
      this._raceParams.season = parseSeason(season);
      return this;
    }
    time(time) {
      this._raceParams.time = parseTime(time);
      return this;
    }
    grade(grade) {
      this._raceParams.grade = parseGrade(grade);
      return this;
    }
    popularity(popularity) {
      this._raceParams.popularity = popularity;
      return this;
    }
    horse(horse) {
      this._horse = horse;
      return this;
    }
    pacer(horse) {
      this._pacer = horse;
      return this;
    }
    _isNige() {
      if (typeof this._horse.strategy == "string") {
        return this._horse.strategy.toUpperCase() == "NIGE" || this._horse.strategy.toUpperCase() == "OONIGE";
      } else {
        return this._horse.strategy == 1 /* Nige */ || this._horse.strategy == 5 /* Oonige */;
      }
    }
    useDefaultPacer(openingLegAccel = true) {
      if (this._isNige()) {
        return this;
      }
      this._pacer = Object.assign({}, this._horse, { strategy: "Nige" });
      if (openingLegAccel) {
        this._pacerSkills = [{
          skillId: "201601",
          rarity: 1 /* White */,
          trigger: new Region(0, 100),
          extraCondition: (_2) => true,
          effects: [{ type: 31 /* Accel */, baseDuration: 3, modifier: 0.2 }]
        }, {
          skillId: "200532",
          rarity: 1 /* White */,
          trigger: new Region(0, 100),
          extraCondition: (_2) => true,
          effects: [{ type: 31 /* Accel */, baseDuration: 1.2, modifier: 0.2 }]
        }];
      }
      return this;
    }
    withActivateCountsAsRandom() {
      this._parser = acrParser;
      return this;
    }
    // NB. must be called after horse and mood are set
    withAsiwotameru() {
      const baseDisplayedPower = this._horse.power * (1 + 0.02 * this._raceParams.mood);
      this._extraSkillHooks.push((skilldata, horse, course) => {
        const power = skilldata.reduce((acc, sd) => {
          const powerUp = sd.effects.find((ef) => ef.type == 3 /* PowerUp */);
          if (powerUp && sd.regions.length > 0 && sd.regions[0].start < 9999) {
            return acc + powerUp.modifier;
          } else {
            return acc;
          }
        }, baseDisplayedPower);
        if (power > 1200) {
          const spurtStart = new RegionList();
          spurtStart.push(new Region(CourseHelpers.phaseStart(course.distance, 2), course.distance));
          skilldata.push({
            skillId: "asitame",
            rarity: 1 /* White */,
            regions: spurtStart,
            samplePolicy: ImmediatePolicy,
            extraCondition: (_2) => true,
            effects: [{
              type: 31 /* Accel */,
              baseDuration: 3 / (course.distance / 1e3),
              modifier: Asitame.calcApproximateModifier(power, horse.strategy, course.distanceType)
            }]
          });
        }
      });
      return this;
    }
    addSkill(skillId) {
      this._skills.push(skillId);
      return this;
    }
    fork() {
      const clone2 = new _RaceSolverBuilder(this.nsamples);
      clone2._course = this._course;
      clone2._raceParams = Object.assign({}, this._raceParams);
      clone2._horse = this._horse;
      clone2._pacer = this._pacer;
      clone2._pacerSkills = this._pacerSkills.slice();
      clone2._rng = new Rule30CARng(this._rng.lo, this._rng.hi);
      clone2._parser = this._parser;
      clone2._skills = this._skills.slice();
      clone2._extraSkillHooks = this._extraSkillHooks.slice();
      return clone2;
    }
    *build() {
      let horse = buildBaseStats(this._horse, this._raceParams.mood);
      const solverRng = new Rule30CARng(this._rng.int32());
      const pacerRng = new Rule30CARng(this._rng.int32());
      const pacerHorse = this._pacer ? buildAdjustedStats(buildBaseStats(this._pacer, this._raceParams.mood), this._course, this._raceParams.groundCondition) : null;
      const wholeCourse = new RegionList();
      wholeCourse.push(new Region(0, this._course.distance));
      Object.freeze(wholeCourse);
      const makeSkill = buildSkillData.bind(null, horse, this._raceParams, this._course, wholeCourse, this._parser);
      const skilldata = this._skills.map(makeSkill).filter((s3) => s3 != null);
      this._extraSkillHooks.forEach((h3) => h3(skilldata, horse, this._course));
      const triggers = skilldata.map((sd) => sd.samplePolicy.sample(sd.regions, this.nsamples, this._rng));
      horse = buildAdjustedStats(horse, this._course, this._raceParams.groundCondition);
      for (let i4 = 0; i4 < this.nsamples; ++i4) {
        const skills = skilldata.map((sd, sdi) => ({
          skillId: sd.skillId,
          rarity: sd.rarity,
          trigger: triggers[sdi][i4 % triggers[sdi].length],
          extraCondition: sd.extraCondition,
          effects: sd.effects
        }));
        const pacer = pacerHorse ? new RaceSolver({ horse: pacerHorse, course: this._course, skills: this._pacerSkills, rng: pacerRng }) : null;
        yield new RaceSolver({ horse, course: this._course, skills, pacer, rng: solverRng });
      }
    }
  };

  // ../components/Language.tsx
  var defaultLanguage = localStorage.getItem("language") || (navigator.language.startsWith("ja") ? "ja" : "en-ja");
  var Language = G(defaultLanguage);
  function useLanguage() {
    return q2(Language);
  }

  // ../../skilltool/data/tracknames.json
  var tracknames_default = {
    "10001": ["\u672D\u5E4C", "Sapporo"],
    "10002": ["\u51FD\u9928", "Hakodate"],
    "10003": ["\u65B0\u6F5F", "Niigata"],
    "10004": ["\u798F\u5CF6", "Fukushima"],
    "10005": ["\u4E2D\u5C71", "Nakayama"],
    "10006": ["\u6771\u4EAC", "Tokyo"],
    "10007": ["\u4E2D\u4EAC", "Chuukyo"],
    "10008": ["\u4EAC\u90FD", "Kyoto"],
    "10009": ["\u962A\u795E", "Hanshin"],
    "10010": ["\u5C0F\u5009", "Kokura"],
    "10101": ["\u5927\u4E95", "Ooi"],
    "10103": ["\u5DDD\u5D0E", "Kawasaki"],
    "10104": ["\u8239\u6A4B", "Funabashi"],
    "10105": ["\u76DB\u5CA1", "Morioka"],
    "10201": ["\uFF9B\uFF9D\uFF7C\uFF6C\uFF9D", "Longchamp"]
  };

  // ../strings/common.ts
  var TRACKNAMES_ja = {};
  Object.keys(tracknames_default).forEach((k3) => TRACKNAMES_ja[k3] = tracknames_default[k3][0]);
  Object.freeze(TRACKNAMES_ja);
  var TRACKNAMES_en = {};
  Object.keys(tracknames_default).forEach((k3) => TRACKNAMES_en[k3] = tracknames_default[k3][1]);
  Object.freeze(TRACKNAMES_en);

  // ../components/RaceTrack.tsx
  var STRINGS_ja = Object.freeze({
    "racetrack": Object.freeze({
      "none": "\u200B",
      "inner": " \uFF08\u5185\uFF09",
      "outer": " \uFF08\u5916\uFF09",
      "outin": " \uFF08\u5916\u2192\u5185\uFF09",
      "orientation": Object.freeze(["", "\u53F3", "\u5DE6", "", "\u76F4"]),
      "turf": "\u829D",
      "dirt": "\u30C0\u30FC\u30C8",
      "straight": "\u76F4\u7DDA",
      "corner": "\u30B3\u30FC\u30CA\u30FC{{n}}",
      "uphill": "\u4E0A\u308A\u5742",
      "downhill": "\u4E0B\u308A\u5742",
      "phase0": "\u5E8F\u76E4",
      "phase1": "\u4E2D\u76E4",
      "phase2": "\u7D42\u76E4",
      "phase3": "\u30E9\u30B9\u30C8\u30B9\u30D1\u30FC\u30C8",
      "short": Object.freeze({
        "straight": "\u76F4",
        "corner": "\u30B3{{n}}",
        "uphill": "\u4E0A",
        "downhill": "\u4E0B"
      })
    }),
    "tracknames": TRACKNAMES_ja,
    "coursedesc": "{{surface}}{{distance}}m{{inout}}"
  });
  var STRINGS_en = Object.freeze({
    "racetrack": Object.freeze({
      "none": "\u200B",
      "inner": " (inner)",
      "outer": " (outer)",
      "outin": " (outer\u2192inner)",
      "orientation": Object.freeze(["", "(clockwise)", "(counterclockwise)", "", "(straight)"]),
      "turf": "Turf",
      "dirt": "Dirt",
      "straight": "Straight \u2192",
      "corner": "Corner \u2B8C{{n}}",
      "uphill": "Uphill \u2197",
      "downhill": "Downhill \u2198",
      "phase0": "Opening leg",
      "phase1": "Middle leg",
      "phase2": "Final leg",
      "phase3": "Last spurt",
      "short": Object.freeze({
        "straight": "\u2192",
        "corner": "\u2B8C{{n}}",
        "uphill": "\u2197",
        "downhill": "\u2198"
      })
    }),
    "tracknames": TRACKNAMES_en,
    "coursedesc": Object.freeze({
      // 1 = turf 2 = dirt
      "one": "{{distance}}m{{inout}}",
      "many": "{{surface}} {{distance}}m{{inout}}"
    })
  });
  var inoutKey = Object.freeze(["", "none", "inner", "outer", "outin"]);
  var coursesByTrack = function() {
    const o4 = /* @__PURE__ */ Object.create(null);
    Object.keys(course_data_default).forEach((cid) => {
      const tid = course_data_default[cid].raceTrackId;
      if (tid in o4) {
        o4[tid].push(+cid);
      } else {
        o4[tid] = [+cid];
      }
    });
    return Object.freeze(o4);
  }();
  function TrackSelect(props) {
    const lang = useLanguage();
    let [trackid, setTrackid] = h2(course_data_default[props.courseid].raceTrackId);
    const changeCourse = T2((e4) => props.setCourseid(+e4.target.value), [props.setCourseid]);
    function changeTrack(e4) {
      const newTrackId = +e4.target.value;
      setTrackid(newTrackId);
      props.setCourseid(coursesByTrack[newTrackId][0]);
    }
    return /* @__PURE__ */ y(IntlProvider, { definition: lang == "ja" ? STRINGS_ja : STRINGS_en }, /* @__PURE__ */ y("div", { class: "trackSelect" }, /* @__PURE__ */ y("select", { value: trackid, onChange: changeTrack, tabindex: props.tabindex }, Object.keys(tracknames_default).map((tid) => /* @__PURE__ */ y("option", { value: tid }, /* @__PURE__ */ y(Text, { id: `tracknames.${tid}` })))), /* @__PURE__ */ y("select", { value: props.courseid, onChange: changeCourse, tabindex: props.tabindex + 1 }, coursesByTrack[trackid].map(
      (cid) => /* @__PURE__ */ y("option", { value: cid }, /* @__PURE__ */ y(Text, { id: "coursedesc", plural: course_data_default[cid].surface, fields: {
        "distance": course_data_default[cid].distance,
        "inout": /* @__PURE__ */ y(Text, { id: `racetrack.${inoutKey[course_data_default[cid].course]}` }),
        "surface": /* @__PURE__ */ y(Text, { id: course_data_default[cid].surface == 1 /* Turf */ ? "racetrack.turf" : "racetrack.dirt" })
      } }))
    ))));
  }
  function DistanceMarker(props) {
    const y3 = props.up ? props.y - 11.5 : props.y;
    return /* @__PURE__ */ y(k, null, /* @__PURE__ */ y("text", { class: "distanceMarker", x: `${props.x}%`, y: `${y3 - (props.up ? -0.8 : 0.8)}%`, "font-size": "10px", "text-anchor": "middle", "dominant-baseline": props.up ? "hanging" : "auto", fill: "rgb(121,64,22)" }, `${props.d}m`), /* @__PURE__ */ y("line", { x1: `${props.x}%`, y1: `${y3}%`, x2: `${props.x}%`, y2: `${y3 + (props.up ? -2.5 : 2.5)}%`, stroke: "rgb(121,64,22)" }));
  }
  function SectionText(props) {
    return /* @__PURE__ */ y("text", { class: "sectionText", x: "50%", y: "50%", height: "40%", width: "100%", fill: "rgb(121,64,22)" }, /* @__PURE__ */ y(Text, { id: `racetrack${props.w < 0.085 ? ".short" : ""}.${props.id}`, fields: props.fields }));
  }
  function RaceTrack(props) {
    const lang = useLanguage();
    const course = CourseHelpers.getCourse(props.courseid);
    const xOffset = props.xOffset || 0, yOffset = props.yOffset || 0, xExtra = props.xExtra || 0, yExtra = props.yExtra || 0;
    function doMouseMove(e4) {
      const svg = e4.currentTarget;
      if (e4.offsetX < xOffset)
        return;
      const line = svg.querySelector(".mouseoverLine");
      const text = svg.querySelector(".mouseoverText");
      const w3 = svg.getBoundingClientRect().width;
      const x3 = e4.offsetX - xOffset;
      const y3 = e4.offsetY - yOffset;
      line.setAttribute("x1", x3);
      line.setAttribute("x2", x3);
      text.setAttribute("x", x3 > w3 - 45 ? x3 - 45 : x3 + 5);
      text.setAttribute("y", y3);
      text.textContent = Math.round(x3 / w3 * course_data_default[svg.dataset.courseid].distance) + "m";
      props.mouseMove && props.mouseMove(x3 / w3);
    }
    function doMouseLeave(e4) {
      const svg = e4.currentTarget;
      const line = svg.querySelector(".mouseoverLine");
      const text = svg.querySelector(".mouseoverText");
      line.setAttribute("x1", -5);
      line.setAttribute("x2", -5);
      text.setAttribute("x", -5);
      text.setAttribute("y", -5);
      props.mouseLeave && props.mouseLeave();
    }
    const trackNameHeader = F2(
      () => /* @__PURE__ */ y("div", { class: "racetrackName" }, /* @__PURE__ */ y(Text, { id: `tracknames.${course.raceTrackId}` }), " ", /* @__PURE__ */ y(Text, { id: "coursedesc", plural: course.surface, fields: {
        "distance": course.distance,
        "inout": /* @__PURE__ */ y(Text, { id: `racetrack.${inoutKey[course_data_default[props.courseid].course]}` }),
        "surface": /* @__PURE__ */ y(Text, { id: course.surface == 1 /* Turf */ ? "racetrack.turf" : "racetrack.dirt" })
      } }), " ", /* @__PURE__ */ y(Text, { id: `racetrack.orientation.${course.turn}` })),
      [props.courseid]
    );
    const almostEverything = F2(function() {
      const flatLevel = 50;
      const [_2, highestPoint, lowestPoint] = course.slopes.reduce((x3, s3) => {
        const [last5, highest, lowest] = x3;
        const us = last5 + s3.slope / 1e4 * s3.length;
        if (us > highest) {
          return [us, us, lowest];
        } else if (us < lowest) {
          return [us, highest, us];
        } else {
          return [us, highest, lowest];
        }
      }, [0, 1, 0]);
      const range = highestPoint - (lowestPoint + highestPoint > -30 ? 0 : lowestPoint);
      const full = course.slopes.slice();
      let lastEnd = 0;
      course.slopes.forEach((s3, i4) => {
        if (s3.start != lastEnd) {
          full.push({ start: lastEnd, length: s3.start - lastEnd, slope: 0 });
        }
        lastEnd = s3.start + s3.length;
      });
      if (lastEnd < course.distance) {
        full.push({ start: lastEnd, length: course.distance - lastEnd, slope: 0 });
      }
      full.sort((a4, b3) => a4.start - b3.start);
      const slopeEndHeights = [50];
      const slopes = full.reduce((elems, s3, i4) => {
        const lastEndHeight = slopeEndHeights[slopeEndHeights.length - 1];
        const thisEndHeight = lastEndHeight - s3.slope / 1e4 * s3.length / range * 40;
        slopeEndHeights.push(thisEndHeight);
        if (s3.slope == 0) {
          elems.push(/* @__PURE__ */ y("rect", { x: `${s3.start / course.distance * 100}%`, y: `${lastEndHeight * 0.262}%`, width: `${s3.length / course.distance * 100}%`, height: "26.2%", fill: "rgb(211,243,68)" }));
        } else {
          elems.push(
            /* @__PURE__ */ y("svg", { class: `hillArea ${s3.slope < 0 ? "downhill" : "uphill"}`, x: `${s3.start / course.distance * 100}%`, y: "0", width: `${s3.length / course.distance * 100}%`, height: "26.2%", viewBox: "0 0 100 100", preserveAspectRatio: "none" }, /* @__PURE__ */ y("polygon", { points: `0,${lastEndHeight} 0,100 100,100 100,${thisEndHeight}`, fill: "rgb(211,243,68)" }))
          );
        }
        return elems;
      }, []);
      const sections = course.straights.concat(course.corners.map((c3) => ({ start: c3.start, end: c3.start + c3.length }))).sort((a4, b3) => a4.start - b3.start);
      const phase1Start = Math.round(CourseHelpers.phaseStart(course.distance, 1)), phase2Start = Math.round(CourseHelpers.phaseStart(course.distance, 2)), phase3Start = Math.round(CourseHelpers.phaseStart(course.distance, 3));
      let upi = 0, downi = 0;
      return /* @__PURE__ */ y(k, null, slopes, /* @__PURE__ */ y("rect", { x: "0", y: "26.2%", width: "100%", height: "1.8%", fill: "rgb(140,170,10)" }), /* @__PURE__ */ y("svg", { class: "sectionsBg", x: "0", y: "28%", width: "100%", height: "18%" }, /* @__PURE__ */ y("rect", { x: "0", y: "0", height: "90%", width: "100%", fill: "rgb(239,229,241)" }), /* @__PURE__ */ y("rect", { x: "0", y: "90%", height: "10%", width: "100%", fill: "rgb(163,106,175)" })), course.slopes.map(
        (s3) => /* @__PURE__ */ y("svg", { class: "slope", x: `${s3.start / course.distance * 100}%`, y: "28%", width: `${s3.length / course.distance * 100}%`, height: "18%" }, /* @__PURE__ */ y("rect", { x: "0", y: "0", height: "90%", width: "100%", fill: s3.slope > 0 ? upi % 2 == 0 ? "rgb(234,207,147)" : "rgb(229,196,120)" : downi % 2 == 0 ? "rgb(82,195,184)" : "rgb(116,206,198)" }), /* @__PURE__ */ y("rect", { x: "0", y: "90%", height: "10%", width: "100%", fill: s3.slope > 0 ? upi++ % 2 == 0 ? "rgb(191,143,37)" : "rgb(175,132,33)" : downi++ % 2 == 0 ? "rgb(42,123,115)" : "rgb(50,142,134)" }), /* @__PURE__ */ y(SectionText, { id: s3.slope > 0 ? "uphill" : "downhill", w: s3.length / course.distance }))
      ), course.slopes.map((s3, i4) => {
        const nodes = [];
        let markedStart = false;
        if (s3.start != 0 && (i4 == 0 || s3.start != course.slopes[i4 - 1].start + course.slopes[i4 - 1].length)) {
          markedStart = true;
          nodes.push(/* @__PURE__ */ y(DistanceMarker, { d: s3.start, x: s3.start / course.distance * 100, y: 42, up: i4 > 0 && s3.start - (course.slopes[i4 - 1].start + course.slopes[i4 - 1].length) < course.distance * 0.05 }));
        }
        if (s3.start + s3.length != course.distance) {
          nodes.push(/* @__PURE__ */ y(DistanceMarker, { d: s3.start + s3.length, x: (s3.start + s3.length) / course.distance * 100, y: 42, up: markedStart && s3.length < course.distance * 0.05 }));
        }
        return /* @__PURE__ */ y(k, null, nodes);
      }), /* @__PURE__ */ y("svg", { class: "sectionsBg", x: "0", y: "46%", width: "100%", height: "18%" }, /* @__PURE__ */ y("rect", { x: "0", y: "0", height: "90%", width: "100%", fill: "rgb(232,232,232)" }), /* @__PURE__ */ y("rect", { x: "0", y: "90%", height: "10%", width: "100%", fill: "rgb(139,139,139)" })), course.straights.map(
        (s3, i4) => /* @__PURE__ */ y("svg", { class: "straight", x: `${s3.start / course.distance * 100}%`, y: "46%", width: `${(s3.end - s3.start) / course.distance * 100}%`, height: "18%" }, /* @__PURE__ */ y("rect", { x: "0", y: "0", height: "90%", width: "100%", fill: i4 % 2 == 0 ? "rgb(209,235,255)" : "rgb(185,224,255)" }), /* @__PURE__ */ y("rect", { x: "0", y: "90%", height: "10%", width: "100%", fill: i4 % 2 == 0 ? "rgb(23,154,255)" : "rgb(9,146,254)" }), /* @__PURE__ */ y(SectionText, { id: "straight", w: (s3.end - s3.start) / course.distance * 100 }))
      ), course.corners.map(
        (c3, i4) => /* @__PURE__ */ y("svg", { class: "corner", x: `${c3.start / course.distance * 100}%`, y: "46%", width: `${c3.length / course.distance * 100}%`, height: "18%" }, /* @__PURE__ */ y("rect", { x: "0", y: "0", height: "90%", width: "100%", fill: i4 % 2 == 0 ? "rgb(255,216,185)" : "rgb(254,228,209)" }), /* @__PURE__ */ y("rect", { x: "0", y: "90%", height: "10%", width: "100%", fill: i4 % 2 == 0 ? "rgb(254,117,9)" : "rgb(250,121,27)" }), /* @__PURE__ */ y(SectionText, { id: "corner", w: c3.length / course.distance, fields: { n: 4 - (course.corners.length - i4 - 1) % 4 } }))
      ), sections.map((s3, i4) => {
        const nodes = [];
        let markedStart = false;
        if (s3.start != 0 && (i4 == 0 || s3.start != sections[i4 - 1].end)) {
          markedStart = true;
          nodes.push(/* @__PURE__ */ y(DistanceMarker, { d: s3.start, x: s3.start / course.distance * 100, y: 60, up: i4 > 0 && s3.start - sections[i4 - 1].end < course.distance * 0.05 }));
        }
        if (s3.end != course.distance) {
          nodes.push(/* @__PURE__ */ y(DistanceMarker, { d: s3.end, x: s3.end / course.distance * 100, y: 60, up: markedStart && s3.length < course.distance * 0.05 }));
        }
        return /* @__PURE__ */ y(k, null, nodes);
      }), /* @__PURE__ */ y("svg", { class: "phase phase0", x: "0", y: "64%", width: "16.67%", height: "18%" }, /* @__PURE__ */ y("rect", { x: "0", y: "0", height: "90%", width: "100%", fill: "rgb(0,154,111)" }), " ", /* @__PURE__ */ y("rect", { x: "0", y: "90%", height: "10%", width: "100%", fill: "rgb(0,92,66)" }), " ", /* @__PURE__ */ y(SectionText, { id: "phase0", w: 0.1667 })), /* @__PURE__ */ y("svg", { class: "phase phase1", x: "16.67%", y: "64%", width: "50%", height: "18%" }, /* @__PURE__ */ y("rect", { x: "0", y: "0", height: "90%", width: "100%", fill: "rgb(242,233,103)" }), " ", /* @__PURE__ */ y("rect", { x: "0", y: "90%", height: "10%", width: "100%", fill: "rgb(190,179,16)" }), " ", /* @__PURE__ */ y(SectionText, { id: "phase1", w: 0.5 })), /* @__PURE__ */ y("svg", { class: "phase phase2", x: "66.67%", y: "64%", width: "16.67%", height: "18%" }, /* @__PURE__ */ y("rect", { x: "0", y: "0", height: "90%", width: "100%", fill: "rgb(209,134,175)" }), " ", /* @__PURE__ */ y("rect", { x: "0", y: "90%", height: "10%", width: "100%", fill: "rgb(149,56,107)" }), " ", /* @__PURE__ */ y(SectionText, { id: "phase2", w: 0.1667 })), /* @__PURE__ */ y("svg", { class: "phase phase3", x: "83.33%", y: "64%", width: "16.67%", height: "18%" }, /* @__PURE__ */ y("rect", { x: "0", y: "0", height: "90%", width: "100%", fill: "rgb(199,109,159)" }), " ", /* @__PURE__ */ y("rect", { x: "0", y: "90%", height: "10%", width: "100%", fill: "rgb(133,51,96)" }), " ", /* @__PURE__ */ y(SectionText, { id: "phase3", w: 0.1667 })), /* @__PURE__ */ y(DistanceMarker, { d: phase1Start, x: "16.67", y: 78 }), /* @__PURE__ */ y(DistanceMarker, { d: phase2Start, x: "66.67", y: 78 }), /* @__PURE__ */ y(DistanceMarker, { d: phase3Start, x: "83.33", y: 78 }), /* @__PURE__ */ y("rect", { x: "0", y: "82%", height: "18%", width: "100%", fill: "rgb(228,235,240)" }), Array.from({ length: 25 }, (_3, i4) => i4).map((i4) => /* @__PURE__ */ y("line", { x1: `${i4 / 24 * 100}%`, y1: "96%", x2: `${i4 / 24 * 100}%`, y2: "100%", stroke: "rgb(107,145,173)", "stroke-width": i4 == 0 || i4 == 24 ? "4" : "2" })), Array.from({ length: 24 }, (_3, i4) => i4 + 1).map((i4) => /* @__PURE__ */ y("text", { x: `${(1 / 48 + (i4 - 1) / 24) * 100}%`, y: "91%", "font-size": "10px", "text-anchor": "middle", "dominant-baseline": "central", fill: "rgb(107,145,173)" }, i4)), /* @__PURE__ */ y("rect", { x: "0", y: "98.2%", height: "1.8%", width: "100%", fill: "rgb(107,145,173)" }));
    }, [props.courseid]);
    return /* @__PURE__ */ y(IntlProvider, { definition: lang == "ja" ? STRINGS_ja : STRINGS_en }, /* @__PURE__ */ y("div", { class: "racetrackWrapper", style: `width:${props.width + xOffset + xExtra}px` }, trackNameHeader, /* @__PURE__ */ y("svg", { version: "1.1", width: props.width + xOffset + xExtra, height: props.height + yOffset + yExtra, xmlns: "http://www.w3.org/2000/svg", class: "racetrackView", "data-courseid": props.courseid, onMouseMove: doMouseMove, onMouseLeave: doMouseLeave }, /* @__PURE__ */ y("svg", { x: props.xOffset, y: props.yOffset, width: props.width, height: props.height }, almostEverything, props.regions && props.regions.reduce((state, desc) => {
      if (desc.type == 0 /* Immediate */ && desc.regions.length > 0) {
        let x3 = desc.regions[0].start / course.distance * 100;
        while (state.seen.has(x3)) {
          x3 += (3 + +(x3 == 0)) / props.width * 100;
        }
        state.seen.add(x3);
        state.elem.push(/* @__PURE__ */ y("line", { x1: `${x3}%`, y1: "0", x2: `${x3}%`, y2: "100%", stroke: desc.color.stroke, "stroke-width": x3 == 0 ? 4 : 2 }));
      } else {
        state.elem.push(
          /* @__PURE__ */ y(k, null, desc.regions.map(
            (r3) => /* @__PURE__ */ y("rect", { x: `${r3.start / course.distance * 100}%`, y: "0", width: `${(r3.end - r3.start) / course.distance * 100}%`, height: "100%", fill: desc.color.fill, stroke: desc.color.stroke })
          ))
        );
      }
      return state;
    }, { seen: /* @__PURE__ */ new Set(), elem: [] }).elem, /* @__PURE__ */ y("line", { class: "mouseoverLine", x1: "-5", y1: "0", x2: "-5", y2: "100%", stroke: "rgb(121,64,22)", "stroke-width": "2" }), /* @__PURE__ */ y("text", { class: "mouseoverText", x: "-5", y: "-5", fill: "rgb(121,64,22)" })), props.children)));
  }

  // ../node_modules/immutable-sorted/dist/immutable.es.js
  var DELETE2 = "delete";
  var SHIFT2 = 5;
  var SIZE2 = 1 << SHIFT2;
  var MASK2 = SIZE2 - 1;
  var NOT_SET2 = {};
  function MakeRef2() {
    return { value: false };
  }
  function SetRef2(ref) {
    if (ref) {
      ref.value = true;
    }
  }
  function GetRef(ref) {
    return ref.value;
  }
  function OwnerID2() {
  }
  function ensureSize2(iter) {
    if (iter.size === void 0) {
      iter.size = iter.__iterate(returnTrue2);
    }
    return iter.size;
  }
  function wrapIndex2(iter, index) {
    if (typeof index !== "number") {
      var uint32Index = index >>> 0;
      if ("" + uint32Index !== index || uint32Index === 4294967295) {
        return NaN;
      }
      index = uint32Index;
    }
    return index < 0 ? ensureSize2(iter) + index : index;
  }
  function returnTrue2() {
    return true;
  }
  function wholeSlice2(begin, end, size) {
    return (begin === 0 && !isNeg2(begin) || size !== void 0 && begin <= -size) && (end === void 0 || size !== void 0 && end >= size);
  }
  function resolveBegin2(begin, size) {
    return resolveIndex2(begin, size, 0);
  }
  function resolveEnd2(end, size) {
    return resolveIndex2(end, size, size);
  }
  function resolveIndex2(index, size, defaultIndex) {
    return index === void 0 ? defaultIndex : isNeg2(index) ? size === Infinity ? size : Math.max(0, size + index) | 0 : size === void 0 || size === index ? index : Math.min(size, index) | 0;
  }
  function isNeg2(value) {
    return value < 0 || value === 0 && 1 / value === -Infinity;
  }
  var IS_COLLECTION_SYMBOL2 = "@@__IMMUTABLE_ITERABLE__@@";
  function isCollection2(maybeCollection) {
    return Boolean(maybeCollection && maybeCollection[IS_COLLECTION_SYMBOL2]);
  }
  var IS_KEYED_SYMBOL2 = "@@__IMMUTABLE_KEYED__@@";
  function isKeyed2(maybeKeyed) {
    return Boolean(maybeKeyed && maybeKeyed[IS_KEYED_SYMBOL2]);
  }
  var IS_INDEXED_SYMBOL2 = "@@__IMMUTABLE_INDEXED__@@";
  function isIndexed2(maybeIndexed) {
    return Boolean(maybeIndexed && maybeIndexed[IS_INDEXED_SYMBOL2]);
  }
  function isAssociative2(maybeAssociative) {
    return isKeyed2(maybeAssociative) || isIndexed2(maybeAssociative);
  }
  var Collection3 = function Collection4(value) {
    return isCollection2(value) ? value : Seq2(value);
  };
  var KeyedCollection2 = function(Collection5) {
    function KeyedCollection3(value) {
      return isKeyed2(value) ? value : KeyedSeq2(value);
    }
    if (Collection5)
      KeyedCollection3.__proto__ = Collection5;
    KeyedCollection3.prototype = Object.create(Collection5 && Collection5.prototype);
    KeyedCollection3.prototype.constructor = KeyedCollection3;
    return KeyedCollection3;
  }(Collection3);
  var IndexedCollection2 = function(Collection5) {
    function IndexedCollection3(value) {
      return isIndexed2(value) ? value : IndexedSeq2(value);
    }
    if (Collection5)
      IndexedCollection3.__proto__ = Collection5;
    IndexedCollection3.prototype = Object.create(Collection5 && Collection5.prototype);
    IndexedCollection3.prototype.constructor = IndexedCollection3;
    return IndexedCollection3;
  }(Collection3);
  var SetCollection2 = function(Collection5) {
    function SetCollection3(value) {
      return isCollection2(value) && !isAssociative2(value) ? value : SetSeq2(value);
    }
    if (Collection5)
      SetCollection3.__proto__ = Collection5;
    SetCollection3.prototype = Object.create(Collection5 && Collection5.prototype);
    SetCollection3.prototype.constructor = SetCollection3;
    return SetCollection3;
  }(Collection3);
  Collection3.Keyed = KeyedCollection2;
  Collection3.Indexed = IndexedCollection2;
  Collection3.Set = SetCollection2;
  var IS_SEQ_SYMBOL2 = "@@__IMMUTABLE_SEQ__@@";
  function isSeq2(maybeSeq) {
    return Boolean(maybeSeq && maybeSeq[IS_SEQ_SYMBOL2]);
  }
  var IS_RECORD_SYMBOL2 = "@@__IMMUTABLE_RECORD__@@";
  function isRecord2(maybeRecord) {
    return Boolean(maybeRecord && maybeRecord[IS_RECORD_SYMBOL2]);
  }
  function isImmutable2(maybeImmutable) {
    return isCollection2(maybeImmutable) || isRecord2(maybeImmutable);
  }
  var IS_ORDERED_SYMBOL2 = "@@__IMMUTABLE_ORDERED__@@";
  function isOrdered2(maybeOrdered) {
    return Boolean(maybeOrdered && maybeOrdered[IS_ORDERED_SYMBOL2]);
  }
  var ITERATE_KEYS2 = 0;
  var ITERATE_VALUES2 = 1;
  var ITERATE_ENTRIES2 = 2;
  var REAL_ITERATOR_SYMBOL2 = typeof Symbol === "function" && Symbol.iterator;
  var FAUX_ITERATOR_SYMBOL2 = "@@iterator";
  var ITERATOR_SYMBOL2 = REAL_ITERATOR_SYMBOL2 || FAUX_ITERATOR_SYMBOL2;
  var Iterator3 = function Iterator4(next) {
    this.next = next;
  };
  Iterator3.prototype.toString = function toString5() {
    return "[Iterator]";
  };
  Iterator3.KEYS = ITERATE_KEYS2;
  Iterator3.VALUES = ITERATE_VALUES2;
  Iterator3.ENTRIES = ITERATE_ENTRIES2;
  Iterator3.prototype.inspect = Iterator3.prototype.toSource = function() {
    return this.toString();
  };
  Iterator3.prototype[ITERATOR_SYMBOL2] = function() {
    return this;
  };
  function iteratorValue2(type2, k3, v3, iteratorResult) {
    var value = type2 === 0 ? k3 : type2 === 1 ? v3 : [k3, v3];
    iteratorResult ? iteratorResult.value = value : iteratorResult = {
      value,
      done: false
    };
    return iteratorResult;
  }
  function iteratorDone2() {
    return { value: void 0, done: true };
  }
  function hasIterator2(maybeIterable) {
    return !!getIteratorFn2(maybeIterable);
  }
  function isIterator2(maybeIterator) {
    return maybeIterator && typeof maybeIterator.next === "function";
  }
  function getIterator2(iterable) {
    var iteratorFn = getIteratorFn2(iterable);
    return iteratorFn && iteratorFn.call(iterable);
  }
  function getIteratorFn2(iterable) {
    var iteratorFn = iterable && (REAL_ITERATOR_SYMBOL2 && iterable[REAL_ITERATOR_SYMBOL2] || iterable[FAUX_ITERATOR_SYMBOL2]);
    if (typeof iteratorFn === "function") {
      return iteratorFn;
    }
  }
  var hasOwnProperty2 = Object.prototype.hasOwnProperty;
  function isArrayLike2(value) {
    if (Array.isArray(value) || typeof value === "string") {
      return true;
    }
    return value && typeof value === "object" && Number.isInteger(value.length) && value.length >= 0 && (value.length === 0 ? (
      // Only {length: 0} is considered Array-like.
      Object.keys(value).length === 1
    ) : (
      // An object is only Array-like if it has a property where the last value
      // in the array-like may be found (which could be undefined).
      value.hasOwnProperty(value.length - 1)
    ));
  }
  var Seq2 = function(Collection$$1) {
    function Seq3(value) {
      return value === null || value === void 0 ? emptySequence2() : isImmutable2(value) ? value.toSeq() : seqFromValue2(value);
    }
    if (Collection$$1)
      Seq3.__proto__ = Collection$$1;
    Seq3.prototype = Object.create(Collection$$1 && Collection$$1.prototype);
    Seq3.prototype.constructor = Seq3;
    Seq3.prototype.toSeq = function toSeq5() {
      return this;
    };
    Seq3.prototype.toString = function toString8() {
      return this.__toString("Seq {", "}");
    };
    Seq3.prototype.cacheResult = function cacheResult() {
      if (!this._cache && this.__iterateUncached) {
        this._cache = this.entrySeq().toArray();
        this.size = this._cache.length;
      }
      return this;
    };
    Seq3.prototype.__iterate = function __iterate3(fn, reverse5) {
      var this$1 = this;
      var cache = this._cache;
      if (cache) {
        var size = cache.length;
        var i4 = 0;
        while (i4 !== size) {
          var entry = cache[reverse5 ? size - ++i4 : i4++];
          if (fn(entry[1], entry[0], this$1) === false) {
            break;
          }
        }
        return i4;
      }
      return this.__iterateUncached(fn, reverse5);
    };
    Seq3.prototype.__iterator = function __iterator3(type2, reverse5) {
      var cache = this._cache;
      if (cache) {
        var size = cache.length;
        var i4 = 0;
        return new Iterator3(function() {
          if (i4 === size) {
            return iteratorDone2();
          }
          var entry = cache[reverse5 ? size - ++i4 : i4++];
          return iteratorValue2(type2, entry[0], entry[1]);
        });
      }
      return this.__iteratorUncached(type2, reverse5);
    };
    return Seq3;
  }(Collection3);
  var KeyedSeq2 = function(Seq3) {
    function KeyedSeq3(value) {
      return value === null || value === void 0 ? emptySequence2().toKeyedSeq() : isCollection2(value) ? isKeyed2(value) ? value.toSeq() : value.fromEntrySeq() : isRecord2(value) ? value.toSeq() : keyedSeqFromValue2(value);
    }
    if (Seq3)
      KeyedSeq3.__proto__ = Seq3;
    KeyedSeq3.prototype = Object.create(Seq3 && Seq3.prototype);
    KeyedSeq3.prototype.constructor = KeyedSeq3;
    KeyedSeq3.prototype.toKeyedSeq = function toKeyedSeq5() {
      return this;
    };
    return KeyedSeq3;
  }(Seq2);
  var IndexedSeq2 = function(Seq3) {
    function IndexedSeq3(value) {
      return value === null || value === void 0 ? emptySequence2() : isCollection2(value) ? isKeyed2(value) ? value.entrySeq() : value.toIndexedSeq() : isRecord2(value) ? value.toSeq().entrySeq() : indexedSeqFromValue2(value);
    }
    if (Seq3)
      IndexedSeq3.__proto__ = Seq3;
    IndexedSeq3.prototype = Object.create(Seq3 && Seq3.prototype);
    IndexedSeq3.prototype.constructor = IndexedSeq3;
    IndexedSeq3.of = function of() {
      return IndexedSeq3(arguments);
    };
    IndexedSeq3.prototype.toIndexedSeq = function toIndexedSeq3() {
      return this;
    };
    IndexedSeq3.prototype.toString = function toString8() {
      return this.__toString("Seq [", "]");
    };
    return IndexedSeq3;
  }(Seq2);
  var SetSeq2 = function(Seq3) {
    function SetSeq3(value) {
      return (isCollection2(value) && !isAssociative2(value) ? value : IndexedSeq2(value)).toSetSeq();
    }
    if (Seq3)
      SetSeq3.__proto__ = Seq3;
    SetSeq3.prototype = Object.create(Seq3 && Seq3.prototype);
    SetSeq3.prototype.constructor = SetSeq3;
    SetSeq3.of = function of() {
      return SetSeq3(arguments);
    };
    SetSeq3.prototype.toSetSeq = function toSetSeq3() {
      return this;
    };
    return SetSeq3;
  }(Seq2);
  Seq2.isSeq = isSeq2;
  Seq2.Keyed = KeyedSeq2;
  Seq2.Set = SetSeq2;
  Seq2.Indexed = IndexedSeq2;
  Seq2.prototype[IS_SEQ_SYMBOL2] = true;
  var ArraySeq2 = function(IndexedSeq3) {
    function ArraySeq3(array3) {
      this._array = array3;
      this.size = array3.length;
    }
    if (IndexedSeq3)
      ArraySeq3.__proto__ = IndexedSeq3;
    ArraySeq3.prototype = Object.create(IndexedSeq3 && IndexedSeq3.prototype);
    ArraySeq3.prototype.constructor = ArraySeq3;
    ArraySeq3.prototype.get = function get24(index, notSetValue) {
      return this.has(index) ? this._array[wrapIndex2(this, index)] : notSetValue;
    };
    ArraySeq3.prototype.__iterate = function __iterate3(fn, reverse5) {
      var this$1 = this;
      var array3 = this._array;
      var size = array3.length;
      var i4 = 0;
      while (i4 !== size) {
        var ii = reverse5 ? size - ++i4 : i4++;
        if (fn(array3[ii], ii, this$1) === false) {
          break;
        }
      }
      return i4;
    };
    ArraySeq3.prototype.__iterator = function __iterator3(type2, reverse5) {
      var array3 = this._array;
      var size = array3.length;
      var i4 = 0;
      return new Iterator3(function() {
        if (i4 === size) {
          return iteratorDone2();
        }
        var ii = reverse5 ? size - ++i4 : i4++;
        return iteratorValue2(type2, ii, array3[ii]);
      });
    };
    return ArraySeq3;
  }(IndexedSeq2);
  var ObjectSeq2 = function(KeyedSeq3) {
    function ObjectSeq3(object) {
      var keys3 = Object.keys(object);
      this._object = object;
      this._keys = keys3;
      this.size = keys3.length;
    }
    if (KeyedSeq3)
      ObjectSeq3.__proto__ = KeyedSeq3;
    ObjectSeq3.prototype = Object.create(KeyedSeq3 && KeyedSeq3.prototype);
    ObjectSeq3.prototype.constructor = ObjectSeq3;
    ObjectSeq3.prototype.get = function get24(key, notSetValue) {
      if (notSetValue !== void 0 && !this.has(key)) {
        return notSetValue;
      }
      return this._object[key];
    };
    ObjectSeq3.prototype.has = function has9(key) {
      return hasOwnProperty2.call(this._object, key);
    };
    ObjectSeq3.prototype.__iterate = function __iterate3(fn, reverse5) {
      var this$1 = this;
      var object = this._object;
      var keys3 = this._keys;
      var size = keys3.length;
      var i4 = 0;
      while (i4 !== size) {
        var key = keys3[reverse5 ? size - ++i4 : i4++];
        if (fn(object[key], key, this$1) === false) {
          break;
        }
      }
      return i4;
    };
    ObjectSeq3.prototype.__iterator = function __iterator3(type2, reverse5) {
      var object = this._object;
      var keys3 = this._keys;
      var size = keys3.length;
      var i4 = 0;
      return new Iterator3(function() {
        if (i4 === size) {
          return iteratorDone2();
        }
        var key = keys3[reverse5 ? size - ++i4 : i4++];
        return iteratorValue2(type2, key, object[key]);
      });
    };
    return ObjectSeq3;
  }(KeyedSeq2);
  ObjectSeq2.prototype[IS_ORDERED_SYMBOL2] = true;
  var CollectionSeq2 = function(IndexedSeq3) {
    function CollectionSeq3(collection) {
      this._collection = collection;
      this.size = collection.length || collection.size;
    }
    if (IndexedSeq3)
      CollectionSeq3.__proto__ = IndexedSeq3;
    CollectionSeq3.prototype = Object.create(IndexedSeq3 && IndexedSeq3.prototype);
    CollectionSeq3.prototype.constructor = CollectionSeq3;
    CollectionSeq3.prototype.__iterateUncached = function __iterateUncached(fn, reverse5) {
      var this$1 = this;
      if (reverse5) {
        return this.cacheResult().__iterate(fn, reverse5);
      }
      var collection = this._collection;
      var iterator = getIterator2(collection);
      var iterations = 0;
      if (isIterator2(iterator)) {
        var step;
        while (!(step = iterator.next()).done) {
          if (fn(step.value, iterations++, this$1) === false) {
            break;
          }
        }
      }
      return iterations;
    };
    CollectionSeq3.prototype.__iteratorUncached = function __iteratorUncached(type2, reverse5) {
      if (reverse5) {
        return this.cacheResult().__iterator(type2, reverse5);
      }
      var collection = this._collection;
      var iterator = getIterator2(collection);
      if (!isIterator2(iterator)) {
        return new Iterator3(iteratorDone2);
      }
      var iterations = 0;
      return new Iterator3(function() {
        var step = iterator.next();
        return step.done ? step : iteratorValue2(type2, iterations++, step.value);
      });
    };
    return CollectionSeq3;
  }(IndexedSeq2);
  var EMPTY_SEQ2;
  function emptySequence2() {
    return EMPTY_SEQ2 || (EMPTY_SEQ2 = new ArraySeq2([]));
  }
  function keyedSeqFromValue2(value) {
    var seq = Array.isArray(value) ? new ArraySeq2(value) : hasIterator2(value) ? new CollectionSeq2(value) : void 0;
    if (seq) {
      return seq.fromEntrySeq();
    }
    if (typeof value === "object") {
      return new ObjectSeq2(value);
    }
    throw new TypeError(
      "Expected Array or collection object of [k, v] entries, or keyed object: " + value
    );
  }
  function indexedSeqFromValue2(value) {
    var seq = maybeIndexedSeqFromValue2(value);
    if (seq) {
      return seq;
    }
    throw new TypeError(
      "Expected Array or collection object of values: " + value
    );
  }
  function seqFromValue2(value) {
    var seq = maybeIndexedSeqFromValue2(value);
    if (seq) {
      return seq;
    }
    if (typeof value === "object") {
      return new ObjectSeq2(value);
    }
    throw new TypeError(
      "Expected Array or collection object of values, or keyed object: " + value
    );
  }
  function maybeIndexedSeqFromValue2(value) {
    return isArrayLike2(value) ? new ArraySeq2(value) : hasIterator2(value) ? new CollectionSeq2(value) : void 0;
  }
  var IS_MAP_SYMBOL2 = "@@__IMMUTABLE_MAP__@@";
  function isMap2(maybeMap) {
    return Boolean(maybeMap && maybeMap[IS_MAP_SYMBOL2]);
  }
  function isOrderedMap2(maybeOrderedMap) {
    return isMap2(maybeOrderedMap) && isOrdered2(maybeOrderedMap);
  }
  function isValueObject2(maybeValue) {
    return Boolean(
      maybeValue && typeof maybeValue.equals === "function" && typeof maybeValue.hashCode === "function"
    );
  }
  function is2(valueA, valueB) {
    if (valueA === valueB || valueA !== valueA && valueB !== valueB) {
      return true;
    }
    if (!valueA || !valueB) {
      return false;
    }
    if (typeof valueA.valueOf === "function" && typeof valueB.valueOf === "function") {
      valueA = valueA.valueOf();
      valueB = valueB.valueOf();
      if (valueA === valueB || valueA !== valueA && valueB !== valueB) {
        return true;
      }
      if (!valueA || !valueB) {
        return false;
      }
    }
    return !!(isValueObject2(valueA) && isValueObject2(valueB) && valueA.equals(valueB));
  }
  var IS_SORTED_SYMBOL = "@@__IMMUTABLE_SORTED__@@";
  function isSorted(maybeSorted) {
    return Boolean(maybeSorted && maybeSorted[IS_SORTED_SYMBOL]);
  }
  var imul3 = typeof Math.imul === "function" && Math.imul(4294967295, 2) === -2 ? Math.imul : function imul4(a4, b3) {
    a4 |= 0;
    b3 |= 0;
    var c3 = a4 & 65535;
    var d3 = b3 & 65535;
    return c3 * d3 + ((a4 >>> 16) * d3 + c3 * (b3 >>> 16) << 16 >>> 0) | 0;
  };
  function smi2(i32) {
    return i32 >>> 1 & 1073741824 | i32 & 3221225471;
  }
  var defaultValueOf2 = Object.prototype.valueOf;
  function hash2(o4) {
    switch (typeof o4) {
      case "boolean":
        return o4 ? 1108378657 : 1108378656;
      case "number":
        return hashNumber2(o4);
      case "string":
        return o4.length > STRING_HASH_CACHE_MIN_STRLEN2 ? cachedHashString2(o4) : hashString2(o4);
      case "object":
      case "function":
        if (o4 === null) {
          return 1108378658;
        }
        if (typeof o4.hashCode === "function") {
          return smi2(o4.hashCode(o4));
        }
        if (o4.valueOf !== defaultValueOf2 && typeof o4.valueOf === "function") {
          o4 = o4.valueOf(o4);
        }
        return hashJSObj2(o4);
      case "undefined":
        return 1108378659;
      default:
        if (typeof o4.toString === "function") {
          return hashString2(o4.toString());
        }
        throw new Error("Value type " + typeof o4 + " cannot be hashed.");
    }
  }
  function hashNumber2(n3) {
    if (n3 !== n3 || n3 === Infinity) {
      return 0;
    }
    var hash3 = n3 | 0;
    if (hash3 !== n3) {
      hash3 ^= n3 * 4294967295;
    }
    while (n3 > 4294967295) {
      n3 /= 4294967295;
      hash3 ^= n3;
    }
    return smi2(hash3);
  }
  function cachedHashString2(string) {
    var hashed = stringHashCache2[string];
    if (hashed === void 0) {
      hashed = hashString2(string);
      if (STRING_HASH_CACHE_SIZE2 === STRING_HASH_CACHE_MAX_SIZE2) {
        STRING_HASH_CACHE_SIZE2 = 0;
        stringHashCache2 = {};
      }
      STRING_HASH_CACHE_SIZE2++;
      stringHashCache2[string] = hashed;
    }
    return hashed;
  }
  function hashString2(string) {
    var hashed = 0;
    for (var ii = 0; ii < string.length; ii++) {
      hashed = 31 * hashed + string.charCodeAt(ii) | 0;
    }
    return smi2(hashed);
  }
  function hashJSObj2(obj) {
    var hashed;
    if (usingWeakMap2) {
      hashed = weakMap2.get(obj);
      if (hashed !== void 0) {
        return hashed;
      }
    }
    hashed = obj[UID_HASH_KEY2];
    if (hashed !== void 0) {
      return hashed;
    }
    if (!canDefineProperty2) {
      hashed = obj.propertyIsEnumerable && obj.propertyIsEnumerable[UID_HASH_KEY2];
      if (hashed !== void 0) {
        return hashed;
      }
      hashed = getIENodeHash2(obj);
      if (hashed !== void 0) {
        return hashed;
      }
    }
    hashed = ++objHashUID;
    if (objHashUID & 1073741824) {
      objHashUID = 0;
    }
    if (usingWeakMap2) {
      weakMap2.set(obj, hashed);
    } else if (isExtensible2 !== void 0 && isExtensible2(obj) === false) {
      throw new Error("Non-extensible objects are not allowed as keys.");
    } else if (canDefineProperty2) {
      Object.defineProperty(obj, UID_HASH_KEY2, {
        enumerable: false,
        configurable: false,
        writable: false,
        value: hashed
      });
    } else if (obj.propertyIsEnumerable !== void 0 && obj.propertyIsEnumerable === obj.constructor.prototype.propertyIsEnumerable) {
      obj.propertyIsEnumerable = function() {
        return this.constructor.prototype.propertyIsEnumerable.apply(
          this,
          arguments
        );
      };
      obj.propertyIsEnumerable[UID_HASH_KEY2] = hashed;
    } else if (obj.nodeType !== void 0) {
      obj[UID_HASH_KEY2] = hashed;
    } else {
      throw new Error("Unable to set a non-enumerable property on object.");
    }
    return hashed;
  }
  var isExtensible2 = Object.isExtensible;
  var canDefineProperty2 = function() {
    try {
      Object.defineProperty({}, "@", {});
      return true;
    } catch (e4) {
      return false;
    }
  }();
  function getIENodeHash2(node) {
    if (node && node.nodeType > 0) {
      switch (node.nodeType) {
        case 1:
          return node.uniqueID;
        case 9:
          return node.documentElement && node.documentElement.uniqueID;
      }
    }
  }
  var usingWeakMap2 = typeof WeakMap === "function";
  var weakMap2;
  if (usingWeakMap2) {
    weakMap2 = /* @__PURE__ */ new WeakMap();
  }
  var objHashUID = 0;
  var UID_HASH_KEY2 = "__immutablehash__";
  if (typeof Symbol === "function") {
    UID_HASH_KEY2 = Symbol(UID_HASH_KEY2);
  }
  var STRING_HASH_CACHE_MIN_STRLEN2 = 16;
  var STRING_HASH_CACHE_MAX_SIZE2 = 255;
  var STRING_HASH_CACHE_SIZE2 = 0;
  var stringHashCache2 = {};
  var swap = function(array3, i4, j3) {
    var tmp = array3[i4];
    array3[i4] = array3[j3];
    array3[j3] = tmp;
  };
  var sampleThreshold = 1e3;
  var sampleReach = 0.5;
  var quickSelectRange = function(array3, left2, right2, k3, comparator) {
    if (k3 < left2 || k3 > right2) {
      return;
    }
    while (right2 > left2) {
      if (right2 - left2 > sampleThreshold) {
        var n3 = right2 - left2 + 1;
        var i4 = k3 - left2 + 1;
        var z3 = Math.log(n3);
        var s3 = sampleReach * Math.exp(2 * z3 / 3);
        var sd = 0.5 * Math.sqrt(z3 * s3 * (n3 - s3) / n3) * Math.sign(i4 - n3 / 2);
        var newLeft = Math.max(left2, Math.floor(k3 - i4 * s3 / n3 + sd));
        var newRight = Math.min(right2, Math.floor(k3 + (n3 - i4) * s3 / n3 + sd));
        quickSelectRange(array3, newLeft, newRight, k3, comparator);
      }
      var t3 = array3[k3];
      var i$1 = left2;
      var j3 = right2;
      swap(array3, left2, k3);
      if (comparator(array3[right2], t3) > 0) {
        swap(array3, right2, left2);
      }
      while (i$1 < j3) {
        swap(array3, i$1++, j3--);
        while (comparator(array3[i$1], t3) < 0) {
          i$1++;
        }
        while (comparator(array3[j3], t3) > 0) {
          j3--;
        }
      }
      if (array3[left2] === t3) {
        swap(array3, left2, j3);
      } else {
        swap(array3, ++j3, right2);
      }
      if (j3 <= k3) {
        left2 = j3 + 1;
      }
      if (k3 <= j3) {
        right2 = j3 - 1;
      }
    }
  };
  var quickSelect = function(array3, k3, comparator) {
    if (!comparator) {
      comparator = function(a4, b3) {
        return a4 > b3 ? 1 : a4 < b3 ? -1 : 0;
      };
    }
    quickSelectRange(array3, 0, array3.length - 1, k3, comparator);
  };
  var ToKeyedSequence2 = function(KeyedSeq$$1) {
    function ToKeyedSequence3(indexed, useKeys) {
      this._iter = indexed;
      this._useKeys = useKeys;
      this.size = indexed.size;
    }
    if (KeyedSeq$$1)
      ToKeyedSequence3.__proto__ = KeyedSeq$$1;
    ToKeyedSequence3.prototype = Object.create(KeyedSeq$$1 && KeyedSeq$$1.prototype);
    ToKeyedSequence3.prototype.constructor = ToKeyedSequence3;
    ToKeyedSequence3.prototype.get = function get24(key, notSetValue) {
      return this._iter.get(key, notSetValue);
    };
    ToKeyedSequence3.prototype.has = function has9(key) {
      return this._iter.has(key);
    };
    ToKeyedSequence3.prototype.valueSeq = function valueSeq3() {
      return this._iter.valueSeq();
    };
    ToKeyedSequence3.prototype.reverse = function reverse5() {
      var this$1 = this;
      var reversedSequence = reverseFactory2(this, true);
      if (!this._useKeys) {
        reversedSequence.valueSeq = function() {
          return this$1._iter.toSeq().reverse();
        };
      }
      return reversedSequence;
    };
    ToKeyedSequence3.prototype.map = function map5(mapper, context) {
      var this$1 = this;
      var mappedSequence = mapFactory2(this, mapper, context);
      if (!this._useKeys) {
        mappedSequence.valueSeq = function() {
          return this$1._iter.toSeq().map(mapper, context);
        };
      }
      return mappedSequence;
    };
    ToKeyedSequence3.prototype.__iterate = function __iterate3(fn, reverse5) {
      var this$1 = this;
      return this._iter.__iterate(function(v3, k3) {
        return fn(v3, k3, this$1);
      }, reverse5);
    };
    ToKeyedSequence3.prototype.__iterator = function __iterator3(type2, reverse5) {
      return this._iter.__iterator(type2, reverse5);
    };
    return ToKeyedSequence3;
  }(KeyedSeq2);
  ToKeyedSequence2.prototype[IS_ORDERED_SYMBOL2] = true;
  var ToIndexedSequence2 = function(IndexedSeq$$1) {
    function ToIndexedSequence3(iter) {
      this._iter = iter;
      this.size = iter.size;
    }
    if (IndexedSeq$$1)
      ToIndexedSequence3.__proto__ = IndexedSeq$$1;
    ToIndexedSequence3.prototype = Object.create(IndexedSeq$$1 && IndexedSeq$$1.prototype);
    ToIndexedSequence3.prototype.constructor = ToIndexedSequence3;
    ToIndexedSequence3.prototype.includes = function includes5(value) {
      return this._iter.includes(value);
    };
    ToIndexedSequence3.prototype.__iterate = function __iterate3(fn, reverse5) {
      var this$1 = this;
      var i4 = 0;
      reverse5 && ensureSize2(this);
      return this._iter.__iterate(
        function(v3) {
          return fn(v3, reverse5 ? this$1.size - ++i4 : i4++, this$1);
        },
        reverse5
      );
    };
    ToIndexedSequence3.prototype.__iterator = function __iterator3(type2, reverse5) {
      var this$1 = this;
      var iterator = this._iter.__iterator(ITERATE_VALUES2, reverse5);
      var i4 = 0;
      reverse5 && ensureSize2(this);
      return new Iterator3(function() {
        var step = iterator.next();
        return step.done ? step : iteratorValue2(
          type2,
          reverse5 ? this$1.size - ++i4 : i4++,
          step.value,
          step
        );
      });
    };
    return ToIndexedSequence3;
  }(IndexedSeq2);
  var ToSetSequence2 = function(SetSeq$$1) {
    function ToSetSequence3(iter) {
      this._iter = iter;
      this.size = iter.size;
    }
    if (SetSeq$$1)
      ToSetSequence3.__proto__ = SetSeq$$1;
    ToSetSequence3.prototype = Object.create(SetSeq$$1 && SetSeq$$1.prototype);
    ToSetSequence3.prototype.constructor = ToSetSequence3;
    ToSetSequence3.prototype.has = function has9(key) {
      return this._iter.includes(key);
    };
    ToSetSequence3.prototype.__iterate = function __iterate3(fn, reverse5) {
      var this$1 = this;
      return this._iter.__iterate(function(v3) {
        return fn(v3, v3, this$1);
      }, reverse5);
    };
    ToSetSequence3.prototype.__iterator = function __iterator3(type2, reverse5) {
      var iterator = this._iter.__iterator(ITERATE_VALUES2, reverse5);
      return new Iterator3(function() {
        var step = iterator.next();
        return step.done ? step : iteratorValue2(type2, step.value, step.value, step);
      });
    };
    return ToSetSequence3;
  }(SetSeq2);
  var FromEntriesSequence2 = function(KeyedSeq$$1) {
    function FromEntriesSequence3(entries5) {
      this._iter = entries5;
      this.size = entries5.size;
    }
    if (KeyedSeq$$1)
      FromEntriesSequence3.__proto__ = KeyedSeq$$1;
    FromEntriesSequence3.prototype = Object.create(KeyedSeq$$1 && KeyedSeq$$1.prototype);
    FromEntriesSequence3.prototype.constructor = FromEntriesSequence3;
    FromEntriesSequence3.prototype.entrySeq = function entrySeq3() {
      return this._iter.toSeq();
    };
    FromEntriesSequence3.prototype.__iterate = function __iterate3(fn, reverse5) {
      var this$1 = this;
      return this._iter.__iterate(function(entry) {
        if (entry) {
          validateEntry2(entry);
          var indexedCollection = isCollection2(entry);
          return fn(
            indexedCollection ? entry.get(1) : entry[1],
            indexedCollection ? entry.get(0) : entry[0],
            this$1
          );
        }
      }, reverse5);
    };
    FromEntriesSequence3.prototype.__iterator = function __iterator3(type2, reverse5) {
      var iterator = this._iter.__iterator(ITERATE_VALUES2, reverse5);
      return new Iterator3(function() {
        while (true) {
          var step = iterator.next();
          if (step.done) {
            return step;
          }
          var entry = step.value;
          if (entry) {
            validateEntry2(entry);
            var indexedCollection = isCollection2(entry);
            return iteratorValue2(
              type2,
              indexedCollection ? entry.get(0) : entry[0],
              indexedCollection ? entry.get(1) : entry[1],
              step
            );
          }
        }
      });
    };
    return FromEntriesSequence3;
  }(KeyedSeq2);
  ToIndexedSequence2.prototype.cacheResult = ToKeyedSequence2.prototype.cacheResult = ToSetSequence2.prototype.cacheResult = FromEntriesSequence2.prototype.cacheResult = cacheResultThrough2;
  function flipFactory2(collection) {
    var flipSequence = makeSequence2(collection);
    flipSequence._iter = collection;
    flipSequence.size = collection.size;
    flipSequence.flip = function() {
      return collection;
    };
    flipSequence.reverse = function() {
      var reversedSequence = collection.reverse.apply(this);
      reversedSequence.flip = function() {
        return collection.reverse();
      };
      return reversedSequence;
    };
    flipSequence.has = function(key) {
      return collection.includes(key);
    };
    flipSequence.includes = function(key) {
      return collection.has(key);
    };
    flipSequence.cacheResult = cacheResultThrough2;
    flipSequence.__iterateUncached = function(fn, reverse5) {
      var this$1 = this;
      return collection.__iterate(function(v3, k3) {
        return fn(k3, v3, this$1) !== false;
      }, reverse5);
    };
    flipSequence.__iteratorUncached = function(type2, reverse5) {
      if (type2 === ITERATE_ENTRIES2) {
        var iterator = collection.__iterator(type2, reverse5);
        return new Iterator3(function() {
          var step = iterator.next();
          if (!step.done) {
            var k3 = step.value[0];
            step.value[0] = step.value[1];
            step.value[1] = k3;
          }
          return step;
        });
      }
      return collection.__iterator(
        type2 === ITERATE_VALUES2 ? ITERATE_KEYS2 : ITERATE_VALUES2,
        reverse5
      );
    };
    return flipSequence;
  }
  function mapFactory2(collection, mapper, context) {
    var mappedSequence = makeSequence2(collection);
    mappedSequence.size = collection.size;
    mappedSequence.has = function(key) {
      return collection.has(key);
    };
    mappedSequence.get = function(key, notSetValue) {
      var v3 = collection.get(key, NOT_SET2);
      return v3 === NOT_SET2 ? notSetValue : mapper.call(context, v3, key, collection);
    };
    mappedSequence.__iterateUncached = function(fn, reverse5) {
      var this$1 = this;
      return collection.__iterate(
        function(v3, k3, c3) {
          return fn(mapper.call(context, v3, k3, c3), k3, this$1) !== false;
        },
        reverse5
      );
    };
    mappedSequence.__iteratorUncached = function(type2, reverse5) {
      var iterator = collection.__iterator(ITERATE_ENTRIES2, reverse5);
      return new Iterator3(function() {
        var step = iterator.next();
        if (step.done) {
          return step;
        }
        var entry = step.value;
        var key = entry[0];
        return iteratorValue2(
          type2,
          key,
          mapper.call(context, entry[1], key, collection),
          step
        );
      });
    };
    return mappedSequence;
  }
  function reverseFactory2(collection, useKeys) {
    var this$1 = this;
    var reversedSequence = makeSequence2(collection);
    reversedSequence._iter = collection;
    reversedSequence.size = collection.size;
    reversedSequence.reverse = function() {
      return collection;
    };
    if (collection.flip) {
      reversedSequence.flip = function() {
        var flipSequence = flipFactory2(collection);
        flipSequence.reverse = function() {
          return collection.flip();
        };
        return flipSequence;
      };
    }
    reversedSequence.get = function(key, notSetValue) {
      return collection.get(useKeys ? key : -1 - key, notSetValue);
    };
    reversedSequence.has = function(key) {
      return collection.has(useKeys ? key : -1 - key);
    };
    reversedSequence.includes = function(value) {
      return collection.includes(value);
    };
    reversedSequence.cacheResult = cacheResultThrough2;
    reversedSequence.__iterate = function(fn, reverse5) {
      var this$12 = this;
      var i4 = 0;
      reverse5 && ensureSize2(collection);
      return collection.__iterate(
        function(v3, k3) {
          return fn(v3, useKeys ? k3 : reverse5 ? this$12.size - ++i4 : i4++, this$12);
        },
        !reverse5
      );
    };
    reversedSequence.__iterator = function(type2, reverse5) {
      var i4 = 0;
      reverse5 && ensureSize2(collection);
      var iterator = collection.__iterator(ITERATE_ENTRIES2, !reverse5);
      return new Iterator3(function() {
        var step = iterator.next();
        if (step.done) {
          return step;
        }
        var entry = step.value;
        return iteratorValue2(
          type2,
          useKeys ? entry[0] : reverse5 ? this$1.size - ++i4 : i4++,
          entry[1],
          step
        );
      });
    };
    return reversedSequence;
  }
  function filterFactory2(collection, predicate, context, useKeys) {
    var filterSequence = makeSequence2(collection);
    if (useKeys) {
      filterSequence.has = function(key) {
        var v3 = collection.get(key, NOT_SET2);
        return v3 !== NOT_SET2 && !!predicate.call(context, v3, key, collection);
      };
      filterSequence.get = function(key, notSetValue) {
        var v3 = collection.get(key, NOT_SET2);
        return v3 !== NOT_SET2 && predicate.call(context, v3, key, collection) ? v3 : notSetValue;
      };
    }
    filterSequence.__iterateUncached = function(fn, reverse5) {
      var this$1 = this;
      var iterations = 0;
      collection.__iterate(function(v3, k3, c3) {
        if (predicate.call(context, v3, k3, c3)) {
          iterations++;
          return fn(v3, useKeys ? k3 : iterations - 1, this$1);
        }
      }, reverse5);
      return iterations;
    };
    filterSequence.__iteratorUncached = function(type2, reverse5) {
      var iterator = collection.__iterator(ITERATE_ENTRIES2, reverse5);
      var iterations = 0;
      return new Iterator3(function() {
        while (true) {
          var step = iterator.next();
          if (step.done) {
            return step;
          }
          var entry = step.value;
          var key = entry[0];
          var value = entry[1];
          if (predicate.call(context, value, key, collection)) {
            return iteratorValue2(type2, useKeys ? key : iterations++, value, step);
          }
        }
      });
    };
    return filterSequence;
  }
  function countByFactory2(collection, grouper, context) {
    var groups = Map3().asMutable();
    collection.__iterate(function(v3, k3) {
      groups.update(grouper.call(context, v3, k3, collection), 0, function(a4) {
        return a4 + 1;
      });
    });
    return groups.asImmutable();
  }
  function groupByFactory2(collection, grouper, context) {
    var isKeyedIter = isKeyed2(collection);
    var groups = (isOrdered2(collection) ? OrderedMap2() : Map3()).asMutable();
    collection.__iterate(function(v3, k3) {
      groups.update(
        grouper.call(context, v3, k3, collection),
        function(a4) {
          return a4 = a4 || [], a4.push(isKeyedIter ? [k3, v3] : v3), a4;
        }
      );
    });
    var coerce = collectionClass2(collection);
    return groups.map(function(arr) {
      return reify2(collection, coerce(arr));
    }).asImmutable();
  }
  function sliceFactory2(collection, begin, end, useKeys) {
    var originalSize = collection.size;
    if (wholeSlice2(begin, end, originalSize)) {
      return collection;
    }
    var resolvedBegin = resolveBegin2(begin, originalSize);
    var resolvedEnd = resolveEnd2(end, originalSize);
    if (resolvedBegin !== resolvedBegin || resolvedEnd !== resolvedEnd) {
      return sliceFactory2(collection.toSeq().cacheResult(), begin, end, useKeys);
    }
    var resolvedSize = resolvedEnd - resolvedBegin;
    var sliceSize;
    if (resolvedSize === resolvedSize) {
      sliceSize = resolvedSize < 0 ? 0 : resolvedSize;
    }
    var sliceSeq = makeSequence2(collection);
    sliceSeq.size = sliceSize === 0 ? sliceSize : collection.size && sliceSize || void 0;
    if (!useKeys && isSeq2(collection) && sliceSize >= 0) {
      sliceSeq.get = function(index, notSetValue) {
        index = wrapIndex2(this, index);
        return index >= 0 && index < sliceSize ? collection.get(index + resolvedBegin, notSetValue) : notSetValue;
      };
    }
    sliceSeq.__iterateUncached = function(fn, reverse5) {
      var this$1 = this;
      if (sliceSize === 0) {
        return 0;
      }
      if (reverse5) {
        return this.cacheResult().__iterate(fn, reverse5);
      }
      var skipped = 0;
      var isSkipping = true;
      var iterations = 0;
      collection.__iterate(function(v3, k3) {
        if (!(isSkipping && (isSkipping = skipped++ < resolvedBegin))) {
          iterations++;
          return fn(v3, useKeys ? k3 : iterations - 1, this$1) !== false && iterations !== sliceSize;
        }
      });
      return iterations;
    };
    sliceSeq.__iteratorUncached = function(type2, reverse5) {
      if (sliceSize !== 0 && reverse5) {
        return this.cacheResult().__iterator(type2, reverse5);
      }
      if (sliceSize === 0) {
        return new Iterator3(iteratorDone2);
      }
      var iterator = collection.__iterator(type2, reverse5);
      var skipped = 0;
      var iterations = 0;
      return new Iterator3(function() {
        while (skipped++ < resolvedBegin) {
          iterator.next();
        }
        if (++iterations > sliceSize) {
          return iteratorDone2();
        }
        var step = iterator.next();
        if (useKeys || type2 === ITERATE_VALUES2 || step.done) {
          return step;
        }
        if (type2 === ITERATE_KEYS2) {
          return iteratorValue2(type2, iterations - 1, void 0, step);
        }
        return iteratorValue2(type2, iterations - 1, step.value[1], step);
      });
    };
    return sliceSeq;
  }
  function takeWhileFactory2(collection, predicate, context) {
    var takeSequence = makeSequence2(collection);
    takeSequence.__iterateUncached = function(fn, reverse5) {
      var this$1 = this;
      if (reverse5) {
        return this.cacheResult().__iterate(fn, reverse5);
      }
      var iterations = 0;
      collection.__iterate(
        function(v3, k3, c3) {
          return predicate.call(context, v3, k3, c3) && ++iterations && fn(v3, k3, this$1);
        }
      );
      return iterations;
    };
    takeSequence.__iteratorUncached = function(type2, reverse5) {
      var this$1 = this;
      if (reverse5) {
        return this.cacheResult().__iterator(type2, reverse5);
      }
      var iterator = collection.__iterator(ITERATE_ENTRIES2, reverse5);
      var iterating = true;
      return new Iterator3(function() {
        if (!iterating) {
          return iteratorDone2();
        }
        var step = iterator.next();
        if (step.done) {
          return step;
        }
        var entry = step.value;
        var k3 = entry[0];
        var v3 = entry[1];
        if (!predicate.call(context, v3, k3, this$1)) {
          iterating = false;
          return iteratorDone2();
        }
        return type2 === ITERATE_ENTRIES2 ? step : iteratorValue2(type2, k3, v3, step);
      });
    };
    return takeSequence;
  }
  function skipWhileFactory2(collection, predicate, context, useKeys) {
    var skipSequence = makeSequence2(collection);
    skipSequence.__iterateUncached = function(fn, reverse5) {
      var this$1 = this;
      if (reverse5) {
        return this.cacheResult().__iterate(fn, reverse5);
      }
      var isSkipping = true;
      var iterations = 0;
      collection.__iterate(function(v3, k3, c3) {
        if (!(isSkipping && (isSkipping = predicate.call(context, v3, k3, c3)))) {
          iterations++;
          return fn(v3, useKeys ? k3 : iterations - 1, this$1);
        }
      });
      return iterations;
    };
    skipSequence.__iteratorUncached = function(type2, reverse5) {
      var this$1 = this;
      if (reverse5) {
        return this.cacheResult().__iterator(type2, reverse5);
      }
      var iterator = collection.__iterator(ITERATE_ENTRIES2, reverse5);
      var skipping = true;
      var iterations = 0;
      return new Iterator3(function() {
        var step;
        var k3;
        var v3;
        do {
          step = iterator.next();
          if (step.done) {
            if (useKeys || type2 === ITERATE_VALUES2) {
              return step;
            }
            if (type2 === ITERATE_KEYS2) {
              return iteratorValue2(type2, iterations++, void 0, step);
            }
            return iteratorValue2(type2, iterations++, step.value[1], step);
          }
          var entry = step.value;
          k3 = entry[0];
          v3 = entry[1];
          skipping && (skipping = predicate.call(context, v3, k3, this$1));
        } while (skipping);
        return type2 === ITERATE_ENTRIES2 ? step : iteratorValue2(type2, k3, v3, step);
      });
    };
    return skipSequence;
  }
  function concatFactory2(collection, values3) {
    var isKeyedCollection = isKeyed2(collection);
    var iters = [collection].concat(values3).map(function(v3) {
      if (!isCollection2(v3)) {
        v3 = isKeyedCollection ? keyedSeqFromValue2(v3) : indexedSeqFromValue2(Array.isArray(v3) ? v3 : [v3]);
      } else if (isKeyedCollection) {
        v3 = KeyedCollection2(v3);
      }
      return v3;
    }).filter(function(v3) {
      return v3.size !== 0;
    });
    if (iters.length === 0) {
      return collection;
    }
    if (iters.length === 1) {
      var singleton = iters[0];
      if (singleton === collection || isKeyedCollection && isKeyed2(singleton) || isIndexed2(collection) && isIndexed2(singleton)) {
        return singleton;
      }
    }
    var concatSeq = new ArraySeq2(iters);
    if (isKeyedCollection) {
      concatSeq = concatSeq.toKeyedSeq();
    } else if (!isIndexed2(collection)) {
      concatSeq = concatSeq.toSetSeq();
    }
    concatSeq = concatSeq.flatten(true);
    concatSeq.size = iters.reduce(function(sum, seq) {
      if (sum !== void 0) {
        var size = seq.size;
        if (size !== void 0) {
          return sum + size;
        }
      }
    }, 0);
    return concatSeq;
  }
  function flattenFactory2(collection, depth, useKeys) {
    var flatSequence = makeSequence2(collection);
    flatSequence.__iterateUncached = function(fn, reverse5) {
      if (reverse5) {
        return this.cacheResult().__iterate(fn, reverse5);
      }
      var iterations = 0;
      var stopped = false;
      function flatDeep(iter, currentDepth) {
        iter.__iterate(function(v3, k3) {
          if ((!depth || currentDepth < depth) && isCollection2(v3)) {
            flatDeep(v3, currentDepth + 1);
          } else {
            iterations++;
            if (fn(v3, useKeys ? k3 : iterations - 1, flatSequence) === false) {
              stopped = true;
            }
          }
          return !stopped;
        }, reverse5);
      }
      flatDeep(collection, 0);
      return iterations;
    };
    flatSequence.__iteratorUncached = function(type2, reverse5) {
      if (reverse5) {
        return this.cacheResult().__iterator(type2, reverse5);
      }
      var iterator = collection.__iterator(type2, reverse5);
      var stack = [];
      var iterations = 0;
      return new Iterator3(function() {
        while (iterator) {
          var step = iterator.next();
          if (step.done !== false) {
            iterator = stack.pop();
            continue;
          }
          var v3 = step.value;
          if (type2 === ITERATE_ENTRIES2) {
            v3 = v3[1];
          }
          if ((!depth || stack.length < depth) && isCollection2(v3)) {
            stack.push(iterator);
            iterator = v3.__iterator(type2, reverse5);
          } else {
            return useKeys ? step : iteratorValue2(type2, iterations++, v3, step);
          }
        }
        return iteratorDone2();
      });
    };
    return flatSequence;
  }
  function flatMapFactory2(collection, mapper, context) {
    var coerce = collectionClass2(collection);
    return collection.toSeq().map(function(v3, k3) {
      return coerce(mapper.call(context, v3, k3, collection));
    }).flatten(true);
  }
  function interposeFactory2(collection, separator) {
    var interposedSequence = makeSequence2(collection);
    interposedSequence.size = collection.size && collection.size * 2 - 1;
    interposedSequence.__iterateUncached = function(fn, reverse5) {
      var this$1 = this;
      var iterations = 0;
      collection.__iterate(
        function(v3) {
          return (!iterations || fn(separator, iterations++, this$1) !== false) && fn(v3, iterations++, this$1) !== false;
        },
        reverse5
      );
      return iterations;
    };
    interposedSequence.__iteratorUncached = function(type2, reverse5) {
      var iterator = collection.__iterator(ITERATE_VALUES2, reverse5);
      var iterations = 0;
      var step;
      return new Iterator3(function() {
        if (!step || iterations % 2) {
          step = iterator.next();
          if (step.done) {
            return step;
          }
        }
        return iterations % 2 ? iteratorValue2(type2, iterations++, separator) : iteratorValue2(type2, iterations++, step.value, step);
      });
    };
    return interposedSequence;
  }
  function sortFactory2(collection, comparator, mapper) {
    if (!comparator) {
      comparator = defaultComparator2;
    }
    var isKeyedCollection = isKeyed2(collection);
    var index = 0;
    var entries5 = collection.toSeq().map(function(v3, k3) {
      return [k3, v3, index++, mapper ? mapper(v3, k3, collection) : v3];
    }).valueSeq().toArray();
    entries5.sort(function(a4, b3) {
      return comparator(a4[3], b3[3]) || a4[2] - b3[2];
    }).forEach(
      isKeyedCollection ? function(v3, i4) {
        entries5[i4].length = 2;
      } : function(v3, i4) {
        entries5[i4] = v3[1];
      }
    );
    return isKeyedCollection ? KeyedSeq2(entries5) : isIndexed2(collection) ? IndexedSeq2(entries5) : SetSeq2(entries5);
  }
  function partialSortFactory(collection, n3, comparator, mapper) {
    if (!comparator) {
      comparator = defaultComparator2;
    }
    var isKeyedCollection = isKeyed2(collection);
    var index = 0;
    var entries5 = collection.toSeq().map(function(v3, k3) {
      return [k3, v3, index++, mapper ? mapper(v3, k3, collection) : v3];
    }).valueSeq().toArray();
    var cmp = function(a4, b3) {
      return comparator(a4[3], b3[3]) || a4[2] - b3[2];
    };
    quickSelect(entries5, n3, cmp);
    entries5 = entries5.slice(0, n3);
    entries5.sort(cmp).forEach(
      isKeyedCollection ? function(v3, i4) {
        entries5[i4].length = 2;
      } : function(v3, i4) {
        entries5[i4] = v3[1];
      }
    );
    return isKeyedCollection ? KeyedSeq2(entries5) : isIndexed2(collection) ? IndexedSeq2(entries5) : SetSeq2(entries5);
  }
  function incSortFactory(collection, comparator, mapper, useKeys) {
    if (!comparator) {
      comparator = defaultComparator2;
    }
    var index = 0;
    var entriesSeq = collection.toSeq().map(function(v3, k3) {
      return [k3, v3, index++, mapper ? mapper(v3, k3, collection) : v3];
    }).valueSeq();
    var sequence = makeSequence2(collection);
    sequence.__iterateUncached = function(fn, reverse5) {
      var this$1 = this;
      var entries5 = entriesSeq.toArray();
      var rcmp = reverse5 ? function(a4, b3) {
        return comparator(b3, a4);
      } : comparator;
      var cmp = function(a4, b3) {
        return rcmp(a4[3], b3[3]) || a4[2] - b3[2];
      };
      var nextn = entries5.length >> 10;
      nextn = Math.min(entries5.length, 10);
      var from = 0;
      var to = -1;
      var n3 = 0;
      var i4 = 0;
      var sortedEntries;
      function nextBatch() {
        from = to + 1;
        to = Math.min(to + nextn, entries5.length - 1);
        n3 = to - from + 1;
        i4 = 0;
        nextn <<= 2;
        quickSelectRange(entries5, from, entries5.length - 1, to, cmp);
        sortedEntries = entries5.slice(from, to + 1);
        sortedEntries.sort(cmp).forEach(function(v3, i5) {
          sortedEntries[i5].length = 2;
        });
      }
      function nextEntry() {
        if (i4 >= n3) {
          nextBatch();
        }
        return sortedEntries[i4++];
      }
      var iterations = 0;
      while (iterations < entries5.length) {
        var entry = nextEntry();
        if (fn(entry[1], useKeys ? entry[0] : iterations, this$1) === false) {
          break;
        }
        iterations++;
      }
      return iterations;
    };
    sequence.__iteratorUncached = function(type2, reverse5) {
      var entries5 = entriesSeq.toArray();
      var rcmp = reverse5 ? function(a4, b3) {
        return comparator(b3, a4);
      } : comparator;
      var cmp = function(a4, b3) {
        return rcmp(a4[3], b3[3]) || a4[2] - b3[2];
      };
      var nextn = entries5.length >> 10;
      nextn = Math.min(entries5.length, 10);
      var from = 0;
      var to = -1;
      var n3 = 0;
      var i4 = 0;
      var sortedEntries;
      function nextBatch() {
        from = to + 1;
        to = Math.min(to + nextn, entries5.length - 1);
        n3 = to - from + 1;
        i4 = 0;
        nextn <<= 2;
        quickSelectRange(entries5, from, entries5.length - 1, to, cmp);
        sortedEntries = entries5.slice(from, to + 1);
        sortedEntries.sort(cmp).forEach(function(v3, i5) {
          sortedEntries[i5].length = 2;
        });
      }
      function nextEntry() {
        if (i4 >= n3) {
          nextBatch();
        }
        return sortedEntries[i4++];
      }
      var iterations = 0;
      return new Iterator3(function() {
        if (iterations >= entries5.length) {
          return iteratorDone2();
        }
        iterations++;
        var entry = nextEntry(cmp);
        return iteratorValue2(type2, useKeys ? entry[0] : iterations, entry[1]);
      });
    };
    return sequence;
  }
  function maxFactory2(collection, comparator, mapper) {
    if (!comparator) {
      comparator = defaultComparator2;
    }
    if (mapper) {
      var entry = collection.toSeq().map(function(v3, k3) {
        return [v3, mapper(v3, k3, collection)];
      }).reduce(function(a4, b3) {
        return maxCompare2(comparator, a4[1], b3[1]) ? b3 : a4;
      });
      return entry && entry[0];
    }
    return collection.reduce(function(a4, b3) {
      return maxCompare2(comparator, a4, b3) ? b3 : a4;
    });
  }
  function maxCompare2(comparator, a4, b3) {
    var comp = comparator(b3, a4);
    return comp === 0 && b3 !== a4 && (b3 === void 0 || b3 === null || b3 !== b3) || comp > 0;
  }
  function zipWithFactory2(keyIter, zipper, iters, zipAll3) {
    var zipSequence = makeSequence2(keyIter);
    var sizes = new ArraySeq2(iters).map(function(i4) {
      return i4.size;
    });
    zipSequence.size = zipAll3 ? sizes.max() : sizes.min();
    zipSequence.__iterate = function(fn, reverse5) {
      var this$1 = this;
      var iterator = this.__iterator(ITERATE_VALUES2, reverse5);
      var step;
      var iterations = 0;
      while (!(step = iterator.next()).done) {
        if (fn(step.value, iterations++, this$1) === false) {
          break;
        }
      }
      return iterations;
    };
    zipSequence.__iteratorUncached = function(type2, reverse5) {
      var iterators = iters.map(
        function(i4) {
          return i4 = Collection3(i4), getIterator2(reverse5 ? i4.reverse() : i4);
        }
      );
      var iterations = 0;
      var isDone = false;
      return new Iterator3(function() {
        var steps;
        if (!isDone) {
          steps = iterators.map(function(i4) {
            return i4.next();
          });
          isDone = zipAll3 ? steps.every(function(s3) {
            return s3.done;
          }) : steps.some(function(s3) {
            return s3.done;
          });
        }
        if (isDone) {
          return iteratorDone2();
        }
        return iteratorValue2(
          type2,
          iterations++,
          zipper.apply(null, steps.map(function(s3) {
            return s3.value;
          }))
        );
      });
    };
    return zipSequence;
  }
  function reify2(iter, seq) {
    return iter === seq ? iter : isSeq2(iter) ? seq : iter.constructor(seq);
  }
  function validateEntry2(entry) {
    if (entry !== Object(entry)) {
      throw new TypeError("Expected [K, V] tuple: " + entry);
    }
  }
  function collectionClass2(collection) {
    return isKeyed2(collection) ? KeyedCollection2 : isIndexed2(collection) ? IndexedCollection2 : SetCollection2;
  }
  function makeSequence2(collection) {
    return Object.create(
      (isKeyed2(collection) ? KeyedSeq2 : isIndexed2(collection) ? IndexedSeq2 : SetSeq2).prototype
    );
  }
  function cacheResultThrough2() {
    if (this._iter.cacheResult) {
      this._iter.cacheResult();
      this.size = this._iter.size;
      return this;
    }
    return Seq2.prototype.cacheResult.call(this);
  }
  function defaultComparator2(a4, b3) {
    if (a4 === void 0 && b3 === void 0) {
      return 0;
    }
    if (a4 === void 0) {
      return 1;
    }
    if (b3 === void 0) {
      return -1;
    }
    return a4 > b3 ? 1 : a4 < b3 ? -1 : 0;
  }
  function arrCopy2(arr, offset) {
    offset = offset || 0;
    var len = Math.max(0, arr.length - offset);
    var newArr = new Array(len);
    for (var ii = 0; ii < len; ii++) {
      newArr[ii] = arr[ii + offset];
    }
    return newArr;
  }
  function invariant2(condition, error) {
    if (!condition) {
      throw new Error(error);
    }
  }
  function assertNotInfinite2(size) {
    invariant2(
      size !== Infinity,
      "Cannot perform this action with an infinite size."
    );
  }
  function coerceKeyPath2(keyPath) {
    if (isArrayLike2(keyPath) && typeof keyPath !== "string") {
      return keyPath;
    }
    if (isOrdered2(keyPath)) {
      return keyPath.toArray();
    }
    throw new TypeError(
      "Invalid keyPath: expected Ordered Collection or Array: " + keyPath
    );
  }
  function isPlainObj(value) {
    return value && (typeof value.constructor !== "function" || value.constructor.name === "Object");
  }
  function isDataStructure2(value) {
    return typeof value === "object" && (isImmutable2(value) || Array.isArray(value) || isPlainObj(value));
  }
  function quoteString2(value) {
    try {
      return typeof value === "string" ? JSON.stringify(value) : String(value);
    } catch (_ignoreError) {
      return JSON.stringify(value);
    }
  }
  function has5(collection, key) {
    return isImmutable2(collection) ? collection.has(key) : isDataStructure2(collection) && hasOwnProperty2.call(collection, key);
  }
  function get13(collection, key, notSetValue) {
    return isImmutable2(collection) ? collection.get(key, notSetValue) : !has5(collection, key) ? notSetValue : typeof collection.get === "function" ? collection.get(key) : collection[key];
  }
  function shallowCopy2(from) {
    if (Array.isArray(from)) {
      return arrCopy2(from);
    }
    var to = {};
    for (var key in from) {
      if (hasOwnProperty2.call(from, key)) {
        to[key] = from[key];
      }
    }
    return to;
  }
  function remove4(collection, key) {
    if (!isDataStructure2(collection)) {
      throw new TypeError(
        "Cannot update non-data-structure value: " + collection
      );
    }
    if (isImmutable2(collection)) {
      if (!collection.remove) {
        throw new TypeError(
          "Cannot update immutable value without .remove() method: " + collection
        );
      }
      return collection.remove(key);
    }
    if (!hasOwnProperty2.call(collection, key)) {
      return collection;
    }
    var collectionCopy = shallowCopy2(collection);
    if (Array.isArray(collectionCopy)) {
      collectionCopy.splice(key, 1);
    } else {
      delete collectionCopy[key];
    }
    return collectionCopy;
  }
  function set5(collection, key, value) {
    if (!isDataStructure2(collection)) {
      throw new TypeError(
        "Cannot update non-data-structure value: " + collection
      );
    }
    if (isImmutable2(collection)) {
      if (!collection.set) {
        throw new TypeError(
          "Cannot update immutable value without .set() method: " + collection
        );
      }
      return collection.set(key, value);
    }
    if (hasOwnProperty2.call(collection, key) && value === collection[key]) {
      return collection;
    }
    var collectionCopy = shallowCopy2(collection);
    collectionCopy[key] = value;
    return collectionCopy;
  }
  function updateIn2(collection, keyPath, notSetValue, updater) {
    if (!updater) {
      updater = notSetValue;
      notSetValue = void 0;
    }
    var updatedValue = updateInDeeply2(
      isImmutable2(collection),
      collection,
      coerceKeyPath2(keyPath),
      0,
      notSetValue,
      updater
    );
    return updatedValue === NOT_SET2 ? notSetValue : updatedValue;
  }
  function updateInDeeply2(inImmutable, existing, keyPath, i4, notSetValue, updater) {
    var wasNotSet = existing === NOT_SET2;
    if (i4 === keyPath.length) {
      var existingValue = wasNotSet ? notSetValue : existing;
      var newValue = updater(existingValue);
      return newValue === existingValue ? existing : newValue;
    }
    if (!wasNotSet && !isDataStructure2(existing)) {
      throw new TypeError(
        "Cannot update within non-data-structure value in path [" + keyPath.slice(0, i4).map(quoteString2) + "]: " + existing
      );
    }
    var key = keyPath[i4];
    var nextExisting = wasNotSet ? NOT_SET2 : get13(existing, key, NOT_SET2);
    var nextUpdated = updateInDeeply2(
      nextExisting === NOT_SET2 ? inImmutable : isImmutable2(nextExisting),
      nextExisting,
      keyPath,
      i4 + 1,
      notSetValue,
      updater
    );
    return nextUpdated === nextExisting ? existing : nextUpdated === NOT_SET2 ? remove4(existing, key) : set5(
      wasNotSet ? inImmutable ? emptyMap2() : {} : existing,
      key,
      nextUpdated
    );
  }
  function setIn$12(collection, keyPath, value) {
    return updateIn2(collection, keyPath, NOT_SET2, function() {
      return value;
    });
  }
  function setIn$$1(keyPath, v3) {
    return setIn$12(this, keyPath, v3);
  }
  function removeIn2(collection, keyPath) {
    return updateIn2(collection, keyPath, function() {
      return NOT_SET2;
    });
  }
  function deleteIn2(keyPath) {
    return removeIn2(this, keyPath);
  }
  function update$12(collection, key, notSetValue, updater) {
    return updateIn2(collection, [key], notSetValue, updater);
  }
  function update$$1(key, notSetValue, updater) {
    return arguments.length === 1 ? key(this) : update$12(this, key, notSetValue, updater);
  }
  function updateIn$12(keyPath, notSetValue, updater) {
    return updateIn2(this, keyPath, notSetValue, updater);
  }
  function merge() {
    var iters = [], len = arguments.length;
    while (len--)
      iters[len] = arguments[len];
    return mergeIntoKeyedWith2(this, iters);
  }
  function mergeWith(merger) {
    var iters = [], len = arguments.length - 1;
    while (len-- > 0)
      iters[len] = arguments[len + 1];
    if (typeof merger !== "function") {
      throw new TypeError("Invalid merger function: " + merger);
    }
    return mergeIntoKeyedWith2(this, iters, merger);
  }
  function mergeIntoKeyedWith2(collection, collections, merger) {
    var iters = [];
    for (var ii = 0; ii < collections.length; ii++) {
      var collection$1 = KeyedCollection2(collections[ii]);
      if (collection$1.size !== 0) {
        iters.push(collection$1);
      }
    }
    if (iters.length === 0) {
      return collection;
    }
    if (collection.toSeq().size === 0 && !collection.__ownerID && iters.length === 1) {
      return collection.constructor(iters[0]);
    }
    return collection.withMutations(function(collection2) {
      var mergeIntoCollection = merger ? function(value, key) {
        update$12(
          collection2,
          key,
          NOT_SET2,
          function(oldVal) {
            return oldVal === NOT_SET2 ? value : merger(oldVal, value, key);
          }
        );
      } : function(value, key) {
        collection2.set(key, value);
      };
      for (var ii2 = 0; ii2 < iters.length; ii2++) {
        iters[ii2].forEach(mergeIntoCollection);
      }
    });
  }
  function mergeDeepWithSources2(collection, sources, merger) {
    return mergeWithSources2(collection, sources, deepMergerWith2(merger));
  }
  function mergeWithSources2(collection, sources, merger) {
    if (!isDataStructure2(collection)) {
      throw new TypeError(
        "Cannot merge into non-data-structure value: " + collection
      );
    }
    if (isImmutable2(collection)) {
      return typeof merger === "function" && collection.mergeWith ? collection.mergeWith.apply(collection, [merger].concat(sources)) : collection.merge ? collection.merge.apply(collection, sources) : collection.concat.apply(collection, sources);
    }
    var isArray = Array.isArray(collection);
    var merged = collection;
    var Collection$$1 = isArray ? IndexedCollection2 : KeyedCollection2;
    var mergeItem = isArray ? function(value) {
      if (merged === collection) {
        merged = shallowCopy2(merged);
      }
      merged.push(value);
    } : function(value, key) {
      var hasVal = hasOwnProperty2.call(merged, key);
      var nextVal = hasVal && merger ? merger(merged[key], value, key) : value;
      if (!hasVal || nextVal !== merged[key]) {
        if (merged === collection) {
          merged = shallowCopy2(merged);
        }
        merged[key] = nextVal;
      }
    };
    for (var i4 = 0; i4 < sources.length; i4++) {
      Collection$$1(sources[i4]).forEach(mergeItem);
    }
    return merged;
  }
  function deepMergerWith2(merger) {
    function deepMerger(oldValue, newValue, key) {
      return isDataStructure2(oldValue) && isDataStructure2(newValue) ? mergeWithSources2(oldValue, [newValue], deepMerger) : merger ? merger(oldValue, newValue, key) : newValue;
    }
    return deepMerger;
  }
  function mergeDeep2() {
    var iters = [], len = arguments.length;
    while (len--)
      iters[len] = arguments[len];
    return mergeDeepWithSources2(this, iters);
  }
  function mergeDeepWith2(merger) {
    var iters = [], len = arguments.length - 1;
    while (len-- > 0)
      iters[len] = arguments[len + 1];
    return mergeDeepWithSources2(this, iters, merger);
  }
  function mergeIn2(keyPath) {
    var iters = [], len = arguments.length - 1;
    while (len-- > 0)
      iters[len] = arguments[len + 1];
    return updateIn2(this, keyPath, emptyMap2(), function(m3) {
      return mergeWithSources2(m3, iters);
    });
  }
  function mergeDeepIn2(keyPath) {
    var iters = [], len = arguments.length - 1;
    while (len-- > 0)
      iters[len] = arguments[len + 1];
    return updateIn2(
      this,
      keyPath,
      emptyMap2(),
      function(m3) {
        return mergeDeepWithSources2(m3, iters);
      }
    );
  }
  function withMutations2(fn) {
    var mutable = this.asMutable();
    fn(mutable);
    return mutable.wasAltered() ? mutable.__ensureOwner(this.__ownerID) : this;
  }
  function asMutable2() {
    return this.__ownerID ? this : this.__ensureOwner(new OwnerID2());
  }
  function asImmutable2() {
    return this.__ensureOwner();
  }
  function wasAltered3() {
    return this.__altered;
  }
  var Map3 = function(KeyedCollection$$1) {
    function Map4(value) {
      return value === null || value === void 0 ? emptyMap2() : isMap2(value) && !isOrdered2(value) && !isSorted(value) ? value : emptyMap2().withMutations(function(map5) {
        var iter = KeyedCollection$$1(value);
        assertNotInfinite2(iter.size);
        iter.forEach(function(v3, k3) {
          return map5.set(k3, v3);
        });
      });
    }
    if (KeyedCollection$$1)
      Map4.__proto__ = KeyedCollection$$1;
    Map4.prototype = Object.create(KeyedCollection$$1 && KeyedCollection$$1.prototype);
    Map4.prototype.constructor = Map4;
    Map4.of = function of() {
      var keyValues = [], len = arguments.length;
      while (len--)
        keyValues[len] = arguments[len];
      return emptyMap2().withMutations(function(map5) {
        for (var i4 = 0; i4 < keyValues.length; i4 += 2) {
          if (i4 + 1 >= keyValues.length) {
            throw new Error("Missing value for key: " + keyValues[i4]);
          }
          map5.set(keyValues[i4], keyValues[i4 + 1]);
        }
      });
    };
    Map4.prototype.toString = function toString8() {
      return this.__toString("Map {", "}");
    };
    Map4.prototype.get = function get24(k3, notSetValue) {
      return this._root ? this._root.get(0, void 0, k3, notSetValue) : notSetValue;
    };
    Map4.prototype.set = function set7(k3, v3) {
      return updateMap2(this, k3, v3);
    };
    Map4.prototype.remove = function remove7(k3) {
      return updateMap2(this, k3, NOT_SET2);
    };
    Map4.prototype.deleteAll = function deleteAll(keys3) {
      var collection = Collection3(keys3);
      if (collection.size === 0) {
        return this;
      }
      return this.withMutations(function(map5) {
        collection.forEach(function(key) {
          return map5.remove(key);
        });
      });
    };
    Map4.prototype.clear = function clear3() {
      if (this.size === 0) {
        return this;
      }
      if (this.__ownerID) {
        this.size = 0;
        this._root = null;
        this.__hash = void 0;
        this.__altered = true;
        return this;
      }
      return emptyMap2();
    };
    Map4.prototype.sort = function sort3(comparator) {
      return OrderedMap2(sortFactory2(this, comparator));
    };
    Map4.prototype.sortBy = function sortBy3(mapper, comparator) {
      return OrderedMap2(sortFactory2(this, comparator, mapper));
    };
    Map4.prototype.map = function map5(mapper, context) {
      return this.withMutations(function(map6) {
        map6.forEach(function(value, key) {
          map6.set(key, mapper.call(context, value, key, map6));
        });
      });
    };
    Map4.prototype.__iterator = function __iterator3(type2, reverse5) {
      return new MapIterator2(this, type2, reverse5);
    };
    Map4.prototype.__iterate = function __iterate3(fn, reverse5) {
      var this$1 = this;
      var iterations = 0;
      this._root && this._root.iterate(function(entry) {
        iterations++;
        return fn(entry[1], entry[0], this$1);
      }, reverse5);
      return iterations;
    };
    Map4.prototype.__ensureOwner = function __ensureOwner3(ownerID) {
      if (ownerID === this.__ownerID) {
        return this;
      }
      if (!ownerID) {
        if (this.size === 0) {
          return emptyMap2();
        }
        this.__ownerID = ownerID;
        this.__altered = false;
        return this;
      }
      return makeMap2(this.size, this._root, ownerID, this.__hash);
    };
    return Map4;
  }(KeyedCollection2);
  Map3.isMap = isMap2;
  var MapPrototype2 = Map3.prototype;
  MapPrototype2[IS_MAP_SYMBOL2] = true;
  MapPrototype2[DELETE2] = MapPrototype2.remove;
  MapPrototype2.removeAll = MapPrototype2.deleteAll;
  MapPrototype2.setIn = setIn$$1;
  MapPrototype2.removeIn = MapPrototype2.deleteIn = deleteIn2;
  MapPrototype2.update = update$$1;
  MapPrototype2.updateIn = updateIn$12;
  MapPrototype2.merge = MapPrototype2.concat = merge;
  MapPrototype2.mergeWith = mergeWith;
  MapPrototype2.mergeDeep = mergeDeep2;
  MapPrototype2.mergeDeepWith = mergeDeepWith2;
  MapPrototype2.mergeIn = mergeIn2;
  MapPrototype2.mergeDeepIn = mergeDeepIn2;
  MapPrototype2.withMutations = withMutations2;
  MapPrototype2.wasAltered = wasAltered3;
  MapPrototype2.asImmutable = asImmutable2;
  MapPrototype2["@@transducer/init"] = MapPrototype2.asMutable = asMutable2;
  MapPrototype2["@@transducer/step"] = function(result, arr) {
    return result.set(arr[0], arr[1]);
  };
  MapPrototype2["@@transducer/result"] = function(obj) {
    return obj.asImmutable();
  };
  var ArrayMapNode3 = function ArrayMapNode4(ownerID, entries5) {
    this.ownerID = ownerID;
    this.entries = entries5;
  };
  ArrayMapNode3.prototype.get = function get14(shift, keyHash, key, notSetValue) {
    var entries5 = this.entries;
    for (var ii = 0, len = entries5.length; ii < len; ii++) {
      if (is2(key, entries5[ii][0])) {
        return entries5[ii][1];
      }
    }
    return notSetValue;
  };
  ArrayMapNode3.prototype.update = function update$$12(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {
    var removed = value === NOT_SET2;
    var entries5 = this.entries;
    var idx = 0;
    var len = entries5.length;
    for (; idx < len; idx++) {
      if (is2(key, entries5[idx][0])) {
        break;
      }
    }
    var exists = idx < len;
    if (exists ? entries5[idx][1] === value : removed) {
      return this;
    }
    SetRef2(didAlter);
    (removed || !exists) && SetRef2(didChangeSize);
    if (removed && entries5.length === 1) {
      return;
    }
    if (!exists && !removed && entries5.length >= MAX_ARRAY_MAP_SIZE2) {
      return createNodes2(ownerID, entries5, key, value);
    }
    var isEditable = ownerID && ownerID === this.ownerID;
    var newEntries = isEditable ? entries5 : arrCopy2(entries5);
    if (exists) {
      if (removed) {
        idx === len - 1 ? newEntries.pop() : newEntries[idx] = newEntries.pop();
      } else {
        newEntries[idx] = [key, value];
      }
    } else {
      newEntries.push([key, value]);
    }
    if (isEditable) {
      this.entries = newEntries;
      return this;
    }
    return new ArrayMapNode3(ownerID, newEntries);
  };
  var BitmapIndexedNode3 = function BitmapIndexedNode4(ownerID, bitmap, nodes) {
    this.ownerID = ownerID;
    this.bitmap = bitmap;
    this.nodes = nodes;
  };
  BitmapIndexedNode3.prototype.get = function get15(shift, keyHash, key, notSetValue) {
    if (keyHash === void 0) {
      keyHash = hash2(key);
    }
    var bit = 1 << ((shift === 0 ? keyHash : keyHash >>> shift) & MASK2);
    var bitmap = this.bitmap;
    return (bitmap & bit) === 0 ? notSetValue : this.nodes[popCount2(bitmap & bit - 1)].get(
      shift + SHIFT2,
      keyHash,
      key,
      notSetValue
    );
  };
  BitmapIndexedNode3.prototype.update = function update$$13(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {
    if (keyHash === void 0) {
      keyHash = hash2(key);
    }
    var keyHashFrag = (shift === 0 ? keyHash : keyHash >>> shift) & MASK2;
    var bit = 1 << keyHashFrag;
    var bitmap = this.bitmap;
    var exists = (bitmap & bit) !== 0;
    if (!exists && value === NOT_SET2) {
      return this;
    }
    var idx = popCount2(bitmap & bit - 1);
    var nodes = this.nodes;
    var node = exists ? nodes[idx] : void 0;
    var newNode = updateNode2(
      node,
      ownerID,
      shift + SHIFT2,
      keyHash,
      key,
      value,
      didChangeSize,
      didAlter
    );
    if (newNode === node) {
      return this;
    }
    if (!exists && newNode && nodes.length >= MAX_BITMAP_INDEXED_SIZE2) {
      return expandNodes2(ownerID, nodes, bitmap, keyHashFrag, newNode);
    }
    if (exists && !newNode && nodes.length === 2 && isLeafNode2(nodes[idx ^ 1])) {
      return nodes[idx ^ 1];
    }
    if (exists && newNode && nodes.length === 1 && isLeafNode2(newNode)) {
      return newNode;
    }
    var isEditable = ownerID && ownerID === this.ownerID;
    var newBitmap = exists ? newNode ? bitmap : bitmap ^ bit : bitmap | bit;
    var newNodes = exists ? newNode ? setAt2(nodes, idx, newNode, isEditable) : spliceOut2(nodes, idx, isEditable) : spliceIn2(nodes, idx, newNode, isEditable);
    if (isEditable) {
      this.bitmap = newBitmap;
      this.nodes = newNodes;
      return this;
    }
    return new BitmapIndexedNode3(ownerID, newBitmap, newNodes);
  };
  var HashArrayMapNode3 = function HashArrayMapNode4(ownerID, count4, nodes) {
    this.ownerID = ownerID;
    this.count = count4;
    this.nodes = nodes;
  };
  HashArrayMapNode3.prototype.get = function get16(shift, keyHash, key, notSetValue) {
    if (keyHash === void 0) {
      keyHash = hash2(key);
    }
    var idx = (shift === 0 ? keyHash : keyHash >>> shift) & MASK2;
    var node = this.nodes[idx];
    return node ? node.get(shift + SHIFT2, keyHash, key, notSetValue) : notSetValue;
  };
  HashArrayMapNode3.prototype.update = function update$$14(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {
    if (keyHash === void 0) {
      keyHash = hash2(key);
    }
    var idx = (shift === 0 ? keyHash : keyHash >>> shift) & MASK2;
    var removed = value === NOT_SET2;
    var nodes = this.nodes;
    var node = nodes[idx];
    if (removed && !node) {
      return this;
    }
    var newNode = updateNode2(
      node,
      ownerID,
      shift + SHIFT2,
      keyHash,
      key,
      value,
      didChangeSize,
      didAlter
    );
    if (newNode === node) {
      return this;
    }
    var newCount = this.count;
    if (!node) {
      newCount++;
    } else if (!newNode) {
      newCount--;
      if (newCount < MIN_HASH_ARRAY_MAP_SIZE2) {
        return packNodes2(ownerID, nodes, newCount, idx);
      }
    }
    var isEditable = ownerID && ownerID === this.ownerID;
    var newNodes = setAt2(nodes, idx, newNode, isEditable);
    if (isEditable) {
      this.count = newCount;
      this.nodes = newNodes;
      return this;
    }
    return new HashArrayMapNode3(ownerID, newCount, newNodes);
  };
  var HashCollisionNode3 = function HashCollisionNode4(ownerID, keyHash, entries5) {
    this.ownerID = ownerID;
    this.keyHash = keyHash;
    this.entries = entries5;
  };
  HashCollisionNode3.prototype.get = function get17(shift, keyHash, key, notSetValue) {
    var entries5 = this.entries;
    for (var ii = 0, len = entries5.length; ii < len; ii++) {
      if (is2(key, entries5[ii][0])) {
        return entries5[ii][1];
      }
    }
    return notSetValue;
  };
  HashCollisionNode3.prototype.update = function update$$15(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {
    if (keyHash === void 0) {
      keyHash = hash2(key);
    }
    var removed = value === NOT_SET2;
    if (keyHash !== this.keyHash) {
      if (removed) {
        return this;
      }
      SetRef2(didAlter);
      SetRef2(didChangeSize);
      return mergeIntoNode2(this, ownerID, shift, keyHash, [key, value]);
    }
    var entries5 = this.entries;
    var idx = 0;
    var len = entries5.length;
    for (; idx < len; idx++) {
      if (is2(key, entries5[idx][0])) {
        break;
      }
    }
    var exists = idx < len;
    if (exists ? entries5[idx][1] === value : removed) {
      return this;
    }
    SetRef2(didAlter);
    (removed || !exists) && SetRef2(didChangeSize);
    if (removed && len === 2) {
      return new ValueNode3(ownerID, this.keyHash, entries5[idx ^ 1]);
    }
    var isEditable = ownerID && ownerID === this.ownerID;
    var newEntries = isEditable ? entries5 : arrCopy2(entries5);
    if (exists) {
      if (removed) {
        idx === len - 1 ? newEntries.pop() : newEntries[idx] = newEntries.pop();
      } else {
        newEntries[idx] = [key, value];
      }
    } else {
      newEntries.push([key, value]);
    }
    if (isEditable) {
      this.entries = newEntries;
      return this;
    }
    return new HashCollisionNode3(ownerID, this.keyHash, newEntries);
  };
  var ValueNode3 = function ValueNode4(ownerID, keyHash, entry) {
    this.ownerID = ownerID;
    this.keyHash = keyHash;
    this.entry = entry;
  };
  ValueNode3.prototype.get = function get18(shift, keyHash, key, notSetValue) {
    return is2(key, this.entry[0]) ? this.entry[1] : notSetValue;
  };
  ValueNode3.prototype.update = function update$$16(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {
    var removed = value === NOT_SET2;
    var keyMatch = is2(key, this.entry[0]);
    if (keyMatch ? value === this.entry[1] : removed) {
      return this;
    }
    SetRef2(didAlter);
    if (removed) {
      SetRef2(didChangeSize);
      return;
    }
    if (keyMatch) {
      if (ownerID && ownerID === this.ownerID) {
        this.entry[1] = value;
        return this;
      }
      return new ValueNode3(ownerID, this.keyHash, [key, value]);
    }
    SetRef2(didChangeSize);
    return mergeIntoNode2(this, ownerID, shift, hash2(key), [key, value]);
  };
  ArrayMapNode3.prototype.iterate = HashCollisionNode3.prototype.iterate = function(fn, reverse5) {
    var entries5 = this.entries;
    for (var ii = 0, maxIndex = entries5.length - 1; ii <= maxIndex; ii++) {
      if (fn(entries5[reverse5 ? maxIndex - ii : ii]) === false) {
        return false;
      }
    }
  };
  BitmapIndexedNode3.prototype.iterate = HashArrayMapNode3.prototype.iterate = function(fn, reverse5) {
    var nodes = this.nodes;
    for (var ii = 0, maxIndex = nodes.length - 1; ii <= maxIndex; ii++) {
      var node = nodes[reverse5 ? maxIndex - ii : ii];
      if (node && node.iterate(fn, reverse5) === false) {
        return false;
      }
    }
  };
  ValueNode3.prototype.iterate = function(fn, reverse5) {
    return fn(this.entry);
  };
  var MapIterator2 = function(Iterator$$1) {
    function MapIterator3(map5, type2, reverse5) {
      this._type = type2;
      this._reverse = reverse5;
      this._stack = map5._root && mapIteratorFrame2(map5._root);
    }
    if (Iterator$$1)
      MapIterator3.__proto__ = Iterator$$1;
    MapIterator3.prototype = Object.create(Iterator$$1 && Iterator$$1.prototype);
    MapIterator3.prototype.constructor = MapIterator3;
    MapIterator3.prototype.next = function next() {
      var this$1 = this;
      var type2 = this._type;
      var stack = this._stack;
      while (stack) {
        var node = stack.node;
        var index = stack.index++;
        var maxIndex = void 0;
        if (node.entry) {
          if (index === 0) {
            return mapIteratorValue2(type2, node.entry);
          }
        } else if (node.entries) {
          maxIndex = node.entries.length - 1;
          if (index <= maxIndex) {
            return mapIteratorValue2(
              type2,
              node.entries[this$1._reverse ? maxIndex - index : index]
            );
          }
        } else {
          maxIndex = node.nodes.length - 1;
          if (index <= maxIndex) {
            var subNode = node.nodes[this$1._reverse ? maxIndex - index : index];
            if (subNode) {
              if (subNode.entry) {
                return mapIteratorValue2(type2, subNode.entry);
              }
              stack = this$1._stack = mapIteratorFrame2(subNode, stack);
            }
            continue;
          }
        }
        stack = this$1._stack = this$1._stack.__prev;
      }
      return iteratorDone2();
    };
    return MapIterator3;
  }(Iterator3);
  function mapIteratorValue2(type2, entry) {
    return iteratorValue2(type2, entry[0], entry[1]);
  }
  function mapIteratorFrame2(node, prev) {
    return {
      node,
      index: 0,
      __prev: prev
    };
  }
  function makeMap2(size, root2, ownerID, hash$$1) {
    var map5 = Object.create(MapPrototype2);
    map5.size = size;
    map5._root = root2;
    map5.__ownerID = ownerID;
    map5.__hash = hash$$1;
    map5.__altered = false;
    return map5;
  }
  var EMPTY_MAP2;
  function emptyMap2() {
    return EMPTY_MAP2 || (EMPTY_MAP2 = makeMap2(0));
  }
  function updateMap2(map5, k3, v3) {
    var newRoot;
    var newSize;
    if (!map5._root) {
      if (v3 === NOT_SET2) {
        return map5;
      }
      newSize = 1;
      newRoot = new ArrayMapNode3(map5.__ownerID, [[k3, v3]]);
    } else {
      var didChangeSize = MakeRef2();
      var didAlter = MakeRef2();
      newRoot = updateNode2(
        map5._root,
        map5.__ownerID,
        0,
        void 0,
        k3,
        v3,
        didChangeSize,
        didAlter
      );
      if (!GetRef(didAlter)) {
        return map5;
      }
      newSize = map5.size + (GetRef(didChangeSize) ? v3 === NOT_SET2 ? -1 : 1 : 0);
    }
    if (map5.__ownerID) {
      map5.size = newSize;
      map5._root = newRoot;
      map5.__hash = void 0;
      map5.__altered = true;
      return map5;
    }
    return newRoot ? makeMap2(newSize, newRoot) : emptyMap2();
  }
  function updateNode2(node, ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {
    if (!node) {
      if (value === NOT_SET2) {
        return node;
      }
      SetRef2(didAlter);
      SetRef2(didChangeSize);
      return new ValueNode3(ownerID, keyHash, [key, value]);
    }
    return node.update(
      ownerID,
      shift,
      keyHash,
      key,
      value,
      didChangeSize,
      didAlter
    );
  }
  function isLeafNode2(node) {
    return node.constructor === ValueNode3 || node.constructor === HashCollisionNode3;
  }
  function mergeIntoNode2(node, ownerID, shift, keyHash, entry) {
    if (node.keyHash === keyHash) {
      return new HashCollisionNode3(ownerID, keyHash, [node.entry, entry]);
    }
    var idx1 = (shift === 0 ? node.keyHash : node.keyHash >>> shift) & MASK2;
    var idx2 = (shift === 0 ? keyHash : keyHash >>> shift) & MASK2;
    var newNode;
    var nodes = idx1 === idx2 ? [mergeIntoNode2(node, ownerID, shift + SHIFT2, keyHash, entry)] : (newNode = new ValueNode3(ownerID, keyHash, entry), idx1 < idx2 ? [node, newNode] : [newNode, node]);
    return new BitmapIndexedNode3(ownerID, 1 << idx1 | 1 << idx2, nodes);
  }
  function createNodes2(ownerID, entries5, key, value) {
    if (!ownerID) {
      ownerID = new OwnerID2();
    }
    var node = new ValueNode3(ownerID, hash2(key), [key, value]);
    for (var ii = 0; ii < entries5.length; ii++) {
      var entry = entries5[ii];
      node = node.update(ownerID, 0, void 0, entry[0], entry[1]);
    }
    return node;
  }
  function packNodes2(ownerID, nodes, count4, excluding) {
    var bitmap = 0;
    var packedII = 0;
    var packedNodes = new Array(count4);
    for (var ii = 0, bit = 1, len = nodes.length; ii < len; ii++, bit <<= 1) {
      var node = nodes[ii];
      if (node !== void 0 && ii !== excluding) {
        bitmap |= bit;
        packedNodes[packedII++] = node;
      }
    }
    return new BitmapIndexedNode3(ownerID, bitmap, packedNodes);
  }
  function expandNodes2(ownerID, nodes, bitmap, including, node) {
    var count4 = 0;
    var expandedNodes = new Array(SIZE2);
    for (var ii = 0; bitmap !== 0; ii++, bitmap >>>= 1) {
      expandedNodes[ii] = bitmap & 1 ? nodes[count4++] : void 0;
    }
    expandedNodes[including] = node;
    return new HashArrayMapNode3(ownerID, count4 + 1, expandedNodes);
  }
  function popCount2(x3) {
    x3 -= x3 >> 1 & 1431655765;
    x3 = (x3 & 858993459) + (x3 >> 2 & 858993459);
    x3 = x3 + (x3 >> 4) & 252645135;
    x3 += x3 >> 8;
    x3 += x3 >> 16;
    return x3 & 127;
  }
  function setAt2(array3, idx, val, canEdit) {
    var newArray = canEdit ? array3 : arrCopy2(array3);
    newArray[idx] = val;
    return newArray;
  }
  function spliceIn2(array3, idx, val, canEdit) {
    var newLen = array3.length + 1;
    if (canEdit && idx + 1 === newLen) {
      array3[idx] = val;
      return array3;
    }
    var newArray = new Array(newLen);
    var after = 0;
    for (var ii = 0; ii < newLen; ii++) {
      if (ii === idx) {
        newArray[ii] = val;
        after = -1;
      } else {
        newArray[ii] = array3[ii + after];
      }
    }
    return newArray;
  }
  function spliceOut2(array3, idx, canEdit) {
    var newLen = array3.length - 1;
    if (canEdit && idx === newLen) {
      array3.pop();
      return array3;
    }
    var newArray = new Array(newLen);
    var after = 0;
    for (var ii = 0; ii < newLen; ii++) {
      if (ii === idx) {
        after = 1;
      }
      newArray[ii] = array3[ii + after];
    }
    return newArray;
  }
  var MAX_ARRAY_MAP_SIZE2 = SIZE2 / 4;
  var MAX_BITMAP_INDEXED_SIZE2 = SIZE2 / 2;
  var MIN_HASH_ARRAY_MAP_SIZE2 = SIZE2 / 4;
  var IS_LIST_SYMBOL2 = "@@__IMMUTABLE_LIST__@@";
  function isList2(maybeList) {
    return Boolean(maybeList && maybeList[IS_LIST_SYMBOL2]);
  }
  var List2 = function(IndexedCollection$$1) {
    function List3(value) {
      var empty2 = emptyList2();
      if (value === null || value === void 0) {
        return empty2;
      }
      if (isList2(value)) {
        return value;
      }
      var iter = IndexedCollection$$1(value);
      var size = iter.size;
      if (size === 0) {
        return empty2;
      }
      assertNotInfinite2(size);
      if (size > 0 && size < SIZE2) {
        return makeList2(0, size, SHIFT2, null, new VNode3(iter.toArray()));
      }
      return empty2.withMutations(function(list) {
        list.setSize(size);
        iter.forEach(function(v3, i4) {
          return list.set(i4, v3);
        });
      });
    }
    if (IndexedCollection$$1)
      List3.__proto__ = IndexedCollection$$1;
    List3.prototype = Object.create(IndexedCollection$$1 && IndexedCollection$$1.prototype);
    List3.prototype.constructor = List3;
    List3.of = function of() {
      return this(arguments);
    };
    List3.prototype.toString = function toString8() {
      return this.__toString("List [", "]");
    };
    List3.prototype.get = function get24(index, notSetValue) {
      index = wrapIndex2(this, index);
      if (index >= 0 && index < this.size) {
        index += this._origin;
        var node = listNodeFor2(this, index);
        return node && node.array[index & MASK2];
      }
      return notSetValue;
    };
    List3.prototype.set = function set7(index, value) {
      return updateList2(this, index, value);
    };
    List3.prototype.remove = function remove7(index) {
      return !this.has(index) ? this : index === 0 ? this.shift() : index === this.size - 1 ? this.pop() : this.splice(index, 1);
    };
    List3.prototype.insert = function insert(index, value) {
      return this.splice(index, 0, value);
    };
    List3.prototype.clear = function clear3() {
      if (this.size === 0) {
        return this;
      }
      if (this.__ownerID) {
        this.size = this._origin = this._capacity = 0;
        this._level = SHIFT2;
        this._root = this._tail = null;
        this.__hash = void 0;
        this.__altered = true;
        return this;
      }
      return emptyList2();
    };
    List3.prototype.push = function push() {
      var values3 = arguments;
      var oldSize = this.size;
      return this.withMutations(function(list) {
        setListBounds2(list, 0, oldSize + values3.length);
        for (var ii = 0; ii < values3.length; ii++) {
          list.set(oldSize + ii, values3[ii]);
        }
      });
    };
    List3.prototype.pop = function pop() {
      return setListBounds2(this, 0, -1);
    };
    List3.prototype.unshift = function unshift() {
      var values3 = arguments;
      return this.withMutations(function(list) {
        setListBounds2(list, -values3.length);
        for (var ii = 0; ii < values3.length; ii++) {
          list.set(ii, values3[ii]);
        }
      });
    };
    List3.prototype.shift = function shift() {
      return setListBounds2(this, 1);
    };
    List3.prototype.concat = function concat3() {
      var arguments$1 = arguments;
      var seqs = [];
      for (var i4 = 0; i4 < arguments.length; i4++) {
        var argument = arguments$1[i4];
        var seq = IndexedCollection$$1(
          typeof argument !== "string" && hasIterator2(argument) ? argument : [argument]
        );
        if (seq.size !== 0) {
          seqs.push(seq);
        }
      }
      if (seqs.length === 0) {
        return this;
      }
      if (this.size === 0 && !this.__ownerID && seqs.length === 1) {
        return this.constructor(seqs[0]);
      }
      return this.withMutations(function(list) {
        seqs.forEach(function(seq2) {
          return seq2.forEach(function(value) {
            return list.push(value);
          });
        });
      });
    };
    List3.prototype.setSize = function setSize(size) {
      return setListBounds2(this, 0, size);
    };
    List3.prototype.map = function map5(mapper, context) {
      var this$1 = this;
      return this.withMutations(function(list) {
        for (var i4 = 0; i4 < this$1.size; i4++) {
          list.set(i4, mapper.call(context, list.get(i4), i4, list));
        }
      });
    };
    List3.prototype.slice = function slice7(begin, end) {
      var size = this.size;
      if (wholeSlice2(begin, end, size)) {
        return this;
      }
      return setListBounds2(
        this,
        resolveBegin2(begin, size),
        resolveEnd2(end, size)
      );
    };
    List3.prototype.__iterator = function __iterator3(type2, reverse5) {
      var index = reverse5 ? this.size : 0;
      var values3 = iterateList2(this, reverse5);
      return new Iterator3(function() {
        var value = values3();
        return value === DONE2 ? iteratorDone2() : iteratorValue2(type2, reverse5 ? --index : index++, value);
      });
    };
    List3.prototype.__iterate = function __iterate3(fn, reverse5) {
      var this$1 = this;
      var index = reverse5 ? this.size : 0;
      var values3 = iterateList2(this, reverse5);
      var value;
      while ((value = values3()) !== DONE2) {
        if (fn(value, reverse5 ? --index : index++, this$1) === false) {
          break;
        }
      }
      return index;
    };
    List3.prototype.__ensureOwner = function __ensureOwner3(ownerID) {
      if (ownerID === this.__ownerID) {
        return this;
      }
      if (!ownerID) {
        if (this.size === 0) {
          return emptyList2();
        }
        this.__ownerID = ownerID;
        this.__altered = false;
        return this;
      }
      return makeList2(
        this._origin,
        this._capacity,
        this._level,
        this._root,
        this._tail,
        ownerID,
        this.__hash
      );
    };
    return List3;
  }(IndexedCollection2);
  List2.isList = isList2;
  var ListPrototype2 = List2.prototype;
  ListPrototype2[IS_LIST_SYMBOL2] = true;
  ListPrototype2[DELETE2] = ListPrototype2.remove;
  ListPrototype2.merge = ListPrototype2.concat;
  ListPrototype2.setIn = setIn$$1;
  ListPrototype2.deleteIn = ListPrototype2.removeIn = deleteIn2;
  ListPrototype2.update = update$$1;
  ListPrototype2.updateIn = updateIn$12;
  ListPrototype2.mergeIn = mergeIn2;
  ListPrototype2.mergeDeepIn = mergeDeepIn2;
  ListPrototype2.withMutations = withMutations2;
  ListPrototype2.wasAltered = wasAltered3;
  ListPrototype2.asImmutable = asImmutable2;
  ListPrototype2["@@transducer/init"] = ListPrototype2.asMutable = asMutable2;
  ListPrototype2["@@transducer/step"] = function(result, arr) {
    return result.push(arr);
  };
  ListPrototype2["@@transducer/result"] = function(obj) {
    return obj.asImmutable();
  };
  var VNode3 = function VNode4(array3, ownerID) {
    this.array = array3;
    this.ownerID = ownerID;
  };
  VNode3.prototype.removeBefore = function removeBefore2(ownerID, level, index) {
    if (index === level ? 1 << level : this.array.length === 0) {
      return this;
    }
    var originIndex = index >>> level & MASK2;
    if (originIndex >= this.array.length) {
      return new VNode3([], ownerID);
    }
    var removingFirst = originIndex === 0;
    var newChild;
    if (level > 0) {
      var oldChild = this.array[originIndex];
      newChild = oldChild && oldChild.removeBefore(ownerID, level - SHIFT2, index);
      if (newChild === oldChild && removingFirst) {
        return this;
      }
    }
    if (removingFirst && !newChild) {
      return this;
    }
    var editable = editableVNode2(this, ownerID);
    if (!removingFirst) {
      for (var ii = 0; ii < originIndex; ii++) {
        editable.array[ii] = void 0;
      }
    }
    if (newChild) {
      editable.array[originIndex] = newChild;
    }
    return editable;
  };
  VNode3.prototype.removeAfter = function removeAfter2(ownerID, level, index) {
    if (index === (level ? 1 << level : 0) || this.array.length === 0) {
      return this;
    }
    var sizeIndex = index - 1 >>> level & MASK2;
    if (sizeIndex >= this.array.length) {
      return this;
    }
    var newChild;
    if (level > 0) {
      var oldChild = this.array[sizeIndex];
      newChild = oldChild && oldChild.removeAfter(ownerID, level - SHIFT2, index);
      if (newChild === oldChild && sizeIndex === this.array.length - 1) {
        return this;
      }
    }
    var editable = editableVNode2(this, ownerID);
    editable.array.splice(sizeIndex + 1);
    if (newChild) {
      editable.array[sizeIndex] = newChild;
    }
    return editable;
  };
  var DONE2 = {};
  function iterateList2(list, reverse5) {
    var left2 = list._origin;
    var right2 = list._capacity;
    var tailPos = getTailOffset2(right2);
    var tail = list._tail;
    return iterateNodeOrLeaf(list._root, list._level, 0);
    function iterateNodeOrLeaf(node, level, offset) {
      return level === 0 ? iterateLeaf(node, offset) : iterateNode(node, level, offset);
    }
    function iterateLeaf(node, offset) {
      var array3 = offset === tailPos ? tail && tail.array : node && node.array;
      var from = offset > left2 ? 0 : left2 - offset;
      var to = right2 - offset;
      if (to > SIZE2) {
        to = SIZE2;
      }
      return function() {
        if (from === to) {
          return DONE2;
        }
        var idx = reverse5 ? --to : from++;
        return array3 && array3[idx];
      };
    }
    function iterateNode(node, level, offset) {
      var values3;
      var array3 = node && node.array;
      var from = offset > left2 ? 0 : left2 - offset >> level;
      var to = (right2 - offset >> level) + 1;
      if (to > SIZE2) {
        to = SIZE2;
      }
      return function() {
        while (true) {
          if (values3) {
            var value = values3();
            if (value !== DONE2) {
              return value;
            }
            values3 = null;
          }
          if (from === to) {
            return DONE2;
          }
          var idx = reverse5 ? --to : from++;
          values3 = iterateNodeOrLeaf(
            array3 && array3[idx],
            level - SHIFT2,
            offset + (idx << level)
          );
        }
      };
    }
  }
  function makeList2(origin, capacity, level, root2, tail, ownerID, hash3) {
    var list = Object.create(ListPrototype2);
    list.size = capacity - origin;
    list._origin = origin;
    list._capacity = capacity;
    list._level = level;
    list._root = root2;
    list._tail = tail;
    list.__ownerID = ownerID;
    list.__hash = hash3;
    list.__altered = false;
    return list;
  }
  var EMPTY_LIST;
  function emptyList2() {
    return EMPTY_LIST || (EMPTY_LIST = makeList2(0, 0, SHIFT2));
  }
  function updateList2(list, index, value) {
    index = wrapIndex2(list, index);
    if (index !== index) {
      return list;
    }
    if (index >= list.size || index < 0) {
      return list.withMutations(function(list2) {
        index < 0 ? setListBounds2(list2, index).set(0, value) : setListBounds2(list2, 0, index + 1).set(index, value);
      });
    }
    index += list._origin;
    var newTail = list._tail;
    var newRoot = list._root;
    var didAlter = MakeRef2();
    if (index >= getTailOffset2(list._capacity)) {
      newTail = updateVNode2(newTail, list.__ownerID, 0, index, value, didAlter);
    } else {
      newRoot = updateVNode2(
        newRoot,
        list.__ownerID,
        list._level,
        index,
        value,
        didAlter
      );
    }
    if (!GetRef(didAlter)) {
      return list;
    }
    if (list.__ownerID) {
      list._root = newRoot;
      list._tail = newTail;
      list.__hash = void 0;
      list.__altered = true;
      return list;
    }
    return makeList2(list._origin, list._capacity, list._level, newRoot, newTail);
  }
  function updateVNode2(node, ownerID, level, index, value, didAlter) {
    var idx = index >>> level & MASK2;
    var nodeHas = node && idx < node.array.length;
    if (!nodeHas && value === void 0) {
      return node;
    }
    var newNode;
    if (level > 0) {
      var lowerNode = node && node.array[idx];
      var newLowerNode = updateVNode2(
        lowerNode,
        ownerID,
        level - SHIFT2,
        index,
        value,
        didAlter
      );
      if (newLowerNode === lowerNode) {
        return node;
      }
      newNode = editableVNode2(node, ownerID);
      newNode.array[idx] = newLowerNode;
      return newNode;
    }
    if (nodeHas && node.array[idx] === value) {
      return node;
    }
    if (didAlter) {
      SetRef2(didAlter);
    }
    newNode = editableVNode2(node, ownerID);
    if (value === void 0 && idx === newNode.array.length - 1) {
      newNode.array.pop();
    } else {
      newNode.array[idx] = value;
    }
    return newNode;
  }
  function editableVNode2(node, ownerID) {
    if (ownerID && node && ownerID === node.ownerID) {
      return node;
    }
    return new VNode3(node ? node.array.slice() : [], ownerID);
  }
  function listNodeFor2(list, rawIndex) {
    if (rawIndex >= getTailOffset2(list._capacity)) {
      return list._tail;
    }
    if (rawIndex < 1 << list._level + SHIFT2) {
      var node = list._root;
      var level = list._level;
      while (node && level > 0) {
        node = node.array[rawIndex >>> level & MASK2];
        level -= SHIFT2;
      }
      return node;
    }
  }
  function setListBounds2(list, begin, end) {
    if (begin !== void 0) {
      begin |= 0;
    }
    if (end !== void 0) {
      end |= 0;
    }
    var owner = list.__ownerID || new OwnerID2();
    var oldOrigin = list._origin;
    var oldCapacity = list._capacity;
    var newOrigin = oldOrigin + begin;
    var newCapacity = end === void 0 ? oldCapacity : end < 0 ? oldCapacity + end : oldOrigin + end;
    if (newOrigin === oldOrigin && newCapacity === oldCapacity) {
      return list;
    }
    if (newOrigin >= newCapacity) {
      return list.clear();
    }
    var newLevel = list._level;
    var newRoot = list._root;
    var offsetShift = 0;
    while (newOrigin + offsetShift < 0) {
      newRoot = new VNode3(
        newRoot && newRoot.array.length ? [void 0, newRoot] : [],
        owner
      );
      newLevel += SHIFT2;
      offsetShift += 1 << newLevel;
    }
    if (offsetShift) {
      newOrigin += offsetShift;
      oldOrigin += offsetShift;
      newCapacity += offsetShift;
      oldCapacity += offsetShift;
    }
    var oldTailOffset = getTailOffset2(oldCapacity);
    var newTailOffset = getTailOffset2(newCapacity);
    while (newTailOffset >= 1 << newLevel + SHIFT2) {
      newRoot = new VNode3(
        newRoot && newRoot.array.length ? [newRoot] : [],
        owner
      );
      newLevel += SHIFT2;
    }
    var oldTail = list._tail;
    var newTail = newTailOffset < oldTailOffset ? listNodeFor2(list, newCapacity - 1) : newTailOffset > oldTailOffset ? new VNode3([], owner) : oldTail;
    if (oldTail && newTailOffset > oldTailOffset && newOrigin < oldCapacity && oldTail.array.length) {
      newRoot = editableVNode2(newRoot, owner);
      var node = newRoot;
      for (var level = newLevel; level > SHIFT2; level -= SHIFT2) {
        var idx = oldTailOffset >>> level & MASK2;
        node = node.array[idx] = editableVNode2(node.array[idx], owner);
      }
      node.array[oldTailOffset >>> SHIFT2 & MASK2] = oldTail;
    }
    if (newCapacity < oldCapacity) {
      newTail = newTail && newTail.removeAfter(owner, 0, newCapacity);
    }
    if (newOrigin >= newTailOffset) {
      newOrigin -= newTailOffset;
      newCapacity -= newTailOffset;
      newLevel = SHIFT2;
      newRoot = null;
      newTail = newTail && newTail.removeBefore(owner, 0, newOrigin);
    } else if (newOrigin > oldOrigin || newTailOffset < oldTailOffset) {
      offsetShift = 0;
      while (newRoot) {
        var beginIndex = newOrigin >>> newLevel & MASK2;
        if (beginIndex !== newTailOffset >>> newLevel & MASK2) {
          break;
        }
        if (beginIndex) {
          offsetShift += (1 << newLevel) * beginIndex;
        }
        newLevel -= SHIFT2;
        newRoot = newRoot.array[beginIndex];
      }
      if (newRoot && newOrigin > oldOrigin) {
        newRoot = newRoot.removeBefore(owner, newLevel, newOrigin - offsetShift);
      }
      if (newRoot && newTailOffset < oldTailOffset) {
        newRoot = newRoot.removeAfter(
          owner,
          newLevel,
          newTailOffset - offsetShift
        );
      }
      if (offsetShift) {
        newOrigin -= offsetShift;
        newCapacity -= offsetShift;
      }
    }
    if (list.__ownerID) {
      list.size = newCapacity - newOrigin;
      list._origin = newOrigin;
      list._capacity = newCapacity;
      list._level = newLevel;
      list._root = newRoot;
      list._tail = newTail;
      list.__hash = void 0;
      list.__altered = true;
      return list;
    }
    return makeList2(newOrigin, newCapacity, newLevel, newRoot, newTail);
  }
  function getTailOffset2(size) {
    return size < SIZE2 ? 0 : size - 1 >>> SHIFT2 << SHIFT2;
  }
  var OrderedMap2 = function(Map$$1) {
    function OrderedMap3(value) {
      return value === null || value === void 0 ? emptyOrderedMap2() : isOrderedMap2(value) ? value : emptyOrderedMap2().withMutations(function(map5) {
        var iter = KeyedCollection2(value);
        assertNotInfinite2(iter.size);
        iter.forEach(function(v3, k3) {
          return map5.set(k3, v3);
        });
      });
    }
    if (Map$$1)
      OrderedMap3.__proto__ = Map$$1;
    OrderedMap3.prototype = Object.create(Map$$1 && Map$$1.prototype);
    OrderedMap3.prototype.constructor = OrderedMap3;
    OrderedMap3.of = function of() {
      return this(arguments);
    };
    OrderedMap3.prototype.toString = function toString8() {
      return this.__toString("OrderedMap {", "}");
    };
    OrderedMap3.prototype.get = function get24(k3, notSetValue) {
      var index = this._map.get(k3);
      return index !== void 0 ? this._list.get(index)[1] : notSetValue;
    };
    OrderedMap3.prototype.clear = function clear3() {
      if (this.size === 0) {
        return this;
      }
      if (this.__ownerID) {
        this.size = 0;
        this._map.clear();
        this._list.clear();
        return this;
      }
      return emptyOrderedMap2();
    };
    OrderedMap3.prototype.set = function set7(k3, v3) {
      return updateOrderedMap2(this, k3, v3);
    };
    OrderedMap3.prototype.remove = function remove7(k3) {
      return updateOrderedMap2(this, k3, NOT_SET2);
    };
    OrderedMap3.prototype.wasAltered = function wasAltered5() {
      return this._map.wasAltered() || this._list.wasAltered();
    };
    OrderedMap3.prototype.__iterate = function __iterate3(fn, reverse5) {
      var this$1 = this;
      return this._list.__iterate(
        function(entry) {
          return entry && fn(entry[1], entry[0], this$1);
        },
        reverse5
      );
    };
    OrderedMap3.prototype.__iterator = function __iterator3(type2, reverse5) {
      return this._list.fromEntrySeq().__iterator(type2, reverse5);
    };
    OrderedMap3.prototype.__ensureOwner = function __ensureOwner3(ownerID) {
      if (ownerID === this.__ownerID) {
        return this;
      }
      var newMap = this._map.__ensureOwner(ownerID);
      var newList = this._list.__ensureOwner(ownerID);
      if (!ownerID) {
        if (this.size === 0) {
          return emptyOrderedMap2();
        }
        this.__ownerID = ownerID;
        this._map = newMap;
        this._list = newList;
        return this;
      }
      return makeOrderedMap2(newMap, newList, ownerID, this.__hash);
    };
    return OrderedMap3;
  }(Map3);
  OrderedMap2.isOrderedMap = isOrderedMap2;
  OrderedMap2.prototype[IS_ORDERED_SYMBOL2] = true;
  OrderedMap2.prototype[DELETE2] = OrderedMap2.prototype.remove;
  function makeOrderedMap2(map5, list, ownerID, hash3) {
    var omap = Object.create(OrderedMap2.prototype);
    omap.size = map5 ? map5.size : 0;
    omap._map = map5;
    omap._list = list;
    omap.__ownerID = ownerID;
    omap.__hash = hash3;
    return omap;
  }
  var EMPTY_ORDERED_MAP2;
  function emptyOrderedMap2() {
    return EMPTY_ORDERED_MAP2 || (EMPTY_ORDERED_MAP2 = makeOrderedMap2(emptyMap2(), emptyList2()));
  }
  function updateOrderedMap2(omap, k3, v3) {
    var map5 = omap._map;
    var list = omap._list;
    var i4 = map5.get(k3);
    var has9 = i4 !== void 0;
    var newMap;
    var newList;
    if (v3 === NOT_SET2) {
      if (!has9) {
        return omap;
      }
      if (list.size >= SIZE2 && list.size >= map5.size * 2) {
        newList = list.filter(function(entry, idx) {
          return entry !== void 0 && i4 !== idx;
        });
        newMap = newList.toKeyedSeq().map(function(entry) {
          return entry[0];
        }).flip().toMap();
        if (omap.__ownerID) {
          newMap.__ownerID = newList.__ownerID = omap.__ownerID;
        }
      } else {
        newMap = map5.remove(k3);
        newList = i4 === list.size - 1 ? list.pop() : list.set(i4, void 0);
      }
    } else if (has9) {
      if (v3 === list.get(i4)[1]) {
        return omap;
      }
      newMap = map5;
      newList = list.set(i4, [k3, v3]);
    } else {
      newMap = map5.set(k3, list.size);
      newList = list.set(list.size, [k3, v3]);
    }
    if (omap.__ownerID) {
      omap.size = newMap.size;
      omap._map = newMap;
      omap._list = newList;
      omap.__hash = void 0;
      return omap;
    }
    return makeOrderedMap2(newMap, newList);
  }
  function isSortedMap(maybeSortedMap) {
    return isMap2(maybeSortedMap) && isSorted(maybeSortedMap);
  }
  var SortedMapNode = function SortedMapNode2(comparator, options, ownerID) {
    this.comparator = comparator;
    this.options = options;
    this.ownerID = ownerID;
  };
  SortedMapNode.prototype.getComparator = function getComparator() {
  };
  SortedMapNode.prototype.get = function get19(key, notSetValue) {
  };
  SortedMapNode.prototype.upsert = function upsert(ownerID, key, value, didChangeSize, didAlter) {
  };
  SortedMapNode.prototype.remove = function remove5(ownerID, key, didChangeSize, didAlter) {
  };
  SortedMapNode.prototype.fastRemove = function fastRemove(ownerID, key, didChangeSize, didAlter) {
  };
  SortedMapNode.prototype.iterate = function iterate(fn, reverse5) {
  };
  SortedMapNode.prototype.print = function print(level, maxDepth) {
  };
  SortedMapNode.prototype.checkConsistency = function checkConsistency(printFlag) {
  };
  var SortedMapPacker = function SortedMapPacker2() {
  };
  SortedMapPacker.prototype.pack = function pack(comparator, options, ownerID, collection) {
  };
  var SortedMapNodeFactory = function SortedMapNodeFactory2() {
  };
  SortedMapNodeFactory.prototype.createNode = function createNode(comparator, options, ownerID, entries5, nodes) {
  };
  SortedMapNodeFactory.prototype.createPacker = function createPacker() {
  };
  SortedMapNodeFactory.prototype.createIterator = function createIterator(map5, type2, reverse5) {
  };
  var DEFAULT_TYPE = "btree";
  var DEFAULT_BTREE_ORDER = 33;
  var SortedMapBtreeNode = function(SortedMapNode$$1) {
    function SortedMapBtreeNode2(comparator, options, ownerID, entries5, nodes) {
      SortedMapNode$$1.call(this, comparator, options, ownerID);
      this.entries = entries5;
      this.nodes = nodes;
      this.btreeOrder = options && options.btreeOrder ? options.btreeOrder : DEFAULT_BTREE_ORDER;
      this.btreeNodeSplitSize = Math.floor((this.btreeOrder - 1) / 2);
      this._calcSize();
      return this;
    }
    if (SortedMapNode$$1)
      SortedMapBtreeNode2.__proto__ = SortedMapNode$$1;
    SortedMapBtreeNode2.prototype = Object.create(SortedMapNode$$1 && SortedMapNode$$1.prototype);
    SortedMapBtreeNode2.prototype.constructor = SortedMapBtreeNode2;
    SortedMapBtreeNode2.prototype._calcSize = function _calcSize() {
      var this$1 = this;
      this.size = 0;
      for (var i4 = 0; i4 < this.entries.length; i4++) {
        if (this$1.entries[i4][1] !== NOT_SET2) {
          this$1.size++;
        }
      }
      if (this.nodes) {
        for (var i$1 = 0; i$1 < this.nodes.length; i$1++) {
          this$1.size += this$1.nodes[i$1].size;
        }
      }
    };
    SortedMapBtreeNode2.prototype.getComparator = function getComparator2() {
      return this.comparator;
    };
    SortedMapBtreeNode2.prototype.get = function get24(key, notSetValue) {
      var entries5 = this.entries;
      var didMatch = MakeRef2();
      var idx = binarySearch(this.comparator, entries5, key, didMatch);
      if (GetRef(didMatch)) {
        var value = entries5[idx][1];
        return value === NOT_SET2 ? notSetValue : value;
      }
      var nodes = this.nodes;
      if (nodes) {
        var value$1 = nodes[idx].get(key, notSetValue);
        return value$1 === NOT_SET2 ? notSetValue : value$1;
      }
      return notSetValue;
    };
    SortedMapBtreeNode2.prototype.entryAt = function entryAt(index) {
      var didMatch = MakeRef2();
      var subIndex = MakeRef2();
      var idx = this.indexSearch(index, didMatch, subIndex);
      if (GetRef(didMatch)) {
        var entry = this.entries[idx];
        var key = entry[0];
        var value = entry[1];
        return [key, value];
      }
      return this.nodes[idx].entryAt(subIndex.value);
    };
    SortedMapBtreeNode2.prototype.keyAt = function keyAt(index) {
      var didMatch = MakeRef2();
      var subIndex = MakeRef2();
      var idx = this.indexSearch(index, didMatch, subIndex);
      if (GetRef(didMatch)) {
        var entry = this.entries[idx];
        var key = entry[0];
        return key;
      }
      return this.nodes[idx].keyAt(subIndex.value);
    };
    SortedMapBtreeNode2.prototype.valueAt = function valueAt(index) {
      var didMatch = MakeRef2();
      var subIndex = MakeRef2();
      var idx = this.indexSearch(index, didMatch, subIndex);
      if (GetRef(didMatch)) {
        var entry = this.entries[idx];
        var value = entry[1];
        return value;
      }
      return this.nodes[idx].valueAt(subIndex.value);
    };
    SortedMapBtreeNode2.prototype.firstKey = function firstKey() {
      var nodes = this.nodes;
      if (nodes) {
        return nodes[0].firstKey();
      }
      var entries5 = this.entries;
      return entries5[0][0];
    };
    SortedMapBtreeNode2.prototype.lastKey = function lastKey() {
      var nodes = this.nodes;
      if (nodes) {
        return nodes[nodes.length - 1].lastKey();
      }
      var entries5 = this.entries;
      return entries5[entries5.length - 1][0];
    };
    SortedMapBtreeNode2.prototype.upsert = function upsert2(ownerID, key, value, didChangeSize, didAlter, outKvn) {
      var ret = this._upsert(
        ownerID,
        key,
        value,
        didChangeSize,
        didAlter,
        outKvn
      );
      if (this === ret && GetRef(didChangeSize)) {
        this.size++;
      }
      return ret;
    };
    SortedMapBtreeNode2.prototype._upsert = function _upsert(ownerID, key, value, didChangeSize, didAlter, outKvn) {
      if (!outKvn) {
        var subKvn = [];
        var newRoot = this.upsert(
          ownerID,
          key,
          value,
          didChangeSize,
          didAlter,
          subKvn
        );
        if (subKvn[0]) {
          var entries$1 = [subKvn[0]];
          var nodes$1 = [newRoot, subKvn[1]];
          newRoot = new SortedMapBtreeNode2(
            this.comparator,
            this.options,
            ownerID,
            entries$1,
            nodes$1
          );
        }
        return newRoot;
      }
      var entries5 = this.entries;
      var didMatch = MakeRef2();
      var idx = binarySearch(this.comparator, entries5, key, didMatch);
      var exists = GetRef(didMatch);
      var nodes = this.nodes;
      var canEdit = ownerID && ownerID === this.ownerID;
      var newEntries;
      var newNodes;
      if (exists) {
        if (entries5[idx][1] === value) {
          return this;
        } else {
          var entry = [key, value];
          SetRef2(didAlter);
          if (entries5[idx][1] === NOT_SET2) {
            SetRef2(didChangeSize);
          }
          newEntries = setIn$2(entries5, idx, entry, canEdit);
          newNodes = clone(nodes, canEdit);
        }
      } else {
        if (nodes) {
          var subKvn$1 = [];
          var updatedNode = nodes[idx].upsert(
            ownerID,
            key,
            value,
            didChangeSize,
            didAlter,
            subKvn$1
          );
          if (GetRef(didAlter)) {
            if (subKvn$1[0]) {
              if (entries5.length >= this.btreeOrder - 1) {
                return this.splitNode(
                  idx,
                  updatedNode,
                  subKvn$1,
                  outKvn,
                  ownerID,
                  canEdit
                );
              } else {
                newEntries = spliceIn$1(entries5, idx, subKvn$1[0], canEdit);
                newNodes = spliceIn$1(nodes, idx + 1, subKvn$1[1], canEdit);
                newNodes[idx] = updatedNode;
              }
            } else {
              newEntries = clone(entries5, canEdit);
              newNodes = setIn$2(nodes, idx, updatedNode, canEdit);
            }
          } else {
            return this;
          }
        } else {
          var entry$1 = [key, value];
          SetRef2(didAlter);
          SetRef2(didChangeSize);
          if (entries5.length >= this.btreeOrder - 1) {
            return this.splitLeaf(idx, entry$1, outKvn, ownerID, canEdit);
          } else {
            newEntries = spliceIn$1(entries5, idx, entry$1, canEdit);
          }
        }
      }
      return this.makeNewNode(newEntries, newNodes, ownerID, canEdit);
    };
    SortedMapBtreeNode2.prototype.fastRemove = function fastRemove2(ownerID, key, didChangeSize, didAlter) {
      var ret = this._fastRemove(ownerID, key, didChangeSize, didAlter);
      if (this === ret && GetRef(didChangeSize)) {
        this.size--;
      }
      return ret;
    };
    SortedMapBtreeNode2.prototype._fastRemove = function _fastRemove(ownerID, key, didChangeSize, didAlter) {
      var entries5 = this.entries;
      var didMatch = MakeRef2();
      var idx = binarySearch(this.comparator, entries5, key, didMatch);
      var exists = GetRef(didMatch);
      var nodes = this.nodes;
      var canEdit = ownerID && ownerID === this.ownerID;
      var newEntries;
      var newNodes;
      if (exists) {
        if (entries5[idx][1] === NOT_SET2) {
          return this;
        }
        SetRef2(didAlter);
        SetRef2(didChangeSize);
        var newEntry = [key, NOT_SET2];
        newEntries = setIn$2(entries5, idx, newEntry, canEdit);
        newNodes = clone(nodes, canEdit);
      } else {
        if (nodes) {
          var updatedNode = nodes[idx].fastRemove(
            ownerID,
            key,
            didChangeSize,
            didAlter
          );
          if (GetRef(didAlter)) {
            newEntries = clone(entries5, canEdit);
            newNodes = setIn$2(nodes, idx, updatedNode, canEdit);
          } else {
            return this;
          }
        } else {
          return this;
        }
      }
      return this.makeNewNode(newEntries, newNodes, ownerID, canEdit);
    };
    SortedMapBtreeNode2.prototype.remove = function remove7(ownerID, key, didChangeSize, didAlter, parent, parentIdx, outKvn) {
      var ret = this._remove(
        ownerID,
        key,
        didChangeSize,
        didAlter,
        parent,
        parentIdx,
        outKvn
      );
      if (this === ret && GetRef(didChangeSize)) {
        this.size--;
      }
      return ret;
    };
    SortedMapBtreeNode2.prototype._remove = function _remove(ownerID, key, didChangeSize, didAlter, parent, parentIdx, outKvn) {
      var entries5 = this.entries;
      var didMatch = MakeRef2();
      var idx = binarySearch(this.comparator, entries5, key, didMatch);
      var exists = GetRef(didMatch);
      var nodes = this.nodes;
      var canEdit = ownerID && ownerID === this.ownerID;
      var newEntries;
      var newNodes;
      if (exists) {
        if (nodes) {
          if (entries5[idx][1] === NOT_SET2) {
            return this;
          }
          SetRef2(didAlter);
          SetRef2(didChangeSize);
          var newEntry = [key, NOT_SET2];
          newEntries = setIn$2(entries5, idx, newEntry, canEdit);
          newNodes = clone(nodes, canEdit);
        } else {
          if (entries5[idx][1] === NOT_SET2) {
            return this;
          }
          SetRef2(didAlter);
          SetRef2(didChangeSize);
          if (entries5.length <= this.btreeNodeSplitSize && parent) {
            return this.consolidateLeaf(
              ownerID,
              idx,
              parent,
              parentIdx,
              canEdit,
              outKvn
            );
          }
          newEntries = spliceOut$1(entries5, idx, canEdit);
        }
      } else {
        if (nodes) {
          var subKvn = [void 0, void 0, void 0];
          var updatedNode = nodes[idx].remove(
            ownerID,
            key,
            didChangeSize,
            didAlter,
            this,
            idx,
            subKvn
          );
          if (GetRef(didAlter)) {
            return this.spliceNode(
              ownerID,
              idx,
              updatedNode,
              parent,
              parentIdx,
              canEdit,
              subKvn,
              outKvn
            );
          } else {
            return this;
          }
        } else {
          return this;
        }
      }
      return this.makeNewNode(newEntries, newNodes, ownerID, canEdit);
    };
    SortedMapBtreeNode2.prototype.makeNewNode = function makeNewNode(newEntries, newNodes, ownerID, canEdit) {
      if (newEntries.length === 0) {
        if (newNodes) {
          return newNodes[0];
        } else {
          return;
        }
      }
      if (canEdit) {
        this.entries = newEntries;
        this.nodes = newNodes;
        this._calcSize();
        return this;
      }
      return new SortedMapBtreeNode2(
        this.comparator,
        this.options,
        ownerID,
        newEntries,
        newNodes
      );
    };
    SortedMapBtreeNode2.prototype.print = function print2(level, maxDepth) {
      function w3(s3) {
        process.stdout.write(s3);
      }
      if (maxDepth && level >= maxDepth) {
        return;
      }
      var nodes = this.nodes;
      var entries5 = this.entries;
      w3(indent(level));
      w3("SIZE=" + this.size + "\n");
      if (nodes) {
        for (var i4 = 0; i4 < nodes.length; i4++) {
          var node = nodes[i4];
          w3(indent(level));
          if (!node || !(node instanceof SortedMapNode$$1)) {
            w3(
              "+ CORRUPT NODE[" + i4 + "] (L" + level + ") " + JSON.stringify(node) + "\n"
            );
          } else {
            if (node.nodes) {
              w3("+ NODE[" + i4 + "] (L" + level + ")\n");
            } else {
              w3("+ LEAF[" + i4 + "] (L" + level + ")\n");
            }
            node.print(level + 1, maxDepth);
          }
          if (i4 < entries5.length) {
            w3(indent(level));
            var entry = entries5[i4];
            if (!entry) {
              w3("- CORRUPT ENTRY[" + i4 + "]: " + JSON.stringify(entry) + "\n");
            } else if (entry[1] === NOT_SET2) {
              w3("- REMOVED ENTRY[" + i4 + "]: " + JSON.stringify(entry[0]) + "\n");
            } else {
              w3("- ENTRY[" + i4 + "]: " + JSON.stringify(entry[0]) + "\n");
            }
          }
        }
      } else {
        for (var i$1 = 0; i$1 < entries5.length; i$1++) {
          w3(indent(level));
          var entry$1 = entries5[i$1];
          if (!entry$1) {
            w3("- CORRUPT ENTRY[" + i$1 + "]: " + JSON.stringify(entry$1) + "\n");
          } else if (entry$1[1] === NOT_SET2) {
            w3("- REMOVED ENTRY[" + i$1 + "]: " + JSON.stringify(entry$1[0]) + "\n");
          } else {
            w3("- ENTRY[" + i$1 + "]: " + JSON.stringify(entry$1[0]) + "\n");
          }
        }
      }
    };
    SortedMapBtreeNode2.prototype.checkConsistency = function checkConsistency2(printFlag, level, n3, leafLevel) {
      var this$1 = this;
      function w3(f3) {
        if (printFlag) {
          var s3 = f3();
          if (s3 !== void 0) {
            process.stdout.write(indent(level));
            process.stdout.write(s3);
          }
        }
      }
      if (!level) {
        level = 0;
      }
      if (!n3) {
        n3 = 0;
      }
      if (!leafLevel) {
        leafLevel = [void 0];
      }
      if (this.nodes) {
        w3(function() {
          return "+ Checking NODE[" + n3 + "] (L" + level + ")\n";
        });
      } else {
        w3(function() {
          return "+ Checking LEAF[" + n3 + "] (L" + level + ")\n";
        });
        if (leafLevel[0] === void 0) {
          leafLevel[0] = level;
        } else if (leafLevel[0] !== level) {
          failed(112, "leaves are not on the same level");
        }
      }
      function failed(code2, msg) {
        var s3 = "Consistency Check Failed with error code " + code2 + ": " + msg;
        if (printFlag) {
          w3(function() {
            return s3 + "\n";
          });
          return code2;
        }
        throw new Error(s3);
      }
      var entries5 = this.entries;
      var nodes = this.nodes;
      if (!entries5) {
        return failed(101, "empty entries in a node");
      }
      if (!(entries5.length > 0 && entries5.length < this.btreeOrder)) {
        return failed(
          102,
          "entries length is out of range from 0 to (btreeOrder-1)"
        );
      }
      if (level > 0 && !(this.btreeNodeSplitSize <= entries5.length)) {
        return failed(103, "entries length is shorter than btreeNodeSplitSize");
      }
      if (nodes && !(nodes.length === entries5.length + 1)) {
        return failed(104, "nodes length out of sync with entries length");
      }
      var loop = function(i5) {
        var entry = entries5[i5];
        if (!entry) {
          return { v: failed(105, "empty entry") };
        }
        if (!(typeof entry === "object" && entry instanceof Array)) {
          return { v: failed(106, "entry is not Array") };
        }
        if (!(entry.length === 2)) {
          return { v: failed(107, "entry is not Array[2]") };
        }
        if (entry[1] === NOT_SET2) {
          w3(
            function() {
              return "    - Checking REMOVED ENTRY[" + i5 + "]: " + JSON.stringify(entry[0]) + "\n";
            }
          );
          if (!nodes) {
            failed(113, "NOT_SET values are not allowed in leaves");
          }
        } else {
          w3(
            function() {
              return "    - Checking ENTRY[" + i5 + "]: " + JSON.stringify(entry[0]) + "\n";
            }
          );
        }
      };
      for (var i4 = 0; i4 < entries5.length; i4++) {
        var returned = loop(i4);
        if (returned)
          return returned.v;
      }
      for (var i$1 = 0; i$1 < entries5.length - 1; i$1++) {
        if (!(this$1.comparator(entries5[i$1][0], entries5[i$1 + 1][0]) < 0)) {
          return failed(108, "the entries are not sorted");
        }
      }
      if (nodes) {
        for (var i$2 = 0; i$2 < nodes.length; i$2++) {
          var node = nodes[i$2];
          if (!node || !(node instanceof SortedMapNode$$1)) {
            return failed(109, "empty or corrupt node");
          }
          var code = node.checkConsistency(printFlag, level + 1, i$2, leafLevel);
          if (code !== 0) {
            return code;
          }
          if (i$2 > 0 && !(this$1.comparator(entries5[i$2 - 1][0], node.firstKey()) < 0)) {
            return failed(110, "the entry and right node not sorted");
          }
          if (i$2 < entries5.length && !(this$1.comparator(node.lastKey(), entries5[i$2][0]) < 0)) {
            return failed(111, "the entry and left node not sorted");
          }
        }
      }
      return 0;
    };
    return SortedMapBtreeNode2;
  }(SortedMapNode);
  SortedMapBtreeNode.prototype.iterate = function(fn, reverse5) {
    var entries5 = this.entries;
    var nodes = this.nodes;
    if (nodes) {
      for (var ii = 0, maxIndex = entries5.length - 1; ii <= maxIndex; ii++) {
        var node = nodes[reverse5 ? maxIndex + 1 - ii : ii];
        if (node.iterate(fn, reverse5) === false) {
          return false;
        }
        var entry = entries5[reverse5 ? maxIndex - ii : ii];
        if (entry[1] === NOT_SET2) {
          continue;
        }
        if (fn(entry) === false) {
          return false;
        }
      }
      var node$1 = nodes[reverse5 ? 0 : nodes.length - 1];
      if (node$1.iterate(fn, reverse5) === false) {
        return false;
      }
    } else {
      for (var ii$1 = 0, maxIndex$1 = entries5.length - 1; ii$1 <= maxIndex$1; ii$1++) {
        var entry$1 = entries5[reverse5 ? maxIndex$1 - ii$1 : ii$1];
        if (entry$1[1] === NOT_SET2) {
          continue;
        }
        if (fn(entry$1) === false) {
          return false;
        }
      }
    }
    return true;
  };
  SortedMapBtreeNode.prototype.iterateFrom = function(from, fn, reverse5) {
    var this$1 = this;
    if (reverse5) {
      return this.iterate(function(entry2) {
        if (this$1.comparator(from, entry2[0]) <= 0) {
          return fn(entry2);
        }
        return true;
      }, reverse5);
    }
    var entries5 = this.entries;
    var nodes = this.nodes;
    var didMatch = MakeRef2();
    var idx = binarySearch(this.comparator, entries5, from, didMatch);
    if (nodes) {
      for (var ii = idx, maxIndex = entries5.length - 1; ii <= maxIndex; ii++) {
        var node = nodes[ii];
        if (ii === idx && !GetRef(didMatch)) {
          if (node.iterateFrom(from, fn, reverse5) === false) {
            return false;
          }
        } else if (ii > idx) {
          if (node.iterate(fn, reverse5) === false) {
            return false;
          }
        }
        var entry = entries5[ii];
        if (entry[1] === NOT_SET2) {
          continue;
        }
        if (fn(entry) === false) {
          return false;
        }
      }
      var node$1 = nodes[nodes.length - 1];
      if (idx === nodes.length - 1) {
        if (node$1.iterateFrom(from, fn, reverse5) === false) {
          return false;
        }
      } else if (node$1.iterate(fn, reverse5) === false) {
        return false;
      }
    } else {
      for (var ii$1 = idx, maxIndex$1 = entries5.length - 1; ii$1 <= maxIndex$1; ii$1++) {
        var entry$1 = entries5[ii$1];
        if (entry$1[1] === NOT_SET2) {
          continue;
        }
        if (fn(entry$1) === false) {
          return false;
        }
      }
    }
    return true;
  };
  SortedMapBtreeNode.prototype.iterateFromBackwards = function(from, fn, reverse5) {
    var this$1 = this;
    if (reverse5) {
      return this.iterate(function(entry2) {
        if (this$1.comparator(entry2[0], from) <= 0) {
          return fn(entry2);
        }
        return true;
      }, false);
    }
    var entries5 = this.entries;
    var nodes = this.nodes;
    var didMatch = MakeRef2();
    var idx = binarySearch(this.comparator, entries5, from, didMatch);
    if (nodes) {
      for (var ii = idx; ii >= 0; ii--) {
        if (ii < idx || GetRef(didMatch)) {
          var entry = entries5[ii];
          if (entry[1] === NOT_SET2) {
            continue;
          }
          if (fn(entry) === false) {
            return false;
          }
        }
        var node = nodes[ii];
        if (ii === idx && !GetRef(didMatch)) {
          if (node.iterateFromBackwards(from, fn, reverse5) === false) {
            return false;
          }
        } else if (node.iterate(fn, true) === false) {
          return false;
        }
      }
    } else {
      for (var ii$1 = GetRef(didMatch) ? idx : idx - 1; ii$1 >= 0; ii$1--) {
        var entry$1 = entries5[ii$1];
        if (entry$1[1] === NOT_SET2) {
          continue;
        }
        if (fn(entry$1) === false) {
          return false;
        }
      }
    }
    return true;
  };
  SortedMapBtreeNode.prototype.iterateFromIndex = function(index, fn) {
    var entries5 = this.entries;
    var nodes = this.nodes;
    var didMatch = MakeRef2();
    var subIndex = MakeRef2();
    var idx = this.indexSearch(index, didMatch, subIndex);
    if (nodes) {
      for (var ii = idx, maxIndex = entries5.length - 1; ii <= maxIndex; ii++) {
        var node = nodes[ii];
        if (ii === idx && !GetRef(didMatch)) {
          if (node.iterateFromIndex(subIndex.value, fn) === false) {
            return false;
          }
        } else if (ii > idx) {
          if (node.iterate(fn, false) === false) {
            return false;
          }
        }
        var entry = entries5[ii];
        if (entry[1] === NOT_SET2) {
          continue;
        }
        if (fn(entry) === false) {
          return false;
        }
      }
      var node$1 = nodes[nodes.length - 1];
      if (idx === nodes.length - 1) {
        if (node$1.iterateFromIndex(subIndex.value, fn) === false) {
          return false;
        }
      } else if (node$1.iterate(fn, false) === false) {
        return false;
      }
    } else {
      for (var ii$1 = idx, maxIndex$1 = entries5.length - 1; ii$1 <= maxIndex$1; ii$1++) {
        var entry$1 = entries5[ii$1];
        if (entry$1[1] === NOT_SET2) {
          continue;
        }
        if (fn(entry$1) === false) {
          return false;
        }
      }
    }
    return true;
  };
  SortedMapBtreeNode.prototype.iterateFromIndexBackwards = function(index, fn) {
    var entries5 = this.entries;
    var nodes = this.nodes;
    var didMatch = MakeRef2();
    var subIndex = MakeRef2();
    var idx = this.indexSearch(index, didMatch, subIndex);
    if (nodes) {
      for (var ii = idx; ii >= 0; ii--) {
        if (ii < idx || GetRef(didMatch)) {
          var entry = entries5[ii];
          if (entry[1] === NOT_SET2) {
            continue;
          }
          if (fn(entry) === false) {
            return false;
          }
        }
        var node = nodes[ii];
        if (ii === idx && !GetRef(didMatch)) {
          if (node.iterateFromIndexBackwards(subIndex.value, fn) === false) {
            return false;
          }
        } else if (node.iterate(fn, true) === false) {
          return false;
        }
      }
    } else {
      for (var ii$1 = GetRef(didMatch) ? idx : idx - 1; ii$1 >= 0; ii$1--) {
        var entry$1 = entries5[ii$1];
        if (entry$1[1] === NOT_SET2) {
          continue;
        }
        if (fn(entry$1) === false) {
          return false;
        }
      }
    }
    return true;
  };
  var SortedMapBtreeNodeIterator = function(Iterator$$1) {
    function SortedMapBtreeNodeIterator2(map5, type2, reverse5) {
      this._type = type2;
      this._reverse = reverse5;
      this._stack = map5._root && mapIteratorFrame$1(map5._root);
    }
    if (Iterator$$1)
      SortedMapBtreeNodeIterator2.__proto__ = Iterator$$1;
    SortedMapBtreeNodeIterator2.prototype = Object.create(Iterator$$1 && Iterator$$1.prototype);
    SortedMapBtreeNodeIterator2.prototype.constructor = SortedMapBtreeNodeIterator2;
    SortedMapBtreeNodeIterator2.prototype.next = function next() {
      var this$1 = this;
      var type2 = this._type;
      var stack = this._stack;
      while (stack) {
        var node = stack.node;
        var index = stack.index++;
        if (node.nodes) {
          var maxIndex = node.entries.length + node.nodes.length - 1;
          if (index <= maxIndex) {
            if (index % 2 === 0) {
              index /= 2;
              var subNode = node.nodes[this$1._reverse ? node.nodes.length - 1 - index : index];
              if (subNode) {
                stack = this$1._stack = mapIteratorFrame$1(subNode, stack);
              }
              continue;
            } else {
              index = (index - 1) / 2;
              var entry = node.entries[this$1._reverse ? node.entries.length - 1 - index : index];
              if (entry[1] === NOT_SET2) {
                continue;
              }
              return mapIteratorValue$1(type2, entry);
            }
          }
        } else {
          var maxIndex$1 = node.entries.length - 1;
          if (index <= maxIndex$1) {
            var entry$1 = node.entries[this$1._reverse ? maxIndex$1 - index : index];
            if (entry$1[1] === NOT_SET2) {
              continue;
            }
            return mapIteratorValue$1(type2, entry$1);
          }
        }
        stack = this$1._stack = this$1._stack.__prev;
      }
      return iteratorDone2();
    };
    return SortedMapBtreeNodeIterator2;
  }(Iterator3);
  function mapIteratorValue$1(type2, entry) {
    return iteratorValue2(type2, entry[0], entry[1]);
  }
  function mapIteratorFrame$1(node, prev) {
    return {
      node,
      index: 0,
      __prev: prev
    };
  }
  function allocArray(n3) {
    var a4 = new Array(n3);
    return a4;
  }
  var _indentStr = new Array(120).join(" ");
  function indent(level) {
    var indentCnt = 4 * level;
    if (indentCnt > _indentStr.length) {
      indentCnt = _indentStr.length;
    }
    return _indentStr.substring(0, indentCnt);
  }
  function clone(array3, canEdit) {
    if (array3 === void 0) {
      return array3;
    }
    if (canEdit) {
      return array3;
    }
    var newLen = array3.length;
    var newArray = allocArray(newLen);
    for (var ii = 0; ii < newLen; ii++) {
      newArray[ii] = array3[ii];
    }
    return newArray;
  }
  function setIn$2(array3, idx, val, canEdit) {
    if (canEdit) {
      array3[idx] = val;
      return array3;
    }
    var newLen = array3.length;
    var newArray = allocArray(newLen);
    for (var ii = 0; ii < idx; ii++) {
      newArray[ii] = array3[ii];
    }
    newArray[idx] = val;
    for (var ii$1 = idx + 1; ii$1 < newLen; ii$1++) {
      newArray[ii$1] = array3[ii$1];
    }
    return newArray;
  }
  function spliceIn$1(array3, idx, val, canEdit) {
    var newLen = array3.length + 1;
    if (canEdit) {
      for (var ii = newLen - 1, stop = idx + 1; ii >= stop; ii--) {
        array3[ii] = array3[ii - 1];
      }
      array3[idx] = val;
      return array3;
    }
    var newArray = allocArray(newLen);
    for (var ii$1 = 0; ii$1 < idx; ii$1++) {
      newArray[ii$1] = array3[ii$1];
    }
    newArray[idx] = val;
    for (var ii$2 = idx + 1; ii$2 < newLen; ii$2++) {
      newArray[ii$2] = array3[ii$2 - 1];
    }
    return newArray;
  }
  function spliceOut$1(array3, idx, canEdit) {
    var newLen = array3.length - 1;
    if (canEdit) {
      for (var ii = idx; ii < newLen; ii++) {
        array3[ii] = array3[ii + 1];
      }
      array3.length = newLen;
      return array3;
    }
    var newArray = allocArray(newLen);
    for (var ii$1 = 0; ii$1 < idx; ii$1++) {
      newArray[ii$1] = array3[ii$1];
    }
    for (var ii$2 = idx; ii$2 < newLen; ii$2++) {
      newArray[ii$2] = array3[ii$2 + 1];
    }
    return newArray;
  }
  function spliceOutN(array3, idx, n3, canEdit) {
    var newLen = array3.length - n3;
    if (canEdit) {
      for (var ii = idx; ii < newLen; ii++) {
        array3[ii] = array3[ii + n3];
      }
      array3.length = newLen;
      return array3;
    }
    var newArray = allocArray(newLen);
    for (var ii$1 = 0; ii$1 < idx; ii$1++) {
      newArray[ii$1] = array3[ii$1];
    }
    for (var ii$2 = idx; ii$2 < newLen; ii$2++) {
      newArray[ii$2] = array3[ii$2 + n3];
    }
    return newArray;
  }
  function spliceOutShiftRightN(array3, idx, rightN, canEdit) {
    var newLen = array3.length - 1 + rightN;
    var newArray;
    if (canEdit) {
      array3.length = newLen;
      newArray = array3;
    } else {
      newArray = allocArray(newLen);
    }
    for (var ii = newLen - 1, stop = idx + rightN; ii >= stop; ii--) {
      newArray[ii] = array3[ii - rightN + 1];
    }
    for (var ii$1 = idx + rightN - 1; ii$1 >= rightN; ii$1--) {
      newArray[ii$1] = array3[ii$1 - rightN];
    }
    return newArray;
  }
  function setInSpliceOut(array3, setInIdx, setInValue, spliceOutIdx, canEdit) {
    var newArray = spliceOut$1(array3, spliceOutIdx, canEdit);
    if (setInIdx < spliceOutIdx) {
      newArray[setInIdx] = setInValue;
    } else if (setInIdx > spliceOutIdx) {
      newArray[setInIdx - 1] = setInValue;
    }
    return newArray;
  }
  function binarySearch(comparator, entries5, key, didMatch) {
    var first5 = 0;
    var range = entries5.length;
    while (range > 0) {
      var half = Math.floor(range / 2);
      var entry = entries5[first5 + half];
      var entryKey = entry[0];
      var cmp = comparator(key, entryKey);
      if (cmp === 0) {
        SetRef2(didMatch);
        return first5 + half;
      }
      if (cmp > 0) {
        first5 += half + 1;
        range -= half + 1;
      } else {
        range = half;
      }
    }
    return first5;
  }
  SortedMapBtreeNode.prototype.indexSearch = function(index, didMatch, subIndex) {
    if (index < 0 || index >= this.size) {
      throw new Error(
        "BtreeNode.indexSearch: index is out of bounds: " + index + " vs " + this.size
      );
    }
    var entries5 = this.entries;
    var nodes = this.nodes;
    for (var i4 = 0; i4 < entries5.length; i4++) {
      if (nodes) {
        var node = nodes[i4];
        if (index < node.size) {
          subIndex.value = index;
          return i4;
        }
        index -= node.size;
      }
      var entry = entries5[i4];
      if (entry[1] !== NOT_SET2) {
        if (index === 0) {
          SetRef2(didMatch);
          return i4;
        }
        index--;
      }
    }
    if (nodes) {
      var node$1 = nodes[nodes.length - 1];
      if (index < node$1.size) {
        subIndex.value = index;
        return nodes.length - 1;
      }
    }
    throw new Error("BtreeNode.indexSearch: inconsistent node size");
  };
  SortedMapBtreeNode.prototype.splitNode = function(idx, updatedNode, subKvn, outKvn, ownerID, canEdit) {
    var entries5 = this.entries;
    var nodes = this.nodes;
    var medianIdx = this.btreeNodeSplitSize;
    var newEntries;
    var newNodes;
    if (idx < medianIdx) {
      var rightEntries = entries5.slice(medianIdx, entries5.length);
      var rightNodes = nodes.slice(medianIdx, nodes.length);
      var rightNode = new SortedMapBtreeNode(
        this.comparator,
        this.options,
        this.ownerID,
        rightEntries,
        rightNodes
      );
      outKvn[0] = entries5[medianIdx - 1];
      outKvn[1] = rightNode;
      if (canEdit) {
        entries5.length = medianIdx;
        nodes.length = medianIdx + 1;
        for (var i4 = medianIdx - 1; i4 >= idx + 1; i4--) {
          entries5[i4] = entries5[i4 - 1];
          nodes[i4 + 1] = nodes[i4];
        }
        entries5[idx] = subKvn[0];
        nodes[idx] = updatedNode;
        nodes[idx + 1] = subKvn[1];
        newEntries = entries5;
        newNodes = nodes;
      } else {
        newEntries = allocArray(medianIdx);
        newNodes = allocArray(medianIdx + 1);
        for (var i$1 = 0; i$1 < idx; i$1++) {
          newEntries[i$1] = entries5[i$1];
          newNodes[i$1] = nodes[i$1];
        }
        newEntries[idx] = subKvn[0];
        newNodes[idx] = updatedNode;
        newNodes[idx + 1] = subKvn[1];
        for (var i$2 = idx + 1; i$2 < medianIdx; i$2++) {
          newEntries[i$2] = entries5[i$2 - 1];
          newNodes[i$2 + 1] = nodes[i$2];
        }
      }
    } else if (idx === medianIdx) {
      var rightEntries$1 = allocArray(entries5.length - medianIdx);
      var rightNodes$1 = allocArray(nodes.length - medianIdx);
      rightEntries$1[0] = entries5[medianIdx];
      rightNodes$1[0] = subKvn[1];
      for (var i$3 = 1, len = rightEntries$1.length; i$3 < len; i$3++) {
        rightEntries$1[i$3] = entries5[medianIdx + i$3];
        rightNodes$1[i$3] = nodes[medianIdx + i$3];
      }
      rightNodes$1[rightNodes$1.length - 1] = nodes[nodes.length - 1];
      var rightNode$1 = new SortedMapBtreeNode(
        this.comparator,
        this.options,
        this.ownerID,
        rightEntries$1,
        rightNodes$1
      );
      outKvn[0] = subKvn[0];
      outKvn[1] = rightNode$1;
      if (canEdit) {
        entries5.length = medianIdx;
        nodes.length = medianIdx + 1;
        nodes[idx] = updatedNode;
        newEntries = entries5;
        newNodes = nodes;
      } else {
        newEntries = allocArray(medianIdx);
        newNodes = allocArray(medianIdx + 1);
        for (var i$4 = 0; i$4 < medianIdx; i$4++) {
          newEntries[i$4] = entries5[i$4];
          newNodes[i$4] = nodes[i$4];
        }
        newNodes[idx] = updatedNode;
      }
    } else {
      var rightEntries$2 = allocArray(entries5.length - medianIdx);
      var rightNodes$2 = allocArray(nodes.length - medianIdx);
      var idx0 = medianIdx + 1;
      var rightIdx = idx - idx0;
      for (var i$5 = 0, len$1 = rightIdx; i$5 < len$1; i$5++) {
        rightEntries$2[i$5] = entries5[idx0 + i$5];
        rightNodes$2[i$5] = nodes[idx0 + i$5];
      }
      rightEntries$2[rightIdx] = subKvn[0];
      rightNodes$2[rightIdx] = updatedNode;
      rightNodes$2[rightIdx + 1] = subKvn[1];
      for (var i$6 = rightIdx + 1, len$2 = rightEntries$2.length; i$6 < len$2; i$6++) {
        rightEntries$2[i$6] = entries5[medianIdx + i$6];
        rightNodes$2[i$6 + 1] = nodes[medianIdx + i$6 + 1];
      }
      var rightNode$2 = new SortedMapBtreeNode(
        this.comparator,
        this.options,
        this.ownerID,
        rightEntries$2,
        rightNodes$2
      );
      outKvn[0] = entries5[medianIdx];
      outKvn[1] = rightNode$2;
      if (canEdit) {
        entries5.length = medianIdx;
        nodes.length = medianIdx + 1;
        newEntries = entries5;
        newNodes = nodes;
      } else {
        newEntries = entries5.slice(0, medianIdx);
        newNodes = nodes.slice(0, medianIdx + 1);
      }
    }
    return this.makeNewNode(newEntries, newNodes, ownerID, canEdit);
  };
  SortedMapBtreeNode.prototype.splitLeaf = function(idx, entry, outKvn, ownerID, canEdit) {
    var entries5 = this.entries;
    var medianIdx = this.btreeNodeSplitSize;
    var newEntries;
    var newNodes;
    if (idx < medianIdx) {
      var rightEntries = entries5.slice(medianIdx, entries5.length);
      var rightNode = new SortedMapBtreeNode(
        this.comparator,
        this.options,
        this.ownerID,
        rightEntries
      );
      outKvn[0] = entries5[medianIdx - 1];
      outKvn[1] = rightNode;
      if (canEdit) {
        entries5.length = medianIdx;
        for (var i4 = medianIdx - 1; i4 >= idx + 1; i4--) {
          entries5[i4] = entries5[i4 - 1];
        }
        entries5[idx] = entry;
        newEntries = entries5;
      } else {
        newEntries = allocArray(medianIdx);
        for (var i$1 = 0; i$1 < idx; i$1++) {
          newEntries[i$1] = entries5[i$1];
        }
        newEntries[idx] = entry;
        for (var i$2 = idx + 1; i$2 < medianIdx; i$2++) {
          newEntries[i$2] = entries5[i$2 - 1];
        }
      }
    } else if (idx === medianIdx) {
      var rightEntries$1 = allocArray(entries5.length - medianIdx);
      rightEntries$1[0] = entries5[medianIdx];
      for (var i$3 = 1, len = rightEntries$1.length; i$3 < len; i$3++) {
        rightEntries$1[i$3] = entries5[medianIdx + i$3];
      }
      var rightNode$1 = new SortedMapBtreeNode(
        this.comparator,
        this.options,
        this.ownerID,
        rightEntries$1
      );
      outKvn[0] = entry;
      outKvn[1] = rightNode$1;
      if (canEdit) {
        entries5.length = medianIdx;
        newEntries = entries5;
      } else {
        newEntries = allocArray(medianIdx);
        for (var i$4 = 0; i$4 < medianIdx; i$4++) {
          newEntries[i$4] = entries5[i$4];
        }
      }
    } else {
      var rightEntries$2 = allocArray(entries5.length - medianIdx);
      var idx0 = medianIdx + 1;
      var rightIdx = idx - idx0;
      for (var i$5 = 0, len$1 = rightIdx; i$5 < len$1; i$5++) {
        rightEntries$2[i$5] = entries5[idx0 + i$5];
      }
      rightEntries$2[rightIdx] = entry;
      for (var i$6 = rightIdx + 1, len$2 = rightEntries$2.length; i$6 < len$2; i$6++) {
        rightEntries$2[i$6] = entries5[medianIdx + i$6];
      }
      var rightNode$2 = new SortedMapBtreeNode(
        this.comparator,
        this.options,
        this.ownerID,
        rightEntries$2
      );
      outKvn[0] = entries5[medianIdx];
      outKvn[1] = rightNode$2;
      if (canEdit) {
        entries5.length = medianIdx;
        newEntries = entries5;
      } else {
        newEntries = entries5.slice(0, medianIdx);
      }
    }
    return this.makeNewNode(newEntries, newNodes, ownerID, canEdit);
  };
  SortedMapBtreeNode.prototype.spliceNode = function(ownerID, idx, updatedNode, parent, parentIdx, canEdit, subKvn, outKvn) {
    var entries5 = this.entries;
    var nodes = this.nodes;
    var newEntries;
    var newNodes;
    var updatedEntry = subKvn[0];
    var updatedNeighbor = subKvn[1];
    var updatedNeighborIsLeft = subKvn[2];
    if (updatedNeighbor === NOT_SET2) {
      if (entries5.length <= this.btreeNodeSplitSize && parent) {
        if (updatedNeighborIsLeft) {
          return this.consolidateNode(
            ownerID,
            idx,
            updatedNode,
            idx - 1,
            idx - 1,
            parent,
            parentIdx,
            canEdit,
            outKvn
          );
        } else {
          return this.consolidateNode(
            ownerID,
            idx,
            updatedNode,
            idx,
            idx + 1,
            parent,
            parentIdx,
            canEdit,
            outKvn
          );
        }
      } else {
        if (updatedNeighborIsLeft) {
          newNodes = setInSpliceOut(nodes, idx, updatedNode, idx - 1, canEdit);
          newEntries = spliceOut$1(entries5, idx - 1, canEdit);
        } else {
          newNodes = setInSpliceOut(nodes, idx, updatedNode, idx + 1, canEdit);
          newEntries = spliceOut$1(entries5, idx, canEdit);
        }
      }
    } else {
      newNodes = setIn$2(nodes, idx, updatedNode, canEdit);
      if (updatedNeighbor) {
        if (updatedNeighborIsLeft) {
          newNodes[idx - 1] = updatedNeighbor;
          newEntries = setIn$2(entries5, idx - 1, updatedEntry, canEdit);
        } else {
          newNodes[idx + 1] = updatedNeighbor;
          newEntries = setIn$2(entries5, idx, updatedEntry, canEdit);
        }
      } else if (updatedEntry) {
        newEntries = setIn$2(entries5, idx, updatedEntry, canEdit);
      } else {
        newEntries = clone(entries5, canEdit);
      }
    }
    return this.makeNewNode(newEntries, newNodes, ownerID, canEdit);
  };
  SortedMapBtreeNode.prototype.consolidateNode = function(ownerID, idx, updatedNode, removeEntryIdx, removeNodeIdx, parent, parentIdx, canEdit, outKvn) {
    var entries5 = this.entries;
    var nodes = this.nodes;
    var parentEntries = parent.entries;
    var parentNodes = parent.nodes;
    var donorNode;
    var mergeNode;
    var leftNode;
    var rightNode;
    if (parentIdx === 0) {
      rightNode = parentNodes[parentIdx + 1];
      mergeNode = donorNode = rightNode;
    } else if (parentIdx === parentNodes.length - 1) {
      leftNode = parentNodes[parentIdx - 1];
      mergeNode = donorNode = leftNode;
    } else {
      leftNode = parentNodes[parentIdx - 1];
      rightNode = parentNodes[parentIdx + 1];
      var leftAvail = (leftNode.entries.length - this.btreeNodeSplitSize + 1) / 2;
      var rightAvail = (rightNode.entries.length - this.btreeNodeSplitSize + 1) / 2;
      if (leftAvail >= rightAvail) {
        donorNode = leftNode;
        mergeNode = rightNode;
      } else {
        donorNode = rightNode;
        mergeNode = leftNode;
      }
    }
    var newEntries;
    var newNodes;
    function moveFromLeftNode(node, n3, merge2) {
      newEntries = spliceOutShiftRightN(entries5, removeEntryIdx, n3, canEdit);
      newNodes = spliceOutShiftRightN(nodes, removeNodeIdx, n3, canEdit);
      var uIdx = idx < removeNodeIdx ? idx + n3 : idx + n3 - 1;
      newNodes[uIdx] = updatedNode;
      var i4 = n3 - 1;
      newEntries[i4] = parentEntries[parentIdx - 1];
      newNodes[i4--] = node.nodes[node.nodes.length - 1];
      var j3;
      for (j3 = node.entries.length - 1; i4 >= 0; i4--, j3--) {
        newEntries[i4] = node.entries[j3];
        newNodes[i4] = node.nodes[j3];
      }
      if (merge2) {
        outKvn[1] = NOT_SET2;
      } else {
        outKvn[0] = node.entries[j3];
        var newNodeEntries = spliceOutN(
          node.entries,
          node.entries.length - n3,
          n3,
          canEdit
        );
        var newNodeNodes = spliceOutN(
          node.nodes,
          node.nodes.length - n3,
          n3,
          canEdit
        );
        outKvn[1] = node.makeNewNode(
          newNodeEntries,
          newNodeNodes,
          ownerID,
          canEdit
        );
      }
      outKvn[2] = true;
    }
    function moveFromRightNode(node, n3, merge2) {
      newEntries = spliceOut$1(entries5, removeEntryIdx, canEdit);
      newNodes = spliceOut$1(nodes, removeNodeIdx, canEdit);
      var j3 = newEntries.length;
      newEntries.length += n3;
      newNodes.length += n3;
      var uIdx = idx < removeNodeIdx ? idx : idx - 1;
      newNodes[uIdx] = updatedNode;
      newEntries[j3++] = parentEntries[parentIdx];
      newNodes[j3] = node.nodes[0];
      for (var i4 = 0, iLimit = n3 - 1; i4 < iLimit; i4++) {
        newEntries[j3 + i4] = node.entries[i4];
        newNodes[j3 + i4 + 1] = node.nodes[i4 + 1];
      }
      if (merge2) {
        outKvn[1] = NOT_SET2;
      } else {
        outKvn[0] = node.entries[n3 - 1];
        var newNodeEntries = spliceOutN(node.entries, 0, n3, canEdit);
        var newNodeNodes = spliceOutN(node.nodes, 0, n3, canEdit);
        outKvn[1] = node.makeNewNode(
          newNodeEntries,
          newNodeNodes,
          ownerID,
          canEdit
        );
      }
      outKvn[2] = false;
    }
    var donorAvail = Math.floor(
      (donorNode.entries.length - this.btreeNodeSplitSize + 1) / 2
    );
    if (donorAvail > 0) {
      if (donorNode === leftNode) {
        moveFromLeftNode(donorNode, donorAvail);
      } else {
        moveFromRightNode(donorNode, donorAvail);
      }
    } else {
      if (mergeNode === leftNode) {
        moveFromLeftNode(mergeNode, mergeNode.entries.length + 1, true);
      } else {
        moveFromRightNode(mergeNode, mergeNode.entries.length + 1, true);
      }
    }
    return this.makeNewNode(newEntries, newNodes, ownerID, canEdit);
  };
  SortedMapBtreeNode.prototype.consolidateLeaf = function(ownerID, idx, parent, parentIdx, canEdit, outKvn) {
    var entries5 = this.entries;
    var parentEntries = parent.entries;
    var parentNodes = parent.nodes;
    var donorNode;
    var leftNode;
    var rightNode;
    if (parentIdx === 0) {
      rightNode = parentNodes[parentIdx + 1];
      donorNode = rightNode;
    } else if (parentIdx === parentNodes.length - 1) {
      leftNode = parentNodes[parentIdx - 1];
      donorNode = leftNode;
    } else {
      leftNode = parentNodes[parentIdx - 1];
      rightNode = parentNodes[parentIdx + 1];
      var leftAvail = leftNode.entries.length - this.btreeNodeSplitSize;
      var rightAvail = rightNode.entries.length - this.btreeNodeSplitSize;
      if (leftAvail >= rightAvail) {
        donorNode = leftNode;
      } else {
        donorNode = rightNode;
      }
    }
    var newEntries;
    function moveFromLeftNode(node, n4, merge2) {
      newEntries = spliceOutShiftRightN(entries5, idx, n4, canEdit);
      var m3 = n4;
      if (!parentNotSet) {
        newEntries[n4 - 1] = parentEntry;
        m3--;
      }
      for (var i4 = 0; i4 < m3; i4++) {
        newEntries[i4] = node.entries[node.entries.length - m3 + i4];
      }
      if (merge2) {
        outKvn[1] = NOT_SET2;
      } else {
        m3++;
        outKvn[0] = node.entries[node.entries.length - m3];
        var newNodeEntries = spliceOutN(
          node.entries,
          node.entries.length - m3,
          m3,
          canEdit
        );
        outKvn[1] = node.makeNewNode(newNodeEntries, void 0, ownerID, canEdit);
      }
      outKvn[2] = true;
    }
    function moveFromRightNode(node, n4, merge2) {
      newEntries = spliceOut$1(entries5, idx, canEdit);
      var j3 = newEntries.length;
      newEntries.length += n4;
      var m3 = n4;
      if (!parentNotSet) {
        newEntries[j3++] = parentEntry;
        m3--;
      }
      for (var i4 = 0; i4 < m3; i4++) {
        newEntries[j3 + i4] = node.entries[i4];
      }
      if (merge2) {
        outKvn[1] = NOT_SET2;
      } else {
        outKvn[0] = node.entries[m3++];
        var newNodeEntries = spliceOutN(node.entries, 0, m3, canEdit);
        outKvn[1] = node.makeNewNode(newNodeEntries, void 0, ownerID, canEdit);
      }
      outKvn[2] = false;
    }
    var parentEntry = donorNode === leftNode ? parentEntries[parentIdx - 1] : parentEntries[parentIdx];
    var parentNotSet = parentEntry[1] === NOT_SET2;
    var parentAdj = parentNotSet ? 1 : 0;
    var donorAvail = donorNode.entries.length - this.btreeNodeSplitSize - parentAdj;
    if (donorAvail > 0) {
      var n3 = Math.floor((donorAvail + 1) / 2);
      if (donorNode === leftNode) {
        moveFromLeftNode(donorNode, n3);
      } else {
        moveFromRightNode(donorNode, n3);
      }
    } else {
      var n$1 = donorNode.entries.length + 1 - parentAdj;
      if (donorNode === leftNode) {
        moveFromLeftNode(donorNode, n$1, true);
      } else {
        moveFromRightNode(donorNode, n$1, true);
      }
    }
    return this.makeNewNode(newEntries, void 0, ownerID, canEdit);
  };
  var SortedMapBtreeNodePacker = function(SortedMapPacker$$1) {
    function SortedMapBtreeNodePacker2() {
      SortedMapPacker$$1.apply(this, arguments);
    }
    if (SortedMapPacker$$1)
      SortedMapBtreeNodePacker2.__proto__ = SortedMapPacker$$1;
    SortedMapBtreeNodePacker2.prototype = Object.create(SortedMapPacker$$1 && SortedMapPacker$$1.prototype);
    SortedMapBtreeNodePacker2.prototype.constructor = SortedMapBtreeNodePacker2;
    SortedMapBtreeNodePacker2.prototype.calcPlanCnt = function calcPlanCnt(order, height) {
      if (height < 1 || height > 20) {
        throw new Error("Height is out of supported limit");
      }
      var n3 = order - 1;
      for (var h3 = 1; h3 < height; h3++) {
        n3 = n3 * order + (order - 1);
      }
      return n3;
    };
    SortedMapBtreeNodePacker2.prototype.prepareCachedPlan = function prepareCachedPlan(order, n3) {
      var key = order.toString() + " " + n3.toString();
      var cachedPlan = SortedMapBtreeNodePacker2.cache[key];
      if (cachedPlan) {
        return cachedPlan;
      }
      var plan = this.preparePlan(order, n3);
      this.verifyPlan(plan);
      if (order < 100 && n3 <= 100 && n3 >= order && SortedMapBtreeNodePacker2.cacheSize < 500) {
        SortedMapBtreeNodePacker2.cache[key] = plan;
        SortedMapBtreeNodePacker2.cacheSize++;
      }
      return plan;
    };
    SortedMapBtreeNodePacker2.prototype.preparePlan = function preparePlan(order, n3) {
      var order1 = order - 1;
      var height = 1;
      var maxEntriesCnt = order1;
      var maxEntriesCnt1;
      while (maxEntriesCnt < n3) {
        maxEntriesCnt1 = maxEntriesCnt;
        maxEntriesCnt = maxEntriesCnt * order + order1;
        height++;
      }
      if (maxEntriesCnt === n3) {
        return {
          op: "build",
          full: true,
          height,
          order,
          repeat: 1,
          total: n3
        };
      }
      if (height === 1) {
        return {
          op: "build",
          full: false,
          height,
          order,
          repeat: 1,
          total: n3
        };
      }
      var planCnt1 = maxEntriesCnt1;
      var rootOrder = 1 + Math.floor(n3 / (planCnt1 + 1));
      if (rootOrder < 2) {
        throw new Error(
          "Something is wrong, the rootOrder is expected to be >= 2"
        );
      }
      if (rootOrder * planCnt1 + (rootOrder - 1) === n3) {
        var repeat = rootOrder;
        var repPlan = [];
        var total$1 = repeat * planCnt1 + repeat - 1;
        repPlan.push({
          op: "build",
          full: true,
          height: height - 1,
          order,
          repeat: rootOrder,
          total: total$1
        });
        return {
          op: "assemble",
          height,
          order,
          total: total$1,
          items: repPlan
        };
      }
      var plan = [];
      if (rootOrder > 2) {
        var repeat$1 = rootOrder - 2;
        var total$2 = repeat$1 * planCnt1 + repeat$1 - 1;
        var build = {
          op: "build",
          full: true,
          height: height - 1,
          order,
          repeat: repeat$1,
          total: total$2
        };
        plan.push(build);
        n3 -= total$2;
        n3--;
      }
      n3--;
      var n22 = Math.floor(n3 / 2);
      if (n3 - n22 > 0) {
        plan.push(this.prepareCachedPlan(order, n3 - n22));
      }
      if (n22 > 0) {
        plan.push(this.prepareCachedPlan(order, n22));
      }
      var total = 0;
      var ilen = plan.length;
      for (var i4 = 0; i4 < ilen; i4++) {
        total += plan[i4].total;
      }
      total += plan.length - 1;
      return {
        op: "assemble",
        height,
        order,
        total,
        items: plan
      };
    };
    SortedMapBtreeNodePacker2.prototype.verifyPlan = function verifyPlan(plan, level) {
      var this$1 = this;
      function failed(msg) {
        throw new Error(msg);
      }
      if (level === void 0) {
        level = 0;
      }
      if (plan.op === "assemble") {
        var cnt = 0;
        var ilen = plan.items.length;
        for (var i4 = 0; i4 < ilen; i4++) {
          var pl = plan.items[i4];
          cnt += pl.total;
          if (pl.op === "build") {
            if (!(pl.order >= pl.repeat)) {
              failed(
                "Plan verification test failed: pl.order >= pl.repeat: " + JSON.stringify(pl)
              );
            }
          }
          if (!(plan.height === pl.height + 1)) {
            failed("Plan verification test failed: plan.height === pl.height+1");
          }
          this$1.verifyPlan(pl, level + 1);
        }
        cnt += plan.items.length - 1;
        if (!(plan.total === cnt)) {
          failed("Count mismatch: " + plan.total + " vs " + cnt);
        }
      } else if (plan.op === "build") {
        var ec = this.calcPlanCnt(plan.order, plan.height);
        if (plan.full) {
          var cnt$1 = ec * plan.repeat + plan.repeat - 1;
          if (!(plan.total === cnt$1)) {
            failed("Plan verification test failed: plan.total === ec");
          }
        } else {
          if (!(plan.height === 1)) {
            failed(
              "Plan verification test failed: expected height 1, got instead " + plan.height
            );
          }
          if (!(plan.total < ec)) {
            failed("Plan verification test failed: plan.total < ec");
          }
          var halfSize = Math.floor((plan.order - 1) / 2);
          if (level > 0 && !(plan.total >= halfSize)) {
            failed(
              "Plan verification test failed: plan.total >= halfSize: " + plan.total + ", " + halfSize
            );
          }
        }
      } else {
        failed("Plan verification test failed: invalid op: " + plan.op);
      }
    };
    SortedMapBtreeNodePacker2.prototype.runPlan = function runPlan(plan, iter) {
      var this$1 = this;
      function failed(msg) {
        msg = "Packing Plan is corrupt: " + msg;
        throw new Error(msg);
      }
      if (plan.op === "assemble") {
        var ilen = plan.items.length;
        for (var i4 = 0; i4 < ilen; i4++) {
          if (i4 > 0) {
            this$1.populate(iter, 1);
          }
          this$1.runPlan(plan.items[i4], iter);
        }
      } else if (plan.op === "build") {
        var n3 = (plan.total - plan.repeat + 1) / plan.repeat;
        for (var i$1 = 0; i$1 < plan.repeat; i$1++) {
          if (i$1 > 0) {
            this$1.populate(iter, 1);
          }
          this$1.populate(iter, n3);
        }
      } else {
        failed("invalid op: " + plan.op);
      }
      this.flush(plan.height);
    };
    SortedMapBtreeNodePacker2.prototype.flushLevel = function flushLevel(level) {
      this.prepareLevel(level + 1);
      var node = this.stack[level];
      node._calcSize();
      this.addNode(level + 1, node);
      this.stack[level] = void 0;
    };
    SortedMapBtreeNodePacker2.prototype.flush = function flush(height) {
      var this$1 = this;
      for (var i4 = 0; i4 < height; i4++) {
        var level = i4;
        if (this$1.stack[level]) {
          this$1.flushLevel(level);
        }
      }
      this.stackLevel = height;
    };
    SortedMapBtreeNodePacker2.prototype.populate = function populate(iter, n3) {
      var this$1 = this;
      for (var i4 = 0; i4 < n3; i4++) {
        var next = iter.next();
        this$1.entriesCnt++;
        if (next.done) {
          throw new Error(
            "unexpected end of iterator at " + this$1.entriesCnt + " vs " + iter.size
          );
        }
        var entry = next.value;
        var level = this$1.stackLevel;
        this$1.prepareLevel(level);
        this$1.addEntry(level, entry);
        if (level > 0) {
          this$1.stackLevel = 0;
        } else if (this$1.stackIndices[level] === this$1.order - 1) {
          this$1.flushLevel(level);
          this$1.stackLevel++;
        }
      }
    };
    SortedMapBtreeNodePacker2.prototype.addEntry = function addEntry(level, entry) {
      this.stack[level].entries[this.stackIndices[level]++] = entry;
    };
    SortedMapBtreeNodePacker2.prototype.addNode = function addNode(level, node) {
      this.stack[level].nodes[this.stackIndices[level]] = node;
      if (this.stackIndices[level] === this.order - 1) {
        this.flushLevel(level);
        this.stackLevel++;
      }
    };
    SortedMapBtreeNodePacker2.prototype.prepareLevel = function prepareLevel(level) {
      if (!this.stack[level]) {
        var entries5 = allocArray(this.order - 1);
        entries5.length = 0;
        var nodes;
        if (level > 0) {
          nodes = allocArray(this.order);
          nodes.length = 0;
        }
        this.stack[level] = new SortedMapBtreeNode(
          this.comparator,
          this.options,
          this.ownerID,
          entries5,
          nodes
        );
        this.stackIndices[level] = 0;
      }
    };
    SortedMapBtreeNodePacker2.prototype.finish = function finish() {
      var level = this.stackLevel;
      if (level >= this.stack.length) {
        return void 0;
      }
      return this.stack[level].nodes[0];
    };
    SortedMapBtreeNodePacker2.prototype.pack = function pack2(comparator, options, ownerID, collection) {
      if (options && options.type && options.type !== DEFAULT_TYPE) {
        throw new Error("Unsuported type by btree factory: " + options.type);
      }
      this.order = options && options.btreeOrder ? options.btreeOrder : DEFAULT_BTREE_ORDER;
      var kc = KeyedCollection2(collection);
      assertNotInfinite2(kc.size);
      var plan = this.preparePlan(this.order, kc.size);
      this.comparator = comparator;
      this.options = options;
      this.ownerID = ownerID;
      this.stack = [];
      this.stackIndices = [];
      this.stackLevel = 0;
      this.entriesCnt = 0;
      var iter = kc.entries();
      this.runPlan(plan, iter);
      if (!iter.next().done) {
        throw new Error("iterator did not end when expected");
      }
      return this.finish();
    };
    return SortedMapBtreeNodePacker2;
  }(SortedMapPacker);
  SortedMapBtreeNodePacker.cache = {};
  SortedMapBtreeNodePacker.cacheSize = 0;
  var SortedMapBtreeNodeFactory = function(SortedMapNodeFactory$$1) {
    function SortedMapBtreeNodeFactory2() {
      SortedMapNodeFactory$$1.apply(this, arguments);
    }
    if (SortedMapNodeFactory$$1)
      SortedMapBtreeNodeFactory2.__proto__ = SortedMapNodeFactory$$1;
    SortedMapBtreeNodeFactory2.prototype = Object.create(SortedMapNodeFactory$$1 && SortedMapNodeFactory$$1.prototype);
    SortedMapBtreeNodeFactory2.prototype.constructor = SortedMapBtreeNodeFactory2;
    SortedMapBtreeNodeFactory2.prototype.createNode = function createNode2(comparator, options, ownerID, entries5, nodes) {
      return new SortedMapBtreeNode(comparator, options, ownerID, entries5, nodes);
    };
    SortedMapBtreeNodeFactory2.prototype.createPacker = function createPacker2() {
      return new SortedMapBtreeNodePacker();
    };
    SortedMapBtreeNodeFactory2.prototype.createIterator = function createIterator2(map5, type2, reverse5) {
      return new SortedMapBtreeNodeIterator(map5, type2, reverse5);
    };
    return SortedMapBtreeNodeFactory2;
  }(SortedMapNodeFactory);
  var SortedMap = function(Map$$1) {
    function SortedMap2(value, comparator, options) {
      if (!comparator) {
        if (this instanceof SortedMap2) {
          comparator = this.getComparator();
        }
        if (!comparator) {
          comparator = SortedMap2.defaultComparator;
        }
      }
      if (!options) {
        if (this instanceof SortedMap2) {
          options = this.getOptions();
        }
        if (!options) {
          options = SortedMap2.defaultOptions;
        }
      }
      return value === null || value === void 0 ? emptySortedMap(comparator, options) : isSortedMap(value) && value.getComparator() === comparator && value.getOptions() === options ? value : emptySortedMap(comparator, options).withMutations(function(map5) {
        map5.pack(value);
      });
    }
    if (Map$$1)
      SortedMap2.__proto__ = Map$$1;
    SortedMap2.prototype = Object.create(Map$$1 && Map$$1.prototype);
    SortedMap2.prototype.constructor = SortedMap2;
    SortedMap2.of = function of() {
      var keyValues = [], len = arguments.length;
      while (len--)
        keyValues[len] = arguments[len];
      return emptySortedMap().withMutations(function(map5) {
        for (var i4 = 0; i4 < keyValues.length; i4 += 2) {
          if (i4 + 1 >= keyValues.length) {
            throw new Error("Missing value for key: " + keyValues[i4]);
          }
          map5.set(keyValues[i4], keyValues[i4 + 1]);
        }
      });
    };
    SortedMap2.prototype.toString = function toString8() {
      return this.__toString("SortedMap {", "}");
    };
    SortedMap2.prototype.getComparator = function getComparator2() {
      return this._comparator;
    };
    SortedMap2.prototype.getOptions = function getOptions() {
      return this._options;
    };
    SortedMap2.prototype.get = function get24(k3, notSetValue) {
      return this._root ? this._root.get(k3, notSetValue) : notSetValue;
    };
    SortedMap2.prototype.entryAt = function entryAt(index) {
      return this._root ? this._root.entryAt(index) : new Error("index is out of bounds");
    };
    SortedMap2.prototype.keyAt = function keyAt(index) {
      return this._root ? this._root.keyAt(index) : new Error("index is out of bounds");
    };
    SortedMap2.prototype.valueAt = function valueAt(index) {
      return this._root ? this._root.valueAt(index) : new Error("index is out of bounds");
    };
    SortedMap2.prototype.clear = function clear3() {
      if (this.size === 0) {
        return this;
      }
      if (this.__ownerID) {
        this.size = 0;
        this._root = null;
        this.__altered = true;
        return this;
      }
      return emptySortedMap(this._comparator, this._options);
    };
    SortedMap2.prototype.pack = function pack2(value) {
      var this$1 = this;
      var collection;
      if (value === void 0) {
        collection = this;
      } else {
        var index = 0;
        var entries5 = KeyedCollection2(value).map(function(v3, k3) {
          return [k3, v3, index++];
        }).valueSeq().toArray();
        if (entries5.length === 0) {
          if (this.__ownerID) {
            this._root = void 0;
            this.size = 0, this.__altered = true;
            return this;
          }
          return emptySortedMap(this._comparator, this._options);
        }
        entries5.sort(function(a4, b3) {
          return this$1._comparator(a4[0], b3[0]) || a4[2] - b3[2];
        });
        var result = [];
        for (var i4 = 0, stop = entries5.length - 1; i4 < stop; i4++) {
          var entry = entries5[i4];
          var nextEntry = entries5[i4 + 1];
          if (this$1._comparator(entry[0], nextEntry[0]) < 0) {
            var newEntry = [entry[0], entry[1]];
            result.push(newEntry);
          }
        }
        var entry$1 = entries5[entries5.length - 1];
        var newEntry$1 = [entry$1[0], entry$1[1]];
        result.push(newEntry$1);
        collection = KeyedSeq2(result);
      }
      assertNotInfinite2(collection.size);
      var newSize = collection.size;
      var newRoot = this._factory.createPacker().pack(this._comparator, this._options, this.__ownerID, collection);
      if (this.__ownerID) {
        this._root = newRoot;
        this.size = newSize, this.__altered = true;
        return this;
      }
      return newRoot ? makeSortedMap(this._comparator, this._options, newSize, newRoot) : emptySortedMap(this._comparator, this._options);
    };
    SortedMap2.prototype.set = function set7(k3, v3) {
      return updateMap$1(this, k3, v3);
    };
    SortedMap2.prototype.remove = function remove7(k3) {
      return updateMap$1(this, k3, NOT_SET2);
    };
    SortedMap2.prototype.fastRemove = function fastRemove2(k3) {
      return updateMap$1(this, k3, NOT_SET2, true);
    };
    SortedMap2.prototype.sort = function sort3(comparator) {
      return SortedMap2(this, comparator, this.getOptions());
    };
    SortedMap2.prototype.sortBy = function sortBy3(mapper, comparator) {
      return SortedMap2(
        sortFactory2(this, comparator, mapper),
        comparator,
        this.getOptions()
      );
    };
    SortedMap2.prototype.__iterator = function __iterator3(type2, reverse5) {
      return this._factory.createIterator(this, type2, reverse5);
    };
    SortedMap2.prototype.__ensureOwner = function __ensureOwner3(ownerID) {
      if (ownerID === this.__ownerID) {
        return this;
      }
      if (!ownerID) {
        if (this.size === 0) {
          return emptySortedMap(this._comparator, this._options);
        }
        this.__ownerID = ownerID;
        this.__altered = false;
        return this;
      }
      return makeSortedMap(
        this._comparator,
        this._options,
        this.size,
        this._root,
        ownerID
      );
    };
    SortedMap2.prototype.checkConsistency = function checkConsistency2(printFlag) {
      var this$1 = this;
      if (this._root) {
        if (!(this.size > 0)) {
          return 1;
        }
        return this._root.checkConsistency(printFlag);
      } else if (!(this.size === 0)) {
        return 2;
      }
      var n3 = 0;
      var prevKey;
      this.keySeq().forEach(function(key) {
        if (n3 && !(this$1._comparator(prevKey, key) < 0)) {
          return 3;
        }
        prevKey = key;
        n3++;
      });
      if (this.size !== n3) {
        return 4;
      }
      return 0;
    };
    SortedMap2.prototype.print = function print2(maxDepth) {
      var header = "SORTED MAP: size=" + this.size;
      if (this._options) {
        header = header + ", options=" + JSON.stringify(this._options);
      }
      console.log(header);
      if (this._root) {
        this._root.print(1, maxDepth);
      }
      return this;
    };
    SortedMap2.prototype.from = function from(key, backwards) {
      var self = this;
      var sequence = Object.create(KeyedSeq2).prototype;
      sequence.__iterateUncached = function(fn, reverse5) {
        var this$1 = this;
        if (!self._root) {
          return 0;
        }
        var iterations = 0;
        if (backwards) {
          self._root.iterateFromBackwards(
            key,
            function(entry) {
              iterations++;
              return fn(entry[1], entry[0], this$1);
            },
            reverse5
          );
        } else {
          self._root.iterateFrom(
            key,
            function(entry) {
              iterations++;
              return fn(entry[1], entry[0], this$1);
            },
            reverse5
          );
        }
        return iterations;
      };
      return sequence;
    };
    SortedMap2.prototype.fromIndex = function fromIndex(index, backwards) {
      var self = this;
      var sequence = Object.create(KeyedSeq2).prototype;
      sequence.__iterateUncached = function(fn, reverse5) {
        var this$1 = this;
        if (reverse5) {
          throw new Error("fromIndex: reverse mode not supported");
        }
        if (!self._root) {
          return 0;
        }
        var iterations = 0;
        if (backwards) {
          self._root.iterateFromIndexBackwards(
            index,
            function(entry) {
              iterations++;
              return fn(entry[1], entry[0], this$1);
            },
            reverse5
          );
        } else {
          self._root.iterateFromIndex(
            index,
            function(entry) {
              iterations++;
              return fn(entry[1], entry[0], this$1);
            },
            reverse5
          );
        }
        return iterations;
      };
      return sequence;
    };
    return SortedMap2;
  }(Map3);
  SortedMap.isSortedMap = isSortedMap;
  SortedMap.defaultComparator = defaultComparator$1;
  SortedMap.defaultOptions = {
    type: "btree"
  };
  var SortedMapPrototype = SortedMap.prototype;
  SortedMapPrototype[IS_SORTED_SYMBOL] = true;
  SortedMapPrototype[DELETE2] = SortedMapPrototype.remove;
  SortedMapPrototype.removeIn = SortedMapPrototype.deleteIn;
  SortedMapPrototype.removeAll = SortedMapPrototype.deleteAll;
  function makeSortedMap(comparator, options, size, root2, ownerID) {
    var map5 = Object.create(SortedMapPrototype);
    map5._comparator = comparator || SortedMap.defaultComparator;
    map5._options = options || SortedMap.defaultOptions;
    map5.size = size;
    map5._root = root2;
    map5._factory = SortedMap.getFactory(map5._options);
    map5.__ownerID = ownerID;
    map5.__altered = false;
    if (map5._options.btreeOrder && map5._options.btreeOrder < 3) {
      throw new Error(
        "SortedMap: minimum value of options.btreeOrder is 3, but got: " + map5._options.btreeOrder
      );
    }
    if (!map5._factory) {
      throw new Error("SortedMap type not supported: " + map5._options.type);
    }
    return map5;
  }
  var DEFAULT_EMPTY_MAP;
  function emptySortedMap(comparator, options) {
    if (comparator === SortedMap.defaultComparator && options === SortedMap.defaultOptions) {
      return DEFAULT_EMPTY_MAP || (DEFAULT_EMPTY_MAP = makeSortedMap(
        SortedMap.defaultComparator,
        SortedMap.defaultOptions,
        0
      ));
    }
    return makeSortedMap(comparator, options, 0);
  }
  function updateMap$1(map5, k3, v3, fast) {
    var remove7 = v3 === NOT_SET2;
    var root2 = map5._root;
    var newRoot;
    var newSize;
    if (!root2) {
      if (remove7) {
        return map5;
      }
      newSize = 1;
      var entries5 = [[k3, v3]];
      newRoot = map5._factory.createNode(
        map5._comparator,
        map5._options,
        map5.__ownerID,
        entries5
      );
    } else {
      var didChangeSize = MakeRef2();
      var didAlter = MakeRef2();
      if (remove7) {
        if (fast) {
          newRoot = map5._root.fastRemove(
            map5.__ownerID,
            k3,
            didChangeSize,
            didAlter
          );
        } else {
          newRoot = map5._root.remove(map5.__ownerID, k3, didChangeSize, didAlter);
        }
      } else {
        newRoot = map5._root.upsert(map5.__ownerID, k3, v3, didChangeSize, didAlter);
      }
      if (!GetRef(didAlter)) {
        return map5;
      }
      newSize = map5.size + (GetRef(didChangeSize) ? remove7 ? -1 : 1 : 0);
      if (newSize === 0) {
        newRoot = void 0;
      }
    }
    if (map5.__ownerID) {
      map5.size = newSize;
      map5._root = newRoot;
      map5.__altered = true;
      return map5;
    }
    return newRoot ? makeSortedMap(map5._comparator, map5._options, newSize, newRoot) : emptySortedMap(map5._comparator, map5._options);
  }
  function defaultComparator$1(a4, b3) {
    if (is2(a4, b3)) {
      return 0;
    }
    var ta = typeof a4;
    var tb = typeof b3;
    if (ta !== tb) {
      return ta < tb ? -1 : 1;
    }
    switch (ta) {
      case "undefined":
        break;
      case "object":
        if (a4 === null) {
          return 1;
        }
        if (b3 === null) {
          return -1;
        }
        a4 = a4.toString();
        b3 = b3.toString();
        break;
      case "boolean":
        break;
      case "number":
        if (is2(a4, NaN)) {
          return 1;
        }
        if (is2(b3, NaN)) {
          return -1;
        }
        break;
      case "string":
        break;
      case "symbol":
        a4 = a4.toString();
        b3 = b3.toString();
        break;
      case "function":
        a4 = a4.toString();
        b3 = b3.toString();
        break;
      default:
        break;
    }
    return a4 < b3 ? -1 : a4 > b3 ? 1 : 0;
  }
  SortedMap.getFactory = function(options) {
    var type2 = options && options.type ? options.type : SortedMap.defaultOptions.type;
    return SortedMap.factories[type2];
  };
  SortedMap.factories = {
    btree: new SortedMapBtreeNodeFactory()
  };
  var IS_STACK_SYMBOL2 = "@@__IMMUTABLE_STACK__@@";
  function isStack2(maybeStack) {
    return Boolean(maybeStack && maybeStack[IS_STACK_SYMBOL2]);
  }
  var Stack2 = function(IndexedCollection$$1) {
    function Stack3(value) {
      return value === null || value === void 0 ? emptyStack2() : isStack2(value) ? value : emptyStack2().pushAll(value);
    }
    if (IndexedCollection$$1)
      Stack3.__proto__ = IndexedCollection$$1;
    Stack3.prototype = Object.create(IndexedCollection$$1 && IndexedCollection$$1.prototype);
    Stack3.prototype.constructor = Stack3;
    Stack3.of = function of() {
      return this(arguments);
    };
    Stack3.prototype.toString = function toString8() {
      return this.__toString("Stack [", "]");
    };
    Stack3.prototype.get = function get24(index, notSetValue) {
      var head = this._head;
      index = wrapIndex2(this, index);
      while (head && index--) {
        head = head.next;
      }
      return head ? head.value : notSetValue;
    };
    Stack3.prototype.peek = function peek() {
      return this._head && this._head.value;
    };
    Stack3.prototype.push = function push() {
      var arguments$1 = arguments;
      if (arguments.length === 0) {
        return this;
      }
      var newSize = this.size + arguments.length;
      var head = this._head;
      for (var ii = arguments.length - 1; ii >= 0; ii--) {
        head = {
          value: arguments$1[ii],
          next: head
        };
      }
      if (this.__ownerID) {
        this.size = newSize;
        this._head = head;
        this.__hash = void 0;
        this.__altered = true;
        return this;
      }
      return makeStack2(newSize, head);
    };
    Stack3.prototype.pushAll = function pushAll(iter) {
      iter = IndexedCollection$$1(iter);
      if (iter.size === 0) {
        return this;
      }
      if (this.size === 0 && isStack2(iter)) {
        return iter;
      }
      assertNotInfinite2(iter.size);
      var newSize = this.size;
      var head = this._head;
      iter.__iterate(
        function(value) {
          newSize++;
          head = {
            value,
            next: head
          };
        },
        /* reverse */
        true
      );
      if (this.__ownerID) {
        this.size = newSize;
        this._head = head;
        this.__hash = void 0;
        this.__altered = true;
        return this;
      }
      return makeStack2(newSize, head);
    };
    Stack3.prototype.pop = function pop() {
      return this.slice(1);
    };
    Stack3.prototype.clear = function clear3() {
      if (this.size === 0) {
        return this;
      }
      if (this.__ownerID) {
        this.size = 0;
        this._head = void 0;
        this.__hash = void 0;
        this.__altered = true;
        return this;
      }
      return emptyStack2();
    };
    Stack3.prototype.slice = function slice7(begin, end) {
      if (wholeSlice2(begin, end, this.size)) {
        return this;
      }
      var resolvedBegin = resolveBegin2(begin, this.size);
      var resolvedEnd = resolveEnd2(end, this.size);
      if (resolvedEnd !== this.size) {
        return IndexedCollection$$1.prototype.slice.call(this, begin, end);
      }
      var newSize = this.size - resolvedBegin;
      var head = this._head;
      while (resolvedBegin--) {
        head = head.next;
      }
      if (this.__ownerID) {
        this.size = newSize;
        this._head = head;
        this.__hash = void 0;
        this.__altered = true;
        return this;
      }
      return makeStack2(newSize, head);
    };
    Stack3.prototype.__ensureOwner = function __ensureOwner3(ownerID) {
      if (ownerID === this.__ownerID) {
        return this;
      }
      if (!ownerID) {
        if (this.size === 0) {
          return emptyStack2();
        }
        this.__ownerID = ownerID;
        this.__altered = false;
        return this;
      }
      return makeStack2(this.size, this._head, ownerID, this.__hash);
    };
    Stack3.prototype.__iterate = function __iterate3(fn, reverse5) {
      var this$1 = this;
      if (reverse5) {
        return new ArraySeq2(this.toArray()).__iterate(
          function(v3, k3) {
            return fn(v3, k3, this$1);
          },
          reverse5
        );
      }
      var iterations = 0;
      var node = this._head;
      while (node) {
        if (fn(node.value, iterations++, this$1) === false) {
          break;
        }
        node = node.next;
      }
      return iterations;
    };
    Stack3.prototype.__iterator = function __iterator3(type2, reverse5) {
      if (reverse5) {
        return new ArraySeq2(this.toArray()).__iterator(type2, reverse5);
      }
      var iterations = 0;
      var node = this._head;
      return new Iterator3(function() {
        if (node) {
          var value = node.value;
          node = node.next;
          return iteratorValue2(type2, iterations++, value);
        }
        return iteratorDone2();
      });
    };
    return Stack3;
  }(IndexedCollection2);
  Stack2.isStack = isStack2;
  var StackPrototype2 = Stack2.prototype;
  StackPrototype2[IS_STACK_SYMBOL2] = true;
  StackPrototype2.shift = StackPrototype2.pop;
  StackPrototype2.unshift = StackPrototype2.push;
  StackPrototype2.unshiftAll = StackPrototype2.pushAll;
  StackPrototype2.withMutations = withMutations2;
  StackPrototype2.wasAltered = wasAltered3;
  StackPrototype2.asImmutable = asImmutable2;
  StackPrototype2["@@transducer/init"] = StackPrototype2.asMutable = asMutable2;
  StackPrototype2["@@transducer/step"] = function(result, arr) {
    return result.unshift(arr);
  };
  StackPrototype2["@@transducer/result"] = function(obj) {
    return obj.asImmutable();
  };
  function makeStack2(size, head, ownerID, hash3) {
    var map5 = Object.create(StackPrototype2);
    map5.size = size;
    map5._head = head;
    map5.__ownerID = ownerID;
    map5.__hash = hash3;
    map5.__altered = false;
    return map5;
  }
  var EMPTY_STACK2;
  function emptyStack2() {
    return EMPTY_STACK2 || (EMPTY_STACK2 = makeStack2(0));
  }
  var IS_SET_SYMBOL2 = "@@__IMMUTABLE_SET__@@";
  function isSet2(maybeSet) {
    return Boolean(maybeSet && maybeSet[IS_SET_SYMBOL2]);
  }
  function isOrderedSet2(maybeOrderedSet) {
    return isSet2(maybeOrderedSet) && isOrdered2(maybeOrderedSet);
  }
  function deepEqual2(a4, b3) {
    if (a4 === b3) {
      return true;
    }
    if (!isCollection2(b3) || a4.size !== void 0 && b3.size !== void 0 && a4.size !== b3.size || a4.__hash !== void 0 && b3.__hash !== void 0 && a4.__hash !== b3.__hash || isKeyed2(a4) !== isKeyed2(b3) || isIndexed2(a4) !== isIndexed2(b3) || isOrdered2(a4) !== isOrdered2(b3) || isSorted(a4) !== isSorted(b3)) {
      return false;
    }
    if (a4.size === 0 && b3.size === 0) {
      return true;
    }
    var notAssociative = !isAssociative2(a4);
    if (isOrdered2(a4)) {
      var entries5 = a4.entries();
      return b3.every(function(v3, k3) {
        var entry = entries5.next().value;
        return entry && is2(entry[1], v3) && (notAssociative || is2(entry[0], k3));
      }) && entries5.next().done;
    }
    var flipped = false;
    if (a4.size === void 0) {
      if (b3.size === void 0) {
        if (typeof a4.cacheResult === "function") {
          a4.cacheResult();
        }
      } else {
        flipped = true;
        var _2 = a4;
        a4 = b3;
        b3 = _2;
      }
    }
    var allEqual = true;
    var bSize = b3.__iterate(function(v3, k3) {
      if (notAssociative ? !a4.has(v3) : flipped ? !is2(v3, a4.get(k3, NOT_SET2)) : !is2(a4.get(k3, NOT_SET2), v3)) {
        allEqual = false;
        return false;
      }
    });
    return allEqual && a4.size === bSize;
  }
  function mixin2(ctor, methods) {
    var keyCopier = function(key) {
      ctor.prototype[key] = methods[key];
    };
    Object.keys(methods).forEach(keyCopier);
    Object.getOwnPropertySymbols && Object.getOwnPropertySymbols(methods).forEach(keyCopier);
    return ctor;
  }
  function toJS2(value) {
    if (!value || typeof value !== "object") {
      return value;
    }
    if (!isCollection2(value)) {
      if (!isDataStructure2(value)) {
        return value;
      }
      value = Seq2(value);
    }
    if (isKeyed2(value)) {
      var result$1 = {};
      value.__iterate(function(v3, k3) {
        result$1[k3] = toJS2(v3);
      });
      return result$1;
    }
    var result = [];
    value.__iterate(function(v3) {
      result.push(toJS2(v3));
    });
    return result;
  }
  function isSortedSet(maybeSortedSet) {
    return isSet2(maybeSortedSet) && isSorted(maybeSortedSet);
  }
  var Set3 = function(SetCollection$$1) {
    function Set4(value) {
      return value === null || value === void 0 ? emptySet2() : isSet2(value) && !isOrdered2(value) && !isSorted(value) ? value : emptySet2().withMutations(function(set7) {
        var iter = SetCollection$$1(value);
        assertNotInfinite2(iter.size);
        iter.forEach(function(v3) {
          return set7.add(v3);
        });
      });
    }
    if (SetCollection$$1)
      Set4.__proto__ = SetCollection$$1;
    Set4.prototype = Object.create(SetCollection$$1 && SetCollection$$1.prototype);
    Set4.prototype.constructor = Set4;
    Set4.of = function of() {
      return this(arguments);
    };
    Set4.fromKeys = function fromKeys(value) {
      return this(KeyedCollection2(value).keySeq());
    };
    Set4.intersect = function intersect(sets) {
      sets = Collection3(sets).toArray();
      return sets.length ? SetPrototype2.intersect.apply(Set4(sets.pop()), sets) : emptySet2();
    };
    Set4.union = function union(sets) {
      sets = Collection3(sets).toArray();
      return sets.length ? SetPrototype2.union.apply(Set4(sets.pop()), sets) : emptySet2();
    };
    Set4.prototype.toString = function toString8() {
      return this.__toString("Set {", "}");
    };
    Set4.prototype.has = function has9(value) {
      return this._map.has(value);
    };
    Set4.prototype.add = function add(value) {
      return updateSet2(this, this._map.set(value, value));
    };
    Set4.prototype.remove = function remove7(value) {
      return updateSet2(this, this._map.remove(value));
    };
    Set4.prototype.clear = function clear3() {
      return updateSet2(this, this._map.clear());
    };
    Set4.prototype.map = function map5(mapper, context) {
      var this$1 = this;
      var removes = [];
      var adds = [];
      this.forEach(function(value) {
        var mapped = mapper.call(context, value, value, this$1);
        if (mapped !== value) {
          removes.push(value);
          adds.push(mapped);
        }
      });
      return this.withMutations(function(set7) {
        removes.forEach(function(value) {
          return set7.remove(value);
        });
        adds.forEach(function(value) {
          return set7.add(value);
        });
      });
    };
    Set4.prototype.union = function union() {
      var iters = [], len = arguments.length;
      while (len--)
        iters[len] = arguments[len];
      iters = iters.filter(function(x3) {
        return x3.size !== 0;
      });
      if (iters.length === 0) {
        return this;
      }
      if (this.size === 0 && !this.__ownerID && iters.length === 1) {
        return this.constructor(iters[0]);
      }
      return this.withMutations(function(set7) {
        for (var ii = 0; ii < iters.length; ii++) {
          SetCollection$$1(iters[ii]).forEach(function(value) {
            return set7.add(value);
          });
        }
      });
    };
    Set4.prototype.intersect = function intersect() {
      var iters = [], len = arguments.length;
      while (len--)
        iters[len] = arguments[len];
      if (iters.length === 0) {
        return this;
      }
      iters = iters.map(function(iter) {
        return SetCollection$$1(iter);
      });
      var toRemove = [];
      this.forEach(function(value) {
        if (!iters.every(function(iter) {
          return iter.includes(value);
        })) {
          toRemove.push(value);
        }
      });
      return this.withMutations(function(set7) {
        toRemove.forEach(function(value) {
          set7.remove(value);
        });
      });
    };
    Set4.prototype.subtract = function subtract() {
      var iters = [], len = arguments.length;
      while (len--)
        iters[len] = arguments[len];
      if (iters.length === 0) {
        return this;
      }
      iters = iters.map(function(iter) {
        return SetCollection$$1(iter);
      });
      var toRemove = [];
      this.forEach(function(value) {
        if (iters.some(function(iter) {
          return iter.includes(value);
        })) {
          toRemove.push(value);
        }
      });
      return this.withMutations(function(set7) {
        toRemove.forEach(function(value) {
          set7.remove(value);
        });
      });
    };
    Set4.prototype.sort = function sort3(comparator) {
      return OrderedSet2(sortFactory2(this, comparator));
    };
    Set4.prototype.sortBy = function sortBy3(mapper, comparator) {
      return OrderedSet2(sortFactory2(this, comparator, mapper));
    };
    Set4.prototype.wasAltered = function wasAltered5() {
      return this._map.wasAltered();
    };
    Set4.prototype.__iterate = function __iterate3(fn, reverse5) {
      var this$1 = this;
      return this._map.__iterate(function(k3) {
        return fn(k3, k3, this$1);
      }, reverse5);
    };
    Set4.prototype.__iterator = function __iterator3(type2, reverse5) {
      return this._map.__iterator(type2, reverse5);
    };
    Set4.prototype.__ensureOwner = function __ensureOwner3(ownerID) {
      if (ownerID === this.__ownerID) {
        return this;
      }
      var newMap = this._map.__ensureOwner(ownerID);
      if (!ownerID) {
        if (this.size === 0) {
          return this.__empty();
        }
        this.__ownerID = ownerID;
        this._map = newMap;
        return this;
      }
      return this.__make(newMap, ownerID);
    };
    return Set4;
  }(SetCollection2);
  Set3.isSet = isSet2;
  var SetPrototype2 = Set3.prototype;
  SetPrototype2[IS_SET_SYMBOL2] = true;
  SetPrototype2[DELETE2] = SetPrototype2.remove;
  SetPrototype2.merge = SetPrototype2.concat = SetPrototype2.union;
  SetPrototype2.withMutations = withMutations2;
  SetPrototype2.asImmutable = asImmutable2;
  SetPrototype2["@@transducer/init"] = SetPrototype2.asMutable = asMutable2;
  SetPrototype2["@@transducer/step"] = function(result, arr) {
    return result.add(arr);
  };
  SetPrototype2["@@transducer/result"] = function(obj) {
    return obj.asImmutable();
  };
  SetPrototype2.__empty = emptySet2;
  SetPrototype2.__make = makeSet2;
  function updateSet2(set7, newMap) {
    if (set7.__ownerID) {
      set7.size = newMap.size;
      set7._map = newMap;
      return set7;
    }
    return newMap === set7._map ? set7 : newMap.size === 0 ? set7.__empty() : set7.__make(newMap);
  }
  function makeSet2(map5, ownerID) {
    var set7 = Object.create(SetPrototype2);
    set7.size = map5 ? map5.size : 0;
    set7._map = map5;
    set7.__ownerID = ownerID;
    return set7;
  }
  var EMPTY_SET2;
  function emptySet2() {
    return EMPTY_SET2 || (EMPTY_SET2 = makeSet2(emptyMap2()));
  }
  var SortedSet = function(Set$$1) {
    function SortedSet2(value, comparator, options) {
      if (!comparator) {
        if (this instanceof SortedSet2) {
          comparator = this._map && this.getComparator();
        }
        if (!comparator) {
          comparator = SortedSet2.defaultComparator;
        }
      }
      if (!options) {
        if (this instanceof SortedSet2) {
          options = this._map && this.getOptions();
        }
        if (!options) {
          options = SortedSet2.defaultOptions;
        }
      }
      return value === null || value === void 0 ? emptySortedSet(comparator, options) : isSortedSet(value) && value.getComparator() === comparator && value.getOptions() === options ? value : emptySortedSet(comparator, options).withMutations(function(set7) {
        set7.pack(value);
      });
    }
    if (Set$$1)
      SortedSet2.__proto__ = Set$$1;
    SortedSet2.prototype = Object.create(Set$$1 && Set$$1.prototype);
    SortedSet2.prototype.constructor = SortedSet2;
    SortedSet2.of = function of() {
      return this(arguments);
    };
    SortedSet2.fromKeys = function fromKeys(value) {
      return this(KeyedCollection2(value).keySeq());
    };
    SortedSet2.prototype.toString = function toString8() {
      return this.__toString("SortedSet {", "}");
    };
    SortedSet2.prototype.getComparator = function getComparator2() {
      return this._map.getComparator();
    };
    SortedSet2.prototype.getOptions = function getOptions() {
      return this._map.getOptions();
    };
    SortedSet2.prototype.pack = function pack2(value) {
      var seq = value === void 0 ? void 0 : SetCollection2(value).toKeyedSeq().mapKeys(function(k3, v3) {
        return v3;
      });
      return updateSortedSet(this, this._map.pack(seq));
    };
    SortedSet2.prototype.from = function from(value, backwards) {
      return this._map.from(value, backwards).toSetSeq();
    };
    SortedSet2.prototype.fromIndex = function fromIndex(index, backwards) {
      return this._map.fromIndex(index, backwards).toSetSeq();
    };
    SortedSet2.prototype.sort = function sort3(comparator) {
      return SortedSet2(this, comparator, this.getOptions());
    };
    SortedSet2.prototype.sortBy = function sortBy3(mapper, comparator) {
      return SortedSet2(mapFactory2(this, mapper), comparator, this.getOptions());
    };
    SortedSet2.prototype.__ensureOwner = function __ensureOwner3(ownerID) {
      if (ownerID === this.__ownerID) {
        return this;
      }
      var newMap = this._map.__ensureOwner(ownerID);
      if (!ownerID) {
        if (this.size === 0) {
          return this.__empty();
        }
        this.__ownerID = ownerID;
        this._map = newMap;
        return this;
      }
      return this.__make(newMap, ownerID);
    };
    return SortedSet2;
  }(Set3);
  SortedSet.isSortedSet = isSortedSet;
  SortedSet.defaultComparator = SortedMap.defaultComparator;
  SortedSet.defaultOptions = SortedMap.defaultOptions;
  var SortedSetPrototype = SortedSet.prototype;
  SortedSetPrototype[IS_SORTED_SYMBOL] = true;
  SortedSetPrototype.__empty = function() {
    return emptySortedSet(this.getComparator(), this.getOptions());
  };
  SortedSetPrototype.__make = makeSortedSet;
  function updateSortedSet(set7, newMap) {
    if (set7.__ownerID) {
      set7.size = newMap.size;
      set7._map = newMap;
      return set7;
    }
    return newMap === set7._map ? set7 : newMap.size === 0 ? set7.__empty() : set7.__make(newMap);
  }
  function makeSortedSet(map5, ownerID) {
    var set7 = Object.create(SortedSetPrototype);
    set7.size = map5 ? map5.size : 0;
    set7._map = map5;
    set7.__ownerID = ownerID;
    return set7;
  }
  function emptySortedSet(comparator, options) {
    return makeSortedSet(emptySortedMap(comparator, options));
  }
  var Range2 = function(IndexedSeq$$1) {
    function Range3(start2, end, step) {
      if (!(this instanceof Range3)) {
        return new Range3(start2, end, step);
      }
      invariant2(step !== 0, "Cannot step a Range by 0");
      start2 = start2 || 0;
      if (end === void 0) {
        end = Infinity;
      }
      step = step === void 0 ? 1 : Math.abs(step);
      if (end < start2) {
        step = -step;
      }
      this._start = start2;
      this._end = end;
      this._step = step;
      this.size = Math.max(0, Math.ceil((end - start2) / step - 1) + 1);
      if (this.size === 0) {
        if (EMPTY_RANGE2) {
          return EMPTY_RANGE2;
        }
        EMPTY_RANGE2 = this;
      }
    }
    if (IndexedSeq$$1)
      Range3.__proto__ = IndexedSeq$$1;
    Range3.prototype = Object.create(IndexedSeq$$1 && IndexedSeq$$1.prototype);
    Range3.prototype.constructor = Range3;
    Range3.prototype.toString = function toString8() {
      if (this.size === 0) {
        return "Range []";
      }
      return "Range [ " + this._start + "..." + this._end + (this._step !== 1 ? " by " + this._step : "") + " ]";
    };
    Range3.prototype.get = function get24(index, notSetValue) {
      return this.has(index) ? this._start + wrapIndex2(this, index) * this._step : notSetValue;
    };
    Range3.prototype.includes = function includes5(searchValue) {
      var possibleIndex = (searchValue - this._start) / this._step;
      return possibleIndex >= 0 && possibleIndex < this.size && possibleIndex === Math.floor(possibleIndex);
    };
    Range3.prototype.slice = function slice7(begin, end) {
      if (wholeSlice2(begin, end, this.size)) {
        return this;
      }
      begin = resolveBegin2(begin, this.size);
      end = resolveEnd2(end, this.size);
      if (end <= begin) {
        return new Range3(0, 0);
      }
      return new Range3(
        this.get(begin, this._end),
        this.get(end, this._end),
        this._step
      );
    };
    Range3.prototype.indexOf = function indexOf3(searchValue) {
      var offsetValue = searchValue - this._start;
      if (offsetValue % this._step === 0) {
        var index = offsetValue / this._step;
        if (index >= 0 && index < this.size) {
          return index;
        }
      }
      return -1;
    };
    Range3.prototype.lastIndexOf = function lastIndexOf3(searchValue) {
      return this.indexOf(searchValue);
    };
    Range3.prototype.__iterate = function __iterate3(fn, reverse5) {
      var this$1 = this;
      var size = this.size;
      var step = this._step;
      var value = reverse5 ? this._start + (size - 1) * step : this._start;
      var i4 = 0;
      while (i4 !== size) {
        if (fn(value, reverse5 ? size - ++i4 : i4++, this$1) === false) {
          break;
        }
        value += reverse5 ? -step : step;
      }
      return i4;
    };
    Range3.prototype.__iterator = function __iterator3(type2, reverse5) {
      var size = this.size;
      var step = this._step;
      var value = reverse5 ? this._start + (size - 1) * step : this._start;
      var i4 = 0;
      return new Iterator3(function() {
        if (i4 === size) {
          return iteratorDone2();
        }
        var v3 = value;
        value += reverse5 ? -step : step;
        return iteratorValue2(type2, reverse5 ? size - ++i4 : i4++, v3);
      });
    };
    Range3.prototype.equals = function equals5(other) {
      return other instanceof Range3 ? this._start === other._start && this._end === other._end && this._step === other._step : deepEqual2(this, other);
    };
    return Range3;
  }(IndexedSeq2);
  var EMPTY_RANGE2;
  function getIn$12(collection, searchKeyPath, notSetValue) {
    var keyPath = coerceKeyPath2(searchKeyPath);
    var i4 = 0;
    while (i4 !== keyPath.length) {
      collection = get13(collection, keyPath[i4++], NOT_SET2);
      if (collection === NOT_SET2) {
        return notSetValue;
      }
    }
    return collection;
  }
  function getIn$$1(searchKeyPath, notSetValue) {
    return getIn$12(this, searchKeyPath, notSetValue);
  }
  function hasIn$12(collection, keyPath) {
    return getIn$12(collection, keyPath, NOT_SET2) !== NOT_SET2;
  }
  function hasIn$$1(searchKeyPath) {
    return hasIn$12(this, searchKeyPath);
  }
  function toObject2() {
    assertNotInfinite2(this.size);
    var object = {};
    this.__iterate(function(v3, k3) {
      object[k3] = v3;
    });
    return object;
  }
  Collection3.isIterable = isCollection2;
  Collection3.isKeyed = isKeyed2;
  Collection3.isIndexed = isIndexed2;
  Collection3.isAssociative = isAssociative2;
  Collection3.isOrdered = isOrdered2;
  Collection3.Iterator = Iterator3;
  mixin2(Collection3, {
    // ### Conversion to other types
    toArray: function toArray2() {
      assertNotInfinite2(this.size);
      var array3 = new Array(this.size || 0);
      var useTuples = isKeyed2(this);
      var i4 = 0;
      this.__iterate(function(v3, k3) {
        array3[i4++] = useTuples ? [k3, v3] : v3;
      });
      return array3;
    },
    toIndexedSeq: function toIndexedSeq2() {
      return new ToIndexedSequence2(this);
    },
    toJS: function toJS$13() {
      return toJS2(this);
    },
    toKeyedSeq: function toKeyedSeq3() {
      return new ToKeyedSequence2(this, true);
    },
    toMap: function toMap2() {
      return Map3(this.toKeyedSeq());
    },
    toObject: toObject2,
    toOrderedMap: function toOrderedMap2() {
      return OrderedMap2(this.toKeyedSeq());
    },
    toSortedMap: function toSortedMap(comparator, options) {
      return SortedMap(this.toKeyedSeq(), comparator, options);
    },
    toSortedSet: function toSortedSet(comparator, options) {
      return SortedSet(
        isKeyed2(this) ? this.valueSeq() : this,
        comparator,
        options
      );
    },
    toOrderedSet: function toOrderedSet2() {
      return OrderedSet2(isKeyed2(this) ? this.valueSeq() : this);
    },
    toSet: function toSet2() {
      return Set3(isKeyed2(this) ? this.valueSeq() : this);
    },
    toSetSeq: function toSetSeq2() {
      return new ToSetSequence2(this);
    },
    toSeq: function toSeq3() {
      return isIndexed2(this) ? this.toIndexedSeq() : isKeyed2(this) ? this.toKeyedSeq() : this.toSetSeq();
    },
    toStack: function toStack2() {
      return Stack2(isKeyed2(this) ? this.valueSeq() : this);
    },
    toList: function toList2() {
      return List2(isKeyed2(this) ? this.valueSeq() : this);
    },
    // ### Common JavaScript methods and properties
    toString: function toString6() {
      return "[Collection]";
    },
    __toString: function __toString2(head, tail) {
      if (this.size === 0) {
        return head + tail;
      }
      return head + " " + this.toSeq().map(this.__toStringMapper).join(", ") + " " + tail;
    },
    // ### ES6 Collection methods (ES6 Array and Map)
    concat: function concat2() {
      var values3 = [], len = arguments.length;
      while (len--)
        values3[len] = arguments[len];
      return reify2(this, concatFactory2(this, values3));
    },
    includes: function includes3(searchValue) {
      return this.some(function(value) {
        return is2(value, searchValue);
      });
    },
    entries: function entries3() {
      return this.__iterator(ITERATE_ENTRIES2);
    },
    every: function every2(predicate, context) {
      assertNotInfinite2(this.size);
      var returnValue = true;
      this.__iterate(function(v3, k3, c3) {
        if (!predicate.call(context, v3, k3, c3)) {
          returnValue = false;
          return false;
        }
      });
      return returnValue;
    },
    filter: function filter4(predicate, context) {
      return reify2(this, filterFactory2(this, predicate, context, true));
    },
    find: function find3(predicate, context, notSetValue) {
      var entry = this.findEntry(predicate, context);
      return entry ? entry[1] : notSetValue;
    },
    forEach: function forEach2(sideEffect, context) {
      assertNotInfinite2(this.size);
      return this.__iterate(context ? sideEffect.bind(context) : sideEffect);
    },
    join: function join2(separator) {
      assertNotInfinite2(this.size);
      separator = separator !== void 0 ? "" + separator : ",";
      var joined = "";
      var isFirst = true;
      this.__iterate(function(v3) {
        isFirst ? isFirst = false : joined += separator;
        joined += v3 !== null && v3 !== void 0 ? v3.toString() : "";
      });
      return joined;
    },
    keys: function keys2() {
      return this.__iterator(ITERATE_KEYS2);
    },
    map: function map4(mapper, context) {
      return reify2(this, mapFactory2(this, mapper, context));
    },
    reduce: function reduce$12(reducer, initialReduction, context) {
      return reduce2(
        this,
        reducer,
        initialReduction,
        context,
        arguments.length < 2,
        false
      );
    },
    reduceRight: function reduceRight2(reducer, initialReduction, context) {
      return reduce2(
        this,
        reducer,
        initialReduction,
        context,
        arguments.length < 2,
        true
      );
    },
    reverse: function reverse3() {
      return reify2(this, reverseFactory2(this, true));
    },
    slice: function slice5(begin, end) {
      return reify2(this, sliceFactory2(this, begin, end, true));
    },
    some: function some2(predicate, context) {
      return !this.every(not2(predicate), context);
    },
    sort: function sort2(comparator) {
      return reify2(this, sortFactory2(this, comparator));
    },
    partialSort: function partialSort(n3, comparator) {
      return reify2(this, partialSortFactory(this, n3, comparator));
    },
    incSort: function incSort(comparator) {
      return reify2(this, incSortFactory(this, comparator, null, true));
    },
    values: function values2() {
      return this.__iterator(ITERATE_VALUES2);
    },
    // ### More sequential methods
    butLast: function butLast2() {
      return this.slice(0, -1);
    },
    isEmpty: function isEmpty2() {
      return this.size !== void 0 ? this.size === 0 : !this.some(function() {
        return true;
      });
    },
    count: function count3(predicate, context) {
      return ensureSize2(
        predicate ? this.toSeq().filter(predicate, context) : this
      );
    },
    countBy: function countBy2(grouper, context) {
      return countByFactory2(this, grouper, context);
    },
    equals: function equals3(other) {
      return deepEqual2(this, other);
    },
    entrySeq: function entrySeq2() {
      var collection = this;
      if (collection._cache) {
        return new ArraySeq2(collection._cache);
      }
      var entriesSequence = collection.toSeq().map(entryMapper2).toIndexedSeq();
      entriesSequence.fromEntrySeq = function() {
        return collection.toSeq();
      };
      return entriesSequence;
    },
    filterNot: function filterNot2(predicate, context) {
      return this.filter(not2(predicate), context);
    },
    findEntry: function findEntry2(predicate, context, notSetValue) {
      var found = notSetValue;
      this.__iterate(function(v3, k3, c3) {
        if (predicate.call(context, v3, k3, c3)) {
          found = [k3, v3];
          return false;
        }
      });
      return found;
    },
    findKey: function findKey2(predicate, context) {
      var entry = this.findEntry(predicate, context);
      return entry && entry[0];
    },
    findLast: function findLast2(predicate, context, notSetValue) {
      return this.toKeyedSeq().reverse().find(predicate, context, notSetValue);
    },
    findLastEntry: function findLastEntry2(predicate, context, notSetValue) {
      return this.toKeyedSeq().reverse().findEntry(predicate, context, notSetValue);
    },
    findLastKey: function findLastKey2(predicate, context) {
      return this.toKeyedSeq().reverse().findKey(predicate, context);
    },
    first: function first3(notSetValue) {
      return this.find(returnTrue2, null, notSetValue);
    },
    flatMap: function flatMap2(mapper, context) {
      return reify2(this, flatMapFactory2(this, mapper, context));
    },
    flatten: function flatten3(depth) {
      return reify2(this, flattenFactory2(this, depth, true));
    },
    fromEntrySeq: function fromEntrySeq2() {
      return new FromEntriesSequence2(this);
    },
    get: function get20(searchKey, notSetValue) {
      return this.find(function(_2, key) {
        return is2(key, searchKey);
      }, void 0, notSetValue);
    },
    getIn: getIn$$1,
    groupBy: function groupBy2(grouper, context) {
      return groupByFactory2(this, grouper, context);
    },
    has: function has6(searchKey) {
      return this.get(searchKey, NOT_SET2) !== NOT_SET2;
    },
    hasIn: hasIn$$1,
    isSubset: function isSubset2(iter) {
      iter = typeof iter.includes === "function" ? iter : Collection3(iter);
      return this.every(function(value) {
        return iter.includes(value);
      });
    },
    isSuperset: function isSuperset2(iter) {
      iter = typeof iter.isSubset === "function" ? iter : Collection3(iter);
      return iter.isSubset(this);
    },
    keyOf: function keyOf2(searchValue) {
      return this.findKey(function(value) {
        return is2(value, searchValue);
      });
    },
    keySeq: function keySeq4() {
      return this.toSeq().map(keyMapper2).toIndexedSeq();
    },
    last: function last3(notSetValue) {
      return this.toSeq().reverse().first(notSetValue);
    },
    lastKeyOf: function lastKeyOf2(searchValue) {
      return this.toKeyedSeq().reverse().keyOf(searchValue);
    },
    max: function max4(comparator) {
      return maxFactory2(this, comparator);
    },
    maxBy: function maxBy2(mapper, comparator) {
      return maxFactory2(this, comparator, mapper);
    },
    min: function min3(comparator) {
      return maxFactory2(
        this,
        comparator ? neg2(comparator) : defaultNegComparator2
      );
    },
    minBy: function minBy2(mapper, comparator) {
      return maxFactory2(
        this,
        comparator ? neg2(comparator) : defaultNegComparator2,
        mapper
      );
    },
    rest: function rest2() {
      return this.slice(1);
    },
    skip: function skip2(amount) {
      return amount === 0 ? this : this.slice(Math.max(0, amount));
    },
    skipLast: function skipLast2(amount) {
      return amount === 0 ? this : this.slice(0, -Math.max(0, amount));
    },
    skipWhile: function skipWhile3(predicate, context) {
      return reify2(this, skipWhileFactory2(this, predicate, context, true));
    },
    skipUntil: function skipUntil2(predicate, context) {
      return this.skipWhile(not2(predicate), context);
    },
    sortBy: function sortBy2(mapper, comparator) {
      return reify2(this, sortFactory2(this, comparator, mapper));
    },
    partialSortBy: function partialSortBy(n3, mapper, comparator) {
      return reify2(this, partialSortFactory(this, n3, comparator, mapper));
    },
    incSortBy: function incSortBy(mapper, comparator) {
      return reify2(this, incSortFactory(this, comparator, mapper, true));
    },
    take: function take2(amount) {
      return this.slice(0, Math.max(0, amount));
    },
    takeLast: function takeLast2(amount) {
      return this.slice(-Math.max(0, amount));
    },
    takeWhile: function takeWhile2(predicate, context) {
      return reify2(this, takeWhileFactory2(this, predicate, context));
    },
    takeUntil: function takeUntil2(predicate, context) {
      return this.takeWhile(not2(predicate), context);
    },
    update: function update8(fn) {
      return fn(this);
    },
    valueSeq: function valueSeq2() {
      return this.toIndexedSeq();
    },
    // ### Hashable Object
    hashCode: function hashCode3() {
      return this.__hash || (this.__hash = hashCollection2(this));
    }
    // ### Internal
    // abstract __iterate(fn, reverse)
    // abstract __iterator(type, reverse)
  });
  var CollectionPrototype2 = Collection3.prototype;
  CollectionPrototype2[IS_COLLECTION_SYMBOL2] = true;
  CollectionPrototype2[ITERATOR_SYMBOL2] = CollectionPrototype2.values;
  CollectionPrototype2.toJSON = CollectionPrototype2.toArray;
  CollectionPrototype2.__toStringMapper = quoteString2;
  CollectionPrototype2.inspect = CollectionPrototype2.toSource = function() {
    return this.toString();
  };
  CollectionPrototype2.chain = CollectionPrototype2.flatMap;
  CollectionPrototype2.contains = CollectionPrototype2.includes;
  mixin2(KeyedCollection2, {
    // ### More sequential methods
    flip: function flip2() {
      return reify2(this, flipFactory2(this));
    },
    mapEntries: function mapEntries2(mapper, context) {
      var this$1 = this;
      var iterations = 0;
      return reify2(
        this,
        this.toSeq().map(function(v3, k3) {
          return mapper.call(context, [k3, v3], iterations++, this$1);
        }).fromEntrySeq()
      );
    },
    mapKeys: function mapKeys2(mapper, context) {
      var this$1 = this;
      return reify2(
        this,
        this.toSeq().flip().map(function(k3, v3) {
          return mapper.call(context, k3, v3, this$1);
        }).flip()
      );
    }
  });
  var KeyedCollectionPrototype2 = KeyedCollection2.prototype;
  KeyedCollectionPrototype2[IS_KEYED_SYMBOL2] = true;
  KeyedCollectionPrototype2[ITERATOR_SYMBOL2] = CollectionPrototype2.entries;
  KeyedCollectionPrototype2.toJSON = toObject2;
  KeyedCollectionPrototype2.__toStringMapper = function(v3, k3) {
    return quoteString2(k3) + ": " + quoteString2(v3);
  };
  mixin2(IndexedCollection2, {
    // ### Conversion to other types
    toKeyedSeq: function toKeyedSeq4() {
      return new ToKeyedSequence2(this, false);
    },
    // ### ES6 Collection methods (ES6 Array and Map)
    filter: function filter5(predicate, context) {
      return reify2(this, filterFactory2(this, predicate, context, false));
    },
    findIndex: function findIndex2(predicate, context) {
      var entry = this.findEntry(predicate, context);
      return entry ? entry[0] : -1;
    },
    indexOf: function indexOf2(searchValue) {
      var key = this.keyOf(searchValue);
      return key === void 0 ? -1 : key;
    },
    lastIndexOf: function lastIndexOf2(searchValue) {
      var key = this.lastKeyOf(searchValue);
      return key === void 0 ? -1 : key;
    },
    reverse: function reverse4() {
      return reify2(this, reverseFactory2(this, false));
    },
    slice: function slice6(begin, end) {
      return reify2(this, sliceFactory2(this, begin, end, false));
    },
    splice: function splice2(index, removeNum) {
      var numArgs = arguments.length;
      removeNum = Math.max(removeNum || 0, 0);
      if (numArgs === 0 || numArgs === 2 && !removeNum) {
        return this;
      }
      index = resolveBegin2(index, index < 0 ? this.count() : this.size);
      var spliced = this.slice(0, index);
      return reify2(
        this,
        numArgs === 1 ? spliced : spliced.concat(arrCopy2(arguments, 2), this.slice(index + removeNum))
      );
    },
    // ### More collection methods
    findLastIndex: function findLastIndex2(predicate, context) {
      var entry = this.findLastEntry(predicate, context);
      return entry ? entry[0] : -1;
    },
    first: function first4(notSetValue) {
      return this.get(0, notSetValue);
    },
    flatten: function flatten4(depth) {
      return reify2(this, flattenFactory2(this, depth, false));
    },
    get: function get21(index, notSetValue) {
      index = wrapIndex2(this, index);
      return index < 0 || (this.size === Infinity || this.size !== void 0 && index > this.size) ? notSetValue : this.find(function(_2, key) {
        return key === index;
      }, void 0, notSetValue);
    },
    has: function has7(index) {
      index = wrapIndex2(this, index);
      return index >= 0 && (this.size !== void 0 ? this.size === Infinity || index < this.size : this.indexOf(index) !== -1);
    },
    interpose: function interpose2(separator) {
      return reify2(this, interposeFactory2(this, separator));
    },
    interleave: function interleave2() {
      var collections = [this].concat(arrCopy2(arguments));
      var zipped = zipWithFactory2(this.toSeq(), IndexedSeq2.of, collections);
      var interleaved = zipped.flatten(true);
      if (zipped.size) {
        interleaved.size = zipped.size * collections.length;
      }
      return reify2(this, interleaved);
    },
    keySeq: function keySeq5() {
      return Range2(0, this.size);
    },
    last: function last4(notSetValue) {
      return this.get(-1, notSetValue);
    },
    skipWhile: function skipWhile4(predicate, context) {
      return reify2(this, skipWhileFactory2(this, predicate, context, false));
    },
    incSort: function incSort2(comparator) {
      return reify2(this, incSortFactory(this, comparator, null, false));
    },
    incSortBy: function incSortBy2(mapper, comparator) {
      return reify2(this, incSortFactory(this, comparator, mapper, false));
    },
    zip: function zip2() {
      var collections = [this].concat(arrCopy2(arguments));
      return reify2(this, zipWithFactory2(this, defaultZipper2, collections));
    },
    zipAll: function zipAll2() {
      var collections = [this].concat(arrCopy2(arguments));
      return reify2(this, zipWithFactory2(this, defaultZipper2, collections, true));
    },
    zipWith: function zipWith2(zipper) {
      var collections = arrCopy2(arguments);
      collections[0] = this;
      return reify2(this, zipWithFactory2(this, zipper, collections));
    }
  });
  var IndexedCollectionPrototype2 = IndexedCollection2.prototype;
  IndexedCollectionPrototype2[IS_INDEXED_SYMBOL2] = true;
  IndexedCollectionPrototype2[IS_ORDERED_SYMBOL2] = true;
  mixin2(SetCollection2, {
    // ### ES6 Collection methods (ES6 Array and Map)
    get: function get22(value, notSetValue) {
      return this.has(value) ? value : notSetValue;
    },
    includes: function includes4(value) {
      return this.has(value);
    },
    // ### More sequential methods
    keySeq: function keySeq6() {
      return this.valueSeq();
    }
  });
  SetCollection2.prototype.has = CollectionPrototype2.includes;
  SetCollection2.prototype.contains = SetCollection2.prototype.includes;
  mixin2(KeyedSeq2, KeyedCollection2.prototype);
  mixin2(IndexedSeq2, IndexedCollection2.prototype);
  mixin2(SetSeq2, SetCollection2.prototype);
  function reduce2(collection, reducer, reduction, context, useFirst, reverse5) {
    assertNotInfinite2(collection.size);
    collection.__iterate(function(v3, k3, c3) {
      if (useFirst) {
        useFirst = false;
        reduction = v3;
      } else {
        reduction = reducer.call(context, reduction, v3, k3, c3);
      }
    }, reverse5);
    return reduction;
  }
  function keyMapper2(v3, k3) {
    return k3;
  }
  function entryMapper2(v3, k3) {
    return [k3, v3];
  }
  function not2(predicate) {
    return function() {
      return !predicate.apply(this, arguments);
    };
  }
  function neg2(predicate) {
    return function() {
      return -predicate.apply(this, arguments);
    };
  }
  function defaultZipper2() {
    return arrCopy2(arguments);
  }
  function defaultNegComparator2(a4, b3) {
    return a4 < b3 ? 1 : a4 > b3 ? -1 : 0;
  }
  function hashCollection2(collection) {
    if (collection.size === Infinity) {
      return 0;
    }
    var ordered = isOrdered2(collection);
    var keyed = isKeyed2(collection);
    var h3 = ordered ? 1 : 0;
    var size = collection.__iterate(
      keyed ? ordered ? function(v3, k3) {
        h3 = 31 * h3 + hashMerge2(hash2(v3), hash2(k3)) | 0;
      } : function(v3, k3) {
        h3 = h3 + hashMerge2(hash2(v3), hash2(k3)) | 0;
      } : ordered ? function(v3) {
        h3 = 31 * h3 + hash2(v3) | 0;
      } : function(v3) {
        h3 = h3 + hash2(v3) | 0;
      }
    );
    return murmurHashOfSize2(size, h3);
  }
  function murmurHashOfSize2(size, h3) {
    h3 = imul3(h3, 3432918353);
    h3 = imul3(h3 << 15 | h3 >>> -15, 461845907);
    h3 = imul3(h3 << 13 | h3 >>> -13, 5);
    h3 = (h3 + 3864292196 | 0) ^ size;
    h3 = imul3(h3 ^ h3 >>> 16, 2246822507);
    h3 = imul3(h3 ^ h3 >>> 13, 3266489909);
    h3 = smi2(h3 ^ h3 >>> 16);
    return h3;
  }
  function hashMerge2(a4, b3) {
    return a4 ^ b3 + 2654435769 + (a4 << 6) + (a4 >> 2) | 0;
  }
  var OrderedSet2 = function(Set$$1) {
    function OrderedSet3(value) {
      return value === null || value === void 0 ? emptyOrderedSet2() : isOrderedSet2(value) ? value : emptyOrderedSet2().withMutations(function(set7) {
        var iter = SetCollection2(value);
        assertNotInfinite2(iter.size);
        iter.forEach(function(v3) {
          return set7.add(v3);
        });
      });
    }
    if (Set$$1)
      OrderedSet3.__proto__ = Set$$1;
    OrderedSet3.prototype = Object.create(Set$$1 && Set$$1.prototype);
    OrderedSet3.prototype.constructor = OrderedSet3;
    OrderedSet3.of = function of() {
      return this(arguments);
    };
    OrderedSet3.fromKeys = function fromKeys(value) {
      return this(KeyedCollection2(value).keySeq());
    };
    OrderedSet3.prototype.toString = function toString8() {
      return this.__toString("OrderedSet {", "}");
    };
    return OrderedSet3;
  }(Set3);
  OrderedSet2.isOrderedSet = isOrderedSet2;
  var OrderedSetPrototype2 = OrderedSet2.prototype;
  OrderedSetPrototype2[IS_ORDERED_SYMBOL2] = true;
  OrderedSetPrototype2.zip = IndexedCollectionPrototype2.zip;
  OrderedSetPrototype2.zipWith = IndexedCollectionPrototype2.zipWith;
  OrderedSetPrototype2.__empty = emptyOrderedSet2;
  OrderedSetPrototype2.__make = makeOrderedSet2;
  function makeOrderedSet2(map5, ownerID) {
    var set7 = Object.create(OrderedSetPrototype2);
    set7.size = map5 ? map5.size : 0;
    set7._map = map5;
    set7.__ownerID = ownerID;
    return set7;
  }
  var EMPTY_ORDERED_SET2;
  function emptyOrderedSet2() {
    return EMPTY_ORDERED_SET2 || (EMPTY_ORDERED_SET2 = makeOrderedSet2(emptyOrderedMap2()));
  }
  var Record3 = function Record4(defaultValues, name) {
    var hasInitialized;
    var RecordType = function Record5(values3) {
      var this$1 = this;
      if (values3 instanceof RecordType) {
        return values3;
      }
      if (!(this instanceof RecordType)) {
        return new RecordType(values3);
      }
      if (!hasInitialized) {
        hasInitialized = true;
        var keys3 = Object.keys(defaultValues);
        var indices = RecordTypePrototype._indices = {};
        RecordTypePrototype._name = name;
        RecordTypePrototype._keys = keys3;
        RecordTypePrototype._defaultValues = defaultValues;
        for (var i4 = 0; i4 < keys3.length; i4++) {
          var propName = keys3[i4];
          indices[propName] = i4;
          if (RecordTypePrototype[propName]) {
            typeof console === "object" && console.warn && console.warn(
              "Cannot define " + recordName2(this$1) + ' with property "' + propName + '" since that property name is part of the Record API.'
            );
          } else {
            setProp2(RecordTypePrototype, propName);
          }
        }
      }
      this.__ownerID = void 0;
      this._values = List2().withMutations(function(l4) {
        l4.setSize(this$1._keys.length);
        KeyedCollection2(values3).forEach(function(v3, k3) {
          l4.set(this$1._indices[k3], v3 === this$1._defaultValues[k3] ? void 0 : v3);
        });
      });
    };
    var RecordTypePrototype = RecordType.prototype = Object.create(
      RecordPrototype2
    );
    RecordTypePrototype.constructor = RecordType;
    if (name) {
      RecordType.displayName = name;
    }
    return RecordType;
  };
  Record3.prototype.toString = function toString7() {
    var this$1 = this;
    var str = recordName2(this) + " { ";
    var keys3 = this._keys;
    var k3;
    for (var i4 = 0, l4 = keys3.length; i4 !== l4; i4++) {
      k3 = keys3[i4];
      str += (i4 ? ", " : "") + k3 + ": " + quoteString2(this$1.get(k3));
    }
    return str + " }";
  };
  Record3.prototype.equals = function equals4(other) {
    return this === other || other && this._keys === other._keys && recordSeq2(this).equals(recordSeq2(other));
  };
  Record3.prototype.hashCode = function hashCode4() {
    return recordSeq2(this).hashCode();
  };
  Record3.prototype.has = function has8(k3) {
    return this._indices.hasOwnProperty(k3);
  };
  Record3.prototype.get = function get23(k3, notSetValue) {
    if (!this.has(k3)) {
      return notSetValue;
    }
    var index = this._indices[k3];
    var value = this._values.get(index);
    return value === void 0 ? this._defaultValues[k3] : value;
  };
  Record3.prototype.set = function set6(k3, v3) {
    if (this.has(k3)) {
      var newValues = this._values.set(
        this._indices[k3],
        v3 === this._defaultValues[k3] ? void 0 : v3
      );
      if (newValues !== this._values && !this.__ownerID) {
        return makeRecord2(this, newValues);
      }
    }
    return this;
  };
  Record3.prototype.remove = function remove6(k3) {
    return this.set(k3);
  };
  Record3.prototype.clear = function clear2() {
    var newValues = this._values.clear().setSize(this._keys.length);
    return this.__ownerID ? this : makeRecord2(this, newValues);
  };
  Record3.prototype.wasAltered = function wasAltered4() {
    return this._values.wasAltered();
  };
  Record3.prototype.toSeq = function toSeq4() {
    return recordSeq2(this);
  };
  Record3.prototype.toJS = function toJS$14() {
    return toJS2(this);
  };
  Record3.prototype.entries = function entries4() {
    return this.__iterator(ITERATE_ENTRIES2);
  };
  Record3.prototype.__iterator = function __iterator2(type2, reverse5) {
    return recordSeq2(this).__iterator(type2, reverse5);
  };
  Record3.prototype.__iterate = function __iterate2(fn, reverse5) {
    return recordSeq2(this).__iterate(fn, reverse5);
  };
  Record3.prototype.__ensureOwner = function __ensureOwner2(ownerID) {
    if (ownerID === this.__ownerID) {
      return this;
    }
    var newValues = this._values.__ensureOwner(ownerID);
    if (!ownerID) {
      this.__ownerID = ownerID;
      this._values = newValues;
      return this;
    }
    return makeRecord2(this, newValues, ownerID);
  };
  Record3.isRecord = isRecord2;
  Record3.getDescriptiveName = recordName2;
  var RecordPrototype2 = Record3.prototype;
  RecordPrototype2[IS_RECORD_SYMBOL2] = true;
  RecordPrototype2[DELETE2] = RecordPrototype2.remove;
  RecordPrototype2.deleteIn = RecordPrototype2.removeIn = deleteIn2;
  RecordPrototype2.getIn = getIn$$1;
  RecordPrototype2.hasIn = CollectionPrototype2.hasIn;
  RecordPrototype2.merge = merge;
  RecordPrototype2.mergeWith = mergeWith;
  RecordPrototype2.mergeIn = mergeIn2;
  RecordPrototype2.mergeDeep = mergeDeep2;
  RecordPrototype2.mergeDeepWith = mergeDeepWith2;
  RecordPrototype2.mergeDeepIn = mergeDeepIn2;
  RecordPrototype2.setIn = setIn$$1;
  RecordPrototype2.update = update$$1;
  RecordPrototype2.updateIn = updateIn$12;
  RecordPrototype2.withMutations = withMutations2;
  RecordPrototype2.asMutable = asMutable2;
  RecordPrototype2.asImmutable = asImmutable2;
  RecordPrototype2[ITERATOR_SYMBOL2] = RecordPrototype2.entries;
  RecordPrototype2.toJSON = RecordPrototype2.toObject = CollectionPrototype2.toObject;
  RecordPrototype2.inspect = RecordPrototype2.toSource = function() {
    return this.toString();
  };
  function makeRecord2(likeRecord, values3, ownerID) {
    var record = Object.create(Object.getPrototypeOf(likeRecord));
    record._values = values3;
    record.__ownerID = ownerID;
    return record;
  }
  function recordName2(record) {
    return record.constructor.displayName || record.constructor.name || "Record";
  }
  function recordSeq2(record) {
    return keyedSeqFromValue2(record._keys.map(function(k3) {
      return [k3, record.get(k3)];
    }));
  }
  function setProp2(prototype, name) {
    try {
      Object.defineProperty(prototype, name, {
        get: function() {
          return this.get(name);
        },
        set: function(value) {
          invariant2(this.__ownerID, "Cannot set on an immutable record.");
          this.set(name, value);
        }
      });
    } catch (error) {
    }
  }
  var Repeat = function(IndexedSeq$$1) {
    function Repeat2(value, times) {
      if (!(this instanceof Repeat2)) {
        return new Repeat2(value, times);
      }
      this._value = value;
      this.size = times === void 0 ? Infinity : Math.max(0, times);
      if (this.size === 0) {
        if (EMPTY_REPEAT) {
          return EMPTY_REPEAT;
        }
        EMPTY_REPEAT = this;
      }
    }
    if (IndexedSeq$$1)
      Repeat2.__proto__ = IndexedSeq$$1;
    Repeat2.prototype = Object.create(IndexedSeq$$1 && IndexedSeq$$1.prototype);
    Repeat2.prototype.constructor = Repeat2;
    Repeat2.prototype.toString = function toString8() {
      if (this.size === 0) {
        return "Repeat []";
      }
      return "Repeat [ " + this._value + " " + this.size + " times ]";
    };
    Repeat2.prototype.get = function get24(index, notSetValue) {
      return this.has(index) ? this._value : notSetValue;
    };
    Repeat2.prototype.includes = function includes5(searchValue) {
      return is2(this._value, searchValue);
    };
    Repeat2.prototype.slice = function slice7(begin, end) {
      var size = this.size;
      return wholeSlice2(begin, end, size) ? this : new Repeat2(
        this._value,
        resolveEnd2(end, size) - resolveBegin2(begin, size)
      );
    };
    Repeat2.prototype.reverse = function reverse5() {
      return this;
    };
    Repeat2.prototype.indexOf = function indexOf3(searchValue) {
      if (is2(this._value, searchValue)) {
        return 0;
      }
      return -1;
    };
    Repeat2.prototype.lastIndexOf = function lastIndexOf3(searchValue) {
      if (is2(this._value, searchValue)) {
        return this.size;
      }
      return -1;
    };
    Repeat2.prototype.__iterate = function __iterate3(fn, reverse5) {
      var this$1 = this;
      var size = this.size;
      var i4 = 0;
      while (i4 !== size) {
        if (fn(this$1._value, reverse5 ? size - ++i4 : i4++, this$1) === false) {
          break;
        }
      }
      return i4;
    };
    Repeat2.prototype.__iterator = function __iterator3(type2, reverse5) {
      var this$1 = this;
      var size = this.size;
      var i4 = 0;
      return new Iterator3(
        function() {
          return i4 === size ? iteratorDone2() : iteratorValue2(type2, reverse5 ? size - ++i4 : i4++, this$1._value);
        }
      );
    };
    Repeat2.prototype.equals = function equals5(other) {
      return other instanceof Repeat2 ? is2(this._value, other._value) : deepEqual2(other);
    };
    return Repeat2;
  }(IndexedSeq2);
  var EMPTY_REPEAT;

  // ../../skilltool/tools/ConditionMatcher.ts
  var assert5 = __require("assert").strict;
  function isCmpOperator(tree) {
    return "condition" in tree;
  }
  function assertIsCmpOperator(tree) {
    assert5(isCmpOperator(tree));
  }
  function assertIsLogicalOp(tree) {
    assert5("left" in tree && "right" in tree);
  }
  function flatten5(node, conds) {
    assertIsCmpOperator(node.right);
    conds.push(node.right);
    if (node.left instanceof AndOperator) {
      return flatten5(node.left, conds);
    }
    assertIsCmpOperator(node.left);
    conds.push(node.left);
    return conds;
  }
  function condMatcher(cond, node) {
    if (isCmpOperator(node)) {
      if ("argument" in cond) {
        return node.condition === cond.condition && node.argument == cond.argument && Object.getPrototypeOf(cond) === Object.getPrototypeOf(node);
      } else {
        return node.condition === cond;
      }
    }
    assertIsLogicalOp(node);
    return condMatcher(cond, node.left) || condMatcher(cond, node.right);
  }
  function andMatcher(conds, node) {
    if (node instanceof OrOperator) {
      const conds2 = conds.slice();
      return andMatcher(conds, node.left) || andMatcher(conds2, node.right);
    } else if (node instanceof AndOperator) {
      assertIsCmpOperator(node.right);
      const idx = conds.findIndex((c3) => condMatcher(c3, node.right));
      if (idx != -1) {
        conds.splice(idx, 1);
      }
      return conds.length == 0 || andMatcher(conds, node.left);
    } else {
      assertIsCmpOperator(node);
      return conds.length == 1 && condMatcher(conds[0], node);
    }
  }
  function treeMatch(match, tree) {
    switch (match.type) {
      case 2 /* Op */:
        if (match.op instanceof AndOperator) {
          return andMatcher(flatten5(match.op, []), tree);
        } else if (isCmpOperator(match.op)) {
          return condMatcher(match.op, tree);
        } else {
          throw new Error("doesn't support @ in search conditions");
        }
      case 1 /* Cond */:
        return condMatcher(match.cond, tree);
        break;
      case 0 /* Int */:
        throw new Error("doesn't support sole integer as search condition");
    }
  }
  var mockSamplePolicy = Object.freeze({
    sample(_0, _1) {
      assert5(false);
    },
    reconcile(_2) {
      return this;
    },
    reconcileAsap(_2) {
      return this;
    },
    reconcileLogNormalRandom(_2) {
      return this;
    },
    reconcileRandom(_2) {
      return this;
    },
    reconcileStraightRandom(_2) {
      return this;
    },
    reconcileAllCornerRandom(_2) {
      return this;
    }
  });
  var mockConditions = new Proxy({}, {
    get(cache, prop) {
      if (cache.hasOwnProperty(prop)) {
        return cache[prop];
      }
      return cache[prop] = { name: prop, samplePolicy: mockSamplePolicy };
    }
  });

  // ../components/Tooltip.tsx
  function Tooltip(props) {
    return /* @__PURE__ */ y("div", { class: `hasTooltip${props.tall ? " contentIsTall" : ""}` }, props.children, /* @__PURE__ */ y("div", { class: "tooltip" }, props.title, /* @__PURE__ */ y("span", { class: "arrow" })));
  }

  // ../skill_meta.json
  var skill_meta_default = { "100011": { baseCost: 0, groupId: 10001, iconId: "20013", order: 10 }, "100021": { baseCost: 0, groupId: 10002, iconId: "20013", order: 10 }, "100031": { baseCost: 0, groupId: 10003, iconId: "20013", order: 10 }, "100041": { baseCost: 0, groupId: 10004, iconId: "20043", order: 10 }, "100051": { baseCost: 0, groupId: 10005, iconId: "20013", order: 10 }, "100061": { baseCost: 0, groupId: 10006, iconId: "20013", order: 10 }, "100071": { baseCost: 0, groupId: 10007, iconId: "20013", order: 10 }, "100081": { baseCost: 0, groupId: 10008, iconId: "20013", order: 10 }, "100091": { baseCost: 0, groupId: 10009, iconId: "20013", order: 10 }, "100101": { baseCost: 0, groupId: 10010, iconId: "20043", order: 10 }, "100101111": { baseCost: 0, groupId: 10010111, iconId: "20026", order: 20800 }, "100101211": { baseCost: 0, groupId: 10010121, iconId: "20016", order: 2250 }, "100102111": { baseCost: 0, groupId: 10010211, iconId: "20016", order: 2400 }, "100102211": { baseCost: 0, groupId: 10010221, iconId: "20016", order: 2150 }, "100103111": { baseCost: 0, groupId: 10010311, iconId: "20016", order: 20520 }, "100103211": { baseCost: 0, groupId: 10010321, iconId: "2010016", order: 21560 }, "100111": { baseCost: 0, groupId: 10011, iconId: "20013", order: 10 }, "100121": { baseCost: 0, groupId: 10012, iconId: "20013", order: 10 }, "100131": { baseCost: 0, groupId: 10013, iconId: "20013", order: 10 }, "100141": { baseCost: 0, groupId: 10014, iconId: "20013", order: 10 }, "100151": { baseCost: 0, groupId: 10015, iconId: "20013", order: 10 }, "100161": { baseCost: 0, groupId: 10016, iconId: "20013", order: 10 }, "100171": { baseCost: 0, groupId: 10017, iconId: "20013", order: 10 }, "100181": { baseCost: 0, groupId: 10018, iconId: "20013", order: 10 }, "100191": { baseCost: 0, groupId: 10019, iconId: "20013", order: 10 }, "100201": { baseCost: 0, groupId: 10020, iconId: "20043", order: 10 }, "100201111": { baseCost: 0, groupId: 10020111, iconId: "20066", order: 2080 }, "100201211": { baseCost: 0, groupId: 10020121, iconId: "20046", order: 2320 }, "100202111": { baseCost: 0, groupId: 10020211, iconId: "20016", order: 2300 }, "100202121": { baseCost: 0, groupId: 10020212, iconId: "20016", order: 2300 }, "100202211": { baseCost: 0, groupId: 10020221, iconId: "20046", order: 22580 }, "100211": { baseCost: 0, groupId: 10021, iconId: "20013", order: 10 }, "100221": { baseCost: 0, groupId: 10022, iconId: "20013", order: 10 }, "100231": { baseCost: 0, groupId: 10023, iconId: "20013", order: 10 }, "100241": { baseCost: 0, groupId: 10024, iconId: "20013", order: 10 }, "100251": { baseCost: 0, groupId: 10025, iconId: "20013", order: 10 }, "100261": { baseCost: 0, groupId: 10026, iconId: "20013", order: 10 }, "100271": { baseCost: 0, groupId: 10027, iconId: "20043", order: 10 }, "100281": { baseCost: 0, groupId: 10028, iconId: "20013", order: 10 }, "100291": { baseCost: 0, groupId: 10029, iconId: "20013", order: 10 }, "100301": { baseCost: 0, groupId: 10030, iconId: "20013", order: 10 }, "100301111": { baseCost: 0, groupId: 10030111, iconId: "20046", order: 20760 }, "100301211": { baseCost: 0, groupId: 10030121, iconId: "20056", order: 20360 }, "100302111": { baseCost: 0, groupId: 10030211, iconId: "20026", order: 2360 }, "100302211": { baseCost: 0, groupId: 10030221, iconId: "20026", order: 20380 }, "100303111": { baseCost: 0, groupId: 10030311, iconId: "20046", order: 21440 }, "100303211": { baseCost: 0, groupId: 10030321, iconId: "20026", order: 2340 }, "100303221": { baseCost: 0, groupId: 10030322, iconId: "20016", order: 2340 }, "100311": { baseCost: 0, groupId: 10031, iconId: "20013", order: 10 }, "100321": { baseCost: 0, groupId: 10032, iconId: "20023", order: 10 }, "100331": { baseCost: 0, groupId: 10033, iconId: "20013", order: 10 }, "100341": { baseCost: 0, groupId: 10034, iconId: "20013", order: 10 }, "100351": { baseCost: 0, groupId: 10035, iconId: "20013", order: 10 }, "100361": { baseCost: 0, groupId: 10036, iconId: "20013", order: 10 }, "100371": { baseCost: 0, groupId: 10037, iconId: "20013", order: 10 }, "100381": { baseCost: 0, groupId: 10038, iconId: "20013", order: 10 }, "100391": { baseCost: 0, groupId: 10039, iconId: "20013", order: 10 }, "100401": { baseCost: 0, groupId: 10040, iconId: "20013", order: 10 }, "100401111": { baseCost: 0, groupId: 10040111, iconId: "20016", order: 20190 }, "100401211": { baseCost: 0, groupId: 10040121, iconId: "20016", order: 20210 }, "100402111": { baseCost: 0, groupId: 10040211, iconId: "20026", order: 20660 }, "100402211": { baseCost: 0, groupId: 10040221, iconId: "20016", order: 2580 }, "100403111": { baseCost: 0, groupId: 10040311, iconId: "20016", order: 20230 }, "100403211": { baseCost: 0, groupId: 10040321, iconId: "20016", order: 24060 }, "100411": { baseCost: 0, groupId: 10041, iconId: "20013", order: 10 }, "100421": { baseCost: 0, groupId: 10042, iconId: "20013", order: 10 }, "100431": { baseCost: 0, groupId: 10043, iconId: "20013", order: 10 }, "100441": { baseCost: 0, groupId: 10044, iconId: "20013", order: 10 }, "100451": { baseCost: 0, groupId: 10045, iconId: "20023", order: 10 }, "100461": { baseCost: 0, groupId: 10046, iconId: "20013", order: 10 }, "100471": { baseCost: 0, groupId: 10047, iconId: "20013", order: 10 }, "100481": { baseCost: 0, groupId: 10048, iconId: "20013", order: 10 }, "100491": { baseCost: 0, groupId: 10049, iconId: "20013", order: 10 }, "100501": { baseCost: 0, groupId: 10050, iconId: "20013", order: 10 }, "100501111": { baseCost: 0, groupId: 10050111, iconId: "20016", order: 20230 }, "100501211": { baseCost: 0, groupId: 10050121, iconId: "20026", order: 2360 }, "100501221": { baseCost: 0, groupId: 10050122, iconId: "20026", order: 2360 }, "100502111": { baseCost: 0, groupId: 10050211, iconId: "30056", order: 2755 }, "100502121": { baseCost: 0, groupId: 10050212, iconId: "20016", order: 2755 }, "100502211": { baseCost: 0, groupId: 10050221, iconId: "20016", order: 2380 }, "100511": { baseCost: 0, groupId: 10051, iconId: "20043", order: 10 }, "100521": { baseCost: 0, groupId: 10052, iconId: "20023", order: 10 }, "100531": { baseCost: 0, groupId: 10053, iconId: "20043", order: 10 }, "100541": { baseCost: 0, groupId: 10054, iconId: "20013", order: 10 }, "100551": { baseCost: 0, groupId: 10055, iconId: "20013", order: 10 }, "100561": { baseCost: 0, groupId: 10056, iconId: "20013", order: 10 }, "100571": { baseCost: 0, groupId: 10057, iconId: "20013", order: 10 }, "100581": { baseCost: 0, groupId: 10058, iconId: "20013", order: 10 }, "100591": { baseCost: 0, groupId: 10059, iconId: "20043", order: 10 }, "100601": { baseCost: 0, groupId: 10060, iconId: "20013", order: 10 }, "100601111": { baseCost: 0, groupId: 10060111, iconId: "20026", order: 20800 }, "100601121": { baseCost: 0, groupId: 10060112, iconId: "20026", order: 20800 }, "100601211": { baseCost: 0, groupId: 10060121, iconId: "20046", order: 1920 }, "100602111": { baseCost: 0, groupId: 10060211, iconId: "20026", order: 20800 }, "100602211": { baseCost: 0, groupId: 10060221, iconId: "20016", order: 2720 }, "100611": { baseCost: 0, groupId: 10061, iconId: "20013", order: 10 }, "100621": { baseCost: 0, groupId: 10062, iconId: "20023", order: 10 }, "100631": { baseCost: 0, groupId: 10063, iconId: "20013", order: 10 }, "100641": { baseCost: 0, groupId: 10064, iconId: "20023", order: 10 }, "100651": { baseCost: 0, groupId: 10065, iconId: "20013", order: 10 }, "100661": { baseCost: 0, groupId: 10066, iconId: "20013", order: 10 }, "100671": { baseCost: 0, groupId: 10067, iconId: "20013", order: 10 }, "100681": { baseCost: 0, groupId: 10068, iconId: "20013", order: 10 }, "100691": { baseCost: 0, groupId: 10069, iconId: "20013", order: 10 }, "100701": { baseCost: 0, groupId: 10070, iconId: "20043", order: 10 }, "100701111": { baseCost: 0, groupId: 10070111, iconId: "20096", order: 21040 }, "100701211": { baseCost: 0, groupId: 10070121, iconId: "20026", order: 21060 }, "100702111": { baseCost: 0, groupId: 10070211, iconId: "20016", order: 2720 }, "100702211": { baseCost: 0, groupId: 10070221, iconId: "20016", order: 21630 }, "100702221": { baseCost: 0, groupId: 10070222, iconId: "20016", order: 21630 }, "100703111": { baseCost: 0, groupId: 10070311, iconId: "20046", order: 2500 }, "100703211": { baseCost: 0, groupId: 10070321, iconId: "10036", order: 1475 }, "10071": { baseCost: 0, groupId: 1007, iconId: "20013", order: 10 }, "100711": { baseCost: 0, groupId: 10071, iconId: "20013", order: 10 }, "100721": { baseCost: 0, groupId: 10072, iconId: "20013", order: 10 }, "100731": { baseCost: 0, groupId: 10073, iconId: "20013", order: 10 }, "100741": { baseCost: 0, groupId: 10074, iconId: "20013", order: 10 }, "100761": { baseCost: 0, groupId: 10076, iconId: "20013", order: 10 }, "100771": { baseCost: 0, groupId: 10077, iconId: "20013", order: 10 }, "100781": { baseCost: 0, groupId: 10078, iconId: "20043", order: 10 }, "100791": { baseCost: 0, groupId: 10079, iconId: "20013", order: 10 }, "100801": { baseCost: 0, groupId: 10080, iconId: "20013", order: 10 }, "100801111": { baseCost: 0, groupId: 10080111, iconId: "20026", order: 2020 }, "100801211": { baseCost: 0, groupId: 10080121, iconId: "20046", order: 2620 }, "100802111": { baseCost: 0, groupId: 10080211, iconId: "20046", order: 2210 }, "100802211": { baseCost: 0, groupId: 10080221, iconId: "20016", order: 22140 }, "10081": { baseCost: 0, groupId: 1008, iconId: "20013", order: 10 }, "100821": { baseCost: 0, groupId: 10082, iconId: "20013", order: 10 }, "100831": { baseCost: 0, groupId: 10083, iconId: "20013", order: 10 }, "100841": { baseCost: 0, groupId: 10084, iconId: "20013", order: 10 }, "100851": { baseCost: 0, groupId: 10085, iconId: "20013", order: 10 }, "100861": { baseCost: 0, groupId: 10086, iconId: "20013", order: 10 }, "100871": { baseCost: 0, groupId: 10087, iconId: "20013", order: 10 }, "100881": { baseCost: 0, groupId: 10088, iconId: "20013", order: 10 }, "100891": { baseCost: 0, groupId: 10089, iconId: "20013", order: 10 }, "100901111": { baseCost: 0, groupId: 10090111, iconId: "20016", order: 2660 }, "100901211": { baseCost: 0, groupId: 10090121, iconId: "20026", order: 2360 }, "100902111": { baseCost: 0, groupId: 10090211, iconId: "20026", order: 20660 }, "100902211": { baseCost: 0, groupId: 10090221, iconId: "20016", order: 22160 }, "10091": { baseCost: 0, groupId: 1009, iconId: "20013", order: 10 }, "100911": { baseCost: 0, groupId: 10091, iconId: "20013", order: 10 }, "100931": { baseCost: 0, groupId: 10093, iconId: "20013", order: 10 }, "100941": { baseCost: 0, groupId: 10094, iconId: "20013", order: 10 }, "100981": { baseCost: 0, groupId: 10098, iconId: "20013", order: 10 }, "100991": { baseCost: 0, groupId: 10099, iconId: "20043", order: 10 }, "101001": { baseCost: 0, groupId: 10100, iconId: "20013", order: 10 }, "101001111": { baseCost: 0, groupId: 10100111, iconId: "20016", order: 20190 }, "101001211": { baseCost: 0, groupId: 10100121, iconId: "20016", order: 2580 }, "101002111": { baseCost: 0, groupId: 10100211, iconId: "20016", order: 2580 }, "101002211": { baseCost: 0, groupId: 10100221, iconId: "20046", order: 21440 }, "101021": { baseCost: 0, groupId: 10102, iconId: "20023", order: 10 }, "101041": { baseCost: 0, groupId: 10104, iconId: "20013", order: 10 }, "101051": { baseCost: 0, groupId: 10105, iconId: "20013", order: 10 }, "101061": { baseCost: 0, groupId: 10106, iconId: "20013", order: 10 }, "101071": { baseCost: 0, groupId: 10107, iconId: "20013", order: 10 }, "101081": { baseCost: 0, groupId: 10108, iconId: "20013", order: 10 }, "101091": { baseCost: 0, groupId: 10109, iconId: "20013", order: 10 }, "101101": { baseCost: 0, groupId: 10110, iconId: "20013", order: 10 }, "101101111": { baseCost: 0, groupId: 10110111, iconId: "20016", order: 20400 }, "101101211": { baseCost: 0, groupId: 10110121, iconId: "20046", order: 2420 }, "101102111": { baseCost: 0, groupId: 10110211, iconId: "20026", order: 2700 }, "101102211": { baseCost: 0, groupId: 10110221, iconId: "20026", order: 20940 }, "101103111": { baseCost: 0, groupId: 10110311, iconId: "20016", order: 21710 }, "101103211": { baseCost: 0, groupId: 10110321, iconId: "20016", order: 23880 }, "10111": { baseCost: 0, groupId: 1011, iconId: "20013", order: 10 }, "101111": { baseCost: 0, groupId: 10111, iconId: "20013", order: 10 }, "101151": { baseCost: 0, groupId: 10115, iconId: "20013", order: 10 }, "101161": { baseCost: 0, groupId: 10116, iconId: "20013", order: 10 }, "101171": { baseCost: 0, groupId: 10117, iconId: "20013", order: 10 }, "101191": { baseCost: 0, groupId: 10119, iconId: "20013", order: 10 }, "101201": { baseCost: 0, groupId: 10120, iconId: "20013", order: 10 }, "101201111": { baseCost: 0, groupId: 10120111, iconId: "20016", order: 2680 }, "101201121": { baseCost: 0, groupId: 10120112, iconId: "20016", order: 2680 }, "101201211": { baseCost: 0, groupId: 10120121, iconId: "20016", order: 2480 }, "101202111": { baseCost: 0, groupId: 10120211, iconId: "20016", order: 21500 }, "101202211": { baseCost: 0, groupId: 10120221, iconId: "20046", order: 22220 }, "101211": { baseCost: 0, groupId: 10121, iconId: "20013", order: 10 }, "101241": { baseCost: 0, groupId: 10124, iconId: "20013", order: 10 }, "101301111": { baseCost: 0, groupId: 10130111, iconId: "20016", order: 20480 }, "101301211": { baseCost: 0, groupId: 10130121, iconId: "20026", order: 2340 }, "101302111": { baseCost: 0, groupId: 10130211, iconId: "20026", order: 2700 }, "101302211": { baseCost: 0, groupId: 10130221, iconId: "20016", order: 1980 }, "101303111": { baseCost: 0, groupId: 10130311, iconId: "20016", order: 21480 }, "101303211": { baseCost: 0, groupId: 10130321, iconId: "20026", order: 21760 }, "101311": { baseCost: 0, groupId: 10131, iconId: "20013", order: 10 }, "101401111": { baseCost: 0, groupId: 10140111, iconId: "20096", order: 20340 }, "101401211": { baseCost: 0, groupId: 10140121, iconId: "20026", order: 2340 }, "101402111": { baseCost: 0, groupId: 10140211, iconId: "20046", order: 2620 }, "101402121": { baseCost: 0, groupId: 10140212, iconId: "20016", order: 2620 }, "101402211": { baseCost: 0, groupId: 10140221, iconId: "20016", order: 2440 }, "10141": { baseCost: 0, groupId: 1014, iconId: "20013", order: 10 }, "101501111": { baseCost: 0, groupId: 10150111, iconId: "20016", order: 2380 }, "101501211": { baseCost: 0, groupId: 10150121, iconId: "20016", order: 2660 }, "101502111": { baseCost: 0, groupId: 10150211, iconId: "20026", order: 1950 }, "101502121": { baseCost: 0, groupId: 10150212, iconId: "20026", order: 1950 }, "101502211": { baseCost: 0, groupId: 10150221, iconId: "20016", order: 21480 }, "101601111": { baseCost: 0, groupId: 10160111, iconId: "20016", order: 1980 }, "101601211": { baseCost: 0, groupId: 10160121, iconId: "20016", order: 2250 }, "101602111": { baseCost: 0, groupId: 10160211, iconId: "20016", order: 22180 }, "101602211": { baseCost: 0, groupId: 10160221, iconId: "20046", order: 22200 }, "101701111": { baseCost: 0, groupId: 10170111, iconId: "20016", order: 20400 }, "101701211": { baseCost: 0, groupId: 10170121, iconId: "20016", order: 1890 }, "101702111": { baseCost: 0, groupId: 10170211, iconId: "20026", order: 2340 }, "101702211": { baseCost: 0, groupId: 10170221, iconId: "10016", order: 1565 }, "101801111": { baseCost: 0, groupId: 10180111, iconId: "20016", order: 20840 }, "101801211": { baseCost: 0, groupId: 10180121, iconId: "20056", order: 2230 }, "101802111": { baseCost: 0, groupId: 10180211, iconId: "20016", order: 20230 }, "101802211": { baseCost: 0, groupId: 10180221, iconId: "20046", order: 1920 }, "10181": { baseCost: 0, groupId: 1018, iconId: "20013", order: 10 }, "101901111": { baseCost: 0, groupId: 10190111, iconId: "20016", order: 21260 }, "101901211": { baseCost: 0, groupId: 10190121, iconId: "20056", order: 21380 }, "101901221": { baseCost: 0, groupId: 10190122, iconId: "20016", order: 21380 }, "101902111": { baseCost: 0, groupId: 10190211, iconId: "20016", order: 2150 }, "101902121": { baseCost: 0, groupId: 10190212, iconId: "20016", order: 2150 }, "101902211": { baseCost: 0, groupId: 10190221, iconId: "20016", order: 21800 }, "102001111": { baseCost: 0, groupId: 10200111, iconId: "20016", order: 20480 }, "102001121": { baseCost: 0, groupId: 10200112, iconId: "20026", order: 20480 }, "102001211": { baseCost: 0, groupId: 10200121, iconId: "20016", order: 2300 }, "102002111": { baseCost: 0, groupId: 10200211, iconId: "20016", order: 2300 }, "102002121": { baseCost: 0, groupId: 10200212, iconId: "20016", order: 2300 }, "102002211": { baseCost: 0, groupId: 10200221, iconId: "20016", order: 20640 }, "102101111": { baseCost: 0, groupId: 10210111, iconId: "20016", order: 2400 }, "102101121": { baseCost: 0, groupId: 10210112, iconId: "20016", order: 2400 }, "102101211": { baseCost: 0, groupId: 10210121, iconId: "20016", order: 21290 }, "102102111": { baseCost: 0, groupId: 10210211, iconId: "20016", order: 2660 }, "102102211": { baseCost: 0, groupId: 10210221, iconId: "20016", order: 2150 }, "102102221": { baseCost: 0, groupId: 10210222, iconId: "20016", order: 2150 }, "102201111": { baseCost: 0, groupId: 10220111, iconId: "20016", order: 2380 }, "102201211": { baseCost: 0, groupId: 10220121, iconId: "20046", order: 20780 }, "102202111": { baseCost: 0, groupId: 10220211, iconId: "20016", order: 20190 }, "102202211": { baseCost: 0, groupId: 10220221, iconId: "20046", order: 21440 }, "102202221": { baseCost: 0, groupId: 10220222, iconId: "20046", order: 21440 }, "102301111": { baseCost: 0, groupId: 10230111, iconId: "20026", order: 2340 }, "102301211": { baseCost: 0, groupId: 10230121, iconId: "20026", order: 2700 }, "102302111": { baseCost: 0, groupId: 10230211, iconId: "20026", order: 20500 }, "102302211": { baseCost: 0, groupId: 10230221, iconId: "20016", order: 2250 }, "102303111": { baseCost: 0, groupId: 10230311, iconId: "20046", order: 22720 }, "102303211": { baseCost: 0, groupId: 10230321, iconId: "20026", order: 22360 }, "102401111": { baseCost: 0, groupId: 10240111, iconId: "20026", order: 2020 }, "102401211": { baseCost: 0, groupId: 10240121, iconId: "20046", order: 2210 }, "102402111": { baseCost: 0, groupId: 10240211, iconId: "30056", order: 20420 }, "102402211": { baseCost: 0, groupId: 10240221, iconId: "20026", order: 1950 }, "102403111": { baseCost: 0, groupId: 10240311, iconId: "20046", order: 22820 }, "102403211": { baseCost: 0, groupId: 10240321, iconId: "20016", order: 23560 }, "10241": { baseCost: 0, groupId: 1024, iconId: "20013", order: 10 }, "102501111": { baseCost: 0, groupId: 10250111, iconId: "20026", order: 20940 }, "102501211": { baseCost: 0, groupId: 10250121, iconId: "30056", order: 20540 }, "102502111": { baseCost: 0, groupId: 10250211, iconId: "20046", order: 2500 }, "102502211": { baseCost: 0, groupId: 10250221, iconId: "20016", order: 22880 }, "102601111": { baseCost: 0, groupId: 10260111, iconId: "20046", order: 2280 }, "102601211": { baseCost: 0, groupId: 10260121, iconId: "20026", order: 2640 }, "102602111": { baseCost: 0, groupId: 10260211, iconId: "20016", order: 2300 }, "102602121": { baseCost: 0, groupId: 10260212, iconId: "20016", order: 2300 }, "102602211": { baseCost: 0, groupId: 10260221, iconId: "20066", order: 2080 }, "102701111": { baseCost: 0, groupId: 10270111, iconId: "20016", order: 2660 }, "102701211": { baseCost: 0, groupId: 10270121, iconId: "20016", order: 2440 }, "102702111": { baseCost: 0, groupId: 10270211, iconId: "20046", order: 20780 }, "102702211": { baseCost: 0, groupId: 10270221, iconId: "20016", order: 21740 }, "10271": { baseCost: 0, groupId: 1027, iconId: "20043", order: 10 }, "102801111": { baseCost: 0, groupId: 10280111, iconId: "20056", order: 20090 }, "102801211": { baseCost: 0, groupId: 10280121, iconId: "20026", order: 20800 }, "102801221": { baseCost: 0, groupId: 10280122, iconId: "20016", order: 20800 }, "102901111": { baseCost: 0, groupId: 10290111, iconId: "20046", order: 2210 }, "102901211": { baseCost: 0, groupId: 10290121, iconId: "20046", order: 20780 }, "102901221": { baseCost: 0, groupId: 10290122, iconId: "20046", order: 20780 }, "102902111": { baseCost: 0, groupId: 10290211, iconId: "20016", order: 22e3 }, "102902211": { baseCost: 0, groupId: 10290221, iconId: "20046", order: 1920 }, "102902221": { baseCost: 0, groupId: 10290222, iconId: "20046", order: 1920 }, "103001111": { baseCost: 0, groupId: 10300111, iconId: "20046", order: 20780 }, "103001211": { baseCost: 0, groupId: 10300121, iconId: "20026", order: 2700 }, "103002111": { baseCost: 0, groupId: 10300211, iconId: "20026", order: 2340 }, "103002211": { baseCost: 0, groupId: 10300221, iconId: "30056", order: 2755 }, "103003111": { baseCost: 0, groupId: 10300311, iconId: "20046", order: 21245 }, "103003211": { baseCost: 0, groupId: 10300321, iconId: "10026", order: 1145 }, "103101111": { baseCost: 0, groupId: 10310111, iconId: "20026", order: 20660 }, "103101211": { baseCost: 0, groupId: 10310121, iconId: "20016", order: 21690 }, "103102111": { baseCost: 0, groupId: 10310211, iconId: "20066", order: 2080 }, "103102211": { baseCost: 0, groupId: 10310221, iconId: "20016", order: 20595 }, "103201111": { baseCost: 0, groupId: 10320111, iconId: "20016", order: 20400 }, "103201211": { baseCost: 0, groupId: 10320121, iconId: "20026", order: 2360 }, "103202111": { baseCost: 0, groupId: 10320211, iconId: "10016", order: 22600 }, "103202211": { baseCost: 0, groupId: 10320221, iconId: "20016", order: 22e3 }, "103203111": { baseCost: 0, groupId: 10320311, iconId: "20016", order: 23140 }, "103203211": { baseCost: 0, groupId: 10320321, iconId: "20016", order: 21260 }, "10321": { baseCost: 0, groupId: 1032, iconId: "20023", order: 10 }, "103301111": { baseCost: 0, groupId: 10330111, iconId: "20026", order: 21080 }, "103301211": { baseCost: 0, groupId: 10330121, iconId: "20016", order: 2480 }, "103302111": { baseCost: 0, groupId: 10330211, iconId: "20016", order: 23820 }, "103302211": { baseCost: 0, groupId: 10330221, iconId: "20016", order: 23500 }, "103401111": { baseCost: 0, groupId: 10340111, iconId: "20016", order: 21290 }, "103401211": { baseCost: 0, groupId: 10340121, iconId: "20026", order: 21460 }, "103401221": { baseCost: 0, groupId: 10340122, iconId: "20026", order: 21460 }, "103402111": { baseCost: 0, groupId: 10340211, iconId: "20016", order: 2720 }, "103402211": { baseCost: 0, groupId: 10340221, iconId: "20046", order: 2500 }, "103501111": { baseCost: 0, groupId: 10350111, iconId: "20046", order: 20900 }, "103501211": { baseCost: 0, groupId: 10350121, iconId: "20016", order: 2400 }, "103502111": { baseCost: 0, groupId: 10350211, iconId: "20016", order: 20920 }, "103502211": { baseCost: 0, groupId: 10350221, iconId: "20016", order: 21420 }, "103503111": { baseCost: 0, groupId: 10350311, iconId: "20016", order: 21630 }, "103503211": { baseCost: 0, groupId: 10350321, iconId: "20016", order: 22480 }, "10351": { baseCost: 0, groupId: 1035, iconId: "20013", order: 10 }, "103601111": { baseCost: 0, groupId: 10360111, iconId: "20016", order: 21630 }, "103601211": { baseCost: 0, groupId: 10360121, iconId: "20016", order: 20995 }, "103602111": { baseCost: 0, groupId: 10360211, iconId: "30056", order: 20540 }, "103602121": { baseCost: 0, groupId: 10360212, iconId: "30056", order: 20540 }, "103602211": { baseCost: 0, groupId: 10360221, iconId: "20016", order: 2720 }, "103701111": { baseCost: 0, groupId: 10370111, iconId: "20056", order: 2230 }, "103701211": { baseCost: 0, groupId: 10370121, iconId: "20016", order: 2250 }, "103702111": { baseCost: 0, groupId: 10370211, iconId: "20016", order: 20400 }, "103702121": { baseCost: 0, groupId: 10370212, iconId: "20026", order: 20400 }, "103702211": { baseCost: 0, groupId: 10370221, iconId: "20016", order: 20290 }, "103703111": { baseCost: 0, groupId: 10370311, iconId: "10026", order: 1059 }, "103703211": { baseCost: 0, groupId: 10370321, iconId: "20016", order: 21710 }, "103801111": { baseCost: 0, groupId: 10380111, iconId: "30076", order: 20840 }, "103801211": { baseCost: 0, groupId: 10380121, iconId: "30016", order: 20110 }, "103802111": { baseCost: 0, groupId: 10380211, iconId: "30016", order: 20110 }, "103802121": { baseCost: 0, groupId: 10380212, iconId: "20016", order: 20110 }, "103802211": { baseCost: 0, groupId: 10380221, iconId: "20046", order: 2520 }, "103901111": { baseCost: 0, groupId: 10390111, iconId: "20046", order: 2210 }, "103901211": { baseCost: 0, groupId: 10390121, iconId: "20016", order: 2440 }, "103902111": { baseCost: 0, groupId: 10390211, iconId: "20016", order: 22140 }, "103902211": { baseCost: 0, groupId: 10390221, iconId: "20016", order: 21740 }, "104001111": { baseCost: 0, groupId: 10400111, iconId: "20026", order: 2600 }, "104001211": { baseCost: 0, groupId: 10400121, iconId: "20046", order: 2420 }, "104001221": { baseCost: 0, groupId: 10400122, iconId: "20046", order: 2420 }, "104002111": { baseCost: 0, groupId: 10400211, iconId: "30026", order: 20270 }, "104002211": { baseCost: 0, groupId: 10400221, iconId: "20026", order: 21400 }, "104101111": { baseCost: 0, groupId: 10410111, iconId: "20046", order: 2520 }, "104101211": { baseCost: 0, groupId: 10410121, iconId: "20016", order: 20050 }, "104102111": { baseCost: 0, groupId: 10410211, iconId: "20016", order: 21540 }, "104102211": { baseCost: 0, groupId: 10410221, iconId: "20016", order: 20005 }, "10411": { baseCost: 0, groupId: 1041, iconId: "20013", order: 10 }, "104201111": { baseCost: 0, groupId: 10420111, iconId: "20016", order: 20005 }, "104201211": { baseCost: 0, groupId: 10420121, iconId: "20016", order: 20230 }, "104202111": { baseCost: 0, groupId: 10420211, iconId: "20046", order: 2e3 }, "104202211": { baseCost: 0, groupId: 10420221, iconId: "20016", order: 22640 }, "104301111": { baseCost: 0, groupId: 10430111, iconId: "20016", order: 21820 }, "104301211": { baseCost: 0, groupId: 10430121, iconId: "10016", order: 21940 }, "104301221": { baseCost: 0, groupId: 10430122, iconId: "10016", order: 21940 }, "104401111": { baseCost: 0, groupId: 10440111, iconId: "20026", order: 21060 }, "104401211": { baseCost: 0, groupId: 10440121, iconId: "30016", order: 21120 }, "104401221": { baseCost: 0, groupId: 10440122, iconId: "20016", order: 21120 }, "104402111": { baseCost: 0, groupId: 10440211, iconId: "20046", order: 22220 }, "104402211": { baseCost: 0, groupId: 10440221, iconId: "20016", order: 23020 }, "104501111": { baseCost: 0, groupId: 10450111, iconId: "20016", order: 20840 }, "104501211": { baseCost: 0, groupId: 10450121, iconId: "20026", order: 1950 }, "104502111": { baseCost: 0, groupId: 10450211, iconId: "20016", order: 1890 }, "104502211": { baseCost: 0, groupId: 10450221, iconId: "30056", order: 20420 }, "104503111": { baseCost: 0, groupId: 10450311, iconId: "20016", order: 22e3 }, "104503211": { baseCost: 0, groupId: 10450321, iconId: "20046", order: 22200 }, "10451": { baseCost: 0, groupId: 1045, iconId: "20023", order: 10 }, "104601111": { baseCost: 0, groupId: 10460111, iconId: "20056", order: 2130 }, "104601121": { baseCost: 0, groupId: 10460112, iconId: "20016", order: 2130 }, "104601211": { baseCost: 0, groupId: 10460121, iconId: "20016", order: 21360 }, "104602111": { baseCost: 0, groupId: 10460211, iconId: "20016", order: 21360 }, "104602121": { baseCost: 0, groupId: 10460212, iconId: "20016", order: 21360 }, "104602211": { baseCost: 0, groupId: 10460221, iconId: "20046", order: 21880 }, "104701111": { baseCost: 0, groupId: 10470111, iconId: "20026", order: 2360 }, "104701121": { baseCost: 0, groupId: 10470112, iconId: "20026", order: 2360 }, "104701211": { baseCost: 0, groupId: 10470121, iconId: "20016", order: 20315 }, "104702111": { baseCost: 0, groupId: 10470211, iconId: "20016", order: 20715 }, "104702211": { baseCost: 0, groupId: 10470221, iconId: "10016", order: 1565 }, "104801111": { baseCost: 0, groupId: 10480111, iconId: "20046", order: 2420 }, "104801211": { baseCost: 0, groupId: 10480121, iconId: "20026", order: 2360 }, "104802111": { baseCost: 0, groupId: 10480211, iconId: "20046", order: 21590 }, "104802211": { baseCost: 0, groupId: 10480221, iconId: "20016", order: 21670 }, "104802221": { baseCost: 0, groupId: 10480222, iconId: "20016", order: 21670 }, "104901111": { baseCost: 0, groupId: 10490111, iconId: "20016", order: 21520 }, "104901211": { baseCost: 0, groupId: 10490121, iconId: "10016", order: 22135 }, "105001111": { baseCost: 0, groupId: 10500111, iconId: "20026", order: 2460 }, "105001211": { baseCost: 0, groupId: 10500121, iconId: "20046", order: 2500 }, "105002111": { baseCost: 0, groupId: 10500211, iconId: "20016", order: 22020 }, "105002211": { baseCost: 0, groupId: 10500221, iconId: "20046", order: 21590 }, "105003111": { baseCost: 0, groupId: 10500311, iconId: "20016", order: 22980 }, "105003211": { baseCost: 0, groupId: 10500321, iconId: "20016", order: 22940 }, "105101111": { baseCost: 0, groupId: 10510111, iconId: "20016", order: 1980 }, "105101121": { baseCost: 0, groupId: 10510112, iconId: "20016", order: 1980 }, "105101211": { baseCost: 0, groupId: 10510121, iconId: "20046", order: 20780 }, "105102111": { baseCost: 0, groupId: 10510211, iconId: "20016", order: 20165 }, "105102211": { baseCost: 0, groupId: 10510221, iconId: "20016", order: 21740 }, "105102221": { baseCost: 0, groupId: 10510222, iconId: "20016", order: 21740 }, "105201111": { baseCost: 0, groupId: 10520111, iconId: "20026", order: 2110 }, "105201211": { baseCost: 0, groupId: 10520121, iconId: "20026", order: 2170 }, "105202111": { baseCost: 0, groupId: 10520211, iconId: "20056", order: 2130 }, "105202121": { baseCost: 0, groupId: 10520212, iconId: "20056", order: 2130 }, "105202211": { baseCost: 0, groupId: 10520221, iconId: "20046", order: 20900 }, "10521": { baseCost: 0, groupId: 1052, iconId: "20023", order: 10 }, "105301111": { baseCost: 0, groupId: 10530111, iconId: "20016", order: 2440 }, "105301121": { baseCost: 0, groupId: 10530112, iconId: "20016", order: 2440 }, "105301211": { baseCost: 0, groupId: 10530121, iconId: "20016", order: 21650 }, "105302111": { baseCost: 0, groupId: 10530211, iconId: "20046", order: 2420 }, "105302211": { baseCost: 0, groupId: 10530221, iconId: "20046", order: 2520 }, "105401111": { baseCost: 0, groupId: 10540111, iconId: "20016", order: 2400 }, "105401211": { baseCost: 0, groupId: 10540121, iconId: "20016", order: 2560 }, "10541": { baseCost: 0, groupId: 1054, iconId: "20013", order: 10 }, "105501111": { baseCost: 0, groupId: 10550111, iconId: "20016", order: 21630 }, "105501121": { baseCost: 0, groupId: 10550112, iconId: "20016", order: 21630 }, "105501211": { baseCost: 0, groupId: 10550121, iconId: "20046", order: 2210 }, "105601111": { baseCost: 0, groupId: 10560111, iconId: "20016", order: 20560 }, "105601211": { baseCost: 0, groupId: 10560121, iconId: "10066", order: 21220 }, "105602111": { baseCost: 0, groupId: 10560211, iconId: "20016", order: 20520 }, "105602211": { baseCost: 0, groupId: 10560221, iconId: "20016", order: 2720 }, "10561": { baseCost: 0, groupId: 1056, iconId: "20013", order: 10 }, "105701111": { baseCost: 0, groupId: 10570111, iconId: "20016", order: 22260 }, "105701211": { baseCost: 0, groupId: 10570121, iconId: "20046", order: 2500 }, "105702111": { baseCost: 0, groupId: 10570211, iconId: "20016", order: 22260 }, "105702211": { baseCost: 0, groupId: 10570221, iconId: "20046", order: 23120 }, "105801111": { baseCost: 0, groupId: 10580111, iconId: "20016", order: 2380 }, "105801211": { baseCost: 0, groupId: 10580121, iconId: "20026", order: 2170 }, "105802111": { baseCost: 0, groupId: 10580211, iconId: "20046", order: 21440 }, "105802121": { baseCost: 0, groupId: 10580212, iconId: "20046", order: 21440 }, "105802211": { baseCost: 0, groupId: 10580221, iconId: "20026", order: 1950 }, "105901111": { baseCost: 0, groupId: 10590111, iconId: "30056", order: 20980 }, "105901121": { baseCost: 0, groupId: 10590112, iconId: "20016", order: 20980 }, "105901211": { baseCost: 0, groupId: 10590121, iconId: "10026", order: 1145 }, "105902111": { baseCost: 0, groupId: 10590211, iconId: "20016", order: 21670 }, "105902121": { baseCost: 0, groupId: 10590212, iconId: "20016", order: 21670 }, "105902211": { baseCost: 0, groupId: 10590221, iconId: "20046", order: 21590 }, "106001111": { baseCost: 0, groupId: 10600111, iconId: "20046", order: 20420 }, "106001211": { baseCost: 0, groupId: 10600121, iconId: "20016", order: 20980 }, "106002111": { baseCost: 0, groupId: 10600211, iconId: "20016", order: 20400 }, "106002211": { baseCost: 0, groupId: 10600221, iconId: "20046", order: 2210 }, "106003111": { baseCost: 0, groupId: 10600311, iconId: "20016", order: 21335 }, "106003211": { baseCost: 0, groupId: 10600321, iconId: "20046", order: 2420 }, "10601": { baseCost: 0, groupId: 1060, iconId: "20013", order: 10 }, "106101111": { baseCost: 0, groupId: 10610111, iconId: "20016", order: 2560 }, "106101211": { baseCost: 0, groupId: 10610121, iconId: "20096", order: 20960 }, "106102111": { baseCost: 0, groupId: 10610211, iconId: "20016", order: 2440 }, "106102211": { baseCost: 0, groupId: 10610221, iconId: "10016", order: 1505 }, "106103111": { baseCost: 0, groupId: 10610311, iconId: "20046", order: 2620 }, "106103211": { baseCost: 0, groupId: 10610321, iconId: "20016", order: 22680 }, "106103221": { baseCost: 0, groupId: 10610322, iconId: "20016", order: 22680 }, "10611": { baseCost: 0, groupId: 1061, iconId: "20013", order: 10 }, "106201111": { baseCost: 0, groupId: 10620111, iconId: "20026", order: 2190 }, "106201211": { baseCost: 0, groupId: 10620121, iconId: "20016", order: 20520 }, "106202111": { baseCost: 0, groupId: 10620211, iconId: "20026", order: 21400 }, "106202211": { baseCost: 0, groupId: 10620221, iconId: "20046", order: 21590 }, "106202221": { baseCost: 0, groupId: 10620222, iconId: "20046", order: 21590 }, "10621": { baseCost: 0, groupId: 1062, iconId: "20023", order: 10 }, "106301111": { baseCost: 0, groupId: 10630111, iconId: "20026", order: 2360 }, "106301211": { baseCost: 0, groupId: 10630121, iconId: "20016", order: 21710 }, "10631": { baseCost: 0, groupId: 1063, iconId: "20013", order: 10 }, "106401111": { baseCost: 0, groupId: 10640111, iconId: "20016", order: 21345 }, "106401211": { baseCost: 0, groupId: 10640121, iconId: "20016", order: 20480 }, "106401221": { baseCost: 0, groupId: 10640122, iconId: "20016", order: 20480 }, "106402111": { baseCost: 0, groupId: 10640211, iconId: "20016", order: 20435 }, "106402211": { baseCost: 0, groupId: 10640221, iconId: "20016", order: 22560 }, "106501111": { baseCost: 0, groupId: 10650111, iconId: "20016", order: 20190 }, "106501211": { baseCost: 0, groupId: 10650121, iconId: "20016", order: 22240 }, "106502111": { baseCost: 0, groupId: 10650211, iconId: "20046", order: 2280 }, "106502211": { baseCost: 0, groupId: 10650221, iconId: "20016", order: 2580 }, "106601111": { baseCost: 0, groupId: 10660111, iconId: "20016", order: 22040 }, "106601211": { baseCost: 0, groupId: 10660121, iconId: "20046", order: 2280 }, "10661": { baseCost: 0, groupId: 1066, iconId: "20013", order: 10 }, "106701111": { baseCost: 0, groupId: 10670111, iconId: "20026", order: 21400 }, "106701121": { baseCost: 0, groupId: 10670112, iconId: "20026", order: 21400 }, "106701211": { baseCost: 0, groupId: 10670121, iconId: "10016", order: 1e3 }, "106702111": { baseCost: 0, groupId: 10670211, iconId: "20046", order: 22100 }, "106702211": { baseCost: 0, groupId: 10670221, iconId: "30056", order: 20540 }, "106703111": { baseCost: 0, groupId: 10670311, iconId: "20046", order: 21590 }, "106703211": { baseCost: 0, groupId: 10670321, iconId: "20016", order: 20315 }, "106801111": { baseCost: 0, groupId: 10680111, iconId: "20046", order: 2280 }, "106801211": { baseCost: 0, groupId: 10680121, iconId: "20016", order: 20435 }, "106802111": { baseCost: 0, groupId: 10680211, iconId: "20016", order: 2300 }, "106802211": { baseCost: 0, groupId: 10680221, iconId: "20046", order: 2280 }, "106803111": { baseCost: 0, groupId: 10680311, iconId: "20016", order: 22800 }, "106803211": { baseCost: 0, groupId: 10680321, iconId: "20046", order: 22820 }, "106901111": { baseCost: 0, groupId: 10690111, iconId: "20016", order: 2380 }, "106901121": { baseCost: 0, groupId: 10690112, iconId: "20016", order: 2380 }, "106901211": { baseCost: 0, groupId: 10690121, iconId: "10016", order: 1505 }, "106902111": { baseCost: 0, groupId: 10690211, iconId: "20016", order: 1980 }, "106902211": { baseCost: 0, groupId: 10690221, iconId: "20016", order: 21610 }, "107001111": { baseCost: 0, groupId: 10700111, iconId: "20016", order: 21420 }, "107001211": { baseCost: 0, groupId: 10700121, iconId: "20016", order: 2660 }, "107001221": { baseCost: 0, groupId: 10700122, iconId: "20016", order: 2660 }, "107101111": { baseCost: 0, groupId: 10710111, iconId: "20026", order: 2360 }, "107101211": { baseCost: 0, groupId: 10710121, iconId: "20016", order: 21420 }, "107102111": { baseCost: 0, groupId: 10710211, iconId: "20026", order: 2170 }, "107102121": { baseCost: 0, groupId: 10710212, iconId: "20026", order: 2170 }, "107102211": { baseCost: 0, groupId: 10710221, iconId: "20016", order: 20290 }, "107201111": { baseCost: 0, groupId: 10720111, iconId: "20016", order: 2150 }, "107201211": { baseCost: 0, groupId: 10720121, iconId: "20016", order: 2680 }, "107201221": { baseCost: 0, groupId: 10720122, iconId: "20016", order: 2680 }, "107202111": { baseCost: 0, groupId: 10720211, iconId: "20046", order: 22620 }, "107202211": { baseCost: 0, groupId: 10720221, iconId: "20016", order: 22180 }, "107301111": { baseCost: 0, groupId: 10730111, iconId: "20016", order: 20735 }, "107301211": { baseCost: 0, groupId: 10730121, iconId: "20016", order: 20315 }, "10731": { baseCost: 0, groupId: 1073, iconId: "20013", order: 10 }, "107401111": { baseCost: 0, groupId: 10740111, iconId: "20026", order: 2170 }, "107401211": { baseCost: 0, groupId: 10740121, iconId: "20026", order: 21570 }, "107402111": { baseCost: 0, groupId: 10740211, iconId: "20016", order: 22480 }, "107402211": { baseCost: 0, groupId: 10740221, iconId: "20016", order: 20520 }, "107601111": { baseCost: 0, groupId: 10760111, iconId: "20016", order: 21710 }, "107601211": { baseCost: 0, groupId: 10760121, iconId: "20016", order: 22380 }, "107701111": { baseCost: 0, groupId: 10770111, iconId: "10036", order: 1445 }, "107701211": { baseCost: 0, groupId: 10770121, iconId: "20016", order: 21480 }, "107702111": { baseCost: 0, groupId: 10770211, iconId: "20026", order: 21760 }, "107702211": { baseCost: 0, groupId: 10770221, iconId: "20016", order: 23600 }, "107801111": { baseCost: 0, groupId: 10780111, iconId: "20016", order: 20190 }, "107801211": { baseCost: 0, groupId: 10780121, iconId: "20016", order: 22080 }, "107801221": { baseCost: 0, groupId: 10780122, iconId: "20016", order: 22080 }, "107802111": { baseCost: 0, groupId: 10780211, iconId: "20016", order: 22700 }, "107802211": { baseCost: 0, groupId: 10780221, iconId: "20016", order: 22080 }, "107901111": { baseCost: 0, groupId: 10790111, iconId: "20016", order: 22280 }, "107901211": { baseCost: 0, groupId: 10790121, iconId: "20016", order: 24080 }, "108001111": { baseCost: 0, groupId: 10800111, iconId: "20046", order: 21275 }, "108001211": { baseCost: 0, groupId: 10800121, iconId: "20016", order: 23080 }, "108201111": { baseCost: 0, groupId: 10820111, iconId: "20016", order: 2150 }, "108201211": { baseCost: 0, groupId: 10820121, iconId: "20046", order: 22540 }, "108301111": { baseCost: 0, groupId: 10830111, iconId: "20046", order: 22100 }, "108301211": { baseCost: 0, groupId: 10830121, iconId: "20016", order: 22340 }, "108302111": { baseCost: 0, groupId: 10830211, iconId: "20016", order: 21610 }, "108302211": { baseCost: 0, groupId: 10830221, iconId: "20046", order: 2420 }, "108401111": { baseCost: 0, groupId: 10840111, iconId: "20016", order: 2480 }, "108401211": { baseCost: 0, groupId: 10840121, iconId: "10016", order: 22500 }, "108501111": { baseCost: 0, groupId: 10850111, iconId: "20016", order: 22300 }, "108501211": { baseCost: 0, groupId: 10850121, iconId: "20046", order: 22060 }, "108502111": { baseCost: 0, groupId: 10850211, iconId: "20046", order: 22060 }, "108502211": { baseCost: 0, groupId: 10850221, iconId: "20016", order: 23100 }, "108601111": { baseCost: 0, groupId: 10860111, iconId: "20016", order: 22660 }, "108601211": { baseCost: 0, groupId: 10860121, iconId: "20016", order: 22280 }, "108701111": { baseCost: 0, groupId: 10870111, iconId: "20046", order: 2280 }, "108701211": { baseCost: 0, groupId: 10870121, iconId: "20016", order: 21540 }, "108702111": { baseCost: 0, groupId: 10870211, iconId: "20046", order: 23560 }, "108702211": { baseCost: 0, groupId: 10870221, iconId: "20046", order: 24100 }, "108801111": { baseCost: 0, groupId: 10880111, iconId: "20016", order: 2400 }, "108801211": { baseCost: 0, groupId: 10880121, iconId: "20046", order: 21590 }, "108901111": { baseCost: 0, groupId: 10890111, iconId: "20016", order: 22120 }, "108901211": { baseCost: 0, groupId: 10890121, iconId: "20016", order: 2250 }, "109101111": { baseCost: 0, groupId: 10910111, iconId: "20016", order: 21740 }, "109101211": { baseCost: 0, groupId: 10910121, iconId: "20016", order: 21670 }, "109301111": { baseCost: 0, groupId: 10930111, iconId: "20016", order: 2380 }, "109301211": { baseCost: 0, groupId: 10930121, iconId: "20046", order: 21440 }, "109401111": { baseCost: 0, groupId: 10940111, iconId: "20016", order: 22440 }, "109401211": { baseCost: 0, groupId: 10940121, iconId: "20016", order: 22520 }, "109401221": { baseCost: 0, groupId: 10940122, iconId: "20016", order: 22520 }, "109801111": { baseCost: 0, groupId: 10980111, iconId: "20016", order: 21780 }, "109801211": { baseCost: 0, groupId: 10980121, iconId: "10016", order: 21920 }, "109901111": { baseCost: 0, groupId: 10990111, iconId: "20026", order: 2340 }, "109901211": { baseCost: 0, groupId: 10990121, iconId: "20016", order: 21360 }, "109902111": { baseCost: 0, groupId: 10990211, iconId: "20016", order: 22840 }, "109902211": { baseCost: 0, groupId: 10990221, iconId: "20046", order: 23300 }, "110001111": { baseCost: 0, groupId: 11000111, iconId: "20016", order: 20230 }, "110001121": { baseCost: 0, groupId: 11000112, iconId: "20016", order: 20230 }, "110001211": { baseCost: 0, groupId: 11000121, iconId: "20016", order: 21860 }, "110011": { baseCost: 0, groupId: 11001, iconId: "20023", order: 10 }, "110021": { baseCost: 0, groupId: 11002, iconId: "20013", order: 10 }, "110031": { baseCost: 0, groupId: 11003, iconId: "20013", order: 10 }, "110041": { baseCost: 0, groupId: 11004, iconId: "20013", order: 10 }, "110051": { baseCost: 0, groupId: 11005, iconId: "20013", order: 10 }, "110061": { baseCost: 0, groupId: 11006, iconId: "20013", order: 10 }, "110071": { baseCost: 0, groupId: 11007, iconId: "20013", order: 10 }, "110081": { baseCost: 0, groupId: 11008, iconId: "20013", order: 10 }, "110091": { baseCost: 0, groupId: 11009, iconId: "20013", order: 10 }, "110101": { baseCost: 0, groupId: 11010, iconId: "20013", order: 10 }, "110111": { baseCost: 0, groupId: 11011, iconId: "20023", order: 10 }, "110121": { baseCost: 0, groupId: 11012, iconId: "20013", order: 10 }, "110131": { baseCost: 0, groupId: 11013, iconId: "20013", order: 10 }, "110141": { baseCost: 0, groupId: 11014, iconId: "20043", order: 10 }, "110151": { baseCost: 0, groupId: 11015, iconId: "20013", order: 10 }, "110161": { baseCost: 0, groupId: 11016, iconId: "20013", order: 10 }, "110171": { baseCost: 0, groupId: 11017, iconId: "20013", order: 10 }, "110181": { baseCost: 0, groupId: 11018, iconId: "20013", order: 10 }, "110191": { baseCost: 0, groupId: 11019, iconId: "20013", order: 10 }, "110201": { baseCost: 0, groupId: 11020, iconId: "20013", order: 10 }, "110201111": { baseCost: 0, groupId: 11020111, iconId: "20026", order: 2020 }, "110201211": { baseCost: 0, groupId: 11020121, iconId: "20016", order: 22300 }, "110211": { baseCost: 0, groupId: 11021, iconId: "20013", order: 10 }, "110221": { baseCost: 0, groupId: 11022, iconId: "20013", order: 10 }, "110231": { baseCost: 0, groupId: 11023, iconId: "20013", order: 10 }, "110241": { baseCost: 0, groupId: 11024, iconId: "20013", order: 10 }, "110251": { baseCost: 0, groupId: 11025, iconId: "20013", order: 10 }, "110261": { baseCost: 0, groupId: 11026, iconId: "20013", order: 10 }, "110271": { baseCost: 0, groupId: 11027, iconId: "20013", order: 10 }, "110291": { baseCost: 0, groupId: 11029, iconId: "20013", order: 10 }, "110301": { baseCost: 0, groupId: 11030, iconId: "20023", order: 10 }, "110311": { baseCost: 0, groupId: 11031, iconId: "20013", order: 10 }, "110321": { baseCost: 0, groupId: 11032, iconId: "20013", order: 10 }, "110331": { baseCost: 0, groupId: 11033, iconId: "20043", order: 10 }, "110341": { baseCost: 0, groupId: 11034, iconId: "20013", order: 10 }, "110351": { baseCost: 0, groupId: 11035, iconId: "20013", order: 10 }, "110361": { baseCost: 0, groupId: 11036, iconId: "20013", order: 10 }, "110371": { baseCost: 0, groupId: 11037, iconId: "20013", order: 10 }, "110381": { baseCost: 0, groupId: 11038, iconId: "20013", order: 10 }, "110391": { baseCost: 0, groupId: 11039, iconId: "20013", order: 10 }, "110401": { baseCost: 0, groupId: 11040, iconId: "20013", order: 10 }, "110401111": { baseCost: 0, groupId: 11040111, iconId: "20046", order: 2280 }, "110401211": { baseCost: 0, groupId: 11040121, iconId: "20016", order: 22160 }, "110402111": { baseCost: 0, groupId: 11040211, iconId: "20046", order: 23900 }, "110402211": { baseCost: 0, groupId: 11040221, iconId: "20016", order: 23920 }, "110411": { baseCost: 0, groupId: 11041, iconId: "20043", order: 10 }, "110421": { baseCost: 0, groupId: 11042, iconId: "20013", order: 10 }, "110441": { baseCost: 0, groupId: 11044, iconId: "20013", order: 10 }, "110451": { baseCost: 0, groupId: 11045, iconId: "20013", order: 10 }, "110461": { baseCost: 0, groupId: 11046, iconId: "20013", order: 10 }, "110471": { baseCost: 0, groupId: 11047, iconId: "20013", order: 10 }, "110481": { baseCost: 0, groupId: 11048, iconId: "20013", order: 10 }, "110501": { baseCost: 0, groupId: 11050, iconId: "20013", order: 10 }, "110501111": { baseCost: 0, groupId: 11050111, iconId: "20016", order: 21420 }, "110501211": { baseCost: 0, groupId: 11050121, iconId: "20016", order: 22400 }, "110502111": { baseCost: 0, groupId: 11050211, iconId: "20016", order: 22400 }, "110502211": { baseCost: 0, groupId: 11050221, iconId: "10016", order: 21315 }, "110511": { baseCost: 0, groupId: 11051, iconId: "20013", order: 10 }, "110521": { baseCost: 0, groupId: 11052, iconId: "20013", order: 10 }, "110531": { baseCost: 0, groupId: 11053, iconId: "20013", order: 10 }, "110561": { baseCost: 0, groupId: 11056, iconId: "20013", order: 10 }, "110571": { baseCost: 0, groupId: 11057, iconId: "20013", order: 10 }, "110581": { baseCost: 0, groupId: 11058, iconId: "20013", order: 10 }, "110591": { baseCost: 0, groupId: 11059, iconId: "20013", order: 10 }, "110601": { baseCost: 0, groupId: 11060, iconId: "20013", order: 10 }, "110601111": { baseCost: 0, groupId: 11060111, iconId: "20026", order: 20940 }, "110601121": { baseCost: 0, groupId: 11060112, iconId: "20026", order: 20940 }, "110601211": { baseCost: 0, groupId: 11060121, iconId: "20016", order: 22480 }, "110611": { baseCost: 0, groupId: 11061, iconId: "20043", order: 10 }, "110621": { baseCost: 0, groupId: 11062, iconId: "20013", order: 10 }, "110641": { baseCost: 0, groupId: 11064, iconId: "20013", order: 10 }, "110651": { baseCost: 0, groupId: 11065, iconId: "20013", order: 10 }, "110671": { baseCost: 0, groupId: 11067, iconId: "20013", order: 10 }, "110681": { baseCost: 0, groupId: 11068, iconId: "20013", order: 10 }, "110691": { baseCost: 0, groupId: 11069, iconId: "20043", order: 10 }, "110701111": { baseCost: 0, groupId: 11070111, iconId: "20016", order: 2300 }, "110701211": { baseCost: 0, groupId: 11070121, iconId: "20016", order: 21290 }, "110711": { baseCost: 0, groupId: 11071, iconId: "20013", order: 10 }, "110721": { baseCost: 0, groupId: 11072, iconId: "20013", order: 10 }, "110741": { baseCost: 0, groupId: 11074, iconId: "20023", order: 10 }, "110771": { baseCost: 0, groupId: 11077, iconId: "20013", order: 10 }, "110781": { baseCost: 0, groupId: 11078, iconId: "20013", order: 10 }, "110801111": { baseCost: 0, groupId: 11080111, iconId: "20016", order: 22640 }, "110801211": { baseCost: 0, groupId: 11080121, iconId: "20046", order: 22920 }, "110831": { baseCost: 0, groupId: 11083, iconId: "20013", order: 10 }, "110851": { baseCost: 0, groupId: 11085, iconId: "20013", order: 10 }, "110871": { baseCost: 0, groupId: 11087, iconId: "20013", order: 10 }, "110901111": { baseCost: 0, groupId: 11090111, iconId: "20016", order: 22240 }, "110901211": { baseCost: 0, groupId: 11090121, iconId: "20046", order: 21440 }, "110991": { baseCost: 0, groupId: 11099, iconId: "20013", order: 10 }, "111001111": { baseCost: 0, groupId: 11100111, iconId: "20016", order: 21420 }, "111001211": { baseCost: 0, groupId: 11100121, iconId: "20016", order: 23500 }, "111041": { baseCost: 0, groupId: 11104, iconId: "20013", order: 10 }, "111051": { baseCost: 0, groupId: 11105, iconId: "20013", order: 10 }, "111101111": { baseCost: 0, groupId: 11110111, iconId: "20016", order: 21630 }, "111101211": { baseCost: 0, groupId: 11110121, iconId: "20016", order: 23800 }, "111501111": { baseCost: 0, groupId: 11150111, iconId: "20046", order: 22920 }, "111501211": { baseCost: 0, groupId: 11150121, iconId: "20016", order: 24160 }, "111501221": { baseCost: 0, groupId: 11150122, iconId: "20016", order: 24160 }, "111601111": { baseCost: 0, groupId: 11160111, iconId: "20046", order: 2210 }, "111601211": { baseCost: 0, groupId: 11160121, iconId: "20016", order: 23400 }, "111601221": { baseCost: 0, groupId: 11160122, iconId: "20016", order: 23400 }, "111701111": { baseCost: 0, groupId: 11170111, iconId: "20016", order: 23040 }, "111701211": { baseCost: 0, groupId: 11170121, iconId: "20016", order: 22640 }, "111901111": { baseCost: 0, groupId: 11190111, iconId: "10016", order: 1e3 }, "111901211": { baseCost: 0, groupId: 11190121, iconId: "20016", order: 23160 }, "112001111": { baseCost: 0, groupId: 11200111, iconId: "20016", order: 20005 }, "112001211": { baseCost: 0, groupId: 11200121, iconId: "20016", order: 20575 }, "112101111": { baseCost: 0, groupId: 11210111, iconId: "20016", order: 23020 }, "112101211": { baseCost: 0, groupId: 11210121, iconId: "20046", order: 22060 }, "112401111": { baseCost: 0, groupId: 11240111, iconId: "20016", order: 22080 }, "112401211": { baseCost: 0, groupId: 11240121, iconId: "20016", order: 23420 }, "113101111": { baseCost: 0, groupId: 11310111, iconId: "20016", order: 23240 }, "113101211": { baseCost: 0, groupId: 11310121, iconId: "20046", order: 24220 }, "120011": { baseCost: 0, groupId: 12001, iconId: "20013", order: 10 }, "120031": { baseCost: 0, groupId: 12003, iconId: "20013", order: 10 }, "120041": { baseCost: 0, groupId: 12004, iconId: "20013", order: 10 }, "120071": { baseCost: 0, groupId: 12007, iconId: "20013", order: 10 }, "120111": { baseCost: 0, groupId: 12011, iconId: "20013", order: 10 }, "120131": { baseCost: 0, groupId: 12013, iconId: "20013", order: 10 }, "120231": { baseCost: 0, groupId: 12023, iconId: "20013", order: 10 }, "120241": { baseCost: 0, groupId: 12024, iconId: "20023", order: 10 }, "120301": { baseCost: 0, groupId: 12030, iconId: "20013", order: 10 }, "120321": { baseCost: 0, groupId: 12032, iconId: "20013", order: 10 }, "120351": { baseCost: 0, groupId: 12035, iconId: "20013", order: 10 }, "120371": { baseCost: 0, groupId: 12037, iconId: "20013", order: 10 }, "120451": { baseCost: 0, groupId: 12045, iconId: "20023", order: 10 }, "120501": { baseCost: 0, groupId: 12050, iconId: "20013", order: 10 }, "120601": { baseCost: 0, groupId: 12060, iconId: "20013", order: 10 }, "120611": { baseCost: 0, groupId: 12061, iconId: "20013", order: 10 }, "120671": { baseCost: 0, groupId: 12067, iconId: "20013", order: 10 }, "120681": { baseCost: 0, groupId: 12068, iconId: "20013", order: 10 }, "1400011": { baseCost: 0, groupId: 140001, iconId: "20013", order: 10 }, "200011": { baseCost: 110, groupId: 20001, iconId: "10011", order: 1005 }, "200012": { baseCost: 90, groupId: 20001, iconId: "10011", order: 1010 }, "200013": { baseCost: 50, groupId: 20001, iconId: "10014", order: 1020 }, "200014": { baseCost: 130, groupId: 20001, iconId: "10012", order: 1e3 }, "200021": { baseCost: 110, groupId: 20002, iconId: "10011", order: 1030 }, "200022": { baseCost: 90, groupId: 20002, iconId: "10011", order: 1040 }, "200023": { baseCost: 50, groupId: 20002, iconId: "10014", order: 1050 }, "200031": { baseCost: 110, groupId: 20003, iconId: "10021", order: 1060 }, "200032": { baseCost: 90, groupId: 20003, iconId: "10021", order: 1070 }, "200033": { baseCost: 50, groupId: 20003, iconId: "10024", order: 1080 }, "200034": { baseCost: 130, groupId: 20003, iconId: "10022", order: 1059 }, "200041": { baseCost: 110, groupId: 20004, iconId: "10021", order: 1090 }, "200042": { baseCost: 90, groupId: 20004, iconId: "10021", order: 1100 }, "200043": { baseCost: 50, groupId: 20004, iconId: "10024", order: 1110 }, "200051": { baseCost: 110, groupId: 20005, iconId: "10021", order: 1120 }, "200052": { baseCost: 90, groupId: 20005, iconId: "10021", order: 1130 }, "200053": { baseCost: 50, groupId: 20005, iconId: "10024", order: 1140 }, "200061": { baseCost: 110, groupId: 20006, iconId: "10021", order: 1150 }, "200062": { baseCost: 90, groupId: 20006, iconId: "10021", order: 1160 }, "200063": { baseCost: 50, groupId: 20006, iconId: "10024", order: 1170 }, "200064": { baseCost: 130, groupId: 20006, iconId: "10022", order: 1145 }, "200071": { baseCost: 110, groupId: 20007, iconId: "10021", order: 1180 }, "200072": { baseCost: 90, groupId: 20007, iconId: "10021", order: 1190 }, "200073": { baseCost: 50, groupId: 20007, iconId: "10024", order: 1200 }, "200081": { baseCost: 90, groupId: 20008, iconId: "10021", order: 1210 }, "200082": { baseCost: 70, groupId: 20008, iconId: "10021", order: 1220 }, "200083": { baseCost: 40, groupId: 20008, iconId: "10024", order: 1230 }, "200091": { baseCost: 90, groupId: 20009, iconId: "10021", order: 1240 }, "200092": { baseCost: 70, groupId: 20009, iconId: "10021", order: 1250 }, "200093": { baseCost: 40, groupId: 20009, iconId: "10024", order: 1260 }, "200101": { baseCost: 90, groupId: 20010, iconId: "10021", order: 1270 }, "200102": { baseCost: 70, groupId: 20010, iconId: "10021", order: 1280 }, "200103": { baseCost: 40, groupId: 20010, iconId: "10024", order: 1290 }, "200111": { baseCost: 90, groupId: 20011, iconId: "10021", order: 1300 }, "200112": { baseCost: 70, groupId: 20011, iconId: "10021", order: 1310 }, "200113": { baseCost: 40, groupId: 20011, iconId: "10024", order: 1320 }, "200121": { baseCost: 90, groupId: 20012, iconId: "10021", order: 1330 }, "200122": { baseCost: 70, groupId: 20012, iconId: "10021", order: 1340 }, "200123": { baseCost: 40, groupId: 20012, iconId: "10024", order: 1350 }, "200131": { baseCost: 110, groupId: 20013, iconId: "10021", order: 1408 }, "200132": { baseCost: 90, groupId: 20013, iconId: "10021", order: 1409 }, "200133": { baseCost: 50, groupId: 20013, iconId: "10024", order: 1410 }, "200141": { baseCost: 110, groupId: 20014, iconId: "10021", order: 1420 }, "200142": { baseCost: 90, groupId: 20014, iconId: "10021", order: 1430 }, "200143": { baseCost: 50, groupId: 20014, iconId: "10024", order: 1440 }, "200151": { baseCost: 110, groupId: 20015, iconId: "10031", order: 1450 }, "200152": { baseCost: 90, groupId: 20015, iconId: "10031", order: 1460 }, "200153": { baseCost: 50, groupId: 20015, iconId: "10034", order: 1470 }, "200154": { baseCost: 130, groupId: 20015, iconId: "10032", order: 1445 }, "200161": { baseCost: 110, groupId: 20016, iconId: "10031", order: 1480 }, "200162": { baseCost: 90, groupId: 20016, iconId: "10031", order: 1490 }, "200163": { baseCost: 50, groupId: 20016, iconId: "10034", order: 1500 }, "200164": { baseCost: 130, groupId: 20016, iconId: "10032", order: 1475 }, "200171": { baseCost: 110, groupId: 20017, iconId: "10011", order: 1510 }, "200172": { baseCost: 90, groupId: 20017, iconId: "10011", order: 1520 }, "200173": { baseCost: 50, groupId: 20017, iconId: "10014", order: 1530 }, "200174": { baseCost: 130, groupId: 20017, iconId: "10012", order: 1505 }, "200181": { baseCost: 110, groupId: 20018, iconId: "10011", order: 1540 }, "200182": { baseCost: 90, groupId: 20018, iconId: "10011", order: 1550 }, "200183": { baseCost: 50, groupId: 20018, iconId: "10014", order: 1560 }, "200184": { baseCost: 130, groupId: 20018, iconId: "10012", order: 1535 }, "200191": { baseCost: 110, groupId: 20019, iconId: "10011", order: 1570 }, "200192": { baseCost: 90, groupId: 20019, iconId: "10011", order: 1580 }, "200193": { baseCost: 50, groupId: 20019, iconId: "10014", order: 1590 }, "200194": { baseCost: 130, groupId: 20019, iconId: "10012", order: 1565 }, "200201": { baseCost: 110, groupId: 20020, iconId: "10011", order: 1600 }, "200202": { baseCost: 90, groupId: 20020, iconId: "10011", order: 1610 }, "200203": { baseCost: 50, groupId: 20020, iconId: "10014", order: 1620 }, "200204": { baseCost: 130, groupId: 20020, iconId: "10012", order: 1595 }, "200211": { baseCost: 110, groupId: 20021, iconId: "10041", order: 1630 }, "200212": { baseCost: 90, groupId: 20021, iconId: "10041", order: 1640 }, "200221": { baseCost: 110, groupId: 20022, iconId: "10041", order: 1650 }, "200222": { baseCost: 90, groupId: 20022, iconId: "10041", order: 1660 }, "200231": { baseCost: 110, groupId: 20023, iconId: "10041", order: 1670 }, "200232": { baseCost: 90, groupId: 20023, iconId: "10041", order: 1680 }, "200233": { baseCost: 50, groupId: 20023, iconId: "10044", order: 1690 }, "200241": { baseCost: 110, groupId: 20024, iconId: "10041", order: 1700 }, "200242": { baseCost: 90, groupId: 20024, iconId: "10041", order: 1710 }, "200251": { baseCost: 110, groupId: 20025, iconId: "10051", order: 1720 }, "200252": { baseCost: 90, groupId: 20025, iconId: "10051", order: 1730 }, "200253": { baseCost: 50, groupId: 20025, iconId: "10054", order: 1740 }, "200261": { baseCost: 110, groupId: 20026, iconId: "10011", order: 1750 }, "200262": { baseCost: 90, groupId: 20026, iconId: "10011", order: 1760 }, "200263": { baseCost: 50, groupId: 20026, iconId: "10014", order: 1770 }, "200271": { baseCost: 110, groupId: 20027, iconId: "10011", order: 1780 }, "200272": { baseCost: 90, groupId: 20027, iconId: "10011", order: 1790 }, "200281": { baseCost: 110, groupId: 20028, iconId: "10031", order: 1800 }, "200282": { baseCost: 90, groupId: 20028, iconId: "10031", order: 1810 }, "200283": { baseCost: 50, groupId: 20028, iconId: "10034", order: 1820 }, "200291": { baseCost: 110, groupId: 20029, iconId: "10041", order: 1830 }, "200292": { baseCost: 90, groupId: 20029, iconId: "10041", order: 1840 }, "200301": { baseCost: 110, groupId: 20030, iconId: "10011", order: 1850 }, "200302": { baseCost: 90, groupId: 20030, iconId: "10011", order: 1860 }, "200311": { baseCost: 50, groupId: 20031, iconId: "10014", order: 1870 }, "200321": { baseCost: 50, groupId: 20032, iconId: "10024", order: 1880 }, "200331": { baseCost: 180, groupId: 20033, iconId: "20012", order: 1890 }, "200332": { baseCost: 180, groupId: 20033, iconId: "20011", order: 1900 }, "200333": { baseCost: 100, groupId: 20033, iconId: "20014", order: 1910 }, "200341": { baseCost: 180, groupId: 20034, iconId: "20042", order: 1920 }, "200342": { baseCost: 180, groupId: 20034, iconId: "20041", order: 1930 }, "200343": { baseCost: 100, groupId: 20034, iconId: "20044", order: 1940 }, "200351": { baseCost: 170, groupId: 20035, iconId: "20022", order: 1950 }, "200352": { baseCost: 170, groupId: 20035, iconId: "20021", order: 1960 }, "200353": { baseCost: 100, groupId: 20035, iconId: "20024", order: 1970 }, "200361": { baseCost: 170, groupId: 20036, iconId: "20012", order: 1980 }, "200362": { baseCost: 170, groupId: 20036, iconId: "20011", order: 1990 }, "200371": { baseCost: 170, groupId: 20037, iconId: "20042", order: 2e3 }, "200372": { baseCost: 170, groupId: 20037, iconId: "20041", order: 2010 }, "200381": { baseCost: 170, groupId: 20038, iconId: "20022", order: 2020 }, "200382": { baseCost: 170, groupId: 20038, iconId: "20021", order: 2030 }, "200391": { baseCost: 100, groupId: 20039, iconId: "20024", order: 2040 }, "200401": { baseCost: 100, groupId: 20040, iconId: "20024", order: 2050 }, "200411": { baseCost: 100, groupId: 20041, iconId: "20014", order: 2060 }, "200421": { baseCost: 100, groupId: 20042, iconId: "20014", order: 2070 }, "200431": { baseCost: 140, groupId: 20043, iconId: "20062", order: 2080 }, "200432": { baseCost: 140, groupId: 20043, iconId: "20061", order: 2090 }, "200433": { baseCost: 70, groupId: 20043, iconId: "20064", order: 2100 }, "200441": { baseCost: 160, groupId: 20044, iconId: "20022", order: 2110 }, "200442": { baseCost: 160, groupId: 20044, iconId: "20021", order: 2120 }, "200451": { baseCost: 120, groupId: 20045, iconId: "20052", order: 2130 }, "200452": { baseCost: 120, groupId: 20045, iconId: "20051", order: 2140 }, "200461": { baseCost: 170, groupId: 20046, iconId: "20012", order: 2150 }, "200462": { baseCost: 170, groupId: 20046, iconId: "20011", order: 2160 }, "200471": { baseCost: 170, groupId: 20047, iconId: "20022", order: 2170 }, "200472": { baseCost: 170, groupId: 20047, iconId: "20021", order: 2180 }, "200481": { baseCost: 170, groupId: 20048, iconId: "20022", order: 2190 }, "200482": { baseCost: 170, groupId: 20048, iconId: "20021", order: 2200 }, "200491": { baseCost: 150, groupId: 20049, iconId: "20042", order: 2210 }, "200492": { baseCost: 150, groupId: 20049, iconId: "20041", order: 2220 }, "200501": { baseCost: 120, groupId: 20050, iconId: "20052", order: 2230 }, "200502": { baseCost: 120, groupId: 20050, iconId: "20051", order: 2240 }, "200511": { baseCost: 170, groupId: 20051, iconId: "20012", order: 2250 }, "200512": { baseCost: 170, groupId: 20051, iconId: "20011", order: 2260 }, "200521": { baseCost: 100, groupId: 20052, iconId: "20024", order: 2270 }, "200531": { baseCost: 120, groupId: 20053, iconId: "20042", order: 2280 }, "200532": { baseCost: 120, groupId: 20053, iconId: "20041", order: 2290 }, "200541": { baseCost: 180, groupId: 20054, iconId: "20012", order: 2300 }, "200542": { baseCost: 180, groupId: 20054, iconId: "20011", order: 2310 }, "200551": { baseCost: 180, groupId: 20055, iconId: "20042", order: 2320 }, "200552": { baseCost: 180, groupId: 20055, iconId: "20041", order: 2330 }, "200561": { baseCost: 180, groupId: 20056, iconId: "20022", order: 2340 }, "200562": { baseCost: 180, groupId: 20056, iconId: "20021", order: 2350 }, "200571": { baseCost: 180, groupId: 20057, iconId: "20022", order: 2360 }, "200572": { baseCost: 180, groupId: 20057, iconId: "20021", order: 2370 }, "200581": { baseCost: 180, groupId: 20058, iconId: "20012", order: 2380 }, "200582": { baseCost: 180, groupId: 20058, iconId: "20011", order: 2390 }, "200591": { baseCost: 180, groupId: 20059, iconId: "20012", order: 2400 }, "200592": { baseCost: 180, groupId: 20059, iconId: "20011", order: 2410 }, "200601": { baseCost: 180, groupId: 20060, iconId: "20042", order: 2420 }, "200602": { baseCost: 180, groupId: 20060, iconId: "20041", order: 2430 }, "200611": { baseCost: 180, groupId: 20061, iconId: "20012", order: 2440 }, "200612": { baseCost: 180, groupId: 20061, iconId: "20011", order: 2450 }, "200621": { baseCost: 180, groupId: 20062, iconId: "20022", order: 2460 }, "200622": { baseCost: 180, groupId: 20062, iconId: "20021", order: 2470 }, "200631": { baseCost: 180, groupId: 20063, iconId: "20012", order: 2480 }, "200632": { baseCost: 180, groupId: 20063, iconId: "20011", order: 2490 }, "200641": { baseCost: 180, groupId: 20064, iconId: "20042", order: 2500 }, "200642": { baseCost: 180, groupId: 20064, iconId: "20041", order: 2510 }, "200651": { baseCost: 160, groupId: 20065, iconId: "20042", order: 2520 }, "200652": { baseCost: 160, groupId: 20065, iconId: "20041", order: 2530 }, "200662": { baseCost: 160, groupId: 20066, iconId: "20021", order: 2550 }, "200671": { baseCost: 160, groupId: 20067, iconId: "20012", order: 2560 }, "200672": { baseCost: 160, groupId: 20067, iconId: "20011", order: 2570 }, "200681": { baseCost: 160, groupId: 20068, iconId: "20012", order: 2580 }, "200682": { baseCost: 160, groupId: 20068, iconId: "20011", order: 2590 }, "200691": { baseCost: 160, groupId: 20069, iconId: "20022", order: 2600 }, "200692": { baseCost: 160, groupId: 20069, iconId: "20021", order: 2610 }, "200701": { baseCost: 160, groupId: 20070, iconId: "20042", order: 2620 }, "200702": { baseCost: 160, groupId: 20070, iconId: "20041", order: 2630 }, "200711": { baseCost: 160, groupId: 20071, iconId: "20022", order: 2640 }, "200712": { baseCost: 160, groupId: 20071, iconId: "20021", order: 2650 }, "200721": { baseCost: 160, groupId: 20072, iconId: "20012", order: 2660 }, "200722": { baseCost: 160, groupId: 20072, iconId: "20011", order: 2670 }, "200731": { baseCost: 160, groupId: 20073, iconId: "20012", order: 2680 }, "200732": { baseCost: 160, groupId: 20073, iconId: "20011", order: 2690 }, "200741": { baseCost: 160, groupId: 20074, iconId: "20022", order: 2700 }, "200742": { baseCost: 160, groupId: 20074, iconId: "20021", order: 2710 }, "200751": { baseCost: 160, groupId: 20075, iconId: "20012", order: 2720 }, "200752": { baseCost: 160, groupId: 20075, iconId: "20011", order: 2730 }, "200761": { baseCost: 160, groupId: 20076, iconId: "20022", order: 2740 }, "200762": { baseCost: 160, groupId: 20076, iconId: "20021", order: 2750 }, "200771": { baseCost: 140, groupId: 20077, iconId: "30051", order: 2760 }, "200772": { baseCost: 140, groupId: 20077, iconId: "30052", order: 2755 }, "200781": { baseCost: 140, groupId: 20078, iconId: "30051", order: 2770 }, "200791": { baseCost: 130, groupId: 20079, iconId: "30041", order: 2780 }, "200801": { baseCost: 130, groupId: 20080, iconId: "30041", order: 2790 }, "200811": { baseCost: 130, groupId: 20081, iconId: "30041", order: 2800 }, "200821": { baseCost: 130, groupId: 20082, iconId: "30041", order: 2810 }, "200831": { baseCost: 130, groupId: 20083, iconId: "30051", order: 2820 }, "200841": { baseCost: 130, groupId: 20084, iconId: "30051", order: 2830 }, "200851": { baseCost: 130, groupId: 20085, iconId: "30011", order: 2840 }, "200861": { baseCost: 130, groupId: 20086, iconId: "30051", order: 2850 }, "200871": { baseCost: 130, groupId: 20087, iconId: "30051", order: 2860 }, "200881": { baseCost: 130, groupId: 20088, iconId: "30011", order: 2870 }, "200891": { baseCost: 130, groupId: 20089, iconId: "30051", order: 2880 }, "200901": { baseCost: 130, groupId: 20090, iconId: "30051", order: 2890 }, "200911": { baseCost: 130, groupId: 20091, iconId: "30011", order: 2900 }, "200921": { baseCost: 130, groupId: 20092, iconId: "30051", order: 2910 }, "200931": { baseCost: 130, groupId: 20093, iconId: "30051", order: 2920 }, "200941": { baseCost: 130, groupId: 20094, iconId: "30011", order: 2930 }, "200951": { baseCost: 110, groupId: 20095, iconId: "10021", order: 1360 }, "200952": { baseCost: 90, groupId: 20095, iconId: "10021", order: 1370 }, "200953": { baseCost: 50, groupId: 20095, iconId: "10024", order: 1380 }, "200961": { baseCost: 110, groupId: 20096, iconId: "20011", order: 20010 }, "200962": { baseCost: 100, groupId: 20096, iconId: "20011", order: 20020 }, "200963": { baseCost: 150, groupId: 20096, iconId: "20012", order: 20005 }, "200971": { baseCost: 110, groupId: 20097, iconId: "20011", order: 20030 }, "200972": { baseCost: 100, groupId: 20097, iconId: "20011", order: 20040 }, "200973": { baseCost: 150, groupId: 20097, iconId: "20012", order: 20025 }, "200981": { baseCost: 170, groupId: 20098, iconId: "20012", order: 20050 }, "200982": { baseCost: 170, groupId: 20098, iconId: "20011", order: 20060 }, "200991": { baseCost: 160, groupId: 20099, iconId: "20042", order: 20070 }, "200992": { baseCost: 160, groupId: 20099, iconId: "20041", order: 20080 }, "201001": { baseCost: 140, groupId: 20100, iconId: "20052", order: 20090 }, "201002": { baseCost: 140, groupId: 20100, iconId: "20051", order: 20100 }, "201011": { baseCost: 170, groupId: 20101, iconId: "30012", order: 20110 }, "201012": { baseCost: 170, groupId: 20101, iconId: "30011", order: 20120 }, "201021": { baseCost: 170, groupId: 20102, iconId: "30052", order: 20130 }, "201022": { baseCost: 170, groupId: 20102, iconId: "30051", order: 20140 }, "201031": { baseCost: 110, groupId: 20103, iconId: "20011", order: 20150 }, "201032": { baseCost: 100, groupId: 20103, iconId: "20011", order: 20160 }, "201033": { baseCost: 150, groupId: 20103, iconId: "20012", order: 20145 }, "201041": { baseCost: 110, groupId: 20104, iconId: "20011", order: 20170 }, "201042": { baseCost: 100, groupId: 20104, iconId: "20011", order: 20180 }, "201043": { baseCost: 150, groupId: 20104, iconId: "20012", order: 20165 }, "201051": { baseCost: 160, groupId: 20105, iconId: "20012", order: 20190 }, "201052": { baseCost: 160, groupId: 20105, iconId: "20011", order: 20200 }, "201061": { baseCost: 160, groupId: 20106, iconId: "20042", order: 20210 }, "201062": { baseCost: 160, groupId: 20106, iconId: "20041", order: 20220 }, "201071": { baseCost: 120, groupId: 20107, iconId: "20012", order: 20230 }, "201072": { baseCost: 120, groupId: 20107, iconId: "20011", order: 20240 }, "201081": { baseCost: 160, groupId: 20108, iconId: "30012", order: 20250 }, "201082": { baseCost: 160, groupId: 20108, iconId: "30011", order: 20260 }, "201091": { baseCost: 160, groupId: 20109, iconId: "30022", order: 20270 }, "201092": { baseCost: 160, groupId: 20109, iconId: "30021", order: 20280 }, "201101": { baseCost: 110, groupId: 20110, iconId: "20011", order: 20300 }, "201102": { baseCost: 100, groupId: 20110, iconId: "20011", order: 20310 }, "201103": { baseCost: 150, groupId: 20110, iconId: "20012", order: 20290 }, "201111": { baseCost: 110, groupId: 20111, iconId: "20011", order: 20320 }, "201112": { baseCost: 100, groupId: 20111, iconId: "20011", order: 20330 }, "201113": { baseCost: 150, groupId: 20111, iconId: "20012", order: 20315 }, "201121": { baseCost: 110, groupId: 20112, iconId: "20092", order: 20340 }, "201122": { baseCost: 110, groupId: 20112, iconId: "20091", order: 20350 }, "201131": { baseCost: 140, groupId: 20113, iconId: "20052", order: 20360 }, "201132": { baseCost: 140, groupId: 20113, iconId: "20051", order: 20370 }, "201141": { baseCost: 160, groupId: 20114, iconId: "20022", order: 20380 }, "201142": { baseCost: 160, groupId: 20114, iconId: "20021", order: 20390 }, "201151": { baseCost: 160, groupId: 20115, iconId: "30012", order: 20400 }, "201152": { baseCost: 160, groupId: 20115, iconId: "30011", order: 20410 }, "201161": { baseCost: 160, groupId: 20116, iconId: "30052", order: 20420 }, "201162": { baseCost: 160, groupId: 20116, iconId: "30051", order: 20430 }, "201171": { baseCost: 110, groupId: 20117, iconId: "20011", order: 20440 }, "201172": { baseCost: 100, groupId: 20117, iconId: "20011", order: 20450 }, "201173": { baseCost: 150, groupId: 20117, iconId: "20012", order: 20435 }, "201181": { baseCost: 110, groupId: 20118, iconId: "20011", order: 20460 }, "201182": { baseCost: 100, groupId: 20118, iconId: "20011", order: 20470 }, "201191": { baseCost: 160, groupId: 20119, iconId: "20012", order: 20480 }, "201192": { baseCost: 160, groupId: 20119, iconId: "20011", order: 20490 }, "201201": { baseCost: 160, groupId: 20120, iconId: "20022", order: 20500 }, "201202": { baseCost: 160, groupId: 20120, iconId: "20021", order: 20510 }, "201211": { baseCost: 160, groupId: 20121, iconId: "20012", order: 20520 }, "201212": { baseCost: 160, groupId: 20121, iconId: "20011", order: 20530 }, "201221": { baseCost: 160, groupId: 20122, iconId: "30052", order: 20540 }, "201222": { baseCost: 160, groupId: 20122, iconId: "30051", order: 20550 }, "201231": { baseCost: 110, groupId: 20123, iconId: "30072", order: 20560 }, "201232": { baseCost: 110, groupId: 20123, iconId: "30071", order: 20570 }, "201241": { baseCost: 140, groupId: 20124, iconId: "20011", order: 20580 }, "201242": { baseCost: 130, groupId: 20124, iconId: "20011", order: 20590 }, "201243": { baseCost: 150, groupId: 20124, iconId: "20012", order: 20575 }, "201251": { baseCost: 140, groupId: 20125, iconId: "20011", order: 20600 }, "201252": { baseCost: 130, groupId: 20125, iconId: "20011", order: 20610 }, "201253": { baseCost: 150, groupId: 20125, iconId: "20012", order: 20595 }, "201261": { baseCost: 110, groupId: 20126, iconId: "20052", order: 20620 }, "201262": { baseCost: 110, groupId: 20126, iconId: "20051", order: 20630 }, "201271": { baseCost: 180, groupId: 20127, iconId: "20012", order: 20640 }, "201272": { baseCost: 180, groupId: 20127, iconId: "20011", order: 20650 }, "201281": { baseCost: 180, groupId: 20128, iconId: "20022", order: 20660 }, "201282": { baseCost: 180, groupId: 20128, iconId: "20021", order: 20670 }, "201291": { baseCost: 180, groupId: 20129, iconId: "20042", order: 20680 }, "201292": { baseCost: 180, groupId: 20129, iconId: "20041", order: 20690 }, "201302": { baseCost: 130, groupId: 20130, iconId: "30021", order: 20710 }, "201311": { baseCost: 140, groupId: 20131, iconId: "20011", order: 20720 }, "201312": { baseCost: 130, groupId: 20131, iconId: "20011", order: 20730 }, "201313": { baseCost: 150, groupId: 20131, iconId: "20012", order: 20715 }, "201321": { baseCost: 140, groupId: 20132, iconId: "20011", order: 20740 }, "201322": { baseCost: 130, groupId: 20132, iconId: "20011", order: 20750 }, "201323": { baseCost: 150, groupId: 20132, iconId: "20012", order: 20735 }, "201331": { baseCost: 120, groupId: 20133, iconId: "20042", order: 20760 }, "201332": { baseCost: 120, groupId: 20133, iconId: "20041", order: 20770 }, "201341": { baseCost: 120, groupId: 20134, iconId: "20042", order: 20780 }, "201342": { baseCost: 120, groupId: 20134, iconId: "20041", order: 20790 }, "201351": { baseCost: 180, groupId: 20135, iconId: "20022", order: 20800 }, "201352": { baseCost: 180, groupId: 20135, iconId: "20021", order: 20810 }, "201361": { baseCost: 120, groupId: 20136, iconId: "20042", order: 20820 }, "201362": { baseCost: 120, groupId: 20136, iconId: "20041", order: 20830 }, "201371": { baseCost: 110, groupId: 20137, iconId: "30072", order: 20840 }, "201372": { baseCost: 110, groupId: 20137, iconId: "30071", order: 20850 }, "201381": { baseCost: 140, groupId: 20138, iconId: "20011", order: 20860 }, "201382": { baseCost: 130, groupId: 20138, iconId: "20011", order: 20870 }, "201383": { baseCost: 150, groupId: 20138, iconId: "20012", order: 20855 }, "201391": { baseCost: 140, groupId: 20139, iconId: "20011", order: 20880 }, "201392": { baseCost: 130, groupId: 20139, iconId: "20011", order: 20890 }, "201393": { baseCost: 150, groupId: 20139, iconId: "20012", order: 20875 }, "201401": { baseCost: 120, groupId: 20140, iconId: "20042", order: 20900 }, "201402": { baseCost: 120, groupId: 20140, iconId: "20041", order: 20910 }, "201411": { baseCost: 120, groupId: 20141, iconId: "20012", order: 20920 }, "201412": { baseCost: 120, groupId: 20141, iconId: "20011", order: 20930 }, "201421": { baseCost: 180, groupId: 20142, iconId: "20022", order: 20940 }, "201422": { baseCost: 180, groupId: 20142, iconId: "20021", order: 20950 }, "201431": { baseCost: 120, groupId: 20143, iconId: "20092", order: 20960 }, "201432": { baseCost: 120, groupId: 20143, iconId: "20091", order: 20970 }, "201441": { baseCost: 180, groupId: 20144, iconId: "30052", order: 20980 }, "201442": { baseCost: 180, groupId: 20144, iconId: "30051", order: 20990 }, "201451": { baseCost: 140, groupId: 20145, iconId: "20011", order: 21e3 }, "201452": { baseCost: 130, groupId: 20145, iconId: "20011", order: 21010 }, "201453": { baseCost: 150, groupId: 20145, iconId: "20012", order: 20995 }, "201461": { baseCost: 140, groupId: 20146, iconId: "20011", order: 21020 }, "201462": { baseCost: 130, groupId: 20146, iconId: "20011", order: 21030 }, "201463": { baseCost: 150, groupId: 20146, iconId: "20012", order: 21015 }, "201471": { baseCost: 110, groupId: 20147, iconId: "20092", order: 21040 }, "201472": { baseCost: 110, groupId: 20147, iconId: "20091", order: 21050 }, "201481": { baseCost: 170, groupId: 20148, iconId: "20022", order: 21060 }, "201482": { baseCost: 170, groupId: 20148, iconId: "20021", order: 21070 }, "201491": { baseCost: 180, groupId: 20149, iconId: "20022", order: 21080 }, "201492": { baseCost: 180, groupId: 20149, iconId: "20021", order: 21090 }, "201501": { baseCost: 110, groupId: 20150, iconId: "20092", order: 21100 }, "201502": { baseCost: 110, groupId: 20150, iconId: "20091", order: 21110 }, "201511": { baseCost: 180, groupId: 20151, iconId: "30012", order: 21120 }, "201512": { baseCost: 180, groupId: 20151, iconId: "30011", order: 21130 }, "201521": { baseCost: 130, groupId: 20152, iconId: "10051", order: 21140 }, "201522": { baseCost: 110, groupId: 20152, iconId: "10051", order: 21150 }, "201531": { baseCost: 130, groupId: 20153, iconId: "10051", order: 21160 }, "201532": { baseCost: 110, groupId: 20153, iconId: "10051", order: 21170 }, "201541": { baseCost: 130, groupId: 20154, iconId: "10051", order: 21180 }, "201542": { baseCost: 110, groupId: 20154, iconId: "10051", order: 21190 }, "201551": { baseCost: 130, groupId: 20155, iconId: "10051", order: 21200 }, "201552": { baseCost: 110, groupId: 20155, iconId: "10051", order: 21210 }, "201561": { baseCost: 110, groupId: 20156, iconId: "10062", order: 21220 }, "201562": { baseCost: 110, groupId: 20156, iconId: "10061", order: 21230 }, "201571": { baseCost: 160, groupId: 20157, iconId: "20021", order: 21240 }, "201581": { baseCost: 160, groupId: 20158, iconId: "20041", order: 21250 }, "201582": { baseCost: 160, groupId: 20158, iconId: "20042", order: 21245 }, "201591": { baseCost: 160, groupId: 20159, iconId: "20011", order: 21270 }, "201592": { baseCost: 160, groupId: 20159, iconId: "20012", order: 21260 }, "201601": { baseCost: 100, groupId: 20160, iconId: "20041", order: 21280 }, "201602": { baseCost: 180, groupId: 20160, iconId: "20042", order: 21275 }, "201611": { baseCost: 100, groupId: 20161, iconId: "20011", order: 21300 }, "201612": { baseCost: 180, groupId: 20161, iconId: "20012", order: 21290 }, "201621": { baseCost: 100, groupId: 20162, iconId: "20021", order: 21310 }, "201631": { baseCost: 70, groupId: 20163, iconId: "10011", order: 21320 }, "201632": { baseCost: 150, groupId: 20163, iconId: "10012", order: 21315 }, "201641": { baseCost: 70, groupId: 20164, iconId: "10011", order: 21330 }, "201651": { baseCost: 160, groupId: 20165, iconId: "20011", order: 21340 }, "201652": { baseCost: 160, groupId: 20165, iconId: "20012", order: 21335 }, "201661": { baseCost: 160, groupId: 20166, iconId: "20011", order: 21350 }, "201662": { baseCost: 160, groupId: 20166, iconId: "20012", order: 21345 }, "201671": { baseCost: 180, groupId: 20167, iconId: "20012", order: 21360 }, "201672": { baseCost: 180, groupId: 20167, iconId: "20011", order: 21370 }, "201681": { baseCost: 140, groupId: 20168, iconId: "20052", order: 21380 }, "201682": { baseCost: 140, groupId: 20168, iconId: "20051", order: 21390 }, "201691": { baseCost: 180, groupId: 20169, iconId: "20022", order: 21400 }, "201692": { baseCost: 180, groupId: 20169, iconId: "20021", order: 21410 }, "201701": { baseCost: 160, groupId: 20170, iconId: "20012", order: 21420 }, "201702": { baseCost: 160, groupId: 20170, iconId: "20011", order: 21430 }, "201801": { baseCost: 50, groupId: 20180, iconId: "10014", order: 20 }, "201901": { baseCost: 180, groupId: 20190, iconId: "20042", order: 21440 }, "201902": { baseCost: 180, groupId: 20190, iconId: "20041", order: 21450 }, "202001": { baseCost: 200, groupId: 20200, iconId: "20022", order: 21460 }, "202002": { baseCost: 180, groupId: 20200, iconId: "20021", order: 21470 }, "202011": { baseCost: 160, groupId: 20201, iconId: "20012", order: 21480 }, "202012": { baseCost: 160, groupId: 20201, iconId: "20011", order: 21490 }, "202021": { baseCost: 180, groupId: 20202, iconId: "20012", order: 21500 }, "202022": { baseCost: 180, groupId: 20202, iconId: "20011", order: 21510 }, "202031": { baseCost: 120, groupId: 20203, iconId: "20012", order: 21520 }, "202032": { baseCost: 120, groupId: 20203, iconId: "20011", order: 21530 }, "202041": { baseCost: 160, groupId: 20204, iconId: "20012", order: 21540 }, "202042": { baseCost: 160, groupId: 20204, iconId: "20011", order: 21550 }, "202051": { baseCost: 200, groupId: 20205, iconId: "40012", order: 990 }, "202061": { baseCost: 360, groupId: 20206, iconId: "2010010", order: 21560 }, "202071": { baseCost: 170, groupId: 20207, iconId: "20022", order: 21570 }, "202072": { baseCost: 170, groupId: 20207, iconId: "20021", order: 21580 }, "202081": { baseCost: 160, groupId: 20208, iconId: "20042", order: 21590 }, "202082": { baseCost: 160, groupId: 20208, iconId: "20041", order: 21600 }, "202091": { baseCost: 160, groupId: 20209, iconId: "20012", order: 21610 }, "202092": { baseCost: 160, groupId: 20209, iconId: "20011", order: 21620 }, "202101": { baseCost: 160, groupId: 20210, iconId: "20012", order: 21630 }, "202102": { baseCost: 160, groupId: 20210, iconId: "20011", order: 21640 }, "202111": { baseCost: 160, groupId: 20211, iconId: "20012", order: 21650 }, "202112": { baseCost: 160, groupId: 20211, iconId: "20011", order: 21660 }, "202121": { baseCost: 180, groupId: 20212, iconId: "20012", order: 21670 }, "202122": { baseCost: 180, groupId: 20212, iconId: "20011", order: 21680 }, "202131": { baseCost: 160, groupId: 20213, iconId: "20012", order: 21690 }, "202132": { baseCost: 160, groupId: 20213, iconId: "20011", order: 21700 }, "202141": { baseCost: 0, groupId: 20214, iconId: "20064", order: 20 }, "202151": { baseCost: 160, groupId: 20215, iconId: "20012", order: 21710 }, "202152": { baseCost: 160, groupId: 20215, iconId: "20011", order: 21720 }, "202161": { baseCost: 160, groupId: 20216, iconId: "10051", order: 21730 }, "202171": { baseCost: 170, groupId: 20217, iconId: "20012", order: 21740 }, "202172": { baseCost: 170, groupId: 20217, iconId: "20011", order: 21750 }, "202181": { baseCost: 0, groupId: 20218, iconId: "10044", order: 20 }, "202191": { baseCost: 170, groupId: 20219, iconId: "20022", order: 21760 }, "202192": { baseCost: 170, groupId: 20219, iconId: "20021", order: 21770 }, "202201": { baseCost: 90, groupId: 20220, iconId: "10021", order: 1381 }, "202202": { baseCost: 70, groupId: 20220, iconId: "10021", order: 1382 }, "202203": { baseCost: 40, groupId: 20220, iconId: "10024", order: 1383 }, "202211": { baseCost: 90, groupId: 20221, iconId: "10021", order: 1384 }, "202212": { baseCost: 70, groupId: 20221, iconId: "10021", order: 1385 }, "202213": { baseCost: 40, groupId: 20221, iconId: "10024", order: 1386 }, "202221": { baseCost: 90, groupId: 20222, iconId: "10021", order: 1387 }, "202222": { baseCost: 70, groupId: 20222, iconId: "10021", order: 1388 }, "202223": { baseCost: 40, groupId: 20222, iconId: "10024", order: 1389 }, "202231": { baseCost: 90, groupId: 20223, iconId: "10051", order: 1881 }, "202232": { baseCost: 70, groupId: 20223, iconId: "10051", order: 1882 }, "202233": { baseCost: 40, groupId: 20223, iconId: "10054", order: 1883 }, "202241": { baseCost: 90, groupId: 20224, iconId: "10051", order: 1884 }, "202242": { baseCost: 70, groupId: 20224, iconId: "10051", order: 1885 }, "202243": { baseCost: 40, groupId: 20224, iconId: "10054", order: 1886 }, "202251": { baseCost: 90, groupId: 20225, iconId: "10011", order: 1887 }, "202252": { baseCost: 70, groupId: 20225, iconId: "10011", order: 1888 }, "202253": { baseCost: 40, groupId: 20225, iconId: "10014", order: 1889 }, "202261": { baseCost: 180, groupId: 20226, iconId: "20012", order: 21780 }, "202262": { baseCost: 180, groupId: 20226, iconId: "20011", order: 21790 }, "202271": { baseCost: 180, groupId: 20227, iconId: "20012", order: 21800 }, "202272": { baseCost: 180, groupId: 20227, iconId: "20011", order: 21810 }, "202281": { baseCost: 180, groupId: 20228, iconId: "20012", order: 21820 }, "202282": { baseCost: 180, groupId: 20228, iconId: "20011", order: 21830 }, "202291": { baseCost: 150, groupId: 20229, iconId: "20012", order: 21840 }, "202292": { baseCost: 150, groupId: 20229, iconId: "20011", order: 21850 }, "202301": { baseCost: 160, groupId: 20230, iconId: "20012", order: 21860 }, "202302": { baseCost: 160, groupId: 20230, iconId: "20011", order: 21870 }, "202303": { baseCost: 100, groupId: 20230, iconId: "20014", order: 21875 }, "202311": { baseCost: 180, groupId: 20231, iconId: "20042", order: 21880 }, "202312": { baseCost: 180, groupId: 20231, iconId: "20041", order: 21890 }, "202321": { baseCost: 180, groupId: 20232, iconId: "20042", order: 21900 }, "202322": { baseCost: 180, groupId: 20232, iconId: "20041", order: 21910 }, "202331": { baseCost: 120, groupId: 20233, iconId: "10012", order: 21920 }, "202332": { baseCost: 120, groupId: 20233, iconId: "10011", order: 21930 }, "202341": { baseCost: 130, groupId: 20234, iconId: "10012", order: 21940 }, "202342": { baseCost: 110, groupId: 20234, iconId: "10011", order: 21945 }, "202343": { baseCost: 90, groupId: 20234, iconId: "10011", order: 21950 }, "202344": { baseCost: 50, groupId: 20234, iconId: "10014", order: 21955 }, "202351": { baseCost: 120, groupId: 20235, iconId: "30012", order: 21960 }, "202352": { baseCost: 120, groupId: 20235, iconId: "30011", order: 21970 }, "202361": { baseCost: 180, groupId: 20236, iconId: "30012", order: 21980 }, "202362": { baseCost: 180, groupId: 20236, iconId: "30011", order: 21990 }, "202371": { baseCost: 180, groupId: 20237, iconId: "20012", order: 22e3 }, "202372": { baseCost: 180, groupId: 20237, iconId: "20011", order: 22010 }, "202381": { baseCost: 180, groupId: 20238, iconId: "20012", order: 22020 }, "202382": { baseCost: 180, groupId: 20238, iconId: "20011", order: 22030 }, "202391": { baseCost: 180, groupId: 20239, iconId: "20012", order: 22040 }, "202392": { baseCost: 180, groupId: 20239, iconId: "20011", order: 22050 }, "202401": { baseCost: 180, groupId: 20240, iconId: "20042", order: 22060 }, "202402": { baseCost: 180, groupId: 20240, iconId: "20041", order: 22070 }, "202411": { baseCost: 180, groupId: 20241, iconId: "20012", order: 22080 }, "202412": { baseCost: 180, groupId: 20241, iconId: "20011", order: 22090 }, "202421": { baseCost: 180, groupId: 20242, iconId: "20042", order: 22100 }, "202422": { baseCost: 180, groupId: 20242, iconId: "20041", order: 22110 }, "202431": { baseCost: 170, groupId: 20243, iconId: "20012", order: 22120 }, "202432": { baseCost: 170, groupId: 20243, iconId: "20011", order: 22130 }, "202441": { baseCost: 180, groupId: 20244, iconId: "10012", order: 22135 }, "202442": { baseCost: 180, groupId: 20244, iconId: "10011", order: 22136 }, "202451": { baseCost: 180, groupId: 20245, iconId: "20012", order: 22140 }, "202452": { baseCost: 180, groupId: 20245, iconId: "20011", order: 22150 }, "202461": { baseCost: 180, groupId: 20246, iconId: "20012", order: 22160 }, "202462": { baseCost: 180, groupId: 20246, iconId: "20011", order: 22170 }, "202471": { baseCost: 180, groupId: 20247, iconId: "20012", order: 22180 }, "202472": { baseCost: 180, groupId: 20247, iconId: "20011", order: 22190 }, "202481": { baseCost: 180, groupId: 20248, iconId: "20042", order: 22200 }, "202482": { baseCost: 180, groupId: 20248, iconId: "20041", order: 22210 }, "202491": { baseCost: 180, groupId: 20249, iconId: "20042", order: 22220 }, "202492": { baseCost: 180, groupId: 20249, iconId: "20041", order: 22230 }, "202501": { baseCost: 180, groupId: 20250, iconId: "20012", order: 22240 }, "202502": { baseCost: 180, groupId: 20250, iconId: "20011", order: 22250 }, "202511": { baseCost: 0, groupId: 20251, iconId: "10054", order: 20 }, "202521": { baseCost: 180, groupId: 20252, iconId: "20012", order: 22260 }, "202522": { baseCost: 180, groupId: 20252, iconId: "20011", order: 22270 }, "202531": { baseCost: 180, groupId: 20253, iconId: "20012", order: 22280 }, "202532": { baseCost: 180, groupId: 20253, iconId: "20011", order: 22290 }, "202541": { baseCost: 190, groupId: 20254, iconId: "20012", order: 22300 }, "202542": { baseCost: 190, groupId: 20254, iconId: "20011", order: 22310 }, "202551": { baseCost: 200, groupId: 20255, iconId: "20012", order: 22320 }, "202552": { baseCost: 200, groupId: 20255, iconId: "20011", order: 22330 }, "202561": { baseCost: 160, groupId: 20256, iconId: "20012", order: 22340 }, "202562": { baseCost: 160, groupId: 20256, iconId: "20011", order: 22350 }, "202571": { baseCost: 0, groupId: 20257, iconId: "20042", order: 20 }, "202581": { baseCost: 200, groupId: 20258, iconId: "20022", order: 22360 }, "202582": { baseCost: 200, groupId: 20258, iconId: "20021", order: 22370 }, "202591": { baseCost: 160, groupId: 20259, iconId: "20012", order: 22380 }, "202592": { baseCost: 160, groupId: 20259, iconId: "20011", order: 22390 }, "202601": { baseCost: 160, groupId: 20260, iconId: "20012", order: 22400 }, "202602": { baseCost: 160, groupId: 20260, iconId: "20011", order: 22410 }, "202612": { baseCost: 180, groupId: 20261, iconId: "20011", order: 22430 }, "202621": { baseCost: 180, groupId: 20262, iconId: "20012", order: 22440 }, "202622": { baseCost: 180, groupId: 20262, iconId: "20011", order: 22450 }, "202641": { baseCost: 180, groupId: 20264, iconId: "20012", order: 22480 }, "202642": { baseCost: 180, groupId: 20264, iconId: "20011", order: 22490 }, "202651": { baseCost: 180, groupId: 20265, iconId: "10012", order: 22500 }, "202652": { baseCost: 180, groupId: 20265, iconId: "10011", order: 22510 }, "202661": { baseCost: 180, groupId: 20266, iconId: "20012", order: 22520 }, "202662": { baseCost: 180, groupId: 20266, iconId: "20011", order: 22530 }, "202671": { baseCost: 160, groupId: 20267, iconId: "20042", order: 22540 }, "202672": { baseCost: 160, groupId: 20267, iconId: "20041", order: 22550 }, "202681": { baseCost: 200, groupId: 20268, iconId: "20012", order: 22560 }, "202682": { baseCost: 200, groupId: 20268, iconId: "20011", order: 22570 }, "202691": { baseCost: 120, groupId: 20269, iconId: "20042", order: 22580 }, "202692": { baseCost: 120, groupId: 20269, iconId: "20041", order: 22590 }, "202701": { baseCost: 120, groupId: 20270, iconId: "10012", order: 22600 }, "202702": { baseCost: 120, groupId: 20270, iconId: "10011", order: 22610 }, "202711": { baseCost: 180, groupId: 20271, iconId: "20042", order: 22620 }, "202712": { baseCost: 180, groupId: 20271, iconId: "20041", order: 22630 }, "202721": { baseCost: 180, groupId: 20272, iconId: "20012", order: 22640 }, "202722": { baseCost: 180, groupId: 20272, iconId: "20011", order: 22650 }, "202731": { baseCost: 90, groupId: 20273, iconId: "10021", order: 1391 }, "202732": { baseCost: 70, groupId: 20273, iconId: "10021", order: 1392 }, "202733": { baseCost: 40, groupId: 20273, iconId: "10024", order: 1393 }, "202734": { baseCost: 130, groupId: 20273, iconId: "10022", order: 1390 }, "202741": { baseCost: 180, groupId: 20274, iconId: "20012", order: 22660 }, "202742": { baseCost: 180, groupId: 20274, iconId: "20011", order: 22670 }, "202751": { baseCost: 160, groupId: 20275, iconId: "20012", order: 22680 }, "202752": { baseCost: 160, groupId: 20275, iconId: "20011", order: 22690 }, "202761": { baseCost: 180, groupId: 20276, iconId: "20012", order: 22700 }, "202762": { baseCost: 180, groupId: 20276, iconId: "20011", order: 22710 }, "202771": { baseCost: 160, groupId: 20277, iconId: "20042", order: 22720 }, "202772": { baseCost: 160, groupId: 20277, iconId: "20041", order: 22730 }, "202791": { baseCost: 160, groupId: 20279, iconId: "20012", order: 22760 }, "202792": { baseCost: 160, groupId: 20279, iconId: "20011", order: 22770 }, "202801": { baseCost: 160, groupId: 20280, iconId: "20012", order: 22780 }, "202802": { baseCost: 160, groupId: 20280, iconId: "20011", order: 22790 }, "202811": { baseCost: 160, groupId: 20281, iconId: "20012", order: 22800 }, "202812": { baseCost: 160, groupId: 20281, iconId: "20011", order: 22810 }, "202821": { baseCost: 170, groupId: 20282, iconId: "20042", order: 22820 }, "202822": { baseCost: 170, groupId: 20282, iconId: "20041", order: 22830 }, "202831": { baseCost: 200, groupId: 20283, iconId: "20012", order: 22840 }, "202832": { baseCost: 200, groupId: 20283, iconId: "20011", order: 22850 }, "202841": { baseCost: 200, groupId: 20284, iconId: "20022", order: 22860 }, "202842": { baseCost: 180, groupId: 20284, iconId: "20021", order: 22870 }, "202851": { baseCost: 160, groupId: 20285, iconId: "20012", order: 22880 }, "202852": { baseCost: 160, groupId: 20285, iconId: "20011", order: 22890 }, "202861": { baseCost: 120, groupId: 20286, iconId: "20042", order: 22900 }, "202862": { baseCost: 120, groupId: 20286, iconId: "20041", order: 22910 }, "202871": { baseCost: 180, groupId: 20287, iconId: "20042", order: 22920 }, "202872": { baseCost: 180, groupId: 20287, iconId: "20041", order: 22930 }, "202881": { baseCost: 180, groupId: 20288, iconId: "20012", order: 22940 }, "202882": { baseCost: 180, groupId: 20288, iconId: "20011", order: 22950 }, "202892": { baseCost: 180, groupId: 20289, iconId: "20021", order: 22970 }, "202901": { baseCost: 180, groupId: 20290, iconId: "20012", order: 22980 }, "202902": { baseCost: 180, groupId: 20290, iconId: "20011", order: 22990 }, "202912": { baseCost: 190, groupId: 20291, iconId: "20011", order: 23010 }, "202921": { baseCost: 160, groupId: 20292, iconId: "20012", order: 23020 }, "202922": { baseCost: 160, groupId: 20292, iconId: "20011", order: 23030 }, "202931": { baseCost: 180, groupId: 20293, iconId: "20012", order: 23040 }, "202932": { baseCost: 180, groupId: 20293, iconId: "20011", order: 23050 }, "202942": { baseCost: 160, groupId: 20294, iconId: "20011", order: 23070 }, "202951": { baseCost: 160, groupId: 20295, iconId: "20012", order: 23080 }, "202952": { baseCost: 160, groupId: 20295, iconId: "20011", order: 23090 }, "202961": { baseCost: 180, groupId: 20296, iconId: "20012", order: 23100 }, "202962": { baseCost: 180, groupId: 20296, iconId: "20011", order: 23110 }, "202971": { baseCost: 160, groupId: 20297, iconId: "20042", order: 23120 }, "202972": { baseCost: 160, groupId: 20297, iconId: "20041", order: 23130 }, "202981": { baseCost: 180, groupId: 20298, iconId: "20012", order: 23140 }, "202982": { baseCost: 180, groupId: 20298, iconId: "20011", order: 23150 }, "202991": { baseCost: 90, groupId: 20299, iconId: "10011", order: 1052 }, "202992": { baseCost: 70, groupId: 20299, iconId: "10011", order: 1053 }, "202993": { baseCost: 40, groupId: 20299, iconId: "10014", order: 1054 }, "203001": { baseCost: 180, groupId: 20300, iconId: "20012", order: 23160 }, "203002": { baseCost: 180, groupId: 20300, iconId: "20011", order: 23170 }, "203011": { baseCost: 140, groupId: 20301, iconId: "20012", order: 23180 }, "203012": { baseCost: 140, groupId: 20301, iconId: "20011", order: 23190 }, "203021": { baseCost: 140, groupId: 20302, iconId: "20012", order: 23200 }, "203022": { baseCost: 140, groupId: 20302, iconId: "20011", order: 23210 }, "203031": { baseCost: 180, groupId: 20303, iconId: "20012", order: 23220 }, "203032": { baseCost: 180, groupId: 20303, iconId: "20011", order: 23230 }, "203041": { baseCost: 180, groupId: 20304, iconId: "20012", order: 23240 }, "203042": { baseCost: 180, groupId: 20304, iconId: "20011", order: 23250 }, "203051": { baseCost: 160, groupId: 20305, iconId: "20012", order: 23260 }, "203052": { baseCost: 160, groupId: 20305, iconId: "20011", order: 23270 }, "203061": { baseCost: 120, groupId: 20306, iconId: "20011", order: 23280 }, "203071": { baseCost: 120, groupId: 20307, iconId: "20011", order: 23290 }, "203081": { baseCost: 170, groupId: 20308, iconId: "20042", order: 23300 }, "203082": { baseCost: 170, groupId: 20308, iconId: "20041", order: 23310 }, "203092": { baseCost: 110, groupId: 20309, iconId: "20011", order: 23330 }, "203093": { baseCost: 100, groupId: 20309, iconId: "20011", order: 23340 }, "203101": { baseCost: 150, groupId: 20310, iconId: "20012", order: 23350 }, "203102": { baseCost: 110, groupId: 20310, iconId: "20011", order: 23360 }, "203103": { baseCost: 100, groupId: 20310, iconId: "20011", order: 23370 }, "203111": { baseCost: 160, groupId: 20311, iconId: "20042", order: 23380 }, "203112": { baseCost: 160, groupId: 20311, iconId: "20041", order: 23390 }, "203121": { baseCost: 170, groupId: 20312, iconId: "20012", order: 23400 }, "203122": { baseCost: 170, groupId: 20312, iconId: "20011", order: 23410 }, "203131": { baseCost: 180, groupId: 20313, iconId: "20012", order: 23420 }, "203132": { baseCost: 180, groupId: 20313, iconId: "20011", order: 23430 }, "203141": { baseCost: 200, groupId: 20314, iconId: "20012", order: 23440 }, "203142": { baseCost: 200, groupId: 20314, iconId: "20011", order: 23450 }, "203151": { baseCost: 180, groupId: 20315, iconId: "20012", order: 23460 }, "203152": { baseCost: 180, groupId: 20315, iconId: "20011", order: 23470 }, "203161": { baseCost: 160, groupId: 20316, iconId: "20012", order: 23480 }, "203162": { baseCost: 160, groupId: 20316, iconId: "20011", order: 23490 }, "203171": { baseCost: 160, groupId: 20317, iconId: "20012", order: 23500 }, "203172": { baseCost: 160, groupId: 20317, iconId: "20011", order: 23510 }, "203181": { baseCost: 190, groupId: 20318, iconId: "20012", order: 23520 }, "203182": { baseCost: 190, groupId: 20318, iconId: "20011", order: 23530 }, "203201": { baseCost: 180, groupId: 20320, iconId: "20012", order: 23560 }, "203202": { baseCost: 180, groupId: 20320, iconId: "20011", order: 23570 }, "203212": { baseCost: 180, groupId: 20321, iconId: "20011", order: 23590 }, "203221": { baseCost: 160, groupId: 20322, iconId: "20012", order: 23600 }, "203222": { baseCost: 160, groupId: 20322, iconId: "20011", order: 23610 }, "203232": { baseCost: 180, groupId: 20323, iconId: "20011", order: 23630 }, "203241": { baseCost: 200, groupId: 20324, iconId: "20022", order: 23640 }, "203242": { baseCost: 200, groupId: 20324, iconId: "20021", order: 23650 }, "203251": { baseCost: 180, groupId: 20325, iconId: "20012", order: 23660 }, "203252": { baseCost: 180, groupId: 20325, iconId: "20011", order: 23670 }, "203262": { baseCost: 160, groupId: 20326, iconId: "20041", order: 23690 }, "203272": { baseCost: 180, groupId: 20327, iconId: "20011", order: 23710 }, "203281": { baseCost: 0, groupId: 20328, iconId: "10014", order: 20 }, "203301": { baseCost: 140, groupId: 20330, iconId: "20012", order: 23740 }, "203302": { baseCost: 140, groupId: 20330, iconId: "20011", order: 23750 }, "203311": { baseCost: 140, groupId: 20331, iconId: "20012", order: 23760 }, "203312": { baseCost: 140, groupId: 20331, iconId: "20011", order: 23770 }, "203322": { baseCost: 120, groupId: 20332, iconId: "20041", order: 23790 }, "203331": { baseCost: 160, groupId: 20333, iconId: "20012", order: 23800 }, "203332": { baseCost: 160, groupId: 20333, iconId: "20011", order: 23810 }, "203341": { baseCost: 170, groupId: 20334, iconId: "20012", order: 23820 }, "203342": { baseCost: 170, groupId: 20334, iconId: "20011", order: 23830 }, "203351": { baseCost: 160, groupId: 20335, iconId: "20012", order: 23840 }, "203352": { baseCost: 160, groupId: 20335, iconId: "20011", order: 23850 }, "203362": { baseCost: 180, groupId: 20336, iconId: "20011", order: 23870 }, "203371": { baseCost: 180, groupId: 20337, iconId: "20012", order: 23880 }, "203372": { baseCost: 180, groupId: 20337, iconId: "20011", order: 23890 }, "203381": { baseCost: 180, groupId: 20338, iconId: "20042", order: 23900 }, "203382": { baseCost: 180, groupId: 20338, iconId: "20041", order: 23910 }, "203391": { baseCost: 170, groupId: 20339, iconId: "20012", order: 23920 }, "203392": { baseCost: 170, groupId: 20339, iconId: "20011", order: 23930 }, "203402": { baseCost: 170, groupId: 20340, iconId: "20041", order: 23950 }, "203411": { baseCost: 170, groupId: 20341, iconId: "20012", order: 23960 }, "203412": { baseCost: 170, groupId: 20341, iconId: "20011", order: 23970 }, "203421": { baseCost: 180, groupId: 20342, iconId: "20012", order: 23980 }, "203422": { baseCost: 180, groupId: 20342, iconId: "20011", order: 23990 }, "203431": { baseCost: 170, groupId: 20343, iconId: "20012", order: 24e3 }, "203432": { baseCost: 170, groupId: 20343, iconId: "20011", order: 24010 }, "203442": { baseCost: 170, groupId: 20344, iconId: "20041", order: 24030 }, "203452": { baseCost: 170, groupId: 20345, iconId: "20041", order: 24050 }, "203461": { baseCost: 180, groupId: 20346, iconId: "20012", order: 24060 }, "203462": { baseCost: 180, groupId: 20346, iconId: "20011", order: 24070 }, "203471": { baseCost: 180, groupId: 20347, iconId: "20012", order: 24080 }, "203472": { baseCost: 180, groupId: 20347, iconId: "20011", order: 24090 }, "203481": { baseCost: 170, groupId: 20348, iconId: "20042", order: 24100 }, "203482": { baseCost: 170, groupId: 20348, iconId: "20041", order: 24110 }, "203491": { baseCost: 170, groupId: 20349, iconId: "20042", order: 24120 }, "203492": { baseCost: 170, groupId: 20349, iconId: "20041", order: 24130 }, "203501": { baseCost: 200, groupId: 20350, iconId: "20012", order: 24140 }, "203502": { baseCost: 200, groupId: 20350, iconId: "20011", order: 24150 }, "203511": { baseCost: 200, groupId: 20351, iconId: "20012", order: 24160 }, "203512": { baseCost: 200, groupId: 20351, iconId: "20011", order: 24170 }, "203522": { baseCost: 170, groupId: 20352, iconId: "20041", order: 24190 }, "203532": { baseCost: 120, groupId: 20353, iconId: "20011", order: 24210 }, "203541": { baseCost: 160, groupId: 20354, iconId: "20042", order: 24220 }, "203542": { baseCost: 160, groupId: 20354, iconId: "20041", order: 24230 }, "203552": { baseCost: 160, groupId: 20355, iconId: "20011", order: 24250 }, "203562": { baseCost: 170, groupId: 20356, iconId: "20011", order: 24270 }, "210011": { baseCost: 200, groupId: 21001, iconId: "20102", order: 31e3 }, "210012": { baseCost: 200, groupId: 21001, iconId: "20101", order: 31001 }, "210021": { baseCost: 200, groupId: 21002, iconId: "20112", order: 31002 }, "210022": { baseCost: 200, groupId: 21002, iconId: "20111", order: 31003 }, "210031": { baseCost: 200, groupId: 21003, iconId: "20122", order: 31004 }, "210032": { baseCost: 200, groupId: 21003, iconId: "20121", order: 31005 }, "210041": { baseCost: 200, groupId: 21004, iconId: "20102", order: 31006 }, "210042": { baseCost: 200, groupId: 21004, iconId: "20101", order: 31007 }, "210051": { baseCost: 200, groupId: 21005, iconId: "20132", order: 31008 }, "210052": { baseCost: 200, groupId: 21005, iconId: "20131", order: 31009 }, "210061": { baseCost: 200, groupId: 21006, iconId: "20142", order: 31010 }, "210062": { baseCost: 200, groupId: 21006, iconId: "20141", order: 31011 }, "210071": { baseCost: 200, groupId: 21007, iconId: "20152", order: 31012 }, "210072": { baseCost: 200, groupId: 21007, iconId: "20151", order: 31013 }, "210081": { baseCost: 200, groupId: 21008, iconId: "20162", order: 31014 }, "210082": { baseCost: 200, groupId: 21008, iconId: "20161", order: 31015 }, "210091": { baseCost: 150, groupId: 21009, iconId: "20161", order: 31016 }, "210101": { baseCost: 150, groupId: 21010, iconId: "20161", order: 31017 }, "210111": { baseCost: 150, groupId: 21011, iconId: "20161", order: 31018 }, "210121": { baseCost: 150, groupId: 21012, iconId: "20171", order: 31019 }, "210131": { baseCost: 150, groupId: 21013, iconId: "20161", order: 31020 }, "210141": { baseCost: 150, groupId: 21014, iconId: "20181", order: 31021 }, "210261": { baseCost: 200, groupId: 21026, iconId: "20192", order: 31022 }, "210262": { baseCost: 200, groupId: 21026, iconId: "20191", order: 31023 }, "210271": { baseCost: 200, groupId: 21027, iconId: "20202", order: 31024 }, "210272": { baseCost: 200, groupId: 21027, iconId: "20201", order: 31025 }, "210281": { baseCost: 200, groupId: 21028, iconId: "20192", order: 31026 }, "210282": { baseCost: 200, groupId: 21028, iconId: "20191", order: 31027 }, "210291": { baseCost: 200, groupId: 21029, iconId: "20212", order: 31028 }, "210292": { baseCost: 200, groupId: 21029, iconId: "20211", order: 31029 }, "210301": { baseCost: 200, groupId: 21030, iconId: "20222", order: 31030 }, "210302": { baseCost: 200, groupId: 21030, iconId: "20221", order: 31031 }, "210311": { baseCost: 170, groupId: 21031, iconId: "20231", order: 31032 }, "210321": { baseCost: 200, groupId: 21032, iconId: "20242", order: 31033 }, "210322": { baseCost: 200, groupId: 21032, iconId: "20241", order: 31034 }, "210331": { baseCost: 170, groupId: 21033, iconId: "20251", order: 31035 }, "210341": { baseCost: 200, groupId: 21034, iconId: "20262", order: 31036 }, "210342": { baseCost: 200, groupId: 21034, iconId: "20261", order: 31037 }, "210351": { baseCost: 200, groupId: 21035, iconId: "20292", order: 31038 }, "210352": { baseCost: 200, groupId: 21035, iconId: "20291", order: 31039 }, "300131": { baseCost: 0, groupId: 30013, iconId: "20013", order: 10 }, "300141": { baseCost: 0, groupId: 30014, iconId: "20013", order: 10 }, "407011": { baseCost: 0, groupId: 40701, iconId: "20226", order: 22780 }, "407021": { baseCost: 0, groupId: 40702, iconId: "20226", order: 2150 }, "407031": { baseCost: 0, groupId: 40703, iconId: "20226", order: 2250 }, "407041": { baseCost: 0, groupId: 40704, iconId: "20226", order: 22240 }, "407051": { baseCost: 0, groupId: 40705, iconId: "20226", order: 21650 }, "407061": { baseCost: 0, groupId: 40706, iconId: "20226", order: 2660 }, "407071": { baseCost: 0, groupId: 40707, iconId: "20226", order: 21630 }, "408011": { baseCost: 0, groupId: 40801, iconId: "20246", order: 21260 }, "408021": { baseCost: 0, groupId: 40802, iconId: "20256", order: 22060 }, "408031": { baseCost: 0, groupId: 40803, iconId: "20246", order: 22760 }, "408041": { baseCost: 0, groupId: 40804, iconId: "20246", order: 20025 }, "408051": { baseCost: 0, groupId: 40805, iconId: "20256", order: 2520 }, "408061": { baseCost: 0, groupId: 40806, iconId: "20256", order: 1920 }, "409011": { baseCost: 0, groupId: 40901, iconId: "20276", order: 22200 }, "409021": { baseCost: 0, groupId: 40902, iconId: "20286", order: 23640 }, "409031": { baseCost: 0, groupId: 40903, iconId: "20266", order: 23440 }, "409041": { baseCost: 0, groupId: 40904, iconId: "20266", order: 2250 }, "409051": { baseCost: 0, groupId: 40905, iconId: "20266", order: 20640 }, "409061": { baseCost: 0, groupId: 40906, iconId: "20266", order: 1890 }, "410011": { baseCost: 0, groupId: 41001, iconId: "20296", order: 24140 }, "410021": { baseCost: 0, groupId: 41002, iconId: "20296", order: 1980 }, "410031": { baseCost: 0, groupId: 41003, iconId: "20296", order: 22760 }, "410041": { baseCost: 0, groupId: 41004, iconId: "20306", order: 2280 }, "410051": { baseCost: 0, groupId: 41005, iconId: "20306", order: 22620 }, "410061": { baseCost: 0, groupId: 41006, iconId: "20296", order: 22980 }, "900011": { baseCost: 200, groupId: 90001, iconId: "20011", order: 30 }, "900021": { baseCost: 200, groupId: 90002, iconId: "20011", order: 30 }, "900031": { baseCost: 200, groupId: 90003, iconId: "20011", order: 30 }, "900041": { baseCost: 200, groupId: 90004, iconId: "20041", order: 30 }, "900051": { baseCost: 200, groupId: 90005, iconId: "20011", order: 30 }, "900061": { baseCost: 200, groupId: 90006, iconId: "20011", order: 30 }, "900071": { baseCost: 200, groupId: 90007, iconId: "20011", order: 30 }, "900081": { baseCost: 200, groupId: 90008, iconId: "20011", order: 30 }, "900091": { baseCost: 200, groupId: 90009, iconId: "20011", order: 30 }, "900101": { baseCost: 200, groupId: 90010, iconId: "20041", order: 30 }, "900111": { baseCost: 200, groupId: 90011, iconId: "20011", order: 30 }, "900121": { baseCost: 200, groupId: 90012, iconId: "20011", order: 30 }, "900131": { baseCost: 200, groupId: 90013, iconId: "20011", order: 30 }, "900141": { baseCost: 200, groupId: 90014, iconId: "20011", order: 30 }, "900151": { baseCost: 200, groupId: 90015, iconId: "20011", order: 30 }, "900161": { baseCost: 200, groupId: 90016, iconId: "20011", order: 30 }, "900171": { baseCost: 200, groupId: 90017, iconId: "20011", order: 30 }, "900181": { baseCost: 200, groupId: 90018, iconId: "20011", order: 30 }, "900191": { baseCost: 200, groupId: 90019, iconId: "20011", order: 30 }, "900201": { baseCost: 200, groupId: 90020, iconId: "20041", order: 30 }, "900211": { baseCost: 200, groupId: 90021, iconId: "20011", order: 30 }, "900221": { baseCost: 200, groupId: 90022, iconId: "20011", order: 30 }, "900231": { baseCost: 200, groupId: 90023, iconId: "20011", order: 30 }, "900241": { baseCost: 200, groupId: 90024, iconId: "20011", order: 30 }, "900251": { baseCost: 200, groupId: 90025, iconId: "20011", order: 30 }, "900261": { baseCost: 200, groupId: 90026, iconId: "20011", order: 30 }, "900271": { baseCost: 200, groupId: 90027, iconId: "20041", order: 30 }, "900281": { baseCost: 200, groupId: 90028, iconId: "20011", order: 30 }, "900291": { baseCost: 200, groupId: 90029, iconId: "20011", order: 30 }, "900301": { baseCost: 200, groupId: 90030, iconId: "20011", order: 30 }, "900311": { baseCost: 200, groupId: 90031, iconId: "20011", order: 30 }, "900321": { baseCost: 200, groupId: 90032, iconId: "20021", order: 30 }, "900331": { baseCost: 200, groupId: 90033, iconId: "20011", order: 30 }, "900341": { baseCost: 200, groupId: 90034, iconId: "20011", order: 30 }, "900351": { baseCost: 200, groupId: 90035, iconId: "20011", order: 30 }, "900361": { baseCost: 200, groupId: 90036, iconId: "20011", order: 30 }, "900371": { baseCost: 200, groupId: 90037, iconId: "20011", order: 30 }, "900381": { baseCost: 200, groupId: 90038, iconId: "20011", order: 30 }, "900391": { baseCost: 200, groupId: 90039, iconId: "20011", order: 30 }, "900401": { baseCost: 200, groupId: 90040, iconId: "20011", order: 30 }, "900411": { baseCost: 200, groupId: 90041, iconId: "20011", order: 30 }, "900421": { baseCost: 200, groupId: 90042, iconId: "20011", order: 30 }, "900431": { baseCost: 200, groupId: 90043, iconId: "20011", order: 30 }, "900441": { baseCost: 200, groupId: 90044, iconId: "20011", order: 30 }, "900451": { baseCost: 200, groupId: 90045, iconId: "20021", order: 30 }, "900461": { baseCost: 200, groupId: 90046, iconId: "20011", order: 30 }, "900471": { baseCost: 200, groupId: 90047, iconId: "20011", order: 30 }, "900481": { baseCost: 200, groupId: 90048, iconId: "20011", order: 30 }, "900491": { baseCost: 200, groupId: 90049, iconId: "20011", order: 30 }, "900501": { baseCost: 200, groupId: 90050, iconId: "20011", order: 30 }, "900511": { baseCost: 200, groupId: 90051, iconId: "20041", order: 30 }, "900521": { baseCost: 200, groupId: 90052, iconId: "20021", order: 30 }, "900531": { baseCost: 200, groupId: 90053, iconId: "20041", order: 30 }, "900541": { baseCost: 200, groupId: 90054, iconId: "20011", order: 30 }, "900551": { baseCost: 200, groupId: 90055, iconId: "20011", order: 30 }, "900561": { baseCost: 200, groupId: 90056, iconId: "20011", order: 30 }, "900571": { baseCost: 200, groupId: 90057, iconId: "20011", order: 30 }, "900581": { baseCost: 200, groupId: 90058, iconId: "20011", order: 30 }, "900591": { baseCost: 200, groupId: 90059, iconId: "20041", order: 30 }, "900601": { baseCost: 200, groupId: 90060, iconId: "20011", order: 30 }, "900611": { baseCost: 200, groupId: 90061, iconId: "20011", order: 30 }, "900621": { baseCost: 200, groupId: 90062, iconId: "20021", order: 30 }, "900631": { baseCost: 200, groupId: 90063, iconId: "20011", order: 30 }, "900641": { baseCost: 200, groupId: 90064, iconId: "20021", order: 30 }, "900651": { baseCost: 200, groupId: 90065, iconId: "20011", order: 30 }, "900661": { baseCost: 200, groupId: 90066, iconId: "20011", order: 30 }, "900671": { baseCost: 200, groupId: 90067, iconId: "20011", order: 30 }, "900681": { baseCost: 200, groupId: 90068, iconId: "20011", order: 30 }, "900691": { baseCost: 200, groupId: 90069, iconId: "20011", order: 30 }, "900701": { baseCost: 200, groupId: 90070, iconId: "20041", order: 30 }, "900711": { baseCost: 200, groupId: 90071, iconId: "20011", order: 30 }, "900721": { baseCost: 200, groupId: 90072, iconId: "20011", order: 30 }, "900731": { baseCost: 200, groupId: 90073, iconId: "20011", order: 30 }, "900741": { baseCost: 200, groupId: 90074, iconId: "20011", order: 30 }, "900761": { baseCost: 200, groupId: 90076, iconId: "20011", order: 30 }, "900771": { baseCost: 200, groupId: 90077, iconId: "20011", order: 30 }, "900781": { baseCost: 200, groupId: 90078, iconId: "20041", order: 30 }, "900791": { baseCost: 200, groupId: 90079, iconId: "20011", order: 30 }, "900801": { baseCost: 200, groupId: 90080, iconId: "20011", order: 30 }, "900821": { baseCost: 200, groupId: 90082, iconId: "20011", order: 30 }, "900831": { baseCost: 200, groupId: 90083, iconId: "20011", order: 30 }, "900841": { baseCost: 200, groupId: 90084, iconId: "20011", order: 30 }, "900851": { baseCost: 200, groupId: 90085, iconId: "20011", order: 30 }, "900861": { baseCost: 200, groupId: 90086, iconId: "20011", order: 30 }, "900871": { baseCost: 200, groupId: 90087, iconId: "20011", order: 30 }, "900881": { baseCost: 200, groupId: 90088, iconId: "20011", order: 30 }, "900891": { baseCost: 200, groupId: 90089, iconId: "20011", order: 30 }, "900911": { baseCost: 200, groupId: 90091, iconId: "20011", order: 30 }, "900931": { baseCost: 200, groupId: 90093, iconId: "20011", order: 30 }, "900941": { baseCost: 200, groupId: 90094, iconId: "20011", order: 30 }, "900981": { baseCost: 200, groupId: 90098, iconId: "20011", order: 30 }, "900991": { baseCost: 200, groupId: 90099, iconId: "20041", order: 30 }, "901001": { baseCost: 200, groupId: 90100, iconId: "20011", order: 30 }, "901021": { baseCost: 200, groupId: 90102, iconId: "20021", order: 30 }, "901041": { baseCost: 200, groupId: 90104, iconId: "20011", order: 30 }, "901051": { baseCost: 200, groupId: 90105, iconId: "20011", order: 30 }, "901061": { baseCost: 200, groupId: 90106, iconId: "20011", order: 30 }, "901071": { baseCost: 200, groupId: 90107, iconId: "20011", order: 30 }, "901081": { baseCost: 200, groupId: 90108, iconId: "20011", order: 30 }, "901091": { baseCost: 200, groupId: 90109, iconId: "20011", order: 30 }, "901101": { baseCost: 200, groupId: 90110, iconId: "20011", order: 30 }, "901111": { baseCost: 200, groupId: 90111, iconId: "20011", order: 30 }, "901151": { baseCost: 200, groupId: 90115, iconId: "20011", order: 30 }, "901161": { baseCost: 200, groupId: 90116, iconId: "20011", order: 30 }, "901171": { baseCost: 200, groupId: 90117, iconId: "20011", order: 30 }, "901191": { baseCost: 200, groupId: 90119, iconId: "20011", order: 30 }, "901201": { baseCost: 200, groupId: 90120, iconId: "20011", order: 30 }, "901211": { baseCost: 200, groupId: 90121, iconId: "20011", order: 30 }, "901241": { baseCost: 200, groupId: 90124, iconId: "20011", order: 30 }, "901311": { baseCost: 200, groupId: 90131, iconId: "20011", order: 30 }, "910011": { baseCost: 200, groupId: 91001, iconId: "20021", order: 30 }, "910021": { baseCost: 200, groupId: 91002, iconId: "20011", order: 30 }, "910031": { baseCost: 200, groupId: 91003, iconId: "20011", order: 30 }, "910041": { baseCost: 200, groupId: 91004, iconId: "20011", order: 30 }, "910051": { baseCost: 200, groupId: 91005, iconId: "20011", order: 30 }, "910061": { baseCost: 200, groupId: 91006, iconId: "20011", order: 30 }, "910071": { baseCost: 200, groupId: 91007, iconId: "20011", order: 30 }, "910081": { baseCost: 200, groupId: 91008, iconId: "20011", order: 30 }, "910091": { baseCost: 200, groupId: 91009, iconId: "20011", order: 30 }, "910101": { baseCost: 200, groupId: 91010, iconId: "20011", order: 30 }, "910111": { baseCost: 200, groupId: 91011, iconId: "20021", order: 30 }, "910121": { baseCost: 200, groupId: 91012, iconId: "20011", order: 30 }, "910131": { baseCost: 200, groupId: 91013, iconId: "20011", order: 30 }, "910141": { baseCost: 200, groupId: 91014, iconId: "20041", order: 30 }, "910151": { baseCost: 200, groupId: 91015, iconId: "20011", order: 30 }, "910161": { baseCost: 200, groupId: 91016, iconId: "20011", order: 30 }, "910171": { baseCost: 200, groupId: 91017, iconId: "20011", order: 30 }, "910181": { baseCost: 200, groupId: 91018, iconId: "20011", order: 30 }, "910191": { baseCost: 200, groupId: 91019, iconId: "20011", order: 30 }, "910201": { baseCost: 200, groupId: 91020, iconId: "20011", order: 30 }, "910211": { baseCost: 200, groupId: 91021, iconId: "20011", order: 30 }, "910221": { baseCost: 200, groupId: 91022, iconId: "20011", order: 30 }, "910231": { baseCost: 200, groupId: 91023, iconId: "20011", order: 30 }, "910241": { baseCost: 200, groupId: 91024, iconId: "20011", order: 30 }, "910251": { baseCost: 200, groupId: 91025, iconId: "20011", order: 30 }, "910261": { baseCost: 200, groupId: 91026, iconId: "20011", order: 30 }, "910271": { baseCost: 200, groupId: 91027, iconId: "20011", order: 30 }, "910291": { baseCost: 200, groupId: 91029, iconId: "20011", order: 30 }, "910301": { baseCost: 200, groupId: 91030, iconId: "20021", order: 30 }, "910311": { baseCost: 200, groupId: 91031, iconId: "20011", order: 30 }, "910321": { baseCost: 200, groupId: 91032, iconId: "20011", order: 30 }, "910331": { baseCost: 200, groupId: 91033, iconId: "20041", order: 30 }, "910341": { baseCost: 200, groupId: 91034, iconId: "20011", order: 30 }, "910351": { baseCost: 200, groupId: 91035, iconId: "20011", order: 30 }, "910361": { baseCost: 200, groupId: 91036, iconId: "20011", order: 30 }, "910371": { baseCost: 200, groupId: 91037, iconId: "20011", order: 30 }, "910381": { baseCost: 200, groupId: 91038, iconId: "20011", order: 30 }, "910391": { baseCost: 200, groupId: 91039, iconId: "20011", order: 30 }, "910401": { baseCost: 200, groupId: 91040, iconId: "20011", order: 30 }, "910411": { baseCost: 200, groupId: 91041, iconId: "20041", order: 30 }, "910421": { baseCost: 200, groupId: 91042, iconId: "20011", order: 30 }, "910441": { baseCost: 200, groupId: 91044, iconId: "20011", order: 30 }, "910451": { baseCost: 200, groupId: 91045, iconId: "20011", order: 30 }, "910461": { baseCost: 200, groupId: 91046, iconId: "20011", order: 30 }, "910471": { baseCost: 200, groupId: 91047, iconId: "20011", order: 30 }, "910481": { baseCost: 200, groupId: 91048, iconId: "20011", order: 30 }, "910501": { baseCost: 200, groupId: 91050, iconId: "20011", order: 30 }, "910511": { baseCost: 200, groupId: 91051, iconId: "20011", order: 30 }, "910521": { baseCost: 200, groupId: 91052, iconId: "20011", order: 30 }, "910531": { baseCost: 200, groupId: 91053, iconId: "20011", order: 30 }, "910561": { baseCost: 200, groupId: 91056, iconId: "20011", order: 30 }, "910571": { baseCost: 200, groupId: 91057, iconId: "20011", order: 30 }, "910581": { baseCost: 200, groupId: 91058, iconId: "20011", order: 30 }, "910591": { baseCost: 200, groupId: 91059, iconId: "20011", order: 30 }, "910601": { baseCost: 200, groupId: 91060, iconId: "20011", order: 30 }, "910611": { baseCost: 200, groupId: 91061, iconId: "20041", order: 30 }, "910621": { baseCost: 200, groupId: 91062, iconId: "20011", order: 30 }, "910641": { baseCost: 200, groupId: 91064, iconId: "20011", order: 30 }, "910651": { baseCost: 200, groupId: 91065, iconId: "20011", order: 30 }, "910671": { baseCost: 200, groupId: 91067, iconId: "20011", order: 30 }, "910681": { baseCost: 200, groupId: 91068, iconId: "20011", order: 30 }, "910691": { baseCost: 200, groupId: 91069, iconId: "20041", order: 30 }, "910711": { baseCost: 200, groupId: 91071, iconId: "20011", order: 30 }, "910721": { baseCost: 200, groupId: 91072, iconId: "20011", order: 30 }, "910741": { baseCost: 200, groupId: 91074, iconId: "20021", order: 30 }, "910771": { baseCost: 200, groupId: 91077, iconId: "20011", order: 30 }, "910781": { baseCost: 200, groupId: 91078, iconId: "20011", order: 30 }, "910831": { baseCost: 200, groupId: 91083, iconId: "20011", order: 30 }, "910851": { baseCost: 200, groupId: 91085, iconId: "20011", order: 30 }, "910871": { baseCost: 200, groupId: 91087, iconId: "20011", order: 30 }, "910991": { baseCost: 200, groupId: 91099, iconId: "20011", order: 30 }, "911041": { baseCost: 200, groupId: 91104, iconId: "20011", order: 30 }, "911051": { baseCost: 200, groupId: 91105, iconId: "20011", order: 30 }, "920011": { baseCost: 200, groupId: 92001, iconId: "20011", order: 30 }, "920031": { baseCost: 200, groupId: 92003, iconId: "20011", order: 30 }, "920041": { baseCost: 200, groupId: 92004, iconId: "20011", order: 30 }, "920071": { baseCost: 200, groupId: 92007, iconId: "20011", order: 30 }, "920111": { baseCost: 200, groupId: 92011, iconId: "20011", order: 30 }, "920131": { baseCost: 200, groupId: 92013, iconId: "20011", order: 30 }, "920231": { baseCost: 200, groupId: 92023, iconId: "20011", order: 30 }, "920241": { baseCost: 200, groupId: 92024, iconId: "20021", order: 30 }, "920301": { baseCost: 200, groupId: 92030, iconId: "20011", order: 30 }, "920321": { baseCost: 200, groupId: 92032, iconId: "20011", order: 30 }, "920351": { baseCost: 200, groupId: 92035, iconId: "20011", order: 30 }, "920371": { baseCost: 200, groupId: 92037, iconId: "20011", order: 30 }, "920451": { baseCost: 200, groupId: 92045, iconId: "20021", order: 30 }, "920501": { baseCost: 200, groupId: 92050, iconId: "20011", order: 30 }, "920601": { baseCost: 200, groupId: 92060, iconId: "20011", order: 30 }, "920611": { baseCost: 200, groupId: 92061, iconId: "20011", order: 30 }, "920671": { baseCost: 200, groupId: 92067, iconId: "20011", order: 30 }, "920681": { baseCost: 200, groupId: 92068, iconId: "20011", order: 30 } };

  // ../components/SkillList.tsx
  function skillmeta(id3) {
    return skill_meta_default[id3.split("-")[0]];
  }
  var Parser = getParser(mockConditions);
  var STRINGS_ja2 = Object.freeze({
    "skillfilters": Object.freeze({
      "white": "\u767D\u30B9\u30AD\u30EB",
      "gold": "\u91D1\u30B9\u30AD\u30EB",
      "pink": "\u9032\u5316\u30B9\u30AD\u30EB",
      "unique": "\u56FA\u6709\u30B9\u30AD\u30EB",
      "inherit": "\u7D99\u627F\u3057\u305F\u56FA\u6709\u30B9\u30AD\u30EB",
      "nige": "\u9003\u3052",
      "senkou": "\u5148\u884C",
      "sasi": "\u5DEE\u3057",
      "oikomi": "\u8FFD\u8FBC",
      "short": "\u77ED\u8DDD\u96E2",
      "mile": "\u30DE\u30A4\u30EB",
      "medium": "\u4E2D\u8DDD\u96E2",
      "long": "\u9577\u8DDD\u96E2",
      "turf": "\u829D",
      "dirt": "\u30C0\u30FC\u30C8",
      "phase0": "\u5E8F\u76E4",
      "phase1": "\u4E2D\u76E4",
      "phase2": "\u7D42\u76E4",
      "phase3": "\u30E9\u30B9\u30C8\u30B9\u30D1\u30FC\u30C8",
      "finalcorner": "\u6700\u7D42\u30B3\u30FC\u30CA\u30FC",
      "finalstraight": "\u6700\u7D42\u76F4\u7DDA"
    }),
    "skilleffecttypes": Object.freeze({
      "1": "\u30B9\u30D4\u30FC\u30C9\u30A2\u30C3\u30D7",
      "2": "\u30B9\u30BF\u30DF\u30CA\u30A2\u30C3\u30D7",
      "3": "\u30D1\u30EF\u30FC\u30A2\u30C3\u30D7",
      "4": "\u6839\u6027\u30A2\u30C3\u30D7",
      "5": "\u8CE2\u3055\u30A2\u30C3\u30D7",
      "9": "\u4F53\u529B\u56DE\u5FA9",
      "21": "\u73FE\u5728\u901F\u5EA6\uFF08\u6E1B\u901F\u306A\u3057\uFF09",
      "22": "\u73FE\u5728\u901F\u5EA6",
      "27": "\u76EE\u6A19\u901F\u5EA6",
      "28": "\u30EC\u30FC\u30F3\u79FB\u52D5\u901F\u5EA6",
      "31": "\u52A0\u901F",
      "37": "Activate random gold skill"
    }),
    "skilldetails": Object.freeze({
      "accel": "{{n}}m/s\xB2",
      "basinn": "{{n}}\u30D0\u8EAB",
      "conditions": "\u767A\u52D5\u6761\u4EF6",
      "distance_type": Object.freeze(["", "\u77ED\u8DDD\u96E2", "\u30DE\u30A4\u30EB", "\u4E2D\u8DDD\u96E2", "\u9577\u8DDD\u96E2"]),
      "baseduration": "\u57FA\u6E96\u6301\u7D9A\u6642\u9593",
      "effectiveduration": "\u52B9\u679C\u6642\u9593\uFF08{{distance}}m\uFF09",
      "effects": "\u52B9\u679C",
      "grade": Object.freeze({ 100: "G1", 200: "G2", 300: "G3", 400: "OP", 700: "Pre-OP", 800: "Maiden", 900: "\u30C7\u30D3\u30E5\u30FC", 999: "\u6BCE\u65E5" }),
      "ground_condition": Object.freeze(["", "\u826F", "\u7A0D\u91CD", "\u91CD", "\u4E0D\u826F"]),
      "ground_type": Object.freeze(["", "\u829D", "\u30C0\u30FC\u30C8"]),
      "id": "ID: ",
      "meters": "{{n}}m",
      "motivation": Object.freeze(["", "\u7D76\u4E0D\u8ABF", "\u4E0D\u8ABF", "\u666E\u901A", "\u597D\u8ABF", "\u7D76\u597D\u8ABF"]),
      "order_rate": "\u30C1\u30E3\u30F3\u30DF\uFF1A{{cm}}\u3001\u30EA\u30B0\u30D2\uFF1A{{loh}}",
      "preconditions": "\u524D\u63D0\u6761\u4EF6",
      "rotation": Object.freeze(["", "\u53F3\u56DE\u308A", "\u5DE6\u56DE\u308A"]),
      "running_style": Object.freeze(["", "\u9003\u3052", "\u5148\u884C", "\u5DEE\u3057", "\u8FFD\u8FBC"]),
      "season": Object.freeze(["", "\u65E9\u6625", "\u590F", "\u79CB", "\u51AC", "\u6625"]),
      "seconds": "{{n}}s",
      "slope": Object.freeze(["\u5E73\u5730", "\u4E0A\u308A\u5742", "\u4E0B\u308A\u5742"]),
      "speed": "{{n}}m/s",
      "time": Object.freeze(["", "\u671D", "\u663C", "\u5915\u65B9", "\u591C"]),
      "weather": Object.freeze(["", "\u6674\u308C", "\u66C7\u308A", "\u96E8", "\u96EA"])
    })
  });
  var STRINGS_en2 = Object.freeze({
    "skillfilters": Object.freeze({
      "white": "White skills",
      "gold": "Gold skills",
      "pink": "Evolved skills",
      "unique": "Unique skills",
      "inherit": "Inherited uniques",
      "nige": "Runner",
      "senkou": "Leader",
      "sasi": "Betweener",
      "oikomi": "Chaser",
      "short": "Short",
      "mile": "Mile",
      "medium": "Medium",
      "long": "Long",
      "turf": "Turf",
      "dirt": "Dirt",
      "phase0": "Opening leg",
      "phase1": "Middle leg",
      "phase2": "Final leg",
      "phase3": "Last spurt",
      "finalcorner": "Final corner",
      "finalstraight": "Final straight"
    }),
    "skilleffecttypes": Object.freeze({
      "1": "Speed up",
      "2": "Stamina up",
      "3": "Power up",
      "4": "Guts up",
      "5": "Wisdom up",
      "9": "Recovery",
      "21": "Current speed",
      "22": "Current speed with natural deceleration",
      "27": "Target speed",
      "28": "Lane movement speed",
      "31": "Acceleration",
      "37": "Activate random gold skill"
    }),
    "skilldetails": Object.freeze({
      "accel": "{{n}}m/s\xB2",
      "basinn": "{{n}} bashin",
      "conditions": "Conditions:",
      "distance_type": Object.freeze(["", "Short", "Mile", "Medium", "Long"]),
      "baseduration": "Base duration:",
      "effectiveduration": "Effective duration ({{distance}}m):",
      "effects": "Effects:",
      "grade": Object.freeze({ 100: "G1", 200: "G2", 300: "G3", 400: "OP", 700: "Pre-OP", 800: "Maiden", 900: "Debut", 999: "Daily races" }),
      "ground_condition": Object.freeze(["", "Good", "Yielding", "Soft", "Heavy"]),
      "ground_type": Object.freeze(["", "Turf", "Dirt"]),
      "id": "ID: ",
      "meters": "{{n}}m",
      "motivation": Object.freeze(["", "Terrible", "Bad", "Normal", "Good", "Perfect"]),
      "order_rate": "CM: {{cm}}, LOH: {{loh}}",
      "preconditions": "Preconditions:",
      "rotation": Object.freeze(["", "Right", "Left"]),
      "running_style": Object.freeze(["", "Runner", "Leader", "Betweener", "Chaser"]),
      "season": Object.freeze(["", "Early spring", "Summer", "Autumn", "Winter", "Late spring"]),
      "seconds": "{{n}}s",
      "slope": Object.freeze(["Flat", "Uphill", "Downhill"]),
      "speed": "{{n}}m/s",
      "time": Object.freeze(["", "Morning", "Mid day", "Evening", "Night"]),
      "weather": Object.freeze(["", "Sunny", "Cloudy", "Rainy", "Snowy"])
    })
  });
  function C(s3) {
    return Parser.parseAny(Parser.tokenize(s3));
  }
  var filterOps = Object.freeze({
    "nige": [C("running_style==1")],
    "senkou": [C("running_style==2")],
    "sasi": [C("running_style==3")],
    "oikomi": [C("running_style==4")],
    "short": [C("distance_type==1")],
    "mile": [C("distance_type==2")],
    "medium": [C("distance_type==3")],
    "long": [C("distance_type==4")],
    "turf": [C("ground_type==1")],
    "dirt": [C("ground_type==2")],
    "phase0": [C("phase==0"), C("phase_random==0"), C("phase_firsthalf_random==0"), C("phase_laterhalf_random==0")],
    "phase1": [C("phase==1"), C("phase>=1"), C("phase_random==1"), C("phase_firsthalf_random==1"), C("phase_laterhalf_random==1")],
    "phase2": [C("phase==2"), C("phase>=2"), C("phase_random==2"), C("phase_firsthalf_random==2"), C("phase_laterhalf_random==2"), C("phase_firstquarter_random==2"), C("is_lastspurt==1")],
    "phase3": [C("phase==3"), C("phase_random==3"), C("phase_firsthalf_random==3"), C("phase_laterhalf_random==3")],
    "finalcorner": [C("is_finalcorner==1"), C("is_finalcorner_laterhalf==1"), C("is_finalcorner_random==1")],
    "finalstraight": [C("is_last_straight==1"), C("is_last_straight_onetime==1")]
  });
  var parsedConditions = {};
  Object.keys(skill_data_default).forEach((id3) => {
    parsedConditions[id3] = skill_data_default[id3].alternatives.map((ef) => Parser.parse(Parser.tokenize(ef.condition)));
  });
  function matchRarity(id3, testRarity) {
    const r3 = skill_data_default[id3].rarity;
    switch (testRarity) {
      case "white":
        return r3 == 1 /* White */ && id3[0] != "9";
      case "gold":
        return r3 == 2 /* Gold */;
      case "pink":
        return r3 == 6 /* Evolution */;
      case "unique":
        return r3 > 2 /* Gold */ && r3 < 6 /* Evolution */;
      case "inherit":
        return id3[0] == "9";
      default:
        return true;
    }
  }
  var classnames = Object.freeze(["", "skill-white", "skill-gold", "skill-unique", "skill-unique", "skill-unique", "skill-pink"]);
  function Skill(props) {
    return /* @__PURE__ */ y("div", { class: `skill ${classnames[skill_data_default[props.id].rarity]} ${props.selected ? "selected" : ""}`, "data-skillid": props.id }, /* @__PURE__ */ y("img", { class: "skillIcon", src: `/uma-tools/icons/${skillmeta(props.id).iconId}.png` }), /* @__PURE__ */ y("span", { class: "skillName" }, /* @__PURE__ */ y(Text, { id: `skillnames.${props.id}` })), props.dismissable && /* @__PURE__ */ y("span", { class: "skillDismiss" }, "\u2715"));
  }
  function fmtSeconds(arg) {
    return /* @__PURE__ */ y(Text, { id: "skilldetails.seconds", plural: arg, fields: { n: arg } });
  }
  function fmtPercent(arg) {
    return `${arg}%`;
  }
  function fmtMeters(arg) {
    return /* @__PURE__ */ y(Text, { id: "skilldetails.meters", plural: arg, fields: { n: arg } });
  }
  function fmtString(strId) {
    return function(arg) {
      return /* @__PURE__ */ y(Tooltip, { title: arg.toString(), tall: useLanguage() == "ja" }, /* @__PURE__ */ y(Text, { id: `skilldetails.${strId}.${arg}` }));
    };
  }
  var conditionFormatters = new Proxy({
    accumulatetime: fmtSeconds,
    bashin_diff_behind(arg) {
      return /* @__PURE__ */ y(Localizer, null, /* @__PURE__ */ y(Tooltip, { title: /* @__PURE__ */ y(Text, { id: "skilldetails.meters", plural: arg * 2.5, fields: { n: arg * 2.5 } }) }, /* @__PURE__ */ y(Text, { id: "skilldetails.basinn", plural: arg, fields: { n: arg } })));
    },
    bashin_diff_infront(arg) {
      return /* @__PURE__ */ y(Localizer, null, /* @__PURE__ */ y(Tooltip, { title: /* @__PURE__ */ y(Text, { id: "skilldetails.meters", plural: arg * 2.5, fields: { n: arg * 2.5 } }) }, /* @__PURE__ */ y(Text, { id: "skilldetails.basinn", plural: arg, fields: { n: arg } })));
    },
    behind_near_lane_time: fmtSeconds,
    behind_near_lane_time_set1: fmtSeconds,
    blocked_all_continuetime: fmtSeconds,
    blocked_front_continuetime: fmtSeconds,
    blocked_side_continuetime: fmtSeconds,
    course_distance: fmtMeters,
    distance_diff_rate: fmtPercent,
    distance_diff_top(arg) {
      return /* @__PURE__ */ y(Localizer, null, /* @__PURE__ */ y(Tooltip, { title: /* @__PURE__ */ y(Text, { id: "skilldetails.basinn", plural: arg / 2.5, fields: { n: arg / 2.5 } }) }, /* @__PURE__ */ y(Text, { id: "skilldetails.meters", plural: arg, fields: { n: arg } })));
    },
    distance_diff_top_float(arg) {
      return /* @__PURE__ */ y(Localizer, null, /* @__PURE__ */ y(Tooltip, { title: /* @__PURE__ */ y(Text, { id: "skilldetails.basinn", plural: arg / 25, fields: { n: arg / 25 } }) }, /* @__PURE__ */ y(Text, { id: "skilldetails.meters", plural: arg, fields: { n: (arg / 10).toFixed(1) } })));
    },
    distance_rate: fmtPercent,
    distance_rate_after_random: fmtPercent,
    distance_type: fmtString("distance_type"),
    grade: fmtString("grade"),
    ground_condition: fmtString("ground_condition"),
    ground_type: fmtString("ground_type"),
    hp_per: fmtPercent,
    infront_near_lane_time: fmtSeconds,
    motivation: fmtString("motivation"),
    order_rate(arg) {
      return /* @__PURE__ */ y(Localizer, null, /* @__PURE__ */ y(Tooltip, { title: /* @__PURE__ */ y(Text, { id: "skilldetails.order_rate", fields: { cm: Math.round(arg / 100 * 9), loh: Math.round(arg / 100 * 12) } }) }, arg));
    },
    overtake_target_no_order_up_time: fmtSeconds,
    overtake_target_time: fmtSeconds,
    random_lot: fmtPercent,
    remain_distance: fmtMeters,
    rotation: fmtString("rotation"),
    running_style: fmtString("running_style"),
    season: fmtString("season"),
    slope: fmtString("slope"),
    time: fmtString("time"),
    track_id(arg) {
      return /* @__PURE__ */ y(Tooltip, { title: arg, tall: useLanguage() == "ja" }, /* @__PURE__ */ y(Text, { id: `tracknames.${arg}` }));
    },
    weather: fmtString("weather")
  }, {
    get(o4, prop) {
      if (o4.hasOwnProperty(prop)) {
        return { name: prop, formatArg: o4[prop] };
      }
      return {
        name: prop,
        formatArg(arg) {
          return arg.toString();
        }
      };
    }
  });
  var AndFormatter = class {
    constructor(left2, right2) {
      this.left = left2;
      this.right = right2;
    }
    format() {
      return /* @__PURE__ */ y(k, null, this.left.format(), /* @__PURE__ */ y("span", { class: "operatorAnd" }, "&"), this.right.format());
    }
  };
  var OrFormatter = class {
    constructor(left2, right2) {
      this.left = left2;
      this.right = right2;
    }
    format() {
      return /* @__PURE__ */ y(k, null, this.left.format(), /* @__PURE__ */ y("span", { class: "operatorOr" }, "@", /* @__PURE__ */ y("span", { class: "operatorOrText" }, "or")), this.right.format());
    }
  };
  function CmpFormatter(op) {
    return class {
      constructor(cond, arg) {
        this.cond = cond;
        this.arg = arg;
      }
      format() {
        return /* @__PURE__ */ y("div", { class: "condition" }, /* @__PURE__ */ y("span", { class: "conditionName" }, this.cond.name), /* @__PURE__ */ y("span", { class: "conditionOp" }, op), /* @__PURE__ */ y("span", { class: "conditionArg" }, this.cond.formatArg(this.arg)));
      }
    };
  }
  var FormatParser = getParser(conditionFormatters, {
    and: AndFormatter,
    or: OrFormatter,
    eq: CmpFormatter("=="),
    neq: CmpFormatter("!="),
    lt: CmpFormatter("<"),
    lte: CmpFormatter("<="),
    gt: CmpFormatter("<"),
    gte: CmpFormatter(">=")
  });
  function forceSign(n3) {
    return n3 <= 0 ? n3.toString() : "+" + n3;
  }
  var formatStat = forceSign;
  function formatSpeed(n3) {
    return /* @__PURE__ */ y(Text, { id: "skilldetails.speed", plural: n3, fields: { n: forceSign(n3) } });
  }
  var formatEffect = Object.freeze({
    1: formatStat,
    2: formatStat,
    3: formatStat,
    4: formatStat,
    5: formatStat,
    9: (n3) => `${(n3 * 100).toFixed(1)}%`,
    21: formatSpeed,
    22: formatSpeed,
    27: formatSpeed,
    31: (n3) => /* @__PURE__ */ y(Text, { id: "skilldetails.accel", plural: n3, fields: { n: forceSign(n3) } })
  });
  function ExpandedSkillDetails(props) {
    const skill = skill_data_default[props.id];
    const lang = useLanguage();
    return /* @__PURE__ */ y(IntlProvider, { definition: lang == "ja" ? STRINGS_ja2 : STRINGS_en2 }, /* @__PURE__ */ y("div", { class: `expandedSkill ${classnames[skill.rarity]}`, "data-skillid": props.id }, /* @__PURE__ */ y("div", { class: "expandedSkillHeader" }, /* @__PURE__ */ y("img", { class: "skillIcon", src: `/uma-tools/icons/${skillmeta(props.id).iconId}.png` }), /* @__PURE__ */ y("span", { class: "skillName" }, /* @__PURE__ */ y(Text, { id: `skillnames.${props.id}` })), props.dismissable && /* @__PURE__ */ y("span", { class: "skillDismiss" }, "\u2715")), /* @__PURE__ */ y("div", { class: "skillDetails" }, skill_data_default[props.id].alternatives.map(
      (alt) => /* @__PURE__ */ y("div", { class: "skillDetailsSection" }, /* @__PURE__ */ y("div", null, /* @__PURE__ */ y(Text, { id: "skilldetails.id" }), props.id), alt.precondition.length > 0 && /* @__PURE__ */ y(k, null, /* @__PURE__ */ y(Text, { id: "skilldetails.preconditions" }), /* @__PURE__ */ y("div", { class: "skillConditions" }, FormatParser.parse(FormatParser.tokenize(alt.precondition)).format())), /* @__PURE__ */ y(Text, { id: "skilldetails.conditions" }), /* @__PURE__ */ y("div", { class: "skillConditions" }, FormatParser.parse(FormatParser.tokenize(alt.condition)).format()), /* @__PURE__ */ y(Text, { id: "skilldetails.effects" }), /* @__PURE__ */ y("div", { class: "skillEffects" }, alt.effects.map(
        (ef) => /* @__PURE__ */ y("div", { class: "skillEffect" }, /* @__PURE__ */ y("span", { class: "skillEffectType" }, /* @__PURE__ */ y(Text, { id: `skilleffecttypes.${ef.type}` }, ef.type)), /* @__PURE__ */ y("span", { class: "skillEffectValue" }, ef.type in formatEffect ? formatEffect[ef.type](ef.modifier / 1e4) : ef.modifier / 1e4))
      )), alt.baseDuration > 0 && /* @__PURE__ */ y("span", { class: "skillDuration" }, /* @__PURE__ */ y(Text, { id: "skilldetails.baseduration" }), " ", /* @__PURE__ */ y(Text, { id: "skilldetails.seconds", fields: { n: alt.baseDuration / 1e4 } })), props.distanceFactor && alt.baseDuration > 0 && /* @__PURE__ */ y("span", { class: "skillDuration" }, /* @__PURE__ */ y(Text, { id: "skilldetails.effectiveduration", fields: { distance: props.distanceFactor } }), " ", /* @__PURE__ */ y(Text, { id: "skilldetails.seconds", fields: { n: +(alt.baseDuration / 1e4 * (props.distanceFactor / 1e3)).toFixed(2) } })))
    ))));
  }
  var iconIdPrefixes = Object.freeze({
    "1001": ["1001"],
    "1002": ["1002", "2018"],
    "1003": ["1003"],
    "1004": ["1004"],
    "1005": ["1005"],
    "1006": ["1006"],
    "2002": ["2002", "2011"],
    "2001": ["2001", "2010", "2014", "2015", "2016", "2019", "2021"],
    "2004": ["2004", "2012", "2017", "2020"],
    "2005": ["2005", "2013"],
    "2006": ["2006"],
    "2009": ["2009"],
    "3001": ["3001"],
    "3002": ["3002"],
    "3004": ["3004"],
    "3005": ["3005"],
    "3007": ["3007"],
    "4001": ["4001"]
  });
  var groups_filters = Object.freeze({
    "rarity": ["white", "gold", "pink", "unique", "inherit"],
    "icontype": ["1001", "1002", "1003", "1004", "1005", "1006", "4001", "2002", "2001", "2004", "2005", "2006", "2009", "3001", "3002", "3004", "3005", "3007"],
    "strategy": ["nige", "senkou", "sasi", "oikomi"],
    "distance": ["short", "mile", "medium", "long"],
    "surface": ["turf", "dirt"],
    "location": ["phase0", "phase1", "phase2", "phase3", "finalcorner", "finalstraight"]
  });
  function SkillList(props) {
    const lang = useLanguage();
    const [visible, setVisible] = h2(() => new Set(props.ids));
    const active = {}, setActive = {};
    Object.keys(groups_filters).forEach((group) => {
      active[group] = {};
      setActive[group] = {};
      groups_filters[group].forEach((filter6) => {
        const [active_, setActive_] = h2(group == "icontype");
        active[group][filter6] = active_;
        setActive[group][filter6] = setActive_;
      });
    });
    const selectedMap = new Map(Array.from(props.selected).map((id3) => [skillmeta(id3).groupId, id3]));
    function toggleSelected(e4) {
      const se = e4.target.closest("div.skill");
      if (se == null)
        return;
      e4.stopPropagation();
      const id3 = se.dataset.skillid;
      const groupId = skillmeta(id3).groupId;
      const old = selectedMap.get(groupId) == id3;
      const newSelected = new Set(selectedMap.values());
      if (selectedMap.has(groupId)) {
        newSelected.delete(selectedMap.get(groupId));
      }
      newSelected.add(id3);
      props.setSelected(newSelected);
    }
    function updateFilters(e4) {
      if (e4.target.tagName != "BUTTON")
        return;
      e4.stopPropagation();
      const group = e4.target.parentElement.dataset.filterGroup;
      const filter6 = e4.target.dataset.filter;
      if (group == "icontype") {
        if (groups_filters.icontype.every((f3) => active.icontype[f3])) {
          groups_filters.icontype.forEach((f3) => f3 != filter6 && setActive.icontype[f3](active.icontype[f3] = false));
        } else {
          setActive.icontype[filter6](active.icontype[filter6] = !active.icontype[filter6]);
          if (!groups_filters.icontype.some((f3) => active.icontype[f3])) {
            groups_filters.icontype.forEach((f3) => setActive.icontype[f3](active.icontype[f3] = true));
          }
        }
      } else {
        setActive[group][filter6](active[group][filter6]);
        Object.keys(active[group]).forEach((k3) => setActive[group][k3](active[group][k3] = !active[group][k3] && k3 == filter6));
      }
      const filtered = /* @__PURE__ */ new Set();
      props.ids.forEach((id3) => {
        const pass = Object.keys(groups_filters).every((group2) => {
          const check = groups_filters[group2].filter((f3) => active[group2][f3]);
          if (check.length == 0)
            return true;
          if (group2 == "rarity")
            return check.some((f3) => matchRarity(id3, f3));
          else if (group2 == "icontype")
            return check.some((f3) => iconIdPrefixes[f3].some((p4) => skillmeta(id3).iconId.startsWith(p4)));
          return check.some((f3) => filterOps[f3].some((op) => parsedConditions[id3].some((alt) => treeMatch(op, alt))));
        });
        if (pass) {
          filtered.add(id3);
        }
      });
      setVisible(filtered);
    }
    function FilterGroup(props2) {
      return /* @__PURE__ */ y("div", { "data-filter-group": props2.group }, props2.children.map((c3) => F(c3, { group: props2.group })));
    }
    function FilterButton(props2) {
      return /* @__PURE__ */ y("button", { "data-filter": props2.filter, class: `filterButton ${active[props2.group][props2.filter] ? "active" : ""}` }, /* @__PURE__ */ y(Text, { id: `skillfilters.${props2.filter}` }));
    }
    function IconFilterButton(props2) {
      return /* @__PURE__ */ y("button", { "data-filter": props2.type, class: `iconFilterButton ${active[props2.group][props2.type] ? "active" : ""}`, style: `background-image:url(/uma-tools/icons/${props2.type}1.png)` });
    }
    const items = props.ids.map((id3) => /* @__PURE__ */ y("li", { key: id3, class: visible.has(id3) ? "" : "hidden" }, /* @__PURE__ */ y(Skill, { id: id3, selected: selectedMap.get(skillmeta(id3).groupId) == id3 })));
    return /* @__PURE__ */ y(IntlProvider, { definition: lang == "ja" ? STRINGS_ja2 : STRINGS_en2 }, /* @__PURE__ */ y("div", { class: "filterGroups", onClick: updateFilters }, /* @__PURE__ */ y(FilterGroup, { group: "rarity" }, /* @__PURE__ */ y(FilterButton, { filter: "white" }), /* @__PURE__ */ y(FilterButton, { filter: "gold" }), /* @__PURE__ */ y(FilterButton, { filter: "pink" }), /* @__PURE__ */ y(FilterButton, { filter: "unique" }), /* @__PURE__ */ y(FilterButton, { filter: "inherit" })), /* @__PURE__ */ y(FilterGroup, { group: "icontype" }, groups_filters["icontype"].map((t3) => /* @__PURE__ */ y(IconFilterButton, { type: t3 }))), /* @__PURE__ */ y(FilterGroup, { group: "strategy" }, /* @__PURE__ */ y(FilterButton, { filter: "nige" }), /* @__PURE__ */ y(FilterButton, { filter: "senkou" }), /* @__PURE__ */ y(FilterButton, { filter: "sasi" }), /* @__PURE__ */ y(FilterButton, { filter: "oikomi" })), /* @__PURE__ */ y(FilterGroup, { group: "distance" }, /* @__PURE__ */ y(FilterButton, { filter: "short" }), /* @__PURE__ */ y(FilterButton, { filter: "mile" }), /* @__PURE__ */ y(FilterButton, { filter: "medium" }), /* @__PURE__ */ y(FilterButton, { filter: "long" })), /* @__PURE__ */ y(FilterGroup, { group: "surface" }, /* @__PURE__ */ y(FilterButton, { filter: "turf" }), /* @__PURE__ */ y(FilterButton, { filter: "dirt" })), /* @__PURE__ */ y(FilterGroup, { group: "location" }, /* @__PURE__ */ y(FilterButton, { filter: "phase0" }), /* @__PURE__ */ y(FilterButton, { filter: "phase1" }), /* @__PURE__ */ y(FilterButton, { filter: "phase2" }), /* @__PURE__ */ y(FilterButton, { filter: "phase3" }), /* @__PURE__ */ y(FilterButton, { filter: "finalcorner" }), /* @__PURE__ */ y(FilterButton, { filter: "finalstraight" }))), /* @__PURE__ */ y("ul", { class: "skillList", onClick: toggleSelected }, items));
  }

  // ../umas.json
  var umas_default = { "1001": { name: ["\u30B9\u30DA\u30B7\u30E3\u30EB\u30A6\u30A3\u30FC\u30AF", "Special Week"], outfits: { "100101": "[\u30B9\u30DA\u30B7\u30E3\u30EB\u30C9\u30EA\u30FC\u30DE\u30FC]", "100102": "[\u307B\u3063\u3074\u3093\u266A\u30D3\u30BF\u30DF\u30F3\u30CF\u30FC\u30C8]", "100103": "[\u65E5\u4E4B\u672C\u4E00\u306E\u7DCF\u5927\u5C06]" } }, "1002": { name: ["\u30B5\u30A4\u30EC\u30F3\u30B9\u30B9\u30BA\u30AB", "Silence Suzuka"], outfits: { "100201": "[\u30B5\u30A4\u30EC\u30F3\u30C8\u30A4\u30CE\u30BB\u30F3\u30B9]", "100202": "[\u6CE2\u9593\u306E\u30A8\u30E1\u30E9\u30EB\u30C9]" } }, "1003": { name: ["\u30C8\u30A6\u30AB\u30A4\u30C6\u30A4\u30AA\u30FC", "Tokai Teio"], outfits: { "100301": "[\u30C8\u30C3\u30D7\u30FB\u30AA\u30D6\u30FB\u30B8\u30E7\u30A4\u30D5\u30EB]", "100302": "[\u30D3\u30E8\u30F3\u30C9\u30FB\u30B6\u30FB\u30DB\u30E9\u30A4\u30BA\u30F3]", "100303": "[\u7D2B\u96F2\u306E\u5922\u898B\u53D6\u308A]" } }, "1004": { name: ["\u30DE\u30EB\u30BC\u30F3\u30B9\u30AD\u30FC", "Maruzensky"], outfits: { "100401": "[\u30D5\u30A9\u30FC\u30DF\u30E5\u30E9\u30AA\u30D6\u30EB\u30FC\u30B8\u30E5]", "100402": "[\u3076\u3063\u3068\u3073\u2606\u3055\u307E\u30FC\u30CA\u30A4\u30C8]", "100403": "[\u795D\u3072\u5BFF\u3050\u795E\u901F\u5929\u5973]" } }, "1005": { name: ["\u30D5\u30B8\u30AD\u30BB\u30AD", "Fuji Kiseki"], outfits: { "100501": "[\u30B7\u30E5\u30FC\u30C6\u30A3\u30F3\u30B9\u30BF\u30A1\u30FB\u30EB\u30F4\u30E5]", "100502": "[\u30B7\u30E5\u30AF\u30BB\u30FB\u30A8\u30C8\u30EF\u30FC\u30EC]" } }, "1006": { name: ["\u30AA\u30B0\u30EA\u30AD\u30E3\u30C3\u30D7", "Oguri Cap"], outfits: { "100601": "[\u30B9\u30BF\u30FC\u30E9\u30A4\u30C8\u30D3\u30FC\u30C8]", "100602": "[\u30AD\u30BB\u30AD\u306E\u767D\u661F]" } }, "1007": { name: ["\u30B4\u30FC\u30EB\u30C9\u30B7\u30C3\u30D7", "Gold Ship"], outfits: { "100701": "[\u30EC\u30C3\u30C9\u30B9\u30C8\u30E9\u30A4\u30D5]", "100702": "[RUN\uFF01\u4E71\uFF01\u30E9\u30F3\u30C1\u30E3\u30FC\uFF01\uFF01]", "100703": "[La mode 564]" } }, "1008": { name: ["\u30A6\u30AA\u30C3\u30AB", "Vodka"], outfits: { "100801": "[\u30EF\u30A4\u30EB\u30C9\u30C8\u30C3\u30D7\u30AE\u30A2]", "100802": "[\u4E0D\u51CD\u306E\u30A2\u30AF\u30A2\u30FB\u30A6\u30A3\u30BF\u30A8]" } }, "1009": { name: ["\u30C0\u30A4\u30EF\u30B9\u30AB\u30FC\u30EC\u30C3\u30C8", "Daiwa Scarlet"], outfits: { "100901": "[\u30C8\u30C3\u30D7\u30FB\u30AA\u30D6\u30FB\u30D6\u30EB\u30FC]", "100902": "[\u7DCB\u8272\u306E\u30CB\u30E5\u30A4\u30FB\u30A8\u30C8\u30EF\u30EC]" } }, "1010": { name: ["\u30BF\u30A4\u30AD\u30B7\u30E3\u30C8\u30EB", "Taiki Shuttle"], outfits: { "101001": "[\u30EF\u30A4\u30EB\u30C9\u30FB\u30D5\u30ED\u30F3\u30C6\u30A3\u30A2]", "101002": "[Bubblegum\u2606Memories]" } }, "1011": { name: ["\u30B0\u30E9\u30B9\u30EF\u30F3\u30C0\u30FC", "Grass Wonder"], outfits: { "101101": "[\u5CA9\u7A7F\u3064\u9752]", "101102": "[\u30BB\u30A4\u30F3\u30C8\u30B8\u30A7\u30FC\u30C9\u30FB\u30D2\u30FC\u30E9\u30FC]", "101103": "[\u84BC\u708E\u306E\u8A89]" } }, "1012": { name: ["\u30D2\u30B7\u30A2\u30DE\u30BE\u30F3", "Hishi Amazon"], outfits: { "101201": "[\u30A2\u30DE\u30BE\u30CD\u30B9\u30FB\u30E9\u30D4\u30B9]", "101202": "[Hungry Veil]" } }, "1013": { name: ["\u30E1\u30B8\u30ED\u30DE\u30C3\u30AF\u30A4\u30FC\u30F3", "Mejiro McQueen"], outfits: { "101301": "[\u30A8\u30EC\u30AC\u30F3\u30B9\u30FB\u30E9\u30A4\u30F3]", "101302": "[\u30A8\u30F3\u30C9\u30FB\u30AA\u30D6\u30FB\u30B9\u30AB\u30A4]", "101303": "[\u3055\u3056\u6CE2\u30D5\u30A7\u30A2\u30EC\u30C7\u30A3]" } }, "1014": { name: ["\u30A8\u30EB\u30B3\u30F3\u30C9\u30EB\u30D1\u30B5\u30FC", "El Condor Pasa"], outfits: { "101401": "[\u30A8\u30EB\u2606N\xFAmero 1]", "101402": "[\u30AF\u30AF\u30EB\u30AB\u30F3\u30FB\u30E2\u30F3\u30AF]" } }, "1015": { name: ["\u30C6\u30A4\u30A8\u30E0\u30AA\u30DA\u30E9\u30AA\u30FC", "TM Opera O"], outfits: { "101501": "[\u30AA\u30FC\u30FB\u30BD\u30EC\u30FB\u30B9\u30FC\u30AA\uFF01]", "101502": "[\u521D\u6674\u30FB\u9752\u304D\u7D62\u721B]" } }, "1016": { name: ["\u30CA\u30EA\u30BF\u30D6\u30E9\u30A4\u30A2\u30F3", "Narita Brian"], outfits: { "101601": "[Maverick]", "101602": "[\u9913\u72FC]" } }, "1017": { name: ["\u30B7\u30F3\u30DC\u30EA\u30EB\u30C9\u30EB\u30D5", "Symboli Rudolf"], outfits: { "101701": "[\u30ED\u30FC\u30C9\u30FB\u30AA\u30D6\u30FB\u30A8\u30F3\u30DA\u30E9\u30FC]", "101702": "[\u7693\u6708\u306E\u5F13\u53D6\u308A]" } }, "1018": { name: ["\u30A8\u30A2\u30B0\u30EB\u30FC\u30F4", "Air Groove"], outfits: { "101801": "[\u30A8\u30F3\u30D7\u30EC\u30B9\u30ED\u30FC\u30C9]", "101802": "[\u30AF\u30A8\u30EB\u30AF\u30B9\u30FB\u30AD\u30A6\u30A3\u30FC\u30EA\u30B9]" } }, "1019": { name: ["\u30A2\u30B0\u30CD\u30B9\u30C7\u30B8\u30BF\u30EB", "Agnes Digital"], outfits: { "101901": "[\u8D85\u7279\u6025\uFF01\u30D5\u30EB\u30AB\u30E9\u30FC\u7279\u6B8APP]", "101902": "[\u611B\u9E97\u2661\u30AD\u30E7\u30F3\u30B7\u30FC]" } }, "1020": { name: ["\u30BB\u30A4\u30A6\u30F3\u30B9\u30AB\u30A4", "Seiun Sky"], outfits: { "102001": "[\u3042\u304A\u3050\u3082\u30B5\u30DF\u30F3\u30B0]", "102002": "[\u30BD\u30EF\u30EC\u30FB\u30C9\u30FB\u30B7\u30E3\u30C8\u30F3]" } }, "1021": { name: ["\u30BF\u30DE\u30E2\u30AF\u30ED\u30B9", "Tamamo Cross"], outfits: { "102101": "[\u75BE\u98A8\u8FC5\u96F7]", "102102": "[\u731B\u30EB\u9CF4\u795E]" } }, "1022": { name: ["\u30D5\u30A1\u30A4\u30F3\u30E2\u30FC\u30B7\u30E7\u30F3", "Fine Motion"], outfits: { "102201": "[Noble Seamair]", "102202": "[Titania]" } }, "1023": { name: ["\u30D3\u30EF\u30CF\u30E4\u30D2\u30C7", "Biwa Hayahide"], outfits: { "102301": "[pf.Victory formula...]", "102302": "[\u30CE\u30A8\u30EB\u30FC\u30B8\u30E5\u30FB\u30AD\u30E3\u30ED\u30EB]", "102303": "[Engineered Victory]" } }, "1024": { name: ["\u30DE\u30E4\u30CE\u30C8\u30C3\u30D7\u30AC\u30F3", "Mayano Top Gun"], outfits: { "102401": "[\u3059\u304F\u3089\u3093\u3076\u308B\u2606\u30BE\u30FC\u30F3]", "102402": "[\u30B5\u30F3\u30E9\u30A4\u30C8\u30FB\u30D6\u30FC\u30B1]", "102403": "[\u308D\u3063\u304D\u3093\u2606MewMeow]" } }, "1025": { name: ["\u30DE\u30F3\u30CF\u30C3\u30BF\u30F3\u30AB\u30D5\u30A7", "Manhattan Cafe"], outfits: { "102501": "[Creeping Black]", "102502": "[\u67F3\u7DD1\u5C0F\u591C]" } }, "1026": { name: ["\u30DF\u30DB\u30CE\u30D6\u30EB\u30DC\u30F3", "Mihono Bourbon"], outfits: { "102601": "[MB-19890425]", "102602": "[CODE\uFF1A\u30B0\u30E9\u30B5\u30FC\u30B8\u30E5]" } }, "1027": { name: ["\u30E1\u30B8\u30ED\u30E9\u30A4\u30A2\u30F3", "Mejiro Ryan"], outfits: { "102701": "[\u30B9\u30C8\u30EC\u30FC\u30C8\u30FB\u30E9\u30A4\u30F3]", "102702": "[\u30DE\u30FC\u30AC\u30EC\u30C3\u30C8\u30FB\u30E9\u30C3\u30C6]" } }, "1028": { name: ["\u30D2\u30B7\u30A2\u30B1\u30DC\u30CE", "Hishi Akebono"], outfits: { "102801": "[\u30DC\u30FC\u30CE\u2606\u30A2\u30E9\u30E2\u30FC\u30C0]" } }, "1029": { name: ["\u30E6\u30AD\u30CE\u30D3\u30B8\u30F3", "Yukino Bijin"], outfits: { "102901": "[\u3081\u3093\u3053\u3044\u3081\u3093\u3053\u3044\u3080\u3064\u306E\u306F\u306A]", "102902": "[\u8336\u306E\u5B50\u96EA\u3093\u5B50]" } }, "1030": { name: ["\u30E9\u30A4\u30B9\u30B7\u30E3\u30EF\u30FC", "Rice Shower"], outfits: { "103001": "[\u30ED\u30FC\u30BC\u30B9\u30C9\u30EA\u30FC\u30E0]", "103002": "[Make up Vampire!]", "103003": "[Yummy Dreamy Fairy]" } }, "1031": { name: ["\u30A2\u30A4\u30CD\u30B9\u30D5\u30A6\u30B8\u30F3", "Ines Fujin"], outfits: { "103101": "[\u30AA\u30FC\u30EB\u30BF\u30A4\u30E0\u30FB\u30D5\u30A3\u30FC\u30D0\u30FC]", "103102": "[MELTY GIFT]" } }, "1032": { name: ["\u30A2\u30B0\u30CD\u30B9\u30BF\u30AD\u30AA\u30F3", "Agnes Tachyon"], outfits: { "103201": "[tach-nology]", "103202": "[Lunatic Lab]", "103203": "[\u03A3 Experiment]" } }, "1033": { name: ["\u30A2\u30C9\u30DE\u30A4\u30E4\u30D9\u30AC", "Admire Vega"], outfits: { "103301": "[Starry Nocturne]", "103302": "[Glacialis Vega]" } }, "1034": { name: ["\u30A4\u30CA\u30EA\u30EF\u30F3", "Inari One"], outfits: { "103401": "[\u7A32\u8377\u6240\u7E01\u6C5F\u6238\u7D2B]", "103402": "[\u5922\u30CE\u91D1\u539F]" } }, "1035": { name: ["\u30A6\u30A4\u30CB\u30F3\u30B0\u30C1\u30B1\u30C3\u30C8", "Winning Ticket"], outfits: { "103501": "[Go To Winning!]", "103502": "[Dream Deliverer]", "103503": "[Glorious Coat]" } }, "1036": { name: ["\u30A8\u30A2\u30B7\u30E3\u30AB\u30FC\u30EB", "Air Shakur"], outfits: { "103601": "[unsigned]", "103602": "[Belphegor's Prime]" } }, "1037": { name: ["\u30A8\u30A4\u30B7\u30F3\u30D5\u30E9\u30C3\u30B7\u30E5", "Eishin Flash"], outfits: { "103701": "[Meisterschaft]", "103702": "[\u30B3\u30EC\u30AF\u30C8\u30FB\u30B7\u30E7\u30B3\u30E9\u30C6\u30A3\u30A8]", "103703": "[Reines Pl\xE4tschern]" } }, "1038": { name: ["\u30AB\u30EC\u30F3\u30C1\u30E3\u30F3", "Curren Chan"], outfits: { "103801": "[\u30D5\u30A3\u30FC\u30E6\u30FB\u30A8\u30AF\u30EC\u30FC\u30EB]", "103802": "[\u6714\u6708\u306E\u30DE\u30FB\u30B7\u30A7\u30EA]" } }, "1039": { name: ["\u30AB\u30EF\u30AB\u30DF\u30D7\u30EA\u30F3\u30BB\u30B9", "Kawakami Princess"], outfits: { "103901": "[\u30D7\u30EA\u30F3\u30BB\u30B9\u30FB\u30AA\u30D6\u30FB\u30D4\u30F3\u30AF]", "103902": "[\u6C34\u5E72\u64AB\u5B50]" } }, "1040": { name: ["\u30B4\u30FC\u30EB\u30C9\u30B7\u30C1\u30FC", "Gold City"], outfits: { "104001": "[\u30AA\u30FC\u30BB\u30F3\u30C6\u30A3\u30C3\u30AF/1928]", "104002": "[\u79CB\u685C\u30C0\u30F3\u30C4\u30A1\u30C8\u30EA\u30FC\u30C1\u30A7]" } }, "1041": { name: ["\u30B5\u30AF\u30E9\u30D0\u30AF\u30B7\u30F3\u30AA\u30FC", "Sakura Bakushin O"], outfits: { "104101": "[\u30B5\u30AF\u30E9\u3001\u3059\u3059\u3081\uFF01]", "104102": "[\u30EC\u30C3\u30C9\u30DB\u30C3\u30C8\u2606\u30EA\u30FC\u30C0\u30FC]" } }, "1042": { name: ["\u30B7\u30FC\u30AD\u30F3\u30B0\u30B6\u30D1\u30FC\u30EB", "Seeking the Pearl"], outfits: { "104201": "[Rocket\u2606Star]", "104202": "[Be\u266AWitched]" } }, "1043": { name: ["\u30B7\u30F3\u30B3\u30A6\u30A6\u30A4\u30F3\u30C7\u30A3", "Shinko Windy"], outfits: { "104301": "[Wicked Punk]" } }, "1044": { name: ["\u30B9\u30A4\u30FC\u30D7\u30C8\u30A6\u30B7\u30E7\u30A6", "Sweep Tosho"], outfits: { "104401": "[\u30D7\u30E9\u30BF\u30CA\u30B9\u30FB\u30A6\u30A3\u30C3\u30C1]", "104402": "[\u30EA\u30A2\u30E9\u30A4\u30BA\u30FB\u30EB\u30FC\u30F3]" } }, "1045": { name: ["\u30B9\u30FC\u30D1\u30FC\u30AF\u30EA\u30FC\u30AF", "Super Creek"], outfits: { "104501": "[\u30DE\u30FC\u30DE\u30EA\u30F3\u30B0\u30B9\u30C8\u30EA\u30FC\u30E0]", "104502": "[\u30B7\u30D5\u30A9\u30F3\u30EA\u30DC\u30F3\u30DE\u30DF\u30FC]", "104503": "[\u6148\u96E8\u83EF\u5F71]" } }, "1046": { name: ["\u30B9\u30DE\u30FC\u30C8\u30D5\u30A1\u30EB\u30B3\u30F3", "Smart Falcon"], outfits: { "104601": "[\u3042\u3076\u305D\u308A\u3085\u30FC\u3068\u2606LOVE]", "104602": "[\u9EC4\u660F\u30C8\u30E9\u30A4\u30A2\u30F3\u30D5]" } }, "1047": { name: ["\u30BC\u30F3\u30CE\u30ED\u30D6\u30ED\u30A4", "Zenno Rob Roy"], outfits: { "104701": "[Heroic Author]", "104702": "[Inlaid Stories]" } }, "1048": { name: ["\u30C8\u30FC\u30BB\u30F3\u30B8\u30E7\u30FC\u30C0\u30F3", "Tosen Jordan"], outfits: { "104801": "[\u30DD\u30C3\u30D7\u30B9\u2606\u30B8\u30E7\u30FC\u30AB\u30FC]", "104802": "[Aurore\u2606Vacances]" } }, "1049": { name: ["\u30CA\u30AB\u30E4\u30DE\u30D5\u30A7\u30B9\u30BF", "Nakayama Festa"], outfits: { "104901": "[\u6B7B\u4E2D\u6C42\u6D3B]" } }, "1050": { name: ["\u30CA\u30EA\u30BF\u30BF\u30A4\u30B7\u30F3", "Narita Taishin"], outfits: { "105001": "[Nevertheless]", "105002": "[\u30C7\u30A3\u30D5\u30A1\u30EC\u30F3\u30B9\u30FB\u30A8\u30F3\u30B8\u30CB\u30A2]", "105003": "[\u8FF7\u5149\u30AA\u30FC\u30F4\u30A1\u30E9\u30A4\u30C9]" } }, "1051": { name: ["\u30CB\u30B7\u30CE\u30D5\u30E9\u30EF\u30FC", "Nishino Flower"], outfits: { "105101": "[\u30C6\u30A3\u30A2\u30FC\u30C9\u30FB\u30DA\u30BF\u30EB]", "105102": "[Sweet Juneberry]" } }, "1052": { name: ["\u30CF\u30EB\u30A6\u30E9\u30E9", "Haru Urara"], outfits: { "105201": "[\u3046\u3089\u3089\u3093\u4E00\u7B49\u8CDE\u266A]", "105202": "[\u521D\u3046\u3089\u3089\u266A\u3055\u304F\u3055\u304F\u3089]" } }, "1053": { name: ["\u30D0\u30F3\u30D6\u30FC\u30E1\u30E2\u30EA\u30FC", "Bamboo Memory"], outfits: { "105301": "[\u9ED2\u9244\u306E\u5927\u5FD7]", "105302": "[Ultra\u2606Marine]" } }, "1054": { name: ["\u30D3\u30B3\u30FC\u30DA\u30AC\u30B5\u30B9", "Biko Pegasus"], outfits: { "105401": "[\u75BE\u98A8\u30DA\u30AC\u30B5\u30B9\u30FB\u96F6\u5F0F]" } }, "1055": { name: ["\u30DE\u30FC\u30D9\u30E9\u30B9\u30B5\u30F3\u30C7\u30FC", "Marvelous Sunday"], outfits: { "105501": "[\u2606\u30AD\u30E9\u2605\u30C9\u30AD\u2606\u30EF\u30AF\u221E\u30DE\u30D9\u221E]" } }, "1056": { name: ["\u30DE\u30C1\u30AB\u30CD\u30D5\u30AF\u30AD\u30BF\u30EB", "Matikanefukukitaru"], outfits: { "105601": "[\u904B\u6C17\u4E0A\u6607\u2606\u5E78\u798F\u4E07\u6765]", "105602": "[\u5409\u5146\u30FB\u521D\u3042\u3089\u3057]" } }, "1057": { name: ["\u30DF\u30B9\u30BF\u30FC\u30B7\u30FC\u30D3\u30FC", "Mr. C.B."], outfits: { "105701": "[Clear Bliss]", "105702": "[\u7D62\u721B\u82B1\u9053\u6B4C\u821E\u304F\u541B]" } }, "1058": { name: ["\u30E1\u30A4\u30B7\u30E7\u30A6\u30C9\u30C8\u30A6", "Meisho Doto"], outfits: { "105801": "[\u30D6\u30EB\u30FC/\u30EC\u30A4\u30B8\u30F3\u30B0]", "105802": "[Dot-o'-Lantern]" } }, "1059": { name: ["\u30E1\u30B8\u30ED\u30C9\u30FC\u30D9\u30EB", "Mejiro Dober"], outfits: { "105901": "[\u30C4\u30A4\u30B9\u30C6\u30C3\u30C9\u30FB\u30E9\u30A4\u30F3]", "105902": "[\u30D0\u30AB\u30F3\u30B9\u30FB\u30B5\u30D5\u30A3\u30FC\u30EB]" } }, "1060": { name: ["\u30CA\u30A4\u30B9\u30CD\u30A4\u30C1\u30E3", "Nice Nature"], outfits: { "106001": "[\u30DD\u30A4\u30F3\u30BB\u30C1\u30A2\u30FB\u30EA\u30DC\u30F3]", "106002": "[RUN\uFF06WIN]", "106003": "[\u30CD\u30AC\u30A4\u30CE\u30AB\u30B5\u30CD]" } }, "1061": { name: ["\u30AD\u30F3\u30B0\u30D8\u30A4\u30ED\u30FC", "King Halo"], outfits: { "106101": "[\u30AD\u30F3\u30B0\u30FB\u30AA\u30D6\u30FB\u30A8\u30E1\u30E9\u30EB\u30C9]", "106102": "[\u767D\u304F\u6C17\u9AD8\u304D\u6FC0\u52B1\u306E\u88C5]", "106103": "[Evergreen Identity]" } }, "1062": { name: ["\u30DE\u30C1\u30AB\u30CD\u30BF\u30F3\u30DB\u30A4\u30B6", "Matikanetannhauser"], outfits: { "106201": "[\u3071\u3093\u3071\u304B\u30C6\u30A3\u30EB\u30C8\u30C3\u30C8]", "106202": "[\u30D6\u30EB\u30FC\u30FB\u30BF\u30FC\u30D3\u30E5\u30E9\u30F3\u30B9]" } }, "1063": { name: ["\u30A4\u30AF\u30CE\u30C7\u30A3\u30AF\u30BF\u30B9", "Ikuno Dictus"], outfits: { "106301": "[Mantle of Steel]" } }, "1064": { name: ["\u30E1\u30B8\u30ED\u30D1\u30FC\u30DE\u30FC", "Mejiro Palmer"], outfits: { "106401": "[Line Breakthrough]", "106402": "[\u8D64\u5FC3\u306E\u30C8\u30CA\u30AB\u30A4\u3055\u3093]" } }, "1065": { name: ["\u30C0\u30A4\u30BF\u30AF\u30D8\u30EA\u30AA\u30B9", "Daitaku Helios"], outfits: { "106501": "[Fun\u2606Fun\u2606\u3071\u308A\u306A\u3044]", "106502": "[Joyful Jamboree!]" } }, "1066": { name: ["\u30C4\u30A4\u30F3\u30BF\u30FC\u30DC", "Twin Turbo"], outfits: { "106601": "[\u7206\u8D70\uFF01\u30BF\u30FC\u30DC\u30A8\u30F3\u30B8\u30F3]" } }, "1067": { name: ["\u30B5\u30C8\u30CE\u30C0\u30A4\u30E4\u30E2\u30F3\u30C9", "Satono Diamond"], outfits: { "106701": "[Natural Brilliance]", "106702": "[\u82B1\u5F62\u30FB\u5F25\u6804\u4E4B\u7FE0]", "106703": "[\u30B7\u30E5\u30F4\u30A1\u30EA\u30A8\u30FB\u30D6\u30EB]" } }, "1068": { name: ["\u30AD\u30BF\u30B5\u30F3\u30D6\u30E9\u30C3\u30AF", "Kitasan Black"], outfits: { "106801": "[\u9326\u4E0A\u30FB\u5927\u5224\u5FA1\u8F3F]", "106802": "[\u771F\u6253\u30FB\u6176\u9DB4\u4E4B\u5FD7]", "106803": "[\u7D50\u9858\u306E\u3057\u307E\u3044\u83EF]" } }, "1069": { name: ["\u30B5\u30AF\u30E9\u30C1\u30E8\u30CE\u30AA\u30FC", "Sakura Chiyono O"], outfits: { "106901": "[\u65E5\u4E0B\u958B\u5C71\u30FB\u82B1\u3042\u304B\u308A]", "106902": "[Fleur Enneig\xE9e]" } }, "1070": { name: ["\u30B7\u30EA\u30A6\u30B9\u30B7\u30F3\u30DC\u30EA", "Sirius Symboli"], outfits: { "107001": "[F\xE9roce]" } }, "1071": { name: ["\u30E1\u30B8\u30ED\u30A2\u30EB\u30C0\u30F3", "Mejiro Ardan"], outfits: { "107101": "[\u30AF\u30EA\u30CE\u30AF\u30ED\u30A2\u30FB\u30E9\u30A4\u30F3]", "107102": "[Neige \xC9meraude]" } }, "1072": { name: ["\u30E4\u30A8\u30CE\u30E0\u30C6\u30AD", "Yaeno Muteki"], outfits: { "107201": "[\u56DB\u767D\u6D41\u661F\u306E\u8972]", "107202": "[\u9ED2\u5C06Zen]" } }, "1073": { name: ["\u30C4\u30EB\u30DE\u30EB\u30C4\u30E8\u30B7", "Tsurumaru Tsuyoshi"], outfits: { "107301": "[\u5FD7\u3001\u9AD8\u3057\u3001\u5F37\u3057\uFF01]" } }, "1074": { name: ["\u30E1\u30B8\u30ED\u30D6\u30E9\u30A4\u30C8", "Mejiro Bright"], outfits: { "107401": "[\u30D6\u30EA\u30E5\u30CB\u30B5\u30FC\u30B8\u30E5\u30FB\u30E9\u30A4\u30F3]", "107402": "[\u6E05\u3089\u306B\u661F\u6F84\u3080\u30B9\u30CE\u30FC\u30ED\u30EA\u30A3\u30BF]" } }, "1075": { name: ["\u30C7\u30A2\u30EA\u30F3\u30B0\u30BF\u30AF\u30C8", "Daring Tact"], outfits: {} }, "1076": { name: ["\u30B5\u30AF\u30E9\u30ED\u30FC\u30EC\u30EB", "Sakura Laurel"], outfits: { "107601": "[Saisir le r\xEAve]" } }, "1077": { name: ["\u30CA\u30EA\u30BF\u30C8\u30C3\u30D7\u30ED\u30FC\u30C9", "Narita Top Road"], outfits: { "107701": "[The Proud Road]", "107702": "[Celestial Road]" } }, "1078": { name: ["\u30E4\u30DE\u30CB\u30F3\u30BC\u30D5\u30A1\u30FC", "Yamanin Zephyr"], outfits: { "107801": "[Fluttertail Spirit]", "107802": "[Sugary Wind]" } }, "1079": { name: ["\u30D5\u30EA\u30AA\u30FC\u30BD", "Furioso"], outfits: { "107901": "[\u8863\u9326\u9084\u90F7\u306E\u745E\u661F]" } }, "1080": { name: ["\u30C8\u30E9\u30F3\u30BB\u30F3\u30C9", "Transcend"], outfits: { "108001": "[ZOKU-ZOKU GIZMO]" } }, "1081": { name: ["\u30A8\u30B9\u30DD\u30EF\u30FC\u30EB\u30B7\u30C1\u30FC", "Espoir City"], outfits: {} }, "1082": { name: ["\u30CE\u30FC\u30B9\u30D5\u30E9\u30A4\u30C8", "North Flight"], outfits: { "108201": "[Looking Fly!]" } }, "1083": { name: ["\u30B7\u30F3\u30DC\u30EA\u30AF\u30EA\u30B9\u30A8\u30B9", "Symboli Kris S"], outfits: { "108301": "[Onyx Soldier]", "108302": "[Jetblack Automaton]" } }, "1084": { name: ["\u30BF\u30CB\u30CE\u30AE\u30E0\u30EC\u30C3\u30C8", "Tanino Gimlet"], outfits: { "108401": "[\u8EAB\u306B\u7E8F\u3046\u30B1\u30E9\u30F4\u30CE\u30B9]" } }, "1085": { name: ["\u30C0\u30A4\u30A4\u30C1\u30EB\u30D3\u30FC", "Daiichi Ruby"], outfits: { "108501": "[\u83EF\u9E97\u306A\u308B\u7D05\u7389]", "108502": "[Flowing Blue]" } }, "1086": { name: ["\u30E1\u30B8\u30ED\u30E9\u30E2\u30FC\u30CC", "Mejiro Ramonu"], outfits: { "108601": "[\u30AA\u30CB\u30AD\u30B9\u30FB\u30E9\u30A4\u30F3]" } }, "1087": { name: ["\u30A2\u30B9\u30C8\u30F3\u30DE\u30FC\u30C1\u30E3\u30F3", "Aston Machan"], outfits: { "108701": "[Flare]", "108702": "[\u6EB6\u3051\u306A\u3044\u7802\u7CD6\u83D3\u5B50]" } }, "1088": { name: ["\u30B5\u30C8\u30CE\u30AF\u30E9\u30A6\u30F3", "Satono Crown"], outfits: { "108801": "[\u9ED2\u7FE0\u5343\u91CC\u884C]" } }, "1089": { name: ["\u30B7\u30E5\u30F4\u30A1\u30EB\u30B0\u30E9\u30F3", "Cheval Grand"], outfits: { "108901": "[Grand itin\xE9raire]" } }, "1090": { name: ["\u30F4\u30A3\u30EB\u30B7\u30FC\u30CA", "Verxina"], outfits: {} }, "1091": { name: ["\u30F4\u30A3\u30D6\u30ED\u30B9", "Vivlos"], outfits: { "109101": "[Voyage \xE9tincelant]" } }, "1092": { name: ["\u30C0\u30F3\u30C4\u30D5\u30EC\u30FC\u30E0", "Dantsu Flame"], outfits: {} }, "1093": { name: ["\u30B1\u30A4\u30A8\u30B9\u30DF\u30E9\u30AF\u30EB", "K.S.Miracle"], outfits: { "109301": "[Prism]" } }, "1094": { name: ["\u30B8\u30E3\u30F3\u30B0\u30EB\u30DD\u30B1\u30C3\u30C8", "Jungle Pocket"], outfits: { "109401": "[\u738B\u8005\u306E\u558A\u58F0]" } }, "1095": { name: ["\u30D3\u30EA\u30FC\u30F4", "Believe"], outfits: {} }, "1096": { name: ["\u30CE\u30FC\u30EA\u30FC\u30BA\u30F3", "No Reason"], outfits: {} }, "1097": { name: ["\u30B9\u30C6\u30A3\u30EB\u30A4\u30F3\u30E9\u30D6", "Still in Love"], outfits: {} }, "1098": { name: ["\u30B3\u30D1\u30CE\u30EA\u30C3\u30AD\u30FC", "Copano Rickey"], outfits: { "109801": "[\u9670\u967D\u516B\u5366\u2606\u958B\u904B\u8863]" } }, "1099": { name: ["\u30DB\u30C3\u30B3\u30FC\u30BF\u30EB\u30DE\u30A8", "Hokko Tarumae"], outfits: { "109901": "[\u30B9\u30BF\u30FC\u30FB\u30E9\u30A4\u30C8\u30FB\u30B7\u30C3\u30D7]", "109902": "[\u30D1\u30B9\u30C6\u30EB\u30DE\u30EA\u30F3\u30FB\u30ED\u30B3\u30C9\u30EB]" } }, "1100": { name: ["\u30EF\u30F3\u30C0\u30FC\u30A2\u30AD\u30E5\u30FC\u30C8", "Wonder Acute"], outfits: { "110001": "[Butterfly Sting]" } }, "1102": { name: ["\u30B5\u30A6\u30F3\u30BA\u30AA\u30D6\u30A2\u30FC\u30B9", "Sounds of Earth"], outfits: { "110201": "[\u30EA\u30C8\u30E2\u30FB\u30C7\u30C3\u30E9\u30FB\u30C6\u30C3\u30E9]" } }, "1103": { name: ["\u30ED\u30A4\u30B9\u30A2\u30F3\u30C9\u30ED\u30A4\u30B9", "Royce and Royce"], outfits: {} }, "1104": { name: ["\u30AB\u30C4\u30E9\u30AE\u30A8\u30FC\u30B9", "Katsuragi Ace"], outfits: { "110401": "[\u767B\u7ADC\u4E4B\u9802]", "110402": "[\u96C5\u53F7\u30FB\u58A8\u9F8D]" } }, "1105": { name: ["\u30CD\u30AA\u30E6\u30CB\u30F4\u30A1\u30FC\u30B9", "Neo Universe"], outfits: { "110501": "[Universe-Naut]", "110502": "[Like \u201CZEER\u201D]" } }, "1106": { name: ["\u30D2\u30B7\u30DF\u30E9\u30AF\u30EB", "Hishi Miracle"], outfits: { "110601": "[\u307F\u3089\u304F\u308B\u3081\u30FC\u304F\u3042\u3063\u3077\uFF01]" } }, "1107": { name: ["\u30BF\u30C3\u30D7\u30C0\u30F3\u30B9\u30B7\u30C1\u30FC", "Tap Dance City"], outfits: { "110701": "[GLITTER!]" } }, "1108": { name: ["\u30C9\u30A5\u30E9\u30E1\u30F3\u30C6", "Duramente"], outfits: { "110801": "[Red in Black]" } }, "1109": { name: ["\u30E9\u30A4\u30F3\u30AF\u30E9\u30D5\u30C8", "Rhein Kraft"], outfits: { "110901": "[Dream Successor]" } }, "1110": { name: ["\u30B7\u30FC\u30B6\u30EA\u30AA", "Cesario"], outfits: { "111001": "[Future Weaver]" } }, "1111": { name: ["\u30A8\u30A2\u30E1\u30B5\u30A4\u30A2", "Air Messiah"], outfits: { "111101": "[Inherited Hope]" } }, "1112": { name: ["\u30C7\u30A2\u30EA\u30F3\u30B0\u30CF\u30FC\u30C8", "Daring Heart"], outfits: {} }, "1113": { name: ["\u30D5\u30B5\u30A4\u30C1\u30D1\u30F3\u30C9\u30E9", "Fusaichi Pandora"], outfits: {} }, "1114": { name: ["\u30D6\u30A8\u30CA\u30D3\u30B9\u30BF", "Buena Vista"], outfits: {} }, "1115": { name: ["\u30AA\u30EB\u30D5\u30A7\u30FC\u30F4\u30EB", "Orfevre"], outfits: { "111501": "[\u7DCF\u652C]" } }, "1116": { name: ["\u30B8\u30A7\u30F3\u30C6\u30A3\u30EB\u30C9\u30F3\u30CA", "Gentildonna"], outfits: { "111601": "[Regina dei fiori]" } }, "1117": { name: ["\u30A6\u30A4\u30F3\u30D0\u30EA\u30A2\u30B7\u30AA\u30F3", "Win Variation"], outfits: { "111701": "[\u30C9\u30E9\u30DE\u30C6\u30A3\u30C3\u30AF\u30FB\u30C1\u30E5\u30C1\u30E5]" } }, "1119": { name: ["\u30C9\u30EA\u30FC\u30E0\u30B8\u30E3\u30FC\u30CB\u30FC", "Dream Journey"], outfits: { "111901": "[\u5922\u8DEF\u306E\u3088\u3059\u304C]" } }, "1120": { name: ["\u30AB\u30EB\u30B9\u30C8\u30F3\u30E9\u30A4\u30C8\u30AA", "Calstone Light O"], outfits: { "112001": "[\u771F\u5B9F\u4E00\u8DEF]" } }, "1121": { name: ["\u30C7\u30E5\u30E9\u30F3\u30C0\u30EB", "Durandal"], outfits: { "112101": "[Chevalier fid\xE8le]" } }, "1124": { name: ["\u30D0\u30D6\u30EB\u30AC\u30E0\u30D5\u30A7\u30ED\u30FC", "Bubble Gum Fellow"], outfits: { "112401": "[POPPING!]" } }, "1127": { name: ["\u30D5\u30A7\u30CE\u30FC\u30E1\u30CE", "Fenomeno"], outfits: {} }, "1128": { name: ["\u30D6\u30E9\u30B9\u30C8\u30EF\u30F3\u30D4\u30FC\u30B9", "Blast Onepiece"], outfits: {} }, "1129": { name: ["\u30A2\u30FC\u30E2\u30F3\u30C9\u30A2\u30A4", "Almond Eye"], outfits: {} }, "1130": { name: ["\u30E9\u30C3\u30AD\u30FC\u30E9\u30A4\u30E9\u30C3\u30AF", "Lucky Lilac"], outfits: {} }, "1131": { name: ["\u30B0\u30E9\u30F3\u30A2\u30EC\u30B0\u30EA\u30A2", "Gran Alegria"], outfits: { "113101": "[\u3059\u307E\u3044\u308B\u30FB\u307E\u3044\u30FB\u3046\u3047\u3044\uFF01]" } }, "1132": { name: ["\u30E9\u30F4\u30BA\u30AA\u30F3\u30EA\u30FC\u30E6\u30FC", "Loves Only You"], outfits: {} }, "1133": { name: ["\u30AF\u30ED\u30CE\u30B8\u30A7\u30CD\u30B7\u30B9", "Chrono Genesis"], outfits: {} }, "1134": { name: ["\u30AB\u30EC\u30F3\u30D6\u30FC\u30B1\u30C9\u30FC\u30EB", "Curren Bouquetd'or"], outfits: {} } };

  // ../icons.json
  var icons_default = { "1001": "/uma-tools/icons/chara/chr_icon_1001.png", "100101": "/uma-tools/icons/chara/trained_chr_icon_1001_100101_02.png", "100102": "/uma-tools/icons/chara/trained_chr_icon_1001_100130_02.png", "100103": "/uma-tools/icons/chara/trained_chr_icon_1001_100102_02.png", "1002": "/uma-tools/icons/chara/chr_icon_1002.png", "100201": "/uma-tools/icons/chara/trained_chr_icon_1002_100201_02.png", "100202": "/uma-tools/icons/chara/trained_chr_icon_1002_100230_02.png", "1003": "/uma-tools/icons/chara/chr_icon_1003.png", "100301": "/uma-tools/icons/chara/trained_chr_icon_1003_100301_02.png", "100302": "/uma-tools/icons/chara/trained_chr_icon_1003_100302_02.png", "100303": "/uma-tools/icons/chara/trained_chr_icon_1003_100343_02.png", "1004": "/uma-tools/icons/chara/chr_icon_1004.png", "100401": "/uma-tools/icons/chara/trained_chr_icon_1004_100401_02.png", "100402": "/uma-tools/icons/chara/trained_chr_icon_1004_100430_02.png", "100403": "/uma-tools/icons/chara/trained_chr_icon_1004_100410_02.png", "1005": "/uma-tools/icons/chara/chr_icon_1005.png", "100501": "/uma-tools/icons/chara/trained_chr_icon_1005_100501_02.png", "100502": "/uma-tools/icons/chara/trained_chr_icon_1005_100520_02.png", "1006": "/uma-tools/icons/chara/chr_icon_1006.png", "100601": "/uma-tools/icons/chara/trained_chr_icon_1006_100601_02.png", "100602": "/uma-tools/icons/chara/trained_chr_icon_1006_100646_02.png", "1007": "/uma-tools/icons/chara/chr_icon_1007.png", "100701": "/uma-tools/icons/chara/trained_chr_icon_1007_100701_02.png", "100702": "/uma-tools/icons/chara/trained_chr_icon_1007_100730_02.png", "100703": "/uma-tools/icons/chara/trained_chr_icon_1007_100702_02.png", "1008": "/uma-tools/icons/chara/chr_icon_1008.png", "100801": "/uma-tools/icons/chara/trained_chr_icon_1008_100801_02.png", "100802": "/uma-tools/icons/chara/trained_chr_icon_1008_100846_02.png", "1009": "/uma-tools/icons/chara/chr_icon_1009.png", "100901": "/uma-tools/icons/chara/trained_chr_icon_1009_100901_02.png", "100902": "/uma-tools/icons/chara/trained_chr_icon_1009_100946_02.png", "1010": "/uma-tools/icons/chara/chr_icon_1010.png", "101001": "/uma-tools/icons/chara/trained_chr_icon_1010_101001_02.png", "101002": "/uma-tools/icons/chara/trained_chr_icon_1010_101023_02.png", "1011": "/uma-tools/icons/chara/chr_icon_1011.png", "101101": "/uma-tools/icons/chara/trained_chr_icon_1011_101101_02.png", "101102": "/uma-tools/icons/chara/trained_chr_icon_1011_101116_02.png", "101103": "/uma-tools/icons/chara/trained_chr_icon_1011_101102_02.png", "1012": "/uma-tools/icons/chara/chr_icon_1012.png", "101201": "/uma-tools/icons/chara/trained_chr_icon_1012_101201_02.png", "101202": "/uma-tools/icons/chara/trained_chr_icon_1012_101226_02.png", "1013": "/uma-tools/icons/chara/chr_icon_1013.png", "101301": "/uma-tools/icons/chara/trained_chr_icon_1013_101301_02.png", "101302": "/uma-tools/icons/chara/trained_chr_icon_1013_101302_02.png", "101303": "/uma-tools/icons/chara/trained_chr_icon_1013_101330_02.png", "1014": "/uma-tools/icons/chara/chr_icon_1014.png", "101401": "/uma-tools/icons/chara/trained_chr_icon_1014_101401_02.png", "101402": "/uma-tools/icons/chara/trained_chr_icon_1014_101416_02.png", "1015": "/uma-tools/icons/chara/chr_icon_1015.png", "101501": "/uma-tools/icons/chara/trained_chr_icon_1015_101501_02.png", "101502": "/uma-tools/icons/chara/trained_chr_icon_1015_101510_02.png", "1016": "/uma-tools/icons/chara/chr_icon_1016.png", "101601": "/uma-tools/icons/chara/trained_chr_icon_1016_101601_02.png", "101602": "/uma-tools/icons/chara/trained_chr_icon_1016_101602_02.png", "1017": "/uma-tools/icons/chara/chr_icon_1017.png", "101701": "/uma-tools/icons/chara/trained_chr_icon_1017_101701_02.png", "101702": "/uma-tools/icons/chara/trained_chr_icon_1017_101743_02.png", "1018": "/uma-tools/icons/chara/chr_icon_1018.png", "101801": "/uma-tools/icons/chara/trained_chr_icon_1018_101801_02.png", "101802": "/uma-tools/icons/chara/trained_chr_icon_1018_101826_02.png", "1019": "/uma-tools/icons/chara/chr_icon_1019.png", "101901": "/uma-tools/icons/chara/trained_chr_icon_1019_101901_02.png", "101902": "/uma-tools/icons/chara/trained_chr_icon_1019_101940_02.png", "1020": "/uma-tools/icons/chara/chr_icon_1020.png", "102001": "/uma-tools/icons/chara/trained_chr_icon_1020_102001_02.png", "102002": "/uma-tools/icons/chara/trained_chr_icon_1020_102020_02.png", "1021": "/uma-tools/icons/chara/chr_icon_1021.png", "102101": "/uma-tools/icons/chara/trained_chr_icon_1021_102101_02.png", "102102": "/uma-tools/icons/chara/trained_chr_icon_1021_102143_02.png", "1022": "/uma-tools/icons/chara/chr_icon_1022.png", "102201": "/uma-tools/icons/chara/trained_chr_icon_1022_102201_02.png", "102202": "/uma-tools/icons/chara/trained_chr_icon_1022_102226_02.png", "1023": "/uma-tools/icons/chara/chr_icon_1023.png", "102301": "/uma-tools/icons/chara/trained_chr_icon_1023_102301_02.png", "102302": "/uma-tools/icons/chara/trained_chr_icon_1023_102346_02.png", "102303": "/uma-tools/icons/chara/trained_chr_icon_1023_102302_02.png", "1024": "/uma-tools/icons/chara/chr_icon_1024.png", "102401": "/uma-tools/icons/chara/trained_chr_icon_1024_102401_02.png", "102402": "/uma-tools/icons/chara/trained_chr_icon_1024_102426_02.png", "102403": "/uma-tools/icons/chara/trained_chr_icon_1024_102440_02.png", "1025": "/uma-tools/icons/chara/chr_icon_1025.png", "102501": "/uma-tools/icons/chara/trained_chr_icon_1025_102501_02.png", "102502": "/uma-tools/icons/chara/trained_chr_icon_1025_102513_02.png", "1026": "/uma-tools/icons/chara/chr_icon_1026.png", "102601": "/uma-tools/icons/chara/trained_chr_icon_1026_102601_02.png", "102602": "/uma-tools/icons/chara/trained_chr_icon_1026_102613_02.png", "1027": "/uma-tools/icons/chara/chr_icon_1027.png", "102701": "/uma-tools/icons/chara/trained_chr_icon_1027_102701_02.png", "102702": "/uma-tools/icons/chara/trained_chr_icon_1027_102713_02.png", "1028": "/uma-tools/icons/chara/chr_icon_1028.png", "102801": "/uma-tools/icons/chara/trained_chr_icon_1028_102801_02.png", "1029": "/uma-tools/icons/chara/chr_icon_1029.png", "102901": "/uma-tools/icons/chara/trained_chr_icon_1029_102901_02.png", "102902": "/uma-tools/icons/chara/trained_chr_icon_1029_102913_02.png", "1030": "/uma-tools/icons/chara/chr_icon_1030.png", "103001": "/uma-tools/icons/chara/trained_chr_icon_1030_103001_02.png", "103002": "/uma-tools/icons/chara/trained_chr_icon_1030_103040_02.png", "103003": "/uma-tools/icons/chara/trained_chr_icon_1030_103002_02.png", "1031": "/uma-tools/icons/chara/chr_icon_1031.png", "103101": "/uma-tools/icons/chara/trained_chr_icon_1031_103101_02.png", "103102": "/uma-tools/icons/chara/trained_chr_icon_1031_103113_02.png", "1032": "/uma-tools/icons/chara/chr_icon_1032.png", "103201": "/uma-tools/icons/chara/trained_chr_icon_1032_103201_02.png", "103202": "/uma-tools/icons/chara/trained_chr_icon_1032_103230_02.png", "103203": "/uma-tools/icons/chara/trained_chr_icon_1032_103202_02.png", "1033": "/uma-tools/icons/chara/chr_icon_1033.png", "103301": "/uma-tools/icons/chara/trained_chr_icon_1033_103301_02.png", "103302": "/uma-tools/icons/chara/trained_chr_icon_1033_103346_02.png", "1034": "/uma-tools/icons/chara/chr_icon_1034.png", "103401": "/uma-tools/icons/chara/trained_chr_icon_1034_103401_02.png", "103402": "/uma-tools/icons/chara/trained_chr_icon_1034_103443_02.png", "1035": "/uma-tools/icons/chara/chr_icon_1035.png", "103501": "/uma-tools/icons/chara/trained_chr_icon_1035_103501_02.png", "103502": "/uma-tools/icons/chara/trained_chr_icon_1035_103516_02.png", "103503": "/uma-tools/icons/chara/trained_chr_icon_1035_103502_02.png", "1036": "/uma-tools/icons/chara/chr_icon_1036.png", "103601": "/uma-tools/icons/chara/trained_chr_icon_1036_103601_02.png", "103602": "/uma-tools/icons/chara/trained_chr_icon_1036_103640_02.png", "1037": "/uma-tools/icons/chara/chr_icon_1037.png", "103701": "/uma-tools/icons/chara/trained_chr_icon_1037_103701_02.png", "103702": "/uma-tools/icons/chara/trained_chr_icon_1037_103713_02.png", "103703": "/uma-tools/icons/chara/trained_chr_icon_1037_103730_02.png", "1038": "/uma-tools/icons/chara/chr_icon_1038.png", "103801": "/uma-tools/icons/chara/trained_chr_icon_1038_103801_02.png", "103802": "/uma-tools/icons/chara/trained_chr_icon_1038_103826_02.png", "1039": "/uma-tools/icons/chara/chr_icon_1039.png", "103901": "/uma-tools/icons/chara/trained_chr_icon_1039_103901_02.png", "103902": "/uma-tools/icons/chara/trained_chr_icon_1039_103943_02.png", "1040": "/uma-tools/icons/chara/chr_icon_1040.png", "104001": "/uma-tools/icons/chara/trained_chr_icon_1040_104001_02.png", "104002": "/uma-tools/icons/chara/trained_chr_icon_1040_104043_02.png", "1041": "/uma-tools/icons/chara/chr_icon_1041.png", "104101": "/uma-tools/icons/chara/trained_chr_icon_1041_104101_02.png", "104102": "/uma-tools/icons/chara/trained_chr_icon_1041_104150_02.png", "1042": "/uma-tools/icons/chara/chr_icon_1042.png", "104201": "/uma-tools/icons/chara/trained_chr_icon_1042_104201_02.png", "104202": "/uma-tools/icons/chara/trained_chr_icon_1042_104240_02.png", "1043": "/uma-tools/icons/chara/chr_icon_1043.png", "104301": "/uma-tools/icons/chara/trained_chr_icon_1043_104301_02.png", "1044": "/uma-tools/icons/chara/chr_icon_1044.png", "104401": "/uma-tools/icons/chara/trained_chr_icon_1044_104401_02.png", "104402": "/uma-tools/icons/chara/trained_chr_icon_1044_104426_02.png", "1045": "/uma-tools/icons/chara/chr_icon_1045.png", "104501": "/uma-tools/icons/chara/trained_chr_icon_1045_104501_02.png", "104502": "/uma-tools/icons/chara/trained_chr_icon_1045_104540_02.png", "104503": "/uma-tools/icons/chara/trained_chr_icon_1045_104550_02.png", "1046": "/uma-tools/icons/chara/chr_icon_1046.png", "104601": "/uma-tools/icons/chara/trained_chr_icon_1046_104601_02.png", "104602": "/uma-tools/icons/chara/trained_chr_icon_1046_104602_02.png", "1047": "/uma-tools/icons/chara/chr_icon_1047.png", "104701": "/uma-tools/icons/chara/trained_chr_icon_1047_104701_02.png", "104702": "/uma-tools/icons/chara/trained_chr_icon_1047_104723_02.png", "1048": "/uma-tools/icons/chara/chr_icon_1048.png", "104801": "/uma-tools/icons/chara/trained_chr_icon_1048_104801_02.png", "104802": "/uma-tools/icons/chara/trained_chr_icon_1048_104823_02.png", "1049": "/uma-tools/icons/chara/chr_icon_1049.png", "104901": "/uma-tools/icons/chara/trained_chr_icon_1049_104901_02.png", "1050": "/uma-tools/icons/chara/chr_icon_1050.png", "105001": "/uma-tools/icons/chara/trained_chr_icon_1050_105001_02.png", "105002": "/uma-tools/icons/chara/trained_chr_icon_1050_105016_02.png", "105003": "/uma-tools/icons/chara/trained_chr_icon_1050_105002_02.png", "1051": "/uma-tools/icons/chara/chr_icon_1051.png", "105101": "/uma-tools/icons/chara/trained_chr_icon_1051_105101_02.png", "105102": "/uma-tools/icons/chara/trained_chr_icon_1051_105126_02.png", "1052": "/uma-tools/icons/chara/chr_icon_1052.png", "105201": "/uma-tools/icons/chara/trained_chr_icon_1052_105201_02.png", "105202": "/uma-tools/icons/chara/trained_chr_icon_1052_105210_02.png", "1053": "/uma-tools/icons/chara/chr_icon_1053.png", "105301": "/uma-tools/icons/chara/trained_chr_icon_1053_105301_02.png", "105302": "/uma-tools/icons/chara/trained_chr_icon_1053_105323_02.png", "1054": "/uma-tools/icons/chara/chr_icon_1054.png", "105401": "/uma-tools/icons/chara/trained_chr_icon_1054_105401_02.png", "1055": "/uma-tools/icons/chara/chr_icon_1055.png", "105501": "/uma-tools/icons/chara/trained_chr_icon_1055_105501_02.png", "1056": "/uma-tools/icons/chara/chr_icon_1056.png", "105601": "/uma-tools/icons/chara/trained_chr_icon_1056_105601_02.png", "105602": "/uma-tools/icons/chara/trained_chr_icon_1056_105623_02.png", "1057": "/uma-tools/icons/chara/chr_icon_1057.png", "105701": "/uma-tools/icons/chara/trained_chr_icon_1057_105701_02.png", "105702": "/uma-tools/icons/chara/trained_chr_icon_1057_105710_02.png", "1058": "/uma-tools/icons/chara/chr_icon_1058.png", "105801": "/uma-tools/icons/chara/trained_chr_icon_1058_105801_02.png", "105802": "/uma-tools/icons/chara/trained_chr_icon_1058_105840_02.png", "1059": "/uma-tools/icons/chara/chr_icon_1059.png", "105901": "/uma-tools/icons/chara/trained_chr_icon_1059_105901_02.png", "105902": "/uma-tools/icons/chara/trained_chr_icon_1059_105923_02.png", "1060": "/uma-tools/icons/chara/chr_icon_1060.png", "106001": "/uma-tools/icons/chara/trained_chr_icon_1060_106001_02.png", "106002": "/uma-tools/icons/chara/trained_chr_icon_1060_106050_02.png", "106003": "/uma-tools/icons/chara/trained_chr_icon_1060_106010_02.png", "1061": "/uma-tools/icons/chara/chr_icon_1061.png", "106101": "/uma-tools/icons/chara/trained_chr_icon_1061_106101_02.png", "106102": "/uma-tools/icons/chara/trained_chr_icon_1061_106150_02.png", "106103": "/uma-tools/icons/chara/trained_chr_icon_1061_106126_02.png", "1062": "/uma-tools/icons/chara/chr_icon_1062.png", "106201": "/uma-tools/icons/chara/trained_chr_icon_1062_106201_02.png", "106202": "/uma-tools/icons/chara/trained_chr_icon_1062_106250_02.png", "1063": "/uma-tools/icons/chara/chr_icon_1063.png", "106301": "/uma-tools/icons/chara/trained_chr_icon_1063_106301_02.png", "1064": "/uma-tools/icons/chara/chr_icon_1064.png", "106401": "/uma-tools/icons/chara/trained_chr_icon_1064_106401_02.png", "106402": "/uma-tools/icons/chara/trained_chr_icon_1064_106446_02.png", "1065": "/uma-tools/icons/chara/chr_icon_1065.png", "106501": "/uma-tools/icons/chara/trained_chr_icon_1065_106501_02.png", "106502": "/uma-tools/icons/chara/trained_chr_icon_1065_106520_02.png", "1066": "/uma-tools/icons/chara/chr_icon_1066.png", "106601": "/uma-tools/icons/chara/trained_chr_icon_1066_106601_02.png", "1067": "/uma-tools/icons/chara/chr_icon_1067.png", "106701": "/uma-tools/icons/chara/trained_chr_icon_1067_106701_02.png", "106702": "/uma-tools/icons/chara/trained_chr_icon_1067_106710_02.png", "106703": "/uma-tools/icons/chara/trained_chr_icon_1067_106702_02.png", "1068": "/uma-tools/icons/chara/chr_icon_1068.png", "106801": "/uma-tools/icons/chara/trained_chr_icon_1068_106801_02.png", "106802": "/uma-tools/icons/chara/trained_chr_icon_1068_106810_02.png", "106803": "/uma-tools/icons/chara/trained_chr_icon_1068_106802_02.png", "1069": "/uma-tools/icons/chara/chr_icon_1069.png", "106901": "/uma-tools/icons/chara/trained_chr_icon_1069_106901_02.png", "106902": "/uma-tools/icons/chara/trained_chr_icon_1069_106920_02.png", "1070": "/uma-tools/icons/chara/chr_icon_1070.png", "107001": "/uma-tools/icons/chara/trained_chr_icon_1070_107001_02.png", "1071": "/uma-tools/icons/chara/chr_icon_1071.png", "107101": "/uma-tools/icons/chara/trained_chr_icon_1071_107101_02.png", "107102": "/uma-tools/icons/chara/trained_chr_icon_1071_107120_02.png", "1072": "/uma-tools/icons/chara/chr_icon_1072.png", "107201": "/uma-tools/icons/chara/trained_chr_icon_1072_107201_02.png", "107202": "/uma-tools/icons/chara/trained_chr_icon_1072_107250_02.png", "1073": "/uma-tools/icons/chara/chr_icon_1073.png", "107301": "/uma-tools/icons/chara/trained_chr_icon_1073_107301_02.png", "1074": "/uma-tools/icons/chara/chr_icon_1074.png", "107401": "/uma-tools/icons/chara/trained_chr_icon_1074_107401_02.png", "107402": "/uma-tools/icons/chara/trained_chr_icon_1074_107446_02.png", "1075": "/uma-tools/icons/chara/chr_icon_1075.png", "1076": "/uma-tools/icons/chara/chr_icon_1076.png", "107601": "/uma-tools/icons/chara/trained_chr_icon_1076_107601_02.png", "1077": "/uma-tools/icons/chara/chr_icon_1077.png", "107701": "/uma-tools/icons/chara/trained_chr_icon_1077_107701_02.png", "107702": "/uma-tools/icons/chara/trained_chr_icon_1077_107746_02.png", "1078": "/uma-tools/icons/chara/chr_icon_1078.png", "107801": "/uma-tools/icons/chara/trained_chr_icon_1078_107801_02.png", "107802": "/uma-tools/icons/chara/trained_chr_icon_1078_107813_02.png", "1079": "/uma-tools/icons/chara/chr_icon_1079.png", "107901": "/uma-tools/icons/chara/trained_chr_icon_1079_107901_02.png", "1080": "/uma-tools/icons/chara/chr_icon_1080.png", "108001": "/uma-tools/icons/chara/trained_chr_icon_1080_108001_02.png", "1081": "/uma-tools/icons/chara/chr_icon_1081.png", "1082": "/uma-tools/icons/chara/chr_icon_1082.png", "108201": "/uma-tools/icons/chara/trained_chr_icon_1082_108201_02.png", "1083": "/uma-tools/icons/chara/chr_icon_1083.png", "108301": "/uma-tools/icons/chara/trained_chr_icon_1083_108301_02.png", "108302": "/uma-tools/icons/chara/trained_chr_icon_1083_108340_02.png", "1084": "/uma-tools/icons/chara/chr_icon_1084.png", "108401": "/uma-tools/icons/chara/trained_chr_icon_1084_108401_02.png", "1085": "/uma-tools/icons/chara/chr_icon_1085.png", "108501": "/uma-tools/icons/chara/trained_chr_icon_1085_108501_02.png", "108502": "/uma-tools/icons/chara/trained_chr_icon_1085_108520_02.png", "1086": "/uma-tools/icons/chara/chr_icon_1086.png", "108601": "/uma-tools/icons/chara/trained_chr_icon_1086_108601_02.png", "1087": "/uma-tools/icons/chara/chr_icon_1087.png", "108701": "/uma-tools/icons/chara/trained_chr_icon_1087_108701_02.png", "108702": "/uma-tools/icons/chara/trained_chr_icon_1087_108713_02.png", "1088": "/uma-tools/icons/chara/chr_icon_1088.png", "108801": "/uma-tools/icons/chara/trained_chr_icon_1088_108801_02.png", "1089": "/uma-tools/icons/chara/chr_icon_1089.png", "108901": "/uma-tools/icons/chara/trained_chr_icon_1089_108901_02.png", "1090": "/uma-tools/icons/chara/chr_icon_1090.png", "1091": "/uma-tools/icons/chara/chr_icon_1091.png", "109101": "/uma-tools/icons/chara/trained_chr_icon_1091_109101_02.png", "1092": "/uma-tools/icons/chara/chr_icon_1092.png", "1093": "/uma-tools/icons/chara/chr_icon_1093.png", "109301": "/uma-tools/icons/chara/trained_chr_icon_1093_109301_02.png", "1094": "/uma-tools/icons/chara/chr_icon_1094.png", "109401": "/uma-tools/icons/chara/trained_chr_icon_1094_109401_02.png", "1095": "/uma-tools/icons/chara/chr_icon_1095.png", "1096": "/uma-tools/icons/chara/chr_icon_1096.png", "1097": "/uma-tools/icons/chara/chr_icon_1097.png", "1098": "/uma-tools/icons/chara/chr_icon_1098.png", "109801": "/uma-tools/icons/chara/trained_chr_icon_1098_109801_02.png", "1099": "/uma-tools/icons/chara/chr_icon_1099.png", "109901": "/uma-tools/icons/chara/trained_chr_icon_1099_109901_02.png", "109902": "/uma-tools/icons/chara/trained_chr_icon_1099_109930_02.png", "1100": "/uma-tools/icons/chara/chr_icon_1100.png", "110001": "/uma-tools/icons/chara/trained_chr_icon_1100_110001_02.png", "1102": "/uma-tools/icons/chara/chr_icon_1102.png", "110201": "/uma-tools/icons/chara/trained_chr_icon_1102_110201_02.png", "1103": "/uma-tools/icons/chara/chr_icon_1103.png", "1104": "/uma-tools/icons/chara/chr_icon_1104.png", "110401": "/uma-tools/icons/chara/trained_chr_icon_1104_110401_02.png", "110402": "/uma-tools/icons/chara/trained_chr_icon_1104_110410_02.png", "1105": "/uma-tools/icons/chara/chr_icon_1105.png", "110501": "/uma-tools/icons/chara/trained_chr_icon_1105_110501_02.png", "110502": "/uma-tools/icons/chara/trained_chr_icon_1105_110523_02.png", "1106": "/uma-tools/icons/chara/chr_icon_1106.png", "110601": "/uma-tools/icons/chara/trained_chr_icon_1106_110601_02.png", "1107": "/uma-tools/icons/chara/chr_icon_1107.png", "110701": "/uma-tools/icons/chara/trained_chr_icon_1107_110701_02.png", "1108": "/uma-tools/icons/chara/chr_icon_1108.png", "110801": "/uma-tools/icons/chara/trained_chr_icon_1108_110801_02.png", "1109": "/uma-tools/icons/chara/chr_icon_1109.png", "110901": "/uma-tools/icons/chara/trained_chr_icon_1109_110901_02.png", "1110": "/uma-tools/icons/chara/chr_icon_1110.png", "111001": "/uma-tools/icons/chara/trained_chr_icon_1110_111001_02.png", "1111": "/uma-tools/icons/chara/chr_icon_1111.png", "111101": "/uma-tools/icons/chara/trained_chr_icon_1111_111101_02.png", "1112": "/uma-tools/icons/chara/chr_icon_1112.png", "1113": "/uma-tools/icons/chara/chr_icon_1113.png", "1114": "/uma-tools/icons/chara/chr_icon_1114.png", "1115": "/uma-tools/icons/chara/chr_icon_1115.png", "111501": "/uma-tools/icons/chara/trained_chr_icon_1115_111501_02.png", "1116": "/uma-tools/icons/chara/chr_icon_1116.png", "111601": "/uma-tools/icons/chara/trained_chr_icon_1116_111601_02.png", "1117": "/uma-tools/icons/chara/chr_icon_1117.png", "111701": "/uma-tools/icons/chara/trained_chr_icon_1117_111701_02.png", "1119": "/uma-tools/icons/chara/chr_icon_1119.png", "111901": "/uma-tools/icons/chara/trained_chr_icon_1119_111901_02.png", "1120": "/uma-tools/icons/chara/chr_icon_1120.png", "112001": "/uma-tools/icons/chara/trained_chr_icon_1120_112001_02.png", "1121": "/uma-tools/icons/chara/chr_icon_1121.png", "112101": "/uma-tools/icons/chara/trained_chr_icon_1121_112101_02.png", "1124": "/uma-tools/icons/chara/chr_icon_1124.png", "112401": "/uma-tools/icons/chara/trained_chr_icon_1124_112401_02.png", "1127": "/uma-tools/icons/chara/chr_icon_1127.png", "1128": "/uma-tools/icons/chara/chr_icon_1128.png", "1129": "/uma-tools/icons/chara/chr_icon_1129.png", "1130": "/uma-tools/icons/chara/chr_icon_1130.png", "1131": "/uma-tools/icons/chara/chr_icon_1131.png", "113101": "/uma-tools/icons/chara/trained_chr_icon_1131_113101_02.png", "1132": "/uma-tools/icons/chara/chr_icon_1132.png", "1133": "/uma-tools/icons/chara/chr_icon_1133.png", "1134": "/uma-tools/icons/chara/chr_icon_1134.png" };

  // ../components/HorseDef.tsx
  var umaAltIds = Object.keys(umas_default).flatMap((id3) => Object.keys(umas_default[id3].outfits));
  var umaNamesForSearch = {};
  umaAltIds.forEach((id3) => {
    const u3 = umas_default[id3.slice(0, 4)];
    umaNamesForSearch[id3] = (u3.outfits[id3] + " " + u3.name[1]).toUpperCase().replace(/\./g, "");
  });
  function searchNames(query) {
    const q3 = query.toUpperCase().replace(/\./g, "");
    return umaAltIds.filter((oid) => umaNamesForSearch[oid].indexOf(q3) > -1);
  }
  function UmaSelector(props) {
    const randomMob = F2(() => `/uma-tools/icons/mob/trained_mob_chr_icon_${8e3 + Math.floor(Math.random() * 624)}_000001_01.png`, []);
    const u3 = props.value && umas_default[props.value.slice(0, 4)];
    const input = _(null);
    const suggestionsContainer = _(null);
    const [open, setOpen] = h2(false);
    const [activeIdx, setActiveIdx] = h2(-1);
    function update9(q3) {
      return { input: q3, suggestions: searchNames(q3) };
    }
    const [query, search] = s2((_2, q3) => update9(q3), u3 && u3.name[1], update9);
    function confirm(oid) {
      setOpen(false);
      props.select(oid);
      const uname = umas_default[oid.slice(0, 4)].name[1];
      search(uname);
      setActiveIdx(-1);
      input.current && input.current.blur();
    }
    function focus() {
      input.current && input.current.select();
    }
    function setActiveAndScroll(idx) {
      setActiveIdx(idx);
      if (!suggestionsContainer.current)
        return;
      const container = suggestionsContainer.current;
      const li = container.querySelector(`[data-uma-id="${query.suggestions[idx]}"]`);
      const ch = container.offsetHeight - 4;
      if (li.offsetTop < container.scrollTop) {
        container.scrollTop = li.offsetTop;
      } else if (li.offsetTop >= container.scrollTop + ch) {
        const h3 = li.offsetHeight;
        container.scrollTop = (li.offsetTop / h3 - (ch / h3 - 1)) * h3;
      }
    }
    function handleClick(e4) {
      const li = e4.target.closest(".umaSuggestion");
      if (li == null)
        return;
      e4.stopPropagation();
      confirm(li.dataset.umaId);
    }
    function handleInput(e4) {
      const q3 = e4.target.value;
      search(e4.target.value);
    }
    function handleKeyDown(e4) {
      const l4 = query.suggestions.length;
      switch (e4.keyCode) {
        case 13:
          if (activeIdx > -1)
            confirm(query.suggestions[activeIdx]);
          break;
        case 38:
          setActiveAndScroll((activeIdx - 1 + l4) % l4);
          break;
        case 40:
          setActiveAndScroll((activeIdx + 1 + l4) % l4);
          break;
      }
    }
    return /* @__PURE__ */ y("div", { class: "umaSelector" }, /* @__PURE__ */ y("div", { class: "umaSelectorIconsBox", onClick: focus }, /* @__PURE__ */ y("img", { src: props.value ? icons_default[props.value] : randomMob }), /* @__PURE__ */ y("img", { src: "/uma-tools/icons/utx_ico_umamusume_00.png" })), /* @__PURE__ */ y("div", { class: "umaEpithet" }, /* @__PURE__ */ y("span", null, props.value && u3.outfits[props.value])), /* @__PURE__ */ y("div", { class: "umaSelectWrapper" }, /* @__PURE__ */ y("input", { type: "text", class: "umaSelectInput", value: query.input, tabindex: props.tabindex, onInput: handleInput, onKeyDown: handleKeyDown, onFocus: () => setOpen(true), onBlur: () => setOpen(false), ref: input }), /* @__PURE__ */ y("ul", { class: `umaSuggestions ${open ? "open" : ""}`, onMouseDown: handleClick, ref: suggestionsContainer }, query.suggestions.map((oid, i4) => {
      const uid = oid.slice(0, 4);
      return /* @__PURE__ */ y("li", { key: oid, "data-uma-id": oid, class: `umaSuggestion ${i4 == activeIdx ? "selected" : ""}` }, /* @__PURE__ */ y("img", { src: icons_default[oid] }), /* @__PURE__ */ y("span", null, umas_default[uid].outfits[oid], " ", umas_default[uid].name[1]));
    }))));
  }
  function rankForStat(x3) {
    if (x3 > 1200) {
      return 18 + Math.floor((x3 - 1200) / 100) * 10 + Math.floor(x3 / 10) % 10;
    } else if (x3 >= 1150) {
      return 17;
    } else if (x3 >= 1100) {
      return 16;
    } else if (x3 >= 400) {
      return 8 + Math.floor((x3 - 400) / 100);
    } else {
      return Math.floor(x3 / 50);
    }
  }
  function Stat(props) {
    return /* @__PURE__ */ y("div", { class: "horseParam" }, /* @__PURE__ */ y("img", { src: `/uma-tools/icons/statusrank/ui_statusrank_${(100 + rankForStat(props.value)).toString().slice(1)}.png` }), /* @__PURE__ */ y("input", { type: "number", min: "1", max: "1999", value: props.value, tabindex: props.tabindex, onInput: (e4) => props.change(+e4.currentTarget.value) }));
  }
  var APTITUDES = Object.freeze(["S", "A", "B", "C", "D", "E", "F", "G"]);
  function AptitudeIcon(props) {
    const idx = 7 - APTITUDES.indexOf(props.a);
    return /* @__PURE__ */ y("img", { src: `/uma-tools/icons/utx_ico_statusrank_${(100 + idx).toString().slice(1)}.png` });
  }
  function AptitudeSelect(props) {
    const [open, setOpen] = h2(false);
    function setAptitude(e4) {
      e4.stopPropagation();
      props.setA(e4.currentTarget.dataset.horseAptitude);
      setOpen(false);
    }
    return /* @__PURE__ */ y("div", { class: "horseAptitudeSelect", tabindex: props.tabindex, onClick: () => setOpen(!open), onBlur: setOpen.bind(null, false) }, /* @__PURE__ */ y("span", null, /* @__PURE__ */ y(AptitudeIcon, { a: props.a })), /* @__PURE__ */ y("ul", { style: open ? "display:block" : "display:none" }, APTITUDES.map((a4) => /* @__PURE__ */ y("li", { key: a4, "data-horse-aptitude": a4, onClick: setAptitude }, /* @__PURE__ */ y(AptitudeIcon, { a: a4 })))));
  }
  function StrategySelect(props) {
    return /* @__PURE__ */ y("select", { class: "horseStrategySelect", value: props.s, tabindex: props.tabindex, onInput: (e4) => props.setS(e4.currentTarget.value) }, /* @__PURE__ */ y("option", { value: "Nige" }, "\u9003\u3052"), /* @__PURE__ */ y("option", { value: "Senkou" }, "\u5148\u884C"), /* @__PURE__ */ y("option", { value: "Sasi" }, "\u5DEE\u3057"), /* @__PURE__ */ y("option", { value: "Oikomi" }, "\u8FFD\u8FBC"), /* @__PURE__ */ y("option", { value: "Oonige" }, "\u5927\u9003\u3052"));
  }
  var nonUniqueSkills = Object.keys(skill_data_default).filter((id3) => skill_data_default[id3].rarity < 3 || skill_data_default[id3].rarity > 5);
  function assertIsSkill(sid) {
    console.assert(skill_data_default[sid] != null);
  }
  function uniqueSkillForUma(oid) {
    const i4 = +oid.slice(1, -2), v3 = +oid.slice(-2);
    const sid = (1e5 + 1e4 * (v3 - 1) + i4 * 10 + 1).toString();
    assertIsSkill(sid);
    return sid;
  }
  function skillComparator(a4, b3) {
    const x3 = skill_meta_default[a4].order, y3 = skill_meta_default[b3].order;
    return +(y3 < x3) - +(x3 < y3) || +(b3 < a4) - +(a4 < b3);
  }
  function SkillSet(iterable) {
    return SortedSet(iterable, skillComparator);
  }
  var HorseState = class extends Record({
    outfitId: "",
    speed: 1850,
    stamina: 1200,
    power: 1500,
    guts: 1200,
    wisdom: 1300,
    strategy: "Senkou",
    distanceAptitude: "S",
    surfaceAptitude: "A",
    strategyAptitude: "A",
    skills: SkillSet([])
  }) {
  };
  var totalTabs = 0;
  function horseDefTabs() {
    return totalTabs;
  }
  function HorseDef(props) {
    const { state, setState } = props;
    const [skillPickerOpen, setSkillPickerOpen] = h2(false);
    const [expanded, setExpanded] = h2(() => Set2());
    const tabstart = props.tabstart();
    let tabi = 0;
    function tabnext() {
      if (++tabi > totalTabs)
        totalTabs = tabi;
      return tabstart + tabi - 1;
    }
    const umaId = state.outfitId;
    const selectableSkills = F2(() => nonUniqueSkills.filter((id3) => skill_data_default[id3].rarity != 6 || id3.startsWith(umaId)), [umaId]);
    function setter(prop) {
      return (x3) => setState(state.set(prop, x3));
    }
    const setSkills = setter("skills");
    function setUma(id3) {
      setState(
        state.set("outfitId", id3).set("skills", state.skills.filter((id4) => skill_data_default[id4].rarity < 3).add(uniqueSkillForUma(id3)))
      );
    }
    function openSkillPicker(e4) {
      e4.stopPropagation();
      setSkillPickerOpen(true);
    }
    function setSkillsAndClose(ids) {
      setSkills(SkillSet(ids));
      setSkillPickerOpen(false);
    }
    function handleSkillClick(e4) {
      e4.stopPropagation();
      const se = e4.target.closest(".skill, .expandedSkill");
      if (se == null)
        return;
      if (e4.target.classList.contains("skillDismiss")) {
        setSkills(state.skills.delete(se.dataset.skillid));
      } else if (se.classList.contains("expandedSkill")) {
        setExpanded(expanded.delete(se.dataset.skillid));
      } else {
        setExpanded(expanded.add(se.dataset.skillid));
      }
    }
    p2(function() {
      window.requestAnimationFrame(
        () => document.querySelectorAll(".horseExpandedSkill").forEach((e4) => {
          e4.style.gridRow = "span " + Math.ceil(e4.firstChild.offsetHeight / 64);
        })
      );
    }, [expanded]);
    const skillList = F2(function() {
      const u3 = uniqueSkillForUma(umaId);
      return Array.from(state.skills).map(
        (id3) => expanded.has(id3) ? /* @__PURE__ */ y("li", { key: id3, class: "horseExpandedSkill" }, /* @__PURE__ */ y(ExpandedSkillDetails, { id: id3, distanceFactor: props.courseDistance, dismissable: id3 != u3 })) : /* @__PURE__ */ y("li", { key: id3, style: "" }, /* @__PURE__ */ y(Skill, { id: id3, selected: false, dismissable: id3 != u3 }))
      );
    }, [state.skills, umaId, expanded, props.courseDistance]);
    return /* @__PURE__ */ y("div", { class: "horseDef" }, /* @__PURE__ */ y("div", { class: "horseDefHeader" }, props.title), /* @__PURE__ */ y(UmaSelector, { value: umaId, select: setUma, tabindex: tabnext() }), /* @__PURE__ */ y("div", { class: "horseParams" }, /* @__PURE__ */ y("div", { class: "horseParamHeader" }, /* @__PURE__ */ y("img", { src: "/uma-tools/icons/status_00.png" }), /* @__PURE__ */ y("span", null, "Speed")), /* @__PURE__ */ y("div", { class: "horseParamHeader" }, /* @__PURE__ */ y("img", { src: "/uma-tools/icons/status_01.png" }), /* @__PURE__ */ y("span", null, "Stamina")), /* @__PURE__ */ y("div", { class: "horseParamHeader" }, /* @__PURE__ */ y("img", { src: "/uma-tools/icons/status_02.png" }), /* @__PURE__ */ y("span", null, "Power")), /* @__PURE__ */ y("div", { class: "horseParamHeader" }, /* @__PURE__ */ y("img", { src: "/uma-tools/icons/status_03.png" }), /* @__PURE__ */ y("span", null, "Guts")), /* @__PURE__ */ y("div", { class: "horseParamHeader" }, /* @__PURE__ */ y("img", { src: "/uma-tools/icons/status_04.png" }), /* @__PURE__ */ y("span", null, "Wisdom")), /* @__PURE__ */ y(Stat, { value: state.speed, change: setter("speed"), tabindex: tabnext() }), /* @__PURE__ */ y(Stat, { value: state.stamina, change: setter("stamina"), tabindex: tabnext() }), /* @__PURE__ */ y(Stat, { value: state.power, change: setter("power"), tabindex: tabnext() }), /* @__PURE__ */ y(Stat, { value: state.guts, change: setter("guts"), tabindex: tabnext() }), /* @__PURE__ */ y(Stat, { value: state.wisdom, change: setter("wisdom"), tabindex: tabnext() })), /* @__PURE__ */ y("div", { class: "horseAptitudes" }, /* @__PURE__ */ y("div", null, /* @__PURE__ */ y("span", null, "Surface aptitude:"), /* @__PURE__ */ y(AptitudeSelect, { a: state.surfaceAptitude, setA: setter("surfaceAptitude"), tabindex: tabnext() })), /* @__PURE__ */ y("div", null, /* @__PURE__ */ y("span", null, "Distance aptitude:"), /* @__PURE__ */ y(AptitudeSelect, { a: state.distanceAptitude, setA: setter("distanceAptitude"), tabindex: tabnext() })), /* @__PURE__ */ y("div", null, /* @__PURE__ */ y("span", null, "Strategy:"), /* @__PURE__ */ y(StrategySelect, { s: state.strategy, setS: setter("strategy"), tabindex: tabnext() })), /* @__PURE__ */ y("div", null, /* @__PURE__ */ y("span", null, "Strategy aptitude:"), /* @__PURE__ */ y(AptitudeSelect, { a: state.strategyAptitude, setA: setter("strategyAptitude"), tabindex: tabnext() }))), /* @__PURE__ */ y("div", { class: "horseSkillHeader" }, "Skills"), /* @__PURE__ */ y("div", { class: "horseSkillListWrapper", onClick: handleSkillClick }, /* @__PURE__ */ y("ul", { class: "horseSkillList" }, skillList, /* @__PURE__ */ y("li", { key: "add" }, /* @__PURE__ */ y("div", { class: "skill addSkillButton", onClick: openSkillPicker, tabindex: tabnext() }, /* @__PURE__ */ y("span", null, "+"), "Add Skill")))), /* @__PURE__ */ y("div", { class: `horseSkillPickerOverlay ${skillPickerOpen ? "open" : ""}`, onClick: setSkillPickerOpen.bind(null, false) }), /* @__PURE__ */ y("div", { class: `horseSkillPickerWrapper ${skillPickerOpen ? "open" : ""}` }, /* @__PURE__ */ y(SkillList, { ids: selectableSkills, selected: new Set(state.skills), setSelected: setSkillsAndClose })));
  }

  // ../../skilltool/data/skillnames.json
  var skillnames_default = { "1000011": ["\u30AB\u30FC\u30CB\u30D0\u30EB\u30DC\u30FC\u30CA\u30B9", "Carnival Bonus (obsolete)"], "1000012": ["\u30AB\u30FC\u30CB\u30D0\u30EB\u30DC\u30FC\u30CA\u30B9", "Carnival Bonus (obsolete)"], "1000013": ["\u30AB\u30FC\u30CB\u30D0\u30EB\u30DC\u30FC\u30CA\u30B9", "Carnival Bonus (obsolete)"], "1000014": ["\u30AB\u30FC\u30CB\u30D0\u30EB\u30DC\u30FC\u30CA\u30B9", "Carnival Bonus (obsolete)"], "1000015": ["\u30AB\u30FC\u30CB\u30D0\u30EB\u30DC\u30FC\u30CA\u30B9", "Carnival Bonus (obsolete)"], "1000016": ["\u30AB\u30FC\u30CB\u30D0\u30EB\u30DC\u30FC\u30CA\u30B9", "Carnival Bonus (obsolete)"], "1000017": ["\u30AB\u30FC\u30CB\u30D0\u30EB\u30DC\u30FC\u30CA\u30B9", "Carnival Bonus"], "100011": ["\u30B7\u30E5\u30FC\u30C6\u30A3\u30F3\u30B0\u30B9\u30BF\u30FC", "Shooting Star"], "100021": ["\u5148\u982D\u306E\u666F\u8272\u306F\u8B72\u3089\u306A\u3044\u2026\uFF01", "I'm Not Giving up the Lead!"], "100031": ["\u7A76\u6975\u30C6\u30A4\u30AA\u30FC\u30B9\u30C6\u30C3\u30D7", "Ultimate Teio Step"], "100041": ["\u7D05\u7114\u30AE\u30A2/LP1211-M", "Red Flame Gear/LP1211-M"], "100051": ["\u714C\u661F\u306E\u30F4\u30A9\u30FC\u30C9\u30F4\u30A3\u30EB", "Glittering Star Vaudeville"], "100061": ["\u52DD\u5229\u306E\u9F13\u52D5", "The Beat of Victory"], "100071": ["\u4E0D\u6C88\u8266\u3001\u629C\u9328\u30A9\u30C3\uFF01", "Unsinkable Ship, Anchored!"], "100081": ["\u30AB\u30C3\u30C6\u30A3\u30F3\u30B0\xD7DRIVE\uFF01", "Cutting \xD7 DRIVE!"], "100091": ["\u30D6\u30EA\u30EA\u30A2\u30F3\u30C8\u30FB\u30EC\u30C3\u30C9\u30A8\u30FC\u30B9", "Brilliant Red Ace"], "100101": ["\u30F4\u30A3\u30AF\u30C8\u30EA\u30FC\u30B7\u30E7\u30C3\u30C8\uFF01", "Victory Shot!"], "100101111": ["\u306F\u3089\u307A\u3053\u5927\u5C06", "Hungry Commander"], "100101211": ["\u5922\u53F6\u3048\u308B\u672B\u811A", "Dream-fulfilling Sprint"], "100102111": ["\u771F\u590F\u306E\u601D\u3044\u5207\u308A", "Midsummer Resolution"], "100102211": ["\u771F\u590F\u306E\u7DCF\u5927\u5C06", "Midsummer Commander"], "100103111": ["\u6012\u6D9B\u306E\u51FA\u9663", "Tempestuous Attack"], "100103211": ["\u65E5\u4E4B\u672C\u4E00\u306E\u30C9\u6839\u6027", "Guts of the Rising Sun"], "100111": ["\u7CBE\u795E\u4E00\u5230\u4F55\u4E8B\u304B\u6210\u3089\u3056\u3089\u3093", "Where There's a Will, There's a Way"], "100121": ["\u30BF\u30A4\u30DE\u30F3\uFF01\u30C7\u30C3\u30C9\u30D2\u30FC\u30C8\uFF01", "One-On-One! Dead Heat!"], "100131": ["\u8CB4\u9855\u306E\u4F7F\u547D\u3092\u679C\u305F\u3059\u3079\u304F", "Fulfilling Your Noble Duty"], "100141": ["\u30D7\u30E9\u30F3\u30C1\u30E3\u2606\u30AC\u30CA\u30C9\u30FC\u30EB", "Plancha \u2606 Ganador"], "100151": ["\u30F4\u30A3\u30C3\u30C8\u30FC\u30EA\u30A2\u306B\u6367\u3050\u821E\u8E0F", "Dance for Vittoria"], "100161": ["Shadow Break", "Shadow Break"], "100171": ["\u6C5D\u3001\u7687\u5E1D\u306E\u795E\u5A01\u3092\u898B\u3088", "Thou, Witness the Heavenly Might of the Emperor"], "100181": ["\u30D6\u30EC\u30A4\u30BA\u30FB\u30AA\u30D6\u30FB\u30D7\u30E9\u30A4\u30C9", "Blaze of Pride"], "100191": ["\u5C0A\u307F\u2606\uFF97\uFF7D\uFF84\uFF7D\uFF8A\uFF9F\u2014(\uFF9F\u2200\uFF9F)\u2014\uFF84!", "Kyuute\u2606Last SpuU(\uFF9F\u2200\uFF9F)Uurt!"], "100201": ["\u30A2\u30F3\u30B0\u30EA\u30F3\u30B0\xD7\u30B9\u30AD\u30FC\u30DF\u30F3\u30B0", "Angling\xD7Scheming"], "100201111": ["\u6700\u5927\u96C6\u4E2D", "Perfect Concentration"], "100201211": ["\u7570\u6B21\u5143\u306E\u9003\u4EA1\u8005", "Dimensional Runaway"], "100202111": ["\u7460\u7483\u8272\u30A8\u30B9\u30B1\u30A4\u30D7", "Lapis Lazuli Escape"], "100202121": ["\u6EC4\u6D77\u3092\u8D8A\u3048\u3057\u30D5\u30FC\u30AC", "Crossing the Ocean"], "100202211": ["\u84BC\u5929\u3092\u99C6\u3051\u308B\u30E9\u30FC\u30D5\u30A1\u30AC", "Sky-Striding R\xE1faga"], "100211": ["\u767D\u3044\u7A32\u59BB\u3001\u898B\u305B\u305F\u308B\u3067\uFF01", "Imma Show You White Lightning!"], "100221": ["Fairy tale", "Fairy Tale"], "100231": ["\u2234win Q.E.D.", "\u2234win Q.E.D."], "100241": ["\u3072\u3089\u3081\u304D\u2606\u30E9\u30F3\u30C7\u30A3\u30F3\u30B0", "Inspiration \u2606 Landing"], "100251": ["\u30A2\u30CA\u30BF\u30F2\u30FB\u30AA\u30A4\u30AB\u30B1\u30C6", "Chasing After You"], "100261": ["G00 1st.F\u221E;", "G00 1st.F\u221E;"], "100271": ["\u30EC\u30C3\u30C4\u30FB\u30A2\u30CA\u30DC\u30EA\u30C3\u30AF\uFF01", "Let's Anabolic!"], "100281": ["I'M\u2606FULL\u2606SPEED!!", "I'M\u2606FULL\u2606SPEED!!"], "100291": ["\u3086\u304D\u3042\u304B\u308A\u3001\u304A\u3044\u304B\u3051\u3066", "Chasing the Snowlight"], "100301": ["\u30D6\u30EB\u30FC\u30ED\u30FC\u30BA\u30C1\u30A7\u30A4\u30B5\u30FC", "Blue Rose Chaser"], "100301111": ["\u5929\u624D\u7684\u6280\u5DE7", "Genius Technique"], "100301211": ["\u5E1D\u738B\u30B9\u30C6\u30C3\u30D7", "Teio Step"], "100302111": ["\u30EC\u30FC\u30B9\u306E\u5929\u624D", "Racing Genius"], "100302211": ["\u5730\u5E73\u306E\u5F7C\u65B9\u307E\u3067", "Beyond the Horizon"], "100303111": ["\u5929\u8CE6\u306E\u8EAB\u3054\u306A\u3057", "Gifted Grace"], "100303211": ["\u76E4\u697D\u904A\u5B09", "Playful Revelry"], "100303221": ["\u671D\u8179\u3001\u671D\u8179\u3001\u304B\u3084\u3059\u3057\u3084\u266A", "Easy, Peasy, Lemon Squeezy"], "100311": ["\u30C1\u30E3\u30FC\u30B8\u5B8C\u4E86\uFF01\u5168\u901F\u524D\u9032\uFF01", "Charge Complete! Full Speed Ahead!"], "100321": ["U=ma2", "U=ma2"], "100331": ["\u30C7\u30A3\u30AA\u30B9\u30AF\u30ED\u30A4\u306E\u6D41\u661F", "Meteor of Dioscuri"], "100341": ["\u5FEB\u8D70\u304B\u306A\u3001\u5FEB\u8D70\u304B\u306A\uFF01", "Fast Running, Fast Running!"], "100351": ["\u52DD\u5229\u306E\u30C1\u30B1\u30C3\u30C8\u3092\u3001\u541B\u306B\u30C3\uFF01", "The Ticket to Victory, for You!"], "100361": ["trigger:BEAT", "trigger:BEAT"], "100371": ["Schwarzes Schwert", "Schwarzes Schwert"], "100381": ["#LookatCurren", "#LookatCurren"], "100391": ["\u59EB\u305F\u308B\u3082\u306E\u3001\u52DD\u5229\u3092\u3053\u306E\u624B\u306B", "Victory Befitting a Princess"], "100401": ["KEEP IT REAL.", "KEEP IT REAL."], "100401111": ["\u304B\u3063\u98DB\u3070\u3059\u308F\u3088\uFF01", "Blasting Off!"], "100401211": ["\u7D05\u84EE\u306E\u30AA\u30FC\u30D0\u30FC\u30EC\u30D6", "Crimson Over-revving"], "100402111": ["\u30C9\u30AD\u30C3\u2606\u3058\u3083\u3058\u3083\u30A6\u30DE\u5A18\uFF01", "Dazzling\u2606Wild Girl"], "100402211": ["\u304A\u7ACB\u3061\u53F0\u306E\u652F\u914D\u8005", "Ruler of the Stage"], "100403111": ["\u5929\u5973\u306E\u7FBD\u8863", "Angelic Garment"], "100403211": ["\u795E\u8599\u30C0\u30F3\u30B9", "Shrine Maiden's Dance"], "100411": ["\u512A\u7B49\u751F\xD7\u30D0\u30AF\u30B7\u30F3\uFF1D\u5927\u52DD\u5229\u30C3", "Honor Student x Bakushin = Big Victory"], "100421": ["\u300EI'm possible\u300F", "\u300EI'm Possible\u300F"], "100431": ["Ding Dong Boo", "Ding Dong Boo"], "100441": ["\u3044\u305F\u3060\u304D\u2606\u30B9\u30C8\u30EC\u30EA\u30C1\u30A2\uFF01", "You're Mine \u2606 Strelitzia"], "100451": ["\u30D4\u30E5\u30EA\u30C6\u30A3\u30AA\u30D6\u30CF\u30FC\u30C8", "Purity of Heart"], "100461": ["\u30AD\u30E9\u30AD\u30E9\u2606STARDOM", "Sparkling\u2606STARDOM"], "100471": ["\u63B2\u3052\u3088\u3001\u5DF1\u304C\u9B42\u306E\u5263\u3092\uFF01", "Raise Thy Soul's Sword!"], "100481": ["YEAH\u2606VIVID TIME!", "YEAH\u2606VIVID TIME!"], "100491": ["\u5263\u30F6\u5CF0\u3088\u308A\u3001\u72C2\u6C17\u306B\u55E4\u3048", "Laugh in the Face of Danger"], "100501": ["Nemesis", "Nemesis"], "100501111": ["\u8F1D\u304F\u30C8\u30C3\u30D7\u30B9\u30BF\u30A1", "Sparkling Top Star"], "100501211": ["\u30A8\u30F3\u30BF\u30FC\u30C6\u30A4\u30CA\u30FC", "Entertainer"], "100501221": ["\u714C\u3081\u304F\u201C\u30AD\u30BB\u30AD\u201D\u3092", "For a Sparkling Miracle"], "100502111": ["\u5727\u5DFB\u306E\u30C8\u30EA\u30C3\u30AF", "Stunning Trick"], "100502121": ["\u898B\u60DA\u308C\u308B\u30B3\u30FC\u30CA\u30EA\u30F3\u30B0", "Captivating Cornering"], "100502211": ["\u714C\u3081\u304D\u306E\u30C8\u30C3\u30D7\u30B9\u30BF\u30A1", "Glittering Top Star"], "100511": ["\u3064\u307C\u307F\u3001\u307B\u3053\u308D\u3076\u6642", "When the Flower Bud Opens"], "100521": ["\u30EF\u30AF\u30EF\u30AF\u30AF\u30E9\u30A4\u30DE\u30C3\u30AF\u30B9", "Exciting Climax"], "100531": ["\u71B1\u8840\uFF01\uFF01\u98A8\u7D00\u30A2\u30BF\u30C3\u30AF", "Hot-Blooded Disciplinary Attack!"], "100541": ["\u75BE\u98A8\u7206\u8D70\u30DA\u30AC\u30B5\u30B9\u30C0\u30C3\u30B7\u30E5\uFF01", "Blasting Gale Pegasus Dash!"], "100551": ["\u4E07\u5F69\u2606\u30DE\u30FC\u30D9\u30E9\u30B9\u2605\u4E16\u754C", "Colorful\u2606Marvelous\u2605World"], "100561": ["\u6765\u307E\u3059\u6765\u3066\u307E\u3059\u6765\u3055\u305B\u307E\u3059\uFF01", "Luck Is Coming"], "100571": ["\u53D9\u60C5\u3001\u65C5\u8DEF\u306E\u679C\u3066\u306B", "Lyricism at Journey's End"], "100581": ["I Never Goof Up!", "I Never Goof Up!"], "100591": ["\u5F7C\u65B9\u3001\u305D\u306E\u5148\u3078\u2026", "Beyond the Other Side"], "100601": ["\u304D\u3063\u3068\u305D\u306E\u5148\u3078\u2026\uFF01", "Surely, Beyond...!"], "100601111": ["\u7B20\u677E\u306E\u98DF\u3044\u3057\u3093\u574A", "Glutton of Kasamatsu"], "100601121": ["\u98E2\u3048\u305F\u602A\u7269", "Starved Monster"], "100601211": ["\u602A\u7269\u7684\u30B3\u30FC\u30CA\u30EA\u30F3\u30B0", "Monstrous Cornering"], "100602111": ["\u30C9\u30AB\u98DF\u3044\u990A\u751F", "Gluttonous Regimen"], "100602211": ["\u30AF\u30EA\u30B9\u30DE\u30B9\u306E\u5947\u8DE1\u4F53\u9A13", "First-hand Christmas Miracle"], "100611": ["Pride of KING", "Pride of KING"], "100621": ["\u3069\u3093\u3063\u3001\u30D1\u30C3\u3001\u3080\u3093\u3063", "Bang, Bam, Mun"], "100631": ["\u767E\u932C\u6210\u92FC", "Forged From a Hundred Trials"], "100641": ["\u3076\u3063\u3061\u304E\u308A\u30ED\u30FC\u30C9", "The Breakaway Road"], "100651": ["\u30A2\u30B2\u3066\u30A2\u30B2\u3066\u3077\u3061\u3087\u3078\u3093\u3056\uFF01", "Everybody Put Your Hands Up!"], "100661": ["\u30A8\u30F3\u30B8\u30F3\u5168\u958B\uFF01\u5927\u5674\u5C04\uFF01", "Engine, Full Throttle! Turbo Time!"], "100671": ["\u6666\u51A5\u3092\u7167\u3089\u305B\u6C38\u9060\u306E\u8000\u304D", "Brilliance Illuminating the Darkness"], "100681": ["\u52DD\u3061\u9B28\u30EF\u30C3\u30B7\u30E7\u30A4\uFF01", "Shout of Victory"], "100691": ["\u61A7\u308C\u306F\u685C\u3092\u8D8A\u3048\u308B\uFF01", "Longing Beyond the Sakura"], "100701": ["\u30BB\u30A4\u30EA\u30AA\u30B9\uFF08\u4EBA\u6C171\uFF5E3\u756A\uFF09", "Seirios (popularity 1-3)"], "100701-1": ["\u30BB\u30A4\u30EA\u30AA\u30B9\uFF08\u4EBA\u6C174\u756A\u4EE5\u4E0B\uFF09", "Seirios (popularity 4 or lower)"], "100701111": ["564\u30A2\u30A4\u30BA\u3067\u8996\u754C\u30AF\u30C3\u30AD\u30EA\uFF01", "Clear View with 564 Eyes!"], "100701211": ["\u30A8\u30AF\u30B9\u30C8\u30EA\u30FC\u30E0\u4E0B\u6821\u8853", "Extreme After-School Technique"], "100702111": ["\u795E\u79D8\u4F53\u9A13\uFF01\u30B4\u30EB\u30B7\u30EF\u30FC\u30D7", "Mysterious Gold Ship Warp!"], "100702211": ["\u30A4\u30AB\u63DA\u3052\u3001\u3044\u304B\u304C\u3067\u3059\u304B\uFF01\uFF1F", "Squid for a Quid!"], "100702221": ["\u9AD8\u307E\u3063\u3066\u304D\u305F\u305C\u3047\uFF01\uFF01", "It's Getting Exciting!!"], "100703111": ["\u62BC\u3057\u5BC4\u305B\u308B\u30B8\u30E5\u30C6\u30FC\u30E0", `Flood of "Je t'aime"`], "100703211": ["\u8352\u78EF\u597D\u307F\u306E\u9EC4\u91D1\u8239", "Golden Ship of the Rough Seas"], "10071": ["\u6CE2\u4E71\u6CE8\u610F\u7832\uFF01", "Warning Shot!"], "100711": ["\u4E00\u671F\u306E\u5922\u3001\u5239\u90A3\u306E\u98DB\u7FD4", "A Lifetime's Dream, A Moment's Flight"], "100721": ["\u70C8\u706B\u7E5A\u4E71\u3001\u7121\u6575\u4E4B\u821E", "Dazzling Fire, Invincible Dance"], "100731": ["\u71C3\u3048\u76DB\u308B\u306F\u7D76\u5BFE\u306E\u610F\u5FD7", "Flames of Unyielding Resolve"], "100741": ["\u9E97\u3057\u304D\u82B1\u4FE1\u98A8", "Lovely Spring Wind"], "100761": ["\u82B1\u958B\u304D\u3001\u4E16\u754C", "Blossoming World"], "100771": ["Road to Glory", "Road to Glory"], "100781": ["\u98A8\u5149\u308B", "A Spring in My Step"], "100791": ["\u300E\u8239\u6A4B\u6700\u5F37\uFF01\u300F", "Funabashi Above All!"], "100801": ["Info: Acquired", "Info: Acquired"], "100801111": ["\u30B9\u30AD\u30C3\u30C8\u30EB\u30D6\u30EC\u30A4\u30AF", "Flasks Up"], "100801211": ["\u629C\u7FA4\u306E\u8C6A\u811A", "Unrivaled Strides"], "100802111": ["\u3076\u3063\u5DEE\u3057\u3066\u3084\u308B\u305C\uFF01", "I'll Leave You in the Dust!"], "100802211": ["\u6700\u901F\u306E\u30C8\u30C3\u30D7\u30AE\u30A2", "Fastest Top Gear"], "10081": ["\u30A2\u30AF\u30BB\u30EBX", "Accelerator X"], "100821": ["Shining Runway", "Shining Runway"], "100831": ["Mission: Triumph", "Mission: Triumph"], "100841": ["\u9739\u9742\u306E\u30A2\u30A6\u30D5\u30D8\u30FC\u30D9\u30F3", "Thunderstorm Sublation"], "100851": ["\u81F3\u4E0A\u3067\u3042\u308C", "Reign Supreme"], "100861": ["\u611B\u3068\u7194\u3051\u3088\u305F\u3060\u7194\u3051\u3088", "Melt in Love's Embrace"], "100871": ["Silent letter", "Silent Letter"], "100881": ["Reversal Illusion", "Reversal Illusion"], "100891": ["Celeste Oath", "Celeste Oath"], "100901111": ["\u30D1\u30FC\u30D5\u30A7\u30AF\u30C8\u30C1\u30E5\u30FC\u30F3", "Perfect Tune"], "100901211": ["\u30A2\u30BF\u30B7\u304C\u52DD\u3064\u3093\u3060\u304B\u3089\uFF01", "This is my win!"], "100902111": ["\u304A\u3066\u3093\u3070\u5973\u738B", "Tomboy Queen"], "100902211": ["\u958B\u304B\u308C\u308B\u5922\u306E\u6249", "Door of Dreams"], "10091": ["\u30EC\u30C3\u30C9\u30A8\u30FC\u30B9", "Red Ace"], "100911": ["\u30C7\u30E9\u30C3\u30AF\u30B9\u2606\u30D5\u30A1\u30A6\u30F3\u30C6\u30F3", "Deluxe\u2606Fountain"], "100931": ["\u5E78\u305B\u306E\u9752\u3044\u5149", "Blue Ray of Happiness"], "100941": ["Faith in the Feral", "Faith in the Feral"], "100981": ["\u7406\u904B\u958B\u304B\u308A\u3066\u7FD4\u308B", "Luck Comes to the Prepared"], "100991": ["\u304B\u304C\u3084\u3051\u2606\u3068\u307E\u3053\u307E\u3044", "Shine \u2606 Tomakomai"], "101001": ["Never Say Never", "Never Say Never"], "101001111": ["\u72D9\u3044\u6483\u3061\u30C7\u30B9\uFF01", "Sharpshooting!"], "101001211": ["Frontier Spirit", "Frontier Spirit"], "101002111": ["\u30A2\u30C9\u30D9\u30F3\u30C1\u30E3\u30FC\u306E\u5148\u5C0E\u8005", "Adventure Leader"], "101002211": ["\u771F\u5263\u52DD\u8CA0\u30C7\u30B9\uFF01", "No Holds Barred!"], "101021": ["\u30F4\u30A3\u30F4\u30A1\u30FC\u30C1\u30A7\u30FB\u30F4\u30A9\u30E9\u30FC\u30EC", "Vivace Volare"], "101041": ["\u6681\u306E\u5FA1\u65D7\u300E\u845B\u57CE\u6804\u4E3B\u300F\uFF01", "Flag of Dawn: Katsuragi Ace"], "101051": ["\u30A2\u30C9\u30FB\u30A2\u30B9\u30C8\u30E9", "Ad Astra"], "101061": ["Bang\u2606\u30DF\u30E9\u30AF\u308B\u308F\u305B\uFF01", "Bang\u2606Miracle Maker!"], "101071": ["Billions of stars", "Billions of Stars"], "101081": ["\u7F85\u5239\u3001\u8D64\u7FFC\u306B\u3066\u5929\u4E0A\u3078\u81F3\u3089\u3093", "Scarlet Ascension of the Rakshasa"], "101091": ["\u7E4B\u3050\u30FB\u7E4B\u304C\u308B\xD7\u5922\u30FB\u672A\u6765", "Connecting Dreams With the Future"], "101101": ["Guiding Sea", "Guiding Sea"], "101101111": ["\u5927\u548C\u64AB\u5B50", "Yamato Nadeshiko"], "101101211": ["\u4E0D\u9000\u8EE2\u306E\u610F\u601D", "Conviction"], "101102111": ["\u30AD\u30E5\u30A2\u30EA\u30FC\u30D2\u30FC\u30EB", "Curely Heal"], "101102211": ["\u52C7\u6C17\u306E\u9B54\u6CD5", "Conjuring Courage"], "101103111": ["\u5C04\u8CAB\u304F\u84BC", "Piercing Azure"], "101103211": ["\u52DD\u6A5F\u5230\u6765", "Seizing Victory"], "10111": ["\u7CBE\u795E\u4E00\u5230", "Desire to Win"], "101111": ["\u8FBF\u308B\u8840\u8108\u3001\u82BD\u5439\u304F\u672A\u6765", "Traced Bloodline, Budding Future"], "101151": ["\u6211\u304C\u8987\u9053\u3001\u963B\u3080\u3082\u306E\u306A\u3057", "None Shall Object My Rule"], "101161": ["\u70C8\u83EF\u306E\u6D17\u793C", "Rose Conquest"], "101171": ["\u92ED\u6C17\u306E\u30A2\u30EC\u30B0\u30ED", "Allegro of Valor"], "101191": ["\u300E\u305D\u308C\u3067\u306F\u3001\u3088\u304D\u65C5\u3092\u300F", "\xABBon Voyage\xBB"], "101201": ["\u7121\u4E8C\u7121\u4E09\u306A\u308B\u4E00\u6761\u306E\u8DEF", "Path of Singular Focus"], "101201111": ["\u52DD\u5229\u3078\u306E\u5486\u54EE", "Victory Roar"], "101201121": ["\u30BF\u30A4\u30DE\u30F3\u306B\u304B\u3051\u308B\u57F7\u5FF5", "One-On-One Obsession"], "101201211": ["\u6012\u6FE4\u306E\u30DD\u30ED\u30ED\u30C3\u30AB", "Tempestuous Pororoca"], "101202111": ["\u71B1\u70C8\u30A8\u30F3\u30B2\u30FC\u30B8\uFF01", "Passionate Engagement!"], "101202211": ["\u95D8\u9B42\u5165\u5200\uFF01", "Fiery Cake-Cutting!"], "101211": ["Lame de vent", "Lame de Vent"], "101241": ["\u3075\u304F\u3089\u3080\u5922\u3001\u5148\u99C6\u306E\u9014", "Growing Dreams, Pioneer's Path"], "101301111": ["\u30E1\u30B8\u30ED\u306E\u5FC3\u5F97", "Mejiro's Wisdom"], "101301211": ["\u540D\u512A\u306E\u4F59\u88D5", "Star's Composure"], "101302111": ["\u30A2\u30AF\u30C6\u30A3\u30D6\u30EC\u30B9\u30C8", "Active Rest"], "101302211": ["\u7A7A\u306E\u679C\u3066\u307E\u3067", "End of Sky"], "101303111": ["\u590F\u306E\u540D\u512A", "Summer Star"], "101303211": ["\u4E00\u610F\u5C02\u5FC3\u306B\u30EA\u30D5\u30EC\u30C3\u30B7\u30E5\uFF01", "Wholehearted Refresher"], "101311": ["\xA1Qu\xE9 alegr\xEDa!", "\xA1Qu\xE9 alegr\xEDa!"], "101401111": ["\u9DF9\u30CE\u76EE", "Falcon Eyes"], "101401211": ["\u4F59\u88D5\u306E\u30D1\u30D5\u30A9\u30FC\u30DE\u30F3\u30B9", "Flawless Performance"], "101402111": ["\u8C6A\u52C7\u7121\u53CC", "Unparalleled Bravery"], "101402121": ["\u30B3\u30F3\u30C9\u30EB\u8DF3\u8E8D\u8853", "Condor Leap"], "101402211": ["\u6607\u308A\u30B3\u30F3\u30C9\u30EB", "Rising Condor"], "10141": ["\u71B1\u8840\u2606\u30A2\u30DF\u30FC\u30B4", "Hot Blooded \u2606 Amigo"], "101501111": ["\u964D\u81E8\uFF01\u4E16\u7D00\u672B\u8987\u738B\uFF01", "Centurial Overlord Descends!"], "101501211": ["\u6B4C\u5287\u738B\u306E\u884C\u9032", "March of the Opera King"], "101502111": ["\u5186\u821E\u66F2\u306E\u30DE\u30A8\u30B9\u30C8\u30ED", "Waltz Maestro"], "101502121": ["\u30B3\u30FC\u30CA\u30FC\u306B\u821E\u3044\u964D\u308A\u3057\u6B4C\u5287\u738B", "Opera King's Corner Theatrics"], "101502211": ["\u30DC\u30AF\u306F\u9045\u308C\u305A\u306B\u3084\u3063\u3066\u304F\u308B\uFF01", "I Won't Fall Behind!"], "101601111": ["\u4E00\u5200\u4E21\u65AD", "Decisive Cleave"], "101601211": ["\u9913\u72FC\u7259", "Hungry Wolf's Fang"], "101602111": ["BLAZING WOLF", "BLAZING WOLF"], "101602211": ["\u6E07\u671B\u3059\u308B\u602A\u7269", "Craving Monster"], "101701111": ["\u7687\u5E1D\u306E\u773C\u5DEE\u3057", "Emperor's Gaze"], "101701211": ["\u93A7\u8896\u4E00\u89E6", "Hands-Down Victory"], "101702111": ["\u795E\u8272\u81EA\u82E5", "Perfect Composure"], "101702211": ["\u98A8\u971C\u9AD8\u6F54", "Noble Hardships"], "101801111": ["\u5973\u5E1D\u306E\u6A29\u8B00", "The Empress' Ploy"], "101801211": ["\u6C34\u6708\u93E1\u82B1", "Moonlit Water, Mirror Flower"], "101802111": ["\u5973\u5E1D\u306E\u77DC\u6301", "The Empress' Pride"], "101802211": ["\u4E0A\u5F26\u306E\u30BD\u30E0\u30EA\u30A8\u30FC\u30EB", "Crescent Moon Sommelier"], "10181": ["\u30A8\u30F3\u30D7\u30EC\u30B9\u30FB\u30D7\u30E9\u30A4\u30C9", "Empress\u30FBPride"], "101901111": ["\u9650\u754C\u30A6\u30DE\u30DE\u30CB\u30A2", "Uma Mania Max"], "101901211": ["\u6700\u524D\u5217\u306F\u8B72\u308C\u306A\u3044\uFF01", "The Front Row Is Non-Negotiable!"], "101901221": ["\u72D9\u3046\u306F\u6700\u524D\u30C9\u30BB\u30F3\u3078\u306E\u9053\uFF01", "Aim for the Front and Center!"], "101902111": ["\u8D85\u7279\u6025\u5165\u7A3F\uFF01", "Super Express Submission!"], "101902121": ["\u305F\u304E\u3063\u3066\u304D\u305F\u3041\uFF5E\uFF5E\u3063\uFF01\uFF01", "Now I'm Hyped!!"], "101902211": ["\u5C0A\u307F\u3092\u6C42\u3081\u3066\u3075\u3063\u304B\u30FC\u30FC\u3064\uFF01", "Revived For Moe!"], "102001111": ["\u30D5\u30A1\u30B9\u30C8\u30EA\u30C8\u30EA\u30FC\u30D6", "Fast Retrieve"], "102001121": ["\u5927\u7269\u72D9\u3044\u306E\u5FC3\u5F97", "Angler's Wisdom"], "102001211": ["\u8131\u51FA\u5927\u4F5C\u6226", "Operation Escape"], "102002111": ["\u9003\u3052\u308D\uFF5E\u266A", "Run~Away~\u266A"], "102002121": ["\u30B5\u30D7\u30E9\u30A4\u30BA\u5927\u6210\u529F\uFF5E\u2606", "Surprise~Successful~\u2606"], "102002211": ["\u30EC\u30B3\u30FC\u30C9\u30E9\u30F3\u30CA\u30FC", "Record Runner"], "102101111": ["\u96F7\u9A30\u96F2\u5954", "Stormstrider"], "102101121": ["\u3061\u3083\u3061\u3083\u3063\u3068\u59CB\u3081\u3093\u3067\uFF01", "Let's Get Cracking!"], "102101211": ["\u5C3B\u5C3E\u306E\u6709\u9802\u5929", "Tail of Ecstasy"], "102102111": ["\u5148\u9054\u306B\u732E\u3050\u7948\u308A\u306E\u980C", "Ode to Our Predecessors"], "102102211": ["\u3055\u3042\u3001\u30A6\u30C1\u3068\u3084\u308D\u3046\u3084\uFF01", "'ight, let's get em!"], "102102221": ["\u307B\u306A\u3001\u884C\u304F\u3067\uFF01", "'kay then, let's get movin'!"], "102201111": ["\u30ED\u30A4\u30E4\u30EB\u30B9\u30BF\u30FC", "Royal Star"], "102201211": ["\u5929\u7A7A\u843D\u3068\u3057", "Sky Drop"], "102202111": ["\u601D\u3044\u51FA\u3092\u529B\u306B\u5909\u3048\u3066", "Memories Become Power"], "102202211": ["\u30E2\u30EA\u30AC\u30F3\u306E\u77DB\u621F", "Morr\xEDgan's Spear"], "102202221": ["\u7406\u60F3\u3078\u5411\u304B\u3046\u899A\u609F", "Ideal-Seeking Determination"], "102301111": ["\u60F3\u5B9A\u901A\u308A\u3001\u4F59\u88D5\u5341\u5206", "Exactly As Planned"], "102301211": ["\u8A08\u753B\u7684\u30AF\u30FC\u30EB\u30C0\u30A6\u30F3", "Scheduled Cooldown"], "102302111": ["VIP\u306A\u5F8C\u308D\u59FF", "VIP Back View"], "102302211": ["\u5168\u529B\u30B5\u30F3\u30BF\u30AF\u30ED\u30FC\u30B9", "Full Power Santa Claus"], "102303111": ["\u30B7\u30DF\u30E5\u30EC\u30FC\u30C8\u30B0\u30E9\u30B9\u30FB\u30AA\u30F3", "Simulation Glasses: ON"], "102303211": ["\u30CD\u30AA\u30F3\u306E\u5C3E\u3092\u5F15\u3044\u3066", "Drawing a Neon Trail"], "102401111": ["You copy?", "You Copy?"], "102401211": ["I copy!", "I Copy!"], "102402111": ["\u7D14\u767D\u306E\u3055\u3055\u3084\u304D", "Snow White Whisper"], "102402211": ["\u30D0\u30EC\u30EB\u30ED\u30FC\u30EB", "Barrel Roll"], "102403111": ["\u304A\u5148\u306B\u2606\u30C6\u30FC\u30EB\u30A6\u30A3\u30F3\u30C9", "Going Ahead\u2606Tailwind"], "102403211": ["\u30B3\u30C3\u30AF\u30D4\u30C3\u30C8\u30FB\u30DE\u30B8\u30B7\u30E3\u30F3", "Cockpit Magician"], "10241": ["\u52DD\u5229\u306E\u30AD\u30C3\u30B9\u2606", "Victory Kiss \u2606"], "102501111": ["\u30B3\u30FC\u30D2\u30FC\u30D6\u30EC\u30A4\u30AF", "Coffee Break"], "102501211": ["\u30AA\u30A4\u30C6\u30A4\u30AB\u30CA\u30A4\u30C7", "Don't Leave Me"], "102502111": ["\u8FEB\u308A\u304F\u308B\u5BB5\u95C7", "Imminent Twilight"], "102502211": ["\u7384\u754C\u9818\u57DF", "World of Marvels"], "102601111": ["\u30AF\u30ED\u30C3\u30AF\u30A2\u30C3\u30D7", "Overclocking"], "102601211": ["\u56F0\u96E3\u3092\u4E57\u308A\u8D8A\u3048\u308B\u8005", "Overcomer of Difficulties"], "102602111": ["\u5B8C\u74A7\u306A\u30A8\u30E9\u30FC\u5BFE\u51E6\u8853", "Perfect Bugfixing Technique"], "102602121": ["\u7518\u3055\u63A7\u3048\u3081\u30A8\u30B9\u30B1\u30FC\u30D7", "Slightly Sweet Escape"], "102602211": ["\u30D1\u30FC\u30D5\u30A7\u30AF\u30C8\u30D6\u30FC\u30C8", "Perfect Boot"], "102701111": ["\u30DE\u30C3\u30B9\u30EB\u30A2\u30F3\u30BB\u30E0", "Muscle Anthem"], "102701211": ["\u30E9\u30A4\u30B8\u30F3\u30B0\u30D0\u30EB\u30AF\u30A2\u30C3\u30D7", "Rising Bulk Up"], "102702111": ["\u5922\u53F6\u3048\u308B\u6C7A\u610F\u3092\u6388\u3051\u307E\u3057\u3087\u3046", "Granting Dream-fulfilling Determination"], "102702211": ["\u81F3\u9AD8\u306E\u52DD\u5229\u3092\u53EC\u3057\u4E0A\u304C\u308C", "Serving Victory Supreme"], "10271": ["\u71C3\u3048\u308D\u7B4B\u8089\uFF01", "Burning Muscles!"], "102801111": ["\u4E0B\u3054\u3057\u3089\u3048\u4E07\u5168\uFF01", "Flawless Mise en Place!"], "102801211": ["\u30DC\u30FC\u30CE\u306A\u5065\u5556\u5BB6", "Bono-style Gluttony"], "102801221": ["\u306F\u3063\u3051\u3088\u3044\uFF01", "Hakkeyoi!"], "102901111": ["\u61A7\u308C\u306E\u30B7\u30C1\u30FC\u30AC\u30FC\u30EB", "Admired City Girl"], "102901211": ["\u96EA\u56FD\u4ED5\u8FBC\u307F\u306E\u76F4\u6ED1\u964D", "Seasoned Sledder's Swoop"], "102901221": ["\u6C7A\u610F\u306E\u6839\u6027\u5A18", "Steadfast Determination"], "102902111": ["\u3082\u3046\u3072\u3068\u3051\u3063\u3071\u308A\uFF01", "One More Push!"], "102902211": ["\u66F2\u7DDA\u306B\u821E\u3046\u6DF1\u96EA", "Snow Fluttering Through the Corner"], "102902221": ["\u4E0B\u5F26\u306E\u96EA\u6708\u82B1", "Winter's Beauty Under the Waning Moon"], "103001111": ["\u6C7A\u610F\u306E\u30D2\u30FC\u30ED\u30FC", "Determined Hero"], "103001211": ["\u9ED2\u306E\u523A\u5BA2", "Black Assassin"], "103002111": ["\u304C\u3093\u3070\u308B\u305E\u30FC\u2026\u304A\u30FC\uFF01", "I'll Do My Beeest!"], "103002211": ["\u30C8\u30EA\u30C3\u30AF&\u30C8\u30EA\u30FC\u30C8", "Trick & Treat"], "103003111": ["\u5C71\u9802\u3067\u30A4\u30BF\u30C0\u30AD\u30DE\u30B9", "Summit Meal"], "103003211": ["\u6DC0\u306E\u795D\u798F", "Blessing of Yodo"], "103101111": ["\u3058\u3083\u3058\u3083\u30A6\u30DE\u304A\u59C9\u3061\u3083\u3093", "Wild Onee-chan"], "103101211": ["\u8352\u3076\u308B\u98A8\u795E", "Raging Wind God"], "103102111": ["\u30AA\u30FC\u30C0\u30FC\u306F\u30D0\u30C3\u30C1\u30EA\uFF01", "Perfect Order!"], "103102211": ["\u83EF\u9E97\u306A\u30B5\u30FC\u30D6", "Brilliant Serving"], "103201111": ["\u53EF\u80FD\u6027\u306E\u5F92", "Pupil of Possibility"], "103201211": ["\u52B9\u7387\u7684\u4F11\u606F\u6CD5", "Efficient Recreation"], "103202111": ["\u30E9\u30D7\u30E9\u30B9\u306E\u60AA\u9B54", "Laplace's Demon"], "103202211": ["\u7729\u8000\u306E\u30EB\u30AF\u30B7\u30AA\u30F3", "Dazzling Luxon"], "103203111": ["\u5149\u901F\u3092\u8D85\u3048\u308B\u7C92\u5B50", "FTL Particle"], "103203211": ["\u88AB\u9A13\u4F53\u89B3\u5BDF", "Subject Observation"], "10321": ["introduction\uFF1AMy body", "introduction\uFF1AMy body"], "103301111": ["\u9759\u304B\u306A\u8A93\u3044", "Silent Oath"], "103301211": ["\u5DF1\u8EAB\u7126\u304C\u3059\u307B\u3046\u304D\u661F", "Immolated Comet"], "103302111": ["\u30A2\u30EB\u30FB\u30EF\u30FC\u30AD\u3092\u8FFD\u3044\u304B\u3051\u3066", "On Vultur Cadens' Trail"], "103302211": ["\u6C37\u661F\u878D\u89E3", "Melting of the Icy Star"], "103401111": ["\u706B\u6D88\u306E\u68AF\u5B50\u767B\u308A", "Firefighter's Hashigo-nori"], "103401211": ["\u719F\u7DF4\u306E\u7802\u5875\u4F7F\u3044", "Sandstorm Wielder"], "103401221": ["\u7C8B\u3067\u3044\u306A\u305B\u306A\u9054\u4EBA\u6280", "Stylish and Masterful"], "103402111": ["\u6247\u30CE\u821E", "Fan Dance"], "103402211": ["\u5927\u898B\u5F97\u5207\u308A", "Dramatic Finale"], "103501111": ["\u305F\u3086\u307E\u306C\u52AA\u529B", "Tireless Effort"], "103501211": ["\u30A6\u30A4\u30CB\u30F3\u30B0\u30ED\u30FC\u30C9", "Winning Road"], "103502111": ["\u5343\u4E07\u30D0\u30EA\u30AD\uFF01\uFF01\uFF01", "Ten Million Horsepower!!!"], "103502211": ["\u304D\u3063\u3068\u98DB\u3079\u308B\uFF01", "You'll fly for sure!"], "103503111": ["\u5168\u30FB\u529B\u30FB\u30EF\u30AF\u30FB\u30EF\u30AF\uFF01\uFF01", "All-Out Excitement!!"], "103503211": ["Dreamer's Path", "Dreamer's Path"], "10351": ["\u5168\u529BV\u30B5\u30A4\u30F3\u30C3\uFF01", "Full Power V Sign!"], "103601111": ["\u30A2\u30C3\u30D7\u30EA\u30D5\u30C6\u30A3\u30F3\u30B0", "Uplifting"], "103601211": ["Lose Myself", "Lose Myself"], "103602111": ["Gluttony's Grip", "Gluttony's Grip"], "103602121": ["\u30CE\u30A4\u30BA\u30AD\u30E3\u30F3\u30BB\u30EA\u30F3\u30B0", "Noise Cancellation"], "103602211": ["\u5211\u82E6", "Torment"], "103701111": ["\u9583\u5149\u306E\u30DE\u30AE\u30A2", "Flash Magier"], "103701211": ["\u8A87\u308A\u3092\u61F8\u3051\u3066", "Betting My Pride"], "103702111": ["\u52DD\u5229\u306E\u30EC\u30B7\u30D4", "Recipe of Victory"], "103702121": ["\u4ED5\u8FBC\u307F\u306F\u5B8C\u74A7", "Perfect Preparation"], "103702211": ["\u9ED2\u3044\u9583\u5149", "Black Flash"], "103703111": ["Ritter von Fuchu", "Ritter von Fuchu"], "103703211": ["\u9583\u5149\u306E\u5954\u6D41", "Flash Torrent"], "103801111": ["#\u30AB\u30EF\u30A4\u30A4\u304B\u304F\u4E71\u266A", "#Cute Perturbation\u266A"], "103801211": ["#\u5922\u4E2D\u306B\u306A\u3063\u3061\u3083\u3048\u266A", "#Go Crazy\u266A"], "103802111": ["#\u30AB\u30EC\u30F3\u306B\u67D3\u307E\u3063\u3066\u307F\u308B\uFF1F", "#WannaGetCurren'd?"], "103802121": ["\u5FC3\u596A\u308F\u308C\u308B\u9583\u5149", "Enthralling Glitter"], "103802211": ["#\u30D3\u30E5\u30FC\u30C6\u30A3\u30FC\u30B9\u30D7\u30EA\u30F3\u30C8", "#Beauty Sprint"], "103901111": ["\u30CE\u30F3\u30B9\u30C8\u30C3\u30D7\u30D7\u30EA\u30F3\u30BB\u30B9", "Non-stop Princess"], "103901211": ["\u66B4\u308C\u9F8D", "Raging Dragon"], "103902111": ["\u30C8\u30C3\u30D7\u30FB\u30AA\u30D6\u30FB\u30B6\u30FB\u59EB\uFF01", "Top Princess!"], "103902211": ["\u7206\u8D70\u731B\u59EB\u2606\u6025\u8EE2\u76F4\u4E0B\uFF01\uFF01", "Fiery Princess\u2606Sudden Descent!!"], "104001111": ["\u5148\u898B\u306E\u660E", "Prescience"], "104001211": ["\u30E9\u30F3\u30A6\u30A7\u30A4\u306E\u4E3B\u5F79", "Star of the Runway"], "104001221": ["\u30D5\u30A3\u30CA\u30FC\u30EC\u306E\u5148\u982D\u3078", "To the Finale's Forefront"], "104002111": ["\u9BAE\u3084\u304B\u306A\u5E03\u9663", "Vivid Battle Formation"], "104002211": ["\u864E\u8996\u7708\u3005", "Eagle-eyed"], "104101111": ["\u30D0\u30AF\u30B7\u30F3\u7684\u30B9\u30D7\u30EA\u30F3\u30C8\uFF01", "Bakushin Sprint!"], "104101211": ["\u30D0\u30AF\u30B7\u30F3\u7684\u30EA\u30FC\u30C9\uFF01", "Bakushin Lead!"], "104102111": ["\u732A\u7A81\u731B\u9032\uFF01\u30D0\u30AF\u30B7\u30F3\u30ED\u30FC\u30C9\uFF01", "Red-hot Rush! Bakushin Road!"], "104102211": ["\u9A40\u9032\uFF01\u7206\u9032\uFF01\u30D0\u30AF\u30B7\u30FC\u30F3\uFF01", "Bakushin! Bakushin! Bakushiiin!"], "10411": ["\u5B66\u7D1A\u59D4\u54E1\u9577+\u901F\u3055\uFF1D\u30D0\u30AF\u30B7\u30F3", "Class President + Speed = Bakushin"], "104201111": ["\u4E16\u754C\u3092\u8CAB\u304F\u81F3\u9AD8\u306E\u8F1D\u304D", "World-wide Supreme Brilliance"], "104201211": ["\u30D1\u30FC\u30EB\u6D41\u30C0\u30F3\u30B9\u30D0\u30C8\u30EB", "Pearl-style Dance Battle"], "104202111": ["\u30DF\u30B9\u30C8\u30E9\u30EB\u306B\u4E57\u3063\u3066", "Riding the Mistral"], "104202211": ["\u6D77\u306E\u5E95\u304B\u3089\u30AD\u30E9\u3081\u3044\u3066\u2026\u2606", "Shining From The Ocean Floor...\u2606"], "104301111": ["\u5168\u901F\u524D\u9032\u306A\u306E\u3060\uFF01", "Full Speed Ahead, Nanoda!"], "104301211": ["\u3044\u305F\u305A\u3089\u30DE\u30A4\u30B9\u30BF\u30FC", "Masterful Prankster"], "104301221": ["\u6CE5\u3093\u3053\u9B54\u738B\u69D8", "Mud Demon Lord"], "104401111": ["\u653E\u8AB2\u5F8C\u9B54\u6CD5\u5C11\u5973", "After-School Magical Girl"], "104401211": ["\u30C1\u30E3\u30FC\u30E0\u30DE\u30B8\u30C3\u30AF", "Charm Magic"], "104401221": ["\u30B5\u30EB\u30D3\u30A2\u2606\u30B9\u30D7\u30EC\u30F3\u30C7\u30F3\u30B9", "Salvia\u2606Splendens"], "104402111": ["\u30B7\u30EB\u30D5\u30A3\u30FC\u30C9\u30FB\u30DE\u30AE\u30A2", "Sylphid Magia"], "104402211": ["\u7DCA\u6025\u9B54\u529B\u30D6\u30FC\u30B9\u30C8", "Emergency Magic Boost"], "104501111": ["\u3042\u307E\uFF5E\u3044\u5E7B\u60D1", "Sweet Bewitching"], "104501211": ["\u7652\u3057\u306E\u30DE\u30A8\u30B9\u30C8\u30ED", "Healing Maestro"], "104502111": ["\u304A\u4E16\u8A71\u306E\u30D7\u30ED\u30D5\u30A7\u30C3\u30B7\u30E7\u30CA\u30EB", "Professional Pamperer"], "104502211": ["\u9B45\u60D1\u306E\u30DE\u30DF\u30FC\u30A6\u30A3\u30B9\u30D1\u30FC", "Charming Mummy Whisper"], "104503111": ["\u6D41\u6C34\u6D41\u8D70", "Run as the River Flows"], "104503211": ["\u795E\u4ED9\u8776\u5909\u306E\u8853", "Butterfly Transformation Jutsu"], "10451": ["\u30AF\u30EA\u30A2\u30CF\u30FC\u30C8", "Clear Heart"], "104601111": ["\u5927\u6CE8\u76EE\u306E\u30A6\u30DE\u30C9\u30EB\u53C2\u4E0A\u2605", "The Dazzling Umadol's Here\u2605"], "104601121": ["\u76EE\u3092\u9038\u3089\u3057\u3061\u3083\u30C0\u30E1\u3060\u3088\u2606", "No Looking Away\u2606"], "104601211": ["\u30A6\u30DE\u30C9\u30EB\u30D1\u30EF\u30FC\u6025\u4E0A\u6607\u2191\u2191", "Umadol Power Trend \u2191\u2191"], "104602111": ["\u5922\u306B\u5411\u304B\u3063\u3066\u6025\u4E0A\u6607\uFF01", "Trending Towards Your Dreams!"], "104602121": ["\u6700\u9AD8\u5CF0\u306E\u30B9\u30C6\u30FC\u30B8\u306B\uFF01", "To the Ultimate Stage!"], "104602211": ["\u7D76\u5BFE\u7684\u30BB\u30F3\u30BF\u30FC\uFF01", "Absolute Center!"], "104701111": ["\u82F1\u96C4\u3078\u306E\u9053\u6A19", "Hero Handbook"], "104701121": ["\u7269\u8A9E\u3092\u7D21\u3050\u8005", "Story Weaver"], "104701211": ["\u5149\u8F1D\u304F\u5263", "Shining Sword"], "104702111": ["\u52C7\u8E8D\u9583\u3005", "Heroic Radiance"], "104702211": ["\u5D50\u7E8F\u3044\u3057\u82F1\u96C4\u306F\u5F80\u304F", "The Stormforged Hero Advances"], "104801111": ["\u30CE\u3063\u3066\u3053\uFF01", "Get Those Vibes Up!"], "104801211": ["\u30C8\u30EC\u30F3\u30C9\u30D7\u30E9\u30F3\u30CA\u30FC", "Trend Planner"], "104802111": ["\u30EF\u30F3\u30C1\u30E3\u30F3\u307E\u304F\u3063\u305F\u308B\uFF01", "Taking Every Chance!"], "104802211": ["\u3042\u305F\u3057\u3057\u304B\u52DD\u305F\u3093\uFF01", "Can't Top Me!"], "104802221": ["\u3042\u305F\u3057\u30B5\u30A4\u30B3\u30FC\u3058\u3083\u3093\uFF01", "Simply the Best!"], "104901111": ["\u4E7E\u5764\u4E00\u64F2\u306E\u5927\u535A\u6253", "All or Nothing"], "104901211": ["\u9244\u706B\u306E\u30AE\u30E3\u30F3\u30D6\u30E9\u30FC", "Hot-blooded Gambler"], "105001111": ["\u9B3C\u6C17\u68EE\u7136", "Menacing Presence"], "105001211": ["\u99C6\u308A\u7ACB\u3066\u308B\u60F3\u3044", "Spurring Emotions"], "105002111": ["\u898B\u305B\u3064\u3051\u3066\u3084\u308B\uFF01", "I'll Show You!"], "105002211": ["\u8D77\u6B7B\u56DE\u751F\u306E\u51FA\u529B", "Recovery Output"], "105003111": ["\u30BC\u30ED\u30EC\u30A4\u30C6\u30F3\u30B7", "Zero Latency"], "105003211": ["\u4E0D\u6493\u306ELimit Breaker", "Indomitable Limit Breaker"], "105101111": ["\u98A8\u82B1\u75BE\u8D70", "Flurry Dash"], "105101121": ["\u4E00\u8F2A\u306E\u52C7\u6C17", "A Petal's Bravery"], "105101211": ["\u5927\u8F2A\u306E\u6C7A\u610F", "Large-Petaled Resolution"], "105102111": ["\u795D\u798F\u306E\u30D5\u30E9\u30EF\u30FC\u30AC\u30FC\u30EB", "Flower Girl's Blessing"], "105102211": ["\u30F4\u30A7\u30FC\u30EB\u63FA\u3089\u3059\u6625\u75BE\u98A8", "Veil-Swaying Spring Storm"], "105102221": ["\u672B\u6C38\u304F\u3001\u5BC4\u308A\u6DFB\u3046\u82B1", "Blooming in Sickness and in Health"], "105201111": ["\u307E\u3060\u307E\u3060\u3060\u3088\uFF01", "Not Done Yet!"], "105201211": ["\u307E\u3051\u306A\u3044\u304B\u3089\u306D\uFF01", "I Won't Lose!"], "105202111": ["\u898B\u3066\u3066\u898B\u3066\u3066\uFF01", "Look At Me, Look!"], "105202121": ["\u52DD\u3061\u305F\u3044\u3093\u3060\u3082\u3093\uFF01", "I Really Wanna Win!"], "105202211": ["\u304C\u3093\u3070\u308B\u3082\u3093\uFF01", "Trying My Best!"], "10521": ["\u30EF\u30AF\u30EF\u30AF\u3088\u30FC\u3044\u30C9\u30F3", "Ready, Steady, Go!"], "105301111": ["\u98A8\u7D00\u306E\u767B\u9F8D\u9580", "Gateway To Discipline"], "105301121": ["\u9F8D\u864E\u76F8\u640F", "Dragon and Tiger's Battle"], "105301211": ["\u62BC\u5FCD\u30C3\uFF01\u6C17\u5408\u5341\u5206\u3063\u30B9\uFF01", "Osu! I'm Fired Up!"], "105302111": ["\u71B1\u8840\u9032\u5316\u30E9\u30A4\u30C7\u30A3\u30F3\u30B0\uFF01", "Hot-blooded Riding!"], "105302211": ["\u5FC5\u6BBA\uFF01\u7206\u901F\u30B9\u30D7\u30EA\u30F3\u30C8\uFF01", "Special Move! Explosive Sprint!"], "105401111": ["\u6025\u884C\uFF01\u30D2\u30FC\u30ED\u30FC\u53C2\u4E0A\uFF01", "Emergency! Hero on the Scene!"], "105401211": ["\u5FC5\u6BBA\u30FB\u96F7\u96FB\u30AD\u30FC\u30C3\u30AF\uFF01", "Special Move: Lightning Kiiick!"], "10541": ["\u30DA\u30AC\u30B5\u30B9\u30D5\u30EB\u30D1\u30EF\u30FC\uFF01", "Pegasus Full Power!"], "105501111": ["\u30EF\u30AF\u30EF\u30AF\u2606\u30DE\u30FC\u30D9\u30E9\u30B9\u30BE\u30FC\u30F3", "Exciting\u2606Marvelous Zone"], "105501121": ["\u30AE\u30E5\u30F3\u30AE\u30E5\u30F3\u306E\u30DE\u30FC\u30D9\u30E9\u30B9\u2606", "Marvelous Momentum\u2606"], "105501211": ["\u9032\u3081\uFF01\u4E16\u754C\u30DE\u30FC\u30D9\u30E9\u30B9\u8A08\u753B\u2606", "Marvelous World Plan\u2606"], "105601111": ["\u5409\u5146\u3067\u3059\uFF01", "Lucky Omen!"], "105601211": ["\u4E03\u798F\u5373\u751F", "Seven Heavenly Fortunes"], "105602111": ["\u6012\u6D9B\u306E\u8D85\u5E78\u904B\u30D1\u30EF\u30FC\uFF01", "Tempestuous Ultra Luck Power!"], "105602211": ["\u3070\u3063\u3061\u308A\u958B\u904B\u4F53\u9A13\uFF01", "First-hand Rising Fortune!"], "10561": ["\u6765\u3066\u304F\u3060\u3055\u3044\u6765\u3066\u304F\u3060\u3055\u3044\uFF01", "Come, Come!"], "105701111": ["\u5929\u7FD4\u308B\u8DB3\u53D6\u308A", "Soaring Step"], "105701211": ["\u5F3E\u3080\u5927\u5730", "Supple Land"], "105702111": ["\u596A\u76EE\u306E\u5B99\u4E57\u308A", "Mesmerizing Somersault"], "105702211": ["\u3055\u30A1\u3055\u3001\u304A\u7ACB\u3061\u5408\u3044\uFF01", "Step Up and Behold!"], "105801111": ["\u6012\u6D9B\u306E\u30B9\u30D4\u30FC\u30C9", "Tempestuous Speed"], "105801211": ["\u8AE6\u3081\u306A\u3044\u3001\u3067\u3059\u3045\uFF5E\uFF01", "I'm Not Giving Up!"], "105802111": ["\u30E9\u30A4\u30D0\u30EB\u304C\u3044\u308B\u304B\u3089\uFF01", "I've Got a Rival After All!"], "105802121": ["\u5FC3\u306B\u706F\u3059\u95D8\u5FD7", "Fervent Determination"], "105802211": ["\u9B42\u306E\u5C0E\u304D\u624B", "Soul Guide"], "105901111": ["\u30AF\u30FC\u30EB\u306A\u8996\u7DDA", "Cool Gaze"], "105901121": ["\u6804\u5149\u3078\u306E\u7FBD\u3070\u305F\u304D", "Fluttering Towards Glory"], "105901211": ["\u6DC0\u306E\u5973\u738B", "Queen of Yodo"], "105902111": ["\u3082\u3063\u3068\u5192\u967A\u3057\u3066\u307F\u305F\u3044\uFF01", "I Want To Be More Adventurous!"], "105902121": ["\u81EA\u4FE1\u6301\u3063\u3066\u8E0F\u307F\u51FA\u3057\u3066", "Step with Confidence"], "105902211": ["\u8D77\u6B7B\u56DE\u751F\u306E\u4E00\u6B69", "First Step To Recovery"], "106001111": ["\u9B45\u60D1\u306E\u30B7\u30CB\u30AB\u30EB\u30AC\u30FC\u30EB", "Charming Cynical Girl"], "106001211": ["\u76EE\u6307\u305B\uFF01\u4E3B\u4EBA\u516C\uFF01", "Aim for the Leading Role!"], "106002111": ["\u9811\u5F35\u308B\u3057\u304B\u306A\u3044\u3088\u306D", "Guess I've Gotta Try"], "106002211": ["\u30CE\u30F3\u30B9\u30C8\u30C3\u30D7\u30A8\u30FC\u30EB", "Non-stop Cheer"], "106003111": ["\u3044\u3044\u5473\u3001\u51FA\u3066\u308B\u3067\u3057\u3087\uFF1F", "Tasty, Isn't It?"], "106003211": ["\u5927\u6383\u9664\u4E0A\u624B", "Year-End Cleaning Pro"], "10601": ["\u30A2\u30BF\u30B7\u3082\u305F\u307E\u306B\u306F\u3001\u306D\uFF1F", "You Know, Sometimes Even I Can..."], "106101111": ["\u96FB\u6483\u306E\u64AB\u3067\u5207\u308A", "Electrifying Sweep"], "106101211": ["\u738B\u306E\u5927\u5C40\u89B3", "King's Perspective"], "106102111": ["\u7ADC\u306E\u96F2\u3092\u5F97\u308B\u5982\u3057", "Like Riding a Dragon's Cloud"], "106102211": ["\u6625\u98A8\u5439\u304D\u3066\u3001\u685C\u821E\u3046", "As Spring Blooms, the Sakura Dance"], "106103111": ["\u906E\u308B\u3082\u306E\u306F\u306A\u3044", "Unobstructable"], "106103211": ["\u4E0D\u5C48\u306E\u8A3C\u660E", "Proof of Indomitability"], "106103221": ["\u4E00\u6D41\u306E\u5728\u308A\u65B9", "First-Class Presence"], "10611": ["Call me KING", "Call me KING"], "106201111": ["\u30B4\u30FC\u30A4\u30F3\u30B0\u30DE\u30A4\u30A6\u30A7\u30A4", "Going My Way"], "106201211": ["\u3048\u3044\uFF01\u3048\u3044\uFF01\u3080\u3093\uFF01", "Ei! Ei! Mun!"], "106202111": ["\u30DD\u30B8\u30C6\u30A3\u30D6\u30B9\u30DE\u30A4\u30EB", "Positive Smile"], "106202211": ["\u5927\u3069\u3093\u3067\u3093\u304C\u3048\u3057", "Big Comeback"], "106202221": ["\u3084\u3070\u3057\u3084\u3070\u3057\uFF01", "Oopsy-Doopsy"], "10621": ["\u30EC\u30C7\u30A3\u30FC\u3001\u3069\u3093\u3063\uFF01", "Ready, Bang!"], "106301111": ["\u5FB9\u5E95\u7BA1\u7406\u30D7\u30E9\u30F3", "Thorough Planning"], "106301211": ["\u9244\u706B\u82B1", "Red-Hot Spark"], "10631": ["\u6253\u3061\u3001\u935B\u3048\u3066", "Strike and Strengthen"], "106401111": ["\u30D1\u306A\u3044\u3063\u3057\u3087\uFF1F", "Dope Stuff!"], "106401211": ["\u795E\u9003\u3052\u306E\u5FC3\u5F97", "Godly Runner's Wisdom"], "106401221": ["\u30C6\u30F3\u30A2\u30B2\u30B9\u30BF\u30A4\u30EB", "Pump It Up"], "106402111": ["\u5317\u98A8\u4E00\u8E74", "North Wind Kick"], "106402211": ["\u30E1\u30EA\u2606\u30AF\u30EA\u2191\u30D1\u30FC\u30EA\u30FC", "Merry\u2606Christmas\u2191Party"], "106501111": ["\u30DE\u30B8\u7206\u4E0A\u3052\u3063\u3057\u3087\uFF01", "Hella Vibes Up!"], "106501211": ["\u3068\u308A\u307E\u3084\u3063\u305F\u308C\uFF5E\uFF01", "Just Do It!"], "106502111": ["\u30C8\u30EC\u30F3\u30C9\u5148\u53D6\u308A\u2606", "Ahead of the Trend\u2606"], "106502211": ["\u30DE\u30A4\u30EB\u795E\u3001\u7206\u2606\u8A95", "Emergence of the Mile\u2606God"], "106601111": ["\u51FA\u529B1000\u4E07%\uFF01\uFF01", "Ten Million Percent Output!!"], "106601211": ["\u30BF\u30FC\u30DC\u306B\u3064\u3044\u3066\u3053\u30FC\u3044\uFF01", "Keep Up with Turbo!"], "10661": ["\u30A8\u30F3\u30B8\u30F3\u70B9\u706B\uFF01", "Engine Ignition!"], "106701111": ["\u91D1\u525B\u4E0D\u58CA", "Adamantine"], "106701121": ["\u96A0\u305B\u306C\u8F1D\u304D", "Unconcealed Brilliance"], "106701211": ["\u53F3\u56DE\u308A\u306E\u8F2A\u821E\u66F2", "Clockwise Rondo"], "106702111": ["\u7121\u6211\u306E\u5883\u5730", "Realm of No-Self"], "106702211": ["\u660E\u3051\u306C\u591C\u306F\u306A\u3044\uFF01", "Dawn Always Comes!"], "106703111": ["\u84BC\u8272\u9769\u547D", "Azure Revolution"], "106703211": ["\u30C0\u30F3\u30B9\u30FB\u30C7\u30FB\u30EC\u307A", "Danse de L'Ep\xE9e"], "106801111": ["\u796D\u308A\u3060\u30EF\u30C3\u30B7\u30E7\u30A4\uFF01", "Festival Shout!"], "106801211": ["\u7206\u98A8\u4E00\u9583\uFF01", "Blast Flash"], "106802111": ["\u672A\u6765\u3078\u98DB\u3073\u7ACB\u3061\u307E\u3057\u3087\u3046\uFF01", "Leap Towards The Future!"], "106802211": ["\u5FC5\u52DD\u306E\u524D\u53E3\u4E0A\uFF01", "Preamble of Victory!"], "106803111": ["\u3042\u3063\u3071\u308C\uFF01\u81E5\u7ADC\u52C7\u5F80", "Unleash the Dragon"], "106803211": ["\u4E07\u91CC\u98DB\u3073\u8D8A\u3048\u30BD\u30A4\u30E4\u30C3\uFF01", "Thousand Mile Cheer!"], "106901111": ["\u304A\u82B1\u898B\u5F53\u305F\u308A\u5E74\uFF01", "Pretty Blossoms, Pretty Year!"], "106901121": ["\u6848\u305A\u308B\u3088\u308A\u8D70\u308B\u304C\u901F\u3057", "Rather Run than Worry!"], "106901211": ["\u3051\u3075\u4E5D\u91CD\u306B\u6E80\u958B\u3067\u3059", "In Ninefold Bloom"], "106902111": ["\u685C\u82B1\u721B\u6F2B\u4E00\u76F4\u7DDA", "Trail of Blooming Sakura"], "106902211": ["\u8CA0\u3051\u305F\u304F\u306A\u3044\uFF01", "I Don't Want to Lose!"], "107001111": ["\u63FA\u308B\u304C\u306C\u30A2\u30B9\u30BF\u30FC", "Unwavering Aster"], "107001211": ["\u4E00\u7B49\u661F\u306E\u30A2\u30E9\u30D9\u30B9\u30AF", "Brightest Star's Arabesque"], "107001221": ["\u8FFD\u60F3\u306E\u30C8\u30ED\u30A4\u30E1\u30E9\u30A4", "Reminiscent Tr\xE4umerei"], "107101111": ["\u6C38\u9060\u306E\u8F1D\u304D", "Eternal Brilliance"], "107101211": ["\u5239\u90A3\u3078\u306E\u899A\u609F", "Moment's Readiness"], "107102111": ["\u7F8E\u3057\u304D\u71D0\u5149", "Beautiful Phosphorescence"], "107102121": ["\u5E7D\u7384\u306E\u706F\u706B", "Mystic Flame"], "107102211": ["\u6DE1\u304F\u511A\u3044\u6B8B\u7167", "Ephemeral Afterglow"], "107201111": ["\u6602\u308B\u7114", "Stirring Flame"], "107201211": ["\u516B\u91CD\u306E\u5411\u3053\u3046\u610F\u6C17", "Layered Determination"], "107201221": ["\u52DD\u5229\u306B\u7126\u304C\u308C\u308B\u6FC0\u60C5", "Ardent Desire for Victory"], "107202111": ["\u5C06\u306E\u75BE\u5203", "General's Swift Strike"], "107202211": ["\u7121\u53CC\u306E\u8FFD\u6483", "Peerless Pursuit"], "107301111": ["\u5343\u8F9B\u4E07\u82E6\u5207\u308A\u88C2\u304F\u5203", "Slash of a Thousand Trials"], "107301211": ["\u8FF8\u308B\u6708\u6D41\u661F", "Surging Crescent Moon"], "10731": ["\u5FC3\u3001\u5F37\u3057\uFF01", "Steel Your Heart, Tsuyoshi!"], "107401111": ["\u4E0D\u5C48\u306E\u304A\u5B22\u69D8", "Indomitable Dame"], "107401211": ["\u52D5\u304B\u3056\u308B\u3053\u3068\u7F8A\u8E44\u5C71\u306E\u82E5\u3057", "Immovable as Mt. Youtei"], "107402111": ["\u8056\u591C\u306E\u5929\u8DEF", "Heavenly Road of the Holy Night"], "107402211": ["\u96EA\u83EF\u306E\u8FFD\u3044\u4E0A\u3052", "Snowflake Pursuit"], "107601111": ["\u685C\u524D\u7DDA\u9032\u884C\u4E2D\uFF01", "Advancing Sakura Front!"], "107601211": ["\u4E00\u82B1\u54B2\u304B\u305B\u307E\u3057\u3087\u3046\uFF01", "Let's Bloom in the Moment!"], "107701111": ["\u30BF\u30FC\u30D5\u306E\u4E3B\u4EBA\u516C", "Turf Protagonist"], "107701211": ["\u6B63\u9053", "The Right Path"], "107702111": ["\u3072\u305F\u3080\u304D\u30B5\u30F3\u30BF\u30AF\u30ED\u30FC\u30B9", "Single-Minded Santa Claus"], "107702211": ["\u6697\u3044\u591C\u9053\u3082\u304A\u4EFB\u305B\u3092\uFF01", "Leave the Dark Nights to Me!"], "107801111": ["\u30A6\u30A4\u30F3\u30C9\u30B7\u30A2\u30FC", "Wind Shear"], "107801211": ["\u795E\u6E21\u3057", "Divine Crossing"], "107801221": ["\u5929\u3064\u98A8", "Heavenly Wind"], "107802111": ["\u5875\u65CB\u98A8\u3068\u306A\u308A\u3066", "Dust Devil Manifest"], "107802211": ["\u30B7\u30EB\u30D5\u30FB\u30B9\u30D4\u30EA\u30C3\u30C8", "Sylph Spirit"], "107901111": ["\u6F6E\u98A8\u306E\u5C0E\u304D", "Guidance of the Sea Breeze"], "107901211": ["\u52C7\u8239\u76F4\u5F80", "Brave Advance"], "108001111": ["\u60C5\u5831\u5F37\u8005", "Information Broker"], "108001211": ["\u300E\u672A\u77E5\u300F\u3092\u6C42\u3081\u3066", "Seeking the Unknown"], "108201111": ["\u30B3\u30B3\u30ED\u3001\u30AD\u30E9\u3081\u304F\u307E\u307E\u306B\uFF01", "With A Sparkling Heart!"], "108201211": ["Enjoy the Flight", "Enjoy the Flight"], "108301111": ["\u8CEA\u5B9F\u525B\u5065", "Ironclad"], "108301211": ["\u9769\u547D\u3092\u3082\u305F\u3089\u3059\u5A01\u5BB9", "Revolutionary Presence"], "108302111": ["Burn Down", "Burn Down"], "108302211": ["Service: Transit", "Service: Transit"], "108401111": ["\u5D50\u3092\u547C\u3076\u7834\u58CA\u795E", "Storm-Calling God of Destruction"], "108401211": ["\u9154\u3044\u75F4\u308C\u3088\u3001\u4E16\u754C", "Imbibe in Ecstasy, World!"], "108501111": ["\u83EF\u9E97\u3067\u3042\u308C", "Be Majestic"], "108501211": ["\u5E38\u306B\u6700\u305F\u308B\u8F1D\u304D\u3092", "Pursuing Greater Brilliance"], "108502111": ["\u9739\u9742\u9583\u96FB", "Thunderclap"], "108502211": ["\u7070\u3068\u5316\u3059\u307E\u3067", "Until Only Ashes Remain"], "108601111": ["\u7D14\u611B", "Pure Love"], "108601211": ["\u9AD8\u5DBA\u306E\u8276\u7B11", "Enchanting Smile Beyond Reach"], "108701111": ["\u5FC5\u52DD\u306E\u30D4\u30C3\u30C1\u30A2\u30C3\u30D7", "Victory Pitch-Up"], "108701211": ["\u8A18\u61B6\u306B\u523B\u3080\u8DB3\u53D6\u308A", "Unforgettable Step"], "108702111": ["\u8FBB\u6620\u308A\u306E\u5999\u6280", "The Art of Photobombing"], "108702211": ["\u899A\u3048\u3066\u3044\u3066\u304F\u3060\u3055\u3044\u306D\uFF1F", "Please Remember Me, Okay?"], "108801111": ["\u30A2\u30F3\u30D3\u30B7\u30E3\u30B9\u30AB\u30FC\u30C9", "Ambitious Card"], "108801211": ["\u30DF\u30EA\u30AA\u30F3\u30AB\u30FC\u30C9", "Million Card"], "108901111": ["\u5049\u5927\u306A\u308B\u8E0F\u7834", "Grand Expedition"], "108901211": ["\u5168\u529B\u6295\u7403", "Full-Power Pitch"], "109101111": ["\u5929\u6765\u306E\u30EA\u30C8\u30EB\u30B7\u30B9\u30BF\u30FC", "Heavenly Little Sister"], "109101211": ["\u30CF\u30A4\u30BD\u30FB\u30E1\u30F3\u30BF\u30EA\u30C6\u30A3\uFF01", "High Society Mentality!"], "109301111": ["K.Speed", "K.Speed"], "109301211": ["\u547D\u306E\u706B\u82B1", "Spark of Life"], "109401111": ["\u731B\u8972\u306E\u7259", "Fangs of Ferocity"], "109401211": ["\u95D8\u53EB\u306E\u9B3C", "Demon of Tokyo"], "109401221": ["\u5929\u4E0A\u5929\u4E0B\u552F\u6211\u7206\u8D70", "Unparalleled Bomber Runner"], "109801111": ["\u30B3\u30D1\u30C3\u3068\u958B\u904B\uFF01", "Copano-style Rising Fortunes!"], "109801211": ["\u9F8D\u8108\u306E\u6CE2\u6FE4", "Surging Ley Lines"], "109901111": ["\u82EB\u5C0F\u7267\u30B0\u30EB\u30E1\u3067\u820C\u9F13\uFF01", "Feast of Tomakomai"], "109901211": ["\u89B3\u5149\u5927\u4F7F\u306E\u9762\u76EE\u8E8D\u5982\uFF01", "Tourism Ambassador's Prestige"], "109902111": ["\u611F\u8B1D\u306E\u3075\u308B\u3055\u3068\u30E1\u30C9\u30EC\u30FC", "Hometown Medley"], "109902211": ["\u7A81\u304D\u9032\u3081\u5317\u306E\u6D77", "Plunge into the Northern Sea"], "1100011": ["\u8D85\u904A\u3073\u7656", "Dilly-Dally"], "110001111": ["\u95D8\u9B42\u6CE8\u5165", "Refueled Fighting Spirit"], "110001121": ["\u3044\u3076\u3057\u9280\u306E\u95D8\u5FD7", "Veiled Grit"], "110001211": ["\u5973\u795E\u306E\u7802\u6D74\u3073", "Goddess' Dust Bath"], "110011": ["\u308F\u3084\u304B\u308F\u266A\u30DE\u30EA\u30F3\u30C0\u30A4\u30F4", "Wayakawa \u266A Marine Dive"], "110021": ["\u6C34\u5E73\u7DDA\u306E\u305D\u306E\u5148\u3078", "Beyond the Ocean's Infinity"], "110031": ["\u7D76\u5BFE\u306F\u3001\u30DC\u30AF\u3060", "It's Going to Be Me"], "110041": ["\u30B0\u30C3\u3068\u304D\u3066\u266AChu", "Heartfelt \u266A Smooch"], "110051": ["Ravissant", "Ravissante"], "110061": ["\u8056\u591C\u306E\u30DF\u30E9\u30AF\u30EB\u30E9\u30F3\uFF01", "Christmas Eve Miracle Run!"], "110071": ["Adventure of 564", "Adventure of 564"], "110081": ["Into High Gear!", "Into High Gear!"], "110091": ["Queen's Lumination", "Queen's Lumination"], "110101": ["Joyful Voyage!", "Joyful Voyage!"], "110111": ["\u30B2\u30A4\u30F3\u30D2\u30FC\u30EB\u30FB\u30B9\u30DA\u30EA\u30A2\u30FC", "Gain Superior Heal"], "110121": ["\u5927\u76DB\u308A\uFF01\u30D5\u30A1\u30FC\u30B9\u30C8\u30D0\u30A4\u30C8\uFF01", "Extra Large First Bite!"], "110131": ["\u6700\u5F37\u306E\u540D\u3092\u61F8\u3051\u3066", "For the Strongest Name"], "110141": ["\u30B3\u30F3\u30C9\u30EB\u731B\u6483\u6CE2", "Condor Onslaught"], "110151": ["\u6075\u798F\u30D0\u30EB\u30AB\u30ED\u30FC\u30EC", "Blessed Barcarolle"], "110161": ["\u7070\u8272\u306E\u81E8\u754C\u70B9", "Critical Point: Gray"], "110171": ["\u7FF3\u308A\u9000\u304F\u3001\u3055\u3056\u3081\u304D\u306E\u77E2", "Howling Arrow Piercing the Darkness"], "110181": ["\u85AB\u98A8\u3001\u6C38\u9060\u306A\u308B\u77AC\u9593\u3092", "Summer Breeze, the Eternal Moment"], "110191": ["\u840C\u5230\u8B93\u6211\u6D3B\u904E\u4F86\u4E86\uFF01", "Revived by Moe!"], "110201": ["Do Ya Breakin!", "Do Ya Breakin!"], "110201111": ["\u30AB\u30A8\u30B9\u30FC\u30E9", "Caesura"], "110201211": ["\u30C8\u30E9\u30A4\u30A2\u30F3\u30D5", "Trionfo"], "110211": ["\u706B\u795E\u9CF4", "Thunderous Firestarter"], "110221": ["Best day ever", "Best Day Ever"], "110231": ["Presents from X", "Presents from X"], "110241": ["\u30D5\u30E9\u30EF\u30EA\u30FC\u2606\u30DE\u30CB\u30E5\u30FC\u30D0", "Flowery \u2606 Maneuver"], "110251": ["\u5FC3\u304B\u3089\u306E\u304A\u3082\u3066\u306B\u3083\u3057", "Purrfect Hospitality"], "110261": ["\u30AA\u30DA\u30EC\u30FC\u30B7\u30E7\u30F3\u30FBCacao", "Operation Cacao"], "110271": ["\u3042\u306A\u305F\u306B\u6367\u3052\u308B\u30D5\u30EA\u30FC\u30DD\u30A2", "Latte Art For You"], "110291": ["\u3044\u3063\u3071\u3044\u304A\u3042\u3052\u3093\u3057\u3047\uFF01", "Have Your Fill!"], "110301": ["Drain for rose", "Drain for Rose"], "110311": ["\u30D5\u30EC\u30C3\u30B7\u30E5\u2606\u30D1\u30FC\u30E9\u30FC", "Fresh \u2606 Parlor"], "110321": ["\u590F\u7A7A\u30CF\u30EC\u30FC\u30B7\u30E7\u30F3", "Summer Halation"], "110331": ["Crystal Mist", "Crystal Mist"], "110341": ["\u706F\u7A42", "Bristling Lights"], "110351": ["\u5922\u306E\u5148\u3078\u3001\u5C4A\u3051\uFF01", "Delivering Beyond the Dreams!"], "110361": ["...found you.", "...found you."], "110371": ["Guten Appetit\u266A", "Guten Appetit\u266A"], "110381": ["One True Color", "One True Color"], "110391": ["\u5FEB\u306A\u308B\u525B\u529B", "Invigorating Strength"], "110401": ["GET DOWN", "GET DOWN"], "110401111": ["\u3057\u3066\u3084\u3063\u305F\u308A\uFF01", "Beat You to It!"], "110401211": ["\u9003\u3052\u3063\u5207\u308A\u306E1\u4EBA\u65C5", "Solitary Getaway"], "110402111": ["\u4F0F\u7ADC\u306F\u76EE\u899A\u3081\u3066", "Dormant Dragon's Rise"], "110402211": ["\u6681\u5149\u80CC\u8CA0\u3044\u3066", "Dawnborne"], "110411": ["CHERRY\u2606\u30B9\u30AF\u30E9\u30F3\u30D6\u30EB", "Cherry\u2606Scramble"], "110421": ["Oh!bento-magic\u2606", "Oh!bento-magic\u2606"], "110441": ["\u3068\u3063\u3066\u304A\u304Dmaterialize", "Special Materialization"], "110451": ["\u3050\u308B\u3050\u308B\u30DE\u30DF\u30FC\u30C8\u30EA\u30C3\u30AF\u2661", "Round and Round, Mummy Trick\u2661"], "110461": ["\u03B1-star*", "\u03B1-star*"], "110471": ["\u672A\u77E5\u3068\u306E\u906D\u9047\u3001\u5373\u3061\u7269\u8A9E", "Close Encounters of the Literary Kind"], "110481": ["GALmem.\u3075\u3049\u30FC\u3048\u3070\u266A", "GALmem. forever\u266A"], "110501": ["Hephaistos", "Hephaistos"], "110501111": ["\u9280\u6CB3\u306E\u305D\u306E\u5148\u3078\u3001\u3042\u306A\u305F\u3068", "Beyond the Milky Way With You"], "110501211": ["\u661F\u306E\u6D77\u3092\u99C6\u3051\u3066", "Crossing the Sea of Stars"], "110502111": ["\u30EB\u30DF\u30CA\u30B9\u30FB\u30B9\u30DA\u30AF\u30C8\u30E9\u30E0", "Luminous Spectrum"], "110502211": ["\u201CMETI\u201D\u30EC\u30BE\u30CA\u30F3\u30B9", "METI Resonance"], "110511": ["Flowering Dreams", "Flowering Dreams"], "110521": ["113\u8EE2\u3073114\u8D77\u304D", "Fall Down 113 Times, Get Up 114"], "110531": ["\u5965\u7FA9\u30FB\u5E38\u590F\u30D0\u30FC\u30CB\u30F3\u30B0\uFF01\uFF01", "Secret Technique: Everlasting Summer!!"], "110561": ["\u79BE\u30B9\u30CA\u30CF\u30C1\u767B\u30EB", "Grains Become Ripe"], "110571": ["\u721B\u7136\u95CA\u6B69", "Radiant Stride"], "110581": ["Spooky-Scary-Happy", "Spooky-Scary-Happy"], "110591": ["\u3068\u304D\u3081\u304D\u304C\u547C\u3076\u307B\u3046\u3078", "To Where the Heart Beckons"], "110601": ["Go\u2606Go\u2606for it!", "Go\u2606Go\u2606For It!"], "110601111": ["\u7126\u3089\u305A\u3001\u6C17\u8CA0\u308F\u305A", "Keep Calm, Don't Overthink"], "110601121": ["\u3067\u304D\u308B\u7BC4\u56F2\u3067\u304C\u3093\u3070\u308D\uFF5E\uFF01", "I'll Do What I Can~!"], "110601211": ["\u3061\u3087\u3063\u3068\u3044\u3044\u3053\u3068\u3001\u96C6\u3081\u3066", "Collecting Little Joys"], "110611": ["\u8F5F\uFF01\u30C8\u30EC\u30BB\u30F3\u5FDC\u63F4\u56E3\uFF01\uFF01", "Roaring Tracen Cheerleading Squad"], "110621": ["\u3054\u308D\u308A\u3093\uFF01\uFF1F\u30D1\u30EF\u30FC\u30C9\u30E9\u30A4\u30D6", "Rolling Power Drive!"], "110641": ["jingle all the way", "Jingle All the Way"], "110651": ["\u30CE\u30C3\u3066\u3051\u3001\u30DE\u30C3\u30B7\u30E5\u30A2\u30C3\u30D7\uFF01", "It's Mashup Time!"], "110671": ["\u7384\u96F2\u6563\u3089\u3059\u3001\u9EC4\u91D1\u7532\u77E2", "Arrow of Gold, Break up the Dark Clouds"], "110681": ["\u3042\u3063\u3071\u308C\u5927\u76E4\u632F\u308B\u821E\u3044\uFF01", "Lavish Feast"], "110691": ["\u54B2\u3051\u54B2\u3051\uFF01\u79C1\uFF01", "Bloom! Blossom! Sakura!"], "110701111": ["Breakaway Star", "Breakaway Star"], "110701211": ["Smooth Sailing!", "Smooth Sailing!"], "110711": ["Danser le pr\xE9sent", "Danser le Pr\xE9sent"], "110721": ["\u525B\u52C7\u679C\u65AD\u3001\u70C8\u706B\u4E4B\u5200", "Decisive Blade of Blazing Fire"], "110741": ["Illuminate you", "Illuminate You"], "110771": ["Joy to the World", "Joy to the World"], "110781": ["Breezy Treat", "Breezy Treat"], "110801111": ["\u78E8\u7A7F\u9244\u786F", "Constant Refinement"], "110801211": ["\u8D6B\u7109", "Blazing Brilliance"], "110831": ["Immortal Work", "Immortal Work"], "110851": ["\u84BC\u708E", "Sapphire Flame"], "110871": ["\u3075\u308F\u3082\u3053\u30A2\u30EF\u30FC", "Fluffy Fuzzy Hour"], "110901111": ["\u672A\u6765\u3092\u62D3\u3051\uFF01", "Pioneering the Future!"], "110901211": ["\u305C\u30FC\u3063\u305F\u3044\u8CA0\u3051\u3089\u308C\u306A\u3044\uFF01", "There's No Way I'll Lose!"], "110991": ["\u3068\u3073\u3060\u305B\u2606\u30DD\u30C3\u30D4\u30F3\u30B0\u30B7\u30A7\u30EB", "Popping\u2606Clams"], "111001111": ["\u790E\u305F\u308C", "Become the Foundation"], "111001211": ["\u9E97\u3057\u304D\u8EE2\u8EAB", "Beautiful Transformation"], "111041": ["\u6C7A\u610F\u4E00\u7B46", "Determined Stroke"], "111051": ["Encounter with U", "Encounter With U"], "111101111": ["\u6BCD\u306E\u9762\u5F71\u3092\u8FFD\u3063\u3066", "Chasing Mother's Likeness"], "111101211": ["\u5805\u5B9F\u306A\u308B\u79D8\u7B56", "Steady Stratagem"], "111501111": ["\u6211\u304C\u610F\u3001\u5373\u3061\u5929\u306E\u7406\u306A\u308A", "My Will is Divine"], "111501211": ["\u738B\u5A01\u7D62\u721B", "Sovereign's Dominion"], "111501221": ["\u2015\u2015\u754F\u308C\u3088\u3001\u7136\u3057\u3066\u62DD\u8DEA\u305B\u3088", "You Shall Kneel in Reverence"], "111601111": ["\u2015\u2015\u304A\u9000\u304D\u306A\u3055\u3044", "Step Aside"], "111601211": ["Power Am I", "Power Am I"], "111601221": ["\u6DD1\u5973\u306E\u72EC\u64C5\u5834", "A Lady's Domain"], "111701111": ["\u30B0\u30E9\u30F3\u30FB\u30B8\u30E5\u30C3\u30C6", "Grand Jet\xE9"], "111701211": ["\u9081\u9032\u30A2\u30F3\u30FB\u30EC\u30FC\u30EB", "En l'Air"], "111901111": ["\u679C\u3066\u3078\u306E\u9762\u8235", "Starboard Till the End"], "111901211": ["\u5922\u898B\u5FC3\u5730", "Trance"], "112001111": ["\u9583\u5149\u4E00\u8D70\uFF01", "Flash Dash!"], "112001211": ["\u7A81\u98A8\u4E00\u99C6\uFF01", "Gale Rush!"], "112101111": ["\u5FE0\u5FC3\u306E\u30F4\u30A7\u30A4\u30E4\u30F3\u30C6\u30A3\u30D5", "Faithful Veillantif"], "112101211": ["\u30AA\u30EA\u30D5\u30A1\u30F3\u30C8\u306E\u8F5F\u96F7", "Olifant's Roar"], "112401111": ["\u4FCA\u5091\u306E\u60A0", "Champion's Composure"], "112401211": ["\u5686\u77E2\u306E\u82B1\u9053", "Vanguard's Limelight"], "113101111": ["\u63A8\u3057\u3066\u307E\u3044\u308B\uFF01\uFF01", ""], "113101211": ["\u4E07\u54E9\u3078\u97FF\u3051\u5927\u6B53\u58F0", ""], "1200011": ["\u4E2D\u8DDD\u96E2\u30EC\u30FC\u30B9\u3078\u306E\u60F3\u3044", "Medium-Distance Racing Passion"], "1200021": ["\u9577\u8DDD\u96E2\u30EC\u30FC\u30B9\u3078\u306E\u60F3\u3044", "Long-Distance Racing Passion"], "1200031": ["\u30DE\u30A4\u30EB\u30EC\u30FC\u30B9\u3078\u306E\u60F3\u3044", "Mile Racing Passion"], "1200041": ["\u77ED\u8DDD\u96E2\u30EC\u30FC\u30B9\u3078\u306E\u60F3\u3044", "Short-Distance Racing Passion"], "1200051": ["\u30C0\u30FC\u30C8\u30EC\u30FC\u30B9\u3078\u306E\u60F3\u3044", "Dirt Racing Passion"], "120011": ["\u5A01\u98A8\u5802\u3005\u3001\u5922\u9326\uFF01", "Dignified Dreamlike Brocade"], "120031": ["\u6B4C\u821E\u6B53\u697D\u3084\u3001\u3042\u3042\u3092\u304B\u3057", "Merrymaking Song and Dance"], "120041": ["\u970A\u9A13\u707C\u7136\u30C1\u30E7\u30D9\u30EA\u30B0\u795E\u8A17", "Miraculously Tubular Oracle"], "120071": ["Vive la GOLD", "Vive la GOLD"], "120111": ["\u6F14\u821E\u30FB\u64AB\u5B50\u5927\u8599\u5200", "Naginata Maiden's Dance"], "120131": ["\u304D\u3089\u3081\u304F\u306F\u6D77\u3001\u307E\u3070\u3086\u304D\u306F\u541B", "The Sea Glitters, but You're Dazzling"], "120231": ["\u52DD\u5229\u30D8\u81F3\u30EB\u7D2F\u7A4D", "Accumulative Victory"], "120241": ["HOP STEP\u266ALOCK ON!", "HOP STEP\u266ALOCK ON!"], "120301": ["\u3042\u304A\u305E\u3089\u30AF\u30C3\u30AD\u30F3\u30B0\u266A", "Clear Sky Cooking\u266A"], "120321": ["\u8D85\u5149\u901F\u5FAE\u7C92\u5B50\u306E\u53EF\u80FD\u6027", "Tachyon Potential"], "120351": ["GO! Full-send", "GO! Full-send"], "120371": ["\u6F6E\u98A8\u306EGeschenk", "Geschenk of the Salty Sea Breeze"], "120451": ["\u5FCD\u6CD5\u30FB\u307B\u307B\u3048\u307F\u5FC3\u7D50\u306E\u5370", "Ninja Art: Seal of the Smiling Heart"], "120501": ["Overdrive Speed", "Overdrive Speed"], "120601": ["\u3082\u3061\u3063\u3068\u30FB\u30CF\u30EC\u30CF\u30EC", "Springy Festivities"], "120611": ["\u7406\u60F3\u3078\u306Ewinding road", "The Winding Road to Ideals"], "120671": ["\u30DD\u30F3\u30C6\u30FB\u30C7\u30FB\u30C7\u30A3\u30A2\u30DE\u30F3", "Ponte de Diamant"], "120681": ["\u30DF\u30F3\u30CA\u30CE\u30A2\u30BF\u30B7\u3078\uFF01", "Becoming Everyone's Joy!"], "1300011": ["\u30DC\u30EB\u30C6\u30FC\u30B8\u30D2\u30FC\u30ED\u30FC", "Voltage Hero"], "1300021": ["\u30B5\u30F3\u30E9\u30A4\u30BA\u30D2\u30FC\u30ED\u30FC", "Sunrise Hero"], "1300031": ["\u30EC\u30A4\u30CB\u30FC\u30D2\u30FC\u30ED\u30FC", "Rainy Hero"], "1300041": ["\u30A4\u30F3\u30B5\u30A4\u30C9\u30D2\u30FC\u30ED\u30FC", "Inside Hero"], "1300051": ["\u30A2\u30A6\u30C8\u30B5\u30A4\u30C9\u30D2\u30FC\u30ED\u30FC", "Outside Hero"], "1300061": ["\u30EA\u30F3\u30B1\u30FC\u30B8\u30D2\u30FC\u30ED\u30FC", "Linkage Hero"], "1300071": ["\u30B9\u30D1\u30FC\u30C8\u30D2\u30FC\u30ED\u30FC", "Spurt Hero"], "1400011": ["\u30DE\u30B9\u30BF\u30FC\u30BA\u30C9\u30E9\u30A4\u30D6", "Master's Drive"], "200011": ["\u53F3\u56DE\u308A\u25CE", "Right Turns \u25CE"], "200012": ["\u53F3\u56DE\u308A\u25CB", "Right Turns \u25CB"], "200013": ["\u53F3\u56DE\u308A\xD7", "Right Turns \xD7"], "200014": ["\u53F3\u56DE\u308A\u306E\u9B3C", "Clockwise Demon"], "200021": ["\u5DE6\u56DE\u308A\u25CE", "Left Turns \u25CE"], "200022": ["\u5DE6\u56DE\u308A\u25CB", "Left Turns \u25CB"], "200023": ["\u5DE6\u56DE\u308A\xD7", "Left Turns \xD7"], "200031": ["\u6771\u4EAC\u30EC\u30FC\u30B9\u5834\u25CE", "Tokyo Racetrack \u25CE"], "200032": ["\u6771\u4EAC\u30EC\u30FC\u30B9\u5834\u25CB", "Tokyo Racetrack \u25CB"], "200033": ["\u6771\u4EAC\u30EC\u30FC\u30B9\u5834\xD7", "Tokyo Racetrack \xD7"], "200034": ["\u5E9C\u4E2D\u306E\u7533\u3057\u5B50", "Child of Fuchu"], "200041": ["\u4E2D\u5C71\u30EC\u30FC\u30B9\u5834\u25CE", "Nakayama Racetrack \u25CE"], "200042": ["\u4E2D\u5C71\u30EC\u30FC\u30B9\u5834\u25CB", "Nakayama Racetrack \u25CB"], "200043": ["\u4E2D\u5C71\u30EC\u30FC\u30B9\u5834\xD7", "Nakayama Racetrack \xD7"], "200051": ["\u962A\u795E\u30EC\u30FC\u30B9\u5834\u25CE", "Hanshin Racetrack \u25CE"], "200052": ["\u962A\u795E\u30EC\u30FC\u30B9\u5834\u25CB", "Hanshin Racetrack \u25CB"], "200053": ["\u962A\u795E\u30EC\u30FC\u30B9\u5834\xD7", "Hanshin Racetrack \xD7"], "200061": ["\u4EAC\u90FD\u30EC\u30FC\u30B9\u5834\u25CE", "Kyoto Racetrack \u25CE"], "200062": ["\u4EAC\u90FD\u30EC\u30FC\u30B9\u5834\u25CB", "Kyoto Racetrack \u25CB"], "200063": ["\u4EAC\u90FD\u30EC\u30FC\u30B9\u5834\xD7", "Kyoto Racetrack \xD7"], "200064": ["\u6DC0\u306E\u7533\u3057\u5B50", "Child of Yodo"], "200071": ["\u4E2D\u4EAC\u30EC\u30FC\u30B9\u5834\u25CE", "Chukyo Racetrack \u25CE"], "200072": ["\u4E2D\u4EAC\u30EC\u30FC\u30B9\u5834\u25CB", "Chukyo Racetrack \u25CB"], "200073": ["\u4E2D\u4EAC\u30EC\u30FC\u30B9\u5834\xD7", "Chukyo Racetrack \xD7"], "200081": ["\u672D\u5E4C\u30EC\u30FC\u30B9\u5834\u25CE", "Sapporo Racetrack \u25CE"], "200082": ["\u672D\u5E4C\u30EC\u30FC\u30B9\u5834\u25CB", "Sapporo Racetrack \u25CB"], "200083": ["\u672D\u5E4C\u30EC\u30FC\u30B9\u5834\xD7", "Sapporo Racetrack \xD7"], "200091": ["\u51FD\u9928\u30EC\u30FC\u30B9\u5834\u25CE", "Hakodate Racetrack \u25CE"], "200092": ["\u51FD\u9928\u30EC\u30FC\u30B9\u5834\u25CB", "Hakodate Racetrack \u25CB"], "200093": ["\u51FD\u9928\u30EC\u30FC\u30B9\u5834\xD7", "Hakodate Racetrack \xD7"], "200101": ["\u798F\u5CF6\u30EC\u30FC\u30B9\u5834\u25CE", "Fukushima Racetrack \u25CE"], "200102": ["\u798F\u5CF6\u30EC\u30FC\u30B9\u5834\u25CB", "Fukushima Racetrack \u25CB"], "200103": ["\u798F\u5CF6\u30EC\u30FC\u30B9\u5834\xD7", "Fukushima Racetrack \xD7"], "200111": ["\u65B0\u6F5F\u30EC\u30FC\u30B9\u5834\u25CE", "Niigata Racetrack \u25CE"], "200112": ["\u65B0\u6F5F\u30EC\u30FC\u30B9\u5834\u25CB", "Niigata Racetrack \u25CB"], "200113": ["\u65B0\u6F5F\u30EC\u30FC\u30B9\u5834\xD7", "Niigata Racetrack \xD7"], "200121": ["\u5C0F\u5009\u30EC\u30FC\u30B9\u5834\u25CE", "Kokura Racetrack \u25CE"], "200122": ["\u5C0F\u5009\u30EC\u30FC\u30B9\u5834\u25CB", "Kokura Racetrack \u25CB"], "200123": ["\u5C0F\u5009\u30EC\u30FC\u30B9\u5834\xD7", "Kokura Racetrack \xD7"], "200131": ["\u6839\u5E79\u8DDD\u96E2\u25CE", "Core Distances \u25CE"], "200132": ["\u6839\u5E79\u8DDD\u96E2\u25CB", "Core Distances \u25CB"], "200133": ["\u6839\u5E79\u8DDD\u96E2\xD7", "Core Distances \xD7"], "200141": ["\u975E\u6839\u5E79\u8DDD\u96E2\u25CE", "Non-Core Distances \u25CE"], "200142": ["\u975E\u6839\u5E79\u8DDD\u96E2\u25CB", "Non-Core Distances \u25CB"], "200143": ["\u975E\u6839\u5E79\u8DDD\u96E2\xD7", "Non-Core Distances \xD7"], "200151": ["\u826F\u30D0\u5834\u25CE", "Good Track Condition \u25CE"], "200152": ["\u826F\u30D0\u5834\u25CB", "Good Track Condition \u25CB"], "200153": ["\u826F\u30D0\u5834\xD7", "Good Track Condition \xD7"], "200154": ["\u826F\u30D0\u5834\u306E\u9B3C", "Good Track Demon"], "200161": ["\u9053\u60AA\u25CE", "Bad Track Condition \u25CE"], "200162": ["\u9053\u60AA\u25CB", "Bad Track Condition \u25CB"], "200163": ["\u9053\u60AA\xD7", "Bad Track Condition \xD7"], "200164": ["\u9053\u60AA\u306E\u9B3C", "Bad Track Demon"], "200171": ["\u6625\u30A6\u30DE\u5A18\u25CE", "Spring Girl \u25CE"], "200172": ["\u6625\u30A6\u30DE\u5A18\u25CB", "Spring Girl \u25CB"], "200173": ["\u6625\u30A6\u30DE\u5A18\xD7", "Spring Girl \xD7"], "200174": ["\u6625\u4E00\u756A", "First Breeze of Spring"], "200181": ["\u590F\u30A6\u30DE\u5A18\u25CE", "Summer Girl \u25CE"], "200182": ["\u590F\u30A6\u30DE\u5A18\u25CB", "Summer Girl \u25CB"], "200183": ["\u590F\u30A6\u30DE\u5A18\xD7", "Summer Girl \xD7"], "200184": ["\u9752\u5D50", "Summer Gale"], "200191": ["\u79CB\u30A6\u30DE\u5A18\u25CE", "Autumn Girl \u25CE"], "200192": ["\u79CB\u30A6\u30DE\u5A18\u25CB", "Autumn Girl \u25CB"], "200193": ["\u79CB\u30A6\u30DE\u5A18\xD7", "Autumn Girl \xD7"], "200194": ["\u521D\u5D50", "The First Storm"], "200201": ["\u51AC\u30A6\u30DE\u5A18\u25CE", "Winter Girl \u25CE"], "200202": ["\u51AC\u30A6\u30DE\u5A18\u25CB", "Winter Girl \u25CB"], "200203": ["\u51AC\u30A6\u30DE\u5A18\xD7", "Winter Girl \xD7"], "200204": ["\u51CD\u3066\u98A8", "Chilling Wind"], "200211": ["\u6674\u308C\u306E\u65E5\u25CE", "Sunny Days \u25CE"], "200212": ["\u6674\u308C\u306E\u65E5\u25CB", "Sunny Days \u25CB"], "200221": ["\u66C7\u308A\u306E\u65E5\u25CE", "Cloudy Days \u25CE"], "200222": ["\u66C7\u308A\u306E\u65E5\u25CB", "Cloudy Days \u25CB"], "200231": ["\u96E8\u306E\u65E5\u25CE", "Rainy Days \u25CE"], "200232": ["\u96E8\u306E\u65E5\u25CB", "Rainy Days \u25CB"], "200233": ["\u96E8\u306E\u65E5\xD7", "Rainy Days \xD7"], "200241": ["\u96EA\u306E\u65E5\u25CE", "Snowy Days \u25CE"], "200242": ["\u96EA\u306E\u65E5\u25CB", "Snowy Days \u25CB"], "200251": ["\u5185\u67A0\u5F97\u610F\u25CE", "Inner Gate Affinity \u25CE"], "200252": ["\u5185\u67A0\u5F97\u610F\u25CB", "Inner Gate Affinity \u25CB"], "200253": ["\u5185\u67A0\u82E6\u624B", "Inner Gate Affinity \xD7"], "200261": ["\u5916\u67A0\u5F97\u610F\u25CE", "Outer Gate Affinity \u25CE"], "200262": ["\u5916\u67A0\u5F97\u610F\u25CB", "Outer Gate Affinity \u25CB"], "200263": ["\u5916\u67A0\u82E6\u624B", "Outer Gate Affinity \xD7"], "200271": ["\u304A\u3072\u3068\u308A\u69D8\u25CE", "Loner \u25CE"], "200272": ["\u304A\u3072\u3068\u308A\u69D8\u25CB", "Loner \u25CB"], "200281": ["\u5BFE\u6297\u610F\u8B58\u25CE", "Competitive Spirit \u25CE"], "200282": ["\u5BFE\u6297\u610F\u8B58\u25CB", "Competitive Spirit \u25CB"], "200283": ["\u5F15\u3063\u8FBC\u307F\u601D\u6848", "Introverted"], "200291": ["\u5FB9\u5E95\u30DE\u30FC\u30AF\u25CE", "Eyes On You \u25CE"], "200292": ["\u5FB9\u5E95\u30DE\u30FC\u30AF\u25CB", "Eyes On You \u25CB"], "200301": ["\u4F0F\u5175\u25CE", "Underdog \u25CE"], "200302": ["\u4F0F\u5175\u25CB", "Underdog \u25CB"], "200311": ["G\u2160\u82E6\u624B", "G1 Dislike"], "200321": ["\u5C0F\u5FC3\u8005", "Timid"], "200331": ["\u5F27\u7DDA\u306E\u30D7\u30ED\u30D5\u30A7\u30C3\u30B5\u30FC", "Archline Professor"], "200332": ["\u30B3\u30FC\u30CA\u30FC\u5DE7\u8005\u25CB", "Clever Cornerer \u25CB"], "200333": ["\u30B3\u30FC\u30CA\u30FC\u5DE7\u8005\xD7", "Clever Cornerer \xD7"], "200341": ["\u66F2\u7DDA\u306E\u30BD\u30E0\u30EA\u30A8", "Curve Sommelier"], "200342": ["\u30B3\u30FC\u30CA\u30FC\u52A0\u901F\u25CB", "Corner Accel \u25CB"], "200343": ["\u30B3\u30FC\u30CA\u30FC\u52A0\u901F\xD7", "Corner Accel \xD7"], "200351": ["\u5186\u5F27\u306E\u30DE\u30A8\u30B9\u30C8\u30ED", "Arc Maestro"], "200352": ["\u30B3\u30FC\u30CA\u30FC\u56DE\u5FA9\u25CB", "Corner Recovery \u25CB"], "200353": ["\u30B3\u30FC\u30CA\u30FC\u56DE\u5FA9\xD7", "Corner Recovery \xD7"], "200361": ["\u30CF\u30E4\u30C6\u4E00\u6587\u5B57", "Like The Wind"], "200362": ["\u76F4\u7DDA\u5DE7\u8005", "Straight Skill"], "200371": ["\u4E00\u9663\u306E\u98A8", "Gust of Wind"], "200372": ["\u76F4\u7DDA\u52A0\u901F", "Straight Accel"], "200381": ["\u597D\u8EE2\u4E00\u606F", "Breath of Fresh Air"], "200382": ["\u76F4\u7DDA\u56DE\u5FA9", "Straight Recovery"], "200391": ["\u5742\u82E6\u624B", "Hill Dislike"], "200401": ["\u30D0\u7FA4\u5ACC\u3044", "Crowd Hater"], "200411": ["\u3042\u304D\u3089\u3081\u7656", "Resignation"], "200421": ["\u624B\u629C\u304D\u7656", "Negligence"], "200431": ["\u30B3\u30F3\u30BB\u30F3\u30C8\u30EC\u30FC\u30B7\u30E7\u30F3", "Concentration"], "200432": ["\u96C6\u4E2D\u529B", "Focus"], "200433": ["\u30B2\u30FC\u30C8\u96E3", "Gate Trouble"], "200441": ["\u92FC\u306E\u610F\u5FD7", "Will of Steel"], "200442": ["\u96A0\u308C\u84D1", "Undercover"], "200451": ["\u6CE8\u76EE\u306E\u8E0A\u308A\u5B50", "Star of the Show"], "200452": ["\u30DD\u30B8\u30B7\u30E7\u30F3\u30BB\u30F3\u30B9", "Position Sense"], "200461": ["\u30A2\u30AC\u30C3\u3066\u304D\u305F\uFF01", "Now I'm Pumped!"], "200462": ["\u30DA\u30FC\u30B9\u30A2\u30C3\u30D7", "Up The Pace"], "200471": ["\u4E0D\u5C48\u306E\u5FC3", "Indomitable Heart"], "200472": ["\u30DA\u30FC\u30B9\u30AD\u30FC\u30D7", "Keep the Pace"], "200481": ["\u3069\u3053\u5439\u304F\u98A8", "Where the Wind Blows"], "200482": ["\u30A6\u30DE\u8FBC\u307F\u51B7\u9759", "Crowded Calm"], "200491": ["\u30CE\u30F3\u30B9\u30C8\u30C3\u30D7\u30AC\u30FC\u30EB", "Non-stop Girl"], "200492": ["\u5782\u308C\u30A6\u30DE\u56DE\u907F", "Slight Detour"], "200501": ["\u30EC\u30FC\u30F3\u306E\u9B54\u8853\u5E2B", "Magician of the Lane"], "200502": ["\u81E8\u6A5F\u5FDC\u5909", "Improvise"], "200511": ["\u5168\u8EAB\u5168\u970A", "Heart and Soul"], "200512": ["\u672B\u811A", "Last Leg"], "200521": ["\u7A7A\u56DE\u308A", "Running Idle"], "200531": ["\u5148\u624B\u5FC5\u52DD", "Fortune Favors the Fast"], "200532": ["\u5148\u99C6\u3051", "Frontrunner"], "200541": ["\u8131\u51FA\u8853", "Escape Artist"], "200542": ["\u6025\u304E\u8DB3", "Fast Paced"], "200551": ["\u9003\u4EA1\u8005", "Runaway"], "200552": ["\u62BC\u3057\u5207\u308A\u6E96\u5099", "Press Forward, Ready!"], "200561": ["\u4F59\u88D5\u7DBD\u3005", "Calm and Composed"], "200562": ["\u30B9\u30BF\u30DF\u30CA\u30AD\u30FC\u30D7", "Stamina Keep"], "200571": ["\u30EC\u30FC\u30B9\u30D7\u30E9\u30F3\u30CA\u30FC", "Race Planner"], "200572": ["\u597D\u4F4D\u8FFD\u8D70", "Favorite Place"], "200581": ["\u30B9\u30D4\u30FC\u30C9\u30B9\u30BF\u30FC", "Speed Star"], "200582": ["\u629C\u3051\u51FA\u3057\u6E96\u5099", "Passing Preparations"], "200591": ["\u8FC5\u901F\u679C\u65AD", "Quick and Decisive"], "200592": ["\u4F4D\u7F6E\u53D6\u308A\u62BC\u3057\u4E0A\u3052", "Position Swiper"], "200601": ["\u4E57\u308A\u63DB\u3048\u4E0A\u624B", "Switch-up Pro"], "200602": ["\u5DEE\u3057\u5207\u308A\u4F53\u52E2", "Between the Lines"], "200611": ["\u6607\u308A\u9F8D", "Rising Dragon"], "200612": ["\u5916\u5DEE\u3057\u6E96\u5099", "Outside Pass, Ready!"], "200621": ["\u7720\u308C\u308B\u7345\u5B50", "Sleeping Lion"], "200622": ["\u5F8C\u65B9\u5F85\u6A5F", "On Standby"], "200631": ["\u75BE\u98A8\u6012\u6FE4", "Storm and Stress"], "200632": ["\u4ED5\u639B\u3051\u629C\u7FA4", "Outstanding Stratagem"], "200641": ["\u8FEB\u308B\u5F71", "Imminent Shadow"], "200642": ["\u76F4\u7DDA\u4E00\u6C17", "Straight Shot"], "200651": ["\u30B9\u30D7\u30EA\u30F3\u30C8\u30BF\u30FC\u30DC", "Sprint Turbo"], "200652": ["\u30B9\u30D7\u30EA\u30F3\u30C8\u30AE\u30A2", "Sprinting Gear"], "200662": ["\u69D8\u5B50\u898B", "Wait and See"], "200671": ["\u96FB\u6483\u306E\u714C\u3081\u304D", "Jolt of Energy"], "200672": ["\u8A70\u3081\u5BC4\u308A", "Draw Forward"], "200681": ["\u30DE\u30A4\u30EB\u306E\u652F\u914D\u8005", "Ruler of Mile"], "200682": ["\u7A4D\u6975\u7B56", "Positive Planning"], "200691": ["\u6167\u773C", "Keen Insight"], "200692": ["\u5C55\u958B\u7ABA\u3044", "Progress Peek"], "200701": ["\u8C6A\u811A", "Big Strides"], "200702": ["\u4E0A\u6607\u6C17\u6D41", "Updraft"], "200711": ["\u5207\u308A\u958B\u304F\u8005", "Trailblazer"], "200712": ["\u524D\u9014\u6D0B\u3005", "Bright Future"], "200721": ["\u30AD\u30E9\u30FC\u30C1\u30E5\u30FC\u30F3", "Killer Tune"], "200722": ["\u30C6\u30F3\u30DD\u30A2\u30C3\u30D7", "Uptempo"], "200731": ["\u52DD\u5229\u3078\u306E\u57F7\u5FF5", "To Victory!"], "200732": ["\u98DF\u3044\u4E0B\u304C\u308A", "Stand Your Ground"], "200741": ["\u30AF\u30FC\u30EB\u30C0\u30A6\u30F3", "Cooldown"], "200742": ["\u6DF1\u547C\u5438", "Deep Breaths"], "200751": ["\u5185\u7684\u4F53\u9A13", "Intrinsic Experience"], "200752": ["\u5185\u5F01\u6176", "King of the Castle"], "200761": ["\u706B\u4E8B\u5834\u306E\u30D0\u9E7F\u529B", "Fight or Flight"], "200762": ["\u5225\u8179\u30BF\u30F3\u30AF", "Backup Belly"], "200771": ["\u30C8\u30EA\u30C3\u30AF\uFF08\u524D\uFF09", "Trick (Front)"], "200772": ["\u898B\u60DA\u308C\u308B\u30C8\u30EA\u30C3\u30AF", "Captivating Trick"], "200781": ["\u30C8\u30EA\u30C3\u30AF\uFF08\u5F8C\uFF09", "Trick (Back)"], "200791": ["\u9003\u3052\u99C6\u3051\u5F15\u304D", "Frantic Runners"], "200801": ["\u5148\u884C\u99C6\u3051\u5F15\u304D", "Frantic Leaders"], "200811": ["\u5DEE\u3057\u99C6\u3051\u5F15\u304D", "Frantic Betweeners"], "200821": ["\u8FFD\u8FBC\u99C6\u3051\u5F15\u304D", "Frantic Chasers"], "200831": ["\u9003\u3052\u3051\u3093\u5236", "Restrained Runners"], "200841": ["\u9003\u3052\u7126\u308A", "Panicked Runners"], "200851": ["\u9003\u3052\u305F\u3081\u3089\u3044", "Faltering Runners"], "200861": ["\u5148\u884C\u3051\u3093\u5236", "Restrained Leaders"], "200871": ["\u5148\u884C\u7126\u308A", "Panicked Leaders"], "200881": ["\u5148\u884C\u305F\u3081\u3089\u3044", "Faltering Leaders"], "200891": ["\u5DEE\u3057\u3051\u3093\u5236", "Restrained Betweeners"], "200901": ["\u5DEE\u3057\u7126\u308A", "Panicked Betweeners"], "200911": ["\u5DEE\u3057\u305F\u3081\u3089\u3044", "Faltering Betweeners"], "200921": ["\u8FFD\u8FBC\u3051\u3093\u5236", "Restrained Chasers"], "200931": ["\u8FFD\u8FBC\u7126\u308A", "Panicked Chasers"], "200941": ["\u8FFD\u8FBC\u305F\u3081\u3089\u3044", "Faltering Chasers"], "200951": ["\u5927\u4E95\u30EC\u30FC\u30B9\u5834\u25CE", "Ooi Racetrack \u25CE"], "200952": ["\u5927\u4E95\u30EC\u30FC\u30B9\u5834\u25CB", "Ooi Racetrack \u25CB"], "200953": ["\u5927\u4E95\u30EC\u30FC\u30B9\u5834\xD7", "Ooi Racetrack \xD7"], "200961": ["\u77ED\u8DDD\u96E2\u76F4\u7DDA\u25CE", "Short Distance Straights \u25CE"], "200962": ["\u77ED\u8DDD\u96E2\u76F4\u7DDA\u25CB", "Short Distance Straights \u25CB"], "200963": ["\u7D2B\u96FB\u4E00\u9583", "Lightning Flash"], "200971": ["\u77ED\u8DDD\u96E2\u30B3\u30FC\u30CA\u30FC\u25CE", "Short Distance Corners \u25CE"], "200972": ["\u77ED\u8DDD\u96E2\u30B3\u30FC\u30CA\u30FC\u25CB", "Short Distance Corners \u25CB"], "200973": ["\u7D2B\u96FB\u5186\u5203", "Lightning Slash"], "200981": ["\u5727\u5012\u7684\u30EA\u30FC\u30C9", "Overwhelming Lead"], "200982": ["\u5927\u304D\u306A\u30EA\u30FC\u30C9", "Big Lead"], "200991": ["\u30D7\u30E9\u30F3X", "Plan X"], "200992": ["\u5584\u5F8C\u7B56", "Countermeasures"], "201001": ["\u6E96\u5099\u4E07\u5168\uFF01", "Flawless Preparation!"], "201002": ["\u4ED5\u639B\u3051\u6E96\u5099", "Calculated Preparations"], "201011": ["\u60A9\u6BBA\u8853", "Bewitching"], "201012": ["\u5F8C\u65B9\u91D8\u4ED8", "Final Nail"], "201021": ["\u9003\u4EA1\u7981\u6B62\u4EE4", "Escape Prohibition"], "201022": ["\u629C\u3051\u99C6\u3051\u7981\u6B62", "No Running Allowed"], "201031": ["\u30DE\u30A4\u30EB\u76F4\u7DDA\u25CE", "Mile Straights \u25CE"], "201032": ["\u30DE\u30A4\u30EB\u76F4\u7DDA\u25CB", "Mile Straights \u25CB"], "201033": ["\u8C6A\u98A8\u4E00\u9583", "Cyclone Flash"], "201041": ["\u30DE\u30A4\u30EB\u30B3\u30FC\u30CA\u30FC\u25CE", "Mile Corners \u25CE"], "201042": ["\u30DE\u30A4\u30EB\u30B3\u30FC\u30CA\u30FC\u25CB", "Mile Corners \u25CB"], "201043": ["\u8C6A\u98A8\u5186\u5203", "Cyclone Slash"], "201051": ["\u30AE\u30A2\u30C1\u30A7\u30F3\u30B8", "Gear Change"], "201052": ["\u30AE\u30A2\u30B7\u30D5\u30C8", "Shift Gears"], "201061": ["\u30A2\u30AF\u30BB\u30EB\u5168\u958B\uFF01", "Accel Full Throttle!"], "201062": ["\u30A2\u30AF\u30BB\u30E9\u30EC\u30FC\u30B7\u30E7\u30F3", "Acceleration"], "201071": ["\u59C9\u5FA1\u808C", "Big Sister Disposition"], "201072": ["\u8CA0\u3051\u3093\u6C17", "Rival Spirit"], "201081": ["\u30B9\u30D4\u30FC\u30C9\u30B0\u30EA\u30FC\u30C9", "Speed Greed"], "201082": ["\u30B9\u30D4\u30FC\u30C9\u30A4\u30FC\u30BF\u30FC", "Speed Eater"], "201091": ["\u5E03\u9663", "Battle Formation"], "201092": ["\u5E03\u77F3", "Opener"], "201101": ["\u4E2D\u8DDD\u96E2\u76F4\u7DDA\u25CE", "Medium Distance Straights \u25CE"], "201102": ["\u4E2D\u8DDD\u96E2\u76F4\u7DDA\u25CB", "Medium Distance Straights \u25CB"], "201103": ["\u5149\u8292\u4E00\u9583", "Photon Flash"], "201111": ["\u4E2D\u8DDD\u96E2\u30B3\u30FC\u30CA\u30FC\u25CE", "Medium Distance Corners \u25CE"], "201112": ["\u4E2D\u8DDD\u96E2\u30B3\u30FC\u30CA\u30FC\u25CB", "Medium Distance Corners \u25CB"], "201113": ["\u5149\u8292\u5186\u5203", "Photon Slash"], "201121": ["\u5343\u91CC\u773C", "Clairvoyance"], "201122": ["\u30DB\u30FC\u30AF\u30A2\u30A4", "Hawkeye"], "201131": ["\u30E9\u30A4\u30C8\u30CB\u30F3\u30B0\u30B9\u30C6\u30C3\u30D7", "Lightning Step"], "201132": ["\u30A4\u30CA\u30BA\u30DE\u30B9\u30C6\u30C3\u30D7", "Inazuma Step"], "201141": ["\u795E\u696D\u30B9\u30C6\u30C3\u30D7", "Miracle Step"], "201142": ["\u8EFD\u3084\u304B\u30B9\u30C6\u30C3\u30D7", "Light Step"], "201151": ["\u72EC\u5360\u529B", "Monopolizer"], "201152": ["\u675F\u7E1B", "Binding Chains"], "201161": ["\u9B45\u60D1\u306E\u3055\u3055\u3084\u304D", "Charming Whisper"], "201162": ["\u3055\u3055\u3084\u304D", "Gentle Whisper"], "201171": ["\u9577\u8DDD\u96E2\u76F4\u7DDA\u25CE", "Long Distance Straights \u25CE"], "201172": ["\u9577\u8DDD\u96E2\u76F4\u7DDA\u25CB", "Long Distance Straights \u25CB"], "201173": ["\u70C8\u98A8\u4E00\u9583", "Flash of Wind"], "201181": ["\u9577\u8DDD\u96E2\u30B3\u30FC\u30CA\u30FC\u25CE", "Long Distance Corners \u25CE"], "201182": ["\u9577\u8DDD\u96E2\u30B3\u30FC\u30CA\u30FC\u25CB", "Long Distance Corners \u25CB"], "201191": ["\u5148\u9663\u306E\u5FC3\u5F97", "Vanguard's Wisdom"], "201192": ["\u30EA\u30FC\u30C9\u30AD\u30FC\u30D7", "Keep the Lead"], "201201": ["VIP\u9854\u30D1\u30B9", "VIP Pass"], "201202": ["\u30D1\u30B9\u4E0A\u624B", "Pass Expert"], "201211": ["\u6012\u6D9B\u306E\u8FFD\u3044\u4E0A\u3052", "Tempestuous Pressure"], "201212": ["\u8FFD\u3044\u4E0A\u3052", "Press the Attack"], "201221": ["\u30B9\u30BF\u30DF\u30CA\u30B0\u30EA\u30FC\u30C9", "Stamina Greed"], "201222": ["\u30B9\u30BF\u30DF\u30CA\u30A4\u30FC\u30BF\u30FC", "Stamina Eater"], "201231": ["\u5947\u8853\u5E2B", "Conjurer"], "201232": ["\u76EE\u304F\u3089\u307E\u3057", "Smoke Screen"], "201241": ["\u9003\u3052\u76F4\u7DDA\u25CE", "Runner's Straights \u25CE"], "201242": ["\u9003\u3052\u76F4\u7DDA\u25CB", "Runner's Straights \u25CB"], "201243": ["\u9663\u98A8\u4E00\u9583", "Gale Flash"], "201251": ["\u9003\u3052\u30B3\u30FC\u30CA\u30FC\u25CE", "Runner's Corners \u25CE"], "201252": ["\u9003\u3052\u30B3\u30FC\u30CA\u30FC\u25CB", "Runner's Corners \u25CB"], "201253": ["\u9663\u98A8\u5186\u5203", "Gale Slash"], "201261": ["\u30B7\u30C3\u30AF\u30B9\u30BB\u30F3\u30B9", "Sixth Sense"], "201262": ["\u5371\u967A\u56DE\u907F", "Danger Avoidance"], "201271": ["\u30C8\u30C3\u30D7\u30E9\u30F3\u30CA\u30FC", "Top Runner"], "201272": ["\u5148\u982D\u30D7\u30E9\u30A4\u30C9", "Lead Pride"], "201281": ["\u3058\u3083\u3058\u3083\u30A6\u30DE\u5A18", "Wild Girl"], "201282": ["\u52E2\u3044\u4EFB\u305B", "Leave It to Vigor!"], "201291": ["\u518D\u71C3\u713C", "Recombustion"], "201292": ["\u4E8C\u306E\u77E2", "Next Steps"], "201302": ["\u30EA\u30B9\u30BF\u30FC\u30C8", "Restart"], "201311": ["\u5148\u884C\u76F4\u7DDA\u25CE", "Leader's Straights \u25CE"], "201312": ["\u5148\u884C\u76F4\u7DDA\u25CB", "Leader's Straights \u25CB"], "201313": ["\u52C7\u8FC5\u4E00\u9583", "Valiant Flash"], "201321": ["\u5148\u884C\u30B3\u30FC\u30CA\u30FC\u25CE", "Leader's Corners \u25CE"], "201322": ["\u5148\u884C\u30B3\u30FC\u30CA\u30FC\u25CB", "Leader's Corners \u25CB"], "201323": ["\u52C7\u8FC5\u5186\u5203", "Bravery Slash"], "201331": ["\u6280\u5DE7\u6D3E", "Technician"], "201332": ["\u5DE7\u307F\u306A\u30B9\u30C6\u30C3\u30D7", "Clever Step"], "201341": ["\u6C7A\u610F\u306E\u76F4\u6ED1\u964D", "Straight Down Resolution"], "201342": ["\u76F4\u6ED1\u964D", "Straight Down"], "201351": ["\u98DF\u3044\u3057\u3093\u574A", "Big Eater"], "201352": ["\u6804\u990A\u88DC\u7D66", "Nutritional Supplements"], "201361": ["\u304F\u3058\u3051\u306C\u7CBE\u795E", "Unbreakable Spirit"], "201362": ["\u307E\u304D\u76F4\u3057", "Redo"], "201371": ["\u5E7B\u60D1\u306E\u304B\u304F\u4E71", "Glamorous Perturbation"], "201372": ["\u304B\u304F\u4E71", "Perturbation"], "201381": ["\u5DEE\u3057\u76F4\u7DDA\u25CE", "Betweener's Straights \u25CE"], "201382": ["\u5DEE\u3057\u76F4\u7DDA\u25CB", "Betweener's Straights \u25CB"], "201383": ["\u92ED\u811A\u4E00\u9583", "Incisive Flash"], "201391": ["\u5DEE\u3057\u30B3\u30FC\u30CA\u30FC\u25CE", "Betweener's Corners \u25CE"], "201392": ["\u5DEE\u3057\u30B3\u30FC\u30CA\u30FC\u25CB", "Betweener's Corners \u25CB"], "201393": ["\u92ED\u811A\u5186\u5203", "Incisive Slash"], "201401": ["\u52AA\u529B\u5BB6", "Laborious"], "201402": ["\u304C\u3093\u3070\u308A\u5C4B", "Hard Worker"], "201411": ["\u767E\u4E07\u30D0\u30EA\u30AD", "1M Horsepower"], "201412": ["\u5341\u4E07\u30D0\u30EA\u30AD", "100K Horsepower"], "201421": ["\u30EA\u30E9\u30C3\u30AF\u30B9", "Relax"], "201422": ["\u5C0F\u4F11\u61A9", "A Little Break"], "201431": ["\u5927\u5C40\u89B3", "Seeing the Big Picture"], "201432": ["\u8AAD\u89E3\u529B", "Reading Comprehension"], "201441": ["\u516B\u65B9\u306B\u3089\u307F", "Watching All Directions"], "201442": ["\u92ED\u3044\u773C\u5149", "Sharp Gaze"], "201451": ["\u8FFD\u8FBC\u76F4\u7DDA\u25CE", "Chaser's Straights \u25CE"], "201452": ["\u8FFD\u8FBC\u76F4\u7DDA\u25CB", "Chaser's Straights \u25CB"], "201453": ["\u6708\u5F71\u4E00\u9583", "Moonlight Flash"], "201461": ["\u8FFD\u8FBC\u30B3\u30FC\u30CA\u30FC\u25CE", "Chaser's Corners \u25CE"], "201462": ["\u8FFD\u8FBC\u30B3\u30FC\u30CA\u30FC\u25CB", "Chaser's Corners \u25CB"], "201463": ["\u6708\u5F71\u5186\u5203", "Moonlight Slash"], "201471": ["\u8996\u754C\u826F\u597D\uFF01\u7570\u5E38\u306A\u3057\uFF01", "Good Visibility! All Clear!"], "201472": ["\u304A\u898B\u901A\u3057", "See Right Through"], "201481": ["\u4E0B\u6821\u5F8C\u306E\u30B9\u30DA\u30B7\u30E3\u30EA\u30B9\u30C8", "After School Specialist"], "201482": ["\u4E0B\u6821\u306E\u697D\u3057\u307F", "Winding Down"], "201491": ["\u51B7\u9759\u6C88\u7740", "Calm and Collected"], "201492": ["\u51B7\u9759", "Serene"], "201501": ["\u5929\u547D\u58EB", "Heavenly Warrior"], "201502": ["\u7B56\u58EB", "Tactician"], "201511": ["\u71B1\u3044\u307E\u306A\u3056\u3057", "Passionate Gaze"], "201512": ["\u307E\u306A\u3056\u3057", "Sightlines"], "201521": ["\u9003\u3052\u306E\u30B3\u30C4\u25CE", "Runner's Tricks \u25CE"], "201522": ["\u9003\u3052\u306E\u30B3\u30C4\u25CB", "Runner's Tricks \u25CB"], "201531": ["\u5148\u884C\u306E\u30B3\u30C4\u25CE", "Leader's Tricks \u25CE"], "201532": ["\u5148\u884C\u306E\u30B3\u30C4\u25CB", "Leader's Tricks \u25CB"], "201541": ["\u5DEE\u3057\u306E\u30B3\u30C4\u25CE", "Betweener's Tricks \u25CE"], "201542": ["\u5DEE\u3057\u306E\u30B3\u30C4\u25CB", "Betweener's Tricks \u25CB"], "201551": ["\u8FFD\u8FBC\u306E\u30B3\u30C4\u25CE", "Chaser's Tricks \u25CE"], "201552": ["\u8FFD\u8FBC\u306E\u30B3\u30C4\u25CB", "Chaser's Tricks \u25CB"], "201561": ["\u30B9\u30FC\u30D1\u30FC\u30E9\u30C3\u30AD\u30FC\u30BB\u30D6\u30F3", "Super Lucky Seven"], "201562": ["\u30E9\u30C3\u30AD\u30FC\u30BB\u30D6\u30F3", "Lucky Seven"], "201571": ["\u30B9\u30EA\u30FC\u30BB\u30D6\u30F3", "Triple 7s"], "201581": ["\u767B\u5C71\u5BB6", "Mountain Climber"], "201582": ["\u7A76\u6975\u306E\u30D2\u30EB\u30AF\u30E9\u30A4\u30DE\u30FC", "Ultimate Hill Climber"], "201591": ["\u30A6\u30DE\u597D\u307F", "Big Fan"], "201592": ["\u30A6\u30DE\u30DE\u30CB\u30A2", "Uma Mania"], "201601": ["\u5730\u56FA\u3081", "Groundwork"], "201602": ["\u76E4\u77F3\u306E\u69CB\u3048", "Unshakable Stance"], "201611": ["\u5C3B\u5C3E\u4E0A\u304C\u308A", "Hold Your Tail High"], "201612": ["\u5C3B\u5C3E\u306E\u6EDD\u767B\u308A", "Tail of Victory"], "201621": ["\u3075\u308A\u7D5E\u308A", "Shake It Out"], "201631": ["\u30B7\u30F3\u30D1\u30B7\u30FC", "Sympathy"], "201632": ["\u30B3\u30CD\u30AF\u30C8", "Connection"], "201641": ["\u4E00\u5339\u72FC", "Lone Wolf"], "201651": ["\u30B9\u30EA\u30C3\u30D7\u30B9\u30C8\u30EA\u30FC\u30E0", "Slipstream"], "201652": ["\u3044\u3044\u3068\u3053\u5165\u3063\u305F\uFF01", "In the Right Place!"], "201661": ["\u904A\u3073\u306F\u304A\u3057\u307E\u3044\u3063\uFF01", "Playtime's Over!"], "201662": ["\u304A\u5148\u306B\u5931\u793C\u3063\uFF01", "Sorry, Gotta Go!"], "201671": ["\u30C1\u30E3\u30FC\u30C8\u6025\u4E0A\u6607\uFF01", "Trending Charts!"], "201672": ["\u30EC\u30B3\u30E1\u30F3\u30C9", "Recommendation"], "201681": ["\u72D9\u3046\u306F\u6700\u524D\u5217\uFF01", "Aim for the Front Row!"], "201682": ["\u524D\u5217\u72D9\u3044", "Front Row Aim"], "201691": ["\u6F5C\u4F0F\u614B\u52E2", "Concealed Readiness"], "201692": ["\u9759\u304B\u306A\u547C\u5438", "Quiet Breathing"], "201701": ["\u6C7A\u6B7B\u306E\u899A\u609F", "Prepared to Die"], "201702": ["\u3042\u308A\u3063\u305F\u3051", "All That There Is"], "201801": ["\u51F8\u51F9\u30CD\u30A4\u30EB", "Uneven Nail"], "201901": ["\u9354\u8FEB\u308A\u5408\u3044", "Fierce Competition"], "201902": ["\u771F\u3063\u5411\u52DD\u8CA0", "Head-To-Head"], "202001": ["\u7802\u306E\u7384\u4EBA", "Sand Expert"], "202002": ["\u7802\u5875\u6163\u308C", "Sandstorm Practice"], "202011": ["\u771F\u6253", "Shinuchi"], "202012": ["\u5F71\u6253", "Kageuchi"], "202021": ["\u5F37\u653B\u7B56", "Daring Attack"], "202022": ["\u65E9\u4ED5\u639B\u3051", "Early Gambit"], "202031": ["\u535A\u6253\u3046\u3061", "Gamester"], "202032": ["\u3042\u3084\u3057\u3052\u306A\u4F5C\u6226", "Questionable Strategy"], "202041": ["\u610F\u6C17\u885D\u5929", "In High Spirits"], "202042": ["\u8EFD\u3044\u8DB3\u53D6\u308A", "Nimble Step"], "202051": ["\u5927\u9003\u3052", "Great Escape"], "202061": ["\u65E5\u672C\u4E00\u306E\u30A6\u30DE\u5A18", "#1 Horsegirl in Japan"], "202071": ["\u6CF0\u7136\u81EA\u82E5", "Self-Possessed"], "202072": ["\u30DE\u30A4\u30DA\u30FC\u30B9", "My Own Pace"], "202081": ["\u8D77\u6B7B\u56DE\u751F", "Rise From the Ashes"], "202082": ["\u30EF\u30F3\u30C1\u30E3\u30F3\u30B9", "One Chance"], "202091": ["\u6C17\u708E\u4E07\u4E08", "Burning Spirit"], "202092": ["\u95D8\u4E89\u5FC3", "Fighting Spirit"], "202101": ["\u9AD8\u63DA\u611F", "Elation"], "202102": ["\u524D\u306E\u3081\u308A", "Tumbling Forward"], "202111": ["\u7834\u7AF9\u306E\u52E2\u3044", "Unstoppable Force"], "202112": ["\u6C17\u5408\u5341\u5206", "Sufficient Spirit"], "202121": ["\u5927\u80C6\u4E0D\u6575", "Daredevil"], "202122": ["\u6050\u308C\u306C\u5FC3", "Fearless Heart"], "202131": ["\u8352\u3076\u308B\u65CB\u98A8", "Wild Whirlwind"], "202132": ["\u6C17\u8FEB\u3092\u8FBC\u3081\u3066", "With Verve"], "202141": ["\u30A2\u30BF\u30B7\u306B\u6307\u56F3\u3057\u306A\u3044\u3067\uFF01\uFF01", "Don't Tell Me What to Do!"], "202151": ["\u52C7\u5F80\u9081\u9032", "Pushing Forward"], "202152": ["\u30D5\u30EB\u30B9\u30ED\u30C3\u30C8\u30EB", "Full Throttle"], "202161": ["\u81EA\u5236\u5FC3", "Self-Control"], "202171": ["\u81F3\u9AD8\u306E\u30C0\u30A6\u30F3\u30D2\u30E9\u30FC", "Supreme Downhiller"], "202172": ["\u4E0B\u308A\u5742\u5DE7\u8005", "Downhill Adept"], "202181": ["99 Problems", "99 Problems"], "202191": ["\u4E00\u610F\u5C02\u5FC3", "Single-Minded"], "202192": ["\u629C\u304B\u308A\u306A\u3057", "Faultless"], "202201": ["\u5DDD\u5D0E\u30EC\u30FC\u30B9\u5834\u25CE", "Kawasaki Racetrack \u25CE"], "202202": ["\u5DDD\u5D0E\u30EC\u30FC\u30B9\u5834\u25CB", "Kawasaki Racetrack \u25CB"], "202203": ["\u5DDD\u5D0E\u30EC\u30FC\u30B9\u5834\xD7", "Kawasaki Racetrack \xD7"], "202211": ["\u8239\u6A4B\u30EC\u30FC\u30B9\u5834\u25CE", "Funabashi Racetrack \u25CE"], "202212": ["\u8239\u6A4B\u30EC\u30FC\u30B9\u5834\u25CB", "Funabashi Racetrack \u25CB"], "202213": ["\u8239\u6A4B\u30EC\u30FC\u30B9\u5834\xD7", "Funabashi Racetrack \xD7"], "202221": ["\u76DB\u5CA1\u30EC\u30FC\u30B9\u5834\u25CE", "Morioka Racetrack \u25CE"], "202222": ["\u76DB\u5CA1\u30EC\u30FC\u30B9\u5834\u25CB", "Morioka Racetrack \u25CB"], "202223": ["\u76DB\u5CA1\u30EC\u30FC\u30B9\u5834\xD7", "Morioka Racetrack \xD7"], "202231": ["\u30CA\u30A4\u30BF\u30FC\u25CE", "Nocturnal \u25CE"], "202232": ["\u30CA\u30A4\u30BF\u30FC\u25CB", "Nocturnal \u25CB"], "202233": ["\u30CA\u30A4\u30BF\u30FC\xD7", "Nocturnal \xD7"], "202241": ["\u5C0F\u56DE\u308A\u25CE", "Tight Turns \u25CE"], "202242": ["\u5C0F\u56DE\u308A\u25CB", "Tight Turns \u25CB"], "202243": ["\u5C0F\u56DE\u308A\xD7", "Tight Turns \xD7"], "202251": ["\u4EA4\u6D41\u91CD\u8CDE\u25CE", "Exchange Races \u25CE"], "202252": ["\u4EA4\u6D41\u91CD\u8CDE\u25CB", "Exchange Races \u25CB"], "202253": ["\u4EA4\u6D41\u91CD\u8CDE\xD7", "Exchange Races \xD7"], "202261": ["\u52DD\u5229\u306E\u6A5F\u904B", "Victory Opportunity"], "202262": ["\u660E\u308B\u3044\u5146\u3057", "Promising Omen"], "202271": ["\u6372\u571F\u91CD\u6765", "Redoubled Efforts"], "202272": ["\u76DB\u308A\u8FD4\u3057", "Turnaround"], "202281": ["\u5168\u901F\u524D\u9032\uFF01", "Full Speed Ahead!"], "202282": ["\u307E\u3063\u3057\u3050\u3089", "At Full Speed"], "202291": ["\u660E\u93E1\u6B62\u6C34", "Clear and Serene"], "202292": ["\u51B4\u3048\u308B\u601D\u8003", "Clear Head"], "202301": ["\u512A\u96C5\u306A\u7802\u6D74\u3073", "Leisurely Dust Bath"], "202302": ["\u7802\u6D74\u3073\u25CB", "Dust Bath \u25CB"], "202303": ["\u7802\u6D74\u3073\xD7", "Dust Bath \xD7"], "202311": ["\u76EE\u6307\u305B\u30BB\u30F3\u30BF\u30FC\uFF01", "Aim for the Center!"], "202312": ["\u610F\u6C17\u8FBC\u307F\u5341\u5206", "Full of Zeal"], "202321": ["\u7206\u8D70\u30E2\u30FC\u30C9\uFF01", "Blast Mode!"], "202322": ["\u6025\u6D6E\u4E0A", "Rapid Ascent"], "202331": ["\u629C\u7FA4\u306E\u8E0F\u307F\u8FBC\u307F", "Outstanding Step"], "202332": ["\u8E0F\u307F\u8FBC\u307F\u4E0A\u624B", "Skillful Step"], "202341": ["\u6CE5\u3093\u3053\u30DE\u30A4\u30B9\u30BF\u30FC", "Mud Master"], "202342": ["\u6CE5\u904A\u3073\u25CE", "Mud Play \u25CE"], "202343": ["\u6CE5\u904A\u3073\u25CB", "Mud Play \u25CB"], "202344": ["\u6CE5\u904A\u3073\xD7", "Mud Play \xD7"], "202351": ["\u7802\u4E0A\u306E\u821E\u59EB", "Dancer of the Sands"], "202352": ["\u571F\u7159", "Cloud of Dust"], "202361": ["\u6CB9\u65AD\u5927\u6575", "Don't Let Your Guard Down"], "202362": ["\u5727\u8FEB\u611F", "Pressing Feeling"], "202371": ["\u30A2\u30F3\u30B9\u30C8\u30C3\u30D1\u30D6\u30EB", "Unstoppable"], "202372": ["\u653B\u3081\u306E\u59FF\u52E2", "Attack Stance"], "202381": ["\u30D6\u30EC\u30A4\u30AF\u30B9\u30EB\u30FC", "Breakthrough"], "202382": ["\u6253\u958B\u7B56", "Breakthrough Plan"], "202391": ["\u51FA\u529B1000\uFF05\uFF01", "1000% Output!"], "202392": ["\u3057\u3083\u304B\u308A\u304D", "Frantic State"], "202401": ["\u96FB\u5149\u77F3\u706B", "Lightning Speed"], "202402": ["\u4E00\u8DB3\u98DB\u3073", "Mighty Leap"], "202411": ["\u98A8\u96F2\u306E\u5FD7", "Winds of Change"], "202412": ["\u5411\u4E0A\u5FC3", "Ambitions"], "202421": ["\u7121\u6211\u5922\u4E2D", "Lose Yourself"], "202422": ["\u304C\u3080\u3057\u3083\u3089", "Devil-May-Care"], "202431": ["\u5FEB\u9032\u6483", "Steady Advance"], "202432": ["\u78BA\u304B\u306A\u8DB3\u53D6\u308A", "Firm Step"], "202441": ["\u52DD\u8CA0\u5E2B", "Gambler"], "202442": ["\u3084\u307E\u3063\u3051", "Gambling Spirit"], "202451": ["\u30C8\u30C3\u30D7\u30AE\u30A2", "Top Gear"], "202452": ["\u30AD\u30EC\u308B\u811A", "Razor-Sharp Stride"], "202461": ["\u8E0F\u307E\u305B\u306C\u5F71", "Untouchable Shadow"], "202462": ["\u7C98\u308A\u8170", "Steadfast"], "202471": ["\u731B\u8FFD", "Hot Pursuit"], "202472": ["\u98DF\u3089\u3044\u3064\u304D", "Tooth and Tail"], "202481": ["\u602A\u7269", "Monster"], "202482": ["\u672C\u9818\u767A\u63EE", "True Worth"], "202491": ["\u629C\u7FA4\u306E\u5207\u308C\u5473", "Unrivaled Wits"], "202492": ["\u5207\u308C\u5473", "Witful"], "202501": ["\u906E\u4E8C\u7121\u4E8C", "Reckless"], "202502": ["\u5411\u3053\u3046\u898B\u305A", "Rushing in Blind"], "202511": ["1\u756A\u4EBA\u6C17\u3067\u30E4\u30D0\u305F\u3093", "Favorite, For Reals?!"], "202521": ["\u5929\u8863\u7121\u7E2B", "Seamless"], "202522": ["\u578B\u7834\u308A", "Mold Breaker"], "202531": ["\u512A\u4F4D\u5F62\u6210", "Ascendance"], "202532": ["\u3057\u3068\u3084\u304B\u306A\u8DB3\u53D6\u308A", "Graceful Step"], "202541": ["\u5A01\u98A8\u5802\u3005", "Dignified"], "202542": ["\u30D7\u30EC\u30C3\u30B7\u30E3\u30FC", "Pressure"], "202551": ["\u795E\u901F", "Divine Speed"], "202552": ["\u5FEB\u901F", "Rapid"], "202561": ["\u4E00\u767A\u5FC5\u4E2D", "One-shot"], "202562": ["\u30ED\u30C3\u30AF\u30AA\u30F3", "Lock On"], "202571": ["\u672A\u6765\u3092\u62D3\u304F\u5947\u8DE1", "Miracle Pathmaker"], "202581": ["\u8131\u514E\u306E\u5148\u3078", "Ahead of the Game"], "202582": ["\u8107\u76EE\u3082\u632F\u3089\u305A", "Stay the Course"], "202591": ["\u4E00\u6C17\u5475\u6210", "In One Fell Swoop"], "202592": ["\u5927\u6025\u304E", "Great Haste"], "202601": ["\u30EB\u30DF\u30CD\u30BB\u30F3\u30B9", "Luminescence"], "202602": ["\u30A4\u30B0\u30CB\u30C3\u30B7\u30E7\u30F3", "Ignition"], "202612": ["\u6EA2\u308C\u308B\u60C5\u71B1", "Overflowing Passion"], "202621": ["\u7A81\u6483\u9B42", "Blitzing Spirit"], "202622": ["\u9032\u51FA\u958B\u59CB", "On the Move"], "202641": ["\u5343\u91CC\u306E\u9053", "Thousand-Mile Journey"], "202642": ["\u4E00\u6B69\u304B\u3089", "From the First Step"], "202651": ["\u96F2\u84B8\u7ADC\u5909", "Cloud Dragon's Metamorphosis"], "202652": ["\u81EA\u4FE1\u5BB6", "Self-Assured"], "202661": ["\u6602\u308B\u9F13\u52D5", "Surging Beat"], "202662": ["\u8FBC\u307F\u4E0A\u3052\u308B\u71B1", "Rising Passion"], "202671": ["\u30CF\u30A4\u30DC\u30EB\u30C6\u30FC\u30B8", "High Voltage"], "202672": ["\u5FC3\u5F3E\u3093\u3067", "High Hopes"], "202681": ["\u30D6\u30C1\u2606\u30A2\u30B2\u2191\u30D0\u30A4\u30D6\u30B9", "Seriously\u2606Good\u2191Vibes"], "202682": ["\u30D0\u30A4\u30D6\u30B9\u4E0A\u6607", "Up the Vibes"], "202691": ["\u8AB0\u3088\u308A\u524D\u3078\uFF01", "Further Than Anyone"], "202692": ["\u4E00\u756A\u4E57\u308A", "Early Bird"], "202701": ["\u30B7\u30F3\u30AE\u30E5\u30E9\u30EA\u30C6\u30A3", "Singularity"], "202702": ["\u63A2\u6C42\u5FC3", "Inquisitive Mind"], "202711": ["\u738B\u624B", "Check"], "202712": ["\u4F1A\u5FC3\u306E\u4E00\u6B69", "Satisfying Pace"], "202721": ["\u30CD\u30D0\u30FC\u30AE\u30D6\u30A2\u30C3\u30D7", "Never Give Up"], "202722": ["\u6298\u308C\u306A\u3044\u5FC3", "Unbreakable Mind"], "202731": ["\u30ED\u30F3\u30B7\u30E3\u30F3\u30EC\u30FC\u30B9\u5834\u25CE", "Longchamp Racecourse \u25CE"], "202732": ["\u30ED\u30F3\u30B7\u30E3\u30F3\u30EC\u30FC\u30B9\u5834\u25CB", "Longchamp Racecourse \u25CB"], "202733": ["\u30ED\u30F3\u30B7\u30E3\u30F3\u30EC\u30FC\u30B9\u5834\xD7", "Longchamp Racecourse \xD7"], "202734": ["\u30ED\u30F3\u30B7\u30E3\u30F3\u306E\u7533\u3057\u5B50", "Child of Longchamp"], "202741": ["\u5341\u5168\u5341\u7F8E", "Pure Perfection"], "202742": ["\u54C1\u884C\u65B9\u6B63", "Refined Conduct"], "202751": ["\u6C17\u9AA8\u7A1C\u7A1C", "Unyielding Tenacity"], "202752": ["\u3072\u305F\u3080\u304D\u524D\u9032", "Single-Minded Advance"], "202761": ["\u304B\u3063\u3068\u3070\u305B\uFF01", "Send It Flying!"], "202762": ["\u52DD\u5229\u306B\u5411\u304B\u3063\u3066", "Toward Victory"], "202771": ["\u4E00\u70B9\u96C6\u4E2D", "Laser-Focused"], "202772": ["\u72D9\u3044\u3092\u5B9A\u3081\u3066", "Honing In"], "202791": ["\u6642\u4E2D\u306E\u5999", "Exquisite Timing"], "202792": ["\u4E2D\u76E4\u5DE7\u8005", "Middle Leg Adept"], "202801": ["\u6A5F\u5148\u306E\u52DD\u8CA0", "Battle for Initiative"], "202802": ["\u5E8F\u76E4\u5DE7\u8005", "Opening Leg Adept"], "202811": ["\u753B\u7ADC\u70B9\u775B", "Finishing Touch"], "202812": ["\u5927\u8A70\u3081", "Finale"], "202821": ["\u4E07\u91CC\u4E00\u7A7A", "One Sky, One Goal"], "202822": ["\u8FF7\u3044\u306A\u3057", "No Hesitation"], "202831": ["\u30B3\u30FC\u30EB&\u30EC\u30B9\u30DD\u30F3\u30B9", "Call & Response"], "202832": ["\u4E8C\u6BB5\u69CB\u3048", "Backup Planning"], "202841": ["\u7802\u306E\u5999\u624B", "Sand Virtuoso"], "202842": ["\u7802\u6255\u3044", "Dust Off"], "202851": ["\u4E00\u7DB2\u6253\u5C3D", "Clean Sweep"], "202852": ["\u3054\u307C\u3046\u629C\u304D", "Rapid Overtakes"], "202861": ["\u30ED\u30B1\u30C3\u30C8\u30B9\u30BF\u30FC\u30C8", "Rocket Start"], "202862": ["\u6025\u767A\u9032", "Swift Takeoff"], "202871": ["\u541B\u81E8", "Reign"], "202872": ["\u6E3E\u8EAB\u306E\u8DB3\u53D6\u308A", "Mighty Step"], "202881": ["\u5B8C\u5168\u71C3\u713C", "Complete Combustion"], "202882": ["\u305F\u304E\u308B\u8840\u6F6E", "Boiling Blood"], "202892": ["\u4E0D\u52D5\u306E\u5FC3", "Immovable Spirit"], "202901": ["\u98DB\u7FD4\u811A", "Soaring Stride"], "202902": ["\u63A8\u529B\u5341\u5206", "Sufficient Thrust"], "202912": ["\u5207\u308A\u5D29\u3057", "Cleave"], "202921": ["\u4E00\u5FC3\u4E0D\u4E71", "Undivided Focus"], "202922": ["\u60DC\u3057\u307F\u306A\u3057", "No Reluctance"], "202931": ["\u8089\u8584", "Relentless Approach"], "202932": ["\u5F71\u8E0F\u307F", "Shadowstepper"], "202942": ["\u9B3C\u6C17\u8FEB\u3063\u3066", "Ghastly"], "202951": ["\u7802\u306E\u958B\u62D3\u8005", "Pioneer of the Sands"], "202952": ["\u30D1\u30A4\u30AA\u30CB\u30A2", "Pioneer"], "202961": ["\u71B1\u60C5", "Ardour"], "202962": ["\u6EFE\u308B\u60F3\u3044", "Boiling Emotions"], "202971": ["\u5343\u8F09\u4E00\u9047", "Golden Opportunity"], "202972": ["\u597D\u6A5F\u3092\u6349\u3048\u3066", "Seize the Chance"], "202981": ["\u6D41\u661F\u5149\u5E95", "Gamma Ray Burst"], "202982": ["\u98DB\u8E8D\u306E\u4E88\u611F", "Leap Premonition"], "202991": ["\u76F4\u7DDA\u30B3\u30FC\u30B9\u25CE", "Straight Course \u25CE"], "202992": ["\u76F4\u7DDA\u30B3\u30FC\u30B9\u25CB", "Straight Course \u25CB"], "202993": ["\u76F4\u7DDA\u30B3\u30FC\u30B9\xD7", "Straight Course \xD7"], "203001": ["\u638C\u63E1", "Manipulation"], "203002": ["\u624B\u7DF4\u624B\u7BA1", "Art of Coaxing"], "203011": ["\u96FB\u8FC5\u901F\u653B", "Lightning Blitz"], "203012": ["\u77AC\u767A\u529B", "Explosive Force"], "203021": ["\u98A8\u7FD4", "Wind Rider"], "203022": ["\u98A8\u5207\u308A", "Wind Vane"], "203031": ["\u6B63\u653B\u6CD5", "Frontal Attack"], "203032": ["\u7D20\u76F4\u306A\u4E00\u6B69", "An Honest Step"], "203041": ["\u30C8\u30AD\u30E1\u30AD\u30CF\u30FC\u30C8", "Fluttering Heart"], "203042": ["\u80F8\u306E\u9AD8\u9CF4\u308A", "Pounding Chest"], "203051": ["\u521D\u5FD7\u8CAB\u5FB9", "Unwavering Ambition"], "203052": ["\u63FA\u308B\u304C\u306C\u4FE1\u5FF5", "Unshakeable Faith"], "203061": ["\u7121\u4E8C", "No Second Thoughts"], "203071": ["\u7121\u4E09", "No Third Chances"], "203081": ["\u8E0F\u307F\u3057\u3081\u308B\u5927\u5730", "Stamp on the Ground"], "203082": ["\u529B\u306E\u9650\u308A", "With All My Might"], "203092": ["\u30C0\u30FC\u30C8\u76F4\u7DDA\u25CE", "Dirt Straights \u25CE"], "203093": ["\u30C0\u30FC\u30C8\u76F4\u7DDA\u25CB", "Dirt Straights \u25CB"], "203101": ["\u7802\u5875\u5186\u5203", "Sandstorm Slash"], "203102": ["\u30C0\u30FC\u30C8\u30B3\u30FC\u30CA\u30FC\u25CE", "Dirt Corners \u25CE"], "203103": ["\u30C0\u30FC\u30C8\u30B3\u30FC\u30CA\u30FC\u25CB", "Dirt Corners \u25CB"], "203111": ["\u738B\u9053\u4E00\u9014", "Just Rule"], "203112": ["\u6B63\u9762\u7A81\u7834", "Frontal Breakthrough"], "203121": ["\u5F37\u8005\u306E\u8A3C", "Proof of Strength"], "203122": ["\u3055\u3089\u306A\u308B\u9AD8\u307F\u3078", "To Greater Heights"], "203131": ["\u5E55\u5F15\u304D", "Curtain Closer"], "203132": ["\u6C7A\u5B9A\u6253", "Decisive Blow"], "203141": ["\u601C\u60A7\u6E05\u6F84", "Sharp-Witted Composure"], "203142": ["\u514B\u5DF1\u5FC3", "Self-Restraint"], "203151": ["\u672C\u80FD\u306E\u89E3\u653E", "Pure Instincts"], "203152": ["\u3080\u304D\u3060\u3057\u306E\u60C5\u71B1", "Bare Passion"], "203161": ["\u8C6A\u80C6\u7121\u6BD4", "Peerless Boldness"], "203162": ["\u5F8C\u5148\u6050\u308C\u305A", "Fearless Advance"], "203171": ["\u4E00\u5F35\u4E00\u5F1B", "Tension and Release"], "203172": ["\u5207\u308A\u66FF\u3048\u4E0A\u624B", "Switch Over Pro"], "203181": ["\u6E05\u6FC1\u4F75\u5451", "Embracing Virtue and Vice"], "203182": ["\u88CF\u8179\u306A\u30AD\u30E2\u30C1", "Contradicting Emotions"], "203201": ["\u65E9\u696D", "Quick Work"], "203202": ["\u76EE\u306B\u3082\u7559\u307E\u3089\u305A", "Not Even a Glimpse"], "203212": ["\u6C17\u306E\u5411\u304F\u307E\u307E\u306B", "Free-Spirited"], "203221": ["\u5F71\u5F93\u6253\u7834", "Breaking Free"], "203222": ["\u30A2\u30B0\u30EC\u30C3\u30B7\u30D6", "Aggressive"], "203232": ["\u9038\u308B\u8DB3\u53D6\u308A", "Restless Step"], "203241": ["\u9023\u9396\u53CD\u5FDC", "Chain Reaction"], "203242": ["\u7AEF\u7DD2", "Fuse"], "203251": ["\u70C8\u706B\u306E\u5982\u304F", "Like a Blaze"], "203252": ["\u6025\u8972", "Surprise Attack"], "203262": ["\u899A\u609F\u3092\u6C7A\u3081\u3066", "Firm Resolve"], "203272": ["\u5207\u308A\u8FBC\u307F\u968A\u9577", "Spearhead"], "203281": ["\u7121\u610F\u8B58\u306E\u67B7", "Unconscious Shackles"], "203301": ["\u71BE\u70C8\u306E\u6975\u307F", "Peak Ferocity"], "203302": ["\u71B1\u72C2\u7684", "Fervor"], "203311": ["\u9583\u5149", "Flash"], "203312": ["\u5149\u5DEE\u3059\u65B9\u3078", "Towards the Light"], "203322": ["\u99C6\u3051\u964D\u308A", "Descent"], "203331": ["\u7528\u610F\u5468\u5230", "Thorough Preparation"], "203332": ["\u4E0B\u6E96\u5099", "Preliminary Preparation"], "203341": ["\u8FFD\u8DE1\u8005", "Pursuer"], "203342": ["\u9019\u3044\u5BC4\u308B\u8DB3\u97F3", "Creeping Footsteps"], "203351": ["\u52C7\u731B\u679C\u6562", "Brave and Bold"], "203352": ["\u30CF\u30A4\u30D4\u30C3\u30C1", "High Pitch"], "203362": ["\u4E00\u6B69\u305A\u3064\u524D\u3078", "Forward Step by Step"], "203371": ["\u5F8C\u306E\u5148", "Seize the Initiative"], "203372": ["\u5207\u308A\u8FD4\u3057", "Striking Back"], "203381": ["\u52DD\u8CA0\u306F\u3053\u3053\u304B\u3089\uFF01", "The Fight's Not Over Yet!"], "203382": ["\u9003\u3052\u5207\u308A\u4F53\u52E2", "Pulling Away"], "203391": ["\u82F1\u59FF\u98AF\u723D", "Gallant Figure"], "203392": ["\u7834\u5929\u8352", "Unprecedented"], "203402": ["\u8FFD\u3044\u98A8\u306B\u4E57\u3063\u3066", "Riding the Tailwind"], "203411": ["\u52AA\u529B\u306E\u7D50\u5B9F", "Fruits of Labor"], "203412": ["\u5730\u9053\u306B\u91CD\u306D\u3066", "Steady Effort"], "203421": ["\u6B63\u3005\u5802\u3005", "Forthright"], "203422": ["\u5DF1\u3092\u4FE1\u3058\u3066", "Believe in Yourself"], "203431": ["\u624D\u6C17\u7165\u767A", "Brilliant Mind"], "203432": ["\u8E8D\u52D5", "Dynamic Motion"], "203442": ["\u61A7\u308C\u3092\u8D8A\u3048\u3066", "Surpassing Ambitions"], "203452": ["\u30BF\u30FC\u30CB\u30F3\u30B0\u30DD\u30A4\u30F3\u30C8", "Turning Point"], "203461": ["\u5091\u51FA", "Preeminent"], "203462": ["\u629C\u304D\u3093\u51FA\u308B\u4E00\u6B69", "Outstanding Step"], "203471": ["\u731B\u70C8\u6FC0\u8D70", "Furious Sprint"], "203472": ["\u307F\u306A\u304E\u308B\u95D8\u5FD7", "Overflowing Fighting Spirit"], "203481": ["\u30A4\u30CB\u30B7\u30A2\u30C1\u30D6", "Initiative"], "203482": ["\u8B72\u308C\u306C\u4E00\u6B69", "Unyielding Step"], "203491": ["\u4E01\u3005\u767A\u6B62", "Fierce Clash"], "203492": ["\u706B\u82B1\u6563\u3089\u3057\u3066", "Flying Sparks"], "203501": ["\u82F1\u4FCA\u8C6A\u5091", "Unpredecented Prodigy"], "203502": ["\u6BD4\u985E\u306A\u304D", "Peerless"], "203511": ["\u7765\u7768", "Domineering Glare"], "203512": ["\u8987\u6C17\u5341\u5206", "High Ambitions"], "203522": ["\u57A3\u9593\u898B\u305F\u5149", "Glimpse of Light"], "203532": ["\u767B\u7ADC\u9580", "Gateway to Success"], "203541": ["\u5929\u771F\u721B\u6F2B", ""], "203542": ["\u8DB3\u4EFB\u305B", ""], "203552": ["\u30B9\u30C6\u30C3\u30D7\u30A2\u30C3\u30D7", ""], "203562": ["\u596E\u95D8", ""], "210011": ["\u30A2\u30AA\u30CF\u30EB\u71C3\u713C\u30FB\u901F", "Aoharu Burning\u30FBSpeed"], "210012": ["\u30A2\u30AA\u30CF\u30EB\u70B9\u706B\u30FB\u901F", "Aoharu Ignition\u30FBSpeed"], "210021": ["\u30A2\u30AA\u30CF\u30EB\u71C3\u713C\u30FB\u4F53", "Aoharu Burning\u30FBStamina"], "210022": ["\u30A2\u30AA\u30CF\u30EB\u70B9\u706B\u30FB\u4F53", "Aoharu Ignition\u30FBStamina"], "210031": ["\u30A2\u30AA\u30CF\u30EB\u71C3\u713C\u30FB\u529B", "Aoharu Burning\u30FBPower"], "210032": ["\u30A2\u30AA\u30CF\u30EB\u70B9\u706B\u30FB\u529B", "Aoharu Ignition\u30FBPower"], "210041": ["\u30A2\u30AA\u30CF\u30EB\u71C3\u713C\u30FB\u6839", "Aoharu Burning\u30FBGuts"], "210042": ["\u30A2\u30AA\u30CF\u30EB\u70B9\u706B\u30FB\u6839", "Aoharu Ignition\u30FBGuts"], "210051": ["\u30A2\u30AA\u30CF\u30EB\u71C3\u713C\u30FB\u8CE2", "Aoharu Burning\u30FBWisdom"], "210052": ["\u30A2\u30AA\u30CF\u30EB\u70B9\u706B\u30FB\u8CE2", "Aoharu Ignition\u30FBWisdom"], "210061": ["\u4E00\u756A\u661F", "The First Star"], "210062": ["\u7DBA\u7F85\u661F", "Glittering Stars"], "210071": ["\u30AD\u30DF\u3068\u52DD\u3061\u305F\u3044", "I Want to Win With You"], "210072": ["\u5922\u306E\u9014\u4E2D", "Halfway to a Dream"], "210081": ["\u9650\u754C\u306E\u5148\u3078", "Beyond the Limits"], "210082": ["\u524D\u3060\u3051\u898B\u636E\u3048\u3066", "Eyes on the Horizon"], "210091": ["\u30EC\u30FC\u30B9\u306E\u771F\u9AC4\u30FB\u901F", "Essence of Racing\u30FBSpeed"], "210101": ["\u30EC\u30FC\u30B9\u306E\u771F\u9AC4\u30FB\u4F53", "Essence of Racing\u30FBStamina"], "210111": ["\u30EC\u30FC\u30B9\u306E\u771F\u9AC4\u30FB\u529B", "Essence of Racing\u30FBPower"], "210121": ["\u30EC\u30FC\u30B9\u306E\u771F\u9AC4\u30FB\u6839", "Essence of Racing\u30FBGuts"], "210131": ["\u30EC\u30FC\u30B9\u306E\u771F\u9AC4\u30FB\u8CE2", "Essence of Racing\u30FBWisdom"], "210141": ["\u30EC\u30FC\u30B9\u306E\u771F\u9AC4\u30FB\u5FC3", "Essence of Racing\u30FBEnergy"], "210261": ["\u592A\u967D\u306E\u53E1\u667A", "Wisdom of the Sun"], "210262": ["\u967D\u306E\u52A0\u8B77", "Blessing of the Sun"], "210271": ["\u5927\u6D77\u306E\u53E1\u667A", "Wisdom of the Ocean"], "210272": ["\u6D77\u306E\u52A0\u8B77", "Blessing of the Ocean"], "210281": ["\u5927\u5730\u306E\u53E1\u667A", "Wisdom of the Land"], "210282": ["\u5730\u306E\u52A0\u8B77", "Blessing of the Land"], "210291": ["\u6700\u9AD8\u5CF0\u306E\u5922", "Dreaming of the Peak"], "210292": ["\u60F3\u3044\u3092\u80CC\u8CA0\u3063\u3066", "Bearer of Hope"], "210301": ["\u7206\u71B1\u306E\u30AD\u30E9\u30E1\u30AD\uFF01", "Blazing Radiance!"], "210302": ["\u30D0\u30FC\u30CB\u30F3\u30B0\u30BD\u30A6\u30EB", "Burning Soul"], "210311": ["\u30A2\u30B9\u30EA\u30FC\u30C8\u9B42", "Athlete's Spirit"], "210321": ["\u79C1\u305F\u3061\u306E\u8D70\u308B\u9053\u7A0B", "The Races We Run"], "210322": ["\u3044\u3064\u307E\u3067\u3082\u5065\u3084\u304B\u306B", "Forever Healthy"], "210331": ["\u98DF\u306E\u6975\u610F", "Essence of Food"], "210341": ["\u3082\u3046\u5C11\u3057\u3060\u3051\u3001\u3044\u3044\u666F\u8272", "For a Fleeting View"], "210342": ["\u5922\u306E\u518D\u751F\u65B9\u6CD5", "Reproducing a Dream"], "210351": ["\u65B0\u305F\u306A\u4F1D\u8AAC\u3092\u7BC9\u304F\u8005", "Forger of Legends"], "210352": ["\u6642\u4EE3\u3092\u5909\u3048\u308B\u8005", "Herald of a New Age"], "300011": ["\u7652\u3048\u306A\u3044\u6E07\u304D", "Unquenched Thirst"], "300021": ["\u5909\u308F\u3089\u306C\u307E\u307E\u3067", "Unchanged"], "300031": ["\u5922\u306E\u666F\u8272\u3078", "Scenery of Dreams"], "300041": ["\u62E1\u304C\u308B\u6050\u308C", "Spreading Fear"], "300051": ["\u9BAE\u660E\u306B\u306A\u308B\u754F\u6016", "Unfolding Horror"], "300061": ["\u5922\u306E\u8D70\u308A", "Dream Run"], "300071": ["\u672A\u77E5\u3078\u306E\u8D70\u308A\u3092\u898B\u305B\u3066\u304F\u308C", "Running Towards the Unknown"], "300081": ["\u307B\u3093\u306B\u3083\u304B\u5FEB\u8D70\u7948\u9858\uFF01", "Pray For a Fast Run!"], "300091": ["\u53CB\u3068\u3057\u3066\u3001\u30E9\u30A4\u30D0\u30EB\u3068\u3057\u3066", "As a Friend, as a Rival"], "300101": ["\u61A7\u308C\u306E\u30A8\u30FC\u30EB", "Cheers of Admiration"], "300111": ["\u80F8\u3092\u5F35\u308C\u30C0\u30FC\u30D3\u30FC\u30A6\u30DE\u5A18", "Proud Derby Girl"], "300121": ["\u30C1\u30FC\u30E0\u306E\u4E00\u54E1\u3068\u3057\u3066", "As a Member of the Team"], "300131": ["\u65E5\u672C\u7DCF\u5927\u5C06", "Supreme Commander of Japan"], "300141": ["\u4E0D\u6493\u4E0D\u5C48", "Dauntlessness"], "300151": ["\u5323\u306E\u6291\u5727", "Oppressive Cage"], "300161": ["\u307E\u3068\u308F\u308A\u3064\u304F\u9727", "Binding Fog"], "407011": ["\u30AD\u30E9\u30E1\u30AD\u306E\u52DD\u8CA0", "Sparkling Contest"], "407021": ["\u71C3\u3048\u3066\u304D\u305F\u30C3\uFF01\uFF01", "Now I'm Fired Up!!"], "407031": ["\u30D9\u30B9\u30C8\u3092\u5C3D\u304F\u3057\u3066\uFF01", "Doing My Best!"], "407041": ["\u7121\u4E8C\u306E\u60C5\u71B1", "Reckless Passion"], "407051": ["\u7834\u7AF9\u306E\u7B4B\u8089", "Unstoppable Muscles"], "407061": ["\u30B9\u30C6\u30A4\u30C1\u30E5\u30FC\u30F3\uFF01", "Stay Tuned"], "407071": ["\u7E4B\u304C\u308B\u9AD8\u63DA\u611F", "Connecting Elation"], "408011": ["\u656C\u611B\u30C3\uFF01\u30A6\u30DE\u30DE\u30CB\u30A2", "Respect! Uma Mania!"], "408021": ["\u304A\u5F85\u3061\u3069\u304A\u3055\u307E\uFF01", "Here You Go!"], "408031": ["\u3053\u3053\u3089\u3067\u5473\u5909\uFF01", "Mid-Meal Seasoning!"], "408041": ["\u5373\u5E2D\u4E09\u30C4\u661F\u30B3\u30FC\u30CA\u30EA\u30F3\u30B0", "Three-Star Cornering"], "408051": ["\u8015\u305B\uFF01\u958B\u58BE\u30B9\u30D7\u30EA\u30F3\u30C8", "Cultivation Sprint!"], "408061": ["\u66F2\u7DDA\u306E\u30B0\u30E9\u30F3\u30B7\u30A7\u30D5", "Curve Grand Chef"], "409011": ["\u30E2\u30F3\u30B9\u30BF\u30FC\u30DE\u30B7\u30F3", "Monster Machine"], "409021": ["\u30EA\u30AB\u30D0\u30EA\u30FC\u30B7\u30FC\u30B1\u30F3\u30B9", "Recovery Sequence"], "409031": ["\u30B7\u30B9\u30C6\u30E0\u30AA\u30FC\u30EB\u30B0\u30EA\u30FC\u30F3", "All Systems Green"], "409041": ["\u30EA\u30DF\u30C3\u30BF\u30FC\u89E3\u9664", "Limiter Release"], "409051": ["\u5148\u982D\u7DAD\u6301\u30A2\u30EB\u30B4\u30EA\u30BA\u30E0", "Lead-Preserving Algorithm"], "409061": ["\u5F27\u7DDA\u306E\u30C8\u30C3\u30D7\u30B9\u30AB\u30E9\u30FC", "Archline Top Scholar"], "410011": ["\u4F1D\u8AAC\u964D\u81E8", "Advent of the Legends"], "410021": ["\u75BE\u98A8\u3088\u308A\u5148\u3078", ""], "410031": ["\u9769\u547D\u306E\u5C90\u8DEF", "Crossroads of Revolution"], "410041": ["\u5922\u306E\u5148\u99C6\u8005", "Pioneer of Dreams"], "410051": ["\u5E7E\u661F\u971C\u304C\u5C0E\u304F\u4E00\u624B", "Guidance of Many Moons"], "410061": ["\u96F2\u4E0A\u98DB\u7FD4", "Soar Above The Clouds"], "9000011": ["\u30AB\u30FC\u30CB\u30D0\u30EB\u30DC\u30FC\u30CA\u30B9\uFF08\u7D99\u627F\uFF09", "Carnival Bonus (obsolete) (inherited)"], "9000012": ["\u30AB\u30FC\u30CB\u30D0\u30EB\u30DC\u30FC\u30CA\u30B9\uFF08\u7D99\u627F\uFF09", "Carnival Bonus (obsolete) (inherited)"], "9000013": ["\u30AB\u30FC\u30CB\u30D0\u30EB\u30DC\u30FC\u30CA\u30B9\uFF08\u7D99\u627F\uFF09", "Carnival Bonus (obsolete) (inherited)"], "9000014": ["\u30AB\u30FC\u30CB\u30D0\u30EB\u30DC\u30FC\u30CA\u30B9\uFF08\u7D99\u627F\uFF09", "Carnival Bonus (obsolete) (inherited)"], "9000015": ["\u30AB\u30FC\u30CB\u30D0\u30EB\u30DC\u30FC\u30CA\u30B9\uFF08\u7D99\u627F\uFF09", "Carnival Bonus (obsolete) (inherited)"], "9000016": ["\u30AB\u30FC\u30CB\u30D0\u30EB\u30DC\u30FC\u30CA\u30B9\uFF08\u7D99\u627F\uFF09", "Carnival Bonus (obsolete) (inherited)"], "9000017": ["\u30AB\u30FC\u30CB\u30D0\u30EB\u30DC\u30FC\u30CA\u30B9\uFF08\u7D99\u627F\uFF09", "Carnival Bonus (inherited)"], "900011": ["\u30B7\u30E5\u30FC\u30C6\u30A3\u30F3\u30B0\u30B9\u30BF\u30FC\uFF08\u7D99\u627F\uFF09", "Shooting Star (inherited)"], "900021": ["\u5148\u982D\u306E\u666F\u8272\u306F\u8B72\u3089\u306A\u3044\u2026\uFF01\uFF08\u7D99\u627F\uFF09", "I'm Not Giving up the Lead! (inherited)"], "900031": ["\u7A76\u6975\u30C6\u30A4\u30AA\u30FC\u30B9\u30C6\u30C3\u30D7\uFF08\u7D99\u627F\uFF09", "Ultimate Teio Step (inherited)"], "900041": ["\u7D05\u7114\u30AE\u30A2/LP1211-M\uFF08\u7D99\u627F\uFF09", "Red Flame Gear/LP1211-M (inherited)"], "900051": ["\u714C\u661F\u306E\u30F4\u30A9\u30FC\u30C9\u30F4\u30A3\u30EB\uFF08\u7D99\u627F\uFF09", "Glittering Star Vaudeville (inherited)"], "900061": ["\u52DD\u5229\u306E\u9F13\u52D5\uFF08\u7D99\u627F\uFF09", "The Beat of Victory (inherited)"], "900071": ["\u4E0D\u6C88\u8266\u3001\u629C\u9328\u30A9\u30C3\uFF01\uFF08\u7D99\u627F\uFF09", "Unsinkable Ship, Anchored! (inherited)"], "900081": ["\u30AB\u30C3\u30C6\u30A3\u30F3\u30B0\xD7DRIVE\uFF01\uFF08\u7D99\u627F\uFF09", "Cutting \xD7 DRIVE! (inherited)"], "900091": ["\u30D6\u30EA\u30EA\u30A2\u30F3\u30C8\u30FB\u30EC\u30C3\u30C9\u30A8\u30FC\u30B9\uFF08\u7D99\u627F\uFF09", "Brilliant Red Ace (inherited)"], "900101": ["\u30F4\u30A3\u30AF\u30C8\u30EA\u30FC\u30B7\u30E7\u30C3\u30C8\uFF01\uFF08\u7D99\u627F\uFF09", "Victory Shot! (inherited)"], "900101111": ["\u306F\u3089\u307A\u3053\u5927\u5C06\uFF08\u7D99\u627F\uFF09", "Hungry Commander (inherited)"], "900101211": ["\u5922\u53F6\u3048\u308B\u672B\u811A\uFF08\u7D99\u627F\uFF09", "Dream-fulfilling Sprint (inherited)"], "900102111": ["\u771F\u590F\u306E\u601D\u3044\u5207\u308A\uFF08\u7D99\u627F\uFF09", "Midsummer Resolution (inherited)"], "900102211": ["\u771F\u590F\u306E\u7DCF\u5927\u5C06\uFF08\u7D99\u627F\uFF09", "Midsummer Commander (inherited)"], "900103111": ["\u6012\u6D9B\u306E\u51FA\u9663\uFF08\u7D99\u627F\uFF09", "Tempestuous Attack (inherited)"], "900103211": ["\u65E5\u4E4B\u672C\u4E00\u306E\u30C9\u6839\u6027\uFF08\u7D99\u627F\uFF09", "Guts of the Rising Sun (inherited)"], "900111": ["\u7CBE\u795E\u4E00\u5230\u4F55\u4E8B\u304B\u6210\u3089\u3056\u3089\u3093\uFF08\u7D99\u627F\uFF09", "Where There's a Will, There's a Way (inherited)"], "900121": ["\u30BF\u30A4\u30DE\u30F3\uFF01\u30C7\u30C3\u30C9\u30D2\u30FC\u30C8\uFF01\uFF08\u7D99\u627F\uFF09", "One-On-One! Dead Heat! (inherited)"], "900131": ["\u8CB4\u9855\u306E\u4F7F\u547D\u3092\u679C\u305F\u3059\u3079\u304F\uFF08\u7D99\u627F\uFF09", "Fulfilling Your Noble Duty (inherited)"], "900141": ["\u30D7\u30E9\u30F3\u30C1\u30E3\u2606\u30AC\u30CA\u30C9\u30FC\u30EB\uFF08\u7D99\u627F\uFF09", "Plancha \u2606 Ganador (inherited)"], "900151": ["\u30F4\u30A3\u30C3\u30C8\u30FC\u30EA\u30A2\u306B\u6367\u3050\u821E\u8E0F\uFF08\u7D99\u627F\uFF09", "Dance for Vittoria (inherited)"], "900161": ["Shadow Break\uFF08\u7D99\u627F\uFF09", "Shadow Break (inherited)"], "900171": ["\u6C5D\u3001\u7687\u5E1D\u306E\u795E\u5A01\u3092\u898B\u3088\uFF08\u7D99\u627F\uFF09", "Thou, Witness the Heavenly Might of the Emperor (inherited)"], "900181": ["\u30D6\u30EC\u30A4\u30BA\u30FB\u30AA\u30D6\u30FB\u30D7\u30E9\u30A4\u30C9\uFF08\u7D99\u627F\uFF09", "Blaze of Pride (inherited)"], "900191": ["\u5C0A\u307F\u2606\uFF97\uFF7D\uFF84\uFF7D\uFF8A\uFF9F\u2014(\uFF9F\u2200\uFF9F)\u2014\uFF84!\uFF08\u7D99\u627F\uFF09", "Kyuute\u2606Last SpuU(\uFF9F\u2200\uFF9F)Uurt! (inherited)"], "900201": ["\u30A2\u30F3\u30B0\u30EA\u30F3\u30B0\xD7\u30B9\u30AD\u30FC\u30DF\u30F3\u30B0\uFF08\u7D99\u627F\uFF09", "Angling\xD7Scheming (inherited)"], "900201111": ["\u6700\u5927\u96C6\u4E2D\uFF08\u7D99\u627F\uFF09", "Perfect Concentration (inherited)"], "900201211": ["\u7570\u6B21\u5143\u306E\u9003\u4EA1\u8005\uFF08\u7D99\u627F\uFF09", "Dimensional Runaway (inherited)"], "900202111": ["\u7460\u7483\u8272\u30A8\u30B9\u30B1\u30A4\u30D7\uFF08\u7D99\u627F\uFF09", "Lapis Lazuli Escape (inherited)"], "900202121": ["\u6EC4\u6D77\u3092\u8D8A\u3048\u3057\u30D5\u30FC\u30AC\uFF08\u7D99\u627F\uFF09", "Crossing the Ocean (inherited)"], "900202211": ["\u84BC\u5929\u3092\u99C6\u3051\u308B\u30E9\u30FC\u30D5\u30A1\u30AC\uFF08\u7D99\u627F\uFF09", "Sky-Striding R\xE1faga (inherited)"], "900211": ["\u767D\u3044\u7A32\u59BB\u3001\u898B\u305B\u305F\u308B\u3067\uFF01\uFF08\u7D99\u627F\uFF09", "Imma Show You White Lightning! (inherited)"], "900221": ["Fairy tale\uFF08\u7D99\u627F\uFF09", "Fairy Tale (inherited)"], "900231": ["\u2234win Q.E.D.\uFF08\u7D99\u627F\uFF09", "\u2234win Q.E.D. (inherited)"], "900241": ["\u3072\u3089\u3081\u304D\u2606\u30E9\u30F3\u30C7\u30A3\u30F3\u30B0\uFF08\u7D99\u627F\uFF09", "Inspiration \u2606 Landing (inherited)"], "900251": ["\u30A2\u30CA\u30BF\u30F2\u30FB\u30AA\u30A4\u30AB\u30B1\u30C6\uFF08\u7D99\u627F\uFF09", "Chasing After You (inherited)"], "900261": ["G00 1st.F\u221E;\uFF08\u7D99\u627F\uFF09", "G00 1st.F\u221E; (inherited)"], "900271": ["\u30EC\u30C3\u30C4\u30FB\u30A2\u30CA\u30DC\u30EA\u30C3\u30AF\uFF01\uFF08\u7D99\u627F\uFF09", "Let's Anabolic! (inherited)"], "900281": ["I'M\u2606FULL\u2606SPEED!!\uFF08\u7D99\u627F\uFF09", "I'M\u2606FULL\u2606SPEED!! (inherited)"], "900291": ["\u3086\u304D\u3042\u304B\u308A\u3001\u304A\u3044\u304B\u3051\u3066\uFF08\u7D99\u627F\uFF09", "Chasing the Snowlight (inherited)"], "900301": ["\u30D6\u30EB\u30FC\u30ED\u30FC\u30BA\u30C1\u30A7\u30A4\u30B5\u30FC\uFF08\u7D99\u627F\uFF09", "Blue Rose Chaser (inherited)"], "900301111": ["\u5929\u624D\u7684\u6280\u5DE7\uFF08\u7D99\u627F\uFF09", "Genius Technique (inherited)"], "900301211": ["\u5E1D\u738B\u30B9\u30C6\u30C3\u30D7\uFF08\u7D99\u627F\uFF09", "Teio Step (inherited)"], "900302111": ["\u30EC\u30FC\u30B9\u306E\u5929\u624D\uFF08\u7D99\u627F\uFF09", "Racing Genius (inherited)"], "900302211": ["\u5730\u5E73\u306E\u5F7C\u65B9\u307E\u3067\uFF08\u7D99\u627F\uFF09", "Beyond the Horizon (inherited)"], "900303111": ["\u5929\u8CE6\u306E\u8EAB\u3054\u306A\u3057\uFF08\u7D99\u627F\uFF09", "Gifted Grace (inherited)"], "900303211": ["\u76E4\u697D\u904A\u5B09\uFF08\u7D99\u627F\uFF09", "Playful Revelry (inherited)"], "900303221": ["\u671D\u8179\u3001\u671D\u8179\u3001\u304B\u3084\u3059\u3057\u3084\u266A\uFF08\u7D99\u627F\uFF09", "Easy, Peasy, Lemon Squeezy (inherited)"], "900311": ["\u30C1\u30E3\u30FC\u30B8\u5B8C\u4E86\uFF01\u5168\u901F\u524D\u9032\uFF01\uFF08\u7D99\u627F\uFF09", "Charge Complete! Full Speed Ahead! (inherited)"], "900321": ["U=ma2\uFF08\u7D99\u627F\uFF09", "U=ma2 (inherited)"], "900331": ["\u30C7\u30A3\u30AA\u30B9\u30AF\u30ED\u30A4\u306E\u6D41\u661F\uFF08\u7D99\u627F\uFF09", "Meteor of Dioscuri (inherited)"], "900341": ["\u5FEB\u8D70\u304B\u306A\u3001\u5FEB\u8D70\u304B\u306A\uFF01\uFF08\u7D99\u627F\uFF09", "Fast Running, Fast Running! (inherited)"], "900351": ["\u52DD\u5229\u306E\u30C1\u30B1\u30C3\u30C8\u3092\u3001\u541B\u306B\u30C3\uFF01\uFF08\u7D99\u627F\uFF09", "The Ticket to Victory, for You! (inherited)"], "900361": ["trigger:BEAT\uFF08\u7D99\u627F\uFF09", "trigger:BEAT (inherited)"], "900371": ["Schwarzes Schwert\uFF08\u7D99\u627F\uFF09", "Schwarzes Schwert (inherited)"], "900381": ["#LookatCurren\uFF08\u7D99\u627F\uFF09", "#LookatCurren (inherited)"], "900391": ["\u59EB\u305F\u308B\u3082\u306E\u3001\u52DD\u5229\u3092\u3053\u306E\u624B\u306B\uFF08\u7D99\u627F\uFF09", "Victory Befitting a Princess (inherited)"], "900401": ["KEEP IT REAL.\uFF08\u7D99\u627F\uFF09", "KEEP IT REAL. (inherited)"], "900401111": ["\u304B\u3063\u98DB\u3070\u3059\u308F\u3088\uFF01\uFF08\u7D99\u627F\uFF09", "Blasting Off! (inherited)"], "900401211": ["\u7D05\u84EE\u306E\u30AA\u30FC\u30D0\u30FC\u30EC\u30D6\uFF08\u7D99\u627F\uFF09", "Crimson Over-revving (inherited)"], "900402111": ["\u30C9\u30AD\u30C3\u2606\u3058\u3083\u3058\u3083\u30A6\u30DE\u5A18\uFF01\uFF08\u7D99\u627F\uFF09", "Dazzling\u2606Wild Girl (inherited)"], "900402211": ["\u304A\u7ACB\u3061\u53F0\u306E\u652F\u914D\u8005\uFF08\u7D99\u627F\uFF09", "Ruler of the Stage (inherited)"], "900403111": ["\u5929\u5973\u306E\u7FBD\u8863\uFF08\u7D99\u627F\uFF09", "Angelic Garment (inherited)"], "900403211": ["\u795E\u8599\u30C0\u30F3\u30B9\uFF08\u7D99\u627F\uFF09", "Shrine Maiden's Dance (inherited)"], "900411": ["\u512A\u7B49\u751F\xD7\u30D0\u30AF\u30B7\u30F3\uFF1D\u5927\u52DD\u5229\u30C3\uFF08\u7D99\u627F\uFF09", "Honor Student x Bakushin = Big Victory (inherited)"], "900421": ["\u300EI'm possible\u300F\uFF08\u7D99\u627F\uFF09", "\u300EI'm Possible\u300F (inherited)"], "900431": ["Ding Dong Boo\uFF08\u7D99\u627F\uFF09", "Ding Dong Boo (inherited)"], "900441": ["\u3044\u305F\u3060\u304D\u2606\u30B9\u30C8\u30EC\u30EA\u30C1\u30A2\uFF01\uFF08\u7D99\u627F\uFF09", "You're Mine \u2606 Strelitzia (inherited)"], "900451": ["\u30D4\u30E5\u30EA\u30C6\u30A3\u30AA\u30D6\u30CF\u30FC\u30C8\uFF08\u7D99\u627F\uFF09", "Purity of Heart (inherited)"], "900461": ["\u30AD\u30E9\u30AD\u30E9\u2606STARDOM\uFF08\u7D99\u627F\uFF09", "Sparkling\u2606STARDOM (inherited)"], "900471": ["\u63B2\u3052\u3088\u3001\u5DF1\u304C\u9B42\u306E\u5263\u3092\uFF01\uFF08\u7D99\u627F\uFF09", "Raise Thy Soul's Sword! (inherited)"], "900481": ["YEAH\u2606VIVID TIME!\uFF08\u7D99\u627F\uFF09", "YEAH\u2606VIVID TIME! (inherited)"], "900491": ["\u5263\u30F6\u5CF0\u3088\u308A\u3001\u72C2\u6C17\u306B\u55E4\u3048\uFF08\u7D99\u627F\uFF09", "Laugh in the Face of Danger (inherited)"], "900501": ["Nemesis\uFF08\u7D99\u627F\uFF09", "Nemesis (inherited)"], "900501111": ["\u8F1D\u304F\u30C8\u30C3\u30D7\u30B9\u30BF\u30A1\uFF08\u7D99\u627F\uFF09", "Sparkling Top Star (inherited)"], "900501211": ["\u30A8\u30F3\u30BF\u30FC\u30C6\u30A4\u30CA\u30FC\uFF08\u7D99\u627F\uFF09", "Entertainer (inherited)"], "900501221": ["\u714C\u3081\u304F\u201C\u30AD\u30BB\u30AD\u201D\u3092\uFF08\u7D99\u627F\uFF09", "For a Sparkling Miracle (inherited)"], "900502111": ["\u5727\u5DFB\u306E\u30C8\u30EA\u30C3\u30AF\uFF08\u7D99\u627F\uFF09", "Stunning Trick (inherited)"], "900502121": ["\u898B\u60DA\u308C\u308B\u30B3\u30FC\u30CA\u30EA\u30F3\u30B0\uFF08\u7D99\u627F\uFF09", "Captivating Cornering (inherited)"], "900502211": ["\u714C\u3081\u304D\u306E\u30C8\u30C3\u30D7\u30B9\u30BF\u30A1\uFF08\u7D99\u627F\uFF09", "Glittering Top Star (inherited)"], "900511": ["\u3064\u307C\u307F\u3001\u307B\u3053\u308D\u3076\u6642\uFF08\u7D99\u627F\uFF09", "When the Flower Bud Opens (inherited)"], "900521": ["\u30EF\u30AF\u30EF\u30AF\u30AF\u30E9\u30A4\u30DE\u30C3\u30AF\u30B9\uFF08\u7D99\u627F\uFF09", "Exciting Climax (inherited)"], "900531": ["\u71B1\u8840\uFF01\uFF01\u98A8\u7D00\u30A2\u30BF\u30C3\u30AF\uFF08\u7D99\u627F\uFF09", "Hot-Blooded Disciplinary Attack! (inherited)"], "900541": ["\u75BE\u98A8\u7206\u8D70\u30DA\u30AC\u30B5\u30B9\u30C0\u30C3\u30B7\u30E5\uFF01\uFF08\u7D99\u627F\uFF09", "Blasting Gale Pegasus Dash! (inherited)"], "900551": ["\u4E07\u5F69\u2606\u30DE\u30FC\u30D9\u30E9\u30B9\u2605\u4E16\u754C\uFF08\u7D99\u627F\uFF09", "Colorful\u2606Marvelous\u2605World (inherited)"], "900561": ["\u6765\u307E\u3059\u6765\u3066\u307E\u3059\u6765\u3055\u305B\u307E\u3059\uFF01\uFF08\u7D99\u627F\uFF09", "Luck Is Coming (inherited)"], "900571": ["\u53D9\u60C5\u3001\u65C5\u8DEF\u306E\u679C\u3066\u306B\uFF08\u7D99\u627F\uFF09", "Lyricism at Journey's End (inherited)"], "900581": ["I Never Goof Up!\uFF08\u7D99\u627F\uFF09", "I Never Goof Up! (inherited)"], "900591": ["\u5F7C\u65B9\u3001\u305D\u306E\u5148\u3078\u2026\uFF08\u7D99\u627F\uFF09", "Beyond the Other Side (inherited)"], "900601": ["\u304D\u3063\u3068\u305D\u306E\u5148\u3078\u2026\uFF01\uFF08\u7D99\u627F\uFF09", "Surely, Beyond...! (inherited)"], "900601111": ["\u7B20\u677E\u306E\u98DF\u3044\u3057\u3093\u574A\uFF08\u7D99\u627F\uFF09", "Glutton of Kasamatsu (inherited)"], "900601121": ["\u98E2\u3048\u305F\u602A\u7269\uFF08\u7D99\u627F\uFF09", "Starved Monster (inherited)"], "900601211": ["\u602A\u7269\u7684\u30B3\u30FC\u30CA\u30EA\u30F3\u30B0\uFF08\u7D99\u627F\uFF09", "Monstrous Cornering (inherited)"], "900602111": ["\u30C9\u30AB\u98DF\u3044\u990A\u751F\uFF08\u7D99\u627F\uFF09", "Gluttonous Regimen (inherited)"], "900602211": ["\u30AF\u30EA\u30B9\u30DE\u30B9\u306E\u5947\u8DE1\u4F53\u9A13\uFF08\u7D99\u627F\uFF09", "First-hand Christmas Miracle (inherited)"], "900611": ["Pride of KING\uFF08\u7D99\u627F\uFF09", "Pride of KING (inherited)"], "900621": ["\u3069\u3093\u3063\u3001\u30D1\u30C3\u3001\u3080\u3093\u3063\uFF08\u7D99\u627F\uFF09", "Bang, Bam, Mun (inherited)"], "900631": ["\u767E\u932C\u6210\u92FC\uFF08\u7D99\u627F\uFF09", "Forged From a Hundred Trials (inherited)"], "900641": ["\u3076\u3063\u3061\u304E\u308A\u30ED\u30FC\u30C9\uFF08\u7D99\u627F\uFF09", "The Breakaway Road (inherited)"], "900651": ["\u30A2\u30B2\u3066\u30A2\u30B2\u3066\u3077\u3061\u3087\u3078\u3093\u3056\uFF01\uFF08\u7D99\u627F\uFF09", "Everybody Put Your Hands Up! (inherited)"], "900661": ["\u30A8\u30F3\u30B8\u30F3\u5168\u958B\uFF01\u5927\u5674\u5C04\uFF01\uFF08\u7D99\u627F\uFF09", "Engine, Full Throttle! Turbo Time! (inherited)"], "900671": ["\u6666\u51A5\u3092\u7167\u3089\u305B\u6C38\u9060\u306E\u8000\u304D\uFF08\u7D99\u627F\uFF09", "Brilliance Illuminating the Darkness (inherited)"], "900681": ["\u52DD\u3061\u9B28\u30EF\u30C3\u30B7\u30E7\u30A4\uFF01\uFF08\u7D99\u627F\uFF09", "Shout of Victory (inherited)"], "900691": ["\u61A7\u308C\u306F\u685C\u3092\u8D8A\u3048\u308B\uFF01\uFF08\u7D99\u627F\uFF09", "Longing Beyond the Sakura (inherited)"], "900701": ["\u30BB\u30A4\u30EA\u30AA\u30B9\uFF08\u4EBA\u6C171\uFF5E3\u756A\uFF09\uFF08\u7D99\u627F\uFF09", "Seirios (popularity 1-3) (inherited)"], "900701-1": ["\u30BB\u30A4\u30EA\u30AA\u30B9\uFF08\u4EBA\u6C174\u756A\u4EE5\u4E0B\uFF09\uFF08\u7D99\u627F\uFF09", "Seirios (popularity 4 or lower) (inherited)"], "900701111": ["564\u30A2\u30A4\u30BA\u3067\u8996\u754C\u30AF\u30C3\u30AD\u30EA\uFF01\uFF08\u7D99\u627F\uFF09", "Clear View with 564 Eyes! (inherited)"], "900701211": ["\u30A8\u30AF\u30B9\u30C8\u30EA\u30FC\u30E0\u4E0B\u6821\u8853\uFF08\u7D99\u627F\uFF09", "Extreme After-School Technique (inherited)"], "900702111": ["\u795E\u79D8\u4F53\u9A13\uFF01\u30B4\u30EB\u30B7\u30EF\u30FC\u30D7\uFF08\u7D99\u627F\uFF09", "Mysterious Gold Ship Warp! (inherited)"], "900702211": ["\u30A4\u30AB\u63DA\u3052\u3001\u3044\u304B\u304C\u3067\u3059\u304B\uFF01\uFF1F\uFF08\u7D99\u627F\uFF09", "Squid for a Quid! (inherited)"], "900702221": ["\u9AD8\u307E\u3063\u3066\u304D\u305F\u305C\u3047\uFF01\uFF01\uFF08\u7D99\u627F\uFF09", "It's Getting Exciting!! (inherited)"], "900703111": ["\u62BC\u3057\u5BC4\u305B\u308B\u30B8\u30E5\u30C6\u30FC\u30E0\uFF08\u7D99\u627F\uFF09", `Flood of "Je t'aime" (inherited)`], "900703211": ["\u8352\u78EF\u597D\u307F\u306E\u9EC4\u91D1\u8239\uFF08\u7D99\u627F\uFF09", "Golden Ship of the Rough Seas (inherited)"], "90071": ["\u6CE2\u4E71\u6CE8\u610F\u7832\uFF01\uFF08\u7D99\u627F\uFF09", "Warning Shot! (inherited)"], "900711": ["\u4E00\u671F\u306E\u5922\u3001\u5239\u90A3\u306E\u98DB\u7FD4\uFF08\u7D99\u627F\uFF09", "A Lifetime's Dream, A Moment's Flight (inherited)"], "900721": ["\u70C8\u706B\u7E5A\u4E71\u3001\u7121\u6575\u4E4B\u821E\uFF08\u7D99\u627F\uFF09", "Dazzling Fire, Invincible Dance (inherited)"], "900731": ["\u71C3\u3048\u76DB\u308B\u306F\u7D76\u5BFE\u306E\u610F\u5FD7\uFF08\u7D99\u627F\uFF09", "Flames of Unyielding Resolve (inherited)"], "900741": ["\u9E97\u3057\u304D\u82B1\u4FE1\u98A8\uFF08\u7D99\u627F\uFF09", "Lovely Spring Wind (inherited)"], "900761": ["\u82B1\u958B\u304D\u3001\u4E16\u754C\uFF08\u7D99\u627F\uFF09", "Blossoming World (inherited)"], "900771": ["Road to Glory\uFF08\u7D99\u627F\uFF09", "Road to Glory (inherited)"], "900781": ["\u98A8\u5149\u308B\uFF08\u7D99\u627F\uFF09", "A Spring in My Step (inherited)"], "900791": ["\u300E\u8239\u6A4B\u6700\u5F37\uFF01\u300F\uFF08\u7D99\u627F\uFF09", "Funabashi Above All! (inherited)"], "900801": ["Info: Acquired\uFF08\u7D99\u627F\uFF09", "Info: Acquired (inherited)"], "900801111": ["\u30B9\u30AD\u30C3\u30C8\u30EB\u30D6\u30EC\u30A4\u30AF\uFF08\u7D99\u627F\uFF09", "Flasks Up (inherited)"], "900801211": ["\u629C\u7FA4\u306E\u8C6A\u811A\uFF08\u7D99\u627F\uFF09", "Unrivaled Strides (inherited)"], "900802111": ["\u3076\u3063\u5DEE\u3057\u3066\u3084\u308B\u305C\uFF01\uFF08\u7D99\u627F\uFF09", "I'll Leave You in the Dust! (inherited)"], "900802211": ["\u6700\u901F\u306E\u30C8\u30C3\u30D7\u30AE\u30A2\uFF08\u7D99\u627F\uFF09", "Fastest Top Gear (inherited)"], "90081": ["\u30A2\u30AF\u30BB\u30EBX\uFF08\u7D99\u627F\uFF09", "Accelerator X (inherited)"], "900821": ["Shining Runway\uFF08\u7D99\u627F\uFF09", "Shining Runway (inherited)"], "900831": ["Mission: Triumph\uFF08\u7D99\u627F\uFF09", "Mission: Triumph (inherited)"], "900841": ["\u9739\u9742\u306E\u30A2\u30A6\u30D5\u30D8\u30FC\u30D9\u30F3\uFF08\u7D99\u627F\uFF09", "Thunderstorm Sublation (inherited)"], "900851": ["\u81F3\u4E0A\u3067\u3042\u308C\uFF08\u7D99\u627F\uFF09", "Reign Supreme (inherited)"], "900861": ["\u611B\u3068\u7194\u3051\u3088\u305F\u3060\u7194\u3051\u3088\uFF08\u7D99\u627F\uFF09", "Melt in Love's Embrace (inherited)"], "900871": ["Silent letter\uFF08\u7D99\u627F\uFF09", "Silent Letter (inherited)"], "900881": ["Reversal Illusion\uFF08\u7D99\u627F\uFF09", "Reversal Illusion (inherited)"], "900891": ["Celeste Oath\uFF08\u7D99\u627F\uFF09", "Celeste Oath (inherited)"], "900901111": ["\u30D1\u30FC\u30D5\u30A7\u30AF\u30C8\u30C1\u30E5\u30FC\u30F3\uFF08\u7D99\u627F\uFF09", "Perfect Tune (inherited)"], "900901211": ["\u30A2\u30BF\u30B7\u304C\u52DD\u3064\u3093\u3060\u304B\u3089\uFF01\uFF08\u7D99\u627F\uFF09", "This is my win! (inherited)"], "900902111": ["\u304A\u3066\u3093\u3070\u5973\u738B\uFF08\u7D99\u627F\uFF09", "Tomboy Queen (inherited)"], "900902211": ["\u958B\u304B\u308C\u308B\u5922\u306E\u6249\uFF08\u7D99\u627F\uFF09", "Door of Dreams (inherited)"], "90091": ["\u30EC\u30C3\u30C9\u30A8\u30FC\u30B9\uFF08\u7D99\u627F\uFF09", "Red Ace (inherited)"], "900911": ["\u30C7\u30E9\u30C3\u30AF\u30B9\u2606\u30D5\u30A1\u30A6\u30F3\u30C6\u30F3\uFF08\u7D99\u627F\uFF09", "Deluxe\u2606Fountain (inherited)"], "900931": ["\u5E78\u305B\u306E\u9752\u3044\u5149\uFF08\u7D99\u627F\uFF09", "Blue Ray of Happiness (inherited)"], "900941": ["Faith in the Feral\uFF08\u7D99\u627F\uFF09", "Faith in the Feral (inherited)"], "900981": ["\u7406\u904B\u958B\u304B\u308A\u3066\u7FD4\u308B\uFF08\u7D99\u627F\uFF09", "Luck Comes to the Prepared (inherited)"], "900991": ["\u304B\u304C\u3084\u3051\u2606\u3068\u307E\u3053\u307E\u3044\uFF08\u7D99\u627F\uFF09", "Shine \u2606 Tomakomai (inherited)"], "901001": ["Never Say Never\uFF08\u7D99\u627F\uFF09", "Never Say Never (inherited)"], "901001111": ["\u72D9\u3044\u6483\u3061\u30C7\u30B9\uFF01\uFF08\u7D99\u627F\uFF09", "Sharpshooting! (inherited)"], "901001211": ["Frontier Spirit\uFF08\u7D99\u627F\uFF09", "Frontier Spirit (inherited)"], "901002111": ["\u30A2\u30C9\u30D9\u30F3\u30C1\u30E3\u30FC\u306E\u5148\u5C0E\u8005\uFF08\u7D99\u627F\uFF09", "Adventure Leader (inherited)"], "901002211": ["\u771F\u5263\u52DD\u8CA0\u30C7\u30B9\uFF01\uFF08\u7D99\u627F\uFF09", "No Holds Barred! (inherited)"], "901021": ["\u30F4\u30A3\u30F4\u30A1\u30FC\u30C1\u30A7\u30FB\u30F4\u30A9\u30E9\u30FC\u30EC\uFF08\u7D99\u627F\uFF09", "Vivace Volare (inherited)"], "901041": ["\u6681\u306E\u5FA1\u65D7\u300E\u845B\u57CE\u6804\u4E3B\u300F\uFF01\uFF08\u7D99\u627F\uFF09", "Flag of Dawn: Katsuragi Ace (inherited)"], "901051": ["\u30A2\u30C9\u30FB\u30A2\u30B9\u30C8\u30E9\uFF08\u7D99\u627F\uFF09", "Ad Astra (inherited)"], "901061": ["Bang\u2606\u30DF\u30E9\u30AF\u308B\u308F\u305B\uFF01\uFF08\u7D99\u627F\uFF09", "Bang\u2606Miracle Maker! (inherited)"], "901071": ["Billions of stars\uFF08\u7D99\u627F\uFF09", "Billions of Stars (inherited)"], "901081": ["\u7F85\u5239\u3001\u8D64\u7FFC\u306B\u3066\u5929\u4E0A\u3078\u81F3\u3089\u3093\uFF08\u7D99\u627F\uFF09", "Scarlet Ascension of the Rakshasa (inherited)"], "901091": ["\u7E4B\u3050\u30FB\u7E4B\u304C\u308B\xD7\u5922\u30FB\u672A\u6765\uFF08\u7D99\u627F\uFF09", "Connecting Dreams With the Future (inherited)"], "901101": ["Guiding Sea\uFF08\u7D99\u627F\uFF09", "Guiding Sea (inherited)"], "901101111": ["\u5927\u548C\u64AB\u5B50\uFF08\u7D99\u627F\uFF09", "Yamato Nadeshiko (inherited)"], "901101211": ["\u4E0D\u9000\u8EE2\u306E\u610F\u601D\uFF08\u7D99\u627F\uFF09", "Conviction (inherited)"], "901102111": ["\u30AD\u30E5\u30A2\u30EA\u30FC\u30D2\u30FC\u30EB\uFF08\u7D99\u627F\uFF09", "Curely Heal (inherited)"], "901102211": ["\u52C7\u6C17\u306E\u9B54\u6CD5\uFF08\u7D99\u627F\uFF09", "Conjuring Courage (inherited)"], "901103111": ["\u5C04\u8CAB\u304F\u84BC\uFF08\u7D99\u627F\uFF09", "Piercing Azure (inherited)"], "901103211": ["\u52DD\u6A5F\u5230\u6765\uFF08\u7D99\u627F\uFF09", "Seizing Victory (inherited)"], "90111": ["\u7CBE\u795E\u4E00\u5230\uFF08\u7D99\u627F\uFF09", "Desire to Win (inherited)"], "901111": ["\u8FBF\u308B\u8840\u8108\u3001\u82BD\u5439\u304F\u672A\u6765\uFF08\u7D99\u627F\uFF09", "Traced Bloodline, Budding Future (inherited)"], "901151": ["\u6211\u304C\u8987\u9053\u3001\u963B\u3080\u3082\u306E\u306A\u3057\uFF08\u7D99\u627F\uFF09", "None Shall Object My Rule (inherited)"], "901161": ["\u70C8\u83EF\u306E\u6D17\u793C\uFF08\u7D99\u627F\uFF09", "Rose Conquest (inherited)"], "901171": ["\u92ED\u6C17\u306E\u30A2\u30EC\u30B0\u30ED\uFF08\u7D99\u627F\uFF09", "Allegro of Valor (inherited)"], "901191": ["\u300E\u305D\u308C\u3067\u306F\u3001\u3088\u304D\u65C5\u3092\u300F\uFF08\u7D99\u627F\uFF09", "\xABBon Voyage\xBB (inherited)"], "901201": ["\u7121\u4E8C\u7121\u4E09\u306A\u308B\u4E00\u6761\u306E\u8DEF\uFF08\u7D99\u627F\uFF09", "Path of Singular Focus (inherited)"], "901201111": ["\u52DD\u5229\u3078\u306E\u5486\u54EE\uFF08\u7D99\u627F\uFF09", "Victory Roar (inherited)"], "901201121": ["\u30BF\u30A4\u30DE\u30F3\u306B\u304B\u3051\u308B\u57F7\u5FF5\uFF08\u7D99\u627F\uFF09", "One-On-One Obsession (inherited)"], "901201211": ["\u6012\u6FE4\u306E\u30DD\u30ED\u30ED\u30C3\u30AB\uFF08\u7D99\u627F\uFF09", "Tempestuous Pororoca (inherited)"], "901202111": ["\u71B1\u70C8\u30A8\u30F3\u30B2\u30FC\u30B8\uFF01\uFF08\u7D99\u627F\uFF09", "Passionate Engagement! (inherited)"], "901202211": ["\u95D8\u9B42\u5165\u5200\uFF01\uFF08\u7D99\u627F\uFF09", "Fiery Cake-Cutting! (inherited)"], "901211": ["Lame de vent\uFF08\u7D99\u627F\uFF09", "Lame de Vent (inherited)"], "901241": ["\u3075\u304F\u3089\u3080\u5922\u3001\u5148\u99C6\u306E\u9014\uFF08\u7D99\u627F\uFF09", "Growing Dreams, Pioneer's Path (inherited)"], "901301111": ["\u30E1\u30B8\u30ED\u306E\u5FC3\u5F97\uFF08\u7D99\u627F\uFF09", "Mejiro's Wisdom (inherited)"], "901301211": ["\u540D\u512A\u306E\u4F59\u88D5\uFF08\u7D99\u627F\uFF09", "Star's Composure (inherited)"], "901302111": ["\u30A2\u30AF\u30C6\u30A3\u30D6\u30EC\u30B9\u30C8\uFF08\u7D99\u627F\uFF09", "Active Rest (inherited)"], "901302211": ["\u7A7A\u306E\u679C\u3066\u307E\u3067\uFF08\u7D99\u627F\uFF09", "End of Sky (inherited)"], "901303111": ["\u590F\u306E\u540D\u512A\uFF08\u7D99\u627F\uFF09", "Summer Star (inherited)"], "901303211": ["\u4E00\u610F\u5C02\u5FC3\u306B\u30EA\u30D5\u30EC\u30C3\u30B7\u30E5\uFF01\uFF08\u7D99\u627F\uFF09", "Wholehearted Refresher (inherited)"], "901311": ["\xA1Qu\xE9 alegr\xEDa!\uFF08\u7D99\u627F\uFF09", "\xA1Qu\xE9 alegr\xEDa! (inherited)"], "901401111": ["\u9DF9\u30CE\u76EE\uFF08\u7D99\u627F\uFF09", "Falcon Eyes (inherited)"], "901401211": ["\u4F59\u88D5\u306E\u30D1\u30D5\u30A9\u30FC\u30DE\u30F3\u30B9\uFF08\u7D99\u627F\uFF09", "Flawless Performance (inherited)"], "901402111": ["\u8C6A\u52C7\u7121\u53CC\uFF08\u7D99\u627F\uFF09", "Unparalleled Bravery (inherited)"], "901402121": ["\u30B3\u30F3\u30C9\u30EB\u8DF3\u8E8D\u8853\uFF08\u7D99\u627F\uFF09", "Condor Leap (inherited)"], "901402211": ["\u6607\u308A\u30B3\u30F3\u30C9\u30EB\uFF08\u7D99\u627F\uFF09", "Rising Condor (inherited)"], "90141": ["\u71B1\u8840\u2606\u30A2\u30DF\u30FC\u30B4\uFF08\u7D99\u627F\uFF09", "Hot Blooded \u2606 Amigo (inherited)"], "901501111": ["\u964D\u81E8\uFF01\u4E16\u7D00\u672B\u8987\u738B\uFF01\uFF08\u7D99\u627F\uFF09", "Centurial Overlord Descends! (inherited)"], "901501211": ["\u6B4C\u5287\u738B\u306E\u884C\u9032\uFF08\u7D99\u627F\uFF09", "March of the Opera King (inherited)"], "901502111": ["\u5186\u821E\u66F2\u306E\u30DE\u30A8\u30B9\u30C8\u30ED\uFF08\u7D99\u627F\uFF09", "Waltz Maestro (inherited)"], "901502121": ["\u30B3\u30FC\u30CA\u30FC\u306B\u821E\u3044\u964D\u308A\u3057\u6B4C\u5287\u738B\uFF08\u7D99\u627F\uFF09", "Opera King's Corner Theatrics (inherited)"], "901502211": ["\u30DC\u30AF\u306F\u9045\u308C\u305A\u306B\u3084\u3063\u3066\u304F\u308B\uFF01\uFF08\u7D99\u627F\uFF09", "I Won't Fall Behind! (inherited)"], "901601111": ["\u4E00\u5200\u4E21\u65AD\uFF08\u7D99\u627F\uFF09", "Decisive Cleave (inherited)"], "901601211": ["\u9913\u72FC\u7259\uFF08\u7D99\u627F\uFF09", "Hungry Wolf's Fang (inherited)"], "901602111": ["BLAZING WOLF\uFF08\u7D99\u627F\uFF09", "BLAZING WOLF (inherited)"], "901602211": ["\u6E07\u671B\u3059\u308B\u602A\u7269\uFF08\u7D99\u627F\uFF09", "Craving Monster (inherited)"], "901701111": ["\u7687\u5E1D\u306E\u773C\u5DEE\u3057\uFF08\u7D99\u627F\uFF09", "Emperor's Gaze (inherited)"], "901701211": ["\u93A7\u8896\u4E00\u89E6\uFF08\u7D99\u627F\uFF09", "Hands-Down Victory (inherited)"], "901702111": ["\u795E\u8272\u81EA\u82E5\uFF08\u7D99\u627F\uFF09", "Perfect Composure (inherited)"], "901702211": ["\u98A8\u971C\u9AD8\u6F54\uFF08\u7D99\u627F\uFF09", "Noble Hardships (inherited)"], "901801111": ["\u5973\u5E1D\u306E\u6A29\u8B00\uFF08\u7D99\u627F\uFF09", "The Empress' Ploy (inherited)"], "901801211": ["\u6C34\u6708\u93E1\u82B1\uFF08\u7D99\u627F\uFF09", "Moonlit Water, Mirror Flower (inherited)"], "901802111": ["\u5973\u5E1D\u306E\u77DC\u6301\uFF08\u7D99\u627F\uFF09", "The Empress' Pride (inherited)"], "901802211": ["\u4E0A\u5F26\u306E\u30BD\u30E0\u30EA\u30A8\u30FC\u30EB\uFF08\u7D99\u627F\uFF09", "Crescent Moon Sommelier (inherited)"], "90181": ["\u30A8\u30F3\u30D7\u30EC\u30B9\u30FB\u30D7\u30E9\u30A4\u30C9\uFF08\u7D99\u627F\uFF09", "Empress\u30FBPride (inherited)"], "901901111": ["\u9650\u754C\u30A6\u30DE\u30DE\u30CB\u30A2\uFF08\u7D99\u627F\uFF09", "Uma Mania Max (inherited)"], "901901211": ["\u6700\u524D\u5217\u306F\u8B72\u308C\u306A\u3044\uFF01\uFF08\u7D99\u627F\uFF09", "The Front Row Is Non-Negotiable! (inherited)"], "901901221": ["\u72D9\u3046\u306F\u6700\u524D\u30C9\u30BB\u30F3\u3078\u306E\u9053\uFF01\uFF08\u7D99\u627F\uFF09", "Aim for the Front and Center! (inherited)"], "901902111": ["\u8D85\u7279\u6025\u5165\u7A3F\uFF01\uFF08\u7D99\u627F\uFF09", "Super Express Submission! (inherited)"], "901902121": ["\u305F\u304E\u3063\u3066\u304D\u305F\u3041\uFF5E\uFF5E\u3063\uFF01\uFF01\uFF08\u7D99\u627F\uFF09", "Now I'm Hyped!! (inherited)"], "901902211": ["\u5C0A\u307F\u3092\u6C42\u3081\u3066\u3075\u3063\u304B\u30FC\u30FC\u3064\uFF01\uFF08\u7D99\u627F\uFF09", "Revived For Moe! (inherited)"], "902001111": ["\u30D5\u30A1\u30B9\u30C8\u30EA\u30C8\u30EA\u30FC\u30D6\uFF08\u7D99\u627F\uFF09", "Fast Retrieve (inherited)"], "902001121": ["\u5927\u7269\u72D9\u3044\u306E\u5FC3\u5F97\uFF08\u7D99\u627F\uFF09", "Angler's Wisdom (inherited)"], "902001211": ["\u8131\u51FA\u5927\u4F5C\u6226\uFF08\u7D99\u627F\uFF09", "Operation Escape (inherited)"], "902002111": ["\u9003\u3052\u308D\uFF5E\u266A\uFF08\u7D99\u627F\uFF09", "Run~Away~\u266A (inherited)"], "902002121": ["\u30B5\u30D7\u30E9\u30A4\u30BA\u5927\u6210\u529F\uFF5E\u2606\uFF08\u7D99\u627F\uFF09", "Surprise~Successful~\u2606 (inherited)"], "902002211": ["\u30EC\u30B3\u30FC\u30C9\u30E9\u30F3\u30CA\u30FC\uFF08\u7D99\u627F\uFF09", "Record Runner (inherited)"], "902101111": ["\u96F7\u9A30\u96F2\u5954\uFF08\u7D99\u627F\uFF09", "Stormstrider (inherited)"], "902101121": ["\u3061\u3083\u3061\u3083\u3063\u3068\u59CB\u3081\u3093\u3067\uFF01\uFF08\u7D99\u627F\uFF09", "Let's Get Cracking! (inherited)"], "902101211": ["\u5C3B\u5C3E\u306E\u6709\u9802\u5929\uFF08\u7D99\u627F\uFF09", "Tail of Ecstasy (inherited)"], "902102111": ["\u5148\u9054\u306B\u732E\u3050\u7948\u308A\u306E\u980C\uFF08\u7D99\u627F\uFF09", "Ode to Our Predecessors (inherited)"], "902102211": ["\u3055\u3042\u3001\u30A6\u30C1\u3068\u3084\u308D\u3046\u3084\uFF01\uFF08\u7D99\u627F\uFF09", "'ight, let's get em! (inherited)"], "902102221": ["\u307B\u306A\u3001\u884C\u304F\u3067\uFF01\uFF08\u7D99\u627F\uFF09", "'kay then, let's get movin'! (inherited)"], "902201111": ["\u30ED\u30A4\u30E4\u30EB\u30B9\u30BF\u30FC\uFF08\u7D99\u627F\uFF09", "Royal Star (inherited)"], "902201211": ["\u5929\u7A7A\u843D\u3068\u3057\uFF08\u7D99\u627F\uFF09", "Sky Drop (inherited)"], "902202111": ["\u601D\u3044\u51FA\u3092\u529B\u306B\u5909\u3048\u3066\uFF08\u7D99\u627F\uFF09", "Memories Become Power (inherited)"], "902202211": ["\u30E2\u30EA\u30AC\u30F3\u306E\u77DB\u621F\uFF08\u7D99\u627F\uFF09", "Morr\xEDgan's Spear (inherited)"], "902202221": ["\u7406\u60F3\u3078\u5411\u304B\u3046\u899A\u609F\uFF08\u7D99\u627F\uFF09", "Ideal-Seeking Determination (inherited)"], "902301111": ["\u60F3\u5B9A\u901A\u308A\u3001\u4F59\u88D5\u5341\u5206\uFF08\u7D99\u627F\uFF09", "Exactly As Planned (inherited)"], "902301211": ["\u8A08\u753B\u7684\u30AF\u30FC\u30EB\u30C0\u30A6\u30F3\uFF08\u7D99\u627F\uFF09", "Scheduled Cooldown (inherited)"], "902302111": ["VIP\u306A\u5F8C\u308D\u59FF\uFF08\u7D99\u627F\uFF09", "VIP Back View (inherited)"], "902302211": ["\u5168\u529B\u30B5\u30F3\u30BF\u30AF\u30ED\u30FC\u30B9\uFF08\u7D99\u627F\uFF09", "Full Power Santa Claus (inherited)"], "902303111": ["\u30B7\u30DF\u30E5\u30EC\u30FC\u30C8\u30B0\u30E9\u30B9\u30FB\u30AA\u30F3\uFF08\u7D99\u627F\uFF09", "Simulation Glasses: ON (inherited)"], "902303211": ["\u30CD\u30AA\u30F3\u306E\u5C3E\u3092\u5F15\u3044\u3066\uFF08\u7D99\u627F\uFF09", "Drawing a Neon Trail (inherited)"], "902401111": ["You copy?\uFF08\u7D99\u627F\uFF09", "You Copy? (inherited)"], "902401211": ["I copy!\uFF08\u7D99\u627F\uFF09", "I Copy! (inherited)"], "902402111": ["\u7D14\u767D\u306E\u3055\u3055\u3084\u304D\uFF08\u7D99\u627F\uFF09", "Snow White Whisper (inherited)"], "902402211": ["\u30D0\u30EC\u30EB\u30ED\u30FC\u30EB\uFF08\u7D99\u627F\uFF09", "Barrel Roll (inherited)"], "902403111": ["\u304A\u5148\u306B\u2606\u30C6\u30FC\u30EB\u30A6\u30A3\u30F3\u30C9\uFF08\u7D99\u627F\uFF09", "Going Ahead\u2606Tailwind (inherited)"], "902403211": ["\u30B3\u30C3\u30AF\u30D4\u30C3\u30C8\u30FB\u30DE\u30B8\u30B7\u30E3\u30F3\uFF08\u7D99\u627F\uFF09", "Cockpit Magician (inherited)"], "90241": ["\u52DD\u5229\u306E\u30AD\u30C3\u30B9\u2606\uFF08\u7D99\u627F\uFF09", "Victory Kiss \u2606 (inherited)"], "902501111": ["\u30B3\u30FC\u30D2\u30FC\u30D6\u30EC\u30A4\u30AF\uFF08\u7D99\u627F\uFF09", "Coffee Break (inherited)"], "902501211": ["\u30AA\u30A4\u30C6\u30A4\u30AB\u30CA\u30A4\u30C7\uFF08\u7D99\u627F\uFF09", "Don't Leave Me (inherited)"], "902502111": ["\u8FEB\u308A\u304F\u308B\u5BB5\u95C7\uFF08\u7D99\u627F\uFF09", "Imminent Twilight (inherited)"], "902502211": ["\u7384\u754C\u9818\u57DF\uFF08\u7D99\u627F\uFF09", "World of Marvels (inherited)"], "902601111": ["\u30AF\u30ED\u30C3\u30AF\u30A2\u30C3\u30D7\uFF08\u7D99\u627F\uFF09", "Overclocking (inherited)"], "902601211": ["\u56F0\u96E3\u3092\u4E57\u308A\u8D8A\u3048\u308B\u8005\uFF08\u7D99\u627F\uFF09", "Overcomer of Difficulties (inherited)"], "902602111": ["\u5B8C\u74A7\u306A\u30A8\u30E9\u30FC\u5BFE\u51E6\u8853\uFF08\u7D99\u627F\uFF09", "Perfect Bugfixing Technique (inherited)"], "902602121": ["\u7518\u3055\u63A7\u3048\u3081\u30A8\u30B9\u30B1\u30FC\u30D7\uFF08\u7D99\u627F\uFF09", "Slightly Sweet Escape (inherited)"], "902602211": ["\u30D1\u30FC\u30D5\u30A7\u30AF\u30C8\u30D6\u30FC\u30C8\uFF08\u7D99\u627F\uFF09", "Perfect Boot (inherited)"], "902701111": ["\u30DE\u30C3\u30B9\u30EB\u30A2\u30F3\u30BB\u30E0\uFF08\u7D99\u627F\uFF09", "Muscle Anthem (inherited)"], "902701211": ["\u30E9\u30A4\u30B8\u30F3\u30B0\u30D0\u30EB\u30AF\u30A2\u30C3\u30D7\uFF08\u7D99\u627F\uFF09", "Rising Bulk Up (inherited)"], "902702111": ["\u5922\u53F6\u3048\u308B\u6C7A\u610F\u3092\u6388\u3051\u307E\u3057\u3087\u3046\uFF08\u7D99\u627F\uFF09", "Granting Dream-fulfilling Determination (inherited)"], "902702211": ["\u81F3\u9AD8\u306E\u52DD\u5229\u3092\u53EC\u3057\u4E0A\u304C\u308C\uFF08\u7D99\u627F\uFF09", "Serving Victory Supreme (inherited)"], "90271": ["\u71C3\u3048\u308D\u7B4B\u8089\uFF01\uFF08\u7D99\u627F\uFF09", "Burning Muscles! (inherited)"], "902801111": ["\u4E0B\u3054\u3057\u3089\u3048\u4E07\u5168\uFF01\uFF08\u7D99\u627F\uFF09", "Flawless Mise en Place! (inherited)"], "902801211": ["\u30DC\u30FC\u30CE\u306A\u5065\u5556\u5BB6\uFF08\u7D99\u627F\uFF09", "Bono-style Gluttony (inherited)"], "902801221": ["\u306F\u3063\u3051\u3088\u3044\uFF01\uFF08\u7D99\u627F\uFF09", "Hakkeyoi! (inherited)"], "902901111": ["\u61A7\u308C\u306E\u30B7\u30C1\u30FC\u30AC\u30FC\u30EB\uFF08\u7D99\u627F\uFF09", "Admired City Girl (inherited)"], "902901211": ["\u96EA\u56FD\u4ED5\u8FBC\u307F\u306E\u76F4\u6ED1\u964D\uFF08\u7D99\u627F\uFF09", "Seasoned Sledder's Swoop (inherited)"], "902901221": ["\u6C7A\u610F\u306E\u6839\u6027\u5A18\uFF08\u7D99\u627F\uFF09", "Steadfast Determination (inherited)"], "902902111": ["\u3082\u3046\u3072\u3068\u3051\u3063\u3071\u308A\uFF01\uFF08\u7D99\u627F\uFF09", "One More Push! (inherited)"], "902902211": ["\u66F2\u7DDA\u306B\u821E\u3046\u6DF1\u96EA\uFF08\u7D99\u627F\uFF09", "Snow Fluttering Through the Corner (inherited)"], "902902221": ["\u4E0B\u5F26\u306E\u96EA\u6708\u82B1\uFF08\u7D99\u627F\uFF09", "Winter's Beauty Under the Waning Moon (inherited)"], "903001111": ["\u6C7A\u610F\u306E\u30D2\u30FC\u30ED\u30FC\uFF08\u7D99\u627F\uFF09", "Determined Hero (inherited)"], "903001211": ["\u9ED2\u306E\u523A\u5BA2\uFF08\u7D99\u627F\uFF09", "Black Assassin (inherited)"], "903002111": ["\u304C\u3093\u3070\u308B\u305E\u30FC\u2026\u304A\u30FC\uFF01\uFF08\u7D99\u627F\uFF09", "I'll Do My Beeest! (inherited)"], "903002211": ["\u30C8\u30EA\u30C3\u30AF&\u30C8\u30EA\u30FC\u30C8\uFF08\u7D99\u627F\uFF09", "Trick & Treat (inherited)"], "903003111": ["\u5C71\u9802\u3067\u30A4\u30BF\u30C0\u30AD\u30DE\u30B9\uFF08\u7D99\u627F\uFF09", "Summit Meal (inherited)"], "903003211": ["\u6DC0\u306E\u795D\u798F\uFF08\u7D99\u627F\uFF09", "Blessing of Yodo (inherited)"], "903101111": ["\u3058\u3083\u3058\u3083\u30A6\u30DE\u304A\u59C9\u3061\u3083\u3093\uFF08\u7D99\u627F\uFF09", "Wild Onee-chan (inherited)"], "903101211": ["\u8352\u3076\u308B\u98A8\u795E\uFF08\u7D99\u627F\uFF09", "Raging Wind God (inherited)"], "903102111": ["\u30AA\u30FC\u30C0\u30FC\u306F\u30D0\u30C3\u30C1\u30EA\uFF01\uFF08\u7D99\u627F\uFF09", "Perfect Order! (inherited)"], "903102211": ["\u83EF\u9E97\u306A\u30B5\u30FC\u30D6\uFF08\u7D99\u627F\uFF09", "Brilliant Serving (inherited)"], "903201111": ["\u53EF\u80FD\u6027\u306E\u5F92\uFF08\u7D99\u627F\uFF09", "Pupil of Possibility (inherited)"], "903201211": ["\u52B9\u7387\u7684\u4F11\u606F\u6CD5\uFF08\u7D99\u627F\uFF09", "Efficient Recreation (inherited)"], "903202111": ["\u30E9\u30D7\u30E9\u30B9\u306E\u60AA\u9B54\uFF08\u7D99\u627F\uFF09", "Laplace's Demon (inherited)"], "903202211": ["\u7729\u8000\u306E\u30EB\u30AF\u30B7\u30AA\u30F3\uFF08\u7D99\u627F\uFF09", "Dazzling Luxon (inherited)"], "903203111": ["\u5149\u901F\u3092\u8D85\u3048\u308B\u7C92\u5B50\uFF08\u7D99\u627F\uFF09", "FTL Particle (inherited)"], "903203211": ["\u88AB\u9A13\u4F53\u89B3\u5BDF\uFF08\u7D99\u627F\uFF09", "Subject Observation (inherited)"], "90321": ["introduction\uFF1AMy body\uFF08\u7D99\u627F\uFF09", "introduction\uFF1AMy body (inherited)"], "903301111": ["\u9759\u304B\u306A\u8A93\u3044\uFF08\u7D99\u627F\uFF09", "Silent Oath (inherited)"], "903301211": ["\u5DF1\u8EAB\u7126\u304C\u3059\u307B\u3046\u304D\u661F\uFF08\u7D99\u627F\uFF09", "Immolated Comet (inherited)"], "903302111": ["\u30A2\u30EB\u30FB\u30EF\u30FC\u30AD\u3092\u8FFD\u3044\u304B\u3051\u3066\uFF08\u7D99\u627F\uFF09", "On Vultur Cadens' Trail (inherited)"], "903302211": ["\u6C37\u661F\u878D\u89E3\uFF08\u7D99\u627F\uFF09", "Melting of the Icy Star (inherited)"], "903401111": ["\u706B\u6D88\u306E\u68AF\u5B50\u767B\u308A\uFF08\u7D99\u627F\uFF09", "Firefighter's Hashigo-nori (inherited)"], "903401211": ["\u719F\u7DF4\u306E\u7802\u5875\u4F7F\u3044\uFF08\u7D99\u627F\uFF09", "Sandstorm Wielder (inherited)"], "903401221": ["\u7C8B\u3067\u3044\u306A\u305B\u306A\u9054\u4EBA\u6280\uFF08\u7D99\u627F\uFF09", "Stylish and Masterful (inherited)"], "903402111": ["\u6247\u30CE\u821E\uFF08\u7D99\u627F\uFF09", "Fan Dance (inherited)"], "903402211": ["\u5927\u898B\u5F97\u5207\u308A\uFF08\u7D99\u627F\uFF09", "Dramatic Finale (inherited)"], "903501111": ["\u305F\u3086\u307E\u306C\u52AA\u529B\uFF08\u7D99\u627F\uFF09", "Tireless Effort (inherited)"], "903501211": ["\u30A6\u30A4\u30CB\u30F3\u30B0\u30ED\u30FC\u30C9\uFF08\u7D99\u627F\uFF09", "Winning Road (inherited)"], "903502111": ["\u5343\u4E07\u30D0\u30EA\u30AD\uFF01\uFF01\uFF01\uFF08\u7D99\u627F\uFF09", "Ten Million Horsepower!!! (inherited)"], "903502211": ["\u304D\u3063\u3068\u98DB\u3079\u308B\uFF01\uFF08\u7D99\u627F\uFF09", "You'll fly for sure! (inherited)"], "903503111": ["\u5168\u30FB\u529B\u30FB\u30EF\u30AF\u30FB\u30EF\u30AF\uFF01\uFF01\uFF08\u7D99\u627F\uFF09", "All-Out Excitement!! (inherited)"], "903503211": ["Dreamer's Path\uFF08\u7D99\u627F\uFF09", "Dreamer's Path (inherited)"], "90351": ["\u5168\u529BV\u30B5\u30A4\u30F3\u30C3\uFF01\uFF08\u7D99\u627F\uFF09", "Full Power V Sign! (inherited)"], "903601111": ["\u30A2\u30C3\u30D7\u30EA\u30D5\u30C6\u30A3\u30F3\u30B0\uFF08\u7D99\u627F\uFF09", "Uplifting (inherited)"], "903601211": ["Lose Myself\uFF08\u7D99\u627F\uFF09", "Lose Myself (inherited)"], "903602111": ["Gluttony's Grip\uFF08\u7D99\u627F\uFF09", "Gluttony's Grip (inherited)"], "903602121": ["\u30CE\u30A4\u30BA\u30AD\u30E3\u30F3\u30BB\u30EA\u30F3\u30B0\uFF08\u7D99\u627F\uFF09", "Noise Cancellation (inherited)"], "903602211": ["\u5211\u82E6\uFF08\u7D99\u627F\uFF09", "Torment (inherited)"], "903701111": ["\u9583\u5149\u306E\u30DE\u30AE\u30A2\uFF08\u7D99\u627F\uFF09", "Flash Magier (inherited)"], "903701211": ["\u8A87\u308A\u3092\u61F8\u3051\u3066\uFF08\u7D99\u627F\uFF09", "Betting My Pride (inherited)"], "903702111": ["\u52DD\u5229\u306E\u30EC\u30B7\u30D4\uFF08\u7D99\u627F\uFF09", "Recipe of Victory (inherited)"], "903702121": ["\u4ED5\u8FBC\u307F\u306F\u5B8C\u74A7\uFF08\u7D99\u627F\uFF09", "Perfect Preparation (inherited)"], "903702211": ["\u9ED2\u3044\u9583\u5149\uFF08\u7D99\u627F\uFF09", "Black Flash (inherited)"], "903703111": ["Ritter von Fuchu\uFF08\u7D99\u627F\uFF09", "Ritter von Fuchu (inherited)"], "903703211": ["\u9583\u5149\u306E\u5954\u6D41\uFF08\u7D99\u627F\uFF09", "Flash Torrent (inherited)"], "903801111": ["#\u30AB\u30EF\u30A4\u30A4\u304B\u304F\u4E71\u266A\uFF08\u7D99\u627F\uFF09", "#Cute Perturbation\u266A (inherited)"], "903801211": ["#\u5922\u4E2D\u306B\u306A\u3063\u3061\u3083\u3048\u266A\uFF08\u7D99\u627F\uFF09", "#Go Crazy\u266A (inherited)"], "903802111": ["#\u30AB\u30EC\u30F3\u306B\u67D3\u307E\u3063\u3066\u307F\u308B\uFF1F\uFF08\u7D99\u627F\uFF09", "#WannaGetCurren'd? (inherited)"], "903802121": ["\u5FC3\u596A\u308F\u308C\u308B\u9583\u5149\uFF08\u7D99\u627F\uFF09", "Enthralling Glitter (inherited)"], "903802211": ["#\u30D3\u30E5\u30FC\u30C6\u30A3\u30FC\u30B9\u30D7\u30EA\u30F3\u30C8\uFF08\u7D99\u627F\uFF09", "#Beauty Sprint (inherited)"], "903901111": ["\u30CE\u30F3\u30B9\u30C8\u30C3\u30D7\u30D7\u30EA\u30F3\u30BB\u30B9\uFF08\u7D99\u627F\uFF09", "Non-stop Princess (inherited)"], "903901211": ["\u66B4\u308C\u9F8D\uFF08\u7D99\u627F\uFF09", "Raging Dragon (inherited)"], "903902111": ["\u30C8\u30C3\u30D7\u30FB\u30AA\u30D6\u30FB\u30B6\u30FB\u59EB\uFF01\uFF08\u7D99\u627F\uFF09", "Top Princess! (inherited)"], "903902211": ["\u7206\u8D70\u731B\u59EB\u2606\u6025\u8EE2\u76F4\u4E0B\uFF01\uFF01\uFF08\u7D99\u627F\uFF09", "Fiery Princess\u2606Sudden Descent!! (inherited)"], "904001111": ["\u5148\u898B\u306E\u660E\uFF08\u7D99\u627F\uFF09", "Prescience (inherited)"], "904001211": ["\u30E9\u30F3\u30A6\u30A7\u30A4\u306E\u4E3B\u5F79\uFF08\u7D99\u627F\uFF09", "Star of the Runway (inherited)"], "904001221": ["\u30D5\u30A3\u30CA\u30FC\u30EC\u306E\u5148\u982D\u3078\uFF08\u7D99\u627F\uFF09", "To the Finale's Forefront (inherited)"], "904002111": ["\u9BAE\u3084\u304B\u306A\u5E03\u9663\uFF08\u7D99\u627F\uFF09", "Vivid Battle Formation (inherited)"], "904002211": ["\u864E\u8996\u7708\u3005\uFF08\u7D99\u627F\uFF09", "Eagle-eyed (inherited)"], "904101111": ["\u30D0\u30AF\u30B7\u30F3\u7684\u30B9\u30D7\u30EA\u30F3\u30C8\uFF01\uFF08\u7D99\u627F\uFF09", "Bakushin Sprint! (inherited)"], "904101211": ["\u30D0\u30AF\u30B7\u30F3\u7684\u30EA\u30FC\u30C9\uFF01\uFF08\u7D99\u627F\uFF09", "Bakushin Lead! (inherited)"], "904102111": ["\u732A\u7A81\u731B\u9032\uFF01\u30D0\u30AF\u30B7\u30F3\u30ED\u30FC\u30C9\uFF01\uFF08\u7D99\u627F\uFF09", "Red-hot Rush! Bakushin Road! (inherited)"], "904102211": ["\u9A40\u9032\uFF01\u7206\u9032\uFF01\u30D0\u30AF\u30B7\u30FC\u30F3\uFF01\uFF08\u7D99\u627F\uFF09", "Bakushin! Bakushin! Bakushiiin! (inherited)"], "90411": ["\u5B66\u7D1A\u59D4\u54E1\u9577+\u901F\u3055\uFF1D\u30D0\u30AF\u30B7\u30F3\uFF08\u7D99\u627F\uFF09", "Class President + Speed = Bakushin (inherited)"], "904201111": ["\u4E16\u754C\u3092\u8CAB\u304F\u81F3\u9AD8\u306E\u8F1D\u304D\uFF08\u7D99\u627F\uFF09", "World-wide Supreme Brilliance (inherited)"], "904201211": ["\u30D1\u30FC\u30EB\u6D41\u30C0\u30F3\u30B9\u30D0\u30C8\u30EB\uFF08\u7D99\u627F\uFF09", "Pearl-style Dance Battle (inherited)"], "904202111": ["\u30DF\u30B9\u30C8\u30E9\u30EB\u306B\u4E57\u3063\u3066\uFF08\u7D99\u627F\uFF09", "Riding the Mistral (inherited)"], "904202211": ["\u6D77\u306E\u5E95\u304B\u3089\u30AD\u30E9\u3081\u3044\u3066\u2026\u2606\uFF08\u7D99\u627F\uFF09", "Shining From The Ocean Floor...\u2606 (inherited)"], "904301111": ["\u5168\u901F\u524D\u9032\u306A\u306E\u3060\uFF01\uFF08\u7D99\u627F\uFF09", "Full Speed Ahead, Nanoda! (inherited)"], "904301211": ["\u3044\u305F\u305A\u3089\u30DE\u30A4\u30B9\u30BF\u30FC\uFF08\u7D99\u627F\uFF09", "Masterful Prankster (inherited)"], "904301221": ["\u6CE5\u3093\u3053\u9B54\u738B\u69D8\uFF08\u7D99\u627F\uFF09", "Mud Demon Lord (inherited)"], "904401111": ["\u653E\u8AB2\u5F8C\u9B54\u6CD5\u5C11\u5973\uFF08\u7D99\u627F\uFF09", "After-School Magical Girl (inherited)"], "904401211": ["\u30C1\u30E3\u30FC\u30E0\u30DE\u30B8\u30C3\u30AF\uFF08\u7D99\u627F\uFF09", "Charm Magic (inherited)"], "904401221": ["\u30B5\u30EB\u30D3\u30A2\u2606\u30B9\u30D7\u30EC\u30F3\u30C7\u30F3\u30B9\uFF08\u7D99\u627F\uFF09", "Salvia\u2606Splendens (inherited)"], "904402111": ["\u30B7\u30EB\u30D5\u30A3\u30FC\u30C9\u30FB\u30DE\u30AE\u30A2\uFF08\u7D99\u627F\uFF09", "Sylphid Magia (inherited)"], "904402211": ["\u7DCA\u6025\u9B54\u529B\u30D6\u30FC\u30B9\u30C8\uFF08\u7D99\u627F\uFF09", "Emergency Magic Boost (inherited)"], "904501111": ["\u3042\u307E\uFF5E\u3044\u5E7B\u60D1\uFF08\u7D99\u627F\uFF09", "Sweet Bewitching (inherited)"], "904501211": ["\u7652\u3057\u306E\u30DE\u30A8\u30B9\u30C8\u30ED\uFF08\u7D99\u627F\uFF09", "Healing Maestro (inherited)"], "904502111": ["\u304A\u4E16\u8A71\u306E\u30D7\u30ED\u30D5\u30A7\u30C3\u30B7\u30E7\u30CA\u30EB\uFF08\u7D99\u627F\uFF09", "Professional Pamperer (inherited)"], "904502211": ["\u9B45\u60D1\u306E\u30DE\u30DF\u30FC\u30A6\u30A3\u30B9\u30D1\u30FC\uFF08\u7D99\u627F\uFF09", "Charming Mummy Whisper (inherited)"], "904503111": ["\u6D41\u6C34\u6D41\u8D70\uFF08\u7D99\u627F\uFF09", "Run as the River Flows (inherited)"], "904503211": ["\u795E\u4ED9\u8776\u5909\u306E\u8853\uFF08\u7D99\u627F\uFF09", "Butterfly Transformation Jutsu (inherited)"], "90451": ["\u30AF\u30EA\u30A2\u30CF\u30FC\u30C8\uFF08\u7D99\u627F\uFF09", "Clear Heart (inherited)"], "904601111": ["\u5927\u6CE8\u76EE\u306E\u30A6\u30DE\u30C9\u30EB\u53C2\u4E0A\u2605\uFF08\u7D99\u627F\uFF09", "The Dazzling Umadol's Here\u2605 (inherited)"], "904601121": ["\u76EE\u3092\u9038\u3089\u3057\u3061\u3083\u30C0\u30E1\u3060\u3088\u2606\uFF08\u7D99\u627F\uFF09", "No Looking Away\u2606 (inherited)"], "904601211": ["\u30A6\u30DE\u30C9\u30EB\u30D1\u30EF\u30FC\u6025\u4E0A\u6607\u2191\u2191\uFF08\u7D99\u627F\uFF09", "Umadol Power Trend \u2191\u2191 (inherited)"], "904602111": ["\u5922\u306B\u5411\u304B\u3063\u3066\u6025\u4E0A\u6607\uFF01\uFF08\u7D99\u627F\uFF09", "Trending Towards Your Dreams! (inherited)"], "904602121": ["\u6700\u9AD8\u5CF0\u306E\u30B9\u30C6\u30FC\u30B8\u306B\uFF01\uFF08\u7D99\u627F\uFF09", "To the Ultimate Stage! (inherited)"], "904602211": ["\u7D76\u5BFE\u7684\u30BB\u30F3\u30BF\u30FC\uFF01\uFF08\u7D99\u627F\uFF09", "Absolute Center! (inherited)"], "904701111": ["\u82F1\u96C4\u3078\u306E\u9053\u6A19\uFF08\u7D99\u627F\uFF09", "Hero Handbook (inherited)"], "904701121": ["\u7269\u8A9E\u3092\u7D21\u3050\u8005\uFF08\u7D99\u627F\uFF09", "Story Weaver (inherited)"], "904701211": ["\u5149\u8F1D\u304F\u5263\uFF08\u7D99\u627F\uFF09", "Shining Sword (inherited)"], "904702111": ["\u52C7\u8E8D\u9583\u3005\uFF08\u7D99\u627F\uFF09", "Heroic Radiance (inherited)"], "904702211": ["\u5D50\u7E8F\u3044\u3057\u82F1\u96C4\u306F\u5F80\u304F\uFF08\u7D99\u627F\uFF09", "The Stormforged Hero Advances (inherited)"], "904801111": ["\u30CE\u3063\u3066\u3053\uFF01\uFF08\u7D99\u627F\uFF09", "Get Those Vibes Up! (inherited)"], "904801211": ["\u30C8\u30EC\u30F3\u30C9\u30D7\u30E9\u30F3\u30CA\u30FC\uFF08\u7D99\u627F\uFF09", "Trend Planner (inherited)"], "904802111": ["\u30EF\u30F3\u30C1\u30E3\u30F3\u307E\u304F\u3063\u305F\u308B\uFF01\uFF08\u7D99\u627F\uFF09", "Taking Every Chance! (inherited)"], "904802211": ["\u3042\u305F\u3057\u3057\u304B\u52DD\u305F\u3093\uFF01\uFF08\u7D99\u627F\uFF09", "Can't Top Me! (inherited)"], "904802221": ["\u3042\u305F\u3057\u30B5\u30A4\u30B3\u30FC\u3058\u3083\u3093\uFF01\uFF08\u7D99\u627F\uFF09", "Simply the Best! (inherited)"], "904901111": ["\u4E7E\u5764\u4E00\u64F2\u306E\u5927\u535A\u6253\uFF08\u7D99\u627F\uFF09", "All or Nothing (inherited)"], "904901211": ["\u9244\u706B\u306E\u30AE\u30E3\u30F3\u30D6\u30E9\u30FC\uFF08\u7D99\u627F\uFF09", "Hot-blooded Gambler (inherited)"], "905001111": ["\u9B3C\u6C17\u68EE\u7136\uFF08\u7D99\u627F\uFF09", "Menacing Presence (inherited)"], "905001211": ["\u99C6\u308A\u7ACB\u3066\u308B\u60F3\u3044\uFF08\u7D99\u627F\uFF09", "Spurring Emotions (inherited)"], "905002111": ["\u898B\u305B\u3064\u3051\u3066\u3084\u308B\uFF01\uFF08\u7D99\u627F\uFF09", "I'll Show You! (inherited)"], "905002211": ["\u8D77\u6B7B\u56DE\u751F\u306E\u51FA\u529B\uFF08\u7D99\u627F\uFF09", "Recovery Output (inherited)"], "905003111": ["\u30BC\u30ED\u30EC\u30A4\u30C6\u30F3\u30B7\uFF08\u7D99\u627F\uFF09", "Zero Latency (inherited)"], "905003211": ["\u4E0D\u6493\u306ELimit Breaker\uFF08\u7D99\u627F\uFF09", "Indomitable Limit Breaker (inherited)"], "905101111": ["\u98A8\u82B1\u75BE\u8D70\uFF08\u7D99\u627F\uFF09", "Flurry Dash (inherited)"], "905101121": ["\u4E00\u8F2A\u306E\u52C7\u6C17\uFF08\u7D99\u627F\uFF09", "A Petal's Bravery (inherited)"], "905101211": ["\u5927\u8F2A\u306E\u6C7A\u610F\uFF08\u7D99\u627F\uFF09", "Large-Petaled Resolution (inherited)"], "905102111": ["\u795D\u798F\u306E\u30D5\u30E9\u30EF\u30FC\u30AC\u30FC\u30EB\uFF08\u7D99\u627F\uFF09", "Flower Girl's Blessing (inherited)"], "905102211": ["\u30F4\u30A7\u30FC\u30EB\u63FA\u3089\u3059\u6625\u75BE\u98A8\uFF08\u7D99\u627F\uFF09", "Veil-Swaying Spring Storm (inherited)"], "905102221": ["\u672B\u6C38\u304F\u3001\u5BC4\u308A\u6DFB\u3046\u82B1\uFF08\u7D99\u627F\uFF09", "Blooming in Sickness and in Health (inherited)"], "905201111": ["\u307E\u3060\u307E\u3060\u3060\u3088\uFF01\uFF08\u7D99\u627F\uFF09", "Not Done Yet! (inherited)"], "905201211": ["\u307E\u3051\u306A\u3044\u304B\u3089\u306D\uFF01\uFF08\u7D99\u627F\uFF09", "I Won't Lose! (inherited)"], "905202111": ["\u898B\u3066\u3066\u898B\u3066\u3066\uFF01\uFF08\u7D99\u627F\uFF09", "Look At Me, Look! (inherited)"], "905202121": ["\u52DD\u3061\u305F\u3044\u3093\u3060\u3082\u3093\uFF01\uFF08\u7D99\u627F\uFF09", "I Really Wanna Win! (inherited)"], "905202211": ["\u304C\u3093\u3070\u308B\u3082\u3093\uFF01\uFF08\u7D99\u627F\uFF09", "Trying My Best! (inherited)"], "90521": ["\u30EF\u30AF\u30EF\u30AF\u3088\u30FC\u3044\u30C9\u30F3\uFF08\u7D99\u627F\uFF09", "Ready, Steady, Go! (inherited)"], "905301111": ["\u98A8\u7D00\u306E\u767B\u9F8D\u9580\uFF08\u7D99\u627F\uFF09", "Gateway To Discipline (inherited)"], "905301121": ["\u9F8D\u864E\u76F8\u640F\uFF08\u7D99\u627F\uFF09", "Dragon and Tiger's Battle (inherited)"], "905301211": ["\u62BC\u5FCD\u30C3\uFF01\u6C17\u5408\u5341\u5206\u3063\u30B9\uFF01\uFF08\u7D99\u627F\uFF09", "Osu! I'm Fired Up! (inherited)"], "905302111": ["\u71B1\u8840\u9032\u5316\u30E9\u30A4\u30C7\u30A3\u30F3\u30B0\uFF01\uFF08\u7D99\u627F\uFF09", "Hot-blooded Riding! (inherited)"], "905302211": ["\u5FC5\u6BBA\uFF01\u7206\u901F\u30B9\u30D7\u30EA\u30F3\u30C8\uFF01\uFF08\u7D99\u627F\uFF09", "Special Move! Explosive Sprint! (inherited)"], "905401111": ["\u6025\u884C\uFF01\u30D2\u30FC\u30ED\u30FC\u53C2\u4E0A\uFF01\uFF08\u7D99\u627F\uFF09", "Emergency! Hero on the Scene! (inherited)"], "905401211": ["\u5FC5\u6BBA\u30FB\u96F7\u96FB\u30AD\u30FC\u30C3\u30AF\uFF01\uFF08\u7D99\u627F\uFF09", "Special Move: Lightning Kiiick! (inherited)"], "90541": ["\u30DA\u30AC\u30B5\u30B9\u30D5\u30EB\u30D1\u30EF\u30FC\uFF01\uFF08\u7D99\u627F\uFF09", "Pegasus Full Power! (inherited)"], "905501111": ["\u30EF\u30AF\u30EF\u30AF\u2606\u30DE\u30FC\u30D9\u30E9\u30B9\u30BE\u30FC\u30F3\uFF08\u7D99\u627F\uFF09", "Exciting\u2606Marvelous Zone (inherited)"], "905501121": ["\u30AE\u30E5\u30F3\u30AE\u30E5\u30F3\u306E\u30DE\u30FC\u30D9\u30E9\u30B9\u2606\uFF08\u7D99\u627F\uFF09", "Marvelous Momentum\u2606 (inherited)"], "905501211": ["\u9032\u3081\uFF01\u4E16\u754C\u30DE\u30FC\u30D9\u30E9\u30B9\u8A08\u753B\u2606\uFF08\u7D99\u627F\uFF09", "Marvelous World Plan\u2606 (inherited)"], "905601111": ["\u5409\u5146\u3067\u3059\uFF01\uFF08\u7D99\u627F\uFF09", "Lucky Omen! (inherited)"], "905601211": ["\u4E03\u798F\u5373\u751F\uFF08\u7D99\u627F\uFF09", "Seven Heavenly Fortunes (inherited)"], "905602111": ["\u6012\u6D9B\u306E\u8D85\u5E78\u904B\u30D1\u30EF\u30FC\uFF01\uFF08\u7D99\u627F\uFF09", "Tempestuous Ultra Luck Power! (inherited)"], "905602211": ["\u3070\u3063\u3061\u308A\u958B\u904B\u4F53\u9A13\uFF01\uFF08\u7D99\u627F\uFF09", "First-hand Rising Fortune! (inherited)"], "90561": ["\u6765\u3066\u304F\u3060\u3055\u3044\u6765\u3066\u304F\u3060\u3055\u3044\uFF01\uFF08\u7D99\u627F\uFF09", "Come, Come! (inherited)"], "905701111": ["\u5929\u7FD4\u308B\u8DB3\u53D6\u308A\uFF08\u7D99\u627F\uFF09", "Soaring Step (inherited)"], "905701211": ["\u5F3E\u3080\u5927\u5730\uFF08\u7D99\u627F\uFF09", "Supple Land (inherited)"], "905702111": ["\u596A\u76EE\u306E\u5B99\u4E57\u308A\uFF08\u7D99\u627F\uFF09", "Mesmerizing Somersault (inherited)"], "905702211": ["\u3055\u30A1\u3055\u3001\u304A\u7ACB\u3061\u5408\u3044\uFF01\uFF08\u7D99\u627F\uFF09", "Step Up and Behold! (inherited)"], "905801111": ["\u6012\u6D9B\u306E\u30B9\u30D4\u30FC\u30C9\uFF08\u7D99\u627F\uFF09", "Tempestuous Speed (inherited)"], "905801211": ["\u8AE6\u3081\u306A\u3044\u3001\u3067\u3059\u3045\uFF5E\uFF01\uFF08\u7D99\u627F\uFF09", "I'm Not Giving Up! (inherited)"], "905802111": ["\u30E9\u30A4\u30D0\u30EB\u304C\u3044\u308B\u304B\u3089\uFF01\uFF08\u7D99\u627F\uFF09", "I've Got a Rival After All! (inherited)"], "905802121": ["\u5FC3\u306B\u706F\u3059\u95D8\u5FD7\uFF08\u7D99\u627F\uFF09", "Fervent Determination (inherited)"], "905802211": ["\u9B42\u306E\u5C0E\u304D\u624B\uFF08\u7D99\u627F\uFF09", "Soul Guide (inherited)"], "905901111": ["\u30AF\u30FC\u30EB\u306A\u8996\u7DDA\uFF08\u7D99\u627F\uFF09", "Cool Gaze (inherited)"], "905901121": ["\u6804\u5149\u3078\u306E\u7FBD\u3070\u305F\u304D\uFF08\u7D99\u627F\uFF09", "Fluttering Towards Glory (inherited)"], "905901211": ["\u6DC0\u306E\u5973\u738B\uFF08\u7D99\u627F\uFF09", "Queen of Yodo (inherited)"], "905902111": ["\u3082\u3063\u3068\u5192\u967A\u3057\u3066\u307F\u305F\u3044\uFF01\uFF08\u7D99\u627F\uFF09", "I Want To Be More Adventurous! (inherited)"], "905902121": ["\u81EA\u4FE1\u6301\u3063\u3066\u8E0F\u307F\u51FA\u3057\u3066\uFF08\u7D99\u627F\uFF09", "Step with Confidence (inherited)"], "905902211": ["\u8D77\u6B7B\u56DE\u751F\u306E\u4E00\u6B69\uFF08\u7D99\u627F\uFF09", "First Step To Recovery (inherited)"], "906001111": ["\u9B45\u60D1\u306E\u30B7\u30CB\u30AB\u30EB\u30AC\u30FC\u30EB\uFF08\u7D99\u627F\uFF09", "Charming Cynical Girl (inherited)"], "906001211": ["\u76EE\u6307\u305B\uFF01\u4E3B\u4EBA\u516C\uFF01\uFF08\u7D99\u627F\uFF09", "Aim for the Leading Role! (inherited)"], "906002111": ["\u9811\u5F35\u308B\u3057\u304B\u306A\u3044\u3088\u306D\uFF08\u7D99\u627F\uFF09", "Guess I've Gotta Try (inherited)"], "906002211": ["\u30CE\u30F3\u30B9\u30C8\u30C3\u30D7\u30A8\u30FC\u30EB\uFF08\u7D99\u627F\uFF09", "Non-stop Cheer (inherited)"], "906003111": ["\u3044\u3044\u5473\u3001\u51FA\u3066\u308B\u3067\u3057\u3087\uFF1F\uFF08\u7D99\u627F\uFF09", "Tasty, Isn't It? (inherited)"], "906003211": ["\u5927\u6383\u9664\u4E0A\u624B\uFF08\u7D99\u627F\uFF09", "Year-End Cleaning Pro (inherited)"], "90601": ["\u30A2\u30BF\u30B7\u3082\u305F\u307E\u306B\u306F\u3001\u306D\uFF1F\uFF08\u7D99\u627F\uFF09", "You Know, Sometimes Even I Can... (inherited)"], "906101111": ["\u96FB\u6483\u306E\u64AB\u3067\u5207\u308A\uFF08\u7D99\u627F\uFF09", "Electrifying Sweep (inherited)"], "906101211": ["\u738B\u306E\u5927\u5C40\u89B3\uFF08\u7D99\u627F\uFF09", "King's Perspective (inherited)"], "906102111": ["\u7ADC\u306E\u96F2\u3092\u5F97\u308B\u5982\u3057\uFF08\u7D99\u627F\uFF09", "Like Riding a Dragon's Cloud (inherited)"], "906102211": ["\u6625\u98A8\u5439\u304D\u3066\u3001\u685C\u821E\u3046\uFF08\u7D99\u627F\uFF09", "As Spring Blooms, the Sakura Dance (inherited)"], "906103111": ["\u906E\u308B\u3082\u306E\u306F\u306A\u3044\uFF08\u7D99\u627F\uFF09", "Unobstructable (inherited)"], "906103211": ["\u4E0D\u5C48\u306E\u8A3C\u660E\uFF08\u7D99\u627F\uFF09", "Proof of Indomitability (inherited)"], "906103221": ["\u4E00\u6D41\u306E\u5728\u308A\u65B9\uFF08\u7D99\u627F\uFF09", "First-Class Presence (inherited)"], "90611": ["Call me KING\uFF08\u7D99\u627F\uFF09", "Call me KING (inherited)"], "906201111": ["\u30B4\u30FC\u30A4\u30F3\u30B0\u30DE\u30A4\u30A6\u30A7\u30A4\uFF08\u7D99\u627F\uFF09", "Going My Way (inherited)"], "906201211": ["\u3048\u3044\uFF01\u3048\u3044\uFF01\u3080\u3093\uFF01\uFF08\u7D99\u627F\uFF09", "Ei! Ei! Mun! (inherited)"], "906202111": ["\u30DD\u30B8\u30C6\u30A3\u30D6\u30B9\u30DE\u30A4\u30EB\uFF08\u7D99\u627F\uFF09", "Positive Smile (inherited)"], "906202211": ["\u5927\u3069\u3093\u3067\u3093\u304C\u3048\u3057\uFF08\u7D99\u627F\uFF09", "Big Comeback (inherited)"], "906202221": ["\u3084\u3070\u3057\u3084\u3070\u3057\uFF01\uFF08\u7D99\u627F\uFF09", "Oopsy-Doopsy (inherited)"], "90621": ["\u30EC\u30C7\u30A3\u30FC\u3001\u3069\u3093\u3063\uFF01\uFF08\u7D99\u627F\uFF09", "Ready, Bang! (inherited)"], "906301111": ["\u5FB9\u5E95\u7BA1\u7406\u30D7\u30E9\u30F3\uFF08\u7D99\u627F\uFF09", "Thorough Planning (inherited)"], "906301211": ["\u9244\u706B\u82B1\uFF08\u7D99\u627F\uFF09", "Red-Hot Spark (inherited)"], "90631": ["\u6253\u3061\u3001\u935B\u3048\u3066\uFF08\u7D99\u627F\uFF09", "Strike and Strengthen (inherited)"], "906401111": ["\u30D1\u306A\u3044\u3063\u3057\u3087\uFF1F\uFF08\u7D99\u627F\uFF09", "Dope Stuff! (inherited)"], "906401211": ["\u795E\u9003\u3052\u306E\u5FC3\u5F97\uFF08\u7D99\u627F\uFF09", "Godly Runner's Wisdom (inherited)"], "906401221": ["\u30C6\u30F3\u30A2\u30B2\u30B9\u30BF\u30A4\u30EB\uFF08\u7D99\u627F\uFF09", "Pump It Up (inherited)"], "906402111": ["\u5317\u98A8\u4E00\u8E74\uFF08\u7D99\u627F\uFF09", "North Wind Kick (inherited)"], "906402211": ["\u30E1\u30EA\u2606\u30AF\u30EA\u2191\u30D1\u30FC\u30EA\u30FC\uFF08\u7D99\u627F\uFF09", "Merry\u2606Christmas\u2191Party (inherited)"], "906501111": ["\u30DE\u30B8\u7206\u4E0A\u3052\u3063\u3057\u3087\uFF01\uFF08\u7D99\u627F\uFF09", "Hella Vibes Up! (inherited)"], "906501211": ["\u3068\u308A\u307E\u3084\u3063\u305F\u308C\uFF5E\uFF01\uFF08\u7D99\u627F\uFF09", "Just Do It! (inherited)"], "906502111": ["\u30C8\u30EC\u30F3\u30C9\u5148\u53D6\u308A\u2606\uFF08\u7D99\u627F\uFF09", "Ahead of the Trend\u2606 (inherited)"], "906502211": ["\u30DE\u30A4\u30EB\u795E\u3001\u7206\u2606\u8A95\uFF08\u7D99\u627F\uFF09", "Emergence of the Mile\u2606God (inherited)"], "906601111": ["\u51FA\u529B1000\u4E07%\uFF01\uFF01\uFF08\u7D99\u627F\uFF09", "Ten Million Percent Output!! (inherited)"], "906601211": ["\u30BF\u30FC\u30DC\u306B\u3064\u3044\u3066\u3053\u30FC\u3044\uFF01\uFF08\u7D99\u627F\uFF09", "Keep Up with Turbo! (inherited)"], "90661": ["\u30A8\u30F3\u30B8\u30F3\u70B9\u706B\uFF01\uFF08\u7D99\u627F\uFF09", "Engine Ignition! (inherited)"], "906701111": ["\u91D1\u525B\u4E0D\u58CA\uFF08\u7D99\u627F\uFF09", "Adamantine (inherited)"], "906701121": ["\u96A0\u305B\u306C\u8F1D\u304D\uFF08\u7D99\u627F\uFF09", "Unconcealed Brilliance (inherited)"], "906701211": ["\u53F3\u56DE\u308A\u306E\u8F2A\u821E\u66F2\uFF08\u7D99\u627F\uFF09", "Clockwise Rondo (inherited)"], "906702111": ["\u7121\u6211\u306E\u5883\u5730\uFF08\u7D99\u627F\uFF09", "Realm of No-Self (inherited)"], "906702211": ["\u660E\u3051\u306C\u591C\u306F\u306A\u3044\uFF01\uFF08\u7D99\u627F\uFF09", "Dawn Always Comes! (inherited)"], "906703111": ["\u84BC\u8272\u9769\u547D\uFF08\u7D99\u627F\uFF09", "Azure Revolution (inherited)"], "906703211": ["\u30C0\u30F3\u30B9\u30FB\u30C7\u30FB\u30EC\u307A\uFF08\u7D99\u627F\uFF09", "Danse de L'Ep\xE9e (inherited)"], "906801111": ["\u796D\u308A\u3060\u30EF\u30C3\u30B7\u30E7\u30A4\uFF01\uFF08\u7D99\u627F\uFF09", "Festival Shout! (inherited)"], "906801211": ["\u7206\u98A8\u4E00\u9583\uFF01\uFF08\u7D99\u627F\uFF09", "Blast Flash (inherited)"], "906802111": ["\u672A\u6765\u3078\u98DB\u3073\u7ACB\u3061\u307E\u3057\u3087\u3046\uFF01\uFF08\u7D99\u627F\uFF09", "Leap Towards The Future! (inherited)"], "906802211": ["\u5FC5\u52DD\u306E\u524D\u53E3\u4E0A\uFF01\uFF08\u7D99\u627F\uFF09", "Preamble of Victory! (inherited)"], "906803111": ["\u3042\u3063\u3071\u308C\uFF01\u81E5\u7ADC\u52C7\u5F80\uFF08\u7D99\u627F\uFF09", "Unleash the Dragon (inherited)"], "906803211": ["\u4E07\u91CC\u98DB\u3073\u8D8A\u3048\u30BD\u30A4\u30E4\u30C3\uFF01\uFF08\u7D99\u627F\uFF09", "Thousand Mile Cheer! (inherited)"], "906901111": ["\u304A\u82B1\u898B\u5F53\u305F\u308A\u5E74\uFF01\uFF08\u7D99\u627F\uFF09", "Pretty Blossoms, Pretty Year! (inherited)"], "906901121": ["\u6848\u305A\u308B\u3088\u308A\u8D70\u308B\u304C\u901F\u3057\uFF08\u7D99\u627F\uFF09", "Rather Run than Worry! (inherited)"], "906901211": ["\u3051\u3075\u4E5D\u91CD\u306B\u6E80\u958B\u3067\u3059\uFF08\u7D99\u627F\uFF09", "In Ninefold Bloom (inherited)"], "906902111": ["\u685C\u82B1\u721B\u6F2B\u4E00\u76F4\u7DDA\uFF08\u7D99\u627F\uFF09", "Trail of Blooming Sakura (inherited)"], "906902211": ["\u8CA0\u3051\u305F\u304F\u306A\u3044\uFF01\uFF08\u7D99\u627F\uFF09", "I Don't Want to Lose! (inherited)"], "907001111": ["\u63FA\u308B\u304C\u306C\u30A2\u30B9\u30BF\u30FC\uFF08\u7D99\u627F\uFF09", "Unwavering Aster (inherited)"], "907001211": ["\u4E00\u7B49\u661F\u306E\u30A2\u30E9\u30D9\u30B9\u30AF\uFF08\u7D99\u627F\uFF09", "Brightest Star's Arabesque (inherited)"], "907001221": ["\u8FFD\u60F3\u306E\u30C8\u30ED\u30A4\u30E1\u30E9\u30A4\uFF08\u7D99\u627F\uFF09", "Reminiscent Tr\xE4umerei (inherited)"], "907101111": ["\u6C38\u9060\u306E\u8F1D\u304D\uFF08\u7D99\u627F\uFF09", "Eternal Brilliance (inherited)"], "907101211": ["\u5239\u90A3\u3078\u306E\u899A\u609F\uFF08\u7D99\u627F\uFF09", "Moment's Readiness (inherited)"], "907102111": ["\u7F8E\u3057\u304D\u71D0\u5149\uFF08\u7D99\u627F\uFF09", "Beautiful Phosphorescence (inherited)"], "907102121": ["\u5E7D\u7384\u306E\u706F\u706B\uFF08\u7D99\u627F\uFF09", "Mystic Flame (inherited)"], "907102211": ["\u6DE1\u304F\u511A\u3044\u6B8B\u7167\uFF08\u7D99\u627F\uFF09", "Ephemeral Afterglow (inherited)"], "907201111": ["\u6602\u308B\u7114\uFF08\u7D99\u627F\uFF09", "Stirring Flame (inherited)"], "907201211": ["\u516B\u91CD\u306E\u5411\u3053\u3046\u610F\u6C17\uFF08\u7D99\u627F\uFF09", "Layered Determination (inherited)"], "907201221": ["\u52DD\u5229\u306B\u7126\u304C\u308C\u308B\u6FC0\u60C5\uFF08\u7D99\u627F\uFF09", "Ardent Desire for Victory (inherited)"], "907202111": ["\u5C06\u306E\u75BE\u5203\uFF08\u7D99\u627F\uFF09", "General's Swift Strike (inherited)"], "907202211": ["\u7121\u53CC\u306E\u8FFD\u6483\uFF08\u7D99\u627F\uFF09", "Peerless Pursuit (inherited)"], "907301111": ["\u5343\u8F9B\u4E07\u82E6\u5207\u308A\u88C2\u304F\u5203\uFF08\u7D99\u627F\uFF09", "Slash of a Thousand Trials (inherited)"], "907301211": ["\u8FF8\u308B\u6708\u6D41\u661F\uFF08\u7D99\u627F\uFF09", "Surging Crescent Moon (inherited)"], "90731": ["\u5FC3\u3001\u5F37\u3057\uFF01\uFF08\u7D99\u627F\uFF09", "Steel Your Heart, Tsuyoshi! (inherited)"], "907401111": ["\u4E0D\u5C48\u306E\u304A\u5B22\u69D8\uFF08\u7D99\u627F\uFF09", "Indomitable Dame (inherited)"], "907401211": ["\u52D5\u304B\u3056\u308B\u3053\u3068\u7F8A\u8E44\u5C71\u306E\u82E5\u3057\uFF08\u7D99\u627F\uFF09", "Immovable as Mt. Youtei (inherited)"], "907402111": ["\u8056\u591C\u306E\u5929\u8DEF\uFF08\u7D99\u627F\uFF09", "Heavenly Road of the Holy Night (inherited)"], "907402211": ["\u96EA\u83EF\u306E\u8FFD\u3044\u4E0A\u3052\uFF08\u7D99\u627F\uFF09", "Snowflake Pursuit (inherited)"], "907601111": ["\u685C\u524D\u7DDA\u9032\u884C\u4E2D\uFF01\uFF08\u7D99\u627F\uFF09", "Advancing Sakura Front! (inherited)"], "907601211": ["\u4E00\u82B1\u54B2\u304B\u305B\u307E\u3057\u3087\u3046\uFF01\uFF08\u7D99\u627F\uFF09", "Let's Bloom in the Moment! (inherited)"], "907701111": ["\u30BF\u30FC\u30D5\u306E\u4E3B\u4EBA\u516C\uFF08\u7D99\u627F\uFF09", "Turf Protagonist (inherited)"], "907701211": ["\u6B63\u9053\uFF08\u7D99\u627F\uFF09", "The Right Path (inherited)"], "907702111": ["\u3072\u305F\u3080\u304D\u30B5\u30F3\u30BF\u30AF\u30ED\u30FC\u30B9\uFF08\u7D99\u627F\uFF09", "Single-Minded Santa Claus (inherited)"], "907702211": ["\u6697\u3044\u591C\u9053\u3082\u304A\u4EFB\u305B\u3092\uFF01\uFF08\u7D99\u627F\uFF09", "Leave the Dark Nights to Me! (inherited)"], "907801111": ["\u30A6\u30A4\u30F3\u30C9\u30B7\u30A2\u30FC\uFF08\u7D99\u627F\uFF09", "Wind Shear (inherited)"], "907801211": ["\u795E\u6E21\u3057\uFF08\u7D99\u627F\uFF09", "Divine Crossing (inherited)"], "907801221": ["\u5929\u3064\u98A8\uFF08\u7D99\u627F\uFF09", "Heavenly Wind (inherited)"], "907802111": ["\u5875\u65CB\u98A8\u3068\u306A\u308A\u3066\uFF08\u7D99\u627F\uFF09", "Dust Devil Manifest (inherited)"], "907802211": ["\u30B7\u30EB\u30D5\u30FB\u30B9\u30D4\u30EA\u30C3\u30C8\uFF08\u7D99\u627F\uFF09", "Sylph Spirit (inherited)"], "907901111": ["\u6F6E\u98A8\u306E\u5C0E\u304D\uFF08\u7D99\u627F\uFF09", "Guidance of the Sea Breeze (inherited)"], "907901211": ["\u52C7\u8239\u76F4\u5F80\uFF08\u7D99\u627F\uFF09", "Brave Advance (inherited)"], "908001111": ["\u60C5\u5831\u5F37\u8005\uFF08\u7D99\u627F\uFF09", "Information Broker (inherited)"], "908001211": ["\u300E\u672A\u77E5\u300F\u3092\u6C42\u3081\u3066\uFF08\u7D99\u627F\uFF09", "Seeking the Unknown (inherited)"], "908201111": ["\u30B3\u30B3\u30ED\u3001\u30AD\u30E9\u3081\u304F\u307E\u307E\u306B\uFF01\uFF08\u7D99\u627F\uFF09", "With A Sparkling Heart! (inherited)"], "908201211": ["Enjoy the Flight\uFF08\u7D99\u627F\uFF09", "Enjoy the Flight (inherited)"], "908301111": ["\u8CEA\u5B9F\u525B\u5065\uFF08\u7D99\u627F\uFF09", "Ironclad (inherited)"], "908301211": ["\u9769\u547D\u3092\u3082\u305F\u3089\u3059\u5A01\u5BB9\uFF08\u7D99\u627F\uFF09", "Revolutionary Presence (inherited)"], "908302111": ["Burn Down\uFF08\u7D99\u627F\uFF09", "Burn Down (inherited)"], "908302211": ["Service: Transit\uFF08\u7D99\u627F\uFF09", "Service: Transit (inherited)"], "908401111": ["\u5D50\u3092\u547C\u3076\u7834\u58CA\u795E\uFF08\u7D99\u627F\uFF09", "Storm-Calling God of Destruction (inherited)"], "908401211": ["\u9154\u3044\u75F4\u308C\u3088\u3001\u4E16\u754C\uFF08\u7D99\u627F\uFF09", "Imbibe in Ecstasy, World! (inherited)"], "908501111": ["\u83EF\u9E97\u3067\u3042\u308C\uFF08\u7D99\u627F\uFF09", "Be Majestic (inherited)"], "908501211": ["\u5E38\u306B\u6700\u305F\u308B\u8F1D\u304D\u3092\uFF08\u7D99\u627F\uFF09", "Pursuing Greater Brilliance (inherited)"], "908502111": ["\u9739\u9742\u9583\u96FB\uFF08\u7D99\u627F\uFF09", "Thunderclap (inherited)"], "908502211": ["\u7070\u3068\u5316\u3059\u307E\u3067\uFF08\u7D99\u627F\uFF09", "Until Only Ashes Remain (inherited)"], "908601111": ["\u7D14\u611B\uFF08\u7D99\u627F\uFF09", "Pure Love (inherited)"], "908601211": ["\u9AD8\u5DBA\u306E\u8276\u7B11\uFF08\u7D99\u627F\uFF09", "Enchanting Smile Beyond Reach (inherited)"], "908701111": ["\u5FC5\u52DD\u306E\u30D4\u30C3\u30C1\u30A2\u30C3\u30D7\uFF08\u7D99\u627F\uFF09", "Victory Pitch-Up (inherited)"], "908701211": ["\u8A18\u61B6\u306B\u523B\u3080\u8DB3\u53D6\u308A\uFF08\u7D99\u627F\uFF09", "Unforgettable Step (inherited)"], "908702111": ["\u8FBB\u6620\u308A\u306E\u5999\u6280\uFF08\u7D99\u627F\uFF09", "The Art of Photobombing (inherited)"], "908702211": ["\u899A\u3048\u3066\u3044\u3066\u304F\u3060\u3055\u3044\u306D\uFF1F\uFF08\u7D99\u627F\uFF09", "Please Remember Me, Okay? (inherited)"], "908801111": ["\u30A2\u30F3\u30D3\u30B7\u30E3\u30B9\u30AB\u30FC\u30C9\uFF08\u7D99\u627F\uFF09", "Ambitious Card (inherited)"], "908801211": ["\u30DF\u30EA\u30AA\u30F3\u30AB\u30FC\u30C9\uFF08\u7D99\u627F\uFF09", "Million Card (inherited)"], "908901111": ["\u5049\u5927\u306A\u308B\u8E0F\u7834\uFF08\u7D99\u627F\uFF09", "Grand Expedition (inherited)"], "908901211": ["\u5168\u529B\u6295\u7403\uFF08\u7D99\u627F\uFF09", "Full-Power Pitch (inherited)"], "909101111": ["\u5929\u6765\u306E\u30EA\u30C8\u30EB\u30B7\u30B9\u30BF\u30FC\uFF08\u7D99\u627F\uFF09", "Heavenly Little Sister (inherited)"], "909101211": ["\u30CF\u30A4\u30BD\u30FB\u30E1\u30F3\u30BF\u30EA\u30C6\u30A3\uFF01\uFF08\u7D99\u627F\uFF09", "High Society Mentality! (inherited)"], "909301111": ["K.Speed\uFF08\u7D99\u627F\uFF09", "K.Speed (inherited)"], "909301211": ["\u547D\u306E\u706B\u82B1\uFF08\u7D99\u627F\uFF09", "Spark of Life (inherited)"], "909401111": ["\u731B\u8972\u306E\u7259\uFF08\u7D99\u627F\uFF09", "Fangs of Ferocity (inherited)"], "909401211": ["\u95D8\u53EB\u306E\u9B3C\uFF08\u7D99\u627F\uFF09", "Demon of Tokyo (inherited)"], "909401221": ["\u5929\u4E0A\u5929\u4E0B\u552F\u6211\u7206\u8D70\uFF08\u7D99\u627F\uFF09", "Unparalleled Bomber Runner (inherited)"], "909801111": ["\u30B3\u30D1\u30C3\u3068\u958B\u904B\uFF01\uFF08\u7D99\u627F\uFF09", "Copano-style Rising Fortunes! (inherited)"], "909801211": ["\u9F8D\u8108\u306E\u6CE2\u6FE4\uFF08\u7D99\u627F\uFF09", "Surging Ley Lines (inherited)"], "909901111": ["\u82EB\u5C0F\u7267\u30B0\u30EB\u30E1\u3067\u820C\u9F13\uFF01\uFF08\u7D99\u627F\uFF09", "Feast of Tomakomai (inherited)"], "909901211": ["\u89B3\u5149\u5927\u4F7F\u306E\u9762\u76EE\u8E8D\u5982\uFF01\uFF08\u7D99\u627F\uFF09", "Tourism Ambassador's Prestige (inherited)"], "909902111": ["\u611F\u8B1D\u306E\u3075\u308B\u3055\u3068\u30E1\u30C9\u30EC\u30FC\uFF08\u7D99\u627F\uFF09", "Hometown Medley (inherited)"], "909902211": ["\u7A81\u304D\u9032\u3081\u5317\u306E\u6D77\uFF08\u7D99\u627F\uFF09", "Plunge into the Northern Sea (inherited)"], "9100011": ["\u8D85\u904A\u3073\u7656\uFF08\u7D99\u627F\uFF09", "Dilly-Dally (inherited)"], "910001111": ["\u95D8\u9B42\u6CE8\u5165\uFF08\u7D99\u627F\uFF09", "Refueled Fighting Spirit (inherited)"], "910001121": ["\u3044\u3076\u3057\u9280\u306E\u95D8\u5FD7\uFF08\u7D99\u627F\uFF09", "Veiled Grit (inherited)"], "910001211": ["\u5973\u795E\u306E\u7802\u6D74\u3073\uFF08\u7D99\u627F\uFF09", "Goddess' Dust Bath (inherited)"], "910011": ["\u308F\u3084\u304B\u308F\u266A\u30DE\u30EA\u30F3\u30C0\u30A4\u30F4\uFF08\u7D99\u627F\uFF09", "Wayakawa \u266A Marine Dive (inherited)"], "910021": ["\u6C34\u5E73\u7DDA\u306E\u305D\u306E\u5148\u3078\uFF08\u7D99\u627F\uFF09", "Beyond the Ocean's Infinity (inherited)"], "910031": ["\u7D76\u5BFE\u306F\u3001\u30DC\u30AF\u3060\uFF08\u7D99\u627F\uFF09", "It's Going to Be Me (inherited)"], "910041": ["\u30B0\u30C3\u3068\u304D\u3066\u266AChu\uFF08\u7D99\u627F\uFF09", "Heartfelt \u266A Smooch (inherited)"], "910051": ["Ravissant\uFF08\u7D99\u627F\uFF09", "Ravissante (inherited)"], "910061": ["\u8056\u591C\u306E\u30DF\u30E9\u30AF\u30EB\u30E9\u30F3\uFF01\uFF08\u7D99\u627F\uFF09", "Christmas Eve Miracle Run! (inherited)"], "910071": ["Adventure of 564\uFF08\u7D99\u627F\uFF09", "Adventure of 564 (inherited)"], "910081": ["Into High Gear!\uFF08\u7D99\u627F\uFF09", "Into High Gear! (inherited)"], "910091": ["Queen's Lumination\uFF08\u7D99\u627F\uFF09", "Queen's Lumination (inherited)"], "910101": ["Joyful Voyage!\uFF08\u7D99\u627F\uFF09", "Joyful Voyage! (inherited)"], "910111": ["\u30B2\u30A4\u30F3\u30D2\u30FC\u30EB\u30FB\u30B9\u30DA\u30EA\u30A2\u30FC\uFF08\u7D99\u627F\uFF09", "Gain Superior Heal (inherited)"], "910121": ["\u5927\u76DB\u308A\uFF01\u30D5\u30A1\u30FC\u30B9\u30C8\u30D0\u30A4\u30C8\uFF01\uFF08\u7D99\u627F\uFF09", "Extra Large First Bite! (inherited)"], "910131": ["\u6700\u5F37\u306E\u540D\u3092\u61F8\u3051\u3066\uFF08\u7D99\u627F\uFF09", "For the Strongest Name (inherited)"], "910141": ["\u30B3\u30F3\u30C9\u30EB\u731B\u6483\u6CE2\uFF08\u7D99\u627F\uFF09", "Condor Onslaught (inherited)"], "910151": ["\u6075\u798F\u30D0\u30EB\u30AB\u30ED\u30FC\u30EC\uFF08\u7D99\u627F\uFF09", "Blessed Barcarolle (inherited)"], "910161": ["\u7070\u8272\u306E\u81E8\u754C\u70B9\uFF08\u7D99\u627F\uFF09", "Critical Point: Gray (inherited)"], "910171": ["\u7FF3\u308A\u9000\u304F\u3001\u3055\u3056\u3081\u304D\u306E\u77E2\uFF08\u7D99\u627F\uFF09", "Howling Arrow Piercing the Darkness (inherited)"], "910181": ["\u85AB\u98A8\u3001\u6C38\u9060\u306A\u308B\u77AC\u9593\u3092\uFF08\u7D99\u627F\uFF09", "Summer Breeze, the Eternal Moment (inherited)"], "910191": ["\u840C\u5230\u8B93\u6211\u6D3B\u904E\u4F86\u4E86\uFF01\uFF08\u7D99\u627F\uFF09", "Revived by Moe! (inherited)"], "910201": ["Do Ya Breakin!\uFF08\u7D99\u627F\uFF09", "Do Ya Breakin! (inherited)"], "910201111": ["\u30AB\u30A8\u30B9\u30FC\u30E9\uFF08\u7D99\u627F\uFF09", "Caesura (inherited)"], "910201211": ["\u30C8\u30E9\u30A4\u30A2\u30F3\u30D5\uFF08\u7D99\u627F\uFF09", "Trionfo (inherited)"], "910211": ["\u706B\u795E\u9CF4\uFF08\u7D99\u627F\uFF09", "Thunderous Firestarter (inherited)"], "910221": ["Best day ever\uFF08\u7D99\u627F\uFF09", "Best Day Ever (inherited)"], "910231": ["Presents from X\uFF08\u7D99\u627F\uFF09", "Presents from X (inherited)"], "910241": ["\u30D5\u30E9\u30EF\u30EA\u30FC\u2606\u30DE\u30CB\u30E5\u30FC\u30D0\uFF08\u7D99\u627F\uFF09", "Flowery \u2606 Maneuver (inherited)"], "910251": ["\u5FC3\u304B\u3089\u306E\u304A\u3082\u3066\u306B\u3083\u3057\uFF08\u7D99\u627F\uFF09", "Purrfect Hospitality (inherited)"], "910261": ["\u30AA\u30DA\u30EC\u30FC\u30B7\u30E7\u30F3\u30FBCacao\uFF08\u7D99\u627F\uFF09", "Operation Cacao (inherited)"], "910271": ["\u3042\u306A\u305F\u306B\u6367\u3052\u308B\u30D5\u30EA\u30FC\u30DD\u30A2\uFF08\u7D99\u627F\uFF09", "Latte Art For You (inherited)"], "910291": ["\u3044\u3063\u3071\u3044\u304A\u3042\u3052\u3093\u3057\u3047\uFF01\uFF08\u7D99\u627F\uFF09", "Have Your Fill! (inherited)"], "910301": ["Drain for rose\uFF08\u7D99\u627F\uFF09", "Drain for Rose (inherited)"], "910311": ["\u30D5\u30EC\u30C3\u30B7\u30E5\u2606\u30D1\u30FC\u30E9\u30FC\uFF08\u7D99\u627F\uFF09", "Fresh \u2606 Parlor (inherited)"], "910321": ["\u590F\u7A7A\u30CF\u30EC\u30FC\u30B7\u30E7\u30F3\uFF08\u7D99\u627F\uFF09", "Summer Halation (inherited)"], "910331": ["Crystal Mist\uFF08\u7D99\u627F\uFF09", "Crystal Mist (inherited)"], "910341": ["\u706F\u7A42\uFF08\u7D99\u627F\uFF09", "Bristling Lights (inherited)"], "910351": ["\u5922\u306E\u5148\u3078\u3001\u5C4A\u3051\uFF01\uFF08\u7D99\u627F\uFF09", "Delivering Beyond the Dreams! (inherited)"], "910361": ["...found you.\uFF08\u7D99\u627F\uFF09", "...found you. (inherited)"], "910371": ["Guten Appetit\u266A\uFF08\u7D99\u627F\uFF09", "Guten Appetit\u266A (inherited)"], "910381": ["One True Color\uFF08\u7D99\u627F\uFF09", "One True Color (inherited)"], "910391": ["\u5FEB\u306A\u308B\u525B\u529B\uFF08\u7D99\u627F\uFF09", "Invigorating Strength (inherited)"], "910401": ["GET DOWN\uFF08\u7D99\u627F\uFF09", "GET DOWN (inherited)"], "910401111": ["\u3057\u3066\u3084\u3063\u305F\u308A\uFF01\uFF08\u7D99\u627F\uFF09", "Beat You to It! (inherited)"], "910401211": ["\u9003\u3052\u3063\u5207\u308A\u306E1\u4EBA\u65C5\uFF08\u7D99\u627F\uFF09", "Solitary Getaway (inherited)"], "910402111": ["\u4F0F\u7ADC\u306F\u76EE\u899A\u3081\u3066\uFF08\u7D99\u627F\uFF09", "Dormant Dragon's Rise (inherited)"], "910402211": ["\u6681\u5149\u80CC\u8CA0\u3044\u3066\uFF08\u7D99\u627F\uFF09", "Dawnborne (inherited)"], "910411": ["CHERRY\u2606\u30B9\u30AF\u30E9\u30F3\u30D6\u30EB\uFF08\u7D99\u627F\uFF09", "Cherry\u2606Scramble (inherited)"], "910421": ["Oh!bento-magic\u2606\uFF08\u7D99\u627F\uFF09", "Oh!bento-magic\u2606 (inherited)"], "910441": ["\u3068\u3063\u3066\u304A\u304Dmaterialize\uFF08\u7D99\u627F\uFF09", "Special Materialization (inherited)"], "910451": ["\u3050\u308B\u3050\u308B\u30DE\u30DF\u30FC\u30C8\u30EA\u30C3\u30AF\u2661\uFF08\u7D99\u627F\uFF09", "Round and Round, Mummy Trick\u2661 (inherited)"], "910461": ["\u03B1-star*\uFF08\u7D99\u627F\uFF09", "\u03B1-star* (inherited)"], "910471": ["\u672A\u77E5\u3068\u306E\u906D\u9047\u3001\u5373\u3061\u7269\u8A9E\uFF08\u7D99\u627F\uFF09", "Close Encounters of the Literary Kind (inherited)"], "910481": ["GALmem.\u3075\u3049\u30FC\u3048\u3070\u266A\uFF08\u7D99\u627F\uFF09", "GALmem. forever\u266A (inherited)"], "910501": ["Hephaistos\uFF08\u7D99\u627F\uFF09", "Hephaistos (inherited)"], "910501111": ["\u9280\u6CB3\u306E\u305D\u306E\u5148\u3078\u3001\u3042\u306A\u305F\u3068\uFF08\u7D99\u627F\uFF09", "Beyond the Milky Way With You (inherited)"], "910501211": ["\u661F\u306E\u6D77\u3092\u99C6\u3051\u3066\uFF08\u7D99\u627F\uFF09", "Crossing the Sea of Stars (inherited)"], "910502111": ["\u30EB\u30DF\u30CA\u30B9\u30FB\u30B9\u30DA\u30AF\u30C8\u30E9\u30E0\uFF08\u7D99\u627F\uFF09", "Luminous Spectrum (inherited)"], "910502211": ["\u201CMETI\u201D\u30EC\u30BE\u30CA\u30F3\u30B9\uFF08\u7D99\u627F\uFF09", "METI Resonance (inherited)"], "910511": ["Flowering Dreams\uFF08\u7D99\u627F\uFF09", "Flowering Dreams (inherited)"], "910521": ["113\u8EE2\u3073114\u8D77\u304D\uFF08\u7D99\u627F\uFF09", "Fall Down 113 Times, Get Up 114 (inherited)"], "910531": ["\u5965\u7FA9\u30FB\u5E38\u590F\u30D0\u30FC\u30CB\u30F3\u30B0\uFF01\uFF01\uFF08\u7D99\u627F\uFF09", "Secret Technique: Everlasting Summer!! (inherited)"], "910561": ["\u79BE\u30B9\u30CA\u30CF\u30C1\u767B\u30EB\uFF08\u7D99\u627F\uFF09", "Grains Become Ripe (inherited)"], "910571": ["\u721B\u7136\u95CA\u6B69\uFF08\u7D99\u627F\uFF09", "Radiant Stride (inherited)"], "910581": ["Spooky-Scary-Happy\uFF08\u7D99\u627F\uFF09", "Spooky-Scary-Happy (inherited)"], "910591": ["\u3068\u304D\u3081\u304D\u304C\u547C\u3076\u307B\u3046\u3078\uFF08\u7D99\u627F\uFF09", "To Where the Heart Beckons (inherited)"], "910601": ["Go\u2606Go\u2606for it!\uFF08\u7D99\u627F\uFF09", "Go\u2606Go\u2606For It! (inherited)"], "910601111": ["\u7126\u3089\u305A\u3001\u6C17\u8CA0\u308F\u305A\uFF08\u7D99\u627F\uFF09", "Keep Calm, Don't Overthink (inherited)"], "910601121": ["\u3067\u304D\u308B\u7BC4\u56F2\u3067\u304C\u3093\u3070\u308D\uFF5E\uFF01\uFF08\u7D99\u627F\uFF09", "I'll Do What I Can~! (inherited)"], "910601211": ["\u3061\u3087\u3063\u3068\u3044\u3044\u3053\u3068\u3001\u96C6\u3081\u3066\uFF08\u7D99\u627F\uFF09", "Collecting Little Joys (inherited)"], "910611": ["\u8F5F\uFF01\u30C8\u30EC\u30BB\u30F3\u5FDC\u63F4\u56E3\uFF01\uFF01\uFF08\u7D99\u627F\uFF09", "Roaring Tracen Cheerleading Squad (inherited)"], "910621": ["\u3054\u308D\u308A\u3093\uFF01\uFF1F\u30D1\u30EF\u30FC\u30C9\u30E9\u30A4\u30D6\uFF08\u7D99\u627F\uFF09", "Rolling Power Drive! (inherited)"], "910641": ["jingle all the way\uFF08\u7D99\u627F\uFF09", "Jingle All the Way (inherited)"], "910651": ["\u30CE\u30C3\u3066\u3051\u3001\u30DE\u30C3\u30B7\u30E5\u30A2\u30C3\u30D7\uFF01\uFF08\u7D99\u627F\uFF09", "It's Mashup Time! (inherited)"], "910671": ["\u7384\u96F2\u6563\u3089\u3059\u3001\u9EC4\u91D1\u7532\u77E2\uFF08\u7D99\u627F\uFF09", "Arrow of Gold, Break up the Dark Clouds (inherited)"], "910681": ["\u3042\u3063\u3071\u308C\u5927\u76E4\u632F\u308B\u821E\u3044\uFF01\uFF08\u7D99\u627F\uFF09", "Lavish Feast (inherited)"], "910691": ["\u54B2\u3051\u54B2\u3051\uFF01\u79C1\uFF01\uFF08\u7D99\u627F\uFF09", "Bloom! Blossom! Sakura! (inherited)"], "910701111": ["Breakaway Star\uFF08\u7D99\u627F\uFF09", "Breakaway Star (inherited)"], "910701211": ["Smooth Sailing!\uFF08\u7D99\u627F\uFF09", "Smooth Sailing! (inherited)"], "910711": ["Danser le pr\xE9sent\uFF08\u7D99\u627F\uFF09", "Danser le Pr\xE9sent (inherited)"], "910721": ["\u525B\u52C7\u679C\u65AD\u3001\u70C8\u706B\u4E4B\u5200\uFF08\u7D99\u627F\uFF09", "Decisive Blade of Blazing Fire (inherited)"], "910741": ["Illuminate you\uFF08\u7D99\u627F\uFF09", "Illuminate You (inherited)"], "910771": ["Joy to the World\uFF08\u7D99\u627F\uFF09", "Joy to the World (inherited)"], "910781": ["Breezy Treat\uFF08\u7D99\u627F\uFF09", "Breezy Treat (inherited)"], "910801111": ["\u78E8\u7A7F\u9244\u786F\uFF08\u7D99\u627F\uFF09", "Constant Refinement (inherited)"], "910801211": ["\u8D6B\u7109\uFF08\u7D99\u627F\uFF09", "Blazing Brilliance (inherited)"], "910831": ["Immortal Work\uFF08\u7D99\u627F\uFF09", "Immortal Work (inherited)"], "910851": ["\u84BC\u708E\uFF08\u7D99\u627F\uFF09", "Sapphire Flame (inherited)"], "910871": ["\u3075\u308F\u3082\u3053\u30A2\u30EF\u30FC\uFF08\u7D99\u627F\uFF09", "Fluffy Fuzzy Hour (inherited)"], "910901111": ["\u672A\u6765\u3092\u62D3\u3051\uFF01\uFF08\u7D99\u627F\uFF09", "Pioneering the Future! (inherited)"], "910901211": ["\u305C\u30FC\u3063\u305F\u3044\u8CA0\u3051\u3089\u308C\u306A\u3044\uFF01\uFF08\u7D99\u627F\uFF09", "There's No Way I'll Lose! (inherited)"], "910991": ["\u3068\u3073\u3060\u305B\u2606\u30DD\u30C3\u30D4\u30F3\u30B0\u30B7\u30A7\u30EB\uFF08\u7D99\u627F\uFF09", "Popping\u2606Clams (inherited)"], "911001111": ["\u790E\u305F\u308C\uFF08\u7D99\u627F\uFF09", "Become the Foundation (inherited)"], "911001211": ["\u9E97\u3057\u304D\u8EE2\u8EAB\uFF08\u7D99\u627F\uFF09", "Beautiful Transformation (inherited)"], "911041": ["\u6C7A\u610F\u4E00\u7B46\uFF08\u7D99\u627F\uFF09", "Determined Stroke (inherited)"], "911051": ["Encounter with U\uFF08\u7D99\u627F\uFF09", "Encounter With U (inherited)"], "911101111": ["\u6BCD\u306E\u9762\u5F71\u3092\u8FFD\u3063\u3066\uFF08\u7D99\u627F\uFF09", "Chasing Mother's Likeness (inherited)"], "911101211": ["\u5805\u5B9F\u306A\u308B\u79D8\u7B56\uFF08\u7D99\u627F\uFF09", "Steady Stratagem (inherited)"], "911501111": ["\u6211\u304C\u610F\u3001\u5373\u3061\u5929\u306E\u7406\u306A\u308A\uFF08\u7D99\u627F\uFF09", "My Will is Divine (inherited)"], "911501211": ["\u738B\u5A01\u7D62\u721B\uFF08\u7D99\u627F\uFF09", "Sovereign's Dominion (inherited)"], "911501221": ["\u2015\u2015\u754F\u308C\u3088\u3001\u7136\u3057\u3066\u62DD\u8DEA\u305B\u3088\uFF08\u7D99\u627F\uFF09", "You Shall Kneel in Reverence (inherited)"], "911601111": ["\u2015\u2015\u304A\u9000\u304D\u306A\u3055\u3044\uFF08\u7D99\u627F\uFF09", "Step Aside (inherited)"], "911601211": ["Power Am I\uFF08\u7D99\u627F\uFF09", "Power Am I (inherited)"], "911601221": ["\u6DD1\u5973\u306E\u72EC\u64C5\u5834\uFF08\u7D99\u627F\uFF09", "A Lady's Domain (inherited)"], "911701111": ["\u30B0\u30E9\u30F3\u30FB\u30B8\u30E5\u30C3\u30C6\uFF08\u7D99\u627F\uFF09", "Grand Jet\xE9 (inherited)"], "911701211": ["\u9081\u9032\u30A2\u30F3\u30FB\u30EC\u30FC\u30EB\uFF08\u7D99\u627F\uFF09", "En l'Air (inherited)"], "911901111": ["\u679C\u3066\u3078\u306E\u9762\u8235\uFF08\u7D99\u627F\uFF09", "Starboard Till the End (inherited)"], "911901211": ["\u5922\u898B\u5FC3\u5730\uFF08\u7D99\u627F\uFF09", "Trance (inherited)"], "912001111": ["\u9583\u5149\u4E00\u8D70\uFF01\uFF08\u7D99\u627F\uFF09", "Flash Dash! (inherited)"], "912001211": ["\u7A81\u98A8\u4E00\u99C6\uFF01\uFF08\u7D99\u627F\uFF09", "Gale Rush! (inherited)"], "912101111": ["\u5FE0\u5FC3\u306E\u30F4\u30A7\u30A4\u30E4\u30F3\u30C6\u30A3\u30D5\uFF08\u7D99\u627F\uFF09", "Faithful Veillantif (inherited)"], "912101211": ["\u30AA\u30EA\u30D5\u30A1\u30F3\u30C8\u306E\u8F5F\u96F7\uFF08\u7D99\u627F\uFF09", "Olifant's Roar (inherited)"], "912401111": ["\u4FCA\u5091\u306E\u60A0\uFF08\u7D99\u627F\uFF09", "Champion's Composure (inherited)"], "912401211": ["\u5686\u77E2\u306E\u82B1\u9053\uFF08\u7D99\u627F\uFF09", "Vanguard's Limelight (inherited)"], "913101111": ["\u63A8\u3057\u3066\u307E\u3044\u308B\uFF01\uFF01\uFF08\u7D99\u627F\uFF09", " (inherited)"], "913101211": ["\u4E07\u54E9\u3078\u97FF\u3051\u5927\u6B53\u58F0\uFF08\u7D99\u627F\uFF09", " (inherited)"], "9200011": ["\u4E2D\u8DDD\u96E2\u30EC\u30FC\u30B9\u3078\u306E\u60F3\u3044\uFF08\u7D99\u627F\uFF09", "Medium-Distance Racing Passion (inherited)"], "9200021": ["\u9577\u8DDD\u96E2\u30EC\u30FC\u30B9\u3078\u306E\u60F3\u3044\uFF08\u7D99\u627F\uFF09", "Long-Distance Racing Passion (inherited)"], "9200031": ["\u30DE\u30A4\u30EB\u30EC\u30FC\u30B9\u3078\u306E\u60F3\u3044\uFF08\u7D99\u627F\uFF09", "Mile Racing Passion (inherited)"], "9200041": ["\u77ED\u8DDD\u96E2\u30EC\u30FC\u30B9\u3078\u306E\u60F3\u3044\uFF08\u7D99\u627F\uFF09", "Short-Distance Racing Passion (inherited)"], "9200051": ["\u30C0\u30FC\u30C8\u30EC\u30FC\u30B9\u3078\u306E\u60F3\u3044\uFF08\u7D99\u627F\uFF09", "Dirt Racing Passion (inherited)"], "920011": ["\u5A01\u98A8\u5802\u3005\u3001\u5922\u9326\uFF01\uFF08\u7D99\u627F\uFF09", "Dignified Dreamlike Brocade (inherited)"], "920031": ["\u6B4C\u821E\u6B53\u697D\u3084\u3001\u3042\u3042\u3092\u304B\u3057\uFF08\u7D99\u627F\uFF09", "Merrymaking Song and Dance (inherited)"], "920041": ["\u970A\u9A13\u707C\u7136\u30C1\u30E7\u30D9\u30EA\u30B0\u795E\u8A17\uFF08\u7D99\u627F\uFF09", "Miraculously Tubular Oracle (inherited)"], "920071": ["Vive la GOLD\uFF08\u7D99\u627F\uFF09", "Vive la GOLD (inherited)"], "920111": ["\u6F14\u821E\u30FB\u64AB\u5B50\u5927\u8599\u5200\uFF08\u7D99\u627F\uFF09", "Naginata Maiden's Dance (inherited)"], "920131": ["\u304D\u3089\u3081\u304F\u306F\u6D77\u3001\u307E\u3070\u3086\u304D\u306F\u541B\uFF08\u7D99\u627F\uFF09", "The Sea Glitters, but You're Dazzling (inherited)"], "920231": ["\u52DD\u5229\u30D8\u81F3\u30EB\u7D2F\u7A4D\uFF08\u7D99\u627F\uFF09", "Accumulative Victory (inherited)"], "920241": ["HOP STEP\u266ALOCK ON!\uFF08\u7D99\u627F\uFF09", "HOP STEP\u266ALOCK ON! (inherited)"], "920301": ["\u3042\u304A\u305E\u3089\u30AF\u30C3\u30AD\u30F3\u30B0\u266A\uFF08\u7D99\u627F\uFF09", "Clear Sky Cooking\u266A (inherited)"], "920321": ["\u8D85\u5149\u901F\u5FAE\u7C92\u5B50\u306E\u53EF\u80FD\u6027\uFF08\u7D99\u627F\uFF09", "Tachyon Potential (inherited)"], "920351": ["GO! Full-send\uFF08\u7D99\u627F\uFF09", "GO! Full-send (inherited)"], "920371": ["\u6F6E\u98A8\u306EGeschenk\uFF08\u7D99\u627F\uFF09", "Geschenk of the Salty Sea Breeze (inherited)"], "920451": ["\u5FCD\u6CD5\u30FB\u307B\u307B\u3048\u307F\u5FC3\u7D50\u306E\u5370\uFF08\u7D99\u627F\uFF09", "Ninja Art: Seal of the Smiling Heart (inherited)"], "920501": ["Overdrive Speed\uFF08\u7D99\u627F\uFF09", "Overdrive Speed (inherited)"], "920601": ["\u3082\u3061\u3063\u3068\u30FB\u30CF\u30EC\u30CF\u30EC\uFF08\u7D99\u627F\uFF09", "Springy Festivities (inherited)"], "920611": ["\u7406\u60F3\u3078\u306Ewinding road\uFF08\u7D99\u627F\uFF09", "The Winding Road to Ideals (inherited)"], "920671": ["\u30DD\u30F3\u30C6\u30FB\u30C7\u30FB\u30C7\u30A3\u30A2\u30DE\u30F3\uFF08\u7D99\u627F\uFF09", "Ponte de Diamant (inherited)"], "920681": ["\u30DF\u30F3\u30CA\u30CE\u30A2\u30BF\u30B7\u3078\uFF01\uFF08\u7D99\u627F\uFF09", "Becoming Everyone's Joy! (inherited)"], "9300011": ["\u30DC\u30EB\u30C6\u30FC\u30B8\u30D2\u30FC\u30ED\u30FC\uFF08\u7D99\u627F\uFF09", "Voltage Hero (inherited)"], "9300021": ["\u30B5\u30F3\u30E9\u30A4\u30BA\u30D2\u30FC\u30ED\u30FC\uFF08\u7D99\u627F\uFF09", "Sunrise Hero (inherited)"], "9300031": ["\u30EC\u30A4\u30CB\u30FC\u30D2\u30FC\u30ED\u30FC\uFF08\u7D99\u627F\uFF09", "Rainy Hero (inherited)"], "9300041": ["\u30A4\u30F3\u30B5\u30A4\u30C9\u30D2\u30FC\u30ED\u30FC\uFF08\u7D99\u627F\uFF09", "Inside Hero (inherited)"], "9300051": ["\u30A2\u30A6\u30C8\u30B5\u30A4\u30C9\u30D2\u30FC\u30ED\u30FC\uFF08\u7D99\u627F\uFF09", "Outside Hero (inherited)"], "9300061": ["\u30EA\u30F3\u30B1\u30FC\u30B8\u30D2\u30FC\u30ED\u30FC\uFF08\u7D99\u627F\uFF09", "Linkage Hero (inherited)"], "9300071": ["\u30B9\u30D1\u30FC\u30C8\u30D2\u30FC\u30ED\u30FC\uFF08\u7D99\u627F\uFF09", "Spurt Hero (inherited)"], "9400011": ["\u30DE\u30B9\u30BF\u30FC\u30BA\u30C9\u30E9\u30A4\u30D6\uFF08\u7D99\u627F\uFF09", "Master's Drive (inherited)"] };

  // app.tsx
  function id2(x3) {
    return x3;
  }
  function GroundSelect(props) {
    return /* @__PURE__ */ y("select", { class: "groundSelect", value: props.value, onInput: (e4) => props.set(+e4.currentTarget.value) }, /* @__PURE__ */ y("option", { value: "1" }, "\u826F"), /* @__PURE__ */ y("option", { value: "2" }, "\u7A0D\u91CD"), /* @__PURE__ */ y("option", { value: "3" }, "\u91CD"), /* @__PURE__ */ y("option", { value: "4" }, "\u4E0D\u826F"));
  }
  function WeatherSelect(props) {
    function click(e4) {
      e4.stopPropagation();
      if (!("weather" in e4.target.dataset))
        return;
      props.set(+e4.target.dataset.weather);
    }
    return /* @__PURE__ */ y("div", { class: "weatherSelect", onClick: click }, Array(4).fill(0).map((_2, i4) => /* @__PURE__ */ y(
      "img",
      {
        src: `/uma-tools/icons/utx_ico_weather_0${i4}.png`,
        class: i4 + 1 == props.value ? "selected" : "",
        "data-weather": i4 + 1
      }
    )));
  }
  function SeasonSelect(props) {
    function click(e4) {
      e4.stopPropagation();
      if (!("season" in e4.target.dataset))
        return;
      props.set(+e4.target.dataset.season);
    }
    return /* @__PURE__ */ y("div", { class: "seasonSelect", onClick: click }, Array(5).fill(0).map((_2, i4) => /* @__PURE__ */ y(
      "img",
      {
        src: `/uma-tools/icons/utx_txt_season_0${i4}.png`,
        class: i4 + 1 == props.value ? "selected" : "",
        "data-season": i4 + 1
      }
    )));
  }
  function Histogram(props) {
    const { data, width, height } = props;
    const axes = _(null);
    const xH = 20;
    const yW = 40;
    const x3 = linear2().domain(
      data[0] == 0 && data[data.length - 1] == 0 ? [-1, 1] : [Math.min(0, Math.floor(data[0])), Math.ceil(data[data.length - 1])]
    ).range([yW, width - yW]);
    const bucketize = bin().value(id2).domain(x3.domain()).thresholds(x3.ticks(30));
    const buckets = bucketize(data);
    const y3 = linear2().domain([0, max2(buckets, (b3) => b3.length)]).range([height - xH, xH]);
    p2(function() {
      const g3 = select_default2(axes.current);
      g3.selectAll("*").remove();
      g3.append("g").attr("transform", `translate(0,${height - xH})`).call(axisBottom(x3));
      g3.append("g").attr("transform", `translate(${yW},0)`).call(axisLeft(y3));
    }, [data, width, height]);
    const rects = buckets.map(
      (b3, i4) => /* @__PURE__ */ y("rect", { key: i4, fill: "#2a77c5", stroke: "black", x: x3(b3.x0), y: y3(b3.length), width: x3(b3.x1) - x3(b3.x0), height: height - xH - y3(b3.length) })
    );
    return /* @__PURE__ */ y("svg", { id: "histogram", width, height }, /* @__PURE__ */ y("g", null, rects), /* @__PURE__ */ y("g", { ref: axes }));
  }
  function VelocityLines(props) {
    const y3 = linear2().domain([0, 30]).range([props.height, 0]);
    const axes = _(null);
    p2(function() {
      if (axes.current == null)
        return;
      const g3 = select_default2(axes.current);
      g3.selectAll("*").remove();
      if (props.data) {
        g3.append("g").attr("transform", `translate(20,${props.height + 5})`).call(axisBottom(x3));
      }
      g3.append("g").attr("transform", "translate(20,4)").call(axisLeft(y3));
    }, [props.data, props.width, props.height]);
    const data = props.data;
    const x3 = data && linear2().domain([0, data.t[data.t.length - 1]]).range([0, props.width]);
    const colors = ["#2a77c5", "#c52a2a"];
    return /* @__PURE__ */ y(k, null, /* @__PURE__ */ y("g", { transform: "translate(20,0)" }, data && data.v.map(
      (v3, i4) => /* @__PURE__ */ y("path", { fill: "none", stroke: colors[i4], "stroke-width": "2.5", d: line_default().x((j3) => x3(data.t[j3])).y((j3) => y3(v3[j3]))(data.t.map((_2, j3) => j3)) })
    )), /* @__PURE__ */ y("g", { ref: axes }));
  }
  var RaceParams = class extends Record({
    mood: 2,
    ground: 1 /* Good */,
    weather: 1 /* Sunny */,
    season: 1 /* Spring */,
    time: 2 /* Midday */,
    grade: 100 /* G1 */
  }) {
  };
  var DEFAULT_COURSE_ID = 10101;
  var DEFAULT_SAMPLES = 2e3;
  async function serialize(courseId, nsamples, racedef, uma1, uma2) {
    const json = JSON.stringify({
      courseId,
      nsamples,
      racedef: racedef.toJS(),
      uma1: uma1.toJS(),
      uma2: uma2.toJS()
    });
    const enc = new TextEncoder();
    const stringStream = new ReadableStream({
      start(controller) {
        controller.enqueue(enc.encode(json));
        controller.close();
      }
    });
    const zipped = stringStream.pipeThrough(new CompressionStream("gzip"));
    const reader = zipped.getReader();
    let buf = new Uint8Array();
    let result;
    while (result = await reader.read()) {
      if (result.done) {
        return encodeURIComponent(btoa(String.fromCharCode(...buf)));
      } else {
        buf = new Uint8Array([...buf, ...result.value]);
      }
    }
  }
  async function deserialize(hash3) {
    const zipped = atob(decodeURIComponent(hash3));
    const buf = new Uint8Array(zipped.split("").map((c3) => c3.charCodeAt(0)));
    const stringStream = new ReadableStream({
      start(controller) {
        controller.enqueue(buf);
        controller.close();
      }
    });
    const unzipped = stringStream.pipeThrough(new DecompressionStream("gzip"));
    const reader = unzipped.getReader();
    const decoder = new TextDecoder();
    let json = "";
    let result;
    while (result = await reader.read()) {
      if (result.done) {
        try {
          const o4 = JSON.parse(json);
          return {
            courseId: o4.courseId,
            nsamples: o4.nsamples,
            racedef: new RaceParams(o4.racedef),
            uma1: new HorseState(o4.uma1).set("skills", SkillSet(o4.uma1.skills)),
            uma2: new HorseState(o4.uma2).set("skills", SkillSet(o4.uma2.skills))
          };
        } catch (_2) {
          return {
            courseId: DEFAULT_COURSE_ID,
            nsamples: DEFAULT_SAMPLES,
            racedef: new RaceParams(),
            uma1: new HorseState(),
            uma2: new HorseState()
          };
        }
      } else {
        json += decoder.decode(result.value);
      }
    }
  }
  function App(props) {
    const [skillsOpen, setSkillsOpen] = h2(false);
    const [racedef, setRaceDef] = h2(() => new RaceParams());
    const [nsamples, setSamples] = h2(DEFAULT_SAMPLES);
    const [{ courseId, results, runData }, setSimState] = s2((state, o4) => {
      if (typeof o4 == "number") {
        return {
          courseId: o4,
          results: [],
          runData: null
        };
      } else {
        return {
          courseId: state.courseId,
          results: o4.results,
          runData: o4.runData
        };
      }
    }, { courseId: DEFAULT_COURSE_ID, results: [], runData: null });
    const setCourseId = setSimState;
    const setResults = (results2, runData2) => setSimState({ results: results2, runData: runData2 });
    function racesetter(prop) {
      return (value) => setRaceDef(racedef.set(prop, value));
    }
    const course = F2(() => CourseHelpers.getCourse(courseId), [courseId]);
    const [uma1, setUma1] = h2(() => new HorseState());
    const [uma2, setUma2] = h2(() => new HorseState());
    p2(function() {
      if (window.location.hash) {
        deserialize(window.location.hash.slice(1)).then((o4) => {
          setCourseId(o4.courseId);
          setSamples(o4.nsamples);
          setRaceDef(o4.racedef);
          setUma1(o4.uma1);
          setUma2(o4.uma2);
        });
      }
    }, []);
    function copyStateUrl(e4) {
      e4.preventDefault();
      serialize(courseId, nsamples, racedef, uma1, uma2).then((hash3) => {
        const url = window.location.protocol + "//" + window.location.host + window.location.pathname;
        window.navigator.clipboard.writeText(url + "#" + hash3);
      });
    }
    function copyUmaToRight() {
      setUma2(uma1);
    }
    function copyUmaToLeft() {
      setUma1(uma2);
    }
    const strings = { skillnames: {}, tracknames: TRACKNAMES_en };
    const langid = +(props.lang == "en");
    Object.keys(skillnames_default).forEach((id3) => strings.skillnames[id3] = skillnames_default[id3][langid]);
    function doComparison() {
      const standard = new RaceSolverBuilder(nsamples * 2).seed(2615953739).course(course).mood(racedef.mood).ground(racedef.ground).weather(racedef.weather).season(racedef.season).time(racedef.time);
      const compare = standard.fork();
      standard.horse(uma1);
      compare.horse(uma2);
      uma1.skills.forEach((id3) => standard.addSkill(id3));
      uma2.skills.forEach((id3) => compare.addSkill(id3));
      standard.withAsiwotameru();
      standard.useDefaultPacer();
      compare.withAsiwotameru();
      compare.useDefaultPacer();
      let a4 = standard.build(), b3 = compare.build();
      let sign = 1;
      const diff = [];
      let minrun, maxrun, meanrun, medianrun;
      for (let i4 = 0; i4 < nsamples; ++i4) {
        const s1 = a4.next().value;
        const s22 = b3.next().value;
        const data = { t: [], v: [[], []] };
        while (s22.pos < course.distance) {
          s22.step(1 / 15);
          data.t.push(s22.accumulatetime.t);
          data.v[1].push(s22.currentSpeed + (s22.modifiers.currentSpeed.acc + s22.modifiers.currentSpeed.err));
        }
        while (s1.accumulatetime.t < s22.accumulatetime.t) {
          s1.step(1 / 15);
          data.v[0].push(s1.currentSpeed + (s1.modifiers.currentSpeed.acc + s1.modifiers.currentSpeed.err));
        }
        if (s22.pos < s1.pos) {
          [b3, a4] = [a4, b3];
          sign *= -1;
          --i4;
        } else {
          diff.push(sign * (s22.pos - s1.pos) / 2.5);
          minrun = data;
        }
      }
      diff.sort((a5, b4) => a5 - b4);
      setResults(diff, { minrun });
    }
    function rtMouseMove(pos) {
      if (runData == null)
        return;
      const data = runData.minrun;
      document.getElementById("rtMouseOverBox").style.display = "block";
      document.getElementById("rtT").textContent = data.t[Math.floor(pos * data.t.length)].toFixed(2) + " s";
      document.getElementById("rtV1").textContent = data.v[0][Math.floor(pos * data.t.length)].toFixed(2) + " m/s";
      document.getElementById("rtV2").textContent = data.v[1][Math.floor(pos * data.t.length)].toFixed(2) + " m/s";
    }
    function rtMouseLeave() {
      document.getElementById("rtMouseOverBox").style.display = "none";
    }
    const mid = Math.floor(results.length / 2);
    const median = results.length % 2 == 0 ? (results[mid - 1] + results[mid]) / 2 : results[mid];
    const mean = results.reduce((a4, b3) => a4 + b3, 0) / results.length;
    return /* @__PURE__ */ y(Language.Provider, { value: props.lang }, /* @__PURE__ */ y(IntlProvider, { definition: strings }, /* @__PURE__ */ y("div", { id: "topPane" }, /* @__PURE__ */ y(RaceTrack, { courseid: courseId, width: 960, height: 220, xOffset: 20, yOffset: 5, yExtra: 20, mouseMove: rtMouseMove, mouseLeave: rtMouseLeave }, /* @__PURE__ */ y(VelocityLines, { data: runData && runData.minrun, width: 960, height: 220 }), /* @__PURE__ */ y("g", { id: "rtMouseOverBox", style: "display:none" }, /* @__PURE__ */ y("text", { id: "rtV1", x: "25", y: "10", fill: "#2a77c5", "font-size": "10px" }), /* @__PURE__ */ y("text", { id: "rtV2", x: "25", y: "20", fill: "#c52a2a", "font-size": "10px" }), /* @__PURE__ */ y("text", { id: "rtT", x: "25", y: "30", fill: "black", "font-size": "10px" }))), /* @__PURE__ */ y("div", { id: "runPane" }, /* @__PURE__ */ y("label", { for: "nsamples" }, "Samples:"), /* @__PURE__ */ y("input", { type: "number", id: "nsamples", min: "1", max: "10000", value: nsamples, onInput: (e4) => setSamples(+e4.currentTarget.value) }), /* @__PURE__ */ y("button", { id: "run", onClick: doComparison, tabindex: 1 }, "COMPARE"), /* @__PURE__ */ y("a", { href: "#", onClick: copyStateUrl }, "Copy link")), /* @__PURE__ */ y("div", { id: "buttonsRow" }, /* @__PURE__ */ y(TrackSelect, { key: courseId, courseid: courseId, setCourseid: setCourseId, tabindex: 2 }), /* @__PURE__ */ y("div", { id: "buttonsRowSpace" }), /* @__PURE__ */ y(GroundSelect, { value: racedef.ground, set: racesetter("ground") }), /* @__PURE__ */ y(WeatherSelect, { value: racedef.weather, set: racesetter("weather") }), /* @__PURE__ */ y(SeasonSelect, { value: racedef.season, set: racesetter("season") }))), results.length > 0 && /* @__PURE__ */ y("div", { id: "resultsPane" }, /* @__PURE__ */ y("table", { id: "resultsSummary" }, /* @__PURE__ */ y("tfoot", null, /* @__PURE__ */ y("tr", null, /* @__PURE__ */ y("th", { scope: "col" }, "Minimum"), /* @__PURE__ */ y("th", { scope: "col" }, "Maximum"), /* @__PURE__ */ y("th", { scope: "col" }, "Mean"), /* @__PURE__ */ y("th", { scope: "col" }, "Median"))), /* @__PURE__ */ y("tbody", null, /* @__PURE__ */ y("tr", null, /* @__PURE__ */ y("th", null, results[0].toFixed(2), /* @__PURE__ */ y("span", { class: "unit-basinn" }, "\u30D0\u8EAB")), /* @__PURE__ */ y("th", null, results[results.length - 1].toFixed(2), /* @__PURE__ */ y("span", { class: "unit-basinn" }, "\u30D0\u8EAB")), /* @__PURE__ */ y("th", null, mean.toFixed(2), /* @__PURE__ */ y("span", { class: "unit-basinn" }, "\u30D0\u8EAB")), /* @__PURE__ */ y("th", null, median.toFixed(2), /* @__PURE__ */ y("span", { class: "unit-basinn" }, "\u30D0\u8EAB"))))), /* @__PURE__ */ y("div", { id: "resultsHelp" }, "Negative numbers mean ", /* @__PURE__ */ y("strong", { style: "color:#c52a2a" }, "left"), " is faster, positive numbers mean ", /* @__PURE__ */ y("strong", { style: "color:#2a77c5" }, "right"), " is faster."), /* @__PURE__ */ y(Histogram, { width: 500, height: 333, data: results })), /* @__PURE__ */ y("div", { id: "experimentsWrapper" }, /* @__PURE__ */ y(HorseDef, { key: uma1.outfitId, title: "Umamusume 1", state: uma1, setState: setUma1, courseDistance: course.distance, tabstart: () => 4 }), /* @__PURE__ */ y("div", { id: "copyUmaButtons" }, /* @__PURE__ */ y("div", { id: "copyUmaToRight", onClick: copyUmaToRight }), /* @__PURE__ */ y("div", { id: "copyUmaToLeft", onClick: copyUmaToLeft })), /* @__PURE__ */ y(HorseDef, { key: uma2.outfitId, title: "Umamusume 2", state: uma2, setState: setUma2, courseDistance: course.distance, tabstart: () => 4 + horseDefTabs() }))));
  }
  B(/* @__PURE__ */ y(App, { lang: "en-ja" }), document.getElementById("app"));
})();
/*! Bundled license information:

immutable/dist/immutable.es.js:
  (**
   * @license
   * MIT License
   * 
   * Copyright (c) 2014-present, Lee Byron and other contributors.
   * 
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   * 
   * The above copyright notice and this permission notice shall be included in all
   * copies or substantial portions of the Software.
   * 
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
   * SOFTWARE.
   *)
*/
